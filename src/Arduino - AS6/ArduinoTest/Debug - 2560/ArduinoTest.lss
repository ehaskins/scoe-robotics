
ArduinoTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800200  000076d6  0000776a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000076d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004cd  00800318  00800318  00007882  2**0
                  ALLOC
  3 .stab         00003864  00000000  00000000  00007884  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ec4  00000000  00000000  0000b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000460  00000000  00000000  0000bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014b74  00000000  00000000  0000c410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bf0  00000000  00000000  00020f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003879  00000000  00000000  00024b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000285c  00000000  00000000  000283f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000042ef  00000000  00000000  0002ac4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ca65  00000000  00000000  0002ef3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  0003b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 01 	jmp	0x212	; 0x212 <__ctors_end>
       4:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
       8:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
       c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      10:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      14:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      18:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      1c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      20:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      24:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      28:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      2c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      30:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      34:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      38:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      3c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      40:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      44:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      48:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      4c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      50:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      54:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      58:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      5c:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__vector_23>
      60:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      64:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__vector_25>
      68:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <__vector_26>
      6c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      70:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      74:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      78:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      7c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      80:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      84:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      88:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      8c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      90:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__vector_36>
      94:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__vector_37>
      98:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      9c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      a0:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      a4:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      a8:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      ac:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      b0:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      b4:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      b8:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      bc:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      c0:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      c4:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      c8:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      cc:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <__vector_51>
      d0:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <__vector_52>
      d4:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
      d8:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__vector_54>
      dc:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__vector_55>
      e0:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>

000000e4 <digital_pin_to_timer_PGM>:
      e4:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     110:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000012a <digital_pin_to_bit_mask_PGM>:
     12a:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     13a:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     14a:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     15a:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     16a:	04 08 10 20 40 80                                   ... @.

00000170 <digital_pin_to_port_PGM>:
     170:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     180:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     190:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1a0:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1b0:	0b 0b 0b 0b 0b 0b                                   ......

000001b6 <port_to_input_PGM>:
     1b6:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1c6:	00 01 00 00 03 01 06 01 09 01                       ..........

000001d0 <port_to_output_PGM>:
     1d0:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1e0:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001ea <port_to_mode_PGM>:
     1ea:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     1fa:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000204 <__ctors_start>:
     204:	7a 02       	muls	r23, r26
     206:	42 05       	cpc	r20, r2
     208:	69 07       	cpc	r22, r25
     20a:	4e 12       	cpse	r4, r30
     20c:	aa 13       	cpse	r26, r26
     20e:	e5 28       	or	r14, r5
     210:	45 2c       	mov	r4, r5

00000212 <__ctors_end>:
     212:	11 24       	eor	r1, r1
     214:	1f be       	out	0x3f, r1	; 63
     216:	cf ef       	ldi	r28, 0xFF	; 255
     218:	d1 e2       	ldi	r29, 0x21	; 33
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0c bf       	out	0x3c, r16	; 60

00000222 <__do_copy_data>:
     222:	13 e0       	ldi	r17, 0x03	; 3
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b2 e0       	ldi	r27, 0x02	; 2
     228:	e6 ed       	ldi	r30, 0xD6	; 214
     22a:	f6 e7       	ldi	r31, 0x76	; 118
     22c:	00 e0       	ldi	r16, 0x00	; 0
     22e:	0b bf       	out	0x3b, r16	; 59
     230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x14>
     232:	07 90       	elpm	r0, Z+
     234:	0d 92       	st	X+, r0
     236:	a8 31       	cpi	r26, 0x18	; 24
     238:	b1 07       	cpc	r27, r17
     23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0x10>

0000023c <__do_clear_bss>:
     23c:	17 e0       	ldi	r17, 0x07	; 7
     23e:	a8 e1       	ldi	r26, 0x18	; 24
     240:	b3 e0       	ldi	r27, 0x03	; 3
     242:	01 c0       	rjmp	.+2      	; 0x246 <.do_clear_bss_start>

00000244 <.do_clear_bss_loop>:
     244:	1d 92       	st	X+, r1

00000246 <.do_clear_bss_start>:
     246:	a5 3e       	cpi	r26, 0xE5	; 229
     248:	b1 07       	cpc	r27, r17
     24a:	e1 f7       	brne	.-8      	; 0x244 <.do_clear_bss_loop>

0000024c <__do_global_ctors>:
     24c:	12 e0       	ldi	r17, 0x02	; 2
     24e:	c2 e1       	ldi	r28, 0x12	; 18
     250:	d2 e0       	ldi	r29, 0x02	; 2
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	06 c0       	rjmp	.+12     	; 0x262 <__do_global_ctors+0x16>
     256:	22 97       	sbiw	r28, 0x02	; 2
     258:	01 09       	sbc	r16, r1
     25a:	fe 01       	movw	r30, r28
     25c:	0b bf       	out	0x3b, r16	; 59
     25e:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <__tablejump_elpm__>
     262:	c4 30       	cpi	r28, 0x04	; 4
     264:	d1 07       	cpc	r29, r17
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	08 07       	cpc	r16, r24
     26a:	a9 f7       	brne	.-22     	; 0x256 <__do_global_ctors+0xa>
     26c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <main>
     270:	0c 94 69 3b 	jmp	0x76d2	; 0x76d2 <_exit>

00000274 <__bad_interrupt>:
     274:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000278 <setup>:
	}
        
	return 0;
}

void setup() {
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
	init();
     284:	0e 94 1e 18 	call	0x303c	; 0x303c <init>

	Serial.begin(115200);
     288:	85 e8       	ldi	r24, 0x85	; 133
     28a:	95 e0       	ldi	r25, 0x05	; 5
     28c:	40 e0       	ldi	r20, 0x00	; 0
     28e:	52 ec       	ldi	r21, 0xC2	; 194
     290:	61 e0       	ldi	r22, 0x01	; 1
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	0e 94 20 11 	call	0x2240	; 0x2240 <_ZN14HardwareSerial5beginEm>

	//gyroDef = new AnalogGyroDefinition();
	//gyroDef->pin = 0;

	// Controls the robot status light.
	RslModelSection * rsl = new RslModelSection();
     298:	89 e0       	ldi	r24, 0x09	; 9
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 b5 13 	call	0x276a	; 0x276a <_Znwj>
     2a0:	8c 01       	movw	r16, r24
     2a2:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <_ZN15RslModelSectionC1Ev>



void init(){
	int result;
	if (isDhcp){
     2a6:	80 91 22 03 	lds	r24, 0x0322
     2aa:	88 23       	and	r24, r24
     2ac:	41 f0       	breq	.+16     	; 0x2be <setup+0x46>
		result = Ethernet.begin(macAddress);
     2ae:	86 ef       	ldi	r24, 0xF6	; 246
     2b0:	94 e0       	ldi	r25, 0x04	; 4
     2b2:	6c e1       	ldi	r22, 0x1C	; 28
     2b4:	73 e0       	ldi	r23, 0x03	; 3
     2b6:	0e 94 96 02 	call	0x52c	; 0x52c <_ZN13EthernetClass5beginEPh>
     2ba:	7c 01       	movw	r14, r24
     2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <setup+0x4c>
	}
	else{
		result = -1;//Ethernet.begin(macAddress, ipAddress);
     2be:	ee 24       	eor	r14, r14
     2c0:	ea 94       	dec	r14
     2c2:	fe 2c       	mov	r15, r14
	}
	
	Udp.begin(receivePort);
     2c4:	c1 e4       	ldi	r28, 0x41	; 65
     2c6:	d3 e0       	ldi	r29, 0x03	; 3
     2c8:	60 91 2a 03 	lds	r22, 0x032A
     2cc:	70 91 2b 03 	lds	r23, 0x032B
     2d0:	ce 01       	movw	r24, r28
     2d2:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN11EthernetUDP5beginEj>
	initSuccessful = result == 0;
     2d6:	68 97       	sbiw	r28, 0x18	; 24
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	e1 14       	cp	r14, r1
     2dc:	f1 04       	cpc	r15, r1
     2de:	09 f0       	breq	.+2      	; 0x2e2 <setup+0x6a>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	88 83       	st	Y, r24
	//
	//// Controls data acquisition from the quadrature shaft encoders.
	//EncoderModelSection *enc = new EncoderModelSection();

	beagleComm.init();
	beagleComm.robotModel.addSection(rsl);
     2e4:	8d e2       	ldi	r24, 0x2D	; 45
     2e6:	93 e0       	ldi	r25, 0x03	; 3
     2e8:	b8 01       	movw	r22, r16
     2ea:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <_ZN10RobotModel10addSectionEP17RobotModelSection>
	//beagleComm.robotModel.addSection(analog);
	//beagleComm.robotModel.addSection(dio);
	//beagleComm.robotModel.addSection(dutyCycle);
	//beagleComm.robotModel.addSection(enc);

	Serial.println("Ready.");
     2ee:	85 e8       	ldi	r24, 0x85	; 133
     2f0:	95 e0       	ldi	r25, 0x05	; 5
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	72 e0       	ldi	r23, 0x02	; 2
     2f6:	0e 94 bd 14 	call	0x297a	; 0x297a <_ZN5Print7printlnEPKc>
}
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	08 95       	ret

00000308 <loop>:

unsigned long startMillis = 0;

void loop() {
     308:	4f 92       	push	r4
     30a:	5f 92       	push	r5
     30c:	6f 92       	push	r6
     30e:	7f 92       	push	r7
     310:	8f 92       	push	r8
     312:	9f 92       	push	r9
     314:	af 92       	push	r10
     316:	bf 92       	push	r11
     318:	cf 92       	push	r12
     31a:	df 92       	push	r13
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
     32c:	28 97       	sbiw	r28, 0x08	; 8
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
}

void poll(){
	unsigned long now = millis();
     338:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
     33c:	2b 01       	movw	r4, r22
     33e:	3c 01       	movw	r6, r24
	//Handle rollover. Vehicle should never be on that long, but...
	if (now < lastDataReceived) {
     340:	80 91 ec 04 	lds	r24, 0x04EC
     344:	90 91 ed 04 	lds	r25, 0x04ED
     348:	a0 91 ee 04 	lds	r26, 0x04EE
     34c:	b0 91 ef 04 	lds	r27, 0x04EF
     350:	48 16       	cp	r4, r24
     352:	59 06       	cpc	r5, r25
     354:	6a 06       	cpc	r6, r26
     356:	7b 06       	cpc	r7, r27
     358:	40 f4       	brcc	.+16     	; 0x36a <loop+0x62>
		lastDataReceived = 0;
     35a:	10 92 ec 04 	sts	0x04EC, r1
     35e:	10 92 ed 04 	sts	0x04ED, r1
     362:	10 92 ee 04 	sts	0x04EE, r1
     366:	10 92 ef 04 	sts	0x04EF, r1
	}
	
	int packetSize = Udp.parsePacket();
     36a:	81 e4       	ldi	r24, 0x41	; 65
     36c:	93 e0       	ldi	r25, 0x03	; 3
     36e:	0e 94 37 06 	call	0xc6e	; 0xc6e <_ZN11EthernetUDP11parsePacketEv>
     372:	8c 01       	movw	r16, r24
	if (packetSize > 0){
     374:	18 16       	cp	r1, r24
     376:	19 06       	cpc	r1, r25
     378:	0c f0       	brlt	.+2      	; 0x37c <loop+0x74>
     37a:	6d c0       	rjmp	.+218    	; 0x456 <loop+0x14e>
		Serial.print("Received:");
     37c:	0f 2e       	mov	r0, r31
     37e:	f5 e8       	ldi	r31, 0x85	; 133
     380:	af 2e       	mov	r10, r31
     382:	f5 e0       	ldi	r31, 0x05	; 5
     384:	bf 2e       	mov	r11, r31
     386:	f0 2d       	mov	r31, r0
     388:	c5 01       	movw	r24, r10
     38a:	67 e0       	ldi	r22, 0x07	; 7
     38c:	72 e0       	ldi	r23, 0x02	; 2
     38e:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN5Print5printEPKc>
		Serial.print(packetSize);
     392:	c5 01       	movw	r24, r10
     394:	b8 01       	movw	r22, r16
     396:	4a e0       	ldi	r20, 0x0A	; 10
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <_ZN5Print5printEii>
		Udp.read(receiveBuffer, 200);
     39e:	0f 2e       	mov	r0, r31
     3a0:	f1 e4       	ldi	r31, 0x41	; 65
     3a2:	cf 2e       	mov	r12, r31
     3a4:	f3 e0       	ldi	r31, 0x03	; 3
     3a6:	df 2e       	mov	r13, r31
     3a8:	f0 2d       	mov	r31, r0
     3aa:	0f 2e       	mov	r0, r31
     3ac:	fb e1       	ldi	r31, 0x1B	; 27
     3ae:	ef 2e       	mov	r14, r31
     3b0:	ff 24       	eor	r15, r15
     3b2:	f0 2d       	mov	r31, r0
     3b4:	ec 0c       	add	r14, r12
     3b6:	fd 1c       	adc	r15, r13
     3b8:	c6 01       	movw	r24, r12
     3ba:	b7 01       	movw	r22, r14
     3bc:	48 ec       	ldi	r20, 0xC8	; 200
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
		
		robotModel.update(receiveBuffer, 0, packetSize);
     3c4:	0f 2e       	mov	r0, r31
     3c6:	fc ee       	ldi	r31, 0xEC	; 236
     3c8:	8f 2e       	mov	r8, r31
     3ca:	ff ef       	ldi	r31, 0xFF	; 255
     3cc:	9f 2e       	mov	r9, r31
     3ce:	f0 2d       	mov	r31, r0
     3d0:	8c 0c       	add	r8, r12
     3d2:	9d 1c       	adc	r9, r13
     3d4:	c4 01       	movw	r24, r8
     3d6:	b7 01       	movw	r22, r14
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	98 01       	movw	r18, r16
     3de:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <_ZN10RobotModel6updateEPhjj>
		
		unsigned int transmitLength = 0;
     3e2:	18 86       	std	Y+8, r1	; 0x08
     3e4:	1f 82       	std	Y+7, r1	; 0x07
		robotModel.getStatus(transmitBuffer, &transmitLength);
     3e6:	04 e2       	ldi	r16, 0x24	; 36
     3e8:	14 e0       	ldi	r17, 0x04	; 4
     3ea:	c4 01       	movw	r24, r8
     3ec:	b8 01       	movw	r22, r16
     3ee:	ae 01       	movw	r20, r28
     3f0:	49 5f       	subi	r20, 0xF9	; 249
     3f2:	5f 4f       	sbci	r21, 0xFF	; 255
     3f4:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <_ZN10RobotModel9getStatusEPhPj>
		
		Serial.print(" Sending:");
     3f8:	c5 01       	movw	r24, r10
     3fa:	61 e1       	ldi	r22, 0x11	; 17
     3fc:	72 e0       	ldi	r23, 0x02	; 2
     3fe:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN5Print5printEPKc>
		Serial.println(transmitLength);
     402:	6f 81       	ldd	r22, Y+7	; 0x07
     404:	78 85       	ldd	r23, Y+8	; 0x08
     406:	c5 01       	movw	r24, r10
     408:	4a e0       	ldi	r20, 0x0A	; 10
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <_ZN5Print7printlnEji>

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
     410:	83 ea       	ldi	r24, 0xA3	; 163
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	9a 83       	std	Y+2, r25	; 0x02
     416:	89 83       	std	Y+1, r24	; 0x01
     418:	80 91 52 03 	lds	r24, 0x0352
     41c:	90 91 53 03 	lds	r25, 0x0353
     420:	a0 91 54 03 	lds	r26, 0x0354
     424:	b0 91 55 03 	lds	r27, 0x0355
     428:	8b 83       	std	Y+3, r24	; 0x03
     42a:	9c 83       	std	Y+4, r25	; 0x04
     42c:	ad 83       	std	Y+5, r26	; 0x05
     42e:	be 83       	std	Y+6, r27	; 0x06
		
		Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
     430:	40 91 56 03 	lds	r20, 0x0356
     434:	50 91 57 03 	lds	r21, 0x0357
     438:	c6 01       	movw	r24, r12
     43a:	be 01       	movw	r22, r28
     43c:	6f 5f       	subi	r22, 0xFF	; 255
     43e:	7f 4f       	sbci	r23, 0xFF	; 255
     440:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN11EthernetUDP11beginPacketE9IPAddressj>
		Udp.write(transmitBuffer, transmitLength);
     444:	4f 81       	ldd	r20, Y+7	; 0x07
     446:	58 85       	ldd	r21, Y+8	; 0x08
     448:	c6 01       	movw	r24, r12
     44a:	b8 01       	movw	r22, r16
     44c:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>
		Udp.endPacket();
     450:	c6 01       	movw	r24, r12
     452:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN11EthernetUDP9endPacketEv>
	}
	
	unsigned long safeTime = lastDataReceived + RECEIVE_SAFTEY_DELAY;
     456:	80 91 ec 04 	lds	r24, 0x04EC
     45a:	90 91 ed 04 	lds	r25, 0x04ED
     45e:	a0 91 ee 04 	lds	r26, 0x04EE
     462:	b0 91 ef 04 	lds	r27, 0x04EF
     466:	8c 50       	subi	r24, 0x0C	; 12
     468:	9e 4f       	sbci	r25, 0xFE	; 254
     46a:	af 4f       	sbci	r26, 0xFF	; 255
     46c:	bf 4f       	sbci	r27, 0xFF	; 255
	isConnected = now > safeTime;
     46e:	61 e0       	ldi	r22, 0x01	; 1
     470:	84 15       	cp	r24, r4
     472:	95 05       	cpc	r25, r5
     474:	a6 05       	cpc	r26, r6
     476:	b7 05       	cpc	r27, r7
     478:	08 f0       	brcs	.+2      	; 0x47c <loop+0x174>
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	60 93 2c 03 	sts	0x032C, r22
	robotModel.loop(isConnected);
     480:	8d e2       	ldi	r24, 0x2D	; 45
     482:	93 e0       	ldi	r25, 0x03	; 3
     484:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <_ZN10RobotModel4loopEb>
	beagleComm.poll();

	unsigned long now = millis();
     488:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
     48c:	ab 01       	movw	r20, r22
     48e:	bc 01       	movw	r22, r24
	if (startMillis == 0)
     490:	80 91 18 03 	lds	r24, 0x0318
     494:	90 91 19 03 	lds	r25, 0x0319
     498:	a0 91 1a 03 	lds	r26, 0x031A
     49c:	b0 91 1b 03 	lds	r27, 0x031B
     4a0:	00 97       	sbiw	r24, 0x00	; 0
     4a2:	a1 05       	cpc	r26, r1
     4a4:	b1 05       	cpc	r27, r1
     4a6:	41 f4       	brne	.+16     	; 0x4b8 <loop+0x1b0>
	startMillis = now;
     4a8:	40 93 18 03 	sts	0x0318, r20
     4ac:	50 93 19 03 	sts	0x0319, r21
     4b0:	60 93 1a 03 	sts	0x031A, r22
     4b4:	70 93 1b 03 	sts	0x031B, r23

	//bool cal = (now - startMillis < 1000);
	//gyroDef->update(cal);
	//Serial.println((long) gyroDef->value);
}
     4b8:	28 96       	adiw	r28, 0x08	; 8
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	ff 90       	pop	r15
     4ce:	ef 90       	pop	r14
     4d0:	df 90       	pop	r13
     4d2:	cf 90       	pop	r12
     4d4:	bf 90       	pop	r11
     4d6:	af 90       	pop	r10
     4d8:	9f 90       	pop	r9
     4da:	8f 90       	pop	r8
     4dc:	7f 90       	pop	r7
     4de:	6f 90       	pop	r6
     4e0:	5f 90       	pop	r5
     4e2:	4f 90       	pop	r4
     4e4:	08 95       	ret

000004e6 <main>:
UdpComms beagleComm;

//AnalogGyroDefinition * gyroDef;
int main(void)
{
	init();
     4e6:	0e 94 1e 18 	call	0x303c	; 0x303c <init>

	/*#if defined(USBCON)
	USBDevice.attach();
	#endif*/
	
	setup();
     4ea:	0e 94 3c 01 	call	0x278	; 0x278 <setup>
    
	for (;;) {
		loop();
     4ee:	0e 94 84 01 	call	0x308	; 0x308 <loop>
     4f2:	fd cf       	rjmp	.-6      	; 0x4ee <main+0x8>

000004f4 <_GLOBAL__sub_I_beagleComm>:
	startMillis = now;

	//bool cal = (now - startMillis < 1000);
	//gyroDef->update(cal);
	//Serial.println((long) gyroDef->value);
}
     4f4:	0f 93       	push	r16
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     4fa:	80 ef       	ldi	r24, 0xF0	; 240
     4fc:	94 e0       	ldi	r25, 0x04	; 4
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	00 e0       	ldi	r16, 0x00	; 0
     506:	0e 94 5f 13 	call	0x26be	; 0x26be <_ZN9IPAddressC1Ehhhh>
#include <Ethernet\EthernetUdp.h>
#include <RobotModel\RobotModel.h>

class UdpComms {
	public:
UdpComms(){}
     50a:	c3 e2       	ldi	r28, 0x23	; 35
     50c:	d3 e0       	ldi	r29, 0x03	; 3
     50e:	ce 01       	movw	r24, r28
     510:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN9IPAddressC1Ev>
     514:	ce 01       	movw	r24, r28
     516:	0a 96       	adiw	r24, 0x0a	; 10
     518:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <_ZN10RobotModelC1Ev>
     51c:	ce 01       	movw	r24, r28
     51e:	4e 96       	adiw	r24, 0x1e	; 30
     520:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN11EthernetUDPC1Ev>
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <_ZN13EthernetClass5beginEPh>:
  0, 0, 0, 0 };
uint16_t EthernetClass::_server_port[MAX_SOCK_NUM] = { 
  0, 0, 0, 0 };

int EthernetClass::begin(uint8_t *mac_address)
{
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	6e 97       	sbiw	r28, 0x1e	; 30
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	de bf       	out	0x3e, r29	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	cd bf       	out	0x3d, r28	; 61
     54c:	6c 01       	movw	r12, r24
     54e:	7b 01       	movw	r14, r22
  _dhcp = new DhcpClass();
     550:	82 e6       	ldi	r24, 0x62	; 98
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 b5 13 	call	0x276a	; 0x276a <_Znwj>
     558:	8c 01       	movw	r16, r24
     55a:	82 e6       	ldi	r24, 0x62	; 98
     55c:	f8 01       	movw	r30, r16
     55e:	11 92       	st	Z+, r1
     560:	8a 95       	dec	r24
     562:	e9 f7       	brne	.-6      	; 0x55e <_ZN13EthernetClass5beginEPh+0x32>
	uint8_t  siaddr[4];
	uint8_t  giaddr[4];
	uint8_t  chaddr[6];
}RIP_MSG_FIXED;

class DhcpClass {
     564:	c8 01       	movw	r24, r16
     566:	89 5b       	subi	r24, 0xB9	; 185
     568:	9f 4f       	sbci	r25, 0xFF	; 255
     56a:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN11EthernetUDPC1Ev>
     56e:	f6 01       	movw	r30, r12
     570:	17 83       	std	Z+7, r17	; 0x07
     572:	06 83       	std	Z+6, r16	; 0x06


  // Initialise the basic info
  W5100.init();
     574:	88 e1       	ldi	r24, 0x18	; 24
     576:	95 e0       	ldi	r25, 0x05	; 5
     578:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN10W5100Class4initEv>

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
     57c:	89 e0       	ldi	r24, 0x09	; 9
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	b7 01       	movw	r22, r14
     582:	46 e0       	ldi	r20, 0x06	; 6
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
  W5100.setMACAddress(mac_address);
  W5100.setIPAddress(IPAddress(0,0,0,0).raw_address());
     58a:	ce 01       	movw	r24, r28
     58c:	49 96       	adiw	r24, 0x19	; 25
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	40 e0       	ldi	r20, 0x00	; 0
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	00 e0       	ldi	r16, 0x00	; 0
     596:	0e 94 5f 13 	call	0x26be	; 0x26be <_ZN9IPAddressC1Ehhhh>
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
     59a:	8f e0       	ldi	r24, 0x0F	; 15
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	be 01       	movw	r22, r28
     5a0:	65 5e       	subi	r22, 0xE5	; 229
     5a2:	7f 4f       	sbci	r23, 0xFF	; 255
     5a4:	44 e0       	ldi	r20, 0x04	; 4
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>

  // Now try to get our config info from a DHCP server
  int ret = _dhcp->beginWithDHCP(mac_address);
     5ac:	f6 01       	movw	r30, r12
     5ae:	86 81       	ldd	r24, Z+6	; 0x06
     5b0:	97 81       	ldd	r25, Z+7	; 0x07
     5b2:	b7 01       	movw	r22, r14
     5b4:	20 e6       	ldi	r18, 0x60	; 96
     5b6:	3a ee       	ldi	r19, 0xEA	; 234
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	0f 2e       	mov	r0, r31
     5be:	f0 ea       	ldi	r31, 0xA0	; 160
     5c0:	ef 2e       	mov	r14, r31
     5c2:	ff e0       	ldi	r31, 0x0F	; 15
     5c4:	ff 2e       	mov	r15, r31
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	0f 2f       	mov	r16, r31
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	1f 2f       	mov	r17, r31
     5ce:	f0 2d       	mov	r31, r0
     5d0:	0e 94 99 28 	call	0x5132	; 0x5132 <_ZN9DhcpClass13beginWithDHCPEPhmm>
     5d4:	8c 01       	movw	r16, r24
  if(ret == 1)
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	91 05       	cpc	r25, r1
     5da:	09 f0       	breq	.+2      	; 0x5de <_ZN13EthernetClass5beginEPh+0xb2>
     5dc:	40 c0       	rjmp	.+128    	; 0x65e <_ZN13EthernetClass5beginEPh+0x132>
  {
    // We've successfully found a DHCP server and got our configuration info, so set things
    // accordingly
    W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
     5de:	f6 01       	movw	r30, r12
     5e0:	66 81       	ldd	r22, Z+6	; 0x06
     5e2:	77 81       	ldd	r23, Z+7	; 0x07
     5e4:	ce 01       	movw	r24, r28
     5e6:	43 96       	adiw	r24, 0x13	; 19
     5e8:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <_ZN9DhcpClass10getLocalIpEv>
     5ec:	8f e0       	ldi	r24, 0x0F	; 15
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	be 01       	movw	r22, r28
     5f2:	6b 5e       	subi	r22, 0xEB	; 235
     5f4:	7f 4f       	sbci	r23, 0xFF	; 255
     5f6:	44 e0       	ldi	r20, 0x04	; 4
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
    W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
     5fe:	f6 01       	movw	r30, r12
     600:	66 81       	ldd	r22, Z+6	; 0x06
     602:	77 81       	ldd	r23, Z+7	; 0x07
     604:	ce 01       	movw	r24, r28
     606:	0d 96       	adiw	r24, 0x0d	; 13
     608:	0e 94 92 24 	call	0x4924	; 0x4924 <_ZN9DhcpClass12getGatewayIpEv>
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	be 01       	movw	r22, r28
     612:	61 5f       	subi	r22, 0xF1	; 241
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	44 e0       	ldi	r20, 0x04	; 4
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
    W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
     61e:	f6 01       	movw	r30, r12
     620:	66 81       	ldd	r22, Z+6	; 0x06
     622:	77 81       	ldd	r23, Z+7	; 0x07
     624:	ce 01       	movw	r24, r28
     626:	07 96       	adiw	r24, 0x07	; 7
     628:	0e 94 87 24 	call	0x490e	; 0x490e <_ZN9DhcpClass13getSubnetMaskEv>
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
     62c:	85 e0       	ldi	r24, 0x05	; 5
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	be 01       	movw	r22, r28
     632:	67 5f       	subi	r22, 0xF7	; 247
     634:	7f 4f       	sbci	r23, 0xFF	; 255
     636:	44 e0       	ldi	r20, 0x04	; 4
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
    _dnsServerAddress = _dhcp->getDnsServerIp();
     63e:	f6 01       	movw	r30, r12
     640:	66 81       	ldd	r22, Z+6	; 0x06
     642:	77 81       	ldd	r23, Z+7	; 0x07
     644:	ce 01       	movw	r24, r28
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	0e 94 a8 24 	call	0x4950	; 0x4950 <_ZN9DhcpClass14getDnsServerIpEv>

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
     64c:	8b 81       	ldd	r24, Y+3	; 0x03
     64e:	9c 81       	ldd	r25, Y+4	; 0x04
     650:	ad 81       	ldd	r26, Y+5	; 0x05
     652:	be 81       	ldd	r27, Y+6	; 0x06
     654:	f6 01       	movw	r30, r12
     656:	82 83       	std	Z+2, r24	; 0x02
     658:	93 83       	std	Z+3, r25	; 0x03
     65a:	a4 83       	std	Z+4, r26	; 0x04
     65c:	b5 83       	std	Z+5, r27	; 0x05
  }

  return ret;
}
     65e:	80 2f       	mov	r24, r16
     660:	91 2f       	mov	r25, r17
     662:	6e 96       	adiw	r28, 0x1e	; 30
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	08 95       	ret

00000680 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
{
     680:	8f 92       	push	r8
     682:	9f 92       	push	r9
     684:	af 92       	push	r10
     686:	bf 92       	push	r11
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	4c 01       	movw	r8, r24
     69a:	6b 01       	movw	r12, r22
     69c:	ea 01       	movw	r28, r20
     69e:	59 01       	movw	r10, r18
  W5100.init();
     6a0:	88 e1       	ldi	r24, 0x18	; 24
     6a2:	95 e0       	ldi	r25, 0x05	; 5
     6a4:	0e 94 ab 0b 	call	0x1756	; 0x1756 <_ZN10W5100Class4initEv>
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
     6a8:	89 e0       	ldi	r24, 0x09	; 9
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	b6 01       	movw	r22, r12
     6ae:	46 e0       	ldi	r20, 0x06	; 6
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
  W5100.setMACAddress(mac);
  W5100.setIPAddress(local_ip._address);
     6b6:	be 01       	movw	r22, r28
     6b8:	6e 5f       	subi	r22, 0xFE	; 254
     6ba:	7f 4f       	sbci	r23, 0xFF	; 255
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
     6bc:	8f e0       	ldi	r24, 0x0F	; 15
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	44 e0       	ldi	r20, 0x04	; 4
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
  W5100.setGatewayIp(gateway._address);
     6c8:	b8 01       	movw	r22, r16
     6ca:	6e 5f       	subi	r22, 0xFE	; 254
     6cc:	7f 4f       	sbci	r23, 0xFF	; 255
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	44 e0       	ldi	r20, 0x04	; 4
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
  W5100.setSubnetMask(subnet._address);
     6da:	b7 01       	movw	r22, r14
     6dc:	6e 5f       	subi	r22, 0xFE	; 254
     6de:	7f 4f       	sbci	r23, 0xFF	; 255
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
     6e0:	85 e0       	ldi	r24, 0x05	; 5
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	44 e0       	ldi	r20, 0x04	; 4
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
     6ec:	f5 01       	movw	r30, r10
     6ee:	82 81       	ldd	r24, Z+2	; 0x02
     6f0:	93 81       	ldd	r25, Z+3	; 0x03
     6f2:	a4 81       	ldd	r26, Z+4	; 0x04
     6f4:	b5 81       	ldd	r27, Z+5	; 0x05
     6f6:	f4 01       	movw	r30, r8
     6f8:	82 83       	std	Z+2, r24	; 0x02
     6fa:	93 83       	std	Z+3, r25	; 0x03
     6fc:	a4 83       	std	Z+4, r26	; 0x04
     6fe:	b5 83       	std	Z+5, r27	; 0x05
  _dnsServerAddress = dns_server;
}
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	bf 90       	pop	r11
     712:	af 90       	pop	r10
     714:	9f 90       	pop	r9
     716:	8f 90       	pop	r8
     718:	08 95       	ret

0000071a <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>:
  gateway[3] = 1;
  begin(mac_address, local_ip, dns_server, gateway);
}

void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip, IPAddress dns_server, IPAddress gateway)
{
     71a:	6f 92       	push	r6
     71c:	7f 92       	push	r7
     71e:	8f 92       	push	r8
     720:	9f 92       	push	r9
     722:	af 92       	push	r10
     724:	bf 92       	push	r11
     726:	cf 92       	push	r12
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	6e 97       	sbiw	r28, 0x1e	; 30
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	4c 01       	movw	r8, r24
     748:	3b 01       	movw	r6, r22
     74a:	7a 01       	movw	r14, r20
     74c:	69 01       	movw	r12, r18
     74e:	58 01       	movw	r10, r16
  IPAddress subnet(255, 255, 255, 0);
     750:	ce 01       	movw	r24, r28
     752:	49 96       	adiw	r24, 0x19	; 25
     754:	6f ef       	ldi	r22, 0xFF	; 255
     756:	4f ef       	ldi	r20, 0xFF	; 255
     758:	2f ef       	ldi	r18, 0xFF	; 255
     75a:	00 e0       	ldi	r16, 0x00	; 0
     75c:	0e 94 5f 13 	call	0x26be	; 0x26be <_ZN9IPAddressC1Ehhhh>
     760:	23 ea       	ldi	r18, 0xA3	; 163
     762:	32 e0       	ldi	r19, 0x02	; 2
     764:	3c 8b       	std	Y+20, r19	; 0x14
     766:	2b 8b       	std	Y+19, r18	; 0x13
     768:	f7 01       	movw	r30, r14
     76a:	82 81       	ldd	r24, Z+2	; 0x02
     76c:	93 81       	ldd	r25, Z+3	; 0x03
     76e:	a4 81       	ldd	r26, Z+4	; 0x04
     770:	b5 81       	ldd	r27, Z+5	; 0x05
     772:	8d 8b       	std	Y+21, r24	; 0x15
     774:	9e 8b       	std	Y+22, r25	; 0x16
     776:	af 8b       	std	Y+23, r26	; 0x17
     778:	b8 8f       	std	Y+24, r27	; 0x18
     77a:	3e 87       	std	Y+14, r19	; 0x0e
     77c:	2d 87       	std	Y+13, r18	; 0x0d
     77e:	f6 01       	movw	r30, r12
     780:	82 81       	ldd	r24, Z+2	; 0x02
     782:	93 81       	ldd	r25, Z+3	; 0x03
     784:	a4 81       	ldd	r26, Z+4	; 0x04
     786:	b5 81       	ldd	r27, Z+5	; 0x05
     788:	8f 87       	std	Y+15, r24	; 0x0f
     78a:	98 8b       	std	Y+16, r25	; 0x10
     78c:	a9 8b       	std	Y+17, r26	; 0x11
     78e:	ba 8b       	std	Y+18, r27	; 0x12
     790:	38 87       	std	Y+8, r19	; 0x08
     792:	2f 83       	std	Y+7, r18	; 0x07
     794:	f5 01       	movw	r30, r10
     796:	82 81       	ldd	r24, Z+2	; 0x02
     798:	93 81       	ldd	r25, Z+3	; 0x03
     79a:	a4 81       	ldd	r26, Z+4	; 0x04
     79c:	b5 81       	ldd	r27, Z+5	; 0x05
     79e:	89 87       	std	Y+9, r24	; 0x09
     7a0:	9a 87       	std	Y+10, r25	; 0x0a
     7a2:	ab 87       	std	Y+11, r26	; 0x0b
     7a4:	bc 87       	std	Y+12, r27	; 0x0c
     7a6:	3a 83       	std	Y+2, r19	; 0x02
     7a8:	29 83       	std	Y+1, r18	; 0x01
     7aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7ae:	ad 8d       	ldd	r26, Y+29	; 0x1d
     7b0:	be 8d       	ldd	r27, Y+30	; 0x1e
     7b2:	8b 83       	std	Y+3, r24	; 0x03
     7b4:	9c 83       	std	Y+4, r25	; 0x04
     7b6:	ad 83       	std	Y+5, r26	; 0x05
     7b8:	be 83       	std	Y+6, r27	; 0x06
  begin(mac_address, local_ip, dns_server, gateway, subnet);
     7ba:	c4 01       	movw	r24, r8
     7bc:	b3 01       	movw	r22, r6
     7be:	ae 01       	movw	r20, r28
     7c0:	4d 5e       	subi	r20, 0xED	; 237
     7c2:	5f 4f       	sbci	r21, 0xFF	; 255
     7c4:	9e 01       	movw	r18, r28
     7c6:	23 5f       	subi	r18, 0xF3	; 243
     7c8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ca:	8e 01       	movw	r16, r28
     7cc:	09 5f       	subi	r16, 0xF9	; 249
     7ce:	1f 4f       	sbci	r17, 0xFF	; 255
     7d0:	7e 01       	movw	r14, r28
     7d2:	08 94       	sec
     7d4:	e1 1c       	adc	r14, r1
     7d6:	f1 1c       	adc	r15, r1
     7d8:	0e 94 40 03 	call	0x680	; 0x680 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
}
     7dc:	6e 96       	adiw	r28, 0x1e	; 30
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	ff 90       	pop	r15
     7f2:	ef 90       	pop	r14
     7f4:	df 90       	pop	r13
     7f6:	cf 90       	pop	r12
     7f8:	bf 90       	pop	r11
     7fa:	af 90       	pop	r10
     7fc:	9f 90       	pop	r9
     7fe:	8f 90       	pop	r8
     800:	7f 90       	pop	r7
     802:	6f 90       	pop	r6
     804:	08 95       	ret

00000806 <_ZN13EthernetClass5beginEPh9IPAddressS1_>:
  dns_server[3] = 1;
  begin(mac_address, local_ip, dns_server);
}

void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip, IPAddress dns_server)
{
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	68 97       	sbiw	r28, 0x18	; 24
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	7b 01       	movw	r14, r22
     824:	da 01       	movw	r26, r20
     826:	12 96       	adiw	r26, 0x02	; 2
     828:	4d 91       	ld	r20, X+
     82a:	5d 91       	ld	r21, X+
     82c:	6d 91       	ld	r22, X+
     82e:	7c 91       	ld	r23, X
     830:	15 97       	sbiw	r26, 0x05	; 5
     832:	4d 8b       	std	Y+21, r20	; 0x15
     834:	5e 8b       	std	Y+22, r21	; 0x16
     836:	6f 8b       	std	Y+23, r22	; 0x17
     838:	78 8f       	std	Y+24, r23	; 0x18
     83a:	e3 ea       	ldi	r30, 0xA3	; 163
     83c:	f2 e0       	ldi	r31, 0x02	; 2
     83e:	fe 87       	std	Y+14, r31	; 0x0e
     840:	ed 87       	std	Y+13, r30	; 0x0d
     842:	4f 87       	std	Y+15, r20	; 0x0f
     844:	58 8b       	std	Y+16, r21	; 0x10
     846:	69 8b       	std	Y+17, r22	; 0x11
     848:	7a 8b       	std	Y+18, r23	; 0x12
     84a:	f8 87       	std	Y+8, r31	; 0x08
     84c:	ef 83       	std	Y+7, r30	; 0x07
     84e:	d9 01       	movw	r26, r18
     850:	12 96       	adiw	r26, 0x02	; 2
     852:	0d 91       	ld	r16, X+
     854:	1d 91       	ld	r17, X+
     856:	2d 91       	ld	r18, X+
     858:	3c 91       	ld	r19, X
     85a:	15 97       	sbiw	r26, 0x05	; 5
     85c:	09 87       	std	Y+9, r16	; 0x09
     85e:	1a 87       	std	Y+10, r17	; 0x0a
     860:	2b 87       	std	Y+11, r18	; 0x0b
     862:	3c 87       	std	Y+12, r19	; 0x0c
     864:	fa 83       	std	Y+2, r31	; 0x02
     866:	e9 83       	std	Y+1, r30	; 0x01
     868:	4b 83       	std	Y+3, r20	; 0x03
     86a:	5c 83       	std	Y+4, r21	; 0x04
     86c:	6d 83       	std	Y+5, r22	; 0x05
     86e:	7e 83       	std	Y+6, r23	; 0x06
     870:	21 e0       	ldi	r18, 0x01	; 1
     872:	2e 83       	std	Y+6, r18	; 0x06
  // Assume the gateway will be the machine on the same network as the local IP
  // but with last octet being '1'
  IPAddress gateway = local_ip;
  gateway[3] = 1;
  begin(mac_address, local_ip, dns_server, gateway);
     874:	b7 01       	movw	r22, r14
     876:	ae 01       	movw	r20, r28
     878:	43 5f       	subi	r20, 0xF3	; 243
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	9e 01       	movw	r18, r28
     87e:	29 5f       	subi	r18, 0xF9	; 249
     880:	3f 4f       	sbci	r19, 0xFF	; 255
     882:	8e 01       	movw	r16, r28
     884:	0f 5f       	subi	r16, 0xFF	; 255
     886:	1f 4f       	sbci	r17, 0xFF	; 255
     888:	0e 94 8d 03 	call	0x71a	; 0x71a <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>
}
     88c:	68 96       	adiw	r28, 0x18	; 24
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	08 95       	ret

000008a6 <_ZN13EthernetClass5beginEPh9IPAddress>:

  return ret;
}

void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip)
{
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	62 97       	sbiw	r28, 0x12	; 18
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	fb 01       	movw	r30, r22
     8bc:	da 01       	movw	r26, r20
     8be:	12 96       	adiw	r26, 0x02	; 2
     8c0:	4d 91       	ld	r20, X+
     8c2:	5d 91       	ld	r21, X+
     8c4:	6d 91       	ld	r22, X+
     8c6:	7c 91       	ld	r23, X
     8c8:	15 97       	sbiw	r26, 0x05	; 5
     8ca:	4f 87       	std	Y+15, r20	; 0x0f
     8cc:	58 8b       	std	Y+16, r21	; 0x10
     8ce:	69 8b       	std	Y+17, r22	; 0x11
     8d0:	7a 8b       	std	Y+18, r23	; 0x12
     8d2:	23 ea       	ldi	r18, 0xA3	; 163
     8d4:	32 e0       	ldi	r19, 0x02	; 2
     8d6:	38 87       	std	Y+8, r19	; 0x08
     8d8:	2f 83       	std	Y+7, r18	; 0x07
     8da:	49 87       	std	Y+9, r20	; 0x09
     8dc:	5a 87       	std	Y+10, r21	; 0x0a
     8de:	6b 87       	std	Y+11, r22	; 0x0b
     8e0:	7c 87       	std	Y+12, r23	; 0x0c
     8e2:	3a 83       	std	Y+2, r19	; 0x02
     8e4:	29 83       	std	Y+1, r18	; 0x01
     8e6:	4b 83       	std	Y+3, r20	; 0x03
     8e8:	5c 83       	std	Y+4, r21	; 0x04
     8ea:	6d 83       	std	Y+5, r22	; 0x05
     8ec:	7e 83       	std	Y+6, r23	; 0x06
     8ee:	21 e0       	ldi	r18, 0x01	; 1
     8f0:	2e 83       	std	Y+6, r18	; 0x06
  // Assume the DNS server will be the machine on the same network as the local IP
  // but with last octet being '1'
  IPAddress dns_server = local_ip;
  dns_server[3] = 1;
  begin(mac_address, local_ip, dns_server);
     8f2:	bf 01       	movw	r22, r30
     8f4:	ae 01       	movw	r20, r28
     8f6:	49 5f       	subi	r20, 0xF9	; 249
     8f8:	5f 4f       	sbci	r21, 0xFF	; 255
     8fa:	9e 01       	movw	r18, r28
     8fc:	2f 5f       	subi	r18, 0xFF	; 255
     8fe:	3f 4f       	sbci	r19, 0xFF	; 255
     900:	0e 94 03 04 	call	0x806	; 0x806 <_ZN13EthernetClass5beginEPh9IPAddressS1_>
}
     904:	62 96       	adiw	r28, 0x12	; 18
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <_ZN13EthernetClass8maintainEv>:
  W5100.setGatewayIp(gateway._address);
  W5100.setSubnetMask(subnet._address);
  _dnsServerAddress = dns_server;
}

int EthernetClass::maintain(){
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	68 97       	sbiw	r28, 0x18	; 24
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
     932:	7c 01       	movw	r14, r24
  int rc = DHCP_CHECK_NONE;
  if(_dhcp != NULL){
     934:	fc 01       	movw	r30, r24
     936:	86 81       	ldd	r24, Z+6	; 0x06
     938:	97 81       	ldd	r25, Z+7	; 0x07
     93a:	00 97       	sbiw	r24, 0x00	; 0
     93c:	09 f4       	brne	.+2      	; 0x940 <_ZN13EthernetClass8maintainEv+0x2a>
     93e:	4b c0       	rjmp	.+150    	; 0x9d6 <_ZN13EthernetClass8maintainEv+0xc0>
    //we have a pointer to dhcp, use it
    rc = _dhcp->checkLease();
     940:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <_ZN9DhcpClass10checkLeaseEv>
     944:	8c 01       	movw	r16, r24
    switch ( rc ){
     946:	82 30       	cpi	r24, 0x02	; 2
     948:	91 05       	cpc	r25, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <_ZN13EthernetClass8maintainEv+0x3e>
     94c:	84 30       	cpi	r24, 0x04	; 4
     94e:	91 05       	cpc	r25, r1
     950:	09 f0       	breq	.+2      	; 0x954 <_ZN13EthernetClass8maintainEv+0x3e>
     952:	43 c0       	rjmp	.+134    	; 0x9da <_ZN13EthernetClass8maintainEv+0xc4>
        //nothing done
        break;
      case DHCP_CHECK_RENEW_OK:
      case DHCP_CHECK_REBIND_OK:
        //we might have got a new IP.
        W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
     954:	f7 01       	movw	r30, r14
     956:	66 81       	ldd	r22, Z+6	; 0x06
     958:	77 81       	ldd	r23, Z+7	; 0x07
     95a:	ce 01       	movw	r24, r28
     95c:	43 96       	adiw	r24, 0x13	; 19
     95e:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <_ZN9DhcpClass10getLocalIpEv>
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
     962:	8f e0       	ldi	r24, 0x0F	; 15
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	be 01       	movw	r22, r28
     968:	6b 5e       	subi	r22, 0xEB	; 235
     96a:	7f 4f       	sbci	r23, 0xFF	; 255
     96c:	44 e0       	ldi	r20, 0x04	; 4
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
        W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
     974:	f7 01       	movw	r30, r14
     976:	66 81       	ldd	r22, Z+6	; 0x06
     978:	77 81       	ldd	r23, Z+7	; 0x07
     97a:	ce 01       	movw	r24, r28
     97c:	0d 96       	adiw	r24, 0x0d	; 13
     97e:	0e 94 92 24 	call	0x4924	; 0x4924 <_ZN9DhcpClass12getGatewayIpEv>
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	be 01       	movw	r22, r28
     988:	61 5f       	subi	r22, 0xF1	; 241
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	44 e0       	ldi	r20, 0x04	; 4
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
        W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
     994:	f7 01       	movw	r30, r14
     996:	66 81       	ldd	r22, Z+6	; 0x06
     998:	77 81       	ldd	r23, Z+7	; 0x07
     99a:	ce 01       	movw	r24, r28
     99c:	07 96       	adiw	r24, 0x07	; 7
     99e:	0e 94 87 24 	call	0x490e	; 0x490e <_ZN9DhcpClass13getSubnetMaskEv>
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
     9a2:	85 e0       	ldi	r24, 0x05	; 5
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	be 01       	movw	r22, r28
     9a8:	67 5f       	subi	r22, 0xF7	; 247
     9aa:	7f 4f       	sbci	r23, 0xFF	; 255
     9ac:	44 e0       	ldi	r20, 0x04	; 4
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
        _dnsServerAddress = _dhcp->getDnsServerIp();
     9b4:	f7 01       	movw	r30, r14
     9b6:	66 81       	ldd	r22, Z+6	; 0x06
     9b8:	77 81       	ldd	r23, Z+7	; 0x07
     9ba:	ce 01       	movw	r24, r28
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	0e 94 a8 24 	call	0x4950	; 0x4950 <_ZN9DhcpClass14getDnsServerIpEv>
     9c2:	8b 81       	ldd	r24, Y+3	; 0x03
     9c4:	9c 81       	ldd	r25, Y+4	; 0x04
     9c6:	ad 81       	ldd	r26, Y+5	; 0x05
     9c8:	be 81       	ldd	r27, Y+6	; 0x06
     9ca:	f7 01       	movw	r30, r14
     9cc:	82 83       	std	Z+2, r24	; 0x02
     9ce:	93 83       	std	Z+3, r25	; 0x03
     9d0:	a4 83       	std	Z+4, r26	; 0x04
     9d2:	b5 83       	std	Z+5, r27	; 0x05
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <_ZN13EthernetClass8maintainEv+0xc4>
  W5100.setSubnetMask(subnet._address);
  _dnsServerAddress = dns_server;
}

int EthernetClass::maintain(){
  int rc = DHCP_CHECK_NONE;
     9d6:	00 e0       	ldi	r16, 0x00	; 0
     9d8:	10 e0       	ldi	r17, 0x00	; 0
        //this is actually a error, it will retry though
        break;
    }
  }
  return rc;
}
     9da:	80 2f       	mov	r24, r16
     9dc:	91 2f       	mov	r25, r17
     9de:	68 96       	adiw	r28, 0x18	; 24
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	08 95       	ret

000009f8 <_ZN13EthernetClass7localIPEv>:

IPAddress EthernetClass::localIP()
{
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	ec 01       	movw	r28, r24
  IPAddress ret;
     9fe:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN9IPAddressC1Ev>
  W5100.getIPAddress(ret.raw_address());
     a02:	be 01       	movw	r22, r28
     a04:	6e 5f       	subi	r22, 0xFE	; 254
     a06:	7f 4f       	sbci	r23, 0xFF	; 255
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
     a08:	8f e0       	ldi	r24, 0x0F	; 15
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	44 e0       	ldi	r20, 0x04	; 4
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN10W5100Class4readEjPhj>
  return ret;
}
     a14:	ce 01       	movw	r24, r28
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <_ZN13EthernetClass10subnetMaskEv>:

IPAddress EthernetClass::subnetMask()
{
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	ec 01       	movw	r28, r24
  IPAddress ret;
     a22:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN9IPAddressC1Ev>
  W5100.getSubnetMask(ret.raw_address());
     a26:	be 01       	movw	r22, r28
     a28:	6e 5f       	subi	r22, 0xFE	; 254
     a2a:	7f 4f       	sbci	r23, 0xFF	; 255
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
     a2c:	85 e0       	ldi	r24, 0x05	; 5
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	44 e0       	ldi	r20, 0x04	; 4
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN10W5100Class4readEjPhj>
  return ret;
}
     a38:	ce 01       	movw	r24, r28
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	08 95       	ret

00000a40 <_ZN13EthernetClass9gatewayIPEv>:

IPAddress EthernetClass::gatewayIP()
{
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	ec 01       	movw	r28, r24
  IPAddress ret;
     a46:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN9IPAddressC1Ev>
  W5100.getGatewayIp(ret.raw_address());
     a4a:	be 01       	movw	r22, r28
     a4c:	6e 5f       	subi	r22, 0xFE	; 254
     a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	44 e0       	ldi	r20, 0x04	; 4
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN10W5100Class4readEjPhj>
  return ret;
}
     a5c:	ce 01       	movw	r24, r28
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	08 95       	ret

00000a64 <_ZN13EthernetClass11dnsServerIPEv>:
     a64:	23 ea       	ldi	r18, 0xA3	; 163
     a66:	32 e0       	ldi	r19, 0x02	; 2
     a68:	fc 01       	movw	r30, r24
     a6a:	31 83       	std	Z+1, r19	; 0x01
     a6c:	20 83       	st	Z, r18
     a6e:	fb 01       	movw	r30, r22
     a70:	42 81       	ldd	r20, Z+2	; 0x02
     a72:	53 81       	ldd	r21, Z+3	; 0x03
     a74:	64 81       	ldd	r22, Z+4	; 0x04
     a76:	75 81       	ldd	r23, Z+5	; 0x05
     a78:	fc 01       	movw	r30, r24
     a7a:	42 83       	std	Z+2, r20	; 0x02
     a7c:	53 83       	std	Z+3, r21	; 0x03
     a7e:	64 83       	std	Z+4, r22	; 0x04
     a80:	75 83       	std	Z+5, r23	; 0x05

IPAddress EthernetClass::dnsServerIP()
{
  return _dnsServerAddress;
}
     a82:	08 95       	ret

00000a84 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
     a84:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     a86:	8a e0       	ldi	r24, 0x0A	; 10
     a88:	95 e0       	ldi	r25, 0x05	; 5
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	00 e0       	ldi	r16, 0x00	; 0
     a92:	0e 94 5f 13 	call	0x26be	; 0x26be <_ZN9IPAddressC1Ehhhh>
#include "EthernetServer.h"
#include "Dhcp.h"

#define MAX_SOCK_NUM 4

class EthernetClass {
     a96:	86 ef       	ldi	r24, 0xF6	; 246
     a98:	94 e0       	ldi	r25, 0x04	; 4
     a9a:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN9IPAddressC1Ev>
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
     aa2:	dc 01       	movw	r26, r24
     aa4:	ed 91       	ld	r30, X+
     aa6:	fc 91       	ld	r31, X
     aa8:	00 8c       	ldd	r0, Z+24	; 0x18
     aaa:	f1 8d       	ldd	r31, Z+25	; 0x19
     aac:	e0 2d       	mov	r30, r0
     aae:	19 95       	eicall
     ab0:	08 95       	ret

00000ab2 <_ZN11EthernetUDP8remoteIPEv>:

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
     ab2:	23 ea       	ldi	r18, 0xA3	; 163
     ab4:	32 e0       	ldi	r19, 0x02	; 2
     ab6:	fc 01       	movw	r30, r24
     ab8:	31 83       	std	Z+1, r19	; 0x01
     aba:	20 83       	st	Z, r18
     abc:	fb 01       	movw	r30, r22
     abe:	41 89       	ldd	r20, Z+17	; 0x11
     ac0:	52 89       	ldd	r21, Z+18	; 0x12
     ac2:	63 89       	ldd	r22, Z+19	; 0x13
     ac4:	74 89       	ldd	r23, Z+20	; 0x14
     ac6:	fc 01       	movw	r30, r24
     ac8:	42 83       	std	Z+2, r20	; 0x02
     aca:	53 83       	std	Z+3, r21	; 0x03
     acc:	64 83       	std	Z+4, r22	; 0x04
     ace:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
     ad0:	08 95       	ret

00000ad2 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
     ad2:	fc 01       	movw	r30, r24
     ad4:	85 89       	ldd	r24, Z+21	; 0x15
     ad6:	96 89       	ldd	r25, Z+22	; 0x16
     ad8:	08 95       	ret

00000ada <_ZN11EthernetUDP9availableEv>:
  return 1;
}

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
     ada:	fc 01       	movw	r30, r24
  return _remaining;
}
     adc:	81 8d       	ldd	r24, Z+25	; 0x19
     ade:	92 8d       	ldd	r25, Z+26	; 0x1a
     ae0:	08 95       	ret

00000ae2 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	0f 92       	push	r0
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
     aee:	dc 01       	movw	r26, r24
     af0:	ed 91       	ld	r30, X+
     af2:	fc 91       	ld	r31, X
     af4:	02 80       	ldd	r0, Z+2	; 0x02
     af6:	f3 81       	ldd	r31, Z+3	; 0x03
     af8:	e0 2d       	mov	r30, r0
     afa:	be 01       	movw	r22, r28
     afc:	6f 5f       	subi	r22, 0xFF	; 255
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	41 e0       	ldi	r20, 0x01	; 1
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	19 95       	eicall
}
     b06:	0f 90       	pop	r0
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
     b0e:	cf 92       	push	r12
     b10:	df 92       	push	r13
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	8c 01       	movw	r16, r24
  while (_remaining)
  {
	byte garbage[_remaining];
	read(garbage, _remaining);
  }
}
     b24:	cd b6       	in	r12, 0x3d	; 61
     b26:	de b6       	in	r13, 0x3e	; 62
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5100 always behaves :)

  while (_remaining)
     b28:	dc 01       	movw	r26, r24
     b2a:	59 96       	adiw	r26, 0x19	; 25
     b2c:	8d 91       	ld	r24, X+
     b2e:	9c 91       	ld	r25, X
     b30:	5a 97       	sbiw	r26, 0x1a	; 26
     b32:	00 97       	sbiw	r24, 0x00	; 0
     b34:	19 f1       	breq	.+70     	; 0xb7c <_ZN11EthernetUDP5flushEv+0x6e>
     b36:	fd b6       	in	r15, 0x3d	; 61
     b38:	ee b6       	in	r14, 0x3e	; 62
  {
	byte garbage[_remaining];
     b3a:	f8 01       	movw	r30, r16
     b3c:	41 8d       	ldd	r20, Z+25	; 0x19
     b3e:	52 8d       	ldd	r21, Z+26	; 0x1a
     b40:	8d b7       	in	r24, 0x3d	; 61
     b42:	9e b7       	in	r25, 0x3e	; 62
     b44:	84 1b       	sub	r24, r20
     b46:	95 0b       	sbc	r25, r21
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	9e bf       	out	0x3e, r25	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	8d bf       	out	0x3d, r24	; 61
     b52:	6d b7       	in	r22, 0x3d	; 61
     b54:	7e b7       	in	r23, 0x3e	; 62
     b56:	6f 5f       	subi	r22, 0xFF	; 255
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
	read(garbage, _remaining);
     b5a:	01 90       	ld	r0, Z+
     b5c:	f0 81       	ld	r31, Z
     b5e:	e0 2d       	mov	r30, r0
     b60:	00 8c       	ldd	r0, Z+24	; 0x18
     b62:	f1 8d       	ldd	r31, Z+25	; 0x19
     b64:	e0 2d       	mov	r30, r0
     b66:	c8 01       	movw	r24, r16
     b68:	19 95       	eicall
     b6a:	fd be       	out	0x3d, r15	; 61
     b6c:	ee be       	out	0x3e, r14	; 62
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5100 always behaves :)

  while (_remaining)
     b6e:	d8 01       	movw	r26, r16
     b70:	59 96       	adiw	r26, 0x19	; 25
     b72:	8d 91       	ld	r24, X+
     b74:	9c 91       	ld	r25, X
     b76:	5a 97       	sbiw	r26, 0x1a	; 26
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	e9 f6       	brne	.-70     	; 0xb36 <_ZN11EthernetUDP5flushEv+0x28>
  {
	byte garbage[_remaining];
	read(garbage, _remaining);
  }
}
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	de be       	out	0x3e, r13	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	cd be       	out	0x3d, r12	; 61
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	08 95       	ret

00000b98 <_ZN11EthernetUDP4peekEv>:
  return -1;

}

int EthernetUDP::peek()
{
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	0f 92       	push	r0
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	fc 01       	movw	r30, r24
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
     ba4:	81 8d       	ldd	r24, Z+25	; 0x19
     ba6:	92 8d       	ldd	r25, Z+26	; 0x1a
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	49 f0       	breq	.+18     	; 0xbbe <_ZN11EthernetUDP4peekEv+0x26>
    return -1;
  ::peek(_sock, &b);
     bac:	84 85       	ldd	r24, Z+12	; 0x0c
     bae:	be 01       	movw	r22, r28
     bb0:	6f 5f       	subi	r22, 0xFF	; 255
     bb2:	7f 4f       	sbci	r23, 0xFF	; 255
     bb4:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_Z4peekhPh>
  return b;
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <_ZN11EthernetUDP4peekEv+0x2a>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
     bbe:	8f ef       	ldi	r24, 0xFF	; 255
     bc0:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
     bc2:	0f 90       	pop	r0
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <_ZN11EthernetUDP4readEPhj>:
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	ec 01       	movw	r28, r24
     bd0:	9a 01       	movw	r18, r20

  if (_remaining > 0)
     bd2:	49 8d       	ldd	r20, Y+25	; 0x19
     bd4:	5a 8d       	ldd	r21, Y+26	; 0x1a
     bd6:	41 15       	cp	r20, r1
     bd8:	51 05       	cpc	r21, r1
     bda:	a9 f0       	breq	.+42     	; 0xc06 <_ZN11EthernetUDP4readEPhj+0x3c>
  {

    int got;

    if (_remaining <= len)
     bdc:	24 17       	cp	r18, r20
     bde:	35 07       	cpc	r19, r21
     be0:	20 f0       	brcs	.+8      	; 0xbea <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
     be2:	8c 85       	ldd	r24, Y+12	; 0x0c
     be4:	0e 94 b3 08 	call	0x1166	; 0x1166 <_Z4recvhPhi>
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <_ZN11EthernetUDP4readEPhj+0x28>
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
     bea:	8c 85       	ldd	r24, Y+12	; 0x0c
     bec:	a9 01       	movw	r20, r18
     bee:	0e 94 b3 08 	call	0x1166	; 0x1166 <_Z4recvhPhi>
    }

    if (got > 0)
     bf2:	18 16       	cp	r1, r24
     bf4:	19 06       	cpc	r1, r25
     bf6:	54 f4       	brge	.+20     	; 0xc0c <_ZN11EthernetUDP4readEPhj+0x42>
    {
      _remaining -= got;
     bf8:	29 8d       	ldd	r18, Y+25	; 0x19
     bfa:	3a 8d       	ldd	r19, Y+26	; 0x1a
     bfc:	28 1b       	sub	r18, r24
     bfe:	39 0b       	sbc	r19, r25
     c00:	3a 8f       	std	Y+26, r19	; 0x1a
     c02:	29 8f       	std	Y+25, r18	; 0x19
      return got;
     c04:	05 c0       	rjmp	.+10     	; 0xc10 <_ZN11EthernetUDP4readEPhj+0x46>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
     c06:	8f ef       	ldi	r24, 0xFF	; 255
     c08:	9f ef       	ldi	r25, 0xFF	; 255
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <_ZN11EthernetUDP4readEPhj+0x46>
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	9f ef       	ldi	r25, 0xFF	; 255

}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	0f 92       	push	r0
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	8c 01       	movw	r16, r24
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
     c26:	fc 01       	movw	r30, r24
     c28:	81 8d       	ldd	r24, Z+25	; 0x19
     c2a:	92 8d       	ldd	r25, Z+26	; 0x1a
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	a1 f0       	breq	.+40     	; 0xc58 <_ZN11EthernetUDP4readEv+0x42>
     c30:	84 85       	ldd	r24, Z+12	; 0x0c
     c32:	be 01       	movw	r22, r28
     c34:	6f 5f       	subi	r22, 0xFF	; 255
     c36:	7f 4f       	sbci	r23, 0xFF	; 255
     c38:	41 e0       	ldi	r20, 0x01	; 1
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	0e 94 b3 08 	call	0x1166	; 0x1166 <_Z4recvhPhi>
     c40:	18 16       	cp	r1, r24
     c42:	19 06       	cpc	r1, r25
     c44:	64 f4       	brge	.+24     	; 0xc5e <_ZN11EthernetUDP4readEv+0x48>
  {
    // We read things without any problems
    _remaining--;
     c46:	f8 01       	movw	r30, r16
     c48:	81 8d       	ldd	r24, Z+25	; 0x19
     c4a:	92 8d       	ldd	r25, Z+26	; 0x1a
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	92 8f       	std	Z+26, r25	; 0x1a
     c50:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	05 c0       	rjmp	.+10     	; 0xc62 <_ZN11EthernetUDP4readEv+0x4c>
  }

  // If we get here, there's no data available
  return -1;
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <_ZN11EthernetUDP4readEv+0x4c>
     c5e:	8f ef       	ldi	r24, 0xFF	; 255
     c60:	9f ef       	ldi	r25, 0xFF	; 255
}
     c62:	0f 90       	pop	r0
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	08 95       	ret

00000c6e <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	28 97       	sbiw	r28, 0x08	; 8
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
     c88:	dc 01       	movw	r26, r24
     c8a:	ed 91       	ld	r30, X+
     c8c:	fc 91       	ld	r31, X
     c8e:	02 84       	ldd	r0, Z+10	; 0x0a
     c90:	f3 85       	ldd	r31, Z+11	; 0x0b
     c92:	e0 2d       	mov	r30, r0
     c94:	19 95       	eicall

  if (W5100.getRXReceivedSize(_sock) > 0)
     c96:	88 e1       	ldi	r24, 0x18	; 24
     c98:	95 e0       	ldi	r25, 0x05	; 5
     c9a:	f8 01       	movw	r30, r16
     c9c:	64 85       	ldd	r22, Z+12	; 0x0c
     c9e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_ZN10W5100Class17getRXReceivedSizeEh>
     ca2:	00 97       	sbiw	r24, 0x00	; 0
     ca4:	21 f1       	breq	.+72     	; 0xcee <_ZN11EthernetUDP11parsePacketEv+0x80>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
     ca6:	d8 01       	movw	r26, r16
     ca8:	1c 96       	adiw	r26, 0x0c	; 12
     caa:	8c 91       	ld	r24, X
     cac:	be 01       	movw	r22, r28
     cae:	6f 5f       	subi	r22, 0xFF	; 255
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	48 e0       	ldi	r20, 0x08	; 8
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	0e 94 b3 08 	call	0x1166	; 0x1166 <_Z4recvhPhi>
    if (ret > 0)
     cba:	18 16       	cp	r1, r24
     cbc:	19 06       	cpc	r1, r25
     cbe:	cc f4       	brge	.+50     	; 0xcf2 <_ZN11EthernetUDP11parsePacketEv+0x84>
    {
      _remoteIP = tmpBuf;
     cc0:	c8 01       	movw	r24, r16
     cc2:	0f 96       	adiw	r24, 0x0f	; 15
     cc4:	be 01       	movw	r22, r28
     cc6:	6f 5f       	subi	r22, 0xFF	; 255
     cc8:	7f 4f       	sbci	r23, 0xFF	; 255
     cca:	0e 94 88 13 	call	0x2710	; 0x2710 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	2e 81       	ldd	r18, Y+6	; 0x06
     cd4:	82 0f       	add	r24, r18
     cd6:	91 1d       	adc	r25, r1
     cd8:	f8 01       	movw	r30, r16
     cda:	96 8b       	std	Z+22, r25	; 0x16
     cdc:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
     cde:	9f 81       	ldd	r25, Y+7	; 0x07
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	28 85       	ldd	r18, Y+8	; 0x08
     ce4:	82 0f       	add	r24, r18
     ce6:	91 1d       	adc	r25, r1
     ce8:	92 8f       	std	Z+26, r25	; 0x1a
     cea:	81 8f       	std	Z+25, r24	; 0x19
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <_ZN11EthernetUDP11parsePacketEv+0x84>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
}
     cf2:	28 96       	adiw	r28, 0x08	; 8
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	08 95       	ret

00000d08 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
     d0e:	9b 01       	movw	r18, r22
     d10:	fa 01       	movw	r30, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
     d12:	6f 89       	ldd	r22, Y+23	; 0x17
     d14:	78 8d       	ldd	r23, Y+24	; 0x18
     d16:	8c 85       	ldd	r24, Y+12	; 0x0c
     d18:	a9 01       	movw	r20, r18
     d1a:	9f 01       	movw	r18, r30
     d1c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
     d20:	2f 89       	ldd	r18, Y+23	; 0x17
     d22:	38 8d       	ldd	r19, Y+24	; 0x18
     d24:	28 0f       	add	r18, r24
     d26:	39 1f       	adc	r19, r25
     d28:	38 8f       	std	Y+24, r19	; 0x18
     d2a:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	08 95       	ret

00000d32 <_ZN11EthernetUDP9endPacketEv>:
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
     d32:	fc 01       	movw	r30, r24
     d34:	84 85       	ldd	r24, Z+12	; 0x0c
     d36:	0e 94 67 0b 	call	0x16ce	; 0x16ce <_Z7sendUDPh>
}
     d3a:	08 95       	ret

00000d3c <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
     d3c:	fc 01       	movw	r30, r24
  _offset = 0;
     d3e:	10 8e       	std	Z+24, r1	; 0x18
     d40:	17 8a       	std	Z+23, r1	; 0x17
  return startUDP(_sock, rawIPAddress(ip), port);
     d42:	6e 5f       	subi	r22, 0xFE	; 254
     d44:	7f 4f       	sbci	r23, 0xFF	; 255
     d46:	84 85       	ldd	r24, Z+12	; 0x0c
     d48:	0e 94 2f 0b 	call	0x165e	; 0x165e <_Z8startUDPhPhj>
}
     d4c:	08 95       	ret

00000d4e <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
     d54:	8c 85       	ldd	r24, Y+12	; 0x0c
     d56:	84 30       	cpi	r24, 0x04	; 4
     d58:	61 f0       	breq	.+24     	; 0xd72 <_ZN11EthernetUDP4stopEv+0x24>
    return;

  close(_sock);
     d5a:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
     d5e:	ec 85       	ldd	r30, Y+12	; 0x0c
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	e2 50       	subi	r30, 0x02	; 2
     d68:	fb 4f       	sbci	r31, 0xFB	; 251
     d6a:	11 82       	std	Z+1, r1	; 0x01
     d6c:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
     d6e:	84 e0       	ldi	r24, 0x04	; 4
     d70:	8c 87       	std	Y+12, r24	; 0x0c
}
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	7c 01       	movw	r14, r24
     d88:	6b 01       	movw	r12, r22
  if (_sock != MAX_SOCK_NUM)
     d8a:	fc 01       	movw	r30, r24
     d8c:	84 85       	ldd	r24, Z+12	; 0x0c
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	09 f5       	brne	.+66     	; 0xdd4 <_ZN11EthernetUDP5beginEj+0x5c>
     d92:	c3 e0       	ldi	r28, 0x03	; 3
     d94:	d4 e0       	ldi	r29, 0x04	; 4
     d96:	10 e0       	ldi	r17, 0x00	; 0
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
     d98:	ce 01       	movw	r24, r28
     d9a:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = W5100.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
     d9e:	88 23       	and	r24, r24
     da0:	11 f0       	breq	.+4      	; 0xda6 <_ZN11EthernetUDP5beginEj+0x2e>
     da2:	88 31       	cpi	r24, 0x18	; 24
     da4:	19 f4       	brne	.+6      	; 0xdac <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
     da6:	f7 01       	movw	r30, r14
     da8:	14 87       	std	Z+12, r17	; 0x0c
      break;
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <_ZN11EthernetUDP5beginEj+0x3e>
     dac:	1f 5f       	subi	r17, 0xFF	; 255
     dae:	c0 50       	subi	r28, 0x00	; 0
     db0:	df 4f       	sbci	r29, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
     db2:	14 30       	cpi	r17, 0x04	; 4
     db4:	89 f7       	brne	.-30     	; 0xd98 <_ZN11EthernetUDP5beginEj+0x20>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
     db6:	f7 01       	movw	r30, r14
     db8:	84 85       	ldd	r24, Z+12	; 0x0c
     dba:	84 30       	cpi	r24, 0x04	; 4
     dbc:	69 f0       	breq	.+26     	; 0xdd8 <_ZN11EthernetUDP5beginEj+0x60>
    return 0;

  _port = port;
     dbe:	d6 86       	std	Z+14, r13	; 0x0e
     dc0:	c5 86       	std	Z+13, r12	; 0x0d
  _remaining = 0;
     dc2:	12 8e       	std	Z+26, r1	; 0x1a
     dc4:	11 8e       	std	Z+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
     dc6:	62 e0       	ldi	r22, 0x02	; 2
     dc8:	a6 01       	movw	r20, r12
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	0e 94 8b 07 	call	0xf16	; 0xf16 <_Z6sockethhjh>

  return 1;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <_ZN11EthernetUDP5beginEj+0x62>
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <_ZN11EthernetUDP5beginEj+0x62>
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    return 0;
     dd8:	80 e0       	ldi	r24, 0x00	; 0
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	df 90       	pop	r13
     de6:	cf 90       	pop	r12
     de8:	08 95       	ret

00000dea <_ZN11EthernetUDPC1Ev>:
#include "Ethernet.h"
#include "..\Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
     dea:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     dec:	13 82       	std	Z+3, r1	; 0x03
     dee:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     df0:	48 ee       	ldi	r20, 0xE8	; 232
     df2:	53 e0       	ldi	r21, 0x03	; 3
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	44 83       	std	Z+4, r20	; 0x04
     dfa:	55 83       	std	Z+5, r21	; 0x05
     dfc:	66 83       	std	Z+6, r22	; 0x06
     dfe:	77 83       	std	Z+7, r23	; 0x07
     e00:	85 e2       	ldi	r24, 0x25	; 37
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
     e08:	84 e0       	ldi	r24, 0x04	; 4
     e0a:	84 87       	std	Z+12, r24	; 0x0c
     e0c:	cf 01       	movw	r24, r30
     e0e:	0f 96       	adiw	r24, 0x0f	; 15
     e10:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN9IPAddressC1Ev>
     e14:	08 95       	ret

00000e16 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	e5 97       	sbiw	r28, 0x35	; 53
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	7c 01       	movw	r14, r24
     e38:	8b 01       	movw	r16, r22
     e3a:	6a 01       	movw	r12, r20
#ifndef DNSClient_h
#define DNSClient_h

#include "EthernetUdp.h"

class DNSClient
     e3c:	ce 01       	movw	r24, r28
     e3e:	43 96       	adiw	r24, 0x13	; 19
     e40:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN9IPAddressC1Ev>
     e44:	ce 01       	movw	r24, r28
     e46:	4b 96       	adiw	r24, 0x1b	; 27
     e48:	0e 94 f5 06 	call	0xdea	; 0xdea <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
     e4c:	ce 01       	movw	r24, r28
     e4e:	0d 96       	adiw	r24, 0x0d	; 13
     e50:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
     e54:	ce 01       	movw	r24, r28
     e56:	07 96       	adiw	r24, 0x07	; 7
     e58:	66 ef       	ldi	r22, 0xF6	; 246
     e5a:	74 e0       	ldi	r23, 0x04	; 4
     e5c:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN13EthernetClass11dnsServerIPEv>
     e60:	ce 01       	movw	r24, r28
     e62:	43 96       	adiw	r24, 0x13	; 19
     e64:	be 01       	movw	r22, r28
     e66:	69 5f       	subi	r22, 0xF9	; 249
     e68:	7f 4f       	sbci	r23, 0xFF	; 255
     e6a:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
     e6e:	ce 01       	movw	r24, r28
     e70:	43 96       	adiw	r24, 0x13	; 19
     e72:	b8 01       	movw	r22, r16
     e74:	ae 01       	movw	r20, r28
     e76:	43 5f       	subi	r20, 0xF3	; 243
     e78:	5f 4f       	sbci	r21, 0xFF	; 255
     e7a:	0e 94 a7 2b 	call	0x574e	; 0x574e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	91 05       	cpc	r25, r1
     e82:	c1 f4       	brne	.+48     	; 0xeb4 <_ZN11EthernetUDP11beginPacketEPKcj+0x9e>
    return beginPacket(remote_addr, port);
     e84:	d7 01       	movw	r26, r14
     e86:	ed 91       	ld	r30, X+
     e88:	fc 91       	ld	r31, X
     e8a:	00 88       	ldd	r0, Z+16	; 0x10
     e8c:	f1 89       	ldd	r31, Z+17	; 0x11
     e8e:	e0 2d       	mov	r30, r0
     e90:	83 ea       	ldi	r24, 0xA3	; 163
     e92:	92 e0       	ldi	r25, 0x02	; 2
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	89 83       	std	Y+1, r24	; 0x01
     e98:	8f 85       	ldd	r24, Y+15	; 0x0f
     e9a:	98 89       	ldd	r25, Y+16	; 0x10
     e9c:	a9 89       	ldd	r26, Y+17	; 0x11
     e9e:	ba 89       	ldd	r27, Y+18	; 0x12
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	9c 83       	std	Y+4, r25	; 0x04
     ea4:	ad 83       	std	Y+5, r26	; 0x05
     ea6:	be 83       	std	Y+6, r27	; 0x06
     ea8:	c7 01       	movw	r24, r14
     eaa:	be 01       	movw	r22, r28
     eac:	6f 5f       	subi	r22, 0xFF	; 255
     eae:	7f 4f       	sbci	r23, 0xFF	; 255
     eb0:	a6 01       	movw	r20, r12
     eb2:	19 95       	eicall
  } else {
    return ret;
  }
}
     eb4:	e5 96       	adiw	r28, 0x35	; 53
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	08 95       	ret

00000ed2 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:
  while (_remaining)
  {
	byte garbage[_remaining];
	read(garbage, _remaining);
  }
}
     ed2:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     ed4:	80 e1       	ldi	r24, 0x10	; 16
     ed6:	95 e0       	ldi	r25, 0x05	; 5
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	00 e0       	ldi	r16, 0x00	; 0
     ee0:	0e 94 5f 13 	call	0x26be	; 0x26be <_ZN9IPAddressC1Ehhhh>
     ee4:	0f 91       	pop	r16
     ee6:	08 95       	ret

00000ee8 <_Z5closeh>:

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	18 2f       	mov	r17, r24
  W5100.execCmdSn(s, Sock_CLOSE);
     ef0:	88 e1       	ldi	r24, 0x18	; 24
     ef2:	95 e0       	ldi	r25, 0x05	; 5
     ef4:	61 2f       	mov	r22, r17
     ef6:	40 e1       	ldi	r20, 0x10	; 16
     ef8:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN10W5100Class9execCmdSnEh7SockCMD>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
     efc:	d1 2f       	mov	r29, r17
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	c8 2f       	mov	r28, r24
     f02:	ce 01       	movw	r24, r28
     f04:	8e 5f       	subi	r24, 0xFE	; 254
     f06:	9b 4f       	sbci	r25, 0xFB	; 251
     f08:	6f ef       	ldi	r22, 0xFF	; 255
     f0a:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
  W5100.writeSnIR(s, 0xFF);
}
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	08 95       	ret

00000f16 <_Z6sockethhjh>:
/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for W5100 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
{
     f16:	cf 92       	push	r12
     f18:	df 92       	push	r13
     f1a:	ef 92       	push	r14
     f1c:	ff 92       	push	r15
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	18 2f       	mov	r17, r24
     f26:	c6 2f       	mov	r28, r22
     f28:	7a 01       	movw	r14, r20
     f2a:	d2 2f       	mov	r29, r18
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
     f2c:	86 2f       	mov	r24, r22
     f2e:	81 50       	subi	r24, 0x01	; 1
     f30:	85 30       	cpi	r24, 0x05	; 5
     f32:	b0 f5       	brcc	.+108    	; 0xfa0 <_Z6sockethhjh+0x8a>
  {
    close(s);
     f34:	81 2f       	mov	r24, r17
     f36:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z5closeh>
     f3a:	81 2f       	mov	r24, r17
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	04 96       	adiw	r24, 0x04	; 4
     f40:	d8 2e       	mov	r13, r24
     f42:	cc 24       	eor	r12, r12
    W5100.writeSnMR(s, protocol | flag);
     f44:	6d 2f       	mov	r22, r29
     f46:	6c 2b       	or	r22, r28
     f48:	c6 01       	movw	r24, r12
     f4a:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    if (port != 0) {
     f4e:	e1 14       	cp	r14, r1
     f50:	f1 04       	cpc	r15, r1
     f52:	59 f0       	breq	.+22     	; 0xf6a <_Z6sockethhjh+0x54>
     f54:	c6 01       	movw	r24, r12
     f56:	04 96       	adiw	r24, 0x04	; 4
     f58:	6f 2d       	mov	r22, r15
     f5a:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
     f5e:	c6 01       	movw	r24, r12
     f60:	05 96       	adiw	r24, 0x05	; 5
     f62:	6e 2d       	mov	r22, r14
     f64:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
     f68:	13 c0       	rjmp	.+38     	; 0xf90 <_Z6sockethhjh+0x7a>
      W5100.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
     f6a:	c0 91 16 05 	lds	r28, 0x0516
     f6e:	d0 91 17 05 	lds	r29, 0x0517
     f72:	21 96       	adiw	r28, 0x01	; 1
     f74:	d0 93 17 05 	sts	0x0517, r29
     f78:	c0 93 16 05 	sts	0x0516, r28
     f7c:	c6 01       	movw	r24, r12
     f7e:	04 96       	adiw	r24, 0x04	; 4
     f80:	6d 2f       	mov	r22, r29
     f82:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
     f86:	c6 01       	movw	r24, r12
     f88:	05 96       	adiw	r24, 0x05	; 5
     f8a:	6c 2f       	mov	r22, r28
     f8c:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
      W5100.writeSnPORT(s, local_port);
    }

    W5100.execCmdSn(s, Sock_OPEN);
     f90:	88 e1       	ldi	r24, 0x18	; 24
     f92:	95 e0       	ldi	r25, 0x05	; 5
     f94:	61 2f       	mov	r22, r17
     f96:	41 e0       	ldi	r20, 0x01	; 1
     f98:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN10W5100Class9execCmdSnEh7SockCMD>
    
    return 1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <_Z6sockethhjh+0x8c>
  }

  return 0;
     fa0:	80 e0       	ldi	r24, 0x00	; 0
}
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	ff 90       	pop	r15
     faa:	ef 90       	pop	r14
     fac:	df 90       	pop	r13
     fae:	cf 90       	pop	r12
     fb0:	08 95       	ret

00000fb2 <_Z6listenh>:
/**
 * @brief	This function established  the connection for the channel in passive (server) mode. This function waits for the request from the peer.
 * @return	1 for success else 0.
 */
uint8_t listen(SOCKET s)
{
     fb2:	cf 93       	push	r28
     fb4:	c8 2f       	mov	r28, r24
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
     fb6:	38 2f       	mov	r19, r24
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	c9 01       	movw	r24, r18
     fbc:	8d 5f       	subi	r24, 0xFD	; 253
     fbe:	9b 4f       	sbci	r25, 0xFB	; 251
     fc0:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  if (W5100.readSnSR(s) != SnSR::INIT)
     fc4:	83 31       	cpi	r24, 0x13	; 19
     fc6:	41 f4       	brne	.+16     	; 0xfd8 <_Z6listenh+0x26>
    return 0;
  W5100.execCmdSn(s, Sock_LISTEN);
     fc8:	88 e1       	ldi	r24, 0x18	; 24
     fca:	95 e0       	ldi	r25, 0x05	; 5
     fcc:	6c 2f       	mov	r22, r28
     fce:	42 e0       	ldi	r20, 0x02	; 2
     fd0:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN10W5100Class9execCmdSnEh7SockCMD>
  return 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	01 c0       	rjmp	.+2      	; 0xfda <_Z6listenh+0x28>
 * @return	1 for success else 0.
 */
uint8_t listen(SOCKET s)
{
  if (W5100.readSnSR(s) != SnSR::INIT)
    return 0;
     fd8:	80 e0       	ldi	r24, 0x00	; 0
  W5100.execCmdSn(s, Sock_LISTEN);
  return 1;
}
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <_Z7connecthPhj>:
 * 		This function waits for the untill the connection is established.
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
     fde:	ef 92       	push	r14
     fe0:	ff 92       	push	r15
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	18 2f       	mov	r17, r24
     fea:	fb 01       	movw	r30, r22
     fec:	7a 01       	movw	r14, r20
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
     fee:	80 81       	ld	r24, Z
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
     ff0:	8f 3f       	cpi	r24, 0xFF	; 255
     ff2:	51 f4       	brne	.+20     	; 0x1008 <_Z7connecthPhj+0x2a>
     ff4:	81 81       	ldd	r24, Z+1	; 0x01
     ff6:	8f 3f       	cpi	r24, 0xFF	; 255
     ff8:	91 f4       	brne	.+36     	; 0x101e <_Z7connecthPhj+0x40>
     ffa:	82 81       	ldd	r24, Z+2	; 0x02
     ffc:	8f 3f       	cpi	r24, 0xFF	; 255
     ffe:	79 f4       	brne	.+30     	; 0x101e <_Z7connecthPhj+0x40>
    1000:	83 81       	ldd	r24, Z+3	; 0x03
    1002:	8f 3f       	cpi	r24, 0xFF	; 255
    1004:	61 f4       	brne	.+24     	; 0x101e <_Z7connecthPhj+0x40>
    1006:	2c c0       	rjmp	.+88     	; 0x1060 <_Z7connecthPhj+0x82>
    1008:	88 23       	and	r24, r24
    100a:	49 f4       	brne	.+18     	; 0x101e <_Z7connecthPhj+0x40>
    100c:	81 81       	ldd	r24, Z+1	; 0x01
    100e:	88 23       	and	r24, r24
    1010:	31 f4       	brne	.+12     	; 0x101e <_Z7connecthPhj+0x40>
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	88 23       	and	r24, r24
    1016:	19 f4       	brne	.+6      	; 0x101e <_Z7connecthPhj+0x40>
    1018:	83 81       	ldd	r24, Z+3	; 0x03
    101a:	88 23       	and	r24, r24
    101c:	19 f1       	breq	.+70     	; 0x1064 <_Z7connecthPhj+0x86>
    101e:	e1 14       	cp	r14, r1
    1020:	f1 04       	cpc	r15, r1
    1022:	11 f1       	breq	.+68     	; 0x1068 <_Z7connecthPhj+0x8a>
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    1024:	c1 2f       	mov	r28, r17
    1026:	d0 e0       	ldi	r29, 0x00	; 0
    1028:	24 96       	adiw	r28, 0x04	; 4
    102a:	dc 2f       	mov	r29, r28
    102c:	cc 27       	eor	r28, r28
    102e:	ce 01       	movw	r24, r28
    1030:	0c 96       	adiw	r24, 0x0c	; 12
    1032:	bf 01       	movw	r22, r30
    1034:	44 e0       	ldi	r20, 0x04	; 4
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    103c:	ce 01       	movw	r24, r28
    103e:	40 96       	adiw	r24, 0x10	; 16
    1040:	6f 2d       	mov	r22, r15
    1042:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    1046:	ce 01       	movw	r24, r28
    1048:	41 96       	adiw	r24, 0x11	; 17
    104a:	6e 2d       	mov	r22, r14
    104c:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    return 0;

  // set destination IP
  W5100.writeSnDIPR(s, addr);
  W5100.writeSnDPORT(s, port);
  W5100.execCmdSn(s, Sock_CONNECT);
    1050:	88 e1       	ldi	r24, 0x18	; 24
    1052:	95 e0       	ldi	r25, 0x05	; 5
    1054:	61 2f       	mov	r22, r17
    1056:	44 e0       	ldi	r20, 0x04	; 4
    1058:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN10W5100Class9execCmdSnEh7SockCMD>

  return 1;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	05 c0       	rjmp	.+10     	; 0x106a <_Z7connecthPhj+0x8c>
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    (port == 0x00) 
    ) 
    return 0;
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	03 c0       	rjmp	.+6      	; 0x106a <_Z7connecthPhj+0x8c>
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	01 c0       	rjmp	.+2      	; 0x106a <_Z7connecthPhj+0x8c>
    1068:	80 e0       	ldi	r24, 0x00	; 0
  W5100.writeSnDIPR(s, addr);
  W5100.writeSnDPORT(s, port);
  W5100.execCmdSn(s, Sock_CONNECT);

  return 1;
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	08 95       	ret

00001076 <_Z10disconnecth>:
/**
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
    1076:	68 2f       	mov	r22, r24
  W5100.execCmdSn(s, Sock_DISCON);
    1078:	88 e1       	ldi	r24, 0x18	; 24
    107a:	95 e0       	ldi	r25, 0x05	; 5
    107c:	48 e0       	ldi	r20, 0x08	; 8
    107e:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
    1082:	08 95       	ret

00001084 <_Z4sendhPKhj>:
/**
 * @brief	This function used to send the data in TCP mode
 * @return	1 for success else 0.
 */
uint16_t send(SOCKET s, const uint8_t * buf, uint16_t len)
{
    1084:	6f 92       	push	r6
    1086:	7f 92       	push	r7
    1088:	8f 92       	push	r8
    108a:	9f 92       	push	r9
    108c:	af 92       	push	r10
    108e:	bf 92       	push	r11
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	f8 2e       	mov	r15, r24
    10a2:	3b 01       	movw	r6, r22
  {
    /* m2008.01 [bj] : reduce code */
    if ( W5100.readSnSR(s) == SnSR::CLOSED )
    {
      close(s);
      return 0;
    10a4:	a4 2e       	mov	r10, r20
    10a6:	b5 2e       	mov	r11, r21
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	a8 16       	cp	r10, r24
    10ac:	88 e0       	ldi	r24, 0x08	; 8
    10ae:	b8 06       	cpc	r11, r24
    10b0:	20 f0       	brcs	.+8      	; 0x10ba <_Z4sendhPKhj+0x36>
    10b2:	aa 24       	eor	r10, r10
    10b4:	bb 24       	eor	r11, r11
    10b6:	68 94       	set
    10b8:	b3 f8       	bld	r11, 3
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    10ba:	cf 2d       	mov	r28, r15
    10bc:	d0 e0       	ldi	r29, 0x00	; 0
    10be:	24 96       	adiw	r28, 0x04	; 4
    10c0:	9c 2e       	mov	r9, r28
    10c2:	88 24       	eor	r8, r8
    10c4:	84 01       	movw	r16, r8
    10c6:	0d 5f       	subi	r16, 0xFD	; 253
    10c8:	1f 4f       	sbci	r17, 0xFF	; 255
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = W5100.getTXFreeSize(s);
    10ca:	0f 2e       	mov	r0, r31
    10cc:	f8 e1       	ldi	r31, 0x18	; 24
    10ce:	cf 2e       	mov	r12, r31
    10d0:	f5 e0       	ldi	r31, 0x05	; 5
    10d2:	df 2e       	mov	r13, r31
    10d4:	f0 2d       	mov	r31, r0
    10d6:	c6 01       	movw	r24, r12
    10d8:	6f 2d       	mov	r22, r15
    10da:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN10W5100Class13getTXFreeSizeEh>
    10de:	ec 01       	movw	r28, r24
    10e0:	c8 01       	movw	r24, r16
    10e2:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
    status = W5100.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    10e6:	87 31       	cpi	r24, 0x17	; 23
    10e8:	11 f0       	breq	.+4      	; 0x10ee <_Z4sendhPKhj+0x6a>
    10ea:	8c 31       	cpi	r24, 0x1C	; 28
    10ec:	21 f4       	brne	.+8      	; 0x10f6 <_Z4sendhPKhj+0x72>
    ret = W5100.SSIZE; // check size not to exceed MAX size.
  else 
    ret = len;

  // if freebuf is available, start.
  do 
    10ee:	ca 15       	cp	r28, r10
    10f0:	db 05       	cpc	r29, r11
    10f2:	88 f3       	brcs	.-30     	; 0x10d6 <_Z4sendhPKhj+0x52>
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <_Z4sendhPKhj+0x76>
  {
    freesize = W5100.getTXFreeSize(s);
    status = W5100.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    10f6:	aa 24       	eor	r10, r10
    10f8:	bb 24       	eor	r11, r11
    }
  } 
  while (freesize < ret);

  // copy data
  W5100.send_data_processing(s, (uint8_t *)buf, ret);
    10fa:	c8 e1       	ldi	r28, 0x18	; 24
    10fc:	d5 e0       	ldi	r29, 0x05	; 5
    10fe:	ce 01       	movw	r24, r28
    1100:	6f 2d       	mov	r22, r15
    1102:	a3 01       	movw	r20, r6
    1104:	95 01       	movw	r18, r10
    1106:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_ZN10W5100Class20send_data_processingEhPKhj>
  W5100.execCmdSn(s, Sock_SEND);
    110a:	ce 01       	movw	r24, r28
    110c:	6f 2d       	mov	r22, r15
    110e:	40 e2       	ldi	r20, 0x20	; 32
    1110:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN10W5100Class9execCmdSnEh7SockCMD>
    1114:	e4 01       	movw	r28, r8
    1116:	22 96       	adiw	r28, 0x02	; 2

  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    1118:	0b c0       	rjmp	.+22     	; 0x1130 <_Z4sendhPKhj+0xac>
    111a:	c8 01       	movw	r24, r16
    111c:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  {
    /* m2008.01 [bj] : reduce code */
    if ( W5100.readSnSR(s) == SnSR::CLOSED )
    1120:	88 23       	and	r24, r24
    1122:	31 f4       	brne	.+12     	; 0x1130 <_Z4sendhPKhj+0xac>
    {
      close(s);
    1124:	8f 2d       	mov	r24, r15
    1126:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z5closeh>
      return 0;
    112a:	aa 24       	eor	r10, r10
    112c:	bb 24       	eor	r11, r11
    112e:	0a c0       	rjmp	.+20     	; 0x1144 <_Z4sendhPKhj+0xc0>
    1130:	ce 01       	movw	r24, r28
    1132:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  // copy data
  W5100.send_data_processing(s, (uint8_t *)buf, ret);
  W5100.execCmdSn(s, Sock_SEND);

  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    1136:	84 ff       	sbrs	r24, 4
    1138:	f0 cf       	rjmp	.-32     	; 0x111a <_Z4sendhPKhj+0x96>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    113a:	8c 2f       	mov	r24, r28
    113c:	9d 2f       	mov	r25, r29
    113e:	60 e1       	ldi	r22, 0x10	; 16
    1140:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    }
  }
  /* +2008.01 bj */
  W5100.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    1144:	8a 2d       	mov	r24, r10
    1146:	9b 2d       	mov	r25, r11
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	df 90       	pop	r13
    1156:	cf 90       	pop	r12
    1158:	bf 90       	pop	r11
    115a:	af 90       	pop	r10
    115c:	9f 90       	pop	r9
    115e:	8f 90       	pop	r8
    1160:	7f 90       	pop	r7
    1162:	6f 90       	pop	r6
    1164:	08 95       	ret

00001166 <_Z4recvhPhi>:
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
    1166:	af 92       	push	r10
    1168:	bf 92       	push	r11
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	18 2f       	mov	r17, r24
    117c:	6b 01       	movw	r12, r22
    117e:	ea 01       	movw	r28, r20
  // Check how much data is available
  int16_t ret = W5100.getRXReceivedSize(s);
    1180:	88 e1       	ldi	r24, 0x18	; 24
    1182:	95 e0       	ldi	r25, 0x05	; 5
    1184:	61 2f       	mov	r22, r17
    1186:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_ZN10W5100Class17getRXReceivedSizeEh>
    118a:	e8 2e       	mov	r14, r24
    118c:	f9 2e       	mov	r15, r25
  if ( ret == 0 )
    118e:	e1 14       	cp	r14, r1
    1190:	f1 04       	cpc	r15, r1
    1192:	71 f4       	brne	.+28     	; 0x11b0 <_Z4recvhPhi+0x4a>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1194:	b1 2e       	mov	r11, r17
    1196:	aa 24       	eor	r10, r10
    1198:	c5 01       	movw	r24, r10
    119a:	8d 5f       	subi	r24, 0xFD	; 253
    119c:	9b 4f       	sbci	r25, 0xFB	; 251
    119e:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  {
    // No data available.
    uint8_t status = W5100.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
    11a2:	84 31       	cpi	r24, 0x14	; 20
    11a4:	d1 f0       	breq	.+52     	; 0x11da <_Z4recvhPhi+0x74>
    11a6:	88 23       	and	r24, r24
    11a8:	c1 f0       	breq	.+48     	; 0x11da <_Z4recvhPhi+0x74>
    11aa:	8c 31       	cpi	r24, 0x1C	; 28
    11ac:	b1 f0       	breq	.+44     	; 0x11da <_Z4recvhPhi+0x74>
    11ae:	22 c0       	rjmp	.+68     	; 0x11f4 <_Z4recvhPhi+0x8e>
    11b0:	ce 15       	cp	r28, r14
    11b2:	df 05       	cpc	r29, r15
    11b4:	0c f4       	brge	.+2      	; 0x11b8 <_Z4recvhPhi+0x52>
    11b6:	7e 01       	movw	r14, r28
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
    11b8:	1e 14       	cp	r1, r14
    11ba:	1f 04       	cpc	r1, r15
    11bc:	74 f4       	brge	.+28     	; 0x11da <_Z4recvhPhi+0x74>
  {
    W5100.recv_data_processing(s, buf, ret);
    11be:	c8 e1       	ldi	r28, 0x18	; 24
    11c0:	d5 e0       	ldi	r29, 0x05	; 5
    11c2:	ce 01       	movw	r24, r28
    11c4:	61 2f       	mov	r22, r17
    11c6:	a6 01       	movw	r20, r12
    11c8:	97 01       	movw	r18, r14
    11ca:	00 e0       	ldi	r16, 0x00	; 0
    11cc:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_ZN10W5100Class20recv_data_processingEhPhjh>
    W5100.execCmdSn(s, Sock_RECV);
    11d0:	ce 01       	movw	r24, r28
    11d2:	61 2f       	mov	r22, r17
    11d4:	40 e4       	ldi	r20, 0x40	; 64
    11d6:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN10W5100Class9execCmdSnEh7SockCMD>
  }
  return ret;
}
    11da:	8e 2d       	mov	r24, r14
    11dc:	9f 2d       	mov	r25, r15
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	df 90       	pop	r13
    11ec:	cf 90       	pop	r12
    11ee:	bf 90       	pop	r11
    11f0:	af 90       	pop	r10
    11f2:	08 95       	ret
      ret = 0;
    }
    else
    {
      // The connection is still up, but there's no data waiting to be read
      ret = -1;
    11f4:	ee 24       	eor	r14, r14
    11f6:	ea 94       	dec	r14
    11f8:	fe 2c       	mov	r15, r14
    11fa:	ef cf       	rjmp	.-34     	; 0x11da <_Z4recvhPhi+0x74>

000011fc <_Z4peekhPh>:
 * @brief	Returns the first byte in the receive queue (no checking)
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
    11fc:	0f 93       	push	r16
    11fe:	28 2f       	mov	r18, r24
    1200:	ab 01       	movw	r20, r22
  W5100.recv_data_processing(s, buf, 1, 1);
    1202:	88 e1       	ldi	r24, 0x18	; 24
    1204:	95 e0       	ldi	r25, 0x05	; 5
    1206:	62 2f       	mov	r22, r18
    1208:	21 e0       	ldi	r18, 0x01	; 1
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	01 e0       	ldi	r16, 0x01	; 1
    120e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_ZN10W5100Class20recv_data_processingEhPhjh>

  return 1;
}
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0f 91       	pop	r16
    1218:	08 95       	ret

0000121a <_Z6sendtohPKhjPhj>:
 * 		Unlike TCP transmission, The peer's destination address and the port is needed.
 * 		
 * @return	This function return send data size for success else -1.
 */
uint16_t sendto(SOCKET s, const uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t port)
{
    121a:	af 92       	push	r10
    121c:	bf 92       	push	r11
    121e:	cf 92       	push	r12
    1220:	df 92       	push	r13
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	f8 2e       	mov	r15, r24
    122e:	5b 01       	movw	r10, r22
    1230:	f9 01       	movw	r30, r18
    1232:	68 01       	movw	r12, r16
  uint16_t ret=0;

  if (len > W5100.SSIZE) ret = W5100.SSIZE; // check size not to exceed MAX size.
  else ret = len;

  if
    1234:	80 81       	ld	r24, Z
    1236:	88 23       	and	r24, r24
    1238:	51 f4       	brne	.+20     	; 0x124e <_Z6sendtohPKhjPhj+0x34>
    123a:	81 81       	ldd	r24, Z+1	; 0x01
    123c:	88 23       	and	r24, r24
    123e:	39 f4       	brne	.+14     	; 0x124e <_Z6sendtohPKhjPhj+0x34>
    1240:	82 81       	ldd	r24, Z+2	; 0x02
    1242:	88 23       	and	r24, r24
    1244:	21 f4       	brne	.+8      	; 0x124e <_Z6sendtohPKhjPhj+0x34>
    1246:	83 81       	ldd	r24, Z+3	; 0x03
    1248:	88 23       	and	r24, r24
    124a:	09 f4       	brne	.+2      	; 0x124e <_Z6sendtohPKhjPhj+0x34>
    124c:	53 c0       	rjmp	.+166    	; 0x12f4 <_Z6sendtohPKhjPhj+0xda>
    124e:	c1 14       	cp	r12, r1
    1250:	d1 04       	cpc	r13, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <_Z6sendtohPKhjPhj+0x3c>
    1254:	52 c0       	rjmp	.+164    	; 0x12fa <_Z6sendtohPKhjPhj+0xe0>
    1256:	04 2f       	mov	r16, r20
    1258:	15 2f       	mov	r17, r21
    125a:	88 e0       	ldi	r24, 0x08	; 8
    125c:	01 30       	cpi	r16, 0x01	; 1
    125e:	18 07       	cpc	r17, r24
    1260:	10 f0       	brcs	.+4      	; 0x1266 <_Z6sendtohPKhjPhj+0x4c>
    1262:	00 e0       	ldi	r16, 0x00	; 0
    1264:	18 e0       	ldi	r17, 0x08	; 8
    1266:	01 15       	cp	r16, r1
    1268:	11 05       	cpc	r17, r1
    126a:	09 f4       	brne	.+2      	; 0x126e <_Z6sendtohPKhjPhj+0x54>
    126c:	48 c0       	rjmp	.+144    	; 0x12fe <_Z6sendtohPKhjPhj+0xe4>
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    126e:	cf 2d       	mov	r28, r15
    1270:	d0 e0       	ldi	r29, 0x00	; 0
    1272:	24 96       	adiw	r28, 0x04	; 4
    1274:	dc 2f       	mov	r29, r28
    1276:	cc 27       	eor	r28, r28
    1278:	ce 01       	movw	r24, r28
    127a:	0c 96       	adiw	r24, 0x0c	; 12
    127c:	bf 01       	movw	r22, r30
    127e:	44 e0       	ldi	r20, 0x04	; 4
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    1286:	ce 01       	movw	r24, r28
    1288:	40 96       	adiw	r24, 0x10	; 16
    128a:	6d 2d       	mov	r22, r13
    128c:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    1290:	ce 01       	movw	r24, r28
    1292:	41 96       	adiw	r24, 0x11	; 17
    1294:	6c 2d       	mov	r22, r12
    1296:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
  {
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);

    // copy data
    W5100.send_data_processing(s, (uint8_t *)buf, ret);
    129a:	0f 2e       	mov	r0, r31
    129c:	f8 e1       	ldi	r31, 0x18	; 24
    129e:	cf 2e       	mov	r12, r31
    12a0:	f5 e0       	ldi	r31, 0x05	; 5
    12a2:	df 2e       	mov	r13, r31
    12a4:	f0 2d       	mov	r31, r0
    12a6:	c6 01       	movw	r24, r12
    12a8:	6f 2d       	mov	r22, r15
    12aa:	a5 01       	movw	r20, r10
    12ac:	98 01       	movw	r18, r16
    12ae:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_ZN10W5100Class20send_data_processingEhPKhj>
    W5100.execCmdSn(s, Sock_SEND);
    12b2:	c6 01       	movw	r24, r12
    12b4:	6f 2d       	mov	r22, r15
    12b6:	40 e2       	ldi	r20, 0x20	; 32
    12b8:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN10W5100Class9execCmdSnEh7SockCMD>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    12bc:	22 96       	adiw	r28, 0x02	; 2

    /* +2008.01 bj */
    while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    12be:	0d c0       	rjmp	.+26     	; 0x12da <_Z6sendtohPKhjPhj+0xc0>
    12c0:	ce 01       	movw	r24, r28
    12c2:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
    {
      if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    12c6:	83 ff       	sbrs	r24, 3
    12c8:	08 c0       	rjmp	.+16     	; 0x12da <_Z6sendtohPKhjPhj+0xc0>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    12ca:	8f 2d       	mov	r24, r15
    12cc:	9c 2d       	mov	r25, r12
    12ce:	68 e1       	ldi	r22, 0x18	; 24
    12d0:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
      {
        /* +2008.01 [bj]: clear interrupt */
        W5100.writeSnIR(s, (SnIR::SEND_OK | SnIR::TIMEOUT)); /* clear SEND_OK & TIMEOUT */
        return 0;
    12d4:	00 e0       	ldi	r16, 0x00	; 0
    12d6:	10 e0       	ldi	r17, 0x00	; 0
    12d8:	12 c0       	rjmp	.+36     	; 0x12fe <_Z6sendtohPKhjPhj+0xe4>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    12da:	fc 2e       	mov	r15, r28
    12dc:	cd 2e       	mov	r12, r29
    12de:	ce 01       	movw	r24, r28
    12e0:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
    // copy data
    W5100.send_data_processing(s, (uint8_t *)buf, ret);
    W5100.execCmdSn(s, Sock_SEND);

    /* +2008.01 bj */
    while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    12e4:	84 ff       	sbrs	r24, 4
    12e6:	ec cf       	rjmp	.-40     	; 0x12c0 <_Z6sendtohPKhjPhj+0xa6>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    12e8:	8c 2f       	mov	r24, r28
    12ea:	9d 2f       	mov	r25, r29
    12ec:	60 e1       	ldi	r22, 0x10	; 16
    12ee:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <_Z6sendtohPKhjPhj+0xe4>
  ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    ((port == 0x00)) ||(ret == 0)
    ) 
  {
    /* +2008.01 [bj] : added return value */
    ret = 0;
    12f4:	00 e0       	ldi	r16, 0x00	; 0
    12f6:	10 e0       	ldi	r17, 0x00	; 0
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <_Z6sendtohPKhjPhj+0xe4>
    12fa:	00 e0       	ldi	r16, 0x00	; 0
    12fc:	10 e0       	ldi	r17, 0x00	; 0

    /* +2008.01 bj */
    W5100.writeSnIR(s, SnIR::SEND_OK);
  }
  return ret;
}
    12fe:	80 2f       	mov	r24, r16
    1300:	91 2f       	mov	r25, r17
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	df 90       	pop	r13
    130e:	cf 90       	pop	r12
    1310:	bf 90       	pop	r11
    1312:	af 90       	pop	r10
    1314:	08 95       	ret

00001316 <_Z8recvfromhPhjS_Pj>:
 * 	TCP mode. This function is used to receive UDP, IP_RAW and MAC_RAW mode, and handle the header as well. 
 * 	
 * @return	This function return received data size for success else -1.
 */
uint16_t recvfrom(SOCKET s, uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t *port)
{
    1316:	2f 92       	push	r2
    1318:	3f 92       	push	r3
    131a:	4f 92       	push	r4
    131c:	5f 92       	push	r5
    131e:	6f 92       	push	r6
    1320:	7f 92       	push	r7
    1322:	8f 92       	push	r8
    1324:	9f 92       	push	r9
    1326:	af 92       	push	r10
    1328:	bf 92       	push	r11
    132a:	df 92       	push	r13
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	2a 97       	sbiw	r28, 0x0a	; 10
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	d8 2e       	mov	r13, r24
    134a:	3b 01       	movw	r6, r22
    134c:	59 01       	movw	r10, r18
    134e:	48 01       	movw	r8, r16
  uint8_t head[8];
  uint16_t data_len=0;
  uint16_t ptr=0;

  if ( len > 0 )
    1350:	41 15       	cp	r20, r1
    1352:	51 05       	cpc	r21, r1
    1354:	09 f4       	brne	.+2      	; 0x1358 <_Z8recvfromhPhjS_Pj+0x42>
    1356:	e2 c0       	rjmp	.+452    	; 0x151c <_Z8recvfromhPhjS_Pj+0x206>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1358:	08 2f       	mov	r16, r24
    135a:	10 e0       	ldi	r17, 0x00	; 0
    135c:	0c 5f       	subi	r16, 0xFC	; 252
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	10 2f       	mov	r17, r16
    1362:	00 27       	eor	r16, r16
    1364:	0f 2e       	mov	r0, r31
    1366:	f8 e2       	ldi	r31, 0x28	; 40
    1368:	4f 2e       	mov	r4, r31
    136a:	55 24       	eor	r5, r5
    136c:	f0 2d       	mov	r31, r0
    136e:	40 0e       	add	r4, r16
    1370:	51 1e       	adc	r5, r17
    1372:	c2 01       	movw	r24, r4
    1374:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
    1378:	e8 2e       	mov	r14, r24
    137a:	0f 2e       	mov	r0, r31
    137c:	f9 e2       	ldi	r31, 0x29	; 41
    137e:	2f 2e       	mov	r2, r31
    1380:	33 24       	eor	r3, r3
    1382:	f0 2d       	mov	r31, r0
    1384:	20 0e       	add	r2, r16
    1386:	31 1e       	adc	r3, r17
    1388:	c1 01       	movw	r24, r2
    138a:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	9e 2d       	mov	r25, r14
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	79 01       	movw	r14, r18
    1398:	e8 2a       	or	r14, r24
    139a:	f9 2a       	or	r15, r25
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    139c:	c8 01       	movw	r24, r16
    139e:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  {
    ptr = W5100.readSnRX_RD(s);
    switch (W5100.readSnMR(s) & 0x07)
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	87 70       	andi	r24, 0x07	; 7
    13a6:	90 70       	andi	r25, 0x00	; 0
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <_Z8recvfromhPhjS_Pj+0x9a>
    13ae:	44 c0       	rjmp	.+136    	; 0x1438 <_Z8recvfromhPhjS_Pj+0x122>
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	91 05       	cpc	r25, r1
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <_Z8recvfromhPhjS_Pj+0xa2>
    13b6:	78 c0       	rjmp	.+240    	; 0x14a8 <_Z8recvfromhPhjS_Pj+0x192>
    13b8:	82 30       	cpi	r24, 0x02	; 2
    13ba:	91 05       	cpc	r25, r1
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <_Z8recvfromhPhjS_Pj+0xaa>
    13be:	a5 c0       	rjmp	.+330    	; 0x150a <_Z8recvfromhPhjS_Pj+0x1f4>
    {
    case SnMR::UDP :
      W5100.read_data(s, (uint8_t *)ptr, head, 0x08);
    13c0:	88 e1       	ldi	r24, 0x18	; 24
    13c2:	95 e0       	ldi	r25, 0x05	; 5
    13c4:	6d 2d       	mov	r22, r13
    13c6:	a7 01       	movw	r20, r14
    13c8:	9e 01       	movw	r18, r28
    13ca:	2f 5f       	subi	r18, 0xFF	; 255
    13cc:	3f 4f       	sbci	r19, 0xFF	; 255
    13ce:	08 e0       	ldi	r16, 0x08	; 8
    13d0:	10 e0       	ldi	r17, 0x00	; 0
    13d2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += 8;
    13d6:	c7 01       	movw	r24, r14
    13d8:	08 96       	adiw	r24, 0x08	; 8
    13da:	9a 87       	std	Y+10, r25	; 0x0a
    13dc:	89 87       	std	Y+9, r24	; 0x09
      // read peer's IP address, port number.
      addr[0] = head[0];
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	f5 01       	movw	r30, r10
    13e2:	80 83       	st	Z, r24
      addr[1] = head[1];
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	81 83       	std	Z+1, r24	; 0x01
      addr[2] = head[2];
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	82 83       	std	Z+2, r24	; 0x02
      addr[3] = head[3];
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	83 83       	std	Z+3, r24	; 0x03
      *port = head[4];
      *port = (*port << 8) + head[5];
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	2e 81       	ldd	r18, Y+6	; 0x06
    13f6:	82 0f       	add	r24, r18
    13f8:	91 1d       	adc	r25, r1
    13fa:	f4 01       	movw	r30, r8
    13fc:	91 83       	std	Z+1, r25	; 0x01
    13fe:	80 83       	st	Z, r24
      data_len = head[6];
      data_len = (data_len << 8) + head[7];
    1400:	9f 81       	ldd	r25, Y+7	; 0x07
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	28 85       	ldd	r18, Y+8	; 0x08
    1406:	7c 01       	movw	r14, r24
    1408:	e2 0e       	add	r14, r18
    140a:	f1 1c       	adc	r15, r1

      W5100.read_data(s, (uint8_t *)ptr, buf, data_len); // data copy.
    140c:	88 e1       	ldi	r24, 0x18	; 24
    140e:	95 e0       	ldi	r25, 0x05	; 5
    1410:	6d 2d       	mov	r22, r13
    1412:	49 85       	ldd	r20, Y+9	; 0x09
    1414:	5a 85       	ldd	r21, Y+10	; 0x0a
    1416:	93 01       	movw	r18, r6
    1418:	87 01       	movw	r16, r14
    141a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += data_len;
    141e:	09 85       	ldd	r16, Y+9	; 0x09
    1420:	1a 85       	ldd	r17, Y+10	; 0x0a
    1422:	0e 0d       	add	r16, r14
    1424:	1f 1d       	adc	r17, r15
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    1426:	c2 01       	movw	r24, r4
    1428:	61 2f       	mov	r22, r17
    142a:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    142e:	c1 01       	movw	r24, r2
    1430:	60 2f       	mov	r22, r16
    1432:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    1436:	6b c0       	rjmp	.+214    	; 0x150e <_Z8recvfromhPhjS_Pj+0x1f8>

      W5100.writeSnRX_RD(s, ptr);
      break;

    case SnMR::IPRAW :
      W5100.read_data(s, (uint8_t *)ptr, head, 0x06);
    1438:	0f 2e       	mov	r0, r31
    143a:	f8 e1       	ldi	r31, 0x18	; 24
    143c:	8f 2e       	mov	r8, r31
    143e:	f5 e0       	ldi	r31, 0x05	; 5
    1440:	9f 2e       	mov	r9, r31
    1442:	f0 2d       	mov	r31, r0
    1444:	c4 01       	movw	r24, r8
    1446:	6d 2d       	mov	r22, r13
    1448:	a7 01       	movw	r20, r14
    144a:	9e 01       	movw	r18, r28
    144c:	2f 5f       	subi	r18, 0xFF	; 255
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	06 e0       	ldi	r16, 0x06	; 6
    1452:	10 e0       	ldi	r17, 0x00	; 0
    1454:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += 6;
    1458:	c7 01       	movw	r24, r14
    145a:	06 96       	adiw	r24, 0x06	; 6
    145c:	9a 87       	std	Y+10, r25	; 0x0a
    145e:	89 87       	std	Y+9, r24	; 0x09

      addr[0] = head[0];
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	f5 01       	movw	r30, r10
    1464:	80 83       	st	Z, r24
      addr[1] = head[1];
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	81 83       	std	Z+1, r24	; 0x01
      addr[2] = head[2];
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	82 83       	std	Z+2, r24	; 0x02
      addr[3] = head[3];
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	83 83       	std	Z+3, r24	; 0x03
      data_len = head[4];
      data_len = (data_len << 8) + head[5];
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	2e 81       	ldd	r18, Y+6	; 0x06
    1478:	7c 01       	movw	r14, r24
    147a:	e2 0e       	add	r14, r18
    147c:	f1 1c       	adc	r15, r1

      W5100.read_data(s, (uint8_t *)ptr, buf, data_len); // data copy.
    147e:	c4 01       	movw	r24, r8
    1480:	6d 2d       	mov	r22, r13
    1482:	49 85       	ldd	r20, Y+9	; 0x09
    1484:	5a 85       	ldd	r21, Y+10	; 0x0a
    1486:	93 01       	movw	r18, r6
    1488:	87 01       	movw	r16, r14
    148a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += data_len;
    148e:	09 85       	ldd	r16, Y+9	; 0x09
    1490:	1a 85       	ldd	r17, Y+10	; 0x0a
    1492:	0e 0d       	add	r16, r14
    1494:	1f 1d       	adc	r17, r15
    1496:	c2 01       	movw	r24, r4
    1498:	61 2f       	mov	r22, r17
    149a:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    149e:	c1 01       	movw	r24, r2
    14a0:	60 2f       	mov	r22, r16
    14a2:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    14a6:	33 c0       	rjmp	.+102    	; 0x150e <_Z8recvfromhPhjS_Pj+0x1f8>

      W5100.writeSnRX_RD(s, ptr);
      break;

    case SnMR::MACRAW:
      W5100.read_data(s,(uint8_t*)ptr,head,2);
    14a8:	0f 2e       	mov	r0, r31
    14aa:	f8 e1       	ldi	r31, 0x18	; 24
    14ac:	8f 2e       	mov	r8, r31
    14ae:	f5 e0       	ldi	r31, 0x05	; 5
    14b0:	9f 2e       	mov	r9, r31
    14b2:	f0 2d       	mov	r31, r0
    14b4:	c4 01       	movw	r24, r8
    14b6:	6d 2d       	mov	r22, r13
    14b8:	a7 01       	movw	r20, r14
    14ba:	9e 01       	movw	r18, r28
    14bc:	2f 5f       	subi	r18, 0xFF	; 255
    14be:	3f 4f       	sbci	r19, 0xFF	; 255
    14c0:	02 e0       	ldi	r16, 0x02	; 2
    14c2:	10 e0       	ldi	r17, 0x00	; 0
    14c4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr+=2;
    14c8:	aa 24       	eor	r10, r10
    14ca:	bb 24       	eor	r11, r11
    14cc:	68 94       	set
    14ce:	a1 f8       	bld	r10, 1
    14d0:	ae 0c       	add	r10, r14
    14d2:	bf 1c       	adc	r11, r15
      data_len = head[0];
      data_len = (data_len<<8) + head[1] - 2;
    14d4:	39 81       	ldd	r19, Y+1	; 0x01
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 97       	sbiw	r24, 0x02	; 2
    14de:	7c 01       	movw	r14, r24
    14e0:	e2 0e       	add	r14, r18
    14e2:	f3 1e       	adc	r15, r19

      W5100.read_data(s,(uint8_t*) ptr,buf,data_len);
    14e4:	c4 01       	movw	r24, r8
    14e6:	6d 2d       	mov	r22, r13
    14e8:	a5 01       	movw	r20, r10
    14ea:	93 01       	movw	r18, r6
    14ec:	87 01       	movw	r16, r14
    14ee:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += data_len;
    14f2:	85 01       	movw	r16, r10
    14f4:	0e 0d       	add	r16, r14
    14f6:	1f 1d       	adc	r17, r15
    14f8:	c2 01       	movw	r24, r4
    14fa:	61 2f       	mov	r22, r17
    14fc:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    1500:	c1 01       	movw	r24, r2
    1502:	60 2f       	mov	r22, r16
    1504:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    1508:	02 c0       	rjmp	.+4      	; 0x150e <_Z8recvfromhPhjS_Pj+0x1f8>
 * @return	This function return received data size for success else -1.
 */
uint16_t recvfrom(SOCKET s, uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t *port)
{
  uint8_t head[8];
  uint16_t data_len=0;
    150a:	ee 24       	eor	r14, r14
    150c:	ff 24       	eor	r15, r15
      break;

    default :
      break;
    }
    W5100.execCmdSn(s, Sock_RECV);
    150e:	88 e1       	ldi	r24, 0x18	; 24
    1510:	95 e0       	ldi	r25, 0x05	; 5
    1512:	6d 2d       	mov	r22, r13
    1514:	40 e4       	ldi	r20, 0x40	; 64
    1516:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN10W5100Class9execCmdSnEh7SockCMD>
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <_Z8recvfromhPhjS_Pj+0x20a>
 * @return	This function return received data size for success else -1.
 */
uint16_t recvfrom(SOCKET s, uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t *port)
{
  uint8_t head[8];
  uint16_t data_len=0;
    151c:	ee 24       	eor	r14, r14
    151e:	ff 24       	eor	r15, r15
      break;
    }
    W5100.execCmdSn(s, Sock_RECV);
  }
  return data_len;
}
    1520:	8e 2d       	mov	r24, r14
    1522:	9f 2d       	mov	r25, r15
    1524:	2a 96       	adiw	r28, 0x0a	; 10
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	ef 90       	pop	r14
    153c:	df 90       	pop	r13
    153e:	bf 90       	pop	r11
    1540:	af 90       	pop	r10
    1542:	9f 90       	pop	r9
    1544:	8f 90       	pop	r8
    1546:	7f 90       	pop	r7
    1548:	6f 90       	pop	r6
    154a:	5f 90       	pop	r5
    154c:	4f 90       	pop	r4
    154e:	3f 90       	pop	r3
    1550:	2f 90       	pop	r2
    1552:	08 95       	ret

00001554 <_Z8igmpsendhPKhj>:


uint16_t igmpsend(SOCKET s, const uint8_t * buf, uint16_t len)
{
    1554:	df 92       	push	r13
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	d8 2e       	mov	r13, r24
    1564:	9b 01       	movw	r18, r22
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    {
      /* in case of igmp, if send fails, then socket closed */
      /* if you want change, remove this code. */
      close(s);
      return 0;
    1566:	04 2f       	mov	r16, r20
    1568:	15 2f       	mov	r17, r21
    156a:	88 e0       	ldi	r24, 0x08	; 8
    156c:	01 30       	cpi	r16, 0x01	; 1
    156e:	18 07       	cpc	r17, r24
    1570:	10 f0       	brcs	.+4      	; 0x1576 <_Z8igmpsendhPKhj+0x22>
    1572:	00 e0       	ldi	r16, 0x00	; 0
    1574:	18 e0       	ldi	r17, 0x08	; 8
  if (len > W5100.SSIZE) 
    ret = W5100.SSIZE; // check size not to exceed MAX size.
  else 
    ret = len;

  if (ret == 0)
    1576:	01 15       	cp	r16, r1
    1578:	11 05       	cpc	r17, r1
    157a:	99 f1       	breq	.+102    	; 0x15e2 <_Z8igmpsendhPKhj+0x8e>
    return 0;

  W5100.send_data_processing(s, (uint8_t *)buf, ret);
    157c:	c8 e1       	ldi	r28, 0x18	; 24
    157e:	d5 e0       	ldi	r29, 0x05	; 5
    1580:	ce 01       	movw	r24, r28
    1582:	6d 2d       	mov	r22, r13
    1584:	a9 01       	movw	r20, r18
    1586:	98 01       	movw	r18, r16
    1588:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_ZN10W5100Class20send_data_processingEhPKhj>
  W5100.execCmdSn(s, Sock_SEND);
    158c:	ce 01       	movw	r24, r28
    158e:	6d 2d       	mov	r22, r13
    1590:	40 e2       	ldi	r20, 0x20	; 32
    1592:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN10W5100Class9execCmdSnEh7SockCMD>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1596:	8d 2d       	mov	r24, r13
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	04 96       	adiw	r24, 0x04	; 4
    159c:	98 2f       	mov	r25, r24
    159e:	88 27       	eor	r24, r24
    15a0:	ec 01       	movw	r28, r24
    15a2:	22 96       	adiw	r28, 0x02	; 2
    15a4:	0f 2e       	mov	r0, r31
    15a6:	f3 e0       	ldi	r31, 0x03	; 3
    15a8:	ef 2e       	mov	r14, r31
    15aa:	ff 24       	eor	r15, r15
    15ac:	f0 2d       	mov	r31, r0
    15ae:	e8 0e       	add	r14, r24
    15b0:	f9 1e       	adc	r15, r25

  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    15b2:	0e c0       	rjmp	.+28     	; 0x15d0 <_Z8igmpsendhPKhj+0x7c>
    15b4:	c7 01       	movw	r24, r14
    15b6:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
    15ba:	ce 01       	movw	r24, r28
    15bc:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  {
    status = W5100.readSnSR(s);
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    15c0:	83 ff       	sbrs	r24, 3
    15c2:	06 c0       	rjmp	.+12     	; 0x15d0 <_Z8igmpsendhPKhj+0x7c>
    {
      /* in case of igmp, if send fails, then socket closed */
      /* if you want change, remove this code. */
      close(s);
    15c4:	8d 2d       	mov	r24, r13
    15c6:	0e 94 74 07 	call	0xee8	; 0xee8 <_Z5closeh>
      return 0;
    15ca:	00 e0       	ldi	r16, 0x00	; 0
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	09 c0       	rjmp	.+18     	; 0x15e2 <_Z8igmpsendhPKhj+0x8e>
    15d0:	ce 01       	movw	r24, r28
    15d2:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
    return 0;

  W5100.send_data_processing(s, (uint8_t *)buf, ret);
  W5100.execCmdSn(s, Sock_SEND);

  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    15d6:	84 ff       	sbrs	r24, 4
    15d8:	ed cf       	rjmp	.-38     	; 0x15b4 <_Z8igmpsendhPKhj+0x60>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    15da:	ce 01       	movw	r24, r28
    15dc:	60 e1       	ldi	r22, 0x10	; 16
    15de:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    }
  }

  W5100.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    15e2:	80 2f       	mov	r24, r16
    15e4:	91 2f       	mov	r25, r17
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
    15f2:	df 90       	pop	r13
    15f4:	08 95       	ret

000015f6 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    15f6:	af 92       	push	r10
    15f8:	bf 92       	push	r11
    15fa:	cf 92       	push	r12
    15fc:	df 92       	push	r13
    15fe:	ff 92       	push	r15
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	c8 2f       	mov	r28, r24
    160a:	6b 01       	movw	r12, r22
    160c:	5a 01       	movw	r10, r20
    160e:	89 01       	movw	r16, r18
  uint16_t ret =0;
  if (len > W5100.getTXFreeSize(s))
    1610:	88 e1       	ldi	r24, 0x18	; 24
    1612:	95 e0       	ldi	r25, 0x05	; 5
    1614:	6c 2f       	mov	r22, r28
    1616:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN10W5100Class13getTXFreeSizeEh>
    161a:	80 17       	cp	r24, r16
    161c:	91 07       	cpc	r25, r17
    161e:	40 f4       	brcc	.+16     	; 0x1630 <_Z10bufferDatahjPKhj+0x3a>
  {
    ret = W5100.getTXFreeSize(s); // check size not to exceed MAX size.
    1620:	88 e1       	ldi	r24, 0x18	; 24
    1622:	95 e0       	ldi	r25, 0x05	; 5
    1624:	6c 2f       	mov	r22, r28
    1626:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN10W5100Class13getTXFreeSizeEh>
    162a:	f8 2e       	mov	r15, r24
    162c:	d9 2f       	mov	r29, r25
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <_Z10bufferDatahjPKhj+0x3e>
  }
  else
  {
    ret = len;
    1630:	f0 2e       	mov	r15, r16
    1632:	d1 2f       	mov	r29, r17
  }
  W5100.send_data_processing_offset(s, offset, buf, ret);
    1634:	88 e1       	ldi	r24, 0x18	; 24
    1636:	95 e0       	ldi	r25, 0x05	; 5
    1638:	6c 2f       	mov	r22, r28
    163a:	a6 01       	movw	r20, r12
    163c:	95 01       	movw	r18, r10
    163e:	0f 2d       	mov	r16, r15
    1640:	1d 2f       	mov	r17, r29
    1642:	0e 94 c5 0c 	call	0x198a	; 0x198a <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    1646:	8f 2d       	mov	r24, r15
    1648:	9d 2f       	mov	r25, r29
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	ff 90       	pop	r15
    1654:	df 90       	pop	r13
    1656:	cf 90       	pop	r12
    1658:	bf 90       	pop	r11
    165a:	af 90       	pop	r10
    165c:	08 95       	ret

0000165e <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	fb 01       	movw	r30, r22
    1668:	8a 01       	movw	r16, r20
  if
    166a:	90 81       	ld	r25, Z
    166c:	99 23       	and	r25, r25
    166e:	49 f4       	brne	.+18     	; 0x1682 <_Z8startUDPhPhj+0x24>
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	99 23       	and	r25, r25
    1674:	31 f4       	brne	.+12     	; 0x1682 <_Z8startUDPhPhj+0x24>
    1676:	92 81       	ldd	r25, Z+2	; 0x02
    1678:	99 23       	and	r25, r25
    167a:	19 f4       	brne	.+6      	; 0x1682 <_Z8startUDPhPhj+0x24>
    167c:	93 81       	ldd	r25, Z+3	; 0x03
    167e:	99 23       	and	r25, r25
    1680:	e1 f0       	breq	.+56     	; 0x16ba <_Z8startUDPhPhj+0x5c>
    1682:	01 15       	cp	r16, r1
    1684:	11 05       	cpc	r17, r1
    1686:	e1 f0       	breq	.+56     	; 0x16c0 <_Z8startUDPhPhj+0x62>
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    1688:	c8 2f       	mov	r28, r24
    168a:	d0 e0       	ldi	r29, 0x00	; 0
    168c:	24 96       	adiw	r28, 0x04	; 4
    168e:	dc 2f       	mov	r29, r28
    1690:	cc 27       	eor	r28, r28
    1692:	ce 01       	movw	r24, r28
    1694:	0c 96       	adiw	r24, 0x0c	; 12
    1696:	bf 01       	movw	r22, r30
    1698:	44 e0       	ldi	r20, 0x04	; 4
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    16a0:	ce 01       	movw	r24, r28
    16a2:	40 96       	adiw	r24, 0x10	; 16
    16a4:	61 2f       	mov	r22, r17
    16a6:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    16aa:	ce 01       	movw	r24, r28
    16ac:	41 96       	adiw	r24, 0x11	; 17
    16ae:	60 2f       	mov	r22, r16
    16b0:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
  }
  else
  {
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);
    return 1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <_Z8startUDPhPhj+0x66>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <_Z8startUDPhPhj+0x66>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
  {
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);
    return 1;
  }
}
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	08 95       	ret

000016ce <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	18 2f       	mov	r17, r24
  W5100.execCmdSn(s, Sock_SEND);
    16d6:	88 e1       	ldi	r24, 0x18	; 24
    16d8:	95 e0       	ldi	r25, 0x05	; 5
    16da:	61 2f       	mov	r22, r17
    16dc:	40 e2       	ldi	r20, 0x20	; 32
    16de:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <_ZN10W5100Class9execCmdSnEh7SockCMD>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    16e2:	d1 2f       	mov	r29, r17
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	c8 2f       	mov	r28, r24
    16e8:	ce 5f       	subi	r28, 0xFE	; 254
    16ea:	db 4f       	sbci	r29, 0xFB	; 251
		
  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    16ec:	0c c0       	rjmp	.+24     	; 0x1706 <_Z7sendUDPh+0x38>
    16ee:	ce 01       	movw	r24, r28
    16f0:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  {
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    16f4:	83 ff       	sbrs	r24, 3
    16f6:	07 c0       	rjmp	.+14     	; 0x1706 <_Z7sendUDPh+0x38>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    16f8:	ce 01       	movw	r24, r28
    16fa:	68 e1       	ldi	r22, 0x18	; 24
    16fc:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    {
      /* +2008.01 [bj]: clear interrupt */
      W5100.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0b c0       	rjmp	.+22     	; 0x171c <_Z7sendUDPh+0x4e>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1706:	ce 01       	movw	r24, r28
    1708:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
int sendUDP(SOCKET s)
{
  W5100.execCmdSn(s, Sock_SEND);
		
  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    170c:	84 ff       	sbrs	r24, 4
    170e:	ef cf       	rjmp	.-34     	; 0x16ee <_Z7sendUDPh+0x20>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    1710:	ce 01       	movw	r24, r28
    1712:	60 e1       	ldi	r22, 0x10	; 16
    1714:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>

  /* +2008.01 bj */	
  W5100.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
}
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	08 95       	ret

00001724 <_ZN10W5100Class5writeEjh>:
  uint16_t RBASE[SOCKETS]; // Rx buffer base address

private:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  inline static void initSS()    { DDRB  |=  _BV(4); };
  inline static void setSS()     { PORTB &= ~_BV(4); };
    1724:	2c 98       	cbi	0x05, 4	; 5
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1726:	20 ef       	ldi	r18, 0xF0	; 240
    1728:	2e bd       	out	0x2e, r18	; 46
  while (!(SPSR & _BV(SPIF)))
    172a:	0d b4       	in	r0, 0x2d	; 45
    172c:	07 fe       	sbrs	r0, 7
    172e:	fd cf       	rjmp	.-6      	; 0x172a <_ZN10W5100Class5writeEjh+0x6>
    ;
  return SPDR;
    1730:	2e b5       	in	r18, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1732:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    1734:	0d b4       	in	r0, 0x2d	; 45
    1736:	07 fe       	sbrs	r0, 7
    1738:	fd cf       	rjmp	.-6      	; 0x1734 <_ZN10W5100Class5writeEjh+0x10>
    ;
  return SPDR;
    173a:	9e b5       	in	r25, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    173c:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    173e:	0d b4       	in	r0, 0x2d	; 45
    1740:	07 fe       	sbrs	r0, 7
    1742:	fd cf       	rjmp	.-6      	; 0x173e <_ZN10W5100Class5writeEjh+0x1a>
    ;
  return SPDR;
    1744:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1746:	6e bd       	out	0x2e, r22	; 46
  while (!(SPSR & _BV(SPIF)))
    1748:	0d b4       	in	r0, 0x2d	; 45
    174a:	07 fe       	sbrs	r0, 7
    174c:	fd cf       	rjmp	.-6      	; 0x1748 <_ZN10W5100Class5writeEjh+0x24>
    ;
  return SPDR;
    174e:	8e b5       	in	r24, 0x2e	; 46
  inline static void resetSS()   { PORTB |=  _BV(4); };
    1750:	2c 9a       	sbi	0x05, 4	; 5
  SPI.transfer(_addr >> 8);
  SPI.transfer(_addr & 0xFF);
  SPI.transfer(_data);
  resetSS();
  return 1;
}
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	08 95       	ret

00001756 <_ZN10W5100Class4initEv>:

#define TXBUF_BASE 0x4000
#define RXBUF_BASE 0x6000

void W5100Class::init(void)
{
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	ec 01       	movw	r28, r24
  delay(300);
    175c:	6c e2       	ldi	r22, 0x2C	; 44
    175e:	71 e0       	ldi	r23, 0x01	; 1
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <delay>

  SPI.begin();
    1768:	0e 94 21 17 	call	0x2e42	; 0x2e42 <_ZN8SPIClass5beginEv>
  uint16_t SBASE[SOCKETS]; // Tx buffer base address
  uint16_t RBASE[SOCKETS]; // Rx buffer base address

private:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  inline static void initSS()    { DDRB  |=  _BV(4); };
    176c:	24 9a       	sbi	0x04, 4	; 4
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	60 e8       	ldi	r22, 0x80	; 128
    1774:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
  __GP_REGISTER8 (TMSR,   0x001B);    // Transmit memory size
    1778:	8b e1       	ldi	r24, 0x1B	; 27
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	65 e5       	ldi	r22, 0x55	; 85
    177e:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
    1782:	8a e1       	ldi	r24, 0x1A	; 26
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	65 e5       	ldi	r22, 0x55	; 85
    1788:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e4       	ldi	r25, 0x40	; 64
    1790:	99 83       	std	Y+1, r25	; 0x01
    1792:	88 83       	st	Y, r24
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e6       	ldi	r25, 0x60	; 96
    1798:	99 87       	std	Y+9, r25	; 0x09
    179a:	88 87       	std	Y+8, r24	; 0x08
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	98 e4       	ldi	r25, 0x48	; 72
    17a0:	9b 83       	std	Y+3, r25	; 0x03
    17a2:	8a 83       	std	Y+2, r24	; 0x02
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	98 e6       	ldi	r25, 0x68	; 104
    17a8:	9b 87       	std	Y+11, r25	; 0x0b
    17aa:	8a 87       	std	Y+10, r24	; 0x0a
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e5       	ldi	r25, 0x50	; 80
    17b0:	9d 83       	std	Y+5, r25	; 0x05
    17b2:	8c 83       	std	Y+4, r24	; 0x04
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e7       	ldi	r25, 0x70	; 112
    17b8:	9d 87       	std	Y+13, r25	; 0x0d
    17ba:	8c 87       	std	Y+12, r24	; 0x0c
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	98 e5       	ldi	r25, 0x58	; 88
    17c0:	9f 83       	std	Y+7, r25	; 0x07
    17c2:	8e 83       	std	Y+6, r24	; 0x06
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	98 e7       	ldi	r25, 0x78	; 120
    17c8:	9f 87       	std	Y+15, r25	; 0x0f
    17ca:	8e 87       	std	Y+14, r24	; 0x0e
  }
}
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	08 95       	ret

000017d2 <_ZN10W5100Class5writeEjPKhj>:
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    17d2:	41 15       	cp	r20, r1
    17d4:	51 05       	cpc	r21, r1
    17d6:	09 f1       	breq	.+66     	; 0x181a <_ZN10W5100Class5writeEjPKhj+0x48>
    17d8:	e6 2f       	mov	r30, r22
    17da:	f7 2f       	mov	r31, r23
  SPI.transfer(_data);
  resetSS();
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
    17dc:	9a 01       	movw	r18, r20
    17de:	28 0f       	add	r18, r24
    17e0:	39 1f       	adc	r19, r25
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    17e2:	70 ef       	ldi	r23, 0xF0	; 240
  uint16_t RBASE[SOCKETS]; // Rx buffer base address

private:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  inline static void initSS()    { DDRB  |=  _BV(4); };
  inline static void setSS()     { PORTB &= ~_BV(4); };
    17e4:	2c 98       	cbi	0x05, 4	; 5
    17e6:	7e bd       	out	0x2e, r23	; 46
  while (!(SPSR & _BV(SPIF)))
    17e8:	0d b4       	in	r0, 0x2d	; 45
    17ea:	07 fe       	sbrs	r0, 7
    17ec:	fd cf       	rjmp	.-6      	; 0x17e8 <_ZN10W5100Class5writeEjPKhj+0x16>
    ;
  return SPDR;
    17ee:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    17f0:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    17f2:	0d b4       	in	r0, 0x2d	; 45
    17f4:	07 fe       	sbrs	r0, 7
    17f6:	fd cf       	rjmp	.-6      	; 0x17f2 <_ZN10W5100Class5writeEjPKhj+0x20>
    ;
  return SPDR;
    17f8:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    17fa:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    17fc:	0d b4       	in	r0, 0x2d	; 45
    17fe:	07 fe       	sbrs	r0, 7
    1800:	fd cf       	rjmp	.-6      	; 0x17fc <_ZN10W5100Class5writeEjPKhj+0x2a>
    ;
  return SPDR;
    1802:	6e b5       	in	r22, 0x2e	; 46
  {
    setSS();    
    SPI.transfer(0xF0);
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    _addr++;
    1804:	01 96       	adiw	r24, 0x01	; 1
    SPI.transfer(_buf[i]);
    1806:	61 91       	ld	r22, Z+
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1808:	6e bd       	out	0x2e, r22	; 46
  while (!(SPSR & _BV(SPIF)))
    180a:	0d b4       	in	r0, 0x2d	; 45
    180c:	07 fe       	sbrs	r0, 7
    180e:	fd cf       	rjmp	.-6      	; 0x180a <_ZN10W5100Class5writeEjPKhj+0x38>
    ;
  return SPDR;
    1810:	6e b5       	in	r22, 0x2e	; 46
  inline static void resetSS()   { PORTB |=  _BV(4); };
    1812:	2c 9a       	sbi	0x05, 4	; 5
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    1814:	82 17       	cp	r24, r18
    1816:	93 07       	cpc	r25, r19
    1818:	29 f7       	brne	.-54     	; 0x17e4 <_ZN10W5100Class5writeEjPKhj+0x12>
    _addr++;
    SPI.transfer(_buf[i]);
    resetSS();
  }
  return _len;
}
    181a:	84 2f       	mov	r24, r20
    181c:	95 2f       	mov	r25, r21
    181e:	08 95       	ret

00001820 <_ZN10W5100Class4readEj>:
  uint16_t RBASE[SOCKETS]; // Rx buffer base address

private:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  inline static void initSS()    { DDRB  |=  _BV(4); };
  inline static void setSS()     { PORTB &= ~_BV(4); };
    1820:	2c 98       	cbi	0x05, 4	; 5
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1822:	2f e0       	ldi	r18, 0x0F	; 15
    1824:	2e bd       	out	0x2e, r18	; 46
  while (!(SPSR & _BV(SPIF)))
    1826:	0d b4       	in	r0, 0x2d	; 45
    1828:	07 fe       	sbrs	r0, 7
    182a:	fd cf       	rjmp	.-6      	; 0x1826 <_ZN10W5100Class4readEj+0x6>
    ;
  return SPDR;
    182c:	2e b5       	in	r18, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    182e:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    1830:	0d b4       	in	r0, 0x2d	; 45
    1832:	07 fe       	sbrs	r0, 7
    1834:	fd cf       	rjmp	.-6      	; 0x1830 <_ZN10W5100Class4readEj+0x10>
    ;
  return SPDR;
    1836:	9e b5       	in	r25, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1838:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    183a:	0d b4       	in	r0, 0x2d	; 45
    183c:	07 fe       	sbrs	r0, 7
    183e:	fd cf       	rjmp	.-6      	; 0x183a <_ZN10W5100Class4readEj+0x1a>
    ;
  return SPDR;
    1840:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1842:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & _BV(SPIF)))
    1844:	0d b4       	in	r0, 0x2d	; 45
    1846:	07 fe       	sbrs	r0, 7
    1848:	fd cf       	rjmp	.-6      	; 0x1844 <_ZN10W5100Class4readEj+0x24>
    ;
  return SPDR;
    184a:	8e b5       	in	r24, 0x2e	; 46
  inline static void resetSS()   { PORTB |=  _BV(4); };
    184c:	2c 9a       	sbi	0x05, 4	; 5
  SPI.transfer(_addr >> 8);
  SPI.transfer(_addr & 0xFF);
  uint8_t _data = SPI.transfer(0);
  resetSS();
  return _data;
}
    184e:	08 95       	ret

00001850 <_ZN10W5100Class13getTXFreeSizeEh>:
    RBASE[i] = RXBUF_BASE + RSIZE * i;
  }
}

uint16_t W5100Class::getTXFreeSize(SOCKET s)
{
    1850:	8f 92       	push	r8
    1852:	9f 92       	push	r9
    1854:	af 92       	push	r10
    1856:	bf 92       	push	r11
    1858:	cf 92       	push	r12
    185a:	df 92       	push	r13
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1868:	86 2f       	mov	r24, r22
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	04 96       	adiw	r24, 0x04	; 4
    186e:	98 2f       	mov	r25, r24
    1870:	88 27       	eor	r24, r24
    1872:	aa 24       	eor	r10, r10
    1874:	bb 24       	eor	r11, r11
    1876:	68 94       	set
    1878:	a5 f8       	bld	r10, 5
    187a:	a8 0e       	add	r10, r24
    187c:	b9 1e       	adc	r11, r25
    187e:	0f 2e       	mov	r0, r31
    1880:	f1 e2       	ldi	r31, 0x21	; 33
    1882:	cf 2e       	mov	r12, r31
    1884:	dd 24       	eor	r13, r13
    1886:	f0 2d       	mov	r31, r0
    1888:	c8 0e       	add	r12, r24
    188a:	d9 1e       	adc	r13, r25
  uint16_t val=0, val1=0;
    188c:	00 e0       	ldi	r16, 0x00	; 0
    188e:	10 e0       	ldi	r17, 0x00	; 0
    1890:	c5 01       	movw	r24, r10
    1892:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
    1896:	c8 2f       	mov	r28, r24
    1898:	c6 01       	movw	r24, r12
    189a:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	fc 2e       	mov	r15, r28
    18a2:	ee 24       	eor	r14, r14
    18a4:	ec 01       	movw	r28, r24
    18a6:	ce 29       	or	r28, r14
    18a8:	df 29       	or	r29, r15
  do {
    val1 = readSnTX_FSR(s);
    if (val1 != 0)
    18aa:	20 97       	sbiw	r28, 0x00	; 0
    18ac:	69 f0       	breq	.+26     	; 0x18c8 <_ZN10W5100Class13getTXFreeSizeEh+0x78>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    18ae:	c5 01       	movw	r24, r10
    18b0:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
    18b4:	08 2f       	mov	r16, r24
    18b6:	c6 01       	movw	r24, r12
    18b8:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	90 2e       	mov	r9, r16
    18c0:	88 24       	eor	r8, r8
    18c2:	8c 01       	movw	r16, r24
    18c4:	08 29       	or	r16, r8
    18c6:	19 29       	or	r17, r9
}

uint16_t W5100Class::getTXFreeSize(SOCKET s)
{
  uint16_t val=0, val1=0;
  do {
    18c8:	0c 17       	cp	r16, r28
    18ca:	1d 07       	cpc	r17, r29
    18cc:	09 f7       	brne	.-62     	; 0x1890 <_ZN10W5100Class13getTXFreeSizeEh+0x40>
    if (val1 != 0)
      val = readSnTX_FSR(s);
  } 
  while (val != val1);
  return val;
}
    18ce:	80 2f       	mov	r24, r16
    18d0:	91 2f       	mov	r25, r17
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	ff 90       	pop	r15
    18dc:	ef 90       	pop	r14
    18de:	df 90       	pop	r13
    18e0:	cf 90       	pop	r12
    18e2:	bf 90       	pop	r11
    18e4:	af 90       	pop	r10
    18e6:	9f 90       	pop	r9
    18e8:	8f 90       	pop	r8
    18ea:	08 95       	ret

000018ec <_ZN10W5100Class17getRXReceivedSizeEh>:

uint16_t W5100Class::getRXReceivedSize(SOCKET s)
{
    18ec:	8f 92       	push	r8
    18ee:	9f 92       	push	r9
    18f0:	af 92       	push	r10
    18f2:	bf 92       	push	r11
    18f4:	cf 92       	push	r12
    18f6:	df 92       	push	r13
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1904:	86 2f       	mov	r24, r22
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	04 96       	adiw	r24, 0x04	; 4
    190a:	98 2f       	mov	r25, r24
    190c:	88 27       	eor	r24, r24
    190e:	0f 2e       	mov	r0, r31
    1910:	f6 e2       	ldi	r31, 0x26	; 38
    1912:	af 2e       	mov	r10, r31
    1914:	bb 24       	eor	r11, r11
    1916:	f0 2d       	mov	r31, r0
    1918:	a8 0e       	add	r10, r24
    191a:	b9 1e       	adc	r11, r25
    191c:	0f 2e       	mov	r0, r31
    191e:	f7 e2       	ldi	r31, 0x27	; 39
    1920:	cf 2e       	mov	r12, r31
    1922:	dd 24       	eor	r13, r13
    1924:	f0 2d       	mov	r31, r0
    1926:	c8 0e       	add	r12, r24
    1928:	d9 1e       	adc	r13, r25
  uint16_t val=0,val1=0;
    192a:	00 e0       	ldi	r16, 0x00	; 0
    192c:	10 e0       	ldi	r17, 0x00	; 0
    192e:	c5 01       	movw	r24, r10
    1930:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
    1934:	c8 2f       	mov	r28, r24
    1936:	c6 01       	movw	r24, r12
    1938:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	fc 2e       	mov	r15, r28
    1940:	ee 24       	eor	r14, r14
    1942:	ec 01       	movw	r28, r24
    1944:	ce 29       	or	r28, r14
    1946:	df 29       	or	r29, r15
  do {
    val1 = readSnRX_RSR(s);
    if (val1 != 0)
    1948:	20 97       	sbiw	r28, 0x00	; 0
    194a:	69 f0       	breq	.+26     	; 0x1966 <_ZN10W5100Class17getRXReceivedSizeEh+0x7a>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    194c:	c5 01       	movw	r24, r10
    194e:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
    1952:	08 2f       	mov	r16, r24
    1954:	c6 01       	movw	r24, r12
    1956:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	90 2e       	mov	r9, r16
    195e:	88 24       	eor	r8, r8
    1960:	8c 01       	movw	r16, r24
    1962:	08 29       	or	r16, r8
    1964:	19 29       	or	r17, r9
}

uint16_t W5100Class::getRXReceivedSize(SOCKET s)
{
  uint16_t val=0,val1=0;
  do {
    1966:	0c 17       	cp	r16, r28
    1968:	1d 07       	cpc	r17, r29
    196a:	09 f7       	brne	.-62     	; 0x192e <_ZN10W5100Class17getRXReceivedSizeEh+0x42>
    if (val1 != 0)
      val = readSnRX_RSR(s);
  } 
  while (val != val1);
  return val;
}
    196c:	80 2f       	mov	r24, r16
    196e:	91 2f       	mov	r25, r17
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	ff 90       	pop	r15
    197a:	ef 90       	pop	r14
    197c:	df 90       	pop	r13
    197e:	cf 90       	pop	r12
    1980:	bf 90       	pop	r11
    1982:	af 90       	pop	r10
    1984:	9f 90       	pop	r9
    1986:	8f 90       	pop	r8
    1988:	08 95       	ret

0000198a <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>:
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
}

void W5100Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    198a:	2f 92       	push	r2
    198c:	3f 92       	push	r3
    198e:	4f 92       	push	r4
    1990:	5f 92       	push	r5
    1992:	6f 92       	push	r6
    1994:	7f 92       	push	r7
    1996:	8f 92       	push	r8
    1998:	9f 92       	push	r9
    199a:	af 92       	push	r10
    199c:	bf 92       	push	r11
    199e:	cf 92       	push	r12
    19a0:	df 92       	push	r13
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	2c 01       	movw	r4, r24
    19b0:	5a 01       	movw	r10, r20
    19b2:	19 01       	movw	r2, r18
    19b4:	78 01       	movw	r14, r16
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    19b6:	c6 2e       	mov	r12, r22
    19b8:	dd 24       	eor	r13, r13
    19ba:	c6 01       	movw	r24, r12
    19bc:	04 96       	adiw	r24, 0x04	; 4
    19be:	d8 2f       	mov	r29, r24
    19c0:	cc 27       	eor	r28, r28
    19c2:	0f 2e       	mov	r0, r31
    19c4:	f4 e2       	ldi	r31, 0x24	; 36
    19c6:	6f 2e       	mov	r6, r31
    19c8:	77 24       	eor	r7, r7
    19ca:	f0 2d       	mov	r31, r0
    19cc:	6c 0e       	add	r6, r28
    19ce:	7d 1e       	adc	r7, r29
    19d0:	c3 01       	movw	r24, r6
    19d2:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
    19d6:	18 2f       	mov	r17, r24
    19d8:	0f 2e       	mov	r0, r31
    19da:	f5 e2       	ldi	r31, 0x25	; 37
    19dc:	8f 2e       	mov	r8, r31
    19de:	99 24       	eor	r9, r9
    19e0:	f0 2d       	mov	r31, r0
    19e2:	8c 0e       	add	r8, r28
    19e4:	9d 1e       	adc	r9, r29
    19e6:	c4 01       	movw	r24, r8
    19e8:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
    19ec:	c8 2f       	mov	r28, r24
    19ee:	d0 e0       	ldi	r29, 0x00	; 0
    19f0:	91 2f       	mov	r25, r17
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	8c 2b       	or	r24, r28
    19f6:	9d 2b       	or	r25, r29
  uint16_t ptr = readSnTX_WR(s);
  ptr += data_offset;
    19f8:	ec 01       	movw	r28, r24
    19fa:	ca 0d       	add	r28, r10
    19fc:	db 1d       	adc	r29, r11
  uint16_t offset = ptr & SMASK;
    19fe:	ae 01       	movw	r20, r28
    1a00:	57 70       	andi	r21, 0x07	; 7
  uint16_t dstAddr = offset + SBASE[s];
    1a02:	c6 01       	movw	r24, r12
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	84 0d       	add	r24, r4
    1a0a:	95 1d       	adc	r25, r5
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	80 81       	ld	r24, Z
    1a10:	91 81       	ldd	r25, Z+1	; 0x01
    1a12:	9a 01       	movw	r18, r20
    1a14:	28 0f       	add	r18, r24
    1a16:	39 1f       	adc	r19, r25

  if (offset + len > SSIZE) 
    1a18:	ca 01       	movw	r24, r20
    1a1a:	8e 0d       	add	r24, r14
    1a1c:	9f 1d       	adc	r25, r15
    1a1e:	f8 e0       	ldi	r31, 0x08	; 8
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	9f 07       	cpc	r25, r31
    1a24:	d8 f0       	brcs	.+54     	; 0x1a5c <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0xd2>
  {
    // Wrap around circular buffer
    uint16_t size = SSIZE - offset;
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	98 e0       	ldi	r25, 0x08	; 8
    1a2a:	5c 01       	movw	r10, r24
    1a2c:	a4 1a       	sub	r10, r20
    1a2e:	b5 0a       	sbc	r11, r21
    write(dstAddr, data, size);
    1a30:	c9 01       	movw	r24, r18
    1a32:	b1 01       	movw	r22, r2
    1a34:	a5 01       	movw	r20, r10
    1a36:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
    write(SBASE[s], data + size, len - size);
    1a3a:	c6 01       	movw	r24, r12
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	84 0d       	add	r24, r4
    1a42:	95 1d       	adc	r25, r5
    1a44:	b1 01       	movw	r22, r2
    1a46:	6a 0d       	add	r22, r10
    1a48:	7b 1d       	adc	r23, r11
    1a4a:	a7 01       	movw	r20, r14
    1a4c:	4a 19       	sub	r20, r10
    1a4e:	5b 09       	sbc	r21, r11
    1a50:	fc 01       	movw	r30, r24
    1a52:	80 81       	ld	r24, Z
    1a54:	91 81       	ldd	r25, Z+1	; 0x01
    1a56:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
    1a5a:	05 c0       	rjmp	.+10     	; 0x1a66 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0xdc>
  } 
  else {
    write(dstAddr, data, len);
    1a5c:	c9 01       	movw	r24, r18
    1a5e:	b1 01       	movw	r22, r2
    1a60:	a7 01       	movw	r20, r14
    1a62:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN10W5100Class5writeEjPKhj>
  }

  ptr += len;
    1a66:	ce 0d       	add	r28, r14
    1a68:	df 1d       	adc	r29, r15
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    1a6a:	c3 01       	movw	r24, r6
    1a6c:	6d 2f       	mov	r22, r29
    1a6e:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    1a72:	c4 01       	movw	r24, r8
    1a74:	6c 2f       	mov	r22, r28
    1a76:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
  writeSnTX_WR(s, ptr);
}
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	df 90       	pop	r13
    1a88:	cf 90       	pop	r12
    1a8a:	bf 90       	pop	r11
    1a8c:	af 90       	pop	r10
    1a8e:	9f 90       	pop	r9
    1a90:	8f 90       	pop	r8
    1a92:	7f 90       	pop	r7
    1a94:	6f 90       	pop	r6
    1a96:	5f 90       	pop	r5
    1a98:	4f 90       	pop	r4
    1a9a:	3f 90       	pop	r3
    1a9c:	2f 90       	pop	r2
    1a9e:	08 95       	ret

00001aa0 <_ZN10W5100Class20send_data_processingEhPKhj>:
  return val;
}


void W5100Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	fa 01       	movw	r30, r20
    1aa6:	89 01       	movw	r16, r18
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	9f 01       	movw	r18, r30
    1aae:	0e 94 c5 0c 	call	0x198a	; 0x198a <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
}
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	08 95       	ret

00001ab8 <_ZN10W5100Class4readEjPhj>:
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    1ab8:	41 15       	cp	r20, r1
    1aba:	51 05       	cpc	r21, r1
    1abc:	09 f1       	breq	.+66     	; 0x1b00 <_ZN10W5100Class4readEjPhj+0x48>
    1abe:	e6 2f       	mov	r30, r22
    1ac0:	f7 2f       	mov	r31, r23
  uint8_t _data = SPI.transfer(0);
  resetSS();
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
    1ac2:	9a 01       	movw	r18, r20
    1ac4:	28 0f       	add	r18, r24
    1ac6:	39 1f       	adc	r19, r25
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1ac8:	7f e0       	ldi	r23, 0x0F	; 15
  uint16_t RBASE[SOCKETS]; // Rx buffer base address

private:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  inline static void initSS()    { DDRB  |=  _BV(4); };
  inline static void setSS()     { PORTB &= ~_BV(4); };
    1aca:	2c 98       	cbi	0x05, 4	; 5
    1acc:	7e bd       	out	0x2e, r23	; 46
  while (!(SPSR & _BV(SPIF)))
    1ace:	0d b4       	in	r0, 0x2d	; 45
    1ad0:	07 fe       	sbrs	r0, 7
    1ad2:	fd cf       	rjmp	.-6      	; 0x1ace <_ZN10W5100Class4readEjPhj+0x16>
    ;
  return SPDR;
    1ad4:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1ad6:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    1ad8:	0d b4       	in	r0, 0x2d	; 45
    1ada:	07 fe       	sbrs	r0, 7
    1adc:	fd cf       	rjmp	.-6      	; 0x1ad8 <_ZN10W5100Class4readEjPhj+0x20>
    ;
  return SPDR;
    1ade:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1ae0:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    1ae2:	0d b4       	in	r0, 0x2d	; 45
    1ae4:	07 fe       	sbrs	r0, 7
    1ae6:	fd cf       	rjmp	.-6      	; 0x1ae2 <_ZN10W5100Class4readEjPhj+0x2a>
    ;
  return SPDR;
    1ae8:	6e b5       	in	r22, 0x2e	; 46
  {
    setSS();
    SPI.transfer(0x0F);
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    _addr++;
    1aea:	01 96       	adiw	r24, 0x01	; 1
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1aec:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & _BV(SPIF)))
    1aee:	0d b4       	in	r0, 0x2d	; 45
    1af0:	07 fe       	sbrs	r0, 7
    1af2:	fd cf       	rjmp	.-6      	; 0x1aee <_ZN10W5100Class4readEjPhj+0x36>
    ;
  return SPDR;
    1af4:	6e b5       	in	r22, 0x2e	; 46
    _buf[i] = SPI.transfer(0);
    1af6:	61 93       	st	Z+, r22
  inline static void resetSS()   { PORTB |=  _BV(4); };
    1af8:	2c 9a       	sbi	0x05, 4	; 5
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    1afa:	82 17       	cp	r24, r18
    1afc:	93 07       	cpc	r25, r19
    1afe:	29 f7       	brne	.-54     	; 0x1aca <_ZN10W5100Class4readEjPhj+0x12>
    _addr++;
    _buf[i] = SPI.transfer(0);
    resetSS();
  }
  return _len;
}
    1b00:	84 2f       	mov	r24, r20
    1b02:	95 2f       	mov	r25, r21
    1b04:	08 95       	ret

00001b06 <_ZN10W5100Class9read_dataEhPVhS1_j>:
    writeSnRX_RD(s, ptr);
  }
}

void W5100Class::read_data(SOCKET s, volatile uint8_t *src, volatile uint8_t *dst, uint16_t len)
{
    1b06:	af 92       	push	r10
    1b08:	bf 92       	push	r11
    1b0a:	cf 92       	push	r12
    1b0c:	df 92       	push	r13
    1b0e:	ef 92       	push	r14
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	6c 01       	movw	r12, r24
    1b1c:	59 01       	movw	r10, r18
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  src_mask = (uint16_t)src & RMASK;
    1b1e:	57 70       	andi	r21, 0x07	; 7
  src_ptr = RBASE[s] + src_mask;
    1b20:	c6 2f       	mov	r28, r22
    1b22:	d0 e0       	ldi	r29, 0x00	; 0
    1b24:	ce 01       	movw	r24, r28
    1b26:	04 96       	adiw	r24, 0x04	; 4
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	8c 0d       	add	r24, r12
    1b2e:	9d 1d       	adc	r25, r13
    1b30:	fc 01       	movw	r30, r24
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	9a 01       	movw	r18, r20
    1b38:	28 0f       	add	r18, r24
    1b3a:	39 1f       	adc	r19, r25

  if( (src_mask + len) > RSIZE ) 
    1b3c:	c8 01       	movw	r24, r16
    1b3e:	84 0f       	add	r24, r20
    1b40:	95 1f       	adc	r25, r21
    1b42:	f8 e0       	ldi	r31, 0x08	; 8
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	9f 07       	cpc	r25, r31
    1b48:	e0 f0       	brcs	.+56     	; 0x1b82 <_ZN10W5100Class9read_dataEhPVhS1_j+0x7c>
  {
    size = RSIZE - src_mask;
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	98 e0       	ldi	r25, 0x08	; 8
    1b4e:	7c 01       	movw	r14, r24
    1b50:	e4 1a       	sub	r14, r20
    1b52:	f5 0a       	sbc	r15, r21
    read(src_ptr, (uint8_t *)dst, size);
    1b54:	c9 01       	movw	r24, r18
    1b56:	b5 01       	movw	r22, r10
    1b58:	a7 01       	movw	r20, r14
    1b5a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN10W5100Class4readEjPhj>
    dst += size;
    read(RBASE[s], (uint8_t *) dst, len - size);
    1b5e:	ce 01       	movw	r24, r28
    1b60:	04 96       	adiw	r24, 0x04	; 4
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	8c 0d       	add	r24, r12
    1b68:	9d 1d       	adc	r25, r13

  if( (src_mask + len) > RSIZE ) 
  {
    size = RSIZE - src_mask;
    read(src_ptr, (uint8_t *)dst, size);
    dst += size;
    1b6a:	b5 01       	movw	r22, r10
    1b6c:	6e 0d       	add	r22, r14
    1b6e:	7f 1d       	adc	r23, r15
    read(RBASE[s], (uint8_t *) dst, len - size);
    1b70:	a8 01       	movw	r20, r16
    1b72:	4e 19       	sub	r20, r14
    1b74:	5f 09       	sbc	r21, r15
    1b76:	fc 01       	movw	r30, r24
    1b78:	80 81       	ld	r24, Z
    1b7a:	91 81       	ldd	r25, Z+1	; 0x01
    1b7c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN10W5100Class4readEjPhj>
    1b80:	05 c0       	rjmp	.+10     	; 0x1b8c <_ZN10W5100Class9read_dataEhPVhS1_j+0x86>
  } 
  else
    read(src_ptr, (uint8_t *) dst, len);
    1b82:	c9 01       	movw	r24, r18
    1b84:	b5 01       	movw	r22, r10
    1b86:	a8 01       	movw	r20, r16
    1b88:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN10W5100Class4readEjPhj>
}
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	ff 90       	pop	r15
    1b96:	ef 90       	pop	r14
    1b98:	df 90       	pop	r13
    1b9a:	cf 90       	pop	r12
    1b9c:	bf 90       	pop	r11
    1b9e:	af 90       	pop	r10
    1ba0:	08 95       	ret

00001ba2 <_ZN10W5100Class20recv_data_processingEhPhjh>:
  writeSnTX_WR(s, ptr);
}


void W5100Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
{
    1ba2:	4f 92       	push	r4
    1ba4:	5f 92       	push	r5
    1ba6:	6f 92       	push	r6
    1ba8:	7f 92       	push	r7
    1baa:	8f 92       	push	r8
    1bac:	9f 92       	push	r9
    1bae:	af 92       	push	r10
    1bb0:	bf 92       	push	r11
    1bb2:	cf 92       	push	r12
    1bb4:	df 92       	push	r13
    1bb6:	ff 92       	push	r15
    1bb8:	0f 93       	push	r16
    1bba:	1f 93       	push	r17
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	3c 01       	movw	r6, r24
    1bc2:	16 2f       	mov	r17, r22
    1bc4:	2a 01       	movw	r4, r20
    1bc6:	69 01       	movw	r12, r18
    1bc8:	f0 2e       	mov	r15, r16
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1bca:	c6 2f       	mov	r28, r22
    1bcc:	d0 e0       	ldi	r29, 0x00	; 0
    1bce:	24 96       	adiw	r28, 0x04	; 4
    1bd0:	dc 2f       	mov	r29, r28
    1bd2:	cc 27       	eor	r28, r28
    1bd4:	0f 2e       	mov	r0, r31
    1bd6:	f8 e2       	ldi	r31, 0x28	; 40
    1bd8:	8f 2e       	mov	r8, r31
    1bda:	99 24       	eor	r9, r9
    1bdc:	f0 2d       	mov	r31, r0
    1bde:	8c 0e       	add	r8, r28
    1be0:	9d 1e       	adc	r9, r29
    1be2:	c4 01       	movw	r24, r8
    1be4:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
    1be8:	08 2f       	mov	r16, r24
    1bea:	0f 2e       	mov	r0, r31
    1bec:	f9 e2       	ldi	r31, 0x29	; 41
    1bee:	af 2e       	mov	r10, r31
    1bf0:	bb 24       	eor	r11, r11
    1bf2:	f0 2d       	mov	r31, r0
    1bf4:	ac 0e       	add	r10, r28
    1bf6:	bd 1e       	adc	r11, r29
    1bf8:	c5 01       	movw	r24, r10
    1bfa:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	90 2f       	mov	r25, r16
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	e9 01       	movw	r28, r18
    1c08:	c8 2b       	or	r28, r24
    1c0a:	d9 2b       	or	r29, r25
  uint16_t ptr;
  ptr = readSnRX_RD(s);
  read_data(s, (uint8_t *)ptr, data, len);
    1c0c:	c3 01       	movw	r24, r6
    1c0e:	61 2f       	mov	r22, r17
    1c10:	ae 01       	movw	r20, r28
    1c12:	92 01       	movw	r18, r4
    1c14:	86 01       	movw	r16, r12
    1c16:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN10W5100Class9read_dataEhPVhS1_j>
  if (!peek)
    1c1a:	ff 20       	and	r15, r15
    1c1c:	51 f4       	brne	.+20     	; 0x1c32 <_ZN10W5100Class20recv_data_processingEhPhjh+0x90>
  {
    ptr += len;
    1c1e:	cc 0d       	add	r28, r12
    1c20:	dd 1d       	adc	r29, r13
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    1c22:	c4 01       	movw	r24, r8
    1c24:	6d 2f       	mov	r22, r29
    1c26:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    1c2a:	c5 01       	movw	r24, r10
    1c2c:	6c 2f       	mov	r22, r28
    1c2e:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
    writeSnRX_RD(s, ptr);
  }
}
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	df 90       	pop	r13
    1c3e:	cf 90       	pop	r12
    1c40:	bf 90       	pop	r11
    1c42:	af 90       	pop	r10
    1c44:	9f 90       	pop	r9
    1c46:	8f 90       	pop	r8
    1c48:	7f 90       	pop	r7
    1c4a:	6f 90       	pop	r6
    1c4c:	5f 90       	pop	r5
    1c4e:	4f 90       	pop	r4
    1c50:	08 95       	ret

00001c52 <_ZN10W5100Class9execCmdSnEh7SockCMD>:
    resetSS();
  }
  return _len;
}

void W5100Class::execCmdSn(SOCKET s, SockCMD _cmd) {
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	d6 2f       	mov	r29, r22
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	c8 2f       	mov	r28, r24
    1c5c:	cf 5f       	subi	r28, 0xFF	; 255
    1c5e:	db 4f       	sbci	r29, 0xFB	; 251
    1c60:	ce 01       	movw	r24, r28
    1c62:	64 2f       	mov	r22, r20
    1c64:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN10W5100Class5writeEjh>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1c68:	ce 01       	movw	r24, r28
    1c6a:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN10W5100Class4readEj>
  // Send command to socket
  writeSnCR(s, _cmd);
  // Wait for command to complete
  while (readSnCR(s))
    1c6e:	88 23       	and	r24, r24
    1c70:	d9 f7       	brne	.-10     	; 0x1c68 <_ZN10W5100Class9execCmdSnEh7SockCMD+0x16>
    ;
}
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	08 95       	ret

00001c78 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1c78:	fc 01       	movw	r30, r24
    1c7a:	24 85       	ldd	r18, Z+12	; 0x0c
    1c7c:	35 85       	ldd	r19, Z+13	; 0x0d
    1c7e:	f9 01       	movw	r30, r18
    1c80:	e0 5c       	subi	r30, 0xC0	; 192
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 81       	ld	r24, Z
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	2e 5b       	subi	r18, 0xBE	; 190
    1c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8c:	f9 01       	movw	r30, r18
    1c8e:	20 81       	ld	r18, Z
    1c90:	31 81       	ldd	r19, Z+1	; 0x01
    1c92:	82 1b       	sub	r24, r18
    1c94:	93 0b       	sbc	r25, r19
    1c96:	8f 73       	andi	r24, 0x3F	; 63
    1c98:	90 70       	andi	r25, 0x00	; 0
}
    1c9a:	08 95       	ret

00001c9c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	84 85       	ldd	r24, Z+12	; 0x0c
    1ca0:	95 85       	ldd	r25, Z+13	; 0x0d
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	e0 5c       	subi	r30, 0xC0	; 192
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	20 81       	ld	r18, Z
    1caa:	31 81       	ldd	r19, Z+1	; 0x01
    1cac:	fc 01       	movw	r30, r24
    1cae:	ee 5b       	subi	r30, 0xBE	; 190
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	40 81       	ld	r20, Z
    1cb4:	51 81       	ldd	r21, Z+1	; 0x01
    1cb6:	24 17       	cp	r18, r20
    1cb8:	35 07       	cpc	r19, r21
    1cba:	59 f0       	breq	.+22     	; 0x1cd2 <_ZN14HardwareSerial4peekEv+0x36>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	ee 5b       	subi	r30, 0xBE	; 190
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	20 81       	ld	r18, Z
    1cc4:	31 81       	ldd	r19, Z+1	; 0x01
    1cc6:	82 0f       	add	r24, r18
    1cc8:	93 1f       	adc	r25, r19
    1cca:	fc 01       	movw	r30, r24
    1ccc:	80 81       	ld	r24, Z
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    1cd6:	08 95       	ret

00001cd8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1cd8:	dc 01       	movw	r26, r24
    1cda:	1c 96       	adiw	r26, 0x0c	; 12
    1cdc:	8d 91       	ld	r24, X+
    1cde:	9c 91       	ld	r25, X
    1ce0:	1d 97       	sbiw	r26, 0x0d	; 13
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	e0 5c       	subi	r30, 0xC0	; 192
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	20 81       	ld	r18, Z
    1cea:	31 81       	ldd	r19, Z+1	; 0x01
    1cec:	fc 01       	movw	r30, r24
    1cee:	ee 5b       	subi	r30, 0xBE	; 190
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	40 81       	ld	r20, Z
    1cf4:	51 81       	ldd	r21, Z+1	; 0x01
    1cf6:	24 17       	cp	r18, r20
    1cf8:	35 07       	cpc	r19, r21
    1cfa:	99 f0       	breq	.+38     	; 0x1d22 <_ZN14HardwareSerial4readEv+0x4a>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	ee 5b       	subi	r30, 0xBE	; 190
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	20 81       	ld	r18, Z
    1d04:	31 81       	ldd	r19, Z+1	; 0x01
    1d06:	82 0f       	add	r24, r18
    1d08:	93 1f       	adc	r25, r19
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	8c 91       	ld	r24, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    1d0e:	20 81       	ld	r18, Z
    1d10:	31 81       	ldd	r19, Z+1	; 0x01
    1d12:	2f 5f       	subi	r18, 0xFF	; 255
    1d14:	3f 4f       	sbci	r19, 0xFF	; 255
    1d16:	2f 73       	andi	r18, 0x3F	; 63
    1d18:	30 70       	andi	r19, 0x00	; 0
    1d1a:	31 83       	std	Z+1, r19	; 0x01
    1d1c:	20 83       	st	Z, r18
    return c;
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    1d22:	8f ef       	ldi	r24, 0xFF	; 255
    1d24:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    1d26:	08 95       	ret

00001d28 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    1d28:	dc 01       	movw	r26, r24
    1d2a:	1e 96       	adiw	r26, 0x0e	; 14
    1d2c:	ed 91       	ld	r30, X+
    1d2e:	fc 91       	ld	r31, X
    1d30:	1f 97       	sbiw	r26, 0x0f	; 15
    1d32:	df 01       	movw	r26, r30
    1d34:	a0 5c       	subi	r26, 0xC0	; 192
    1d36:	bf 4f       	sbci	r27, 0xFF	; 255
    1d38:	ee 5b       	subi	r30, 0xBE	; 190
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	2d 91       	ld	r18, X+
    1d3e:	3c 91       	ld	r19, X
    1d40:	11 97       	sbiw	r26, 0x01	; 1
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	28 17       	cp	r18, r24
    1d48:	39 07       	cpc	r19, r25
    1d4a:	c1 f7       	brne	.-16     	; 0x1d3c <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    1d4c:	08 95       	ret

00001d4e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	ec 01       	movw	r28, r24
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1d56:	ae 85       	ldd	r26, Y+14	; 0x0e
    1d58:	bf 85       	ldd	r27, Y+15	; 0x0f
    1d5a:	fd 01       	movw	r30, r26
    1d5c:	e0 5c       	subi	r30, 0xC0	; 192
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	20 81       	ld	r18, Z
    1d62:	31 81       	ldd	r19, Z+1	; 0x01
    1d64:	2f 5f       	subi	r18, 0xFF	; 255
    1d66:	3f 4f       	sbci	r19, 0xFF	; 255
    1d68:	2f 73       	andi	r18, 0x3F	; 63
    1d6a:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1d6c:	12 2f       	mov	r17, r18
    1d6e:	73 2f       	mov	r23, r19
    1d70:	fd 01       	movw	r30, r26
    1d72:	ee 5b       	subi	r30, 0xBE	; 190
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	41 2f       	mov	r20, r17
    1d78:	57 2f       	mov	r21, r23
    1d7a:	80 81       	ld	r24, Z
    1d7c:	91 81       	ldd	r25, Z+1	; 0x01
    1d7e:	28 17       	cp	r18, r24
    1d80:	39 07       	cpc	r19, r25
    1d82:	c9 f3       	breq	.-14     	; 0x1d76 <_ZN14HardwareSerial5writeEh+0x28>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1d84:	fd 01       	movw	r30, r26
    1d86:	e0 5c       	subi	r30, 0xC0	; 192
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 81       	ld	r24, Z
    1d8c:	91 81       	ldd	r25, Z+1	; 0x01
    1d8e:	a8 0f       	add	r26, r24
    1d90:	b9 1f       	adc	r27, r25
    1d92:	6c 93       	st	X, r22
  _tx_buffer->head = i;
    1d94:	ee 85       	ldd	r30, Y+14	; 0x0e
    1d96:	ff 85       	ldd	r31, Y+15	; 0x0f
    1d98:	e0 5c       	subi	r30, 0xC0	; 192
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	51 83       	std	Z+1, r21	; 0x01
    1d9e:	40 83       	st	Z, r20
	
  sbi(*_ucsrb, _udrie);
    1da0:	ee 89       	ldd	r30, Y+22	; 0x16
    1da2:	ff 89       	ldd	r31, Y+23	; 0x17
    1da4:	40 81       	ld	r20, Z
    1da6:	21 e0       	ldi	r18, 0x01	; 1
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	c9 01       	movw	r24, r18
    1dac:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <_ZN14HardwareSerial5writeEh+0x66>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	0a 94       	dec	r0
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <_ZN14HardwareSerial5writeEh+0x62>
    1db8:	84 2b       	or	r24, r20
    1dba:	80 83       	st	Z, r24
  
  return 1;
}
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	08 95       	ret

00001dc8 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1dc8:	08 95       	ret

00001dca <__vector_25>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    1dca:	1f 92       	push	r1
    1dcc:	0f 92       	push	r0
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	0f 92       	push	r0
    1dd2:	0b b6       	in	r0, 0x3b	; 59
    1dd4:	0f 92       	push	r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	2f 93       	push	r18
    1dda:	3f 93       	push	r19
    1ddc:	4f 93       	push	r20
    1dde:	8f 93       	push	r24
    1de0:	9f 93       	push	r25
    1de2:	ef 93       	push	r30
    1de4:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1de6:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1dea:	80 91 c0 07 	lds	r24, 0x07C0
    1dee:	90 91 c1 07 	lds	r25, 0x07C1
    1df2:	01 96       	adiw	r24, 0x01	; 1
    1df4:	8f 73       	andi	r24, 0x3F	; 63
    1df6:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1df8:	20 91 c2 07 	lds	r18, 0x07C2
    1dfc:	30 91 c3 07 	lds	r19, 0x07C3
    1e00:	82 17       	cp	r24, r18
    1e02:	93 07       	cpc	r25, r19
    1e04:	59 f0       	breq	.+22     	; 0x1e1c <__vector_25+0x52>
    buffer->buffer[buffer->head] = c;
    1e06:	e0 91 c0 07 	lds	r30, 0x07C0
    1e0a:	f0 91 c1 07 	lds	r31, 0x07C1
    1e0e:	e0 58       	subi	r30, 0x80	; 128
    1e10:	f8 4f       	sbci	r31, 0xF8	; 248
    1e12:	40 83       	st	Z, r20
    buffer->head = i;
    1e14:	90 93 c1 07 	sts	0x07C1, r25
    1e18:	80 93 c0 07 	sts	0x07C0, r24
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1e1c:	ff 91       	pop	r31
    1e1e:	ef 91       	pop	r30
    1e20:	9f 91       	pop	r25
    1e22:	8f 91       	pop	r24
    1e24:	4f 91       	pop	r20
    1e26:	3f 91       	pop	r19
    1e28:	2f 91       	pop	r18
    1e2a:	0f 90       	pop	r0
    1e2c:	0b be       	out	0x3b, r0	; 59
    1e2e:	0f 90       	pop	r0
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	0f 90       	pop	r0
    1e34:	1f 90       	pop	r1
    1e36:	18 95       	reti

00001e38 <_Z12serialEvent1v>:
#endif
#endif

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
    1e38:	08 95       	ret

00001e3a <__vector_36>:
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
  {
    1e3a:	1f 92       	push	r1
    1e3c:	0f 92       	push	r0
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	0f 92       	push	r0
    1e42:	0b b6       	in	r0, 0x3b	; 59
    1e44:	0f 92       	push	r0
    1e46:	11 24       	eor	r1, r1
    1e48:	2f 93       	push	r18
    1e4a:	3f 93       	push	r19
    1e4c:	4f 93       	push	r20
    1e4e:	8f 93       	push	r24
    1e50:	9f 93       	push	r25
    1e52:	ef 93       	push	r30
    1e54:	ff 93       	push	r31
    unsigned char c = UDR1;
    1e56:	40 91 ce 00 	lds	r20, 0x00CE
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1e5a:	80 91 38 07 	lds	r24, 0x0738
    1e5e:	90 91 39 07 	lds	r25, 0x0739
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	8f 73       	andi	r24, 0x3F	; 63
    1e66:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1e68:	20 91 3a 07 	lds	r18, 0x073A
    1e6c:	30 91 3b 07 	lds	r19, 0x073B
    1e70:	82 17       	cp	r24, r18
    1e72:	93 07       	cpc	r25, r19
    1e74:	59 f0       	breq	.+22     	; 0x1e8c <__vector_36+0x52>
    buffer->buffer[buffer->head] = c;
    1e76:	e0 91 38 07 	lds	r30, 0x0738
    1e7a:	f0 91 39 07 	lds	r31, 0x0739
    1e7e:	e8 50       	subi	r30, 0x08	; 8
    1e80:	f9 4f       	sbci	r31, 0xF9	; 249
    1e82:	40 83       	st	Z, r20
    buffer->head = i;
    1e84:	90 93 39 07 	sts	0x0739, r25
    1e88:	80 93 38 07 	sts	0x0738, r24
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
  {
    unsigned char c = UDR1;
    store_char(c, &rx_buffer1);
  }
    1e8c:	ff 91       	pop	r31
    1e8e:	ef 91       	pop	r30
    1e90:	9f 91       	pop	r25
    1e92:	8f 91       	pop	r24
    1e94:	4f 91       	pop	r20
    1e96:	3f 91       	pop	r19
    1e98:	2f 91       	pop	r18
    1e9a:	0f 90       	pop	r0
    1e9c:	0b be       	out	0x3b, r0	; 59
    1e9e:	0f 90       	pop	r0
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	0f 90       	pop	r0
    1ea4:	1f 90       	pop	r1
    1ea6:	18 95       	reti

00001ea8 <_Z12serialEvent2v>:
  #error SIG_USART1_RECV
#endif

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
    1ea8:	08 95       	ret

00001eaa <__vector_51>:
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
  {
    1eaa:	1f 92       	push	r1
    1eac:	0f 92       	push	r0
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	0f 92       	push	r0
    1eb2:	0b b6       	in	r0, 0x3b	; 59
    1eb4:	0f 92       	push	r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	2f 93       	push	r18
    1eba:	3f 93       	push	r19
    1ebc:	4f 93       	push	r20
    1ebe:	8f 93       	push	r24
    1ec0:	9f 93       	push	r25
    1ec2:	ef 93       	push	r30
    1ec4:	ff 93       	push	r31
    unsigned char c = UDR2;
    1ec6:	40 91 d6 00 	lds	r20, 0x00D6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1eca:	80 91 b0 06 	lds	r24, 0x06B0
    1ece:	90 91 b1 06 	lds	r25, 0x06B1
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	8f 73       	andi	r24, 0x3F	; 63
    1ed6:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1ed8:	20 91 b2 06 	lds	r18, 0x06B2
    1edc:	30 91 b3 06 	lds	r19, 0x06B3
    1ee0:	82 17       	cp	r24, r18
    1ee2:	93 07       	cpc	r25, r19
    1ee4:	59 f0       	breq	.+22     	; 0x1efc <__vector_51+0x52>
    buffer->buffer[buffer->head] = c;
    1ee6:	e0 91 b0 06 	lds	r30, 0x06B0
    1eea:	f0 91 b1 06 	lds	r31, 0x06B1
    1eee:	e0 59       	subi	r30, 0x90	; 144
    1ef0:	f9 4f       	sbci	r31, 0xF9	; 249
    1ef2:	40 83       	st	Z, r20
    buffer->head = i;
    1ef4:	90 93 b1 06 	sts	0x06B1, r25
    1ef8:	80 93 b0 06 	sts	0x06B0, r24
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
  {
    unsigned char c = UDR2;
    store_char(c, &rx_buffer2);
  }
    1efc:	ff 91       	pop	r31
    1efe:	ef 91       	pop	r30
    1f00:	9f 91       	pop	r25
    1f02:	8f 91       	pop	r24
    1f04:	4f 91       	pop	r20
    1f06:	3f 91       	pop	r19
    1f08:	2f 91       	pop	r18
    1f0a:	0f 90       	pop	r0
    1f0c:	0b be       	out	0x3b, r0	; 59
    1f0e:	0f 90       	pop	r0
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	0f 90       	pop	r0
    1f14:	1f 90       	pop	r1
    1f16:	18 95       	reti

00001f18 <_Z12serialEvent3v>:
  #error SIG_USART2_RECV
#endif

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
    1f18:	08 95       	ret

00001f1a <__vector_54>:
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
  {
    1f1a:	1f 92       	push	r1
    1f1c:	0f 92       	push	r0
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	0f 92       	push	r0
    1f22:	0b b6       	in	r0, 0x3b	; 59
    1f24:	0f 92       	push	r0
    1f26:	11 24       	eor	r1, r1
    1f28:	2f 93       	push	r18
    1f2a:	3f 93       	push	r19
    1f2c:	4f 93       	push	r20
    1f2e:	8f 93       	push	r24
    1f30:	9f 93       	push	r25
    1f32:	ef 93       	push	r30
    1f34:	ff 93       	push	r31
    unsigned char c = UDR3;
    1f36:	40 91 36 01 	lds	r20, 0x0136
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1f3a:	80 91 28 06 	lds	r24, 0x0628
    1f3e:	90 91 29 06 	lds	r25, 0x0629
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	8f 73       	andi	r24, 0x3F	; 63
    1f46:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1f48:	20 91 2a 06 	lds	r18, 0x062A
    1f4c:	30 91 2b 06 	lds	r19, 0x062B
    1f50:	82 17       	cp	r24, r18
    1f52:	93 07       	cpc	r25, r19
    1f54:	59 f0       	breq	.+22     	; 0x1f6c <__vector_54+0x52>
    buffer->buffer[buffer->head] = c;
    1f56:	e0 91 28 06 	lds	r30, 0x0628
    1f5a:	f0 91 29 06 	lds	r31, 0x0629
    1f5e:	e8 51       	subi	r30, 0x18	; 24
    1f60:	fa 4f       	sbci	r31, 0xFA	; 250
    1f62:	40 83       	st	Z, r20
    buffer->head = i;
    1f64:	90 93 29 06 	sts	0x0629, r25
    1f68:	80 93 28 06 	sts	0x0628, r24
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
  {
    unsigned char c = UDR3;
    store_char(c, &rx_buffer3);
  }
    1f6c:	ff 91       	pop	r31
    1f6e:	ef 91       	pop	r30
    1f70:	9f 91       	pop	r25
    1f72:	8f 91       	pop	r24
    1f74:	4f 91       	pop	r20
    1f76:	3f 91       	pop	r19
    1f78:	2f 91       	pop	r18
    1f7a:	0f 90       	pop	r0
    1f7c:	0b be       	out	0x3b, r0	; 59
    1f7e:	0f 90       	pop	r0
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	0f 90       	pop	r0
    1f84:	1f 90       	pop	r1
    1f86:	18 95       	reti

00001f88 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1f88:	85 e8       	ldi	r24, 0x85	; 133
    1f8a:	95 e0       	ldi	r25, 0x05	; 5
    1f8c:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZN14HardwareSerial9availableEv>
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	11 f0       	breq	.+4      	; 0x1f98 <_Z14serialEventRunv+0x10>
    1f94:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_Z11serialEventv>
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
    1f98:	86 e6       	ldi	r24, 0x66	; 102
    1f9a:	95 e0       	ldi	r25, 0x05	; 5
    1f9c:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZN14HardwareSerial9availableEv>
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	11 f0       	breq	.+4      	; 0x1fa8 <_Z14serialEventRunv+0x20>
    1fa4:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_Z12serialEvent1v>
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
    1fa8:	87 e4       	ldi	r24, 0x47	; 71
    1faa:	95 e0       	ldi	r25, 0x05	; 5
    1fac:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZN14HardwareSerial9availableEv>
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	11 f0       	breq	.+4      	; 0x1fb8 <_Z14serialEventRunv+0x30>
    1fb4:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_Z12serialEvent2v>
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
    1fb8:	88 e2       	ldi	r24, 0x28	; 40
    1fba:	95 e0       	ldi	r25, 0x05	; 5
    1fbc:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <_ZN14HardwareSerial9availableEv>
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	11 f0       	breq	.+4      	; 0x1fc8 <_Z14serialEventRunv+0x40>
    1fc4:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <_Z12serialEvent3v>
    1fc8:	08 95       	ret

00001fca <__vector_26>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    1fca:	1f 92       	push	r1
    1fcc:	0f 92       	push	r0
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	0f 92       	push	r0
    1fd2:	0b b6       	in	r0, 0x3b	; 59
    1fd4:	0f 92       	push	r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	2f 93       	push	r18
    1fda:	3f 93       	push	r19
    1fdc:	8f 93       	push	r24
    1fde:	9f 93       	push	r25
    1fe0:	ef 93       	push	r30
    1fe2:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    1fe4:	20 91 7c 07 	lds	r18, 0x077C
    1fe8:	30 91 7d 07 	lds	r19, 0x077D
    1fec:	80 91 7e 07 	lds	r24, 0x077E
    1ff0:	90 91 7f 07 	lds	r25, 0x077F
    1ff4:	28 17       	cp	r18, r24
    1ff6:	39 07       	cpc	r19, r25
    1ff8:	31 f4       	brne	.+12     	; 0x2006 <__vector_26+0x3c>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1ffa:	e1 ec       	ldi	r30, 0xC1	; 193
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	8f 7d       	andi	r24, 0xDF	; 223
    2002:	80 83       	st	Z, r24
    2004:	14 c0       	rjmp	.+40     	; 0x202e <__vector_26+0x64>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    2006:	e0 91 7e 07 	lds	r30, 0x077E
    200a:	f0 91 7f 07 	lds	r31, 0x077F
    200e:	e4 5c       	subi	r30, 0xC4	; 196
    2010:	f8 4f       	sbci	r31, 0xF8	; 248
    2012:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    2014:	80 91 7e 07 	lds	r24, 0x077E
    2018:	90 91 7f 07 	lds	r25, 0x077F
    201c:	01 96       	adiw	r24, 0x01	; 1
    201e:	8f 73       	andi	r24, 0x3F	; 63
    2020:	90 70       	andi	r25, 0x00	; 0
    2022:	90 93 7f 07 	sts	0x077F, r25
    2026:	80 93 7e 07 	sts	0x077E, r24
	
  #if defined(UDR0)
    UDR0 = c;
    202a:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    202e:	ff 91       	pop	r31
    2030:	ef 91       	pop	r30
    2032:	9f 91       	pop	r25
    2034:	8f 91       	pop	r24
    2036:	3f 91       	pop	r19
    2038:	2f 91       	pop	r18
    203a:	0f 90       	pop	r0
    203c:	0b be       	out	0x3b, r0	; 59
    203e:	0f 90       	pop	r0
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	0f 90       	pop	r0
    2044:	1f 90       	pop	r1
    2046:	18 95       	reti

00002048 <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
{
    2048:	1f 92       	push	r1
    204a:	0f 92       	push	r0
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	0f 92       	push	r0
    2050:	0b b6       	in	r0, 0x3b	; 59
    2052:	0f 92       	push	r0
    2054:	11 24       	eor	r1, r1
    2056:	2f 93       	push	r18
    2058:	3f 93       	push	r19
    205a:	8f 93       	push	r24
    205c:	9f 93       	push	r25
    205e:	ef 93       	push	r30
    2060:	ff 93       	push	r31
  if (tx_buffer1.head == tx_buffer1.tail) {
    2062:	20 91 f4 06 	lds	r18, 0x06F4
    2066:	30 91 f5 06 	lds	r19, 0x06F5
    206a:	80 91 f6 06 	lds	r24, 0x06F6
    206e:	90 91 f7 06 	lds	r25, 0x06F7
    2072:	28 17       	cp	r18, r24
    2074:	39 07       	cpc	r19, r25
    2076:	31 f4       	brne	.+12     	; 0x2084 <__vector_37+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
    2078:	e9 ec       	ldi	r30, 0xC9	; 201
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	8f 7d       	andi	r24, 0xDF	; 223
    2080:	80 83       	st	Z, r24
    2082:	14 c0       	rjmp	.+40     	; 0x20ac <__vector_37+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
    2084:	e0 91 f6 06 	lds	r30, 0x06F6
    2088:	f0 91 f7 06 	lds	r31, 0x06F7
    208c:	ec 54       	subi	r30, 0x4C	; 76
    208e:	f9 4f       	sbci	r31, 0xF9	; 249
    2090:	20 81       	ld	r18, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
    2092:	80 91 f6 06 	lds	r24, 0x06F6
    2096:	90 91 f7 06 	lds	r25, 0x06F7
    209a:	01 96       	adiw	r24, 0x01	; 1
    209c:	8f 73       	andi	r24, 0x3F	; 63
    209e:	90 70       	andi	r25, 0x00	; 0
    20a0:	90 93 f7 06 	sts	0x06F7, r25
    20a4:	80 93 f6 06 	sts	0x06F6, r24
	
    UDR1 = c;
    20a8:	20 93 ce 00 	sts	0x00CE, r18
  }
}
    20ac:	ff 91       	pop	r31
    20ae:	ef 91       	pop	r30
    20b0:	9f 91       	pop	r25
    20b2:	8f 91       	pop	r24
    20b4:	3f 91       	pop	r19
    20b6:	2f 91       	pop	r18
    20b8:	0f 90       	pop	r0
    20ba:	0b be       	out	0x3b, r0	; 59
    20bc:	0f 90       	pop	r0
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	0f 90       	pop	r0
    20c2:	1f 90       	pop	r1
    20c4:	18 95       	reti

000020c6 <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
{
    20c6:	1f 92       	push	r1
    20c8:	0f 92       	push	r0
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	0f 92       	push	r0
    20ce:	0b b6       	in	r0, 0x3b	; 59
    20d0:	0f 92       	push	r0
    20d2:	11 24       	eor	r1, r1
    20d4:	2f 93       	push	r18
    20d6:	3f 93       	push	r19
    20d8:	8f 93       	push	r24
    20da:	9f 93       	push	r25
    20dc:	ef 93       	push	r30
    20de:	ff 93       	push	r31
  if (tx_buffer2.head == tx_buffer2.tail) {
    20e0:	20 91 6c 06 	lds	r18, 0x066C
    20e4:	30 91 6d 06 	lds	r19, 0x066D
    20e8:	80 91 6e 06 	lds	r24, 0x066E
    20ec:	90 91 6f 06 	lds	r25, 0x066F
    20f0:	28 17       	cp	r18, r24
    20f2:	39 07       	cpc	r19, r25
    20f4:	31 f4       	brne	.+12     	; 0x2102 <__vector_52+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
    20f6:	e1 ed       	ldi	r30, 0xD1	; 209
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	8f 7d       	andi	r24, 0xDF	; 223
    20fe:	80 83       	st	Z, r24
    2100:	14 c0       	rjmp	.+40     	; 0x212a <__vector_52+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
    2102:	e0 91 6e 06 	lds	r30, 0x066E
    2106:	f0 91 6f 06 	lds	r31, 0x066F
    210a:	e4 5d       	subi	r30, 0xD4	; 212
    210c:	f9 4f       	sbci	r31, 0xF9	; 249
    210e:	20 81       	ld	r18, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
    2110:	80 91 6e 06 	lds	r24, 0x066E
    2114:	90 91 6f 06 	lds	r25, 0x066F
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	8f 73       	andi	r24, 0x3F	; 63
    211c:	90 70       	andi	r25, 0x00	; 0
    211e:	90 93 6f 06 	sts	0x066F, r25
    2122:	80 93 6e 06 	sts	0x066E, r24
	
    UDR2 = c;
    2126:	20 93 d6 00 	sts	0x00D6, r18
  }
}
    212a:	ff 91       	pop	r31
    212c:	ef 91       	pop	r30
    212e:	9f 91       	pop	r25
    2130:	8f 91       	pop	r24
    2132:	3f 91       	pop	r19
    2134:	2f 91       	pop	r18
    2136:	0f 90       	pop	r0
    2138:	0b be       	out	0x3b, r0	; 59
    213a:	0f 90       	pop	r0
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	0f 90       	pop	r0
    2140:	1f 90       	pop	r1
    2142:	18 95       	reti

00002144 <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
{
    2144:	1f 92       	push	r1
    2146:	0f 92       	push	r0
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	0f 92       	push	r0
    214c:	0b b6       	in	r0, 0x3b	; 59
    214e:	0f 92       	push	r0
    2150:	11 24       	eor	r1, r1
    2152:	2f 93       	push	r18
    2154:	3f 93       	push	r19
    2156:	8f 93       	push	r24
    2158:	9f 93       	push	r25
    215a:	ef 93       	push	r30
    215c:	ff 93       	push	r31
  if (tx_buffer3.head == tx_buffer3.tail) {
    215e:	20 91 e4 05 	lds	r18, 0x05E4
    2162:	30 91 e5 05 	lds	r19, 0x05E5
    2166:	80 91 e6 05 	lds	r24, 0x05E6
    216a:	90 91 e7 05 	lds	r25, 0x05E7
    216e:	28 17       	cp	r18, r24
    2170:	39 07       	cpc	r19, r25
    2172:	31 f4       	brne	.+12     	; 0x2180 <__vector_55+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
    2174:	e1 e3       	ldi	r30, 0x31	; 49
    2176:	f1 e0       	ldi	r31, 0x01	; 1
    2178:	80 81       	ld	r24, Z
    217a:	8f 7d       	andi	r24, 0xDF	; 223
    217c:	80 83       	st	Z, r24
    217e:	14 c0       	rjmp	.+40     	; 0x21a8 <__vector_55+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
    2180:	e0 91 e6 05 	lds	r30, 0x05E6
    2184:	f0 91 e7 05 	lds	r31, 0x05E7
    2188:	ec 55       	subi	r30, 0x5C	; 92
    218a:	fa 4f       	sbci	r31, 0xFA	; 250
    218c:	20 81       	ld	r18, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
    218e:	80 91 e6 05 	lds	r24, 0x05E6
    2192:	90 91 e7 05 	lds	r25, 0x05E7
    2196:	01 96       	adiw	r24, 0x01	; 1
    2198:	8f 73       	andi	r24, 0x3F	; 63
    219a:	90 70       	andi	r25, 0x00	; 0
    219c:	90 93 e7 05 	sts	0x05E7, r25
    21a0:	80 93 e6 05 	sts	0x05E6, r24
	
    UDR3 = c;
    21a4:	20 93 36 01 	sts	0x0136, r18
  }
}
    21a8:	ff 91       	pop	r31
    21aa:	ef 91       	pop	r30
    21ac:	9f 91       	pop	r25
    21ae:	8f 91       	pop	r24
    21b0:	3f 91       	pop	r19
    21b2:	2f 91       	pop	r18
    21b4:	0f 90       	pop	r0
    21b6:	0b be       	out	0x3b, r0	; 59
    21b8:	0f 90       	pop	r0
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	0f 90       	pop	r0
    21be:	1f 90       	pop	r1
    21c0:	18 95       	reti

000021c2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
    21c2:	8f 92       	push	r8
    21c4:	af 92       	push	r10
    21c6:	bf 92       	push	r11
    21c8:	cf 92       	push	r12
    21ca:	df 92       	push	r13
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	0f 93       	push	r16
    21d2:	1f 93       	push	r17
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    21de:	13 82       	std	Z+3, r1	; 0x03
    21e0:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    21e2:	88 ee       	ldi	r24, 0xE8	; 232
    21e4:	93 e0       	ldi	r25, 0x03	; 3
    21e6:	a0 e0       	ldi	r26, 0x00	; 0
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	84 83       	std	Z+4, r24	; 0x04
    21ec:	95 83       	std	Z+5, r25	; 0x05
    21ee:	a6 83       	std	Z+6, r26	; 0x06
    21f0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    21f2:	83 e8       	ldi	r24, 0x83	; 131
    21f4:	92 e0       	ldi	r25, 0x02	; 2
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    21fa:	75 87       	std	Z+13, r23	; 0x0d
    21fc:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
    21fe:	57 87       	std	Z+15, r21	; 0x0f
    2200:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    2202:	31 8b       	std	Z+17, r19	; 0x11
    2204:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    2206:	13 8b       	std	Z+19, r17	; 0x13
    2208:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
    220a:	f5 8a       	std	Z+21, r15	; 0x15
    220c:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
    220e:	d7 8a       	std	Z+23, r13	; 0x17
    2210:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
    2212:	b1 8e       	std	Z+25, r11	; 0x19
    2214:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
    2216:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
    2218:	8f 85       	ldd	r24, Y+15	; 0x0f
    221a:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    221c:	88 89       	ldd	r24, Y+16	; 0x10
    221e:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    2220:	89 89       	ldd	r24, Y+17	; 0x11
    2222:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    2224:	8a 89       	ldd	r24, Y+18	; 0x12
    2226:	86 8f       	std	Z+30, r24	; 0x1e
}
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	ff 90       	pop	r15
    2232:	ef 90       	pop	r14
    2234:	df 90       	pop	r13
    2236:	cf 90       	pop	r12
    2238:	bf 90       	pop	r11
    223a:	af 90       	pop	r10
    223c:	8f 90       	pop	r8
    223e:	08 95       	ret

00002240 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    2240:	2f 92       	push	r2
    2242:	3f 92       	push	r3
    2244:	4f 92       	push	r4
    2246:	5f 92       	push	r5
    2248:	6f 92       	push	r6
    224a:	7f 92       	push	r7
    224c:	8f 92       	push	r8
    224e:	9f 92       	push	r9
    2250:	af 92       	push	r10
    2252:	bf 92       	push	r11
    2254:	cf 92       	push	r12
    2256:	df 92       	push	r13
    2258:	ef 92       	push	r14
    225a:	ff 92       	push	r15
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	8c 01       	movw	r16, r24
    2266:	6a 01       	movw	r12, r20
    2268:	7b 01       	movw	r14, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    226a:	c1 e0       	ldi	r28, 0x01	; 1
    226c:	40 30       	cpi	r20, 0x00	; 0
    226e:	21 ee       	ldi	r18, 0xE1	; 225
    2270:	52 07       	cpc	r21, r18
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	62 07       	cpc	r22, r18
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	72 07       	cpc	r23, r18
    227a:	21 f4       	brne	.+8      	; 0x2284 <_ZN14HardwareSerial5beginEm+0x44>
    227c:	c0 e0       	ldi	r28, 0x00	; 0
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <_ZN14HardwareSerial5beginEm+0x44>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    2280:	cd 2f       	mov	r28, r29
    2282:	18 c0       	rjmp	.+48     	; 0x22b4 <_ZN14HardwareSerial5beginEm+0x74>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    2284:	22 24       	eor	r2, r2
    2286:	33 24       	eor	r3, r3
    2288:	23 94       	inc	r2
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    228a:	0f 2e       	mov	r0, r31
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	8f 2e       	mov	r8, r31
    2290:	f9 e0       	ldi	r31, 0x09	; 9
    2292:	9f 2e       	mov	r9, r31
    2294:	fd e3       	ldi	r31, 0x3D	; 61
    2296:	af 2e       	mov	r10, r31
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	bf 2e       	mov	r11, r31
    229c:	f0 2d       	mov	r31, r0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    229e:	0f 2e       	mov	r0, r31
    22a0:	f0 e8       	ldi	r31, 0x80	; 128
    22a2:	4f 2e       	mov	r4, r31
    22a4:	f4 e8       	ldi	r31, 0x84	; 132
    22a6:	5f 2e       	mov	r5, r31
    22a8:	fe e1       	ldi	r31, 0x1E	; 30
    22aa:	6f 2e       	mov	r6, r31
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	7f 2e       	mov	r7, r31
    22b0:	f0 2d       	mov	r31, r0
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    22b2:	d0 e0       	ldi	r29, 0x00	; 0
  }
#endif

try_again:
  
  if (use_u2x) {
    22b4:	cc 23       	and	r28, r28
    22b6:	f1 f0       	breq	.+60     	; 0x22f4 <_ZN14HardwareSerial5beginEm+0xb4>
    *_ucsra = 1 << _u2x;
    22b8:	d8 01       	movw	r26, r16
    22ba:	54 96       	adiw	r26, 0x14	; 20
    22bc:	ed 91       	ld	r30, X+
    22be:	fc 91       	ld	r31, X
    22c0:	55 97       	sbiw	r26, 0x15	; 21
    22c2:	c1 01       	movw	r24, r2
    22c4:	5e 96       	adiw	r26, 0x1e	; 30
    22c6:	0c 90       	ld	r0, X
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <_ZN14HardwareSerial5beginEm+0x8e>
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	0a 94       	dec	r0
    22d0:	e2 f7       	brpl	.-8      	; 0x22ca <_ZN14HardwareSerial5beginEm+0x8a>
    22d2:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    22d4:	c5 01       	movw	r24, r10
    22d6:	b4 01       	movw	r22, r8
    22d8:	a7 01       	movw	r20, r14
    22da:	96 01       	movw	r18, r12
    22dc:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    22e0:	da 01       	movw	r26, r20
    22e2:	c9 01       	movw	r24, r18
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	a1 09       	sbc	r26, r1
    22e8:	b1 09       	sbc	r27, r1
    22ea:	b6 95       	lsr	r27
    22ec:	a7 95       	ror	r26
    22ee:	97 95       	ror	r25
    22f0:	87 95       	ror	r24
    22f2:	15 c0       	rjmp	.+42     	; 0x231e <_ZN14HardwareSerial5beginEm+0xde>
  } else {
    *_ucsra = 0;
    22f4:	d8 01       	movw	r26, r16
    22f6:	54 96       	adiw	r26, 0x14	; 20
    22f8:	ed 91       	ld	r30, X+
    22fa:	fc 91       	ld	r31, X
    22fc:	55 97       	sbiw	r26, 0x15	; 21
    22fe:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2300:	c3 01       	movw	r24, r6
    2302:	b2 01       	movw	r22, r4
    2304:	a7 01       	movw	r20, r14
    2306:	96 01       	movw	r18, r12
    2308:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    230c:	da 01       	movw	r26, r20
    230e:	c9 01       	movw	r24, r18
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	a1 09       	sbc	r26, r1
    2314:	b1 09       	sbc	r27, r1
    2316:	b6 95       	lsr	r27
    2318:	a7 95       	ror	r26
    231a:	97 95       	ror	r25
    231c:	87 95       	ror	r24
  }
  
  if ((baud_setting > 4095) && use_u2x)
    231e:	b0 e1       	ldi	r27, 0x10	; 16
    2320:	80 30       	cpi	r24, 0x00	; 0
    2322:	9b 07       	cpc	r25, r27
    2324:	18 f0       	brcs	.+6      	; 0x232c <_ZN14HardwareSerial5beginEm+0xec>
    2326:	cc 23       	and	r28, r28
    2328:	09 f0       	breq	.+2      	; 0x232c <_ZN14HardwareSerial5beginEm+0xec>
    232a:	aa cf       	rjmp	.-172    	; 0x2280 <_ZN14HardwareSerial5beginEm+0x40>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    232c:	d8 01       	movw	r26, r16
    232e:	50 96       	adiw	r26, 0x10	; 16
    2330:	ed 91       	ld	r30, X+
    2332:	fc 91       	ld	r31, X
    2334:	51 97       	sbiw	r26, 0x11	; 17
    2336:	90 83       	st	Z, r25
  *_ubrrl = baud_setting;
    2338:	52 96       	adiw	r26, 0x12	; 18
    233a:	ed 91       	ld	r30, X+
    233c:	fc 91       	ld	r31, X
    233e:	53 97       	sbiw	r26, 0x13	; 19
    2340:	80 83       	st	Z, r24

  sbi(*_ucsrb, _rxen);
    2342:	56 96       	adiw	r26, 0x16	; 22
    2344:	ed 91       	ld	r30, X+
    2346:	fc 91       	ld	r31, X
    2348:	57 97       	sbiw	r26, 0x17	; 23
    234a:	40 81       	ld	r20, Z
    234c:	21 e0       	ldi	r18, 0x01	; 1
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	c9 01       	movw	r24, r18
    2352:	5a 96       	adiw	r26, 0x1a	; 26
    2354:	0c 90       	ld	r0, X
    2356:	5a 97       	sbiw	r26, 0x1a	; 26
    2358:	02 c0       	rjmp	.+4      	; 0x235e <_ZN14HardwareSerial5beginEm+0x11e>
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	0a 94       	dec	r0
    2360:	e2 f7       	brpl	.-8      	; 0x235a <_ZN14HardwareSerial5beginEm+0x11a>
    2362:	84 2b       	or	r24, r20
    2364:	80 83       	st	Z, r24
  sbi(*_ucsrb, _txen);
    2366:	56 96       	adiw	r26, 0x16	; 22
    2368:	ed 91       	ld	r30, X+
    236a:	fc 91       	ld	r31, X
    236c:	57 97       	sbiw	r26, 0x17	; 23
    236e:	40 81       	ld	r20, Z
    2370:	c9 01       	movw	r24, r18
    2372:	5b 96       	adiw	r26, 0x1b	; 27
    2374:	0c 90       	ld	r0, X
    2376:	5b 97       	sbiw	r26, 0x1b	; 27
    2378:	02 c0       	rjmp	.+4      	; 0x237e <_ZN14HardwareSerial5beginEm+0x13e>
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	0a 94       	dec	r0
    2380:	e2 f7       	brpl	.-8      	; 0x237a <_ZN14HardwareSerial5beginEm+0x13a>
    2382:	84 2b       	or	r24, r20
    2384:	80 83       	st	Z, r24
  sbi(*_ucsrb, _rxcie);
    2386:	56 96       	adiw	r26, 0x16	; 22
    2388:	ed 91       	ld	r30, X+
    238a:	fc 91       	ld	r31, X
    238c:	57 97       	sbiw	r26, 0x17	; 23
    238e:	40 81       	ld	r20, Z
    2390:	c9 01       	movw	r24, r18
    2392:	5c 96       	adiw	r26, 0x1c	; 28
    2394:	0c 90       	ld	r0, X
    2396:	5c 97       	sbiw	r26, 0x1c	; 28
    2398:	02 c0       	rjmp	.+4      	; 0x239e <_ZN14HardwareSerial5beginEm+0x15e>
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	0a 94       	dec	r0
    23a0:	e2 f7       	brpl	.-8      	; 0x239a <_ZN14HardwareSerial5beginEm+0x15a>
    23a2:	84 2b       	or	r24, r20
    23a4:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    23a6:	56 96       	adiw	r26, 0x16	; 22
    23a8:	ed 91       	ld	r30, X+
    23aa:	fc 91       	ld	r31, X
    23ac:	57 97       	sbiw	r26, 0x17	; 23
    23ae:	80 81       	ld	r24, Z
    23b0:	5d 96       	adiw	r26, 0x1d	; 29
    23b2:	0c 90       	ld	r0, X
    23b4:	5d 97       	sbiw	r26, 0x1d	; 29
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <_ZN14HardwareSerial5beginEm+0x17c>
    23b8:	22 0f       	add	r18, r18
    23ba:	33 1f       	adc	r19, r19
    23bc:	0a 94       	dec	r0
    23be:	e2 f7       	brpl	.-8      	; 0x23b8 <_ZN14HardwareSerial5beginEm+0x178>
    23c0:	20 95       	com	r18
    23c2:	28 23       	and	r18, r24
    23c4:	20 83       	st	Z, r18
}
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	ff 90       	pop	r15
    23d0:	ef 90       	pop	r14
    23d2:	df 90       	pop	r13
    23d4:	cf 90       	pop	r12
    23d6:	bf 90       	pop	r11
    23d8:	af 90       	pop	r10
    23da:	9f 90       	pop	r9
    23dc:	8f 90       	pop	r8
    23de:	7f 90       	pop	r7
    23e0:	6f 90       	pop	r6
    23e2:	5f 90       	pop	r5
    23e4:	4f 90       	pop	r4
    23e6:	3f 90       	pop	r3
    23e8:	2f 90       	pop	r2
    23ea:	08 95       	ret

000023ec <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    23ec:	cf 93       	push	r28
    23ee:	df 93       	push	r29
    23f0:	ec 01       	movw	r28, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    23f2:	ee 85       	ldd	r30, Y+14	; 0x0e
    23f4:	ff 85       	ldd	r31, Y+15	; 0x0f
    23f6:	df 01       	movw	r26, r30
    23f8:	a0 5c       	subi	r26, 0xC0	; 192
    23fa:	bf 4f       	sbci	r27, 0xFF	; 255
    23fc:	ee 5b       	subi	r30, 0xBE	; 190
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	8d 91       	ld	r24, X+
    2402:	9c 91       	ld	r25, X
    2404:	11 97       	sbiw	r26, 0x01	; 1
    2406:	20 81       	ld	r18, Z
    2408:	31 81       	ldd	r19, Z+1	; 0x01
    240a:	82 17       	cp	r24, r18
    240c:	93 07       	cpc	r25, r19
    240e:	c1 f7       	brne	.-16     	; 0x2400 <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
    2410:	ee 89       	ldd	r30, Y+22	; 0x16
    2412:	ff 89       	ldd	r31, Y+23	; 0x17
    2414:	40 81       	ld	r20, Z
    2416:	21 e0       	ldi	r18, 0x01	; 1
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	c9 01       	movw	r24, r18
    241c:	0a 8c       	ldd	r0, Y+26	; 0x1a
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <_ZN14HardwareSerial3endEv+0x38>
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	0a 94       	dec	r0
    2426:	e2 f7       	brpl	.-8      	; 0x2420 <_ZN14HardwareSerial3endEv+0x34>
    2428:	80 95       	com	r24
    242a:	84 23       	and	r24, r20
    242c:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    242e:	ee 89       	ldd	r30, Y+22	; 0x16
    2430:	ff 89       	ldd	r31, Y+23	; 0x17
    2432:	40 81       	ld	r20, Z
    2434:	c9 01       	movw	r24, r18
    2436:	0b 8c       	ldd	r0, Y+27	; 0x1b
    2438:	02 c0       	rjmp	.+4      	; 0x243e <_ZN14HardwareSerial3endEv+0x52>
    243a:	88 0f       	add	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	0a 94       	dec	r0
    2440:	e2 f7       	brpl	.-8      	; 0x243a <_ZN14HardwareSerial3endEv+0x4e>
    2442:	80 95       	com	r24
    2444:	84 23       	and	r24, r20
    2446:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    2448:	ee 89       	ldd	r30, Y+22	; 0x16
    244a:	ff 89       	ldd	r31, Y+23	; 0x17
    244c:	40 81       	ld	r20, Z
    244e:	c9 01       	movw	r24, r18
    2450:	0c 8c       	ldd	r0, Y+28	; 0x1c
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <_ZN14HardwareSerial3endEv+0x6c>
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	0a 94       	dec	r0
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <_ZN14HardwareSerial3endEv+0x68>
    245c:	80 95       	com	r24
    245e:	84 23       	and	r24, r20
    2460:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    2462:	ee 89       	ldd	r30, Y+22	; 0x16
    2464:	ff 89       	ldd	r31, Y+23	; 0x17
    2466:	80 81       	ld	r24, Z
    2468:	0d 8c       	ldd	r0, Y+29	; 0x1d
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <_ZN14HardwareSerial3endEv+0x84>
    246c:	22 0f       	add	r18, r18
    246e:	33 1f       	adc	r19, r19
    2470:	0a 94       	dec	r0
    2472:	e2 f7       	brpl	.-8      	; 0x246c <_ZN14HardwareSerial3endEv+0x80>
    2474:	20 95       	com	r18
    2476:	28 23       	and	r18, r24
    2478:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    247a:	8c 85       	ldd	r24, Y+12	; 0x0c
    247c:	9d 85       	ldd	r25, Y+13	; 0x0d
    247e:	fc 01       	movw	r30, r24
    2480:	ee 5b       	subi	r30, 0xBE	; 190
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	20 81       	ld	r18, Z
    2486:	31 81       	ldd	r19, Z+1	; 0x01
    2488:	80 5c       	subi	r24, 0xC0	; 192
    248a:	9f 4f       	sbci	r25, 0xFF	; 255
    248c:	fc 01       	movw	r30, r24
    248e:	31 83       	std	Z+1, r19	; 0x01
    2490:	20 83       	st	Z, r18
}
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	08 95       	ret

00002498 <_ZN14HardwareSerialcvbEv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	08 95       	ret

0000249c <_GLOBAL__sub_I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    249c:	7f 92       	push	r7
    249e:	8f 92       	push	r8
    24a0:	9f 92       	push	r9
    24a2:	af 92       	push	r10
    24a4:	bf 92       	push	r11
    24a6:	cf 92       	push	r12
    24a8:	df 92       	push	r13
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <_GLOBAL__sub_I_rx_buffer+0x1c>
    24b8:	0f 92       	push	r0
    24ba:	ed b7       	in	r30, 0x3d	; 61
    24bc:	fe b7       	in	r31, 0x3e	; 62
    24be:	31 96       	adiw	r30, 0x01	; 1
    24c0:	c3 e0       	ldi	r28, 0x03	; 3
    24c2:	ad b7       	in	r26, 0x3d	; 61
    24c4:	be b7       	in	r27, 0x3e	; 62
    24c6:	11 96       	adiw	r26, 0x01	; 1
    24c8:	cc 93       	st	X, r28
    24ca:	d7 e0       	ldi	r29, 0x07	; 7
    24cc:	d1 83       	std	Z+1, r29	; 0x01
    24ce:	0f 2e       	mov	r0, r31
    24d0:	f5 e0       	ldi	r31, 0x05	; 5
    24d2:	9f 2e       	mov	r9, r31
    24d4:	f0 2d       	mov	r31, r0
    24d6:	92 82       	std	Z+2, r9	; 0x02
    24d8:	77 24       	eor	r7, r7
    24da:	73 94       	inc	r7
    24dc:	73 82       	std	Z+3, r7	; 0x03
    24de:	85 e8       	ldi	r24, 0x85	; 133
    24e0:	95 e0       	ldi	r25, 0x05	; 5
    24e2:	60 e8       	ldi	r22, 0x80	; 128
    24e4:	77 e0       	ldi	r23, 0x07	; 7
    24e6:	4c e3       	ldi	r20, 0x3C	; 60
    24e8:	57 e0       	ldi	r21, 0x07	; 7
    24ea:	25 ec       	ldi	r18, 0xC5	; 197
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	04 ec       	ldi	r16, 0xC4	; 196
    24f0:	10 e0       	ldi	r17, 0x00	; 0
    24f2:	0f 2e       	mov	r0, r31
    24f4:	f0 ec       	ldi	r31, 0xC0	; 192
    24f6:	ef 2e       	mov	r14, r31
    24f8:	ff 24       	eor	r15, r15
    24fa:	f0 2d       	mov	r31, r0
    24fc:	0f 2e       	mov	r0, r31
    24fe:	f1 ec       	ldi	r31, 0xC1	; 193
    2500:	cf 2e       	mov	r12, r31
    2502:	dd 24       	eor	r13, r13
    2504:	f0 2d       	mov	r31, r0
    2506:	0f 2e       	mov	r0, r31
    2508:	f6 ec       	ldi	r31, 0xC6	; 198
    250a:	af 2e       	mov	r10, r31
    250c:	bb 24       	eor	r11, r11
    250e:	f0 2d       	mov	r31, r0
    2510:	88 24       	eor	r8, r8
    2512:	68 94       	set
    2514:	82 f8       	bld	r8, 2
    2516:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>
#else
  #error no serial port defined  (port 0)
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &tx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UDR1, RXEN1, TXEN1, RXCIE1, UDRIE1, U2X1);
    251a:	ed b7       	in	r30, 0x3d	; 61
    251c:	fe b7       	in	r31, 0x3e	; 62
    251e:	31 96       	adiw	r30, 0x01	; 1
    2520:	ad b7       	in	r26, 0x3d	; 61
    2522:	be b7       	in	r27, 0x3e	; 62
    2524:	11 96       	adiw	r26, 0x01	; 1
    2526:	cc 93       	st	X, r28
    2528:	d1 83       	std	Z+1, r29	; 0x01
    252a:	92 82       	std	Z+2, r9	; 0x02
    252c:	73 82       	std	Z+3, r7	; 0x03
    252e:	86 e6       	ldi	r24, 0x66	; 102
    2530:	95 e0       	ldi	r25, 0x05	; 5
    2532:	68 ef       	ldi	r22, 0xF8	; 248
    2534:	76 e0       	ldi	r23, 0x06	; 6
    2536:	44 eb       	ldi	r20, 0xB4	; 180
    2538:	56 e0       	ldi	r21, 0x06	; 6
    253a:	2d ec       	ldi	r18, 0xCD	; 205
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	0c ec       	ldi	r16, 0xCC	; 204
    2540:	10 e0       	ldi	r17, 0x00	; 0
    2542:	0f 2e       	mov	r0, r31
    2544:	f8 ec       	ldi	r31, 0xC8	; 200
    2546:	ef 2e       	mov	r14, r31
    2548:	ff 24       	eor	r15, r15
    254a:	f0 2d       	mov	r31, r0
    254c:	0f 2e       	mov	r0, r31
    254e:	f9 ec       	ldi	r31, 0xC9	; 201
    2550:	cf 2e       	mov	r12, r31
    2552:	dd 24       	eor	r13, r13
    2554:	f0 2d       	mov	r31, r0
    2556:	0f 2e       	mov	r0, r31
    2558:	fe ec       	ldi	r31, 0xCE	; 206
    255a:	af 2e       	mov	r10, r31
    255c:	bb 24       	eor	r11, r11
    255e:	f0 2d       	mov	r31, r0
    2560:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
    2564:	ed b7       	in	r30, 0x3d	; 61
    2566:	fe b7       	in	r31, 0x3e	; 62
    2568:	31 96       	adiw	r30, 0x01	; 1
    256a:	ad b7       	in	r26, 0x3d	; 61
    256c:	be b7       	in	r27, 0x3e	; 62
    256e:	11 96       	adiw	r26, 0x01	; 1
    2570:	cc 93       	st	X, r28
    2572:	d1 83       	std	Z+1, r29	; 0x01
    2574:	92 82       	std	Z+2, r9	; 0x02
    2576:	73 82       	std	Z+3, r7	; 0x03
    2578:	87 e4       	ldi	r24, 0x47	; 71
    257a:	95 e0       	ldi	r25, 0x05	; 5
    257c:	60 e7       	ldi	r22, 0x70	; 112
    257e:	76 e0       	ldi	r23, 0x06	; 6
    2580:	4c e2       	ldi	r20, 0x2C	; 44
    2582:	56 e0       	ldi	r21, 0x06	; 6
    2584:	25 ed       	ldi	r18, 0xD5	; 213
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	04 ed       	ldi	r16, 0xD4	; 212
    258a:	10 e0       	ldi	r17, 0x00	; 0
    258c:	0f 2e       	mov	r0, r31
    258e:	f0 ed       	ldi	r31, 0xD0	; 208
    2590:	ef 2e       	mov	r14, r31
    2592:	ff 24       	eor	r15, r15
    2594:	f0 2d       	mov	r31, r0
    2596:	0f 2e       	mov	r0, r31
    2598:	f1 ed       	ldi	r31, 0xD1	; 209
    259a:	cf 2e       	mov	r12, r31
    259c:	dd 24       	eor	r13, r13
    259e:	f0 2d       	mov	r31, r0
    25a0:	0f 2e       	mov	r0, r31
    25a2:	f6 ed       	ldi	r31, 0xD6	; 214
    25a4:	af 2e       	mov	r10, r31
    25a6:	bb 24       	eor	r11, r11
    25a8:	f0 2d       	mov	r31, r0
    25aa:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    25ae:	ed b7       	in	r30, 0x3d	; 61
    25b0:	fe b7       	in	r31, 0x3e	; 62
    25b2:	31 96       	adiw	r30, 0x01	; 1
    25b4:	ad b7       	in	r26, 0x3d	; 61
    25b6:	be b7       	in	r27, 0x3e	; 62
    25b8:	11 96       	adiw	r26, 0x01	; 1
    25ba:	cc 93       	st	X, r28
    25bc:	d1 83       	std	Z+1, r29	; 0x01
    25be:	92 82       	std	Z+2, r9	; 0x02
    25c0:	73 82       	std	Z+3, r7	; 0x03
    25c2:	88 e2       	ldi	r24, 0x28	; 40
    25c4:	95 e0       	ldi	r25, 0x05	; 5
    25c6:	68 ee       	ldi	r22, 0xE8	; 232
    25c8:	75 e0       	ldi	r23, 0x05	; 5
    25ca:	44 ea       	ldi	r20, 0xA4	; 164
    25cc:	55 e0       	ldi	r21, 0x05	; 5
    25ce:	25 e3       	ldi	r18, 0x35	; 53
    25d0:	31 e0       	ldi	r19, 0x01	; 1
    25d2:	04 e3       	ldi	r16, 0x34	; 52
    25d4:	11 e0       	ldi	r17, 0x01	; 1
    25d6:	0f 2e       	mov	r0, r31
    25d8:	f0 e3       	ldi	r31, 0x30	; 48
    25da:	ef 2e       	mov	r14, r31
    25dc:	f1 e0       	ldi	r31, 0x01	; 1
    25de:	ff 2e       	mov	r15, r31
    25e0:	f0 2d       	mov	r31, r0
    25e2:	0f 2e       	mov	r0, r31
    25e4:	f1 e3       	ldi	r31, 0x31	; 49
    25e6:	cf 2e       	mov	r12, r31
    25e8:	f1 e0       	ldi	r31, 0x01	; 1
    25ea:	df 2e       	mov	r13, r31
    25ec:	f0 2d       	mov	r31, r0
    25ee:	0f 2e       	mov	r0, r31
    25f0:	f6 e3       	ldi	r31, 0x36	; 54
    25f2:	af 2e       	mov	r10, r31
    25f4:	f1 e0       	ldi	r31, 0x01	; 1
    25f6:	bf 2e       	mov	r11, r31
    25f8:	f0 2d       	mov	r31, r0
    25fa:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	1f 91       	pop	r17
    260c:	0f 91       	pop	r16
    260e:	ff 90       	pop	r15
    2610:	ef 90       	pop	r14
    2612:	df 90       	pop	r13
    2614:	cf 90       	pop	r12
    2616:	bf 90       	pop	r11
    2618:	af 90       	pop	r10
    261a:	9f 90       	pop	r9
    261c:	8f 90       	pop	r8
    261e:	7f 90       	pop	r7
    2620:	08 95       	ret

00002622 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    2622:	8f 92       	push	r8
    2624:	9f 92       	push	r9
    2626:	af 92       	push	r10
    2628:	bf 92       	push	r11
    262a:	cf 92       	push	r12
    262c:	df 92       	push	r13
    262e:	ef 92       	push	r14
    2630:	ff 92       	push	r15
    2632:	0f 93       	push	r16
    2634:	1f 93       	push	r17
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	4c 01       	movw	r8, r24
    263c:	7b 01       	movw	r14, r22
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    263e:	aa 24       	eor	r10, r10
    2640:	bb 24       	eor	r11, r11
    2642:	68 94       	set
    2644:	a1 f8       	bld	r10, 1
    2646:	a8 0e       	add	r10, r24
    2648:	b9 1e       	adc	r11, r25
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    264a:	00 e0       	ldi	r16, 0x00	; 0
    264c:	10 e0       	ldi	r17, 0x00	; 0
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    264e:	cc 24       	eor	r12, r12
    2650:	dd 24       	eor	r13, r13
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    2652:	f5 01       	movw	r30, r10
    2654:	61 91       	ld	r22, Z+
    2656:	5f 01       	movw	r10, r30
    2658:	c7 01       	movw	r24, r14
    265a:	4a e0       	ldi	r20, 0x0A	; 10
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <_ZN5Print5printEhi>
    2662:	ec 01       	movw	r28, r24
        n += p.print('.');
    2664:	c7 01       	movw	r24, r14
    2666:	6e e2       	ldi	r22, 0x2E	; 46
    2668:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    266c:	8c 0f       	add	r24, r28
    266e:	9d 1f       	adc	r25, r29
        n += p.print('.');
    2670:	c8 0e       	add	r12, r24
    2672:	d9 1e       	adc	r13, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    2674:	0f 5f       	subi	r16, 0xFF	; 255
    2676:	1f 4f       	sbci	r17, 0xFF	; 255
    2678:	03 30       	cpi	r16, 0x03	; 3
    267a:	11 05       	cpc	r17, r1
    267c:	51 f7       	brne	.-44     	; 0x2652 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    267e:	c7 01       	movw	r24, r14
    2680:	f4 01       	movw	r30, r8
    2682:	65 81       	ldd	r22, Z+5	; 0x05
    2684:	4a e0       	ldi	r20, 0x0A	; 10
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <_ZN5Print5printEhi>
    268c:	8c 0d       	add	r24, r12
    268e:	9d 1d       	adc	r25, r13
    return n;
}
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	ff 90       	pop	r15
    269a:	ef 90       	pop	r14
    269c:	df 90       	pop	r13
    269e:	cf 90       	pop	r12
    26a0:	bf 90       	pop	r11
    26a2:	af 90       	pop	r10
    26a4:	9f 90       	pop	r9
    26a6:	8f 90       	pop	r8
    26a8:	08 95       	ret

000026aa <_ZN9IPAddressC1Ev>:

#include "Arduino.h"
#include "IPAddress.h"

IPAddress::IPAddress()
    26aa:	fc 01       	movw	r30, r24
    26ac:	83 ea       	ldi	r24, 0xA3	; 163
    26ae:	92 e0       	ldi	r25, 0x02	; 2
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
    26b4:	12 82       	std	Z+2, r1	; 0x02
    26b6:	13 82       	std	Z+3, r1	; 0x03
    26b8:	14 82       	std	Z+4, r1	; 0x04
    26ba:	15 82       	std	Z+5, r1	; 0x05
}
    26bc:	08 95       	ret

000026be <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    26be:	0f 93       	push	r16
    26c0:	fc 01       	movw	r30, r24
    26c2:	83 ea       	ldi	r24, 0xA3	; 163
    26c4:	92 e0       	ldi	r25, 0x02	; 2
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    26ca:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
    26cc:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
    26ce:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
    26d0:	05 83       	std	Z+5, r16	; 0x05
}
    26d2:	0f 91       	pop	r16
    26d4:	08 95       	ret

000026d6 <_ZN9IPAddressC1Em>:

IPAddress::IPAddress(uint32_t address)
    26d6:	fc 01       	movw	r30, r24
    26d8:	83 ea       	ldi	r24, 0xA3	; 163
    26da:	92 e0       	ldi	r25, 0x02	; 2
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    26e0:	42 83       	std	Z+2, r20	; 0x02
    26e2:	53 83       	std	Z+3, r21	; 0x03
    26e4:	64 83       	std	Z+4, r22	; 0x04
    26e6:	75 83       	std	Z+5, r23	; 0x05
}
    26e8:	08 95       	ret

000026ea <_ZN9IPAddressC1EPKh>:

IPAddress::IPAddress(const uint8_t *address)
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	fc 01       	movw	r30, r24
    26f0:	83 ea       	ldi	r24, 0xA3	; 163
    26f2:	92 e0       	ldi	r25, 0x02	; 2
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24
{
    memcpy(_address, address, sizeof(_address));
    26f8:	eb 01       	movw	r28, r22
    26fa:	88 81       	ld	r24, Y
    26fc:	99 81       	ldd	r25, Y+1	; 0x01
    26fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2700:	bb 81       	ldd	r27, Y+3	; 0x03
    2702:	82 83       	std	Z+2, r24	; 0x02
    2704:	93 83       	std	Z+3, r25	; 0x03
    2706:	a4 83       	std	Z+4, r26	; 0x04
    2708:	b5 83       	std	Z+5, r27	; 0x05
}
    270a:	df 91       	pop	r29
    270c:	cf 91       	pop	r28
    270e:	08 95       	ret

00002710 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address, address, sizeof(_address));
    2710:	fb 01       	movw	r30, r22
    2712:	40 81       	ld	r20, Z
    2714:	51 81       	ldd	r21, Z+1	; 0x01
    2716:	62 81       	ldd	r22, Z+2	; 0x02
    2718:	73 81       	ldd	r23, Z+3	; 0x03
    271a:	fc 01       	movw	r30, r24
    271c:	42 83       	std	Z+2, r20	; 0x02
    271e:	53 83       	std	Z+3, r21	; 0x03
    2720:	64 83       	std	Z+4, r22	; 0x04
    2722:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
    2724:	08 95       	ret

00002726 <_ZN9IPAddressaSEm>:

IPAddress& IPAddress::operator=(uint32_t address)
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
    2726:	fc 01       	movw	r30, r24
    2728:	42 83       	std	Z+2, r20	; 0x02
    272a:	53 83       	std	Z+3, r21	; 0x03
    272c:	64 83       	std	Z+4, r22	; 0x04
    272e:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
    2730:	08 95       	ret

00002732 <_ZN9IPAddresseqEPKh>:

bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
    2732:	9c 01       	movw	r18, r24
    2734:	2e 5f       	subi	r18, 0xFE	; 254
    2736:	3f 4f       	sbci	r19, 0xFF	; 255
    2738:	cb 01       	movw	r24, r22
    273a:	b9 01       	movw	r22, r18
    273c:	44 e0       	ldi	r20, 0x04	; 4
    273e:	50 e0       	ldi	r21, 0x00	; 0
    2740:	0e 94 18 3a 	call	0x7430	; 0x7430 <memcmp>
    2744:	28 2f       	mov	r18, r24
    2746:	39 2f       	mov	r19, r25
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	21 15       	cp	r18, r1
    274c:	31 05       	cpc	r19, r1
    274e:	09 f0       	breq	.+2      	; 0x2752 <_ZN9IPAddresseqEPKh+0x20>
    2750:	80 e0       	ldi	r24, 0x00	; 0
}
    2752:	08 95       	ret

00002754 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    2754:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    2756:	84 ec       	ldi	r24, 0xC4	; 196
    2758:	97 e0       	ldi	r25, 0x07	; 7
    275a:	60 e0       	ldi	r22, 0x00	; 0
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	00 e0       	ldi	r16, 0x00	; 0
    2762:	0e 94 5f 13 	call	0x26be	; 0x26be <_ZN9IPAddressC1Ehhhh>
    2766:	0f 91       	pop	r16
    2768:	08 95       	ret

0000276a <_Znwj>:
#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    276a:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <malloc>
}
    276e:	08 95       	ret

00002770 <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    2770:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <free>
} 
    2774:	08 95       	ret

00002776 <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    2776:	21 e0       	ldi	r18, 0x01	; 1
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	fc 01       	movw	r30, r24
    277c:	80 81       	ld	r24, Z
    277e:	88 23       	and	r24, r24
    2780:	11 f0       	breq	.+4      	; 0x2786 <__cxa_guard_acquire+0x10>
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	82 2f       	mov	r24, r18
    2788:	93 2f       	mov	r25, r19
    278a:	08 95       	ret

0000278c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    278c:	21 e0       	ldi	r18, 0x01	; 1
    278e:	fc 01       	movw	r30, r24
    2790:	20 83       	st	Z, r18
    2792:	08 95       	ret

00002794 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    2794:	08 95       	ret

00002796 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    2796:	08 95       	ret

00002798 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2798:	cf 92       	push	r12
    279a:	df 92       	push	r13
    279c:	ef 92       	push	r14
    279e:	ff 92       	push	r15
    27a0:	0f 93       	push	r16
    27a2:	1f 93       	push	r17
    27a4:	cf 93       	push	r28
    27a6:	df 93       	push	r29
    27a8:	6c 01       	movw	r12, r24
    27aa:	7b 01       	movw	r14, r22
    27ac:	ea 01       	movw	r28, r20
  size_t n = 0;
  while (size--) {
    27ae:	20 97       	sbiw	r28, 0x00	; 0
    27b0:	91 f0       	breq	.+36     	; 0x27d6 <_ZN5Print5writeEPKhj+0x3e>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    27b2:	00 e0       	ldi	r16, 0x00	; 0
    27b4:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    n += write(*buffer++);
    27b6:	d7 01       	movw	r26, r14
    27b8:	6d 91       	ld	r22, X+
    27ba:	7d 01       	movw	r14, r26
    27bc:	d6 01       	movw	r26, r12
    27be:	ed 91       	ld	r30, X+
    27c0:	fc 91       	ld	r31, X
    27c2:	01 90       	ld	r0, Z+
    27c4:	f0 81       	ld	r31, Z
    27c6:	e0 2d       	mov	r30, r0
    27c8:	c6 01       	movw	r24, r12
    27ca:	19 95       	eicall
    27cc:	08 0f       	add	r16, r24
    27ce:	19 1f       	adc	r17, r25
    27d0:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    27d2:	89 f7       	brne	.-30     	; 0x27b6 <_ZN5Print5writeEPKhj+0x1e>
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <_ZN5Print5writeEPKhj+0x42>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    27d6:	00 e0       	ldi	r16, 0x00	; 0
    27d8:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    27da:	80 2f       	mov	r24, r16
    27dc:	91 2f       	mov	r25, r17
    27de:	df 91       	pop	r29
    27e0:	cf 91       	pop	r28
    27e2:	1f 91       	pop	r17
    27e4:	0f 91       	pop	r16
    27e6:	ff 90       	pop	r15
    27e8:	ef 90       	pop	r14
    27ea:	df 90       	pop	r13
    27ec:	cf 90       	pop	r12
    27ee:	08 95       	ret

000027f0 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    27f0:	ef 92       	push	r14
    27f2:	ff 92       	push	r15
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	7c 01       	movw	r14, r24
    27fe:	eb 01       	movw	r28, r22
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    2800:	fb 01       	movw	r30, r22
    2802:	64 91       	lpm	r22, Z
    if (c == 0) break;
    2804:	66 23       	and	r22, r22
    2806:	91 f0       	breq	.+36     	; 0x282c <_ZN5Print5printEPK19__FlashStringHelper+0x3c>
size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    2808:	21 96       	adiw	r28, 0x01	; 1
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
    280a:	00 e0       	ldi	r16, 0x00	; 0
    280c:	10 e0       	ldi	r17, 0x00	; 0
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
    280e:	f7 01       	movw	r30, r14
    2810:	a0 81       	ld	r26, Z
    2812:	b1 81       	ldd	r27, Z+1	; 0x01
    2814:	ed 91       	ld	r30, X+
    2816:	fc 91       	ld	r31, X
    2818:	c7 01       	movw	r24, r14
    281a:	19 95       	eicall
    281c:	08 0f       	add	r16, r24
    281e:	19 1f       	adc	r17, r25
size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    2820:	fe 01       	movw	r30, r28
    2822:	21 96       	adiw	r28, 0x01	; 1
    2824:	64 91       	lpm	r22, Z
    if (c == 0) break;
    2826:	66 23       	and	r22, r22
    2828:	91 f7       	brne	.-28     	; 0x280e <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <_ZN5Print5printEPK19__FlashStringHelper+0x40>
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
    282c:	00 e0       	ldi	r16, 0x00	; 0
    282e:	10 e0       	ldi	r17, 0x00	; 0
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    2830:	80 2f       	mov	r24, r16
    2832:	91 2f       	mov	r25, r17
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	1f 91       	pop	r17
    283a:	0f 91       	pop	r16
    283c:	ff 90       	pop	r15
    283e:	ef 90       	pop	r14
    2840:	08 95       	ret

00002842 <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    2842:	af 92       	push	r10
    2844:	bf 92       	push	r11
    2846:	cf 92       	push	r12
    2848:	df 92       	push	r13
    284a:	ef 92       	push	r14
    284c:	ff 92       	push	r15
    284e:	0f 93       	push	r16
    2850:	1f 93       	push	r17
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	5c 01       	movw	r10, r24
    2858:	6b 01       	movw	r12, r22
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    285a:	db 01       	movw	r26, r22
    285c:	14 96       	adiw	r26, 0x04	; 4
    285e:	8d 91       	ld	r24, X+
    2860:	9c 91       	ld	r25, X
    2862:	15 97       	sbiw	r26, 0x05	; 5
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	e1 f0       	breq	.+56     	; 0x28a0 <_ZN5Print5printERK6String+0x5e>
    2868:	00 e0       	ldi	r16, 0x00	; 0
    286a:	10 e0       	ldi	r17, 0x00	; 0
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    286c:	ee 24       	eor	r14, r14
    286e:	ff 24       	eor	r15, r15
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    2870:	d5 01       	movw	r26, r10
    2872:	ed 91       	ld	r30, X+
    2874:	fc 91       	ld	r31, X
    2876:	c0 81       	ld	r28, Z
    2878:	d1 81       	ldd	r29, Z+1	; 0x01
    287a:	c6 01       	movw	r24, r12
    287c:	b8 01       	movw	r22, r16
    287e:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <_ZNK6StringixEj>
    2882:	68 2f       	mov	r22, r24
    2884:	c5 01       	movw	r24, r10
    2886:	fe 01       	movw	r30, r28
    2888:	19 95       	eicall
    288a:	e8 0e       	add	r14, r24
    288c:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    288e:	0f 5f       	subi	r16, 0xFF	; 255
    2890:	1f 4f       	sbci	r17, 0xFF	; 255
    2892:	f6 01       	movw	r30, r12
    2894:	84 81       	ldd	r24, Z+4	; 0x04
    2896:	95 81       	ldd	r25, Z+5	; 0x05
    2898:	08 17       	cp	r16, r24
    289a:	19 07       	cpc	r17, r25
    289c:	48 f3       	brcs	.-46     	; 0x2870 <_ZN5Print5printERK6String+0x2e>
    289e:	02 c0       	rjmp	.+4      	; 0x28a4 <_ZN5Print5printERK6String+0x62>
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    28a0:	ee 24       	eor	r14, r14
    28a2:	ff 24       	eor	r15, r15
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
  }
  return n;
}
    28a4:	8e 2d       	mov	r24, r14
    28a6:	9f 2d       	mov	r25, r15
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	ff 90       	pop	r15
    28b2:	ef 90       	pop	r14
    28b4:	df 90       	pop	r13
    28b6:	cf 90       	pop	r12
    28b8:	bf 90       	pop	r11
    28ba:	af 90       	pop	r10
    28bc:	08 95       	ret

000028be <_ZN5Print5printEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    28be:	e6 2f       	mov	r30, r22
    28c0:	f7 2f       	mov	r31, r23
    28c2:	df 01       	movw	r26, r30
    28c4:	0d 90       	ld	r0, X+
    28c6:	00 20       	and	r0, r0
    28c8:	e9 f7       	brne	.-6      	; 0x28c4 <_ZN5Print5printEPKc+0x6>
    28ca:	ad 01       	movw	r20, r26
    28cc:	41 50       	subi	r20, 0x01	; 1
    28ce:	50 40       	sbci	r21, 0x00	; 0
    28d0:	4e 1b       	sub	r20, r30
    28d2:	5f 0b       	sbc	r21, r31
    28d4:	dc 01       	movw	r26, r24
    28d6:	ed 91       	ld	r30, X+
    28d8:	fc 91       	ld	r31, X
    28da:	02 80       	ldd	r0, Z+2	; 0x02
    28dc:	f3 81       	ldd	r31, Z+3	; 0x03
    28de:	e0 2d       	mov	r30, r0
    28e0:	19 95       	eicall

size_t Print::print(const char str[])
{
  return write(str);
}
    28e2:	08 95       	ret

000028e4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    28e4:	dc 01       	movw	r26, r24
    28e6:	ed 91       	ld	r30, X+
    28e8:	fc 91       	ld	r31, X
    28ea:	01 90       	ld	r0, Z+
    28ec:	f0 81       	ld	r31, Z
    28ee:	e0 2d       	mov	r30, r0
    28f0:	19 95       	eicall
}
    28f2:	08 95       	ret

000028f4 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    28f4:	9c 01       	movw	r18, r24
    28f6:	cb 01       	movw	r24, r22
  return x.printTo(*this);
    28f8:	db 01       	movw	r26, r22
    28fa:	ed 91       	ld	r30, X+
    28fc:	fc 91       	ld	r31, X
    28fe:	01 90       	ld	r0, Z+
    2900:	f0 81       	ld	r31, Z
    2902:	e0 2d       	mov	r30, r0
    2904:	b9 01       	movw	r22, r18
    2906:	19 95       	eicall
}
    2908:	08 95       	ret

0000290a <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    290a:	0f 93       	push	r16
    290c:	1f 93       	push	r17
    290e:	cf 93       	push	r28
    2910:	df 93       	push	r29
    2912:	8c 01       	movw	r16, r24
  size_t n = print('\r');
    2914:	6d e0       	ldi	r22, 0x0D	; 13
    2916:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN5Print5printEc>
    291a:	ec 01       	movw	r28, r24
  n += print('\n');
    291c:	c8 01       	movw	r24, r16
    291e:	6a e0       	ldi	r22, 0x0A	; 10
    2920:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN5Print5printEc>
    2924:	8c 0f       	add	r24, r28
    2926:	9d 1f       	adc	r25, r29
  return n;
}
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	08 95       	ret

00002932 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	8c 01       	movw	r16, r24
  size_t n = print(ifsh);
    293c:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <_ZN5Print5printEPK19__FlashStringHelper>
    2940:	ec 01       	movw	r28, r24
  n += println();
    2942:	c8 01       	movw	r24, r16
    2944:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN5Print7printlnEv>
    2948:	8c 0f       	add	r24, r28
    294a:	9d 1f       	adc	r25, r29
  return n;
}
    294c:	df 91       	pop	r29
    294e:	cf 91       	pop	r28
    2950:	1f 91       	pop	r17
    2952:	0f 91       	pop	r16
    2954:	08 95       	ret

00002956 <_ZN5Print7printlnERK6String>:
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    2956:	0f 93       	push	r16
    2958:	1f 93       	push	r17
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	8c 01       	movw	r16, r24
  size_t n = print(s);
    2960:	0e 94 21 14 	call	0x2842	; 0x2842 <_ZN5Print5printERK6String>
    2964:	ec 01       	movw	r28, r24
  n += println();
    2966:	c8 01       	movw	r24, r16
    2968:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN5Print7printlnEv>
    296c:	8c 0f       	add	r24, r28
    296e:	9d 1f       	adc	r25, r29
  return n;
}
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	08 95       	ret

0000297a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    297a:	0f 93       	push	r16
    297c:	1f 93       	push	r17
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    2982:	8c 01       	movw	r16, r24
  size_t n = print(c);
    2984:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN5Print5printEPKc>
    2988:	ec 01       	movw	r28, r24
  n += println();
    298a:	c8 01       	movw	r24, r16
    298c:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN5Print7printlnEv>
    2990:	8c 0f       	add	r24, r28
    2992:	9d 1f       	adc	r25, r29
  return n;
}
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	1f 91       	pop	r17
    299a:	0f 91       	pop	r16
    299c:	08 95       	ret

0000299e <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    299e:	0f 93       	push	r16
    29a0:	1f 93       	push	r17
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	8c 01       	movw	r16, r24
  size_t n = print(c);
    29a8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN5Print5printEc>
    29ac:	ec 01       	movw	r28, r24
  n += println();
    29ae:	c8 01       	movw	r24, r16
    29b0:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN5Print7printlnEv>
    29b4:	8c 0f       	add	r24, r28
    29b6:	9d 1f       	adc	r25, r29
  return n;
}
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	08 95       	ret

000029c2 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    29c2:	0f 93       	push	r16
    29c4:	1f 93       	push	r17
    29c6:	cf 93       	push	r28
    29c8:	df 93       	push	r29
    29ca:	8c 01       	movw	r16, r24
  size_t n = print(x);
    29cc:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <_ZN5Print5printERK9Printable>
    29d0:	ec 01       	movw	r28, r24
  n += println();
    29d2:	c8 01       	movw	r24, r16
    29d4:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN5Print7printlnEv>
    29d8:	8c 0f       	add	r24, r28
    29da:	9d 1f       	adc	r25, r29
  return n;
}
    29dc:	df 91       	pop	r29
    29de:	cf 91       	pop	r28
    29e0:	1f 91       	pop	r17
    29e2:	0f 91       	pop	r16
    29e4:	08 95       	ret

000029e6 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    29e6:	4f 92       	push	r4
    29e8:	5f 92       	push	r5
    29ea:	6f 92       	push	r6
    29ec:	7f 92       	push	r7
    29ee:	8f 92       	push	r8
    29f0:	9f 92       	push	r9
    29f2:	af 92       	push	r10
    29f4:	bf 92       	push	r11
    29f6:	cf 92       	push	r12
    29f8:	df 92       	push	r13
    29fa:	ef 92       	push	r14
    29fc:	ff 92       	push	r15
    29fe:	0f 93       	push	r16
    2a00:	1f 93       	push	r17
    2a02:	cf 93       	push	r28
    2a04:	df 93       	push	r29
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	a1 97       	sbiw	r28, 0x21	; 33
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	4c 01       	movw	r8, r24
    2a18:	14 2f       	mov	r17, r20
    2a1a:	35 2f       	mov	r19, r21
    2a1c:	86 2f       	mov	r24, r22
    2a1e:	97 2f       	mov	r25, r23
    2a20:	02 2f       	mov	r16, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    2a22:	19 a2       	lds	r17, 0x99

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2a24:	22 30       	cpi	r18, 0x02	; 2
    2a26:	08 f4       	brcc	.+2      	; 0x2a2a <_ZN5Print11printNumberEmh+0x44>
    2a28:	0a e0       	ldi	r16, 0x0A	; 10
    2a2a:	0f 2e       	mov	r0, r31
    2a2c:	f1 e2       	ldi	r31, 0x21	; 33
    2a2e:	af 2e       	mov	r10, r31
    2a30:	bb 24       	eor	r11, r11
    2a32:	f0 2d       	mov	r31, r0
    2a34:	ac 0e       	add	r10, r28
    2a36:	bd 1e       	adc	r11, r29

  do {
    unsigned long m = n;
    n /= base;
    2a38:	40 2e       	mov	r4, r16
    2a3a:	55 24       	eor	r5, r5
    2a3c:	66 24       	eor	r6, r6
    2a3e:	77 24       	eor	r7, r7
    2a40:	03 c0       	rjmp	.+6      	; 0x2a48 <_ZN5Print11printNumberEmh+0x62>
    2a42:	12 2f       	mov	r17, r18
    2a44:	84 2f       	mov	r24, r20
    2a46:	95 2f       	mov	r25, r21
    2a48:	61 2f       	mov	r22, r17
    2a4a:	73 2f       	mov	r23, r19
    2a4c:	a3 01       	movw	r20, r6
    2a4e:	92 01       	movw	r18, r4
    2a50:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    2a54:	c2 2e       	mov	r12, r18
    2a56:	d3 2e       	mov	r13, r19
    2a58:	e4 2e       	mov	r14, r20
    2a5a:	f5 2e       	mov	r15, r21
    char c = m - base * n;
    2a5c:	02 9f       	mul	r16, r18
    2a5e:	80 2d       	mov	r24, r0
    2a60:	11 24       	eor	r1, r1
    2a62:	18 1b       	sub	r17, r24
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2a64:	08 94       	sec
    2a66:	a1 08       	sbc	r10, r1
    2a68:	b1 08       	sbc	r11, r1
    2a6a:	1a 30       	cpi	r17, 0x0A	; 10
    2a6c:	10 f4       	brcc	.+4      	; 0x2a72 <_ZN5Print11printNumberEmh+0x8c>
    2a6e:	10 5d       	subi	r17, 0xD0	; 208
    2a70:	01 c0       	rjmp	.+2      	; 0x2a74 <_ZN5Print11printNumberEmh+0x8e>
    2a72:	19 5c       	subi	r17, 0xC9	; 201
    2a74:	d5 01       	movw	r26, r10
    2a76:	1c 93       	st	X, r17
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    2a78:	c1 14       	cp	r12, r1
    2a7a:	d1 04       	cpc	r13, r1
    2a7c:	e1 04       	cpc	r14, r1
    2a7e:	f1 04       	cpc	r15, r1
    2a80:	01 f7       	brne	.-64     	; 0x2a42 <_ZN5Print11printNumberEmh+0x5c>
    2a82:	ea 2d       	mov	r30, r10
    2a84:	fb 2d       	mov	r31, r11
    2a86:	df 01       	movw	r26, r30
    2a88:	0d 90       	ld	r0, X+
    2a8a:	00 20       	and	r0, r0
    2a8c:	e9 f7       	brne	.-6      	; 0x2a88 <_ZN5Print11printNumberEmh+0xa2>
    2a8e:	11 97       	sbiw	r26, 0x01	; 1
    2a90:	ad 01       	movw	r20, r26
    2a92:	4e 1b       	sub	r20, r30
    2a94:	5f 0b       	sbc	r21, r31
    2a96:	d4 01       	movw	r26, r8
    2a98:	ed 91       	ld	r30, X+
    2a9a:	fc 91       	ld	r31, X
    2a9c:	02 80       	ldd	r0, Z+2	; 0x02
    2a9e:	f3 81       	ldd	r31, Z+3	; 0x03
    2aa0:	e0 2d       	mov	r30, r0
    2aa2:	c4 01       	movw	r24, r8
    2aa4:	b5 01       	movw	r22, r10
    2aa6:	19 95       	eicall
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    2aa8:	a1 96       	adiw	r28, 0x21	; 33
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	ff 90       	pop	r15
    2abe:	ef 90       	pop	r14
    2ac0:	df 90       	pop	r13
    2ac2:	cf 90       	pop	r12
    2ac4:	bf 90       	pop	r11
    2ac6:	af 90       	pop	r10
    2ac8:	9f 90       	pop	r9
    2aca:	8f 90       	pop	r8
    2acc:	7f 90       	pop	r7
    2ace:	6f 90       	pop	r6
    2ad0:	5f 90       	pop	r5
    2ad2:	4f 90       	pop	r4
    2ad4:	08 95       	ret

00002ad6 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    2ad6:	21 15       	cp	r18, r1
    2ad8:	31 05       	cpc	r19, r1
    2ada:	49 f4       	brne	.+18     	; 0x2aee <_ZN5Print5printEmi+0x18>
    2adc:	dc 01       	movw	r26, r24
    2ade:	ed 91       	ld	r30, X+
    2ae0:	fc 91       	ld	r31, X
    2ae2:	01 90       	ld	r0, Z+
    2ae4:	f0 81       	ld	r31, Z
    2ae6:	e0 2d       	mov	r30, r0
    2ae8:	64 2f       	mov	r22, r20
    2aea:	19 95       	eicall
    2aec:	08 95       	ret
  else return printNumber(n, base);
    2aee:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN5Print11printNumberEmh>
}
    2af2:	08 95       	ret

00002af4 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    2af4:	0f 93       	push	r16
    2af6:	1f 93       	push	r17
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    2afe:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN5Print5printEmi>
    2b02:	ec 01       	movw	r28, r24
  n += println();
    2b04:	c8 01       	movw	r24, r16
    2b06:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN5Print7printlnEv>
    2b0a:	8c 0f       	add	r24, r28
    2b0c:	9d 1f       	adc	r25, r29
  return n;
}
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	1f 91       	pop	r17
    2b14:	0f 91       	pop	r16
    2b16:	08 95       	ret

00002b18 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    2b18:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    2b1a:	ab 01       	movw	r20, r22
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN5Print5printEmi>
}
    2b24:	08 95       	ret

00002b26 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    2b30:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <_ZN5Print5printEji>
    2b34:	ec 01       	movw	r28, r24
  n += println();
    2b36:	c8 01       	movw	r24, r16
    2b38:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN5Print7printlnEv>
    2b3c:	8c 0f       	add	r24, r28
    2b3e:	9d 1f       	adc	r25, r29
  return n;
}
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	1f 91       	pop	r17
    2b46:	0f 91       	pop	r16
    2b48:	08 95       	ret

00002b4a <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    2b4a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    2b4c:	46 2f       	mov	r20, r22
    2b4e:	50 e0       	ldi	r21, 0x00	; 0
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN5Print5printEmi>
}
    2b58:	08 95       	ret

00002b5a <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    2b5a:	0f 93       	push	r16
    2b5c:	1f 93       	push	r17
    2b5e:	cf 93       	push	r28
    2b60:	df 93       	push	r29
    2b62:	8c 01       	movw	r16, r24
  size_t n = print(b, base);
    2b64:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <_ZN5Print5printEhi>
    2b68:	ec 01       	movw	r28, r24
  n += println();
    2b6a:	c8 01       	movw	r24, r16
    2b6c:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN5Print7printlnEv>
    2b70:	8c 0f       	add	r24, r28
    2b72:	9d 1f       	adc	r25, r29
  return n;
}
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	1f 91       	pop	r17
    2b7a:	0f 91       	pop	r16
    2b7c:	08 95       	ret

00002b7e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2b7e:	cf 92       	push	r12
    2b80:	df 92       	push	r13
    2b82:	ef 92       	push	r14
    2b84:	ff 92       	push	r15
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
    2b8a:	cf 93       	push	r28
    2b8c:	df 93       	push	r29
    2b8e:	ec 01       	movw	r28, r24
    2b90:	6a 01       	movw	r12, r20
    2b92:	7b 01       	movw	r14, r22
  if (base == 0) {
    2b94:	21 15       	cp	r18, r1
    2b96:	31 05       	cpc	r19, r1
    2b98:	41 f4       	brne	.+16     	; 0x2baa <_ZN5Print5printEli+0x2c>
    return write(n);
    2b9a:	e8 81       	ld	r30, Y
    2b9c:	f9 81       	ldd	r31, Y+1	; 0x01
    2b9e:	01 90       	ld	r0, Z+
    2ba0:	f0 81       	ld	r31, Z
    2ba2:	e0 2d       	mov	r30, r0
    2ba4:	64 2f       	mov	r22, r20
    2ba6:	19 95       	eicall
    2ba8:	1d c0       	rjmp	.+58     	; 0x2be4 <_ZN5Print5printEli+0x66>
  } else if (base == 10) {
    2baa:	2a 30       	cpi	r18, 0x0A	; 10
    2bac:	31 05       	cpc	r19, r1
    2bae:	c1 f4       	brne	.+48     	; 0x2be0 <_ZN5Print5printEli+0x62>
    if (n < 0) {
    2bb0:	77 23       	and	r23, r23
    2bb2:	94 f4       	brge	.+36     	; 0x2bd8 <_ZN5Print5printEli+0x5a>
      int t = print('-');
    2bb4:	6d e2       	ldi	r22, 0x2D	; 45
    2bb6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN5Print5printEc>
    2bba:	8c 01       	movw	r16, r24
      n = -n;
    2bbc:	44 27       	eor	r20, r20
    2bbe:	55 27       	eor	r21, r21
    2bc0:	ba 01       	movw	r22, r20
    2bc2:	4c 19       	sub	r20, r12
    2bc4:	5d 09       	sbc	r21, r13
    2bc6:	6e 09       	sbc	r22, r14
    2bc8:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    2bca:	ce 01       	movw	r24, r28
    2bcc:	2a e0       	ldi	r18, 0x0A	; 10
    2bce:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN5Print11printNumberEmh>
    2bd2:	80 0f       	add	r24, r16
    2bd4:	91 1f       	adc	r25, r17
    2bd6:	06 c0       	rjmp	.+12     	; 0x2be4 <_ZN5Print5printEli+0x66>
    }
    return printNumber(n, 10);
    2bd8:	2a e0       	ldi	r18, 0x0A	; 10
    2bda:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN5Print11printNumberEmh>
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <_ZN5Print5printEli+0x66>
  } else {
    return printNumber(n, base);
    2be0:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN5Print11printNumberEmh>
  }
}
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	ff 90       	pop	r15
    2bee:	ef 90       	pop	r14
    2bf0:	df 90       	pop	r13
    2bf2:	cf 90       	pop	r12
    2bf4:	08 95       	ret

00002bf6 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    2bf6:	0f 93       	push	r16
    2bf8:	1f 93       	push	r17
    2bfa:	cf 93       	push	r28
    2bfc:	df 93       	push	r29
    2bfe:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    2c00:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <_ZN5Print5printEli>
    2c04:	ec 01       	movw	r28, r24
  n += println();
    2c06:	c8 01       	movw	r24, r16
    2c08:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN5Print7printlnEv>
    2c0c:	8c 0f       	add	r24, r28
    2c0e:	9d 1f       	adc	r25, r29
  return n;
}
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	1f 91       	pop	r17
    2c16:	0f 91       	pop	r16
    2c18:	08 95       	ret

00002c1a <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    2c1a:	9a 01       	movw	r18, r20
  return print((long) n, base);
    2c1c:	fb 01       	movw	r30, r22
    2c1e:	af 01       	movw	r20, r30
    2c20:	66 27       	eor	r22, r22
    2c22:	57 fd       	sbrc	r21, 7
    2c24:	60 95       	com	r22
    2c26:	76 2f       	mov	r23, r22
    2c28:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <_ZN5Print5printEli>
}
    2c2c:	08 95       	ret

00002c2e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    2c38:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <_ZN5Print5printEii>
    2c3c:	ec 01       	movw	r28, r24
  n += println();
    2c3e:	c8 01       	movw	r24, r16
    2c40:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN5Print7printlnEv>
    2c44:	8c 0f       	add	r24, r28
    2c46:	9d 1f       	adc	r25, r29
  return n;
}
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	1f 91       	pop	r17
    2c4e:	0f 91       	pop	r16
    2c50:	08 95       	ret

00002c52 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2c52:	4f 92       	push	r4
    2c54:	5f 92       	push	r5
    2c56:	6f 92       	push	r6
    2c58:	7f 92       	push	r7
    2c5a:	8f 92       	push	r8
    2c5c:	9f 92       	push	r9
    2c5e:	af 92       	push	r10
    2c60:	bf 92       	push	r11
    2c62:	df 92       	push	r13
    2c64:	ef 92       	push	r14
    2c66:	ff 92       	push	r15
    2c68:	0f 93       	push	r16
    2c6a:	1f 93       	push	r17
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	3c 01       	movw	r6, r24
    2c72:	4a 01       	movw	r8, r20
    2c74:	5b 01       	movw	r10, r22
    2c76:	e2 2e       	mov	r14, r18
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    2c78:	cb 01       	movw	r24, r22
    2c7a:	ba 01       	movw	r22, r20
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	a9 01       	movw	r20, r18
    2c82:	0e 94 4c 35 	call	0x6a98	; 0x6a98 <__cmpsf2>
    2c86:	88 23       	and	r24, r24
    2c88:	54 f4       	brge	.+20     	; 0x2c9e <_ZN5Print10printFloatEdh+0x4c>
  {
     n += print('-');
    2c8a:	c3 01       	movw	r24, r6
    2c8c:	6d e2       	ldi	r22, 0x2D	; 45
    2c8e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN5Print5printEc>
    2c92:	2c 01       	movw	r4, r24
     number = -number;
    2c94:	b7 fa       	bst	r11, 7
    2c96:	b0 94       	com	r11
    2c98:	b7 f8       	bld	r11, 7
    2c9a:	b0 94       	com	r11
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <_ZN5Print10printFloatEdh+0x50>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2c9e:	44 24       	eor	r4, r4
    2ca0:	55 24       	eor	r5, r5
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2ca2:	ee 20       	and	r14, r14
    2ca4:	09 f4       	brne	.+2      	; 0x2ca8 <_ZN5Print10printFloatEdh+0x56>
    2ca6:	a3 c0       	rjmp	.+326    	; 0x2dee <_ZN5Print10printFloatEdh+0x19c>
    2ca8:	c0 e0       	ldi	r28, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2caa:	50 e0       	ldi	r21, 0x00	; 0
    2cac:	40 e0       	ldi	r20, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    2cb2:	85 2f       	mov	r24, r21
    2cb4:	94 2f       	mov	r25, r20
    2cb6:	a3 2f       	mov	r26, r19
    2cb8:	b2 2f       	mov	r27, r18
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e2       	ldi	r20, 0x20	; 32
    2cc4:	51 e4       	ldi	r21, 0x41	; 65
    2cc6:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <__divsf3>
    2cca:	56 2f       	mov	r21, r22
    2ccc:	47 2f       	mov	r20, r23
    2cce:	38 2f       	mov	r19, r24
    2cd0:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2cd2:	cf 5f       	subi	r28, 0xFF	; 255
    2cd4:	ce 15       	cp	r28, r14
    2cd6:	69 f7       	brne	.-38     	; 0x2cb2 <_ZN5Print10printFloatEdh+0x60>
    rounding /= 10.0;
  
  number += rounding;
    2cd8:	c5 01       	movw	r24, r10
    2cda:	b4 01       	movw	r22, r8
    2cdc:	e2 2f       	mov	r30, r18
    2cde:	05 2f       	mov	r16, r21
    2ce0:	14 2f       	mov	r17, r20
    2ce2:	23 2f       	mov	r18, r19
    2ce4:	3e 2f       	mov	r19, r30
    2ce6:	a9 01       	movw	r20, r18
    2ce8:	98 01       	movw	r18, r16
    2cea:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <__addsf3>
    2cee:	16 2f       	mov	r17, r22
    2cf0:	07 2f       	mov	r16, r23
    2cf2:	f8 2e       	mov	r15, r24
    2cf4:	d9 2e       	mov	r13, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2cf6:	86 2f       	mov	r24, r22
    2cf8:	90 2f       	mov	r25, r16
    2cfa:	af 2d       	mov	r26, r15
    2cfc:	bd 2d       	mov	r27, r13
    2cfe:	bc 01       	movw	r22, r24
    2d00:	cd 01       	movw	r24, r26
    2d02:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__fixunssfsi>
    2d06:	c6 2f       	mov	r28, r22
    2d08:	a7 2e       	mov	r10, r23
    2d0a:	88 2e       	mov	r8, r24
    2d0c:	d9 2f       	mov	r29, r25
  double remainder = number - (double)int_part;
    2d0e:	0e 94 e9 35 	call	0x6bd2	; 0x6bd2 <__floatunsisf>
    2d12:	9b 01       	movw	r18, r22
    2d14:	ac 01       	movw	r20, r24
    2d16:	81 2f       	mov	r24, r17
    2d18:	90 2f       	mov	r25, r16
    2d1a:	af 2d       	mov	r26, r15
    2d1c:	bd 2d       	mov	r27, r13
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 e7 34 	call	0x69ce	; 0x69ce <__subsf3>
    2d26:	f6 2e       	mov	r15, r22
    2d28:	d7 2e       	mov	r13, r23
    2d2a:	18 2f       	mov	r17, r24
    2d2c:	09 2f       	mov	r16, r25
  n += print(int_part);
    2d2e:	c3 01       	movw	r24, r6
    2d30:	4c 2f       	mov	r20, r28
    2d32:	5a 2d       	mov	r21, r10
    2d34:	68 2d       	mov	r22, r8
    2d36:	7d 2f       	mov	r23, r29
    2d38:	2a e0       	ldi	r18, 0x0A	; 10
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN5Print5printEmi>
    2d40:	ec 01       	movw	r28, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    2d42:	c3 01       	movw	r24, r6
    2d44:	6b ea       	ldi	r22, 0xAB	; 171
    2d46:	72 e0       	ldi	r23, 0x02	; 2
    2d48:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN5Print5printEPKc>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2d4c:	c8 0f       	add	r28, r24
    2d4e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    2d50:	5e 01       	movw	r10, r28
    2d52:	a4 0c       	add	r10, r4
    2d54:	b5 1c       	adc	r11, r5
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2d56:	8f 2d       	mov	r24, r15
    2d58:	9d 2d       	mov	r25, r13
    2d5a:	a1 2f       	mov	r26, r17
    2d5c:	b0 2f       	mov	r27, r16
    2d5e:	bc 01       	movw	r22, r24
    2d60:	cd 01       	movw	r24, r26
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	40 e2       	ldi	r20, 0x20	; 32
    2d68:	51 e4       	ldi	r21, 0x41	; 65
    2d6a:	0e 94 9b 36 	call	0x6d36	; 0x6d36 <__mulsf3>
    2d6e:	16 2f       	mov	r17, r22
    2d70:	07 2f       	mov	r16, r23
    2d72:	f8 2e       	mov	r15, r24
    2d74:	d9 2e       	mov	r13, r25
    int toPrint = int(remainder);
    2d76:	86 2f       	mov	r24, r22
    2d78:	90 2f       	mov	r25, r16
    2d7a:	af 2d       	mov	r26, r15
    2d7c:	bd 2d       	mov	r27, r13
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 b8 35 	call	0x6b70	; 0x6b70 <__fixsfsi>
    2d86:	ab 01       	movw	r20, r22
    2d88:	bc 01       	movw	r22, r24
    2d8a:	ea 01       	movw	r28, r20
    n += print(toPrint);
    2d8c:	c3 01       	movw	r24, r6
    2d8e:	ba 01       	movw	r22, r20
    2d90:	4a e0       	ldi	r20, 0x0A	; 10
    2d92:	50 e0       	ldi	r21, 0x00	; 0
    2d94:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <_ZN5Print5printEii>
    2d98:	a8 0e       	add	r10, r24
    2d9a:	b9 1e       	adc	r11, r25
    remainder -= toPrint; 
    2d9c:	be 01       	movw	r22, r28
    2d9e:	88 27       	eor	r24, r24
    2da0:	77 fd       	sbrc	r23, 7
    2da2:	80 95       	com	r24
    2da4:	98 2f       	mov	r25, r24
    2da6:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <__floatsisf>
    2daa:	9b 01       	movw	r18, r22
    2dac:	ac 01       	movw	r20, r24
    2dae:	81 2f       	mov	r24, r17
    2db0:	90 2f       	mov	r25, r16
    2db2:	af 2d       	mov	r26, r15
    2db4:	bd 2d       	mov	r27, r13
    2db6:	bc 01       	movw	r22, r24
    2db8:	cd 01       	movw	r24, r26
    2dba:	0e 94 e7 34 	call	0x69ce	; 0x69ce <__subsf3>
    2dbe:	f6 2e       	mov	r15, r22
    2dc0:	d7 2e       	mov	r13, r23
    2dc2:	18 2f       	mov	r17, r24
    2dc4:	09 2f       	mov	r16, r25
    2dc6:	ea 94       	dec	r14
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2dc8:	31 f6       	brne	.-116    	; 0x2d56 <_ZN5Print10printFloatEdh+0x104>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2dca:	8a 2d       	mov	r24, r10
    2dcc:	9b 2d       	mov	r25, r11
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	1f 91       	pop	r17
    2dd4:	0f 91       	pop	r16
    2dd6:	ff 90       	pop	r15
    2dd8:	ef 90       	pop	r14
    2dda:	df 90       	pop	r13
    2ddc:	bf 90       	pop	r11
    2dde:	af 90       	pop	r10
    2de0:	9f 90       	pop	r9
    2de2:	8f 90       	pop	r8
    2de4:	7f 90       	pop	r7
    2de6:	6f 90       	pop	r6
    2de8:	5f 90       	pop	r5
    2dea:	4f 90       	pop	r4
    2dec:	08 95       	ret
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    2dee:	c5 01       	movw	r24, r10
    2df0:	b4 01       	movw	r22, r8
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e0       	ldi	r20, 0x00	; 0
    2df8:	5f e3       	ldi	r21, 0x3F	; 63
    2dfa:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2dfe:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__fixunssfsi>
    2e02:	ab 01       	movw	r20, r22
    2e04:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    2e06:	c3 01       	movw	r24, r6
    2e08:	2a e0       	ldi	r18, 0x0A	; 10
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <_ZN5Print5printEmi>
    2e10:	5c 01       	movw	r10, r24
    2e12:	a4 0c       	add	r10, r4
    2e14:	b5 1c       	adc	r11, r5
    2e16:	d9 cf       	rjmp	.-78     	; 0x2dca <_ZN5Print10printFloatEdh+0x178>

00002e18 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2e18:	0e 94 29 16 	call	0x2c52	; 0x2c52 <_ZN5Print10printFloatEdh>
}
    2e1c:	08 95       	ret

00002e1e <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    2e1e:	0f 93       	push	r16
    2e20:	1f 93       	push	r17
    2e22:	cf 93       	push	r28
    2e24:	df 93       	push	r29
    2e26:	8c 01       	movw	r16, r24
  size_t n = print(num, digits);
    2e28:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN5Print5printEdi>
    2e2c:	ec 01       	movw	r28, r24
  n += println();
    2e2e:	c8 01       	movw	r24, r16
    2e30:	0e 94 85 14 	call	0x290a	; 0x290a <_ZN5Print7printlnEv>
    2e34:	8c 0f       	add	r24, r28
    2e36:	9d 1f       	adc	r25, r29
  return n;
}
    2e38:	df 91       	pop	r29
    2e3a:	cf 91       	pop	r28
    2e3c:	1f 91       	pop	r17
    2e3e:	0f 91       	pop	r16
    2e40:	08 95       	ret

00002e42 <_ZN8SPIClass5beginEv>:
  // MISO pin automatically overrides to INPUT.
  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).

  pinMode(SCK, OUTPUT);
    2e42:	84 e3       	ldi	r24, 0x34	; 52
    2e44:	61 e0       	ldi	r22, 0x01	; 1
    2e46:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <pinMode>
  pinMode(MOSI, OUTPUT);
    2e4a:	83 e3       	ldi	r24, 0x33	; 51
    2e4c:	61 e0       	ldi	r22, 0x01	; 1
    2e4e:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <pinMode>
  pinMode(SS, OUTPUT);
    2e52:	85 e3       	ldi	r24, 0x35	; 53
    2e54:	61 e0       	ldi	r22, 0x01	; 1
    2e56:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <pinMode>
  
  digitalWrite(SCK, LOW);
    2e5a:	84 e3       	ldi	r24, 0x34	; 52
    2e5c:	60 e0       	ldi	r22, 0x00	; 0
    2e5e:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
  digitalWrite(MOSI, LOW);
    2e62:	83 e3       	ldi	r24, 0x33	; 51
    2e64:	60 e0       	ldi	r22, 0x00	; 0
    2e66:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
  digitalWrite(SS, HIGH);
    2e6a:	85 e3       	ldi	r24, 0x35	; 53
    2e6c:	61 e0       	ldi	r22, 0x01	; 1
    2e6e:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
    2e72:	8c b5       	in	r24, 0x2c	; 44
    2e74:	80 61       	ori	r24, 0x10	; 16
    2e76:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
    2e78:	8c b5       	in	r24, 0x2c	; 44
    2e7a:	80 64       	ori	r24, 0x40	; 64
    2e7c:	8c bd       	out	0x2c, r24	; 44
}
    2e7e:	08 95       	ret

00002e80 <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  SPCR &= ~_BV(SPE);
    2e80:	8c b5       	in	r24, 0x2c	; 44
    2e82:	8f 7b       	andi	r24, 0xBF	; 191
    2e84:	8c bd       	out	0x2c, r24	; 44
}
    2e86:	08 95       	ret

00002e88 <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    2e88:	88 23       	and	r24, r24
    2e8a:	21 f4       	brne	.+8      	; 0x2e94 <_ZN8SPIClass11setBitOrderEh+0xc>
    SPCR |= _BV(DORD);
    2e8c:	8c b5       	in	r24, 0x2c	; 44
    2e8e:	80 62       	ori	r24, 0x20	; 32
    2e90:	8c bd       	out	0x2c, r24	; 44
    2e92:	08 95       	ret
  } else {
    SPCR &= ~(_BV(DORD));
    2e94:	8c b5       	in	r24, 0x2c	; 44
    2e96:	8f 7d       	andi	r24, 0xDF	; 223
    2e98:	8c bd       	out	0x2c, r24	; 44
    2e9a:	08 95       	ret

00002e9c <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    2e9c:	9c b5       	in	r25, 0x2c	; 44
    2e9e:	93 7f       	andi	r25, 0xF3	; 243
    2ea0:	89 2b       	or	r24, r25
    2ea2:	8c bd       	out	0x2c, r24	; 44
}
    2ea4:	08 95       	ret

00002ea6 <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    2ea6:	9c b5       	in	r25, 0x2c	; 44
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	23 70       	andi	r18, 0x03	; 3
    2eac:	9c 7f       	andi	r25, 0xFC	; 252
    2eae:	92 2b       	or	r25, r18
    2eb0:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    2eb2:	2d b5       	in	r18, 0x2d	; 45
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	95 95       	asr	r25
    2eb8:	87 95       	ror	r24
    2eba:	95 95       	asr	r25
    2ebc:	87 95       	ror	r24
    2ebe:	81 70       	andi	r24, 0x01	; 1
    2ec0:	92 2f       	mov	r25, r18
    2ec2:	9e 7f       	andi	r25, 0xFE	; 254
    2ec4:	89 2b       	or	r24, r25
    2ec6:	8d bd       	out	0x2d, r24	; 45
}
    2ec8:	08 95       	ret

00002eca <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    2eca:	1f 92       	push	r1
    2ecc:	0f 92       	push	r0
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	0f 92       	push	r0
    2ed2:	11 24       	eor	r1, r1
    2ed4:	2f 93       	push	r18
    2ed6:	3f 93       	push	r19
    2ed8:	8f 93       	push	r24
    2eda:	9f 93       	push	r25
    2edc:	af 93       	push	r26
    2ede:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2ee0:	80 91 cb 07 	lds	r24, 0x07CB
    2ee4:	90 91 cc 07 	lds	r25, 0x07CC
    2ee8:	a0 91 cd 07 	lds	r26, 0x07CD
    2eec:	b0 91 ce 07 	lds	r27, 0x07CE
	unsigned char f = timer0_fract;
    2ef0:	30 91 d3 07 	lds	r19, 0x07D3

	m += MILLIS_INC;
	f += FRACT_INC;
    2ef4:	23 2f       	mov	r18, r19
    2ef6:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2ef8:	2d 37       	cpi	r18, 0x7D	; 125
    2efa:	20 f4       	brcc	.+8      	; 0x2f04 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2efc:	01 96       	adiw	r24, 0x01	; 1
    2efe:	a1 1d       	adc	r26, r1
    2f00:	b1 1d       	adc	r27, r1
    2f02:	05 c0       	rjmp	.+10     	; 0x2f0e <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2f04:	23 2f       	mov	r18, r19
    2f06:	2a 57       	subi	r18, 0x7A	; 122
		m += 1;
    2f08:	02 96       	adiw	r24, 0x02	; 2
    2f0a:	a1 1d       	adc	r26, r1
    2f0c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2f0e:	20 93 d3 07 	sts	0x07D3, r18
	timer0_millis = m;
    2f12:	80 93 cb 07 	sts	0x07CB, r24
    2f16:	90 93 cc 07 	sts	0x07CC, r25
    2f1a:	a0 93 cd 07 	sts	0x07CD, r26
    2f1e:	b0 93 ce 07 	sts	0x07CE, r27
	timer0_overflow_count++;
    2f22:	80 91 cf 07 	lds	r24, 0x07CF
    2f26:	90 91 d0 07 	lds	r25, 0x07D0
    2f2a:	a0 91 d1 07 	lds	r26, 0x07D1
    2f2e:	b0 91 d2 07 	lds	r27, 0x07D2
    2f32:	01 96       	adiw	r24, 0x01	; 1
    2f34:	a1 1d       	adc	r26, r1
    2f36:	b1 1d       	adc	r27, r1
    2f38:	80 93 cf 07 	sts	0x07CF, r24
    2f3c:	90 93 d0 07 	sts	0x07D0, r25
    2f40:	a0 93 d1 07 	sts	0x07D1, r26
    2f44:	b0 93 d2 07 	sts	0x07D2, r27
}
    2f48:	bf 91       	pop	r27
    2f4a:	af 91       	pop	r26
    2f4c:	9f 91       	pop	r25
    2f4e:	8f 91       	pop	r24
    2f50:	3f 91       	pop	r19
    2f52:	2f 91       	pop	r18
    2f54:	0f 90       	pop	r0
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	0f 90       	pop	r0
    2f5a:	1f 90       	pop	r1
    2f5c:	18 95       	reti

00002f5e <millis>:

unsigned long millis()
{
    2f5e:	0f 93       	push	r16
    2f60:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG;
    2f62:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2f64:	f8 94       	cli
	m = timer0_millis;
    2f66:	00 91 cb 07 	lds	r16, 0x07CB
    2f6a:	10 91 cc 07 	lds	r17, 0x07CC
    2f6e:	20 91 cd 07 	lds	r18, 0x07CD
    2f72:	30 91 ce 07 	lds	r19, 0x07CE
	SREG = oldSREG;
    2f76:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    2f78:	b8 01       	movw	r22, r16
    2f7a:	c9 01       	movw	r24, r18
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	08 95       	ret

00002f82 <micros>:

unsigned long micros() {
    2f82:	0f 93       	push	r16
    2f84:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2f86:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    2f88:	f8 94       	cli
	m = timer0_overflow_count;
    2f8a:	00 91 cf 07 	lds	r16, 0x07CF
    2f8e:	10 91 d0 07 	lds	r17, 0x07D0
    2f92:	20 91 d1 07 	lds	r18, 0x07D1
    2f96:	30 91 d2 07 	lds	r19, 0x07D2
#if defined(TCNT0)
	t = TCNT0;
    2f9a:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2f9c:	a8 9b       	sbis	0x15, 0	; 21
    2f9e:	06 c0       	rjmp	.+12     	; 0x2fac <micros+0x2a>
    2fa0:	8f 3f       	cpi	r24, 0xFF	; 255
    2fa2:	21 f0       	breq	.+8      	; 0x2fac <micros+0x2a>
		m++;
    2fa4:	0f 5f       	subi	r16, 0xFF	; 255
    2fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa8:	2f 4f       	sbci	r18, 0xFF	; 255
    2faa:	3f 4f       	sbci	r19, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2fac:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2fae:	32 2f       	mov	r19, r18
    2fb0:	21 2f       	mov	r18, r17
    2fb2:	10 2f       	mov	r17, r16
    2fb4:	00 27       	eor	r16, r16
    2fb6:	08 0f       	add	r16, r24
    2fb8:	11 1d       	adc	r17, r1
    2fba:	21 1d       	adc	r18, r1
    2fbc:	31 1d       	adc	r19, r1
    2fbe:	42 e0       	ldi	r20, 0x02	; 2
    2fc0:	00 0f       	add	r16, r16
    2fc2:	11 1f       	adc	r17, r17
    2fc4:	22 1f       	adc	r18, r18
    2fc6:	33 1f       	adc	r19, r19
    2fc8:	4a 95       	dec	r20
    2fca:	d1 f7       	brne	.-12     	; 0x2fc0 <micros+0x3e>
}
    2fcc:	b8 01       	movw	r22, r16
    2fce:	c9 01       	movw	r24, r18
    2fd0:	1f 91       	pop	r17
    2fd2:	0f 91       	pop	r16
    2fd4:	08 95       	ret

00002fd6 <delay>:

void delay(unsigned long ms)
{
    2fd6:	cf 92       	push	r12
    2fd8:	df 92       	push	r13
    2fda:	ef 92       	push	r14
    2fdc:	ff 92       	push	r15
    2fde:	cf 93       	push	r28
    2fe0:	df 93       	push	r29
    2fe2:	6b 01       	movw	r12, r22
    2fe4:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    2fe6:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <micros>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	ec 01       	movw	r28, r24

	while (ms > 0) {
    2ff0:	0f c0       	rjmp	.+30     	; 0x3010 <delay+0x3a>
		if (((uint16_t)micros() - start) >= 1000) {
    2ff2:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <micros>
    2ff6:	6c 1b       	sub	r22, r28
    2ff8:	7d 0b       	sbc	r23, r29
    2ffa:	83 e0       	ldi	r24, 0x03	; 3
    2ffc:	68 3e       	cpi	r22, 0xE8	; 232
    2ffe:	78 07       	cpc	r23, r24
    3000:	38 f0       	brcs	.+14     	; 0x3010 <delay+0x3a>
			ms--;
    3002:	08 94       	sec
    3004:	c1 08       	sbc	r12, r1
    3006:	d1 08       	sbc	r13, r1
    3008:	e1 08       	sbc	r14, r1
    300a:	f1 08       	sbc	r15, r1
			start += 1000;
    300c:	c8 51       	subi	r28, 0x18	; 24
    300e:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    3010:	c1 14       	cp	r12, r1
    3012:	d1 04       	cpc	r13, r1
    3014:	e1 04       	cpc	r14, r1
    3016:	f1 04       	cpc	r15, r1
    3018:	61 f7       	brne	.-40     	; 0x2ff2 <delay+0x1c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    301a:	df 91       	pop	r29
    301c:	cf 91       	pop	r28
    301e:	ff 90       	pop	r15
    3020:	ef 90       	pop	r14
    3022:	df 90       	pop	r13
    3024:	cf 90       	pop	r12
    3026:	08 95       	ret

00003028 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	39 f0       	breq	.+14     	; 0x303a <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    302c:	88 0f       	add	r24, r24
    302e:	99 1f       	adc	r25, r25
    3030:	88 0f       	add	r24, r24
    3032:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    3034:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	f1 f7       	brne	.-4      	; 0x3036 <delayMicroseconds+0xe>
    303a:	08 95       	ret

0000303c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    303c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    303e:	84 b5       	in	r24, 0x24	; 36
    3040:	82 60       	ori	r24, 0x02	; 2
    3042:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3044:	84 b5       	in	r24, 0x24	; 36
    3046:	81 60       	ori	r24, 0x01	; 1
    3048:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    304a:	85 b5       	in	r24, 0x25	; 37
    304c:	82 60       	ori	r24, 0x02	; 2
    304e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3050:	85 b5       	in	r24, 0x25	; 37
    3052:	81 60       	ori	r24, 0x01	; 1
    3054:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3056:	ee e6       	ldi	r30, 0x6E	; 110
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	80 81       	ld	r24, Z
    305c:	81 60       	ori	r24, 0x01	; 1
    305e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3060:	e1 e8       	ldi	r30, 0x81	; 129
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3066:	80 81       	ld	r24, Z
    3068:	82 60       	ori	r24, 0x02	; 2
    306a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    306c:	80 81       	ld	r24, Z
    306e:	81 60       	ori	r24, 0x01	; 1
    3070:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3072:	e0 e8       	ldi	r30, 0x80	; 128
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	80 81       	ld	r24, Z
    3078:	81 60       	ori	r24, 0x01	; 1
    307a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    307c:	e1 eb       	ldi	r30, 0xB1	; 177
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	80 81       	ld	r24, Z
    3082:	84 60       	ori	r24, 0x04	; 4
    3084:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3086:	e0 eb       	ldi	r30, 0xB0	; 176
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	80 81       	ld	r24, Z
    308c:	81 60       	ori	r24, 0x01	; 1
    308e:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    3090:	e1 e9       	ldi	r30, 0x91	; 145
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	82 60       	ori	r24, 0x02	; 2
    3098:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    309a:	80 81       	ld	r24, Z
    309c:	81 60       	ori	r24, 0x01	; 1
    309e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    30a0:	e0 e9       	ldi	r30, 0x90	; 144
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	81 60       	ori	r24, 0x01	; 1
    30a8:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    30aa:	e1 ea       	ldi	r30, 0xA1	; 161
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	80 81       	ld	r24, Z
    30b0:	82 60       	ori	r24, 0x02	; 2
    30b2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    30b4:	80 81       	ld	r24, Z
    30b6:	81 60       	ori	r24, 0x01	; 1
    30b8:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    30ba:	e0 ea       	ldi	r30, 0xA0	; 160
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	80 81       	ld	r24, Z
    30c0:	81 60       	ori	r24, 0x01	; 1
    30c2:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    30c4:	e1 e2       	ldi	r30, 0x21	; 33
    30c6:	f1 e0       	ldi	r31, 0x01	; 1
    30c8:	80 81       	ld	r24, Z
    30ca:	82 60       	ori	r24, 0x02	; 2
    30cc:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    30ce:	80 81       	ld	r24, Z
    30d0:	81 60       	ori	r24, 0x01	; 1
    30d2:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    30d4:	e0 e2       	ldi	r30, 0x20	; 32
    30d6:	f1 e0       	ldi	r31, 0x01	; 1
    30d8:	80 81       	ld	r24, Z
    30da:	81 60       	ori	r24, 0x01	; 1
    30dc:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    30de:	ea e7       	ldi	r30, 0x7A	; 122
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	84 60       	ori	r24, 0x04	; 4
    30e6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    30e8:	80 81       	ld	r24, Z
    30ea:	82 60       	ori	r24, 0x02	; 2
    30ec:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    30ee:	80 81       	ld	r24, Z
    30f0:	81 60       	ori	r24, 0x01	; 1
    30f2:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    30f4:	80 81       	ld	r24, Z
    30f6:	80 68       	ori	r24, 0x80	; 128
    30f8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    30fa:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    30fe:	08 95       	ret

00003100 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3100:	89 30       	cpi	r24, 0x09	; 9
    3102:	09 f4       	brne	.+2      	; 0x3106 <turnOffPWM+0x6>
    3104:	49 c0       	rjmp	.+146    	; 0x3198 <turnOffPWM+0x98>
    3106:	8a 30       	cpi	r24, 0x0A	; 10
    3108:	a0 f4       	brcc	.+40     	; 0x3132 <turnOffPWM+0x32>
    310a:	84 30       	cpi	r24, 0x04	; 4
    310c:	51 f1       	breq	.+84     	; 0x3162 <turnOffPWM+0x62>
    310e:	85 30       	cpi	r24, 0x05	; 5
    3110:	40 f4       	brcc	.+16     	; 0x3122 <turnOffPWM+0x22>
    3112:	82 30       	cpi	r24, 0x02	; 2
    3114:	79 f1       	breq	.+94     	; 0x3174 <turnOffPWM+0x74>
    3116:	83 30       	cpi	r24, 0x03	; 3
    3118:	00 f5       	brcc	.+64     	; 0x315a <turnOffPWM+0x5a>
    311a:	81 30       	cpi	r24, 0x01	; 1
    311c:	09 f0       	breq	.+2      	; 0x3120 <turnOffPWM+0x20>
    311e:	63 c0       	rjmp	.+198    	; 0x31e6 <turnOffPWM+0xe6>
    3120:	26 c0       	rjmp	.+76     	; 0x316e <turnOffPWM+0x6e>
    3122:	87 30       	cpi	r24, 0x07	; 7
    3124:	79 f1       	breq	.+94     	; 0x3184 <turnOffPWM+0x84>
    3126:	88 30       	cpi	r24, 0x08	; 8
    3128:	98 f5       	brcc	.+102    	; 0x3190 <turnOffPWM+0x90>
    312a:	86 30       	cpi	r24, 0x06	; 6
    312c:	09 f0       	breq	.+2      	; 0x3130 <turnOffPWM+0x30>
    312e:	5b c0       	rjmp	.+182    	; 0x31e6 <turnOffPWM+0xe6>
    3130:	25 c0       	rjmp	.+74     	; 0x317c <turnOffPWM+0x7c>
    3132:	8d 30       	cpi	r24, 0x0D	; 13
    3134:	09 f4       	brne	.+2      	; 0x3138 <turnOffPWM+0x38>
    3136:	42 c0       	rjmp	.+132    	; 0x31bc <turnOffPWM+0xbc>
    3138:	8e 30       	cpi	r24, 0x0E	; 14
    313a:	28 f4       	brcc	.+10     	; 0x3146 <turnOffPWM+0x46>
    313c:	8b 30       	cpi	r24, 0x0B	; 11
    313e:	b1 f1       	breq	.+108    	; 0x31ac <turnOffPWM+0xac>
    3140:	8c 30       	cpi	r24, 0x0C	; 12
    3142:	c0 f5       	brcc	.+112    	; 0x31b4 <turnOffPWM+0xb4>
    3144:	2d c0       	rjmp	.+90     	; 0x31a0 <turnOffPWM+0xa0>
    3146:	80 31       	cpi	r24, 0x10	; 16
    3148:	09 f4       	brne	.+2      	; 0x314c <turnOffPWM+0x4c>
    314a:	42 c0       	rjmp	.+132    	; 0x31d0 <turnOffPWM+0xd0>
    314c:	81 31       	cpi	r24, 0x11	; 17
    314e:	09 f4       	brne	.+2      	; 0x3152 <turnOffPWM+0x52>
    3150:	45 c0       	rjmp	.+138    	; 0x31dc <turnOffPWM+0xdc>
    3152:	8f 30       	cpi	r24, 0x0F	; 15
    3154:	09 f0       	breq	.+2      	; 0x3158 <turnOffPWM+0x58>
    3156:	47 c0       	rjmp	.+142    	; 0x31e6 <turnOffPWM+0xe6>
    3158:	37 c0       	rjmp	.+110    	; 0x31c8 <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    315a:	80 91 80 00 	lds	r24, 0x0080
    315e:	8f 77       	andi	r24, 0x7F	; 127
    3160:	03 c0       	rjmp	.+6      	; 0x3168 <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3162:	80 91 80 00 	lds	r24, 0x0080
    3166:	8f 7d       	andi	r24, 0xDF	; 223
    3168:	80 93 80 00 	sts	0x0080, r24
    316c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    316e:	84 b5       	in	r24, 0x24	; 36
    3170:	8f 77       	andi	r24, 0x7F	; 127
    3172:	02 c0       	rjmp	.+4      	; 0x3178 <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3174:	84 b5       	in	r24, 0x24	; 36
    3176:	8f 7d       	andi	r24, 0xDF	; 223
    3178:	84 bd       	out	0x24, r24	; 36
    317a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    317c:	80 91 b0 00 	lds	r24, 0x00B0
    3180:	8f 77       	andi	r24, 0x7F	; 127
    3182:	03 c0       	rjmp	.+6      	; 0x318a <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3184:	80 91 b0 00 	lds	r24, 0x00B0
    3188:	8f 7d       	andi	r24, 0xDF	; 223
    318a:	80 93 b0 00 	sts	0x00B0, r24
    318e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3190:	80 91 90 00 	lds	r24, 0x0090
    3194:	8f 77       	andi	r24, 0x7F	; 127
    3196:	07 c0       	rjmp	.+14     	; 0x31a6 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    3198:	80 91 90 00 	lds	r24, 0x0090
    319c:	8f 7d       	andi	r24, 0xDF	; 223
    319e:	03 c0       	rjmp	.+6      	; 0x31a6 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    31a0:	80 91 90 00 	lds	r24, 0x0090
    31a4:	87 7f       	andi	r24, 0xF7	; 247
    31a6:	80 93 90 00 	sts	0x0090, r24
    31aa:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    31ac:	80 91 a0 00 	lds	r24, 0x00A0
    31b0:	8f 77       	andi	r24, 0x7F	; 127
    31b2:	07 c0       	rjmp	.+14     	; 0x31c2 <turnOffPWM+0xc2>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    31b4:	80 91 a0 00 	lds	r24, 0x00A0
    31b8:	8f 7d       	andi	r24, 0xDF	; 223
    31ba:	03 c0       	rjmp	.+6      	; 0x31c2 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    31bc:	80 91 a0 00 	lds	r24, 0x00A0
    31c0:	87 7f       	andi	r24, 0xF7	; 247
    31c2:	80 93 a0 00 	sts	0x00A0, r24
    31c6:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    31c8:	80 91 20 01 	lds	r24, 0x0120
    31cc:	8f 77       	andi	r24, 0x7F	; 127
    31ce:	03 c0       	rjmp	.+6      	; 0x31d6 <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    31d0:	80 91 20 01 	lds	r24, 0x0120
    31d4:	8f 7d       	andi	r24, 0xDF	; 223
    31d6:	80 93 20 01 	sts	0x0120, r24
    31da:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    31dc:	80 91 20 01 	lds	r24, 0x0120
    31e0:	87 7f       	andi	r24, 0xF7	; 247
    31e2:	80 93 20 01 	sts	0x0120, r24
    31e6:	08 95       	ret

000031e8 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	fc 01       	movw	r30, r24
    31ec:	e6 5d       	subi	r30, 0xD6	; 214
    31ee:	fe 4f       	sbci	r31, 0xFE	; 254
    31f0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    31f2:	80 59       	subi	r24, 0x90	; 144
    31f4:	9e 4f       	sbci	r25, 0xFE	; 254
    31f6:	fc 01       	movw	r30, r24
    31f8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    31fa:	88 23       	and	r24, r24
    31fc:	41 f1       	breq	.+80     	; 0x324e <pinMode+0x66>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	fc 01       	movw	r30, r24
    3206:	e6 51       	subi	r30, 0x16	; 22
    3208:	fe 4f       	sbci	r31, 0xFE	; 254
    320a:	45 91       	lpm	r20, Z+
    320c:	54 91       	lpm	r21, Z
    320e:	da 01       	movw	r26, r20
	out = portOutputRegister(port);
    3210:	80 53       	subi	r24, 0x30	; 48
    3212:	9e 4f       	sbci	r25, 0xFE	; 254
    3214:	fc 01       	movw	r30, r24
    3216:	85 91       	lpm	r24, Z+
    3218:	94 91       	lpm	r25, Z
    321a:	fc 01       	movw	r30, r24

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    321c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    321e:	f8 94       	cli
		*reg &= ~bit;
    3220:	8c 91       	ld	r24, X

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
    3222:	66 23       	and	r22, r22
    3224:	31 f4       	brne	.+12     	; 0x3232 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    3226:	20 95       	com	r18
    3228:	82 23       	and	r24, r18
    322a:	8c 93       	st	X, r24
		*out &= ~bit;
    322c:	80 81       	ld	r24, Z
    322e:	82 23       	and	r24, r18
    3230:	08 c0       	rjmp	.+16     	; 0x3242 <pinMode+0x5a>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3232:	62 30       	cpi	r22, 0x02	; 2
    3234:	49 f4       	brne	.+18     	; 0x3248 <pinMode+0x60>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    3236:	32 2f       	mov	r19, r18
    3238:	30 95       	com	r19
    323a:	83 23       	and	r24, r19
    323c:	8c 93       	st	X, r24
		*out |= bit;
    323e:	80 81       	ld	r24, Z
    3240:	82 2b       	or	r24, r18
    3242:	80 83       	st	Z, r24
		SREG = oldSREG;
    3244:	9f bf       	out	0x3f, r25	; 63
    3246:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
    3248:	82 2b       	or	r24, r18
    324a:	8c 93       	st	X, r24
		SREG = oldSREG;
    324c:	9f bf       	out	0x3f, r25	; 63
    324e:	08 95       	ret

00003250 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3250:	0f 93       	push	r16
    3252:	1f 93       	push	r17
    3254:	cf 93       	push	r28
    3256:	df 93       	push	r29
    3258:	0f 92       	push	r0
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    325e:	28 2f       	mov	r18, r24
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	f9 01       	movw	r30, r18
    3264:	ec 51       	subi	r30, 0x1C	; 28
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    326a:	f9 01       	movw	r30, r18
    326c:	e6 5d       	subi	r30, 0xD6	; 214
    326e:	fe 4f       	sbci	r31, 0xFE	; 254
    3270:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    3272:	f9 01       	movw	r30, r18
    3274:	e0 59       	subi	r30, 0x90	; 144
    3276:	fe 4f       	sbci	r31, 0xFE	; 254
    3278:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    327a:	00 23       	and	r16, r16
    327c:	d1 f0       	breq	.+52     	; 0x32b2 <digitalWrite+0x62>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    327e:	88 23       	and	r24, r24
    3280:	21 f0       	breq	.+8      	; 0x328a <digitalWrite+0x3a>
    3282:	69 83       	std	Y+1, r22	; 0x01
    3284:	0e 94 80 18 	call	0x3100	; 0x3100 <turnOffPWM>
    3288:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    328a:	e0 2f       	mov	r30, r16
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	ee 0f       	add	r30, r30
    3290:	ff 1f       	adc	r31, r31
    3292:	e0 53       	subi	r30, 0x30	; 48
    3294:	fe 4f       	sbci	r31, 0xFE	; 254
    3296:	85 91       	lpm	r24, Z+
    3298:	94 91       	lpm	r25, Z
    329a:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    329c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    329e:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    32a0:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    32a2:	66 23       	and	r22, r22
    32a4:	19 f4       	brne	.+6      	; 0x32ac <digitalWrite+0x5c>
		*out &= ~bit;
    32a6:	10 95       	com	r17
    32a8:	81 23       	and	r24, r17
    32aa:	01 c0       	rjmp	.+2      	; 0x32ae <digitalWrite+0x5e>
	} else {
		*out |= bit;
    32ac:	81 2b       	or	r24, r17
    32ae:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    32b0:	9f bf       	out	0x3f, r25	; 63
}
    32b2:	0f 90       	pop	r0
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	08 95       	ret

000032be <digitalRead>:

int digitalRead(uint8_t pin)
{
    32be:	cf 93       	push	r28
    32c0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    32c2:	28 2f       	mov	r18, r24
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	f9 01       	movw	r30, r18
    32c8:	ec 51       	subi	r30, 0x1C	; 28
    32ca:	ff 4f       	sbci	r31, 0xFF	; 255
    32cc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    32ce:	f9 01       	movw	r30, r18
    32d0:	e6 5d       	subi	r30, 0xD6	; 214
    32d2:	fe 4f       	sbci	r31, 0xFE	; 254
    32d4:	c4 91       	lpm	r28, Z
	uint8_t port = digitalPinToPort(pin);
    32d6:	f9 01       	movw	r30, r18
    32d8:	e0 59       	subi	r30, 0x90	; 144
    32da:	fe 4f       	sbci	r31, 0xFE	; 254
    32dc:	d4 91       	lpm	r29, Z

	if (port == NOT_A_PIN) return LOW;
    32de:	dd 23       	and	r29, r29
    32e0:	91 f0       	breq	.+36     	; 0x3306 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    32e2:	88 23       	and	r24, r24
    32e4:	11 f0       	breq	.+4      	; 0x32ea <digitalRead+0x2c>
    32e6:	0e 94 80 18 	call	0x3100	; 0x3100 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    32ea:	ed 2f       	mov	r30, r29
    32ec:	f0 e0       	ldi	r31, 0x00	; 0
    32ee:	ee 0f       	add	r30, r30
    32f0:	ff 1f       	adc	r31, r31
    32f2:	ea 54       	subi	r30, 0x4A	; 74
    32f4:	fe 4f       	sbci	r31, 0xFE	; 254
    32f6:	85 91       	lpm	r24, Z+
    32f8:	94 91       	lpm	r25, Z
    32fa:	fc 01       	movw	r30, r24
    32fc:	20 81       	ld	r18, Z
    32fe:	2c 23       	and	r18, r28
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	11 f4       	brne	.+4      	; 0x330a <digitalRead+0x4c>
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	08 95       	ret

00003310 <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
    3310:	fc 01       	movw	r30, r24
    3312:	80 81       	ld	r24, Z
    3314:	91 81       	ldd	r25, Z+1	; 0x01
    3316:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <free>
}
    331a:	08 95       	ret

0000331c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
    331c:	cf 93       	push	r28
    331e:	df 93       	push	r29
    3320:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    3322:	88 81       	ld	r24, Y
    3324:	99 81       	ldd	r25, Y+1	; 0x01
    3326:	00 97       	sbiw	r24, 0x00	; 0
    3328:	11 f0       	breq	.+4      	; 0x332e <_ZN6String10invalidateEv+0x12>
    332a:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <free>
	buffer = NULL;
    332e:	19 82       	std	Y+1, r1	; 0x01
    3330:	18 82       	st	Y, r1
	capacity = len = 0;
    3332:	1d 82       	std	Y+5, r1	; 0x05
    3334:	1c 82       	std	Y+4, r1	; 0x04
    3336:	1b 82       	std	Y+3, r1	; 0x03
    3338:	1a 82       	std	Y+2, r1	; 0x02
}
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	08 95       	ret

00003340 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    3340:	0f 93       	push	r16
    3342:	1f 93       	push	r17
    3344:	cf 93       	push	r28
    3346:	df 93       	push	r29
    3348:	ec 01       	movw	r28, r24
    334a:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    334c:	6f 5f       	subi	r22, 0xFF	; 255
    334e:	7f 4f       	sbci	r23, 0xFF	; 255
    3350:	88 81       	ld	r24, Y
    3352:	99 81       	ldd	r25, Y+1	; 0x01
    3354:	0e 94 f9 38 	call	0x71f2	; 0x71f2 <realloc>
    3358:	28 2f       	mov	r18, r24
    335a:	39 2f       	mov	r19, r25
	if (newbuffer) {
    335c:	21 15       	cp	r18, r1
    335e:	31 05       	cpc	r19, r1
    3360:	31 f0       	breq	.+12     	; 0x336e <_ZN6String12changeBufferEj+0x2e>
		buffer = newbuffer;
    3362:	39 83       	std	Y+1, r19	; 0x01
    3364:	28 83       	st	Y, r18
		capacity = maxStrLen;
    3366:	1b 83       	std	Y+3, r17	; 0x03
    3368:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	01 c0       	rjmp	.+2      	; 0x3370 <_ZN6String12changeBufferEj+0x30>
	}
	return 0;
    336e:	80 e0       	ldi	r24, 0x00	; 0
}
    3370:	df 91       	pop	r29
    3372:	cf 91       	pop	r28
    3374:	1f 91       	pop	r17
    3376:	0f 91       	pop	r16
    3378:	08 95       	ret

0000337a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    337a:	cf 93       	push	r28
    337c:	df 93       	push	r29
    337e:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    3380:	88 81       	ld	r24, Y
    3382:	99 81       	ldd	r25, Y+1	; 0x01
    3384:	00 97       	sbiw	r24, 0x00	; 0
    3386:	29 f0       	breq	.+10     	; 0x3392 <_ZN6String7reserveEj+0x18>
    3388:	8a 81       	ldd	r24, Y+2	; 0x02
    338a:	9b 81       	ldd	r25, Y+3	; 0x03
    338c:	86 17       	cp	r24, r22
    338e:	97 07       	cpc	r25, r23
    3390:	70 f4       	brcc	.+28     	; 0x33ae <_ZN6String7reserveEj+0x34>
	if (changeBuffer(size)) {
    3392:	ce 01       	movw	r24, r28
    3394:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN6String12changeBufferEj>
    3398:	88 23       	and	r24, r24
    339a:	59 f0       	breq	.+22     	; 0x33b2 <_ZN6String7reserveEj+0x38>
		if (len == 0) buffer[0] = 0;
    339c:	8c 81       	ldd	r24, Y+4	; 0x04
    339e:	9d 81       	ldd	r25, Y+5	; 0x05
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	49 f4       	brne	.+18     	; 0x33b6 <_ZN6String7reserveEj+0x3c>
    33a4:	e8 81       	ld	r30, Y
    33a6:	f9 81       	ldd	r31, Y+1	; 0x01
    33a8:	10 82       	st	Z, r1
		return 1;
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	05 c0       	rjmp	.+10     	; 0x33b8 <_ZN6String7reserveEj+0x3e>
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	03 c0       	rjmp	.+6      	; 0x33b8 <_ZN6String7reserveEj+0x3e>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
	}
	return 0;
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	01 c0       	rjmp	.+2      	; 0x33b8 <_ZN6String7reserveEj+0x3e>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    33b6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    33b8:	df 91       	pop	r29
    33ba:	cf 91       	pop	r28
    33bc:	08 95       	ret

000033be <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    33be:	ef 92       	push	r14
    33c0:	ff 92       	push	r15
    33c2:	0f 93       	push	r16
    33c4:	1f 93       	push	r17
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	ec 01       	movw	r28, r24
    33cc:	7b 01       	movw	r14, r22
    33ce:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    33d0:	ba 01       	movw	r22, r20
    33d2:	0e 94 bd 19 	call	0x337a	; 0x337a <_ZN6String7reserveEj>
    33d6:	88 23       	and	r24, r24
    33d8:	21 f4       	brne	.+8      	; 0x33e2 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    33da:	ce 01       	movw	r24, r28
    33dc:	0e 94 8e 19 	call	0x331c	; 0x331c <_ZN6String10invalidateEv>
		return *this;
    33e0:	07 c0       	rjmp	.+14     	; 0x33f0 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    33e2:	1d 83       	std	Y+5, r17	; 0x05
    33e4:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    33e6:	88 81       	ld	r24, Y
    33e8:	99 81       	ldd	r25, Y+1	; 0x01
    33ea:	b7 01       	movw	r22, r14
    33ec:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <strcpy>
	return *this;
}
    33f0:	8c 2f       	mov	r24, r28
    33f2:	9d 2f       	mov	r25, r29
    33f4:	df 91       	pop	r29
    33f6:	cf 91       	pop	r28
    33f8:	1f 91       	pop	r17
    33fa:	0f 91       	pop	r16
    33fc:	ff 90       	pop	r15
    33fe:	ef 90       	pop	r14
    3400:	08 95       	ret

00003402 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    3402:	cf 93       	push	r28
    3404:	df 93       	push	r29
    3406:	dc 01       	movw	r26, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3408:	11 96       	adiw	r26, 0x01	; 1
    340a:	1c 92       	st	X, r1
    340c:	1e 92       	st	-X, r1
	capacity = 0;
    340e:	13 96       	adiw	r26, 0x03	; 3
    3410:	1c 92       	st	X, r1
    3412:	1e 92       	st	-X, r1
    3414:	12 97       	sbiw	r26, 0x02	; 2
	len = 0;
    3416:	15 96       	adiw	r26, 0x05	; 5
    3418:	1c 92       	st	X, r1
    341a:	1e 92       	st	-X, r1
    341c:	14 97       	sbiw	r26, 0x04	; 4
	flags = 0;
    341e:	16 96       	adiw	r26, 0x06	; 6
    3420:	1c 92       	st	X, r1
    3422:	16 97       	sbiw	r26, 0x06	; 6
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    3424:	61 15       	cp	r22, r1
    3426:	71 05       	cpc	r23, r1
    3428:	69 f0       	breq	.+26     	; 0x3444 <_ZN6StringC1EPKc+0x42>
    342a:	e6 2f       	mov	r30, r22
    342c:	f7 2f       	mov	r31, r23
    342e:	ef 01       	movw	r28, r30
    3430:	09 90       	ld	r0, Y+
    3432:	00 20       	and	r0, r0
    3434:	e9 f7       	brne	.-6      	; 0x3430 <_ZN6StringC1EPKc+0x2e>
    3436:	ae 01       	movw	r20, r28
    3438:	41 50       	subi	r20, 0x01	; 1
    343a:	50 40       	sbci	r21, 0x00	; 0
    343c:	4e 1b       	sub	r20, r30
    343e:	5f 0b       	sbc	r21, r31
    3440:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN6String4copyEPKcj>
}
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	08 95       	ret

0000344a <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	ec 01       	movw	r28, r24
    3450:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    3452:	86 17       	cp	r24, r22
    3454:	97 07       	cpc	r25, r23
    3456:	69 f0       	breq	.+26     	; 0x3472 <_ZN6StringaSERKS_+0x28>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    3458:	20 81       	ld	r18, Z
    345a:	31 81       	ldd	r19, Z+1	; 0x01
    345c:	21 15       	cp	r18, r1
    345e:	31 05       	cpc	r19, r1
    3460:	31 f0       	breq	.+12     	; 0x346e <_ZN6StringaSERKS_+0x24>
    3462:	44 81       	ldd	r20, Z+4	; 0x04
    3464:	55 81       	ldd	r21, Z+5	; 0x05
    3466:	b9 01       	movw	r22, r18
    3468:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN6String4copyEPKcj>
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <_ZN6StringaSERKS_+0x28>
	else invalidate();
    346e:	0e 94 8e 19 	call	0x331c	; 0x331c <_ZN6String10invalidateEv>
	
	return *this;
}
    3472:	8c 2f       	mov	r24, r28
    3474:	9d 2f       	mov	r25, r29
    3476:	df 91       	pop	r29
    3478:	cf 91       	pop	r28
    347a:	08 95       	ret

0000347c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    347c:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    347e:	11 82       	std	Z+1, r1	; 0x01
    3480:	10 82       	st	Z, r1
	capacity = 0;
    3482:	13 82       	std	Z+3, r1	; 0x03
    3484:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3486:	15 82       	std	Z+5, r1	; 0x05
    3488:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    348a:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    348c:	0e 94 25 1a 	call	0x344a	; 0x344a <_ZN6StringaSERKS_>
}
    3490:	08 95       	ret

00003492 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    3492:	cf 93       	push	r28
    3494:	df 93       	push	r29
    3496:	c8 2f       	mov	r28, r24
    3498:	d9 2f       	mov	r29, r25
	if (cstr) copy(cstr, strlen(cstr));
    349a:	61 15       	cp	r22, r1
    349c:	71 05       	cpc	r23, r1
    349e:	71 f0       	breq	.+28     	; 0x34bc <_ZN6StringaSEPKc+0x2a>
    34a0:	e6 2f       	mov	r30, r22
    34a2:	f7 2f       	mov	r31, r23
    34a4:	df 01       	movw	r26, r30
    34a6:	0d 90       	ld	r0, X+
    34a8:	00 20       	and	r0, r0
    34aa:	e9 f7       	brne	.-6      	; 0x34a6 <_ZN6StringaSEPKc+0x14>
    34ac:	ad 01       	movw	r20, r26
    34ae:	41 50       	subi	r20, 0x01	; 1
    34b0:	50 40       	sbci	r21, 0x00	; 0
    34b2:	4e 1b       	sub	r20, r30
    34b4:	5f 0b       	sbc	r21, r31
    34b6:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN6String4copyEPKcj>
    34ba:	02 c0       	rjmp	.+4      	; 0x34c0 <_ZN6StringaSEPKc+0x2e>
	else invalidate();
    34bc:	0e 94 8e 19 	call	0x331c	; 0x331c <_ZN6String10invalidateEv>
	
	return *this;
}
    34c0:	8c 2f       	mov	r24, r28
    34c2:	9d 2f       	mov	r25, r29
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	08 95       	ret

000034ca <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    34ca:	0f 93       	push	r16
    34cc:	1f 93       	push	r17
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	a1 97       	sbiw	r28, 0x21	; 33
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
    34e2:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    34e4:	fc 01       	movw	r30, r24
    34e6:	11 82       	std	Z+1, r1	; 0x01
    34e8:	10 82       	st	Z, r1
	capacity = 0;
    34ea:	13 82       	std	Z+3, r1	; 0x03
    34ec:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    34ee:	15 82       	std	Z+5, r1	; 0x05
    34f0:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    34f2:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    34f4:	cb 01       	movw	r24, r22
    34f6:	ba 01       	movw	r22, r20
    34f8:	ae 01       	movw	r20, r28
    34fa:	4f 5f       	subi	r20, 0xFF	; 255
    34fc:	5f 4f       	sbci	r21, 0xFF	; 255
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	0e 94 07 3b 	call	0x760e	; 0x760e <ultoa>
	*this = buf;
    3504:	c8 01       	movw	r24, r16
    3506:	be 01       	movw	r22, r28
    3508:	6f 5f       	subi	r22, 0xFF	; 255
    350a:	7f 4f       	sbci	r23, 0xFF	; 255
    350c:	0e 94 49 1a 	call	0x3492	; 0x3492 <_ZN6StringaSEPKc>
}
    3510:	a1 96       	adiw	r28, 0x21	; 33
    3512:	0f b6       	in	r0, 0x3f	; 63
    3514:	f8 94       	cli
    3516:	de bf       	out	0x3e, r29	; 62
    3518:	0f be       	out	0x3f, r0	; 63
    351a:	cd bf       	out	0x3d, r28	; 61
    351c:	df 91       	pop	r29
    351e:	cf 91       	pop	r28
    3520:	1f 91       	pop	r17
    3522:	0f 91       	pop	r16
    3524:	08 95       	ret

00003526 <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    3526:	0f 93       	push	r16
    3528:	1f 93       	push	r17
    352a:	cf 93       	push	r28
    352c:	df 93       	push	r29
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    3532:	a2 97       	sbiw	r28, 0x22	; 34
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3540:	fc 01       	movw	r30, r24
    3542:	11 82       	std	Z+1, r1	; 0x01
    3544:	10 82       	st	Z, r1
	capacity = 0;
    3546:	13 82       	std	Z+3, r1	; 0x03
    3548:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    354a:	15 82       	std	Z+5, r1	; 0x05
    354c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    354e:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    3550:	cb 01       	movw	r24, r22
    3552:	ba 01       	movw	r22, r20
    3554:	ae 01       	movw	r20, r28
    3556:	4f 5f       	subi	r20, 0xFF	; 255
    3558:	5f 4f       	sbci	r21, 0xFF	; 255
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	0e 94 be 3a 	call	0x757c	; 0x757c <ltoa>
	*this = buf;
    3560:	c8 01       	movw	r24, r16
    3562:	be 01       	movw	r22, r28
    3564:	6f 5f       	subi	r22, 0xFF	; 255
    3566:	7f 4f       	sbci	r23, 0xFF	; 255
    3568:	0e 94 49 1a 	call	0x3492	; 0x3492 <_ZN6StringaSEPKc>
}
    356c:	a2 96       	adiw	r28, 0x22	; 34
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	1f 91       	pop	r17
    357e:	0f 91       	pop	r16
    3580:	08 95       	ret

00003582 <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    3582:	0f 93       	push	r16
    3584:	1f 93       	push	r17
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    358e:	61 97       	sbiw	r28, 0x11	; 17
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	8c 01       	movw	r16, r24
    359c:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    359e:	f8 01       	movw	r30, r16
    35a0:	11 82       	std	Z+1, r1	; 0x01
    35a2:	10 82       	st	Z, r1
	capacity = 0;
    35a4:	13 82       	std	Z+3, r1	; 0x03
    35a6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    35a8:	15 82       	std	Z+5, r1	; 0x05
    35aa:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    35ac:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    35ae:	be 01       	movw	r22, r28
    35b0:	6f 5f       	subi	r22, 0xFF	; 255
    35b2:	7f 4f       	sbci	r23, 0xFF	; 255
    35b4:	50 e0       	ldi	r21, 0x00	; 0
    35b6:	0e 94 2c 3b 	call	0x7658	; 0x7658 <utoa>
	*this = buf;
    35ba:	c8 01       	movw	r24, r16
    35bc:	be 01       	movw	r22, r28
    35be:	6f 5f       	subi	r22, 0xFF	; 255
    35c0:	7f 4f       	sbci	r23, 0xFF	; 255
    35c2:	0e 94 49 1a 	call	0x3492	; 0x3492 <_ZN6StringaSEPKc>
}
    35c6:	61 96       	adiw	r28, 0x11	; 17
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	df 91       	pop	r29
    35d4:	cf 91       	pop	r28
    35d6:	1f 91       	pop	r17
    35d8:	0f 91       	pop	r16
    35da:	08 95       	ret

000035dc <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    35dc:	0f 93       	push	r16
    35de:	1f 93       	push	r17
    35e0:	cf 93       	push	r28
    35e2:	df 93       	push	r29
    35e4:	cd b7       	in	r28, 0x3d	; 61
    35e6:	de b7       	in	r29, 0x3e	; 62
    35e8:	62 97       	sbiw	r28, 0x12	; 18
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	cd bf       	out	0x3d, r28	; 61
    35f4:	8c 01       	movw	r16, r24
    35f6:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    35f8:	f8 01       	movw	r30, r16
    35fa:	11 82       	std	Z+1, r1	; 0x01
    35fc:	10 82       	st	Z, r1
	capacity = 0;
    35fe:	13 82       	std	Z+3, r1	; 0x03
    3600:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3602:	15 82       	std	Z+5, r1	; 0x05
    3604:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3606:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    3608:	be 01       	movw	r22, r28
    360a:	6f 5f       	subi	r22, 0xFF	; 255
    360c:	7f 4f       	sbci	r23, 0xFF	; 255
    360e:	50 e0       	ldi	r21, 0x00	; 0
    3610:	0e 94 9d 3a 	call	0x753a	; 0x753a <itoa>
	*this = buf;
    3614:	c8 01       	movw	r24, r16
    3616:	be 01       	movw	r22, r28
    3618:	6f 5f       	subi	r22, 0xFF	; 255
    361a:	7f 4f       	sbci	r23, 0xFF	; 255
    361c:	0e 94 49 1a 	call	0x3492	; 0x3492 <_ZN6StringaSEPKc>
}
    3620:	62 96       	adiw	r28, 0x12	; 18
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	de bf       	out	0x3e, r29	; 62
    3628:	0f be       	out	0x3f, r0	; 63
    362a:	cd bf       	out	0x3d, r28	; 61
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	1f 91       	pop	r17
    3632:	0f 91       	pop	r16
    3634:	08 95       	ret

00003636 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    3636:	0f 93       	push	r16
    3638:	1f 93       	push	r17
    363a:	cf 93       	push	r28
    363c:	df 93       	push	r29
    363e:	cd b7       	in	r28, 0x3d	; 61
    3640:	de b7       	in	r29, 0x3e	; 62
    3642:	29 97       	sbiw	r28, 0x09	; 9
    3644:	0f b6       	in	r0, 0x3f	; 63
    3646:	f8 94       	cli
    3648:	de bf       	out	0x3e, r29	; 62
    364a:	0f be       	out	0x3f, r0	; 63
    364c:	cd bf       	out	0x3d, r28	; 61
    364e:	8c 01       	movw	r16, r24
    3650:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3652:	f8 01       	movw	r30, r16
    3654:	11 82       	std	Z+1, r1	; 0x01
    3656:	10 82       	st	Z, r1
	capacity = 0;
    3658:	13 82       	std	Z+3, r1	; 0x03
    365a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    365c:	15 82       	std	Z+5, r1	; 0x05
    365e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3660:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	be 01       	movw	r22, r28
    3666:	6f 5f       	subi	r22, 0xFF	; 255
    3668:	7f 4f       	sbci	r23, 0xFF	; 255
    366a:	50 e0       	ldi	r21, 0x00	; 0
    366c:	0e 94 2c 3b 	call	0x7658	; 0x7658 <utoa>
	*this = buf;
    3670:	c8 01       	movw	r24, r16
    3672:	be 01       	movw	r22, r28
    3674:	6f 5f       	subi	r22, 0xFF	; 255
    3676:	7f 4f       	sbci	r23, 0xFF	; 255
    3678:	0e 94 49 1a 	call	0x3492	; 0x3492 <_ZN6StringaSEPKc>
}
    367c:	29 96       	adiw	r28, 0x09	; 9
    367e:	0f b6       	in	r0, 0x3f	; 63
    3680:	f8 94       	cli
    3682:	de bf       	out	0x3e, r29	; 62
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	cd bf       	out	0x3d, r28	; 61
    3688:	df 91       	pop	r29
    368a:	cf 91       	pop	r28
    368c:	1f 91       	pop	r17
    368e:	0f 91       	pop	r16
    3690:	08 95       	ret

00003692 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29
    3696:	0f 92       	push	r0
    3698:	0f 92       	push	r0
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
    369e:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    36a0:	11 82       	std	Z+1, r1	; 0x01
    36a2:	10 82       	st	Z, r1
	capacity = 0;
    36a4:	13 82       	std	Z+3, r1	; 0x03
    36a6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    36a8:	15 82       	std	Z+5, r1	; 0x05
    36aa:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    36ac:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    36ae:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    36b0:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    36b2:	be 01       	movw	r22, r28
    36b4:	6f 5f       	subi	r22, 0xFF	; 255
    36b6:	7f 4f       	sbci	r23, 0xFF	; 255
    36b8:	0e 94 49 1a 	call	0x3492	; 0x3492 <_ZN6StringaSEPKc>
}
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	df 91       	pop	r29
    36c2:	cf 91       	pop	r28
    36c4:	08 95       	ret

000036c6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    36c6:	ef 92       	push	r14
    36c8:	ff 92       	push	r15
    36ca:	0f 93       	push	r16
    36cc:	1f 93       	push	r17
    36ce:	cf 93       	push	r28
    36d0:	df 93       	push	r29
    36d2:	8c 01       	movw	r16, r24
    36d4:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    36d6:	fc 01       	movw	r30, r24
    36d8:	c4 81       	ldd	r28, Z+4	; 0x04
    36da:	d5 81       	ldd	r29, Z+5	; 0x05
	if (!cstr) return 0;
    36dc:	61 15       	cp	r22, r1
    36de:	71 05       	cpc	r23, r1
    36e0:	c9 f0       	breq	.+50     	; 0x3714 <_ZN6String6concatEPKcj+0x4e>
	if (length == 0) return 1;
    36e2:	41 15       	cp	r20, r1
    36e4:	51 05       	cpc	r21, r1
    36e6:	c1 f0       	breq	.+48     	; 0x3718 <_ZN6String6concatEPKcj+0x52>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    36e8:	c4 0f       	add	r28, r20
    36ea:	d5 1f       	adc	r29, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    36ec:	be 01       	movw	r22, r28
    36ee:	0e 94 bd 19 	call	0x337a	; 0x337a <_ZN6String7reserveEj>
    36f2:	88 23       	and	r24, r24
    36f4:	99 f0       	breq	.+38     	; 0x371c <_ZN6String6concatEPKcj+0x56>
	strcpy(buffer + len, cstr);
    36f6:	f8 01       	movw	r30, r16
    36f8:	80 81       	ld	r24, Z
    36fa:	91 81       	ldd	r25, Z+1	; 0x01
    36fc:	24 81       	ldd	r18, Z+4	; 0x04
    36fe:	35 81       	ldd	r19, Z+5	; 0x05
    3700:	82 0f       	add	r24, r18
    3702:	93 1f       	adc	r25, r19
    3704:	b7 01       	movw	r22, r14
    3706:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <strcpy>
	len = newlen;
    370a:	f8 01       	movw	r30, r16
    370c:	d5 83       	std	Z+5, r29	; 0x05
    370e:	c4 83       	std	Z+4, r28	; 0x04
	return 1;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	05 c0       	rjmp	.+10     	; 0x371e <_ZN6String6concatEPKcj+0x58>
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	03 c0       	rjmp	.+6      	; 0x371e <_ZN6String6concatEPKcj+0x58>
	if (length == 0) return 1;
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	01 c0       	rjmp	.+2      	; 0x371e <_ZN6String6concatEPKcj+0x58>
	if (!reserve(newlen)) return 0;
    371c:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	1f 91       	pop	r17
    3724:	0f 91       	pop	r16
    3726:	ff 90       	pop	r15
    3728:	ef 90       	pop	r14
    372a:	08 95       	ret

0000372c <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    372c:	fb 01       	movw	r30, r22
	return concat(s.buffer, s.len);
    372e:	20 81       	ld	r18, Z
    3730:	31 81       	ldd	r19, Z+1	; 0x01
    3732:	44 81       	ldd	r20, Z+4	; 0x04
    3734:	55 81       	ldd	r21, Z+5	; 0x05
    3736:	b9 01       	movw	r22, r18
    3738:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN6String6concatEPKcj>
}
    373c:	08 95       	ret

0000373e <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    373e:	61 15       	cp	r22, r1
    3740:	71 05       	cpc	r23, r1
    3742:	71 f0       	breq	.+28     	; 0x3760 <_ZN6String6concatEPKc+0x22>
	return concat(cstr, strlen(cstr));
    3744:	e6 2f       	mov	r30, r22
    3746:	f7 2f       	mov	r31, r23
    3748:	df 01       	movw	r26, r30
    374a:	0d 90       	ld	r0, X+
    374c:	00 20       	and	r0, r0
    374e:	e9 f7       	brne	.-6      	; 0x374a <_ZN6String6concatEPKc+0xc>
    3750:	ad 01       	movw	r20, r26
    3752:	41 50       	subi	r20, 0x01	; 1
    3754:	50 40       	sbci	r21, 0x00	; 0
    3756:	4e 1b       	sub	r20, r30
    3758:	5f 0b       	sbc	r21, r31
    375a:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN6String6concatEPKcj>
    375e:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    3760:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
    3762:	08 95       	ret

00003764 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    3764:	cf 93       	push	r28
    3766:	df 93       	push	r29
    3768:	0f 92       	push	r0
    376a:	0f 92       	push	r0
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    3770:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    3772:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    3774:	be 01       	movw	r22, r28
    3776:	6f 5f       	subi	r22, 0xFF	; 255
    3778:	7f 4f       	sbci	r23, 0xFF	; 255
    377a:	41 e0       	ldi	r20, 0x01	; 1
    377c:	50 e0       	ldi	r21, 0x00	; 0
    377e:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN6String6concatEPKcj>
}
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	df 91       	pop	r29
    3788:	cf 91       	pop	r28
    378a:	08 95       	ret

0000378c <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    378c:	ef 92       	push	r14
    378e:	ff 92       	push	r15
    3790:	0f 93       	push	r16
    3792:	1f 93       	push	r17
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    3798:	00 d0       	rcall	.+0      	; 0x379a <_ZN6String6concatEh+0xe>
    379a:	0f 92       	push	r0
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	7c 01       	movw	r14, r24
    37a2:	86 2f       	mov	r24, r22
	char buf[4];
	itoa(num, buf, 10);
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	8e 01       	movw	r16, r28
    37a8:	0f 5f       	subi	r16, 0xFF	; 255
    37aa:	1f 4f       	sbci	r17, 0xFF	; 255
    37ac:	b8 01       	movw	r22, r16
    37ae:	4a e0       	ldi	r20, 0x0A	; 10
    37b0:	50 e0       	ldi	r21, 0x00	; 0
    37b2:	0e 94 9d 3a 	call	0x753a	; 0x753a <itoa>
	return concat(buf, strlen(buf));
    37b6:	f8 01       	movw	r30, r16
    37b8:	01 90       	ld	r0, Z+
    37ba:	00 20       	and	r0, r0
    37bc:	e9 f7       	brne	.-6      	; 0x37b8 <_ZN6String6concatEh+0x2c>
    37be:	af 01       	movw	r20, r30
    37c0:	41 50       	subi	r20, 0x01	; 1
    37c2:	50 40       	sbci	r21, 0x00	; 0
    37c4:	40 1b       	sub	r20, r16
    37c6:	51 0b       	sbc	r21, r17
    37c8:	c7 01       	movw	r24, r14
    37ca:	b8 01       	movw	r22, r16
    37cc:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN6String6concatEPKcj>
}
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	df 91       	pop	r29
    37da:	cf 91       	pop	r28
    37dc:	1f 91       	pop	r17
    37de:	0f 91       	pop	r16
    37e0:	ff 90       	pop	r15
    37e2:	ef 90       	pop	r14
    37e4:	08 95       	ret

000037e6 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    37e6:	ef 92       	push	r14
    37e8:	ff 92       	push	r15
    37ea:	0f 93       	push	r16
    37ec:	1f 93       	push	r17
    37ee:	cf 93       	push	r28
    37f0:	df 93       	push	r29
    37f2:	cd b7       	in	r28, 0x3d	; 61
    37f4:	de b7       	in	r29, 0x3e	; 62
    37f6:	27 97       	sbiw	r28, 0x07	; 7
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	de bf       	out	0x3e, r29	; 62
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	cd bf       	out	0x3d, r28	; 61
    3802:	7c 01       	movw	r14, r24
    3804:	cb 01       	movw	r24, r22
	char buf[7];
	itoa(num, buf, 10);
    3806:	8e 01       	movw	r16, r28
    3808:	0f 5f       	subi	r16, 0xFF	; 255
    380a:	1f 4f       	sbci	r17, 0xFF	; 255
    380c:	b8 01       	movw	r22, r16
    380e:	4a e0       	ldi	r20, 0x0A	; 10
    3810:	50 e0       	ldi	r21, 0x00	; 0
    3812:	0e 94 9d 3a 	call	0x753a	; 0x753a <itoa>
	return concat(buf, strlen(buf));
    3816:	f8 01       	movw	r30, r16
    3818:	01 90       	ld	r0, Z+
    381a:	00 20       	and	r0, r0
    381c:	e9 f7       	brne	.-6      	; 0x3818 <_ZN6String6concatEi+0x32>
    381e:	af 01       	movw	r20, r30
    3820:	41 50       	subi	r20, 0x01	; 1
    3822:	50 40       	sbci	r21, 0x00	; 0
    3824:	40 1b       	sub	r20, r16
    3826:	51 0b       	sbc	r21, r17
    3828:	c7 01       	movw	r24, r14
    382a:	b8 01       	movw	r22, r16
    382c:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN6String6concatEPKcj>
}
    3830:	27 96       	adiw	r28, 0x07	; 7
    3832:	0f b6       	in	r0, 0x3f	; 63
    3834:	f8 94       	cli
    3836:	de bf       	out	0x3e, r29	; 62
    3838:	0f be       	out	0x3f, r0	; 63
    383a:	cd bf       	out	0x3d, r28	; 61
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	1f 91       	pop	r17
    3842:	0f 91       	pop	r16
    3844:	ff 90       	pop	r15
    3846:	ef 90       	pop	r14
    3848:	08 95       	ret

0000384a <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    384a:	ef 92       	push	r14
    384c:	ff 92       	push	r15
    384e:	0f 93       	push	r16
    3850:	1f 93       	push	r17
    3852:	cf 93       	push	r28
    3854:	df 93       	push	r29
    3856:	00 d0       	rcall	.+0      	; 0x3858 <_ZN6String6concatEj+0xe>
    3858:	00 d0       	rcall	.+0      	; 0x385a <_ZN6String6concatEj+0x10>
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
    385e:	7c 01       	movw	r14, r24
    3860:	cb 01       	movw	r24, r22
	char buf[6];
	utoa(num, buf, 10);
    3862:	8e 01       	movw	r16, r28
    3864:	0f 5f       	subi	r16, 0xFF	; 255
    3866:	1f 4f       	sbci	r17, 0xFF	; 255
    3868:	b8 01       	movw	r22, r16
    386a:	4a e0       	ldi	r20, 0x0A	; 10
    386c:	50 e0       	ldi	r21, 0x00	; 0
    386e:	0e 94 2c 3b 	call	0x7658	; 0x7658 <utoa>
	return concat(buf, strlen(buf));
    3872:	f8 01       	movw	r30, r16
    3874:	01 90       	ld	r0, Z+
    3876:	00 20       	and	r0, r0
    3878:	e9 f7       	brne	.-6      	; 0x3874 <_ZN6String6concatEj+0x2a>
    387a:	af 01       	movw	r20, r30
    387c:	41 50       	subi	r20, 0x01	; 1
    387e:	50 40       	sbci	r21, 0x00	; 0
    3880:	40 1b       	sub	r20, r16
    3882:	51 0b       	sbc	r21, r17
    3884:	c7 01       	movw	r24, r14
    3886:	b8 01       	movw	r22, r16
    3888:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN6String6concatEPKcj>
}
    388c:	26 96       	adiw	r28, 0x06	; 6
    388e:	0f b6       	in	r0, 0x3f	; 63
    3890:	f8 94       	cli
    3892:	de bf       	out	0x3e, r29	; 62
    3894:	0f be       	out	0x3f, r0	; 63
    3896:	cd bf       	out	0x3d, r28	; 61
    3898:	df 91       	pop	r29
    389a:	cf 91       	pop	r28
    389c:	1f 91       	pop	r17
    389e:	0f 91       	pop	r16
    38a0:	ff 90       	pop	r15
    38a2:	ef 90       	pop	r14
    38a4:	08 95       	ret

000038a6 <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    38a6:	ef 92       	push	r14
    38a8:	ff 92       	push	r15
    38aa:	0f 93       	push	r16
    38ac:	1f 93       	push	r17
    38ae:	cf 93       	push	r28
    38b0:	df 93       	push	r29
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
    38b6:	2c 97       	sbiw	r28, 0x0c	; 12
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	7c 01       	movw	r14, r24
	char buf[12];
	ltoa(num, buf, 10);
    38c4:	cb 01       	movw	r24, r22
    38c6:	ba 01       	movw	r22, r20
    38c8:	8e 01       	movw	r16, r28
    38ca:	0f 5f       	subi	r16, 0xFF	; 255
    38cc:	1f 4f       	sbci	r17, 0xFF	; 255
    38ce:	a8 01       	movw	r20, r16
    38d0:	2a e0       	ldi	r18, 0x0A	; 10
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	0e 94 be 3a 	call	0x757c	; 0x757c <ltoa>
	return concat(buf, strlen(buf));
    38d8:	f8 01       	movw	r30, r16
    38da:	01 90       	ld	r0, Z+
    38dc:	00 20       	and	r0, r0
    38de:	e9 f7       	brne	.-6      	; 0x38da <_ZN6String6concatEl+0x34>
    38e0:	af 01       	movw	r20, r30
    38e2:	41 50       	subi	r20, 0x01	; 1
    38e4:	50 40       	sbci	r21, 0x00	; 0
    38e6:	40 1b       	sub	r20, r16
    38e8:	51 0b       	sbc	r21, r17
    38ea:	c7 01       	movw	r24, r14
    38ec:	b8 01       	movw	r22, r16
    38ee:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN6String6concatEPKcj>
}
    38f2:	2c 96       	adiw	r28, 0x0c	; 12
    38f4:	0f b6       	in	r0, 0x3f	; 63
    38f6:	f8 94       	cli
    38f8:	de bf       	out	0x3e, r29	; 62
    38fa:	0f be       	out	0x3f, r0	; 63
    38fc:	cd bf       	out	0x3d, r28	; 61
    38fe:	df 91       	pop	r29
    3900:	cf 91       	pop	r28
    3902:	1f 91       	pop	r17
    3904:	0f 91       	pop	r16
    3906:	ff 90       	pop	r15
    3908:	ef 90       	pop	r14
    390a:	08 95       	ret

0000390c <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    390c:	ef 92       	push	r14
    390e:	ff 92       	push	r15
    3910:	0f 93       	push	r16
    3912:	1f 93       	push	r17
    3914:	cf 93       	push	r28
    3916:	df 93       	push	r29
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	2b 97       	sbiw	r28, 0x0b	; 11
    391e:	0f b6       	in	r0, 0x3f	; 63
    3920:	f8 94       	cli
    3922:	de bf       	out	0x3e, r29	; 62
    3924:	0f be       	out	0x3f, r0	; 63
    3926:	cd bf       	out	0x3d, r28	; 61
    3928:	7c 01       	movw	r14, r24
	char buf[11];
	ultoa(num, buf, 10);
    392a:	cb 01       	movw	r24, r22
    392c:	ba 01       	movw	r22, r20
    392e:	8e 01       	movw	r16, r28
    3930:	0f 5f       	subi	r16, 0xFF	; 255
    3932:	1f 4f       	sbci	r17, 0xFF	; 255
    3934:	a8 01       	movw	r20, r16
    3936:	2a e0       	ldi	r18, 0x0A	; 10
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	0e 94 07 3b 	call	0x760e	; 0x760e <ultoa>
	return concat(buf, strlen(buf));
    393e:	f8 01       	movw	r30, r16
    3940:	01 90       	ld	r0, Z+
    3942:	00 20       	and	r0, r0
    3944:	e9 f7       	brne	.-6      	; 0x3940 <_ZN6String6concatEm+0x34>
    3946:	af 01       	movw	r20, r30
    3948:	41 50       	subi	r20, 0x01	; 1
    394a:	50 40       	sbci	r21, 0x00	; 0
    394c:	40 1b       	sub	r20, r16
    394e:	51 0b       	sbc	r21, r17
    3950:	c7 01       	movw	r24, r14
    3952:	b8 01       	movw	r22, r16
    3954:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN6String6concatEPKcj>
}
    3958:	2b 96       	adiw	r28, 0x0b	; 11
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	df 91       	pop	r29
    3966:	cf 91       	pop	r28
    3968:	1f 91       	pop	r17
    396a:	0f 91       	pop	r16
    396c:	ff 90       	pop	r15
    396e:	ef 90       	pop	r14
    3970:	08 95       	ret

00003972 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    3972:	cf 93       	push	r28
    3974:	df 93       	push	r29
    3976:	c8 2f       	mov	r28, r24
    3978:	d9 2f       	mov	r29, r25
    397a:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    397c:	20 81       	ld	r18, Z
    397e:	31 81       	ldd	r19, Z+1	; 0x01
    3980:	44 81       	ldd	r20, Z+4	; 0x04
    3982:	55 81       	ldd	r21, Z+5	; 0x05
    3984:	b9 01       	movw	r22, r18
    3986:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN6String6concatEPKcj>
    398a:	88 23       	and	r24, r24
    398c:	21 f4       	brne	.+8      	; 0x3996 <_ZplRK15StringSumHelperRK6String+0x24>
    398e:	8c 2f       	mov	r24, r28
    3990:	9d 2f       	mov	r25, r29
    3992:	0e 94 8e 19 	call	0x331c	; 0x331c <_ZN6String10invalidateEv>
	return a;
}
    3996:	8c 2f       	mov	r24, r28
    3998:	9d 2f       	mov	r25, r29
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	08 95       	ret

000039a0 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    39a0:	cf 93       	push	r28
    39a2:	df 93       	push	r29
    39a4:	c8 2f       	mov	r28, r24
    39a6:	d9 2f       	mov	r29, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    39a8:	61 15       	cp	r22, r1
    39aa:	71 05       	cpc	r23, r1
    39ac:	79 f0       	breq	.+30     	; 0x39cc <_ZplRK15StringSumHelperPKc+0x2c>
    39ae:	e6 2f       	mov	r30, r22
    39b0:	f7 2f       	mov	r31, r23
    39b2:	df 01       	movw	r26, r30
    39b4:	0d 90       	ld	r0, X+
    39b6:	00 20       	and	r0, r0
    39b8:	e9 f7       	brne	.-6      	; 0x39b4 <_ZplRK15StringSumHelperPKc+0x14>
    39ba:	ad 01       	movw	r20, r26
    39bc:	41 50       	subi	r20, 0x01	; 1
    39be:	50 40       	sbci	r21, 0x00	; 0
    39c0:	4e 1b       	sub	r20, r30
    39c2:	5f 0b       	sbc	r21, r31
    39c4:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <_ZN6String6concatEPKcj>
    39c8:	88 23       	and	r24, r24
    39ca:	21 f4       	brne	.+8      	; 0x39d4 <_ZplRK15StringSumHelperPKc+0x34>
    39cc:	8c 2f       	mov	r24, r28
    39ce:	9d 2f       	mov	r25, r29
    39d0:	0e 94 8e 19 	call	0x331c	; 0x331c <_ZN6String10invalidateEv>
	return a;
}
    39d4:	8c 2f       	mov	r24, r28
    39d6:	9d 2f       	mov	r25, r29
    39d8:	df 91       	pop	r29
    39da:	cf 91       	pop	r28
    39dc:	08 95       	ret

000039de <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    39de:	cf 93       	push	r28
    39e0:	df 93       	push	r29
    39e2:	d8 2f       	mov	r29, r24
    39e4:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    39e6:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN6String6concatEc>
    39ea:	88 23       	and	r24, r24
    39ec:	21 f4       	brne	.+8      	; 0x39f6 <_ZplRK15StringSumHelperc+0x18>
    39ee:	8d 2f       	mov	r24, r29
    39f0:	9c 2f       	mov	r25, r28
    39f2:	0e 94 8e 19 	call	0x331c	; 0x331c <_ZN6String10invalidateEv>
	return a;
}
    39f6:	8d 2f       	mov	r24, r29
    39f8:	9c 2f       	mov	r25, r28
    39fa:	df 91       	pop	r29
    39fc:	cf 91       	pop	r28
    39fe:	08 95       	ret

00003a00 <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    3a00:	cf 93       	push	r28
    3a02:	df 93       	push	r29
    3a04:	d8 2f       	mov	r29, r24
    3a06:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3a08:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6String6concatEh>
    3a0c:	88 23       	and	r24, r24
    3a0e:	21 f4       	brne	.+8      	; 0x3a18 <_ZplRK15StringSumHelperh+0x18>
    3a10:	8d 2f       	mov	r24, r29
    3a12:	9c 2f       	mov	r25, r28
    3a14:	0e 94 8e 19 	call	0x331c	; 0x331c <_ZN6String10invalidateEv>
	return a;
}
    3a18:	8d 2f       	mov	r24, r29
    3a1a:	9c 2f       	mov	r25, r28
    3a1c:	df 91       	pop	r29
    3a1e:	cf 91       	pop	r28
    3a20:	08 95       	ret

00003a22 <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	d8 2f       	mov	r29, r24
    3a28:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3a2a:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <_ZN6String6concatEi>
    3a2e:	88 23       	and	r24, r24
    3a30:	21 f4       	brne	.+8      	; 0x3a3a <_ZplRK15StringSumHelperi+0x18>
    3a32:	8d 2f       	mov	r24, r29
    3a34:	9c 2f       	mov	r25, r28
    3a36:	0e 94 8e 19 	call	0x331c	; 0x331c <_ZN6String10invalidateEv>
	return a;
}
    3a3a:	8d 2f       	mov	r24, r29
    3a3c:	9c 2f       	mov	r25, r28
    3a3e:	df 91       	pop	r29
    3a40:	cf 91       	pop	r28
    3a42:	08 95       	ret

00003a44 <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    3a44:	cf 93       	push	r28
    3a46:	df 93       	push	r29
    3a48:	d8 2f       	mov	r29, r24
    3a4a:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3a4c:	0e 94 25 1c 	call	0x384a	; 0x384a <_ZN6String6concatEj>
    3a50:	88 23       	and	r24, r24
    3a52:	21 f4       	brne	.+8      	; 0x3a5c <_ZplRK15StringSumHelperj+0x18>
    3a54:	8d 2f       	mov	r24, r29
    3a56:	9c 2f       	mov	r25, r28
    3a58:	0e 94 8e 19 	call	0x331c	; 0x331c <_ZN6String10invalidateEv>
	return a;
}
    3a5c:	8d 2f       	mov	r24, r29
    3a5e:	9c 2f       	mov	r25, r28
    3a60:	df 91       	pop	r29
    3a62:	cf 91       	pop	r28
    3a64:	08 95       	ret

00003a66 <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    3a66:	cf 93       	push	r28
    3a68:	df 93       	push	r29
    3a6a:	d8 2f       	mov	r29, r24
    3a6c:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3a6e:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <_ZN6String6concatEl>
    3a72:	88 23       	and	r24, r24
    3a74:	21 f4       	brne	.+8      	; 0x3a7e <_ZplRK15StringSumHelperl+0x18>
    3a76:	8d 2f       	mov	r24, r29
    3a78:	9c 2f       	mov	r25, r28
    3a7a:	0e 94 8e 19 	call	0x331c	; 0x331c <_ZN6String10invalidateEv>
	return a;
}
    3a7e:	8d 2f       	mov	r24, r29
    3a80:	9c 2f       	mov	r25, r28
    3a82:	df 91       	pop	r29
    3a84:	cf 91       	pop	r28
    3a86:	08 95       	ret

00003a88 <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29
    3a8c:	d8 2f       	mov	r29, r24
    3a8e:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3a90:	0e 94 86 1c 	call	0x390c	; 0x390c <_ZN6String6concatEm>
    3a94:	88 23       	and	r24, r24
    3a96:	21 f4       	brne	.+8      	; 0x3aa0 <_ZplRK15StringSumHelperm+0x18>
    3a98:	8d 2f       	mov	r24, r29
    3a9a:	9c 2f       	mov	r25, r28
    3a9c:	0e 94 8e 19 	call	0x331c	; 0x331c <_ZN6String10invalidateEv>
	return a;
}
    3aa0:	8d 2f       	mov	r24, r29
    3aa2:	9c 2f       	mov	r25, r28
    3aa4:	df 91       	pop	r29
    3aa6:	cf 91       	pop	r28
    3aa8:	08 95       	ret

00003aaa <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    3aaa:	dc 01       	movw	r26, r24
    3aac:	fb 01       	movw	r30, r22
	if (!buffer || !s.buffer) {
    3aae:	8d 91       	ld	r24, X+
    3ab0:	9c 91       	ld	r25, X
    3ab2:	11 97       	sbiw	r26, 0x01	; 1
    3ab4:	00 97       	sbiw	r24, 0x00	; 0
    3ab6:	31 f0       	breq	.+12     	; 0x3ac4 <_ZNK6String9compareToERKS_+0x1a>
    3ab8:	60 81       	ld	r22, Z
    3aba:	71 81       	ldd	r23, Z+1	; 0x01
    3abc:	61 15       	cp	r22, r1
    3abe:	71 05       	cpc	r23, r1
    3ac0:	d1 f4       	brne	.+52     	; 0x3af6 <_ZNK6String9compareToERKS_+0x4c>
    3ac2:	0e c0       	rjmp	.+28     	; 0x3ae0 <_ZNK6String9compareToERKS_+0x36>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    3ac4:	a0 81       	ld	r26, Z
    3ac6:	b1 81       	ldd	r27, Z+1	; 0x01
    3ac8:	10 97       	sbiw	r26, 0x00	; 0
    3aca:	d1 f0       	breq	.+52     	; 0x3b00 <_ZNK6String9compareToERKS_+0x56>
    3acc:	84 81       	ldd	r24, Z+4	; 0x04
    3ace:	95 81       	ldd	r25, Z+5	; 0x05
    3ad0:	00 97       	sbiw	r24, 0x00	; 0
    3ad2:	c9 f0       	breq	.+50     	; 0x3b06 <_ZNK6String9compareToERKS_+0x5c>
    3ad4:	2c 91       	ld	r18, X
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	30 95       	com	r19
    3ada:	21 95       	neg	r18
    3adc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ade:	18 c0       	rjmp	.+48     	; 0x3b10 <_ZNK6String9compareToERKS_+0x66>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    3ae0:	14 96       	adiw	r26, 0x04	; 4
    3ae2:	2d 91       	ld	r18, X+
    3ae4:	3c 91       	ld	r19, X
    3ae6:	15 97       	sbiw	r26, 0x05	; 5
    3ae8:	21 15       	cp	r18, r1
    3aea:	31 05       	cpc	r19, r1
    3aec:	79 f0       	breq	.+30     	; 0x3b0c <_ZNK6String9compareToERKS_+0x62>
    3aee:	fc 01       	movw	r30, r24
    3af0:	20 81       	ld	r18, Z
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	0d c0       	rjmp	.+26     	; 0x3b10 <_ZNK6String9compareToERKS_+0x66>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    3af6:	0e 94 4b 3a 	call	0x7496	; 0x7496 <strcmp>
    3afa:	28 2f       	mov	r18, r24
    3afc:	39 2f       	mov	r19, r25
    3afe:	08 c0       	rjmp	.+16     	; 0x3b10 <_ZNK6String9compareToERKS_+0x66>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	05 c0       	rjmp	.+10     	; 0x3b10 <_ZNK6String9compareToERKS_+0x66>
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	02 c0       	rjmp	.+4      	; 0x3b10 <_ZNK6String9compareToERKS_+0x66>
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    3b10:	82 2f       	mov	r24, r18
    3b12:	93 2f       	mov	r25, r19
    3b14:	08 95       	ret

00003b16 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    3b16:	fc 01       	movw	r30, r24
    3b18:	24 81       	ldd	r18, Z+4	; 0x04
    3b1a:	35 81       	ldd	r19, Z+5	; 0x05
    3b1c:	fb 01       	movw	r30, r22
    3b1e:	44 81       	ldd	r20, Z+4	; 0x04
    3b20:	55 81       	ldd	r21, Z+5	; 0x05
    3b22:	24 17       	cp	r18, r20
    3b24:	35 07       	cpc	r19, r21
    3b26:	39 f4       	brne	.+14     	; 0x3b36 <_ZNK6String6equalsERKS_+0x20>
    3b28:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <_ZNK6String9compareToERKS_>
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    3b2c:	21 e0       	ldi	r18, 0x01	; 1
    3b2e:	00 97       	sbiw	r24, 0x00	; 0
    3b30:	19 f0       	breq	.+6      	; 0x3b38 <_ZNK6String6equalsERKS_+0x22>
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	01 c0       	rjmp	.+2      	; 0x3b38 <_ZNK6String6equalsERKS_+0x22>
{
	return (len == s2.len && compareTo(s2) == 0);
    3b36:	20 e0       	ldi	r18, 0x00	; 0
}
    3b38:	82 2f       	mov	r24, r18
    3b3a:	08 95       	ret

00003b3c <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    3b3c:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3b3e:	84 81       	ldd	r24, Z+4	; 0x04
    3b40:	95 81       	ldd	r25, Z+5	; 0x05
    3b42:	00 97       	sbiw	r24, 0x00	; 0
    3b44:	61 f4       	brne	.+24     	; 0x3b5e <_ZNK6String6equalsEPKc+0x22>
    3b46:	61 15       	cp	r22, r1
    3b48:	71 05       	cpc	r23, r1
    3b4a:	39 f0       	breq	.+14     	; 0x3b5a <_ZNK6String6equalsEPKc+0x1e>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	fb 01       	movw	r30, r22
    3b50:	90 81       	ld	r25, Z
    3b52:	99 23       	and	r25, r25
    3b54:	d9 f0       	breq	.+54     	; 0x3b8c <_ZNK6String6equalsEPKc+0x50>
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	08 95       	ret
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	08 95       	ret
	if (cstr == NULL) return buffer[0] == 0;
    3b5e:	61 15       	cp	r22, r1
    3b60:	71 05       	cpc	r23, r1
    3b62:	49 f4       	brne	.+18     	; 0x3b76 <_ZNK6String6equalsEPKc+0x3a>
    3b64:	01 90       	ld	r0, Z+
    3b66:	f0 81       	ld	r31, Z
    3b68:	e0 2d       	mov	r30, r0
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	90 81       	ld	r25, Z
    3b6e:	99 23       	and	r25, r25
    3b70:	69 f0       	breq	.+26     	; 0x3b8c <_ZNK6String6equalsEPKc+0x50>
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    3b76:	80 81       	ld	r24, Z
    3b78:	91 81       	ldd	r25, Z+1	; 0x01
    3b7a:	0e 94 4b 3a 	call	0x7496	; 0x7496 <strcmp>
    3b7e:	28 2f       	mov	r18, r24
    3b80:	39 2f       	mov	r19, r25
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	21 15       	cp	r18, r1
    3b86:	31 05       	cpc	r19, r1
    3b88:	09 f0       	breq	.+2      	; 0x3b8c <_ZNK6String6equalsEPKc+0x50>
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
}
    3b8c:	08 95       	ret

00003b8e <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    3b8e:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <_ZNK6String9compareToERKS_>
}
    3b92:	89 2f       	mov	r24, r25
    3b94:	88 1f       	adc	r24, r24
    3b96:	88 27       	eor	r24, r24
    3b98:	88 1f       	adc	r24, r24
    3b9a:	08 95       	ret

00003b9c <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    3b9c:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <_ZNK6String9compareToERKS_>
    3ba0:	21 e0       	ldi	r18, 0x01	; 1
    3ba2:	18 16       	cp	r1, r24
    3ba4:	19 06       	cpc	r1, r25
    3ba6:	0c f0       	brlt	.+2      	; 0x3baa <_ZNK6StringgtERKS_+0xe>
    3ba8:	20 e0       	ldi	r18, 0x00	; 0
}
    3baa:	82 2f       	mov	r24, r18
    3bac:	08 95       	ret

00003bae <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    3bae:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <_ZNK6String9compareToERKS_>
    3bb2:	21 e0       	ldi	r18, 0x01	; 1
    3bb4:	18 16       	cp	r1, r24
    3bb6:	19 06       	cpc	r1, r25
    3bb8:	0c f4       	brge	.+2      	; 0x3bbc <_ZNK6StringleERKS_+0xe>
    3bba:	20 e0       	ldi	r18, 0x00	; 0
}
    3bbc:	82 2f       	mov	r24, r18
    3bbe:	08 95       	ret

00003bc0 <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    3bc0:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <_ZNK6String9compareToERKS_>
    3bc4:	89 2f       	mov	r24, r25
    3bc6:	80 95       	com	r24
}
    3bc8:	88 1f       	adc	r24, r24
    3bca:	88 27       	eor	r24, r24
    3bcc:	88 1f       	adc	r24, r24
    3bce:	08 95       	ret

00003bd0 <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    3bd0:	ef 92       	push	r14
    3bd2:	ff 92       	push	r15
    3bd4:	0f 93       	push	r16
    3bd6:	1f 93       	push	r17
    3bd8:	cf 93       	push	r28
    3bda:	df 93       	push	r29
    3bdc:	dc 01       	movw	r26, r24
    3bde:	fb 01       	movw	r30, r22
	if (this == &s2) return 1;
    3be0:	86 17       	cp	r24, r22
    3be2:	97 07       	cpc	r25, r23
    3be4:	29 f1       	breq	.+74     	; 0x3c30 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	if (len != s2.len) return 0;
    3be6:	14 96       	adiw	r26, 0x04	; 4
    3be8:	8d 91       	ld	r24, X+
    3bea:	9c 91       	ld	r25, X
    3bec:	15 97       	sbiw	r26, 0x05	; 5
    3bee:	24 81       	ldd	r18, Z+4	; 0x04
    3bf0:	35 81       	ldd	r19, Z+5	; 0x05
    3bf2:	82 17       	cp	r24, r18
    3bf4:	93 07       	cpc	r25, r19
    3bf6:	f1 f4       	brne	.+60     	; 0x3c34 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len == 0) return 1;
    3bf8:	00 97       	sbiw	r24, 0x00	; 0
    3bfa:	f1 f0       	breq	.+60     	; 0x3c38 <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
    3bfc:	e0 80       	ld	r14, Z
    3bfe:	f1 80       	ldd	r15, Z+1	; 0x01
    3c00:	0d 91       	ld	r16, X+
    3c02:	1c 91       	ld	r17, X
    3c04:	11 97       	sbiw	r26, 0x01	; 1
	while (*p1) {
    3c06:	0d c0       	rjmp	.+26     	; 0x3c22 <_ZNK6String16equalsIgnoreCaseERKS_+0x52>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	0e 94 08 3a 	call	0x7410	; 0x7410 <tolower>
    3c0e:	ec 01       	movw	r28, r24
    3c10:	f7 01       	movw	r30, r14
    3c12:	81 91       	ld	r24, Z+
    3c14:	7f 01       	movw	r14, r30
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	0e 94 08 3a 	call	0x7410	; 0x7410 <tolower>
    3c1c:	c8 17       	cp	r28, r24
    3c1e:	d9 07       	cpc	r29, r25
    3c20:	69 f4       	brne	.+26     	; 0x3c3c <_ZNK6String16equalsIgnoreCaseERKS_+0x6c>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    3c22:	f8 01       	movw	r30, r16
    3c24:	81 91       	ld	r24, Z+
    3c26:	8f 01       	movw	r16, r30
    3c28:	88 23       	and	r24, r24
    3c2a:	71 f7       	brne	.-36     	; 0x3c08 <_ZNK6String16equalsIgnoreCaseERKS_+0x38>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	07 c0       	rjmp	.+14     	; 0x3c3e <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	05 c0       	rjmp	.+10     	; 0x3c3e <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	if (len != s2.len) return 0;
    3c34:	80 e0       	ldi	r24, 0x00	; 0
    3c36:	03 c0       	rjmp	.+6      	; 0x3c3e <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	if (len == 0) return 1;
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	01 c0       	rjmp	.+2      	; 0x3c3e <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return 1;
}
    3c3e:	df 91       	pop	r29
    3c40:	cf 91       	pop	r28
    3c42:	1f 91       	pop	r17
    3c44:	0f 91       	pop	r16
    3c46:	ff 90       	pop	r15
    3c48:	ef 90       	pop	r14
    3c4a:	08 95       	ret

00003c4c <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    3c4c:	fc 01       	movw	r30, r24
    3c4e:	db 01       	movw	r26, r22
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    3c50:	14 96       	adiw	r26, 0x04	; 4
    3c52:	2d 91       	ld	r18, X+
    3c54:	3c 91       	ld	r19, X
    3c56:	15 97       	sbiw	r26, 0x05	; 5
    3c58:	84 81       	ldd	r24, Z+4	; 0x04
    3c5a:	95 81       	ldd	r25, Z+5	; 0x05
    3c5c:	82 1b       	sub	r24, r18
    3c5e:	93 0b       	sbc	r25, r19
    3c60:	84 17       	cp	r24, r20
    3c62:	95 07       	cpc	r25, r21
    3c64:	b8 f0       	brcs	.+46     	; 0x3c94 <_ZNK6String10startsWithERKS_j+0x48>
    3c66:	80 81       	ld	r24, Z
    3c68:	91 81       	ldd	r25, Z+1	; 0x01
    3c6a:	00 97       	sbiw	r24, 0x00	; 0
    3c6c:	a9 f0       	breq	.+42     	; 0x3c98 <_ZNK6String10startsWithERKS_j+0x4c>
    3c6e:	6d 91       	ld	r22, X+
    3c70:	7c 91       	ld	r23, X
    3c72:	11 97       	sbiw	r26, 0x01	; 1
    3c74:	61 15       	cp	r22, r1
    3c76:	71 05       	cpc	r23, r1
    3c78:	89 f0       	breq	.+34     	; 0x3c9c <_ZNK6String10startsWithERKS_j+0x50>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    3c7a:	84 0f       	add	r24, r20
    3c7c:	95 1f       	adc	r25, r21
    3c7e:	a9 01       	movw	r20, r18
    3c80:	0e 94 5b 3a 	call	0x74b6	; 0x74b6 <strncmp>
    3c84:	28 2f       	mov	r18, r24
    3c86:	39 2f       	mov	r19, r25
    3c88:	81 e0       	ldi	r24, 0x01	; 1
    3c8a:	21 15       	cp	r18, r1
    3c8c:	31 05       	cpc	r19, r1
    3c8e:	39 f0       	breq	.+14     	; 0x3c9e <_ZNK6String10startsWithERKS_j+0x52>
    3c90:	80 e0       	ldi	r24, 0x00	; 0
    3c92:	08 95       	ret
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    3c94:	80 e0       	ldi	r24, 0x00	; 0
    3c96:	08 95       	ret
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	08 95       	ret
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    3c9e:	08 95       	ret

00003ca0 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	24 81       	ldd	r18, Z+4	; 0x04
    3ca4:	35 81       	ldd	r19, Z+5	; 0x05
    3ca6:	fb 01       	movw	r30, r22
    3ca8:	44 81       	ldd	r20, Z+4	; 0x04
    3caa:	55 81       	ldd	r21, Z+5	; 0x05
    3cac:	24 17       	cp	r18, r20
    3cae:	35 07       	cpc	r19, r21
    3cb0:	28 f0       	brcs	.+10     	; 0x3cbc <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    3cb2:	40 e0       	ldi	r20, 0x00	; 0
    3cb4:	50 e0       	ldi	r21, 0x00	; 0
    3cb6:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <_ZNK6String10startsWithERKS_j>
    3cba:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    3cbe:	08 95       	ret

00003cc0 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	db 01       	movw	r26, r22
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    3cc4:	84 81       	ldd	r24, Z+4	; 0x04
    3cc6:	95 81       	ldd	r25, Z+5	; 0x05
    3cc8:	14 96       	adiw	r26, 0x04	; 4
    3cca:	2d 91       	ld	r18, X+
    3ccc:	3c 91       	ld	r19, X
    3cce:	15 97       	sbiw	r26, 0x05	; 5
    3cd0:	82 17       	cp	r24, r18
    3cd2:	93 07       	cpc	r25, r19
    3cd4:	c8 f0       	brcs	.+50     	; 0x3d08 <_ZNK6String8endsWithERKS_+0x48>
    3cd6:	40 81       	ld	r20, Z
    3cd8:	51 81       	ldd	r21, Z+1	; 0x01
    3cda:	41 15       	cp	r20, r1
    3cdc:	51 05       	cpc	r21, r1
    3cde:	b1 f0       	breq	.+44     	; 0x3d0c <_ZNK6String8endsWithERKS_+0x4c>
    3ce0:	6d 91       	ld	r22, X+
    3ce2:	7c 91       	ld	r23, X
    3ce4:	11 97       	sbiw	r26, 0x01	; 1
    3ce6:	61 15       	cp	r22, r1
    3ce8:	71 05       	cpc	r23, r1
    3cea:	91 f0       	breq	.+36     	; 0x3d10 <_ZNK6String8endsWithERKS_+0x50>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    3cec:	82 1b       	sub	r24, r18
    3cee:	93 0b       	sbc	r25, r19
    3cf0:	84 0f       	add	r24, r20
    3cf2:	95 1f       	adc	r25, r21
    3cf4:	0e 94 4b 3a 	call	0x7496	; 0x7496 <strcmp>
    3cf8:	28 2f       	mov	r18, r24
    3cfa:	39 2f       	mov	r19, r25
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	21 15       	cp	r18, r1
    3d00:	31 05       	cpc	r19, r1
    3d02:	39 f0       	breq	.+14     	; 0x3d12 <_ZNK6String8endsWithERKS_+0x52>
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	08 95       	ret
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	08 95       	ret
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	08 95       	ret
    3d10:	80 e0       	ldi	r24, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    3d12:	08 95       	ret

00003d14 <_ZN6String9setCharAtEjc>:
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
    3d14:	fc 01       	movw	r30, r24
	if (loc < len) buffer[loc] = c;
    3d16:	84 81       	ldd	r24, Z+4	; 0x04
    3d18:	95 81       	ldd	r25, Z+5	; 0x05
    3d1a:	68 17       	cp	r22, r24
    3d1c:	79 07       	cpc	r23, r25
    3d1e:	30 f4       	brcc	.+12     	; 0x3d2c <_ZN6String9setCharAtEjc+0x18>
    3d20:	80 81       	ld	r24, Z
    3d22:	91 81       	ldd	r25, Z+1	; 0x01
    3d24:	68 0f       	add	r22, r24
    3d26:	79 1f       	adc	r23, r25
    3d28:	fb 01       	movw	r30, r22
    3d2a:	40 83       	st	Z, r20
    3d2c:	08 95       	ret

00003d2e <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    3d2e:	fc 01       	movw	r30, r24
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    3d30:	84 81       	ldd	r24, Z+4	; 0x04
    3d32:	95 81       	ldd	r25, Z+5	; 0x05
    3d34:	68 17       	cp	r22, r24
    3d36:	79 07       	cpc	r23, r25
    3d38:	20 f4       	brcc	.+8      	; 0x3d42 <_ZN6StringixEj+0x14>
    3d3a:	80 81       	ld	r24, Z
    3d3c:	91 81       	ldd	r25, Z+1	; 0x01
    3d3e:	00 97       	sbiw	r24, 0x00	; 0
    3d40:	29 f4       	brne	.+10     	; 0x3d4c <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    3d42:	10 92 d4 07 	sts	0x07D4, r1
		return dummy_writable_char;
    3d46:	84 ed       	ldi	r24, 0xD4	; 212
    3d48:	97 e0       	ldi	r25, 0x07	; 7
    3d4a:	08 95       	ret
	}
	return buffer[index];
    3d4c:	86 0f       	add	r24, r22
    3d4e:	97 1f       	adc	r25, r23
}
    3d50:	08 95       	ret

00003d52 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    3d52:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    3d54:	84 81       	ldd	r24, Z+4	; 0x04
    3d56:	95 81       	ldd	r25, Z+5	; 0x05
    3d58:	68 17       	cp	r22, r24
    3d5a:	79 07       	cpc	r23, r25
    3d5c:	48 f4       	brcc	.+18     	; 0x3d70 <_ZNK6StringixEj+0x1e>
    3d5e:	80 81       	ld	r24, Z
    3d60:	91 81       	ldd	r25, Z+1	; 0x01
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	39 f0       	breq	.+14     	; 0x3d74 <_ZNK6StringixEj+0x22>
	return buffer[index];
    3d66:	68 0f       	add	r22, r24
    3d68:	79 1f       	adc	r23, r25
    3d6a:	fb 01       	movw	r30, r22
    3d6c:	80 81       	ld	r24, Z
    3d6e:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	08 95       	ret
    3d74:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    3d76:	08 95       	ret

00003d78 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    3d78:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <_ZNK6StringixEj>
}
    3d7c:	08 95       	ret

00003d7e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    3d7e:	0f 93       	push	r16
    3d80:	1f 93       	push	r17
    3d82:	cf 93       	push	r28
    3d84:	df 93       	push	r29
    3d86:	fc 01       	movw	r30, r24
    3d88:	eb 01       	movw	r28, r22
	if (!bufsize || !buf) return;
    3d8a:	41 15       	cp	r20, r1
    3d8c:	51 05       	cpc	r21, r1
    3d8e:	e9 f0       	breq	.+58     	; 0x3dca <_ZNK6String8getBytesEPhjj+0x4c>
    3d90:	20 97       	sbiw	r28, 0x00	; 0
    3d92:	d9 f0       	breq	.+54     	; 0x3dca <_ZNK6String8getBytesEPhjj+0x4c>
	if (index >= len) {
    3d94:	84 81       	ldd	r24, Z+4	; 0x04
    3d96:	95 81       	ldd	r25, Z+5	; 0x05
    3d98:	28 17       	cp	r18, r24
    3d9a:	39 07       	cpc	r19, r25
    3d9c:	10 f0       	brcs	.+4      	; 0x3da2 <_ZNK6String8getBytesEPhjj+0x24>
		buf[0] = 0;
    3d9e:	18 82       	st	Y, r1
		return;
    3da0:	14 c0       	rjmp	.+40     	; 0x3dca <_ZNK6String8getBytesEPhjj+0x4c>
	}
	unsigned int n = bufsize - 1;
    3da2:	41 50       	subi	r20, 0x01	; 1
    3da4:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    3da6:	8c 01       	movw	r16, r24
    3da8:	02 1b       	sub	r16, r18
    3daa:	13 0b       	sbc	r17, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    3dac:	40 17       	cp	r20, r16
    3dae:	51 07       	cpc	r21, r17
    3db0:	08 f4       	brcc	.+2      	; 0x3db4 <_ZNK6String8getBytesEPhjj+0x36>
    3db2:	8a 01       	movw	r16, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    3db4:	60 81       	ld	r22, Z
    3db6:	71 81       	ldd	r23, Z+1	; 0x01
    3db8:	62 0f       	add	r22, r18
    3dba:	73 1f       	adc	r23, r19
    3dbc:	ce 01       	movw	r24, r28
    3dbe:	a8 01       	movw	r20, r16
    3dc0:	0e 94 69 3a 	call	0x74d2	; 0x74d2 <strncpy>
	buf[n] = 0;
    3dc4:	c0 0f       	add	r28, r16
    3dc6:	d1 1f       	adc	r29, r17
    3dc8:	18 82       	st	Y, r1
}
    3dca:	df 91       	pop	r29
    3dcc:	cf 91       	pop	r28
    3dce:	1f 91       	pop	r17
    3dd0:	0f 91       	pop	r16
    3dd2:	08 95       	ret

00003dd4 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    3dd4:	cf 93       	push	r28
    3dd6:	df 93       	push	r29
    3dd8:	fc 01       	movw	r30, r24
	if (fromIndex >= len) return -1;
    3dda:	84 81       	ldd	r24, Z+4	; 0x04
    3ddc:	95 81       	ldd	r25, Z+5	; 0x05
    3dde:	48 17       	cp	r20, r24
    3de0:	59 07       	cpc	r21, r25
    3de2:	68 f4       	brcc	.+26     	; 0x3dfe <_ZNK6String7indexOfEcj+0x2a>
	const char* temp = strchr(buffer + fromIndex, ch);
    3de4:	c0 81       	ld	r28, Z
    3de6:	d1 81       	ldd	r29, Z+1	; 0x01
    3de8:	ce 01       	movw	r24, r28
    3dea:	84 0f       	add	r24, r20
    3dec:	95 1f       	adc	r25, r21
    3dee:	70 e0       	ldi	r23, 0x00	; 0
    3df0:	0e 94 40 3a 	call	0x7480	; 0x7480 <strchr>
	if (temp == NULL) return -1;
    3df4:	00 97       	sbiw	r24, 0x00	; 0
    3df6:	31 f0       	breq	.+12     	; 0x3e04 <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
    3df8:	8c 1b       	sub	r24, r28
    3dfa:	9d 0b       	sbc	r25, r29
    3dfc:	05 c0       	rjmp	.+10     	; 0x3e08 <_ZNK6String7indexOfEcj+0x34>
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
    3dfe:	8f ef       	ldi	r24, 0xFF	; 255
    3e00:	9f ef       	ldi	r25, 0xFF	; 255
    3e02:	02 c0       	rjmp	.+4      	; 0x3e08 <_ZNK6String7indexOfEcj+0x34>
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
    3e04:	8f ef       	ldi	r24, 0xFF	; 255
    3e06:	9f ef       	ldi	r25, 0xFF	; 255
	return temp - buffer;
}
    3e08:	df 91       	pop	r29
    3e0a:	cf 91       	pop	r28
    3e0c:	08 95       	ret

00003e0e <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    3e0e:	40 e0       	ldi	r20, 0x00	; 0
    3e10:	50 e0       	ldi	r21, 0x00	; 0
    3e12:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <_ZNK6String7indexOfEcj>
}
    3e16:	08 95       	ret

00003e18 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    3e18:	cf 93       	push	r28
    3e1a:	df 93       	push	r29
    3e1c:	fc 01       	movw	r30, r24
	if (fromIndex >= len) return -1;
    3e1e:	84 81       	ldd	r24, Z+4	; 0x04
    3e20:	95 81       	ldd	r25, Z+5	; 0x05
    3e22:	48 17       	cp	r20, r24
    3e24:	59 07       	cpc	r21, r25
    3e26:	78 f4       	brcc	.+30     	; 0x3e46 <_ZNK6String7indexOfERKS_j+0x2e>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    3e28:	c0 81       	ld	r28, Z
    3e2a:	d1 81       	ldd	r29, Z+1	; 0x01
    3e2c:	fb 01       	movw	r30, r22
    3e2e:	60 81       	ld	r22, Z
    3e30:	71 81       	ldd	r23, Z+1	; 0x01
    3e32:	ce 01       	movw	r24, r28
    3e34:	84 0f       	add	r24, r20
    3e36:	95 1f       	adc	r25, r21
    3e38:	0e 94 83 3a 	call	0x7506	; 0x7506 <strstr>
	if (found == NULL) return -1;
    3e3c:	00 97       	sbiw	r24, 0x00	; 0
    3e3e:	31 f0       	breq	.+12     	; 0x3e4c <_ZNK6String7indexOfERKS_j+0x34>
	return found - buffer;
    3e40:	8c 1b       	sub	r24, r28
    3e42:	9d 0b       	sbc	r25, r29
    3e44:	05 c0       	rjmp	.+10     	; 0x3e50 <_ZNK6String7indexOfERKS_j+0x38>
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    3e46:	8f ef       	ldi	r24, 0xFF	; 255
    3e48:	9f ef       	ldi	r25, 0xFF	; 255
    3e4a:	02 c0       	rjmp	.+4      	; 0x3e50 <_ZNK6String7indexOfERKS_j+0x38>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    3e4c:	8f ef       	ldi	r24, 0xFF	; 255
    3e4e:	9f ef       	ldi	r25, 0xFF	; 255
	return found - buffer;
}
    3e50:	df 91       	pop	r29
    3e52:	cf 91       	pop	r28
    3e54:	08 95       	ret

00003e56 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    3e56:	40 e0       	ldi	r20, 0x00	; 0
    3e58:	50 e0       	ldi	r21, 0x00	; 0
    3e5a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <_ZNK6String7indexOfERKS_j>
}
    3e5e:	08 95       	ret

00003e60 <_ZNK6String11lastIndexOfEcj>:
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    3e60:	df 92       	push	r13
    3e62:	ef 92       	push	r14
    3e64:	ff 92       	push	r15
    3e66:	0f 93       	push	r16
    3e68:	1f 93       	push	r17
    3e6a:	cf 93       	push	r28
    3e6c:	df 93       	push	r29
    3e6e:	8c 01       	movw	r16, r24
	if (fromIndex >= len) return -1;
    3e70:	dc 01       	movw	r26, r24
    3e72:	14 96       	adiw	r26, 0x04	; 4
    3e74:	8d 91       	ld	r24, X+
    3e76:	9c 91       	ld	r25, X
    3e78:	15 97       	sbiw	r26, 0x05	; 5
    3e7a:	48 17       	cp	r20, r24
    3e7c:	59 07       	cpc	r21, r25
    3e7e:	e0 f4       	brcc	.+56     	; 0x3eb8 <_ZNK6String11lastIndexOfEcj+0x58>
	char tempchar = buffer[fromIndex + 1];
    3e80:	7a 01       	movw	r14, r20
    3e82:	08 94       	sec
    3e84:	e1 1c       	adc	r14, r1
    3e86:	f1 1c       	adc	r15, r1
    3e88:	ed 91       	ld	r30, X+
    3e8a:	fc 91       	ld	r31, X
    3e8c:	11 97       	sbiw	r26, 0x01	; 1
    3e8e:	ee 0d       	add	r30, r14
    3e90:	ff 1d       	adc	r31, r15
    3e92:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    3e94:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    3e96:	cd 91       	ld	r28, X+
    3e98:	dc 91       	ld	r29, X
    3e9a:	ce 01       	movw	r24, r28
    3e9c:	70 e0       	ldi	r23, 0x00	; 0
    3e9e:	0e 94 78 3a 	call	0x74f0	; 0x74f0 <strrchr>
	buffer[fromIndex + 1] = tempchar;
    3ea2:	ce 0d       	add	r28, r14
    3ea4:	df 1d       	adc	r29, r15
    3ea6:	d8 82       	st	Y, r13
	if (temp == NULL) return -1;
    3ea8:	00 97       	sbiw	r24, 0x00	; 0
    3eaa:	49 f0       	breq	.+18     	; 0x3ebe <_ZNK6String11lastIndexOfEcj+0x5e>
	return temp - buffer;
    3eac:	f8 01       	movw	r30, r16
    3eae:	20 81       	ld	r18, Z
    3eb0:	31 81       	ldd	r19, Z+1	; 0x01
    3eb2:	82 1b       	sub	r24, r18
    3eb4:	93 0b       	sbc	r25, r19
    3eb6:	05 c0       	rjmp	.+10     	; 0x3ec2 <_ZNK6String11lastIndexOfEcj+0x62>
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    3eb8:	8f ef       	ldi	r24, 0xFF	; 255
    3eba:	9f ef       	ldi	r25, 0xFF	; 255
    3ebc:	02 c0       	rjmp	.+4      	; 0x3ec2 <_ZNK6String11lastIndexOfEcj+0x62>
	char tempchar = buffer[fromIndex + 1];
	buffer[fromIndex + 1] = '\0';
	char* temp = strrchr( buffer, ch );
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
    3ebe:	8f ef       	ldi	r24, 0xFF	; 255
    3ec0:	9f ef       	ldi	r25, 0xFF	; 255
	return temp - buffer;
}
    3ec2:	df 91       	pop	r29
    3ec4:	cf 91       	pop	r28
    3ec6:	1f 91       	pop	r17
    3ec8:	0f 91       	pop	r16
    3eca:	ff 90       	pop	r15
    3ecc:	ef 90       	pop	r14
    3ece:	df 90       	pop	r13
    3ed0:	08 95       	ret

00003ed2 <_ZNK6String11lastIndexOfEc>:
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	44 81       	ldd	r20, Z+4	; 0x04
    3ed6:	55 81       	ldd	r21, Z+5	; 0x05
    3ed8:	41 50       	subi	r20, 0x01	; 1
    3eda:	50 40       	sbci	r21, 0x00	; 0
    3edc:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <_ZNK6String11lastIndexOfEcj>
}
    3ee0:	08 95       	ret

00003ee2 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    3ee2:	af 92       	push	r10
    3ee4:	bf 92       	push	r11
    3ee6:	cf 92       	push	r12
    3ee8:	df 92       	push	r13
    3eea:	ef 92       	push	r14
    3eec:	ff 92       	push	r15
    3eee:	0f 93       	push	r16
    3ef0:	1f 93       	push	r17
    3ef2:	cf 93       	push	r28
    3ef4:	df 93       	push	r29
    3ef6:	fc 01       	movw	r30, r24
    3ef8:	6b 01       	movw	r12, r22
    3efa:	7a 01       	movw	r14, r20
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    3efc:	db 01       	movw	r26, r22
    3efe:	14 96       	adiw	r26, 0x04	; 4
    3f00:	2d 91       	ld	r18, X+
    3f02:	3c 91       	ld	r19, X
    3f04:	15 97       	sbiw	r26, 0x05	; 5
    3f06:	21 15       	cp	r18, r1
    3f08:	31 05       	cpc	r19, r1
    3f0a:	71 f1       	breq	.+92     	; 0x3f68 <_ZNK6String11lastIndexOfERKS_j+0x86>
    3f0c:	84 81       	ldd	r24, Z+4	; 0x04
    3f0e:	95 81       	ldd	r25, Z+5	; 0x05
    3f10:	00 97       	sbiw	r24, 0x00	; 0
    3f12:	71 f1       	breq	.+92     	; 0x3f70 <_ZNK6String11lastIndexOfERKS_j+0x8e>
    3f14:	82 17       	cp	r24, r18
    3f16:	93 07       	cpc	r25, r19
    3f18:	78 f1       	brcs	.+94     	; 0x3f78 <_ZNK6String11lastIndexOfERKS_j+0x96>
	if (fromIndex >= len) fromIndex = len - 1;
    3f1a:	48 17       	cp	r20, r24
    3f1c:	59 07       	cpc	r21, r25
    3f1e:	20 f0       	brcs	.+8      	; 0x3f28 <_ZNK6String11lastIndexOfERKS_j+0x46>
    3f20:	7c 01       	movw	r14, r24
    3f22:	08 94       	sec
    3f24:	e1 08       	sbc	r14, r1
    3f26:	f1 08       	sbc	r15, r1
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3f28:	c0 81       	ld	r28, Z
    3f2a:	d1 81       	ldd	r29, Z+1	; 0x01
    3f2c:	8e 01       	movw	r16, r28
    3f2e:	0e 0d       	add	r16, r14
    3f30:	1f 1d       	adc	r17, r15
    3f32:	0c 17       	cp	r16, r28
    3f34:	1d 07       	cpc	r17, r29
    3f36:	20 f1       	brcs	.+72     	; 0x3f80 <_ZNK6String11lastIndexOfERKS_j+0x9e>
    3f38:	ce 01       	movw	r24, r28

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    3f3a:	aa 24       	eor	r10, r10
    3f3c:	aa 94       	dec	r10
    3f3e:	ba 2c       	mov	r11, r10
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
		p = strstr(p, s2.buffer);
    3f40:	f6 01       	movw	r30, r12
    3f42:	60 81       	ld	r22, Z
    3f44:	71 81       	ldd	r23, Z+1	; 0x01
    3f46:	0e 94 83 3a 	call	0x7506	; 0x7506 <strstr>
    3f4a:	9c 01       	movw	r18, r24
		if (!p) break;
    3f4c:	00 97       	sbiw	r24, 0x00	; 0
    3f4e:	d9 f0       	breq	.+54     	; 0x3f86 <_ZNK6String11lastIndexOfERKS_j+0xa4>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    3f50:	8c 1b       	sub	r24, r28
    3f52:	9d 0b       	sbc	r25, r29
    3f54:	e8 16       	cp	r14, r24
    3f56:	f9 06       	cpc	r15, r25
    3f58:	08 f0       	brcs	.+2      	; 0x3f5c <_ZNK6String11lastIndexOfERKS_j+0x7a>
    3f5a:	5c 01       	movw	r10, r24
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3f5c:	c9 01       	movw	r24, r18
    3f5e:	01 96       	adiw	r24, 0x01	; 1
    3f60:	08 17       	cp	r16, r24
    3f62:	19 07       	cpc	r17, r25
    3f64:	68 f7       	brcc	.-38     	; 0x3f40 <_ZNK6String11lastIndexOfERKS_j+0x5e>
    3f66:	0f c0       	rjmp	.+30     	; 0x3f86 <_ZNK6String11lastIndexOfERKS_j+0xa4>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    3f68:	aa 24       	eor	r10, r10
    3f6a:	aa 94       	dec	r10
    3f6c:	ba 2c       	mov	r11, r10
    3f6e:	0b c0       	rjmp	.+22     	; 0x3f86 <_ZNK6String11lastIndexOfERKS_j+0xa4>
    3f70:	aa 24       	eor	r10, r10
    3f72:	aa 94       	dec	r10
    3f74:	ba 2c       	mov	r11, r10
    3f76:	07 c0       	rjmp	.+14     	; 0x3f86 <_ZNK6String11lastIndexOfERKS_j+0xa4>
    3f78:	aa 24       	eor	r10, r10
    3f7a:	aa 94       	dec	r10
    3f7c:	ba 2c       	mov	r11, r10
    3f7e:	03 c0       	rjmp	.+6      	; 0x3f86 <_ZNK6String11lastIndexOfERKS_j+0xa4>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    3f80:	aa 24       	eor	r10, r10
    3f82:	aa 94       	dec	r10
    3f84:	ba 2c       	mov	r11, r10
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    3f86:	8a 2d       	mov	r24, r10
    3f88:	9b 2d       	mov	r25, r11
    3f8a:	df 91       	pop	r29
    3f8c:	cf 91       	pop	r28
    3f8e:	1f 91       	pop	r17
    3f90:	0f 91       	pop	r16
    3f92:	ff 90       	pop	r15
    3f94:	ef 90       	pop	r14
    3f96:	df 90       	pop	r13
    3f98:	cf 90       	pop	r12
    3f9a:	bf 90       	pop	r11
    3f9c:	af 90       	pop	r10
    3f9e:	08 95       	ret

00003fa0 <_ZNK6String11lastIndexOfERKS_>:
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
    3fa0:	fc 01       	movw	r30, r24
	return lastIndexOf(s2, len - s2.len);
    3fa2:	44 81       	ldd	r20, Z+4	; 0x04
    3fa4:	55 81       	ldd	r21, Z+5	; 0x05
    3fa6:	db 01       	movw	r26, r22
    3fa8:	14 96       	adiw	r26, 0x04	; 4
    3faa:	8d 91       	ld	r24, X+
    3fac:	9c 91       	ld	r25, X
    3fae:	15 97       	sbiw	r26, 0x05	; 5
    3fb0:	48 1b       	sub	r20, r24
    3fb2:	59 0b       	sbc	r21, r25
    3fb4:	cf 01       	movw	r24, r30
    3fb6:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZNK6String11lastIndexOfERKS_j>
}
    3fba:	08 95       	ret

00003fbc <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    3fbc:	bf 92       	push	r11
    3fbe:	cf 92       	push	r12
    3fc0:	df 92       	push	r13
    3fc2:	ef 92       	push	r14
    3fc4:	ff 92       	push	r15
    3fc6:	0f 93       	push	r16
    3fc8:	1f 93       	push	r17
    3fca:	cf 93       	push	r28
    3fcc:	df 93       	push	r29
    3fce:	7c 01       	movw	r14, r24
    3fd0:	6b 01       	movw	r12, r22
    3fd2:	8a 01       	movw	r16, r20
    3fd4:	e9 01       	movw	r28, r18
	if (left > right) {
    3fd6:	24 17       	cp	r18, r20
    3fd8:	35 07       	cpc	r19, r21
    3fda:	20 f4       	brcc	.+8      	; 0x3fe4 <_ZNK6String9substringEjj+0x28>
    3fdc:	81 2f       	mov	r24, r17
		unsigned int temp = right;
		right = left;
		left = temp;
    3fde:	89 01       	movw	r16, r18

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
		unsigned int temp = right;
		right = left;
    3fe0:	c4 2f       	mov	r28, r20
    3fe2:	d8 2f       	mov	r29, r24
		left = temp;
	}
	String out;
    3fe4:	c7 01       	movw	r24, r14
    3fe6:	65 eb       	ldi	r22, 0xB5	; 181
    3fe8:	72 e0       	ldi	r23, 0x02	; 2
    3fea:	0e 94 01 1a 	call	0x3402	; 0x3402 <_ZN6StringC1EPKc>
	if (left > len) return out;
    3fee:	d6 01       	movw	r26, r12
    3ff0:	14 96       	adiw	r26, 0x04	; 4
    3ff2:	8d 91       	ld	r24, X+
    3ff4:	9c 91       	ld	r25, X
    3ff6:	15 97       	sbiw	r26, 0x05	; 5
    3ff8:	80 17       	cp	r24, r16
    3ffa:	91 07       	cpc	r25, r17
    3ffc:	c8 f0       	brcs	.+50     	; 0x4030 <_ZNK6String9substringEjj+0x74>
    3ffe:	8c 17       	cp	r24, r28
    4000:	9d 07       	cpc	r25, r29
    4002:	08 f4       	brcc	.+2      	; 0x4006 <_ZNK6String9substringEjj+0x4a>
    4004:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    4006:	d6 01       	movw	r26, r12
    4008:	ed 91       	ld	r30, X+
    400a:	fc 91       	ld	r31, X
    400c:	11 97       	sbiw	r26, 0x01	; 1
    400e:	ec 0f       	add	r30, r28
    4010:	fd 1f       	adc	r31, r29
    4012:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    4014:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    4016:	6d 91       	ld	r22, X+
    4018:	7c 91       	ld	r23, X
    401a:	60 0f       	add	r22, r16
    401c:	71 1f       	adc	r23, r17
    401e:	c7 01       	movw	r24, r14
    4020:	0e 94 49 1a 	call	0x3492	; 0x3492 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    4024:	f6 01       	movw	r30, r12
    4026:	80 81       	ld	r24, Z
    4028:	91 81       	ldd	r25, Z+1	; 0x01
    402a:	c8 0f       	add	r28, r24
    402c:	d9 1f       	adc	r29, r25
    402e:	b8 82       	st	Y, r11
	return out;
}
    4030:	c7 01       	movw	r24, r14
    4032:	df 91       	pop	r29
    4034:	cf 91       	pop	r28
    4036:	1f 91       	pop	r17
    4038:	0f 91       	pop	r16
    403a:	ff 90       	pop	r15
    403c:	ef 90       	pop	r14
    403e:	df 90       	pop	r13
    4040:	cf 90       	pop	r12
    4042:	bf 90       	pop	r11
    4044:	08 95       	ret

00004046 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    4046:	cf 93       	push	r28
    4048:	df 93       	push	r29
    404a:	ec 01       	movw	r28, r24
	return substring(left, len);
    404c:	fb 01       	movw	r30, r22
    404e:	24 81       	ldd	r18, Z+4	; 0x04
    4050:	35 81       	ldd	r19, Z+5	; 0x05
    4052:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <_ZNK6String9substringEjj>
}
    4056:	ce 01       	movw	r24, r28
    4058:	df 91       	pop	r29
    405a:	cf 91       	pop	r28
    405c:	08 95       	ret

0000405e <_ZN6String7replaceEcc>:
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    405e:	dc 01       	movw	r26, r24
    4060:	ed 91       	ld	r30, X+
    4062:	fc 91       	ld	r31, X
    4064:	11 97       	sbiw	r26, 0x01	; 1
    4066:	30 97       	sbiw	r30, 0x00	; 0
    4068:	61 f0       	breq	.+24     	; 0x4082 <_ZN6String7replaceEcc+0x24>
	for (char *p = buffer; *p; p++) {
    406a:	80 81       	ld	r24, Z
    406c:	88 23       	and	r24, r24
    406e:	49 f0       	breq	.+18     	; 0x4082 <_ZN6String7replaceEcc+0x24>

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
    4070:	31 96       	adiw	r30, 0x01	; 1
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    4072:	86 17       	cp	r24, r22
    4074:	19 f4       	brne	.+6      	; 0x407c <_ZN6String7replaceEcc+0x1e>

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
    4076:	df 01       	movw	r26, r30
    4078:	11 97       	sbiw	r26, 0x01	; 1
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    407a:	4c 93       	st	X, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    407c:	81 91       	ld	r24, Z+
    407e:	88 23       	and	r24, r24
    4080:	c1 f7       	brne	.-16     	; 0x4072 <_ZN6String7replaceEcc+0x14>
    4082:	08 95       	ret

00004084 <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    4084:	4f 92       	push	r4
    4086:	5f 92       	push	r5
    4088:	6f 92       	push	r6
    408a:	7f 92       	push	r7
    408c:	8f 92       	push	r8
    408e:	9f 92       	push	r9
    4090:	af 92       	push	r10
    4092:	bf 92       	push	r11
    4094:	cf 92       	push	r12
    4096:	df 92       	push	r13
    4098:	ef 92       	push	r14
    409a:	ff 92       	push	r15
    409c:	0f 93       	push	r16
    409e:	1f 93       	push	r17
    40a0:	cf 93       	push	r28
    40a2:	df 93       	push	r29
    40a4:	3c 01       	movw	r6, r24
    40a6:	4b 01       	movw	r8, r22
    40a8:	7a 01       	movw	r14, r20
	if (len == 0 || find.len == 0) return;
    40aa:	fc 01       	movw	r30, r24
    40ac:	a4 80       	ldd	r10, Z+4	; 0x04
    40ae:	b5 80       	ldd	r11, Z+5	; 0x05
    40b0:	a1 14       	cp	r10, r1
    40b2:	b1 04       	cpc	r11, r1
    40b4:	09 f4       	brne	.+2      	; 0x40b8 <_ZN6String7replaceERKS_S1_+0x34>
    40b6:	ca c0       	rjmp	.+404    	; 0x424c <_ZN6String7replaceERKS_S1_+0x1c8>
    40b8:	fb 01       	movw	r30, r22
    40ba:	c4 80       	ldd	r12, Z+4	; 0x04
    40bc:	d5 80       	ldd	r13, Z+5	; 0x05
    40be:	c1 14       	cp	r12, r1
    40c0:	d1 04       	cpc	r13, r1
    40c2:	09 f4       	brne	.+2      	; 0x40c6 <_ZN6String7replaceERKS_S1_+0x42>
    40c4:	c3 c0       	rjmp	.+390    	; 0x424c <_ZN6String7replaceERKS_S1_+0x1c8>
	int diff = replace.len - find.len;
    40c6:	fa 01       	movw	r30, r20
    40c8:	84 81       	ldd	r24, Z+4	; 0x04
    40ca:	95 81       	ldd	r25, Z+5	; 0x05
    40cc:	2c 01       	movw	r4, r24
    40ce:	4c 18       	sub	r4, r12
    40d0:	5d 08       	sbc	r5, r13
    40d2:	c2 01       	movw	r24, r4
	char *readFrom = buffer;
    40d4:	f3 01       	movw	r30, r6
    40d6:	00 81       	ld	r16, Z
    40d8:	11 81       	ldd	r17, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    40da:	41 14       	cp	r4, r1
    40dc:	51 04       	cpc	r5, r1
    40de:	79 f0       	breq	.+30     	; 0x40fe <_ZN6String7replaceERKS_S1_+0x7a>
    40e0:	18 c0       	rjmp	.+48     	; 0x4112 <_ZN6String7replaceERKS_S1_+0x8e>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    40e2:	f7 01       	movw	r30, r14
    40e4:	60 81       	ld	r22, Z
    40e6:	71 81       	ldd	r23, Z+1	; 0x01
    40e8:	44 81       	ldd	r20, Z+4	; 0x04
    40ea:	55 81       	ldd	r21, Z+5	; 0x05
    40ec:	8c 2f       	mov	r24, r28
    40ee:	9d 2f       	mov	r25, r29
    40f0:	0e 94 25 3a 	call	0x744a	; 0x744a <memcpy>
			readFrom = foundAt + replace.len;
    40f4:	f7 01       	movw	r30, r14
    40f6:	04 81       	ldd	r16, Z+4	; 0x04
    40f8:	15 81       	ldd	r17, Z+5	; 0x05
    40fa:	0c 0f       	add	r16, r28
    40fc:	1d 1f       	adc	r17, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    40fe:	f4 01       	movw	r30, r8
    4100:	60 81       	ld	r22, Z
    4102:	71 81       	ldd	r23, Z+1	; 0x01
    4104:	c8 01       	movw	r24, r16
    4106:	0e 94 83 3a 	call	0x7506	; 0x7506 <strstr>
    410a:	ec 01       	movw	r28, r24
    410c:	00 97       	sbiw	r24, 0x00	; 0
    410e:	49 f7       	brne	.-46     	; 0x40e2 <_ZN6String7replaceERKS_S1_+0x5e>
    4110:	9d c0       	rjmp	.+314    	; 0x424c <_ZN6String7replaceERKS_S1_+0x1c8>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    4112:	99 23       	and	r25, r25
    4114:	64 f1       	brlt	.+88     	; 0x416e <_ZN6String7replaceERKS_S1_+0xea>
    4116:	e5 01       	movw	r28, r10
    4118:	3e c0       	rjmp	.+124    	; 0x4196 <_ZN6String7replaceERKS_S1_+0x112>
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    411a:	e6 01       	movw	r28, r12
    411c:	c0 1b       	sub	r28, r16
    411e:	d1 0b       	sbc	r29, r17
			memcpy(writeTo, readFrom, n);
    4120:	8a 2d       	mov	r24, r10
    4122:	9b 2d       	mov	r25, r11
    4124:	60 2f       	mov	r22, r16
    4126:	71 2f       	mov	r23, r17
    4128:	4c 2f       	mov	r20, r28
    412a:	5d 2f       	mov	r21, r29
    412c:	0e 94 25 3a 	call	0x744a	; 0x744a <memcpy>
			writeTo += n;
    4130:	ca 0d       	add	r28, r10
    4132:	db 1d       	adc	r29, r11
			memcpy(writeTo, replace.buffer, replace.len);
    4134:	f7 01       	movw	r30, r14
    4136:	60 81       	ld	r22, Z
    4138:	71 81       	ldd	r23, Z+1	; 0x01
    413a:	44 81       	ldd	r20, Z+4	; 0x04
    413c:	55 81       	ldd	r21, Z+5	; 0x05
    413e:	8c 2f       	mov	r24, r28
    4140:	9d 2f       	mov	r25, r29
    4142:	0e 94 25 3a 	call	0x744a	; 0x744a <memcpy>
			writeTo += replace.len;
    4146:	f7 01       	movw	r30, r14
    4148:	84 81       	ldd	r24, Z+4	; 0x04
    414a:	95 81       	ldd	r25, Z+5	; 0x05
    414c:	5e 01       	movw	r10, r28
    414e:	a8 0e       	add	r10, r24
    4150:	b9 1e       	adc	r11, r25
			readFrom = foundAt + find.len;
    4152:	f4 01       	movw	r30, r8
    4154:	84 81       	ldd	r24, Z+4	; 0x04
    4156:	95 81       	ldd	r25, Z+5	; 0x05
    4158:	86 01       	movw	r16, r12
    415a:	08 0f       	add	r16, r24
    415c:	19 1f       	adc	r17, r25
			len += diff;
    415e:	f3 01       	movw	r30, r6
    4160:	84 81       	ldd	r24, Z+4	; 0x04
    4162:	95 81       	ldd	r25, Z+5	; 0x05
    4164:	84 0d       	add	r24, r4
    4166:	95 1d       	adc	r25, r5
    4168:	95 83       	std	Z+5, r25	; 0x05
    416a:	84 83       	std	Z+4, r24	; 0x04
    416c:	01 c0       	rjmp	.+2      	; 0x4170 <_ZN6String7replaceERKS_S1_+0xec>
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    416e:	58 01       	movw	r10, r16
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    4170:	f4 01       	movw	r30, r8
    4172:	60 81       	ld	r22, Z
    4174:	71 81       	ldd	r23, Z+1	; 0x01
    4176:	c8 01       	movw	r24, r16
    4178:	0e 94 83 3a 	call	0x7506	; 0x7506 <strstr>
    417c:	6c 01       	movw	r12, r24
    417e:	00 97       	sbiw	r24, 0x00	; 0
    4180:	61 f6       	brne	.-104    	; 0x411a <_ZN6String7replaceERKS_S1_+0x96>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    4182:	c5 01       	movw	r24, r10
    4184:	b8 01       	movw	r22, r16
    4186:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <strcpy>
    418a:	60 c0       	rjmp	.+192    	; 0x424c <_ZN6String7replaceERKS_S1_+0x1c8>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    418c:	8c 01       	movw	r16, r24
    418e:	0c 0d       	add	r16, r12
    4190:	1d 1d       	adc	r17, r13
			size += diff;
    4192:	c4 0d       	add	r28, r4
    4194:	d5 1d       	adc	r29, r5
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    4196:	f4 01       	movw	r30, r8
    4198:	60 81       	ld	r22, Z
    419a:	71 81       	ldd	r23, Z+1	; 0x01
    419c:	c8 01       	movw	r24, r16
    419e:	0e 94 83 3a 	call	0x7506	; 0x7506 <strstr>
    41a2:	00 97       	sbiw	r24, 0x00	; 0
    41a4:	99 f7       	brne	.-26     	; 0x418c <_ZN6String7replaceERKS_S1_+0x108>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    41a6:	ca 15       	cp	r28, r10
    41a8:	db 05       	cpc	r29, r11
    41aa:	09 f4       	brne	.+2      	; 0x41ae <_ZN6String7replaceERKS_S1_+0x12a>
    41ac:	4f c0       	rjmp	.+158    	; 0x424c <_ZN6String7replaceERKS_S1_+0x1c8>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    41ae:	f3 01       	movw	r30, r6
    41b0:	82 81       	ldd	r24, Z+2	; 0x02
    41b2:	93 81       	ldd	r25, Z+3	; 0x03
    41b4:	8c 17       	cp	r24, r28
    41b6:	9d 07       	cpc	r25, r29
    41b8:	08 f0       	brcs	.+2      	; 0x41bc <_ZN6String7replaceERKS_S1_+0x138>
    41ba:	42 c0       	rjmp	.+132    	; 0x4240 <_ZN6String7replaceERKS_S1_+0x1bc>
    41bc:	c3 01       	movw	r24, r6
    41be:	be 01       	movw	r22, r28
    41c0:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN6String12changeBufferEj>
    41c4:	88 23       	and	r24, r24
    41c6:	09 f4       	brne	.+2      	; 0x41ca <_ZN6String7replaceERKS_S1_+0x146>
    41c8:	41 c0       	rjmp	.+130    	; 0x424c <_ZN6String7replaceERKS_S1_+0x1c8>
    41ca:	3a c0       	rjmp	.+116    	; 0x4240 <_ZN6String7replaceERKS_S1_+0x1bc>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    41cc:	55 23       	and	r21, r21
    41ce:	f4 f1       	brlt	.+124    	; 0x424c <_ZN6String7replaceERKS_S1_+0x1c8>
    41d0:	c3 01       	movw	r24, r6
    41d2:	b4 01       	movw	r22, r8
    41d4:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_ZNK6String11lastIndexOfERKS_j>
    41d8:	ec 01       	movw	r28, r24
    41da:	99 23       	and	r25, r25
    41dc:	bc f1       	brlt	.+110    	; 0x424c <_ZN6String7replaceERKS_S1_+0x1c8>
			readFrom = buffer + index + find.len;
    41de:	f3 01       	movw	r30, r6
    41e0:	60 81       	ld	r22, Z
    41e2:	71 81       	ldd	r23, Z+1	; 0x01
    41e4:	f4 01       	movw	r30, r8
    41e6:	84 81       	ldd	r24, Z+4	; 0x04
    41e8:	95 81       	ldd	r25, Z+5	; 0x05
    41ea:	8c 0f       	add	r24, r28
    41ec:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    41ee:	68 0f       	add	r22, r24
    41f0:	79 1f       	adc	r23, r25
    41f2:	f3 01       	movw	r30, r6
    41f4:	44 81       	ldd	r20, Z+4	; 0x04
    41f6:	55 81       	ldd	r21, Z+5	; 0x05
    41f8:	48 1b       	sub	r20, r24
    41fa:	59 0b       	sbc	r21, r25
    41fc:	cb 01       	movw	r24, r22
    41fe:	84 0d       	add	r24, r4
    4200:	95 1d       	adc	r25, r5
    4202:	0e 94 2e 3a 	call	0x745c	; 0x745c <memmove>
			len += diff;
    4206:	f3 01       	movw	r30, r6
    4208:	84 81       	ldd	r24, Z+4	; 0x04
    420a:	95 81       	ldd	r25, Z+5	; 0x05
    420c:	84 0d       	add	r24, r4
    420e:	95 1d       	adc	r25, r5
    4210:	95 83       	std	Z+5, r25	; 0x05
    4212:	84 83       	std	Z+4, r24	; 0x04
			buffer[len] = 0;
    4214:	20 81       	ld	r18, Z
    4216:	31 81       	ldd	r19, Z+1	; 0x01
    4218:	82 0f       	add	r24, r18
    421a:	93 1f       	adc	r25, r19
    421c:	fc 01       	movw	r30, r24
    421e:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    4220:	f3 01       	movw	r30, r6
    4222:	80 81       	ld	r24, Z
    4224:	91 81       	ldd	r25, Z+1	; 0x01
    4226:	8c 0f       	add	r24, r28
    4228:	9d 1f       	adc	r25, r29
    422a:	f7 01       	movw	r30, r14
    422c:	60 81       	ld	r22, Z
    422e:	71 81       	ldd	r23, Z+1	; 0x01
    4230:	44 81       	ldd	r20, Z+4	; 0x04
    4232:	55 81       	ldd	r21, Z+5	; 0x05
    4234:	0e 94 25 3a 	call	0x744a	; 0x744a <memcpy>
			index--;
    4238:	ae 01       	movw	r20, r28
    423a:	41 50       	subi	r20, 0x01	; 1
    423c:	50 40       	sbci	r21, 0x00	; 0
    423e:	c6 cf       	rjmp	.-116    	; 0x41cc <_ZN6String7replaceERKS_S1_+0x148>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    4240:	f3 01       	movw	r30, r6
    4242:	44 81       	ldd	r20, Z+4	; 0x04
    4244:	55 81       	ldd	r21, Z+5	; 0x05
    4246:	41 50       	subi	r20, 0x01	; 1
    4248:	50 40       	sbci	r21, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    424a:	c0 cf       	rjmp	.-128    	; 0x41cc <_ZN6String7replaceERKS_S1_+0x148>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    424c:	df 91       	pop	r29
    424e:	cf 91       	pop	r28
    4250:	1f 91       	pop	r17
    4252:	0f 91       	pop	r16
    4254:	ff 90       	pop	r15
    4256:	ef 90       	pop	r14
    4258:	df 90       	pop	r13
    425a:	cf 90       	pop	r12
    425c:	bf 90       	pop	r11
    425e:	af 90       	pop	r10
    4260:	9f 90       	pop	r9
    4262:	8f 90       	pop	r8
    4264:	7f 90       	pop	r7
    4266:	6f 90       	pop	r6
    4268:	5f 90       	pop	r5
    426a:	4f 90       	pop	r4
    426c:	08 95       	ret

0000426e <_ZN6String11toLowerCaseEv>:

void String::toLowerCase(void)
{
    426e:	0f 93       	push	r16
    4270:	1f 93       	push	r17
    4272:	cf 93       	push	r28
    4274:	df 93       	push	r29
	if (!buffer) return;
    4276:	fc 01       	movw	r30, r24
    4278:	c0 81       	ld	r28, Z
    427a:	d1 81       	ldd	r29, Z+1	; 0x01
    427c:	20 97       	sbiw	r28, 0x00	; 0
    427e:	79 f0       	breq	.+30     	; 0x429e <_ZN6String11toLowerCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
    4280:	88 81       	ld	r24, Y
    4282:	88 23       	and	r24, r24
    4284:	61 f0       	breq	.+24     	; 0x429e <_ZN6String11toLowerCaseEv+0x30>
			index--;
		}
	}
}

void String::toLowerCase(void)
    4286:	8e 01       	movw	r16, r28
    4288:	0f 5f       	subi	r16, 0xFF	; 255
    428a:	1f 4f       	sbci	r17, 0xFF	; 255
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	0e 94 08 3a 	call	0x7410	; 0x7410 <tolower>
    4292:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    4294:	f8 01       	movw	r30, r16
    4296:	81 91       	ld	r24, Z+
    4298:	8f 01       	movw	r16, r30
    429a:	88 23       	and	r24, r24
    429c:	b9 f7       	brne	.-18     	; 0x428c <_ZN6String11toLowerCaseEv+0x1e>
		*p = tolower(*p);
	}
}
    429e:	df 91       	pop	r29
    42a0:	cf 91       	pop	r28
    42a2:	1f 91       	pop	r17
    42a4:	0f 91       	pop	r16
    42a6:	08 95       	ret

000042a8 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    42a8:	0f 93       	push	r16
    42aa:	1f 93       	push	r17
    42ac:	cf 93       	push	r28
    42ae:	df 93       	push	r29
	if (!buffer) return;
    42b0:	fc 01       	movw	r30, r24
    42b2:	c0 81       	ld	r28, Z
    42b4:	d1 81       	ldd	r29, Z+1	; 0x01
    42b6:	20 97       	sbiw	r28, 0x00	; 0
    42b8:	79 f0       	breq	.+30     	; 0x42d8 <_ZN6String11toUpperCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
    42ba:	88 81       	ld	r24, Y
    42bc:	88 23       	and	r24, r24
    42be:	61 f0       	breq	.+24     	; 0x42d8 <_ZN6String11toUpperCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    42c0:	8e 01       	movw	r16, r28
    42c2:	0f 5f       	subi	r16, 0xFF	; 255
    42c4:	1f 4f       	sbci	r17, 0xFF	; 255
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	0e 94 10 3a 	call	0x7420	; 0x7420 <toupper>
    42cc:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    42ce:	f8 01       	movw	r30, r16
    42d0:	81 91       	ld	r24, Z+
    42d2:	8f 01       	movw	r16, r30
    42d4:	88 23       	and	r24, r24
    42d6:	b9 f7       	brne	.-18     	; 0x42c6 <_ZN6String11toUpperCaseEv+0x1e>
		*p = toupper(*p);
	}
}
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	1f 91       	pop	r17
    42de:	0f 91       	pop	r16
    42e0:	08 95       	ret

000042e2 <_ZN6String4trimEv>:

void String::trim(void)
{
    42e2:	af 92       	push	r10
    42e4:	bf 92       	push	r11
    42e6:	cf 92       	push	r12
    42e8:	df 92       	push	r13
    42ea:	ef 92       	push	r14
    42ec:	ff 92       	push	r15
    42ee:	0f 93       	push	r16
    42f0:	1f 93       	push	r17
    42f2:	cf 93       	push	r28
    42f4:	df 93       	push	r29
    42f6:	7c 01       	movw	r14, r24
	if (!buffer || len == 0) return;
    42f8:	dc 01       	movw	r26, r24
    42fa:	cd 90       	ld	r12, X+
    42fc:	dc 90       	ld	r13, X
    42fe:	11 97       	sbiw	r26, 0x01	; 1
    4300:	c1 14       	cp	r12, r1
    4302:	d1 04       	cpc	r13, r1
    4304:	f1 f1       	breq	.+124    	; 0x4382 <_ZN6String4trimEv+0xa0>
    4306:	14 96       	adiw	r26, 0x04	; 4
    4308:	ad 90       	ld	r10, X+
    430a:	bc 90       	ld	r11, X
    430c:	15 97       	sbiw	r26, 0x05	; 5
    430e:	a1 14       	cp	r10, r1
    4310:	b1 04       	cpc	r11, r1
    4312:	b9 f1       	breq	.+110    	; 0x4382 <_ZN6String4trimEv+0xa0>
    4314:	e6 01       	movw	r28, r12
    4316:	8e 01       	movw	r16, r28
    4318:	21 96       	adiw	r28, 0x01	; 1
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    431a:	f8 01       	movw	r30, r16
    431c:	80 81       	ld	r24, Z
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	0e 94 00 3a 	call	0x7400	; 0x7400 <isspace>
    4324:	00 97       	sbiw	r24, 0x00	; 0
    4326:	b9 f7       	brne	.-18     	; 0x4316 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    4328:	e5 01       	movw	r28, r10
    432a:	21 97       	sbiw	r28, 0x01	; 1
    432c:	cc 0d       	add	r28, r12
    432e:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    4330:	88 81       	ld	r24, Y
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	0e 94 00 3a 	call	0x7400	; 0x7400 <isspace>
    4338:	00 97       	sbiw	r24, 0x00	; 0
    433a:	c9 f0       	breq	.+50     	; 0x436e <_ZN6String4trimEv+0x8c>
    433c:	c0 17       	cp	r28, r16
    433e:	d1 07       	cpc	r29, r17
    4340:	b0 f0       	brcs	.+44     	; 0x436e <_ZN6String4trimEv+0x8c>
    4342:	21 97       	sbiw	r28, 0x01	; 1
    4344:	f5 cf       	rjmp	.-22     	; 0x4330 <_ZN6String4trimEv+0x4e>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
    4346:	8c 2d       	mov	r24, r12
    4348:	9d 2d       	mov	r25, r13
    434a:	60 2f       	mov	r22, r16
    434c:	71 2f       	mov	r23, r17
    434e:	4c 2f       	mov	r20, r28
    4350:	5d 2f       	mov	r21, r29
    4352:	0e 94 25 3a 	call	0x744a	; 0x744a <memcpy>
	buffer[len] = 0;
    4356:	d7 01       	movw	r26, r14
    4358:	ed 91       	ld	r30, X+
    435a:	fc 91       	ld	r31, X
    435c:	11 97       	sbiw	r26, 0x01	; 1
    435e:	14 96       	adiw	r26, 0x04	; 4
    4360:	8d 91       	ld	r24, X+
    4362:	9c 91       	ld	r25, X
    4364:	15 97       	sbiw	r26, 0x05	; 5
    4366:	e8 0f       	add	r30, r24
    4368:	f9 1f       	adc	r31, r25
    436a:	10 82       	st	Z, r1
    436c:	0a c0       	rjmp	.+20     	; 0x4382 <_ZN6String4trimEv+0xa0>
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
    436e:	21 96       	adiw	r28, 0x01	; 1
    4370:	c0 1b       	sub	r28, r16
    4372:	d1 0b       	sbc	r29, r17
    4374:	f7 01       	movw	r30, r14
    4376:	d5 83       	std	Z+5, r29	; 0x05
    4378:	c4 83       	std	Z+4, r28	; 0x04
	if (begin > buffer) memcpy(buffer, begin, len);
    437a:	c0 16       	cp	r12, r16
    437c:	d1 06       	cpc	r13, r17
    437e:	58 f7       	brcc	.-42     	; 0x4356 <_ZN6String4trimEv+0x74>
    4380:	e2 cf       	rjmp	.-60     	; 0x4346 <_ZN6String4trimEv+0x64>
	buffer[len] = 0;
}
    4382:	df 91       	pop	r29
    4384:	cf 91       	pop	r28
    4386:	1f 91       	pop	r17
    4388:	0f 91       	pop	r16
    438a:	ff 90       	pop	r15
    438c:	ef 90       	pop	r14
    438e:	df 90       	pop	r13
    4390:	cf 90       	pop	r12
    4392:	bf 90       	pop	r11
    4394:	af 90       	pop	r10
    4396:	08 95       	ret

00004398 <_ZNK6String5toIntEv>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
    4398:	0f 93       	push	r16
    439a:	1f 93       	push	r17
	if (buffer) return atol(buffer);
    439c:	fc 01       	movw	r30, r24
    439e:	80 81       	ld	r24, Z
    43a0:	91 81       	ldd	r25, Z+1	; 0x01
    43a2:	00 97       	sbiw	r24, 0x00	; 0
    43a4:	29 f0       	breq	.+10     	; 0x43b0 <_ZNK6String5toIntEv+0x18>
    43a6:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <atol>
    43aa:	8b 01       	movw	r16, r22
    43ac:	9c 01       	movw	r18, r24
    43ae:	03 c0       	rjmp	.+6      	; 0x43b6 <_ZNK6String5toIntEv+0x1e>
	return 0;
    43b0:	00 e0       	ldi	r16, 0x00	; 0
    43b2:	10 e0       	ldi	r17, 0x00	; 0
    43b4:	98 01       	movw	r18, r16
}
    43b6:	60 2f       	mov	r22, r16
    43b8:	71 2f       	mov	r23, r17
    43ba:	82 2f       	mov	r24, r18
    43bc:	93 2f       	mov	r25, r19
    43be:	1f 91       	pop	r17
    43c0:	0f 91       	pop	r16
    43c2:	08 95       	ret

000043c4 <_ZN9DhcpClass16reset_DHCP_leaseEv>:
    return request_DHCP_lease();
}

void DhcpClass::reset_DHCP_lease(){
    // zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
    memset(_dhcpLocalIp, 0, 20);
    43c4:	0e 96       	adiw	r24, 0x0e	; 14
    43c6:	e8 2f       	mov	r30, r24
    43c8:	f9 2f       	mov	r31, r25
    43ca:	84 e1       	ldi	r24, 0x14	; 20
    43cc:	df 01       	movw	r26, r30
    43ce:	1d 92       	st	X+, r1
    43d0:	8a 95       	dec	r24
    43d2:	e9 f7       	brne	.-6      	; 0x43ce <_ZN9DhcpClass16reset_DHCP_leaseEv+0xa>
}
    43d4:	08 95       	ret

000043d6 <_ZN9DhcpClass12presend_DHCPEv>:
    return result;
}

void DhcpClass::presend_DHCP()
{
}
    43d6:	08 95       	ret

000043d8 <_ZN9DhcpClass17parseDHCPResponseEmRm>:

    _dhcpUdpSocket.endPacket();
}

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
    43d8:	2f 92       	push	r2
    43da:	3f 92       	push	r3
    43dc:	4f 92       	push	r4
    43de:	5f 92       	push	r5
    43e0:	6f 92       	push	r6
    43e2:	7f 92       	push	r7
    43e4:	8f 92       	push	r8
    43e6:	9f 92       	push	r9
    43e8:	af 92       	push	r10
    43ea:	bf 92       	push	r11
    43ec:	cf 92       	push	r12
    43ee:	df 92       	push	r13
    43f0:	ef 92       	push	r14
    43f2:	ff 92       	push	r15
    43f4:	0f 93       	push	r16
    43f6:	1f 93       	push	r17
    43f8:	cf 93       	push	r28
    43fa:	df 93       	push	r29
    43fc:	cd b7       	in	r28, 0x3d	; 61
    43fe:	de b7       	in	r29, 0x3e	; 62
    4400:	e4 97       	sbiw	r28, 0x34	; 52
    4402:	0f b6       	in	r0, 0x3f	; 63
    4404:	f8 94       	cli
    4406:	de bf       	out	0x3e, r29	; 62
    4408:	0f be       	out	0x3f, r0	; 63
    440a:	cd bf       	out	0x3d, r28	; 61
    440c:	2c 01       	movw	r4, r24
    440e:	6a 01       	movw	r12, r20
    4410:	7b 01       	movw	r14, r22
    4412:	19 01       	movw	r2, r18
    uint8_t type = 0;
    uint8_t opt_len = 0;
     
    unsigned long startTime = millis();
    4414:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    4418:	4b 01       	movw	r8, r22
    441a:	5c 01       	movw	r10, r24

    while(_dhcpUdpSocket.parsePacket() <= 0)
    441c:	82 01       	movw	r16, r4
    441e:	09 5b       	subi	r16, 0xB9	; 185
    4420:	1f 4f       	sbci	r17, 0xFF	; 255
    4422:	14 c0       	rjmp	.+40     	; 0x444c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x74>
    {
        if((millis() - startTime) > responseTimeout)
    4424:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    4428:	dc 01       	movw	r26, r24
    442a:	cb 01       	movw	r24, r22
    442c:	88 19       	sub	r24, r8
    442e:	99 09       	sbc	r25, r9
    4430:	aa 09       	sbc	r26, r10
    4432:	bb 09       	sbc	r27, r11
    4434:	c8 16       	cp	r12, r24
    4436:	d9 06       	cpc	r13, r25
    4438:	ea 06       	cpc	r14, r26
    443a:	fb 06       	cpc	r15, r27
    443c:	08 f4       	brcc	.+2      	; 0x4440 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x68>
    443e:	40 c2       	rjmp	.+1152   	; 0x48c0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4e8>
        {
            return 255;
        }
        delay(50);
    4440:	62 e3       	ldi	r22, 0x32	; 50
    4442:	70 e0       	ldi	r23, 0x00	; 0
    4444:	80 e0       	ldi	r24, 0x00	; 0
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <delay>
    uint8_t type = 0;
    uint8_t opt_len = 0;
     
    unsigned long startTime = millis();

    while(_dhcpUdpSocket.parsePacket() <= 0)
    444c:	70 2e       	mov	r7, r16
    444e:	61 2e       	mov	r6, r17
    4450:	c8 01       	movw	r24, r16
    4452:	0e 94 37 06 	call	0xc6e	; 0xc6e <_ZN11EthernetUDP11parsePacketEv>
    4456:	18 16       	cp	r1, r24
    4458:	19 06       	cpc	r1, r25
    445a:	24 f7       	brge	.-56     	; 0x4424 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c>
        }
        delay(50);
    }
    // start reading in the packet
    RIP_MSG_FIXED fixedMsg;
    _dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));
    445c:	80 2f       	mov	r24, r16
    445e:	91 2f       	mov	r25, r17
    4460:	be 01       	movw	r22, r28
    4462:	69 5f       	subi	r22, 0xF9	; 249
    4464:	7f 4f       	sbci	r23, 0xFF	; 255
    4466:	42 e2       	ldi	r20, 0x22	; 34
    4468:	50 e0       	ldi	r21, 0x00	; 0
    446a:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
  
    if(fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT)
    446e:	8f 81       	ldd	r24, Y+7	; 0x07
    4470:	82 30       	cpi	r24, 0x02	; 2
    4472:	09 f0       	breq	.+2      	; 0x4476 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x9e>
    4474:	1d c2       	rjmp	.+1082   	; 0x48b0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4d8>
    4476:	f2 01       	movw	r30, r4
    4478:	e9 5b       	subi	r30, 0xB9	; 185
    447a:	ff 4f       	sbci	r31, 0xFF	; 255
    447c:	85 89       	ldd	r24, Z+21	; 0x15
    447e:	96 89       	ldd	r25, Z+22	; 0x16
    4480:	83 34       	cpi	r24, 0x43	; 67
    4482:	91 05       	cpc	r25, r1
    4484:	09 f0       	breq	.+2      	; 0x4488 <_ZN9DhcpClass17parseDHCPResponseEmRm+0xb0>
    4486:	16 c2       	rjmp	.+1068   	; 0x48b4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4dc>
    {
        transactionId = ntohl(fixedMsg.xid);
    4488:	0b 85       	ldd	r16, Y+11	; 0x0b
    448a:	1c 85       	ldd	r17, Y+12	; 0x0c
    448c:	2d 85       	ldd	r18, Y+13	; 0x0d
    448e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4490:	43 2f       	mov	r20, r19
    4492:	55 27       	eor	r21, r21
    4494:	66 27       	eor	r22, r22
    4496:	77 27       	eor	r23, r23
    4498:	b0 2f       	mov	r27, r16
    449a:	aa 27       	eor	r26, r26
    449c:	99 27       	eor	r25, r25
    449e:	88 27       	eor	r24, r24
    44a0:	48 2b       	or	r20, r24
    44a2:	59 2b       	or	r21, r25
    44a4:	6a 2b       	or	r22, r26
    44a6:	7b 2b       	or	r23, r27
    44a8:	b2 2f       	mov	r27, r18
    44aa:	a1 2f       	mov	r26, r17
    44ac:	90 2f       	mov	r25, r16
    44ae:	88 27       	eor	r24, r24
    44b0:	80 70       	andi	r24, 0x00	; 0
    44b2:	90 70       	andi	r25, 0x00	; 0
    44b4:	b0 70       	andi	r27, 0x00	; 0
    44b6:	48 2b       	or	r20, r24
    44b8:	59 2b       	or	r21, r25
    44ba:	6a 2b       	or	r22, r26
    44bc:	7b 2b       	or	r23, r27
    44be:	bb 27       	eor	r27, r27
    44c0:	a3 2f       	mov	r26, r19
    44c2:	92 2f       	mov	r25, r18
    44c4:	81 2f       	mov	r24, r17
    44c6:	80 70       	andi	r24, 0x00	; 0
    44c8:	a0 70       	andi	r26, 0x00	; 0
    44ca:	b0 70       	andi	r27, 0x00	; 0
    44cc:	6a 01       	movw	r12, r20
    44ce:	7b 01       	movw	r14, r22
    44d0:	c8 2a       	or	r12, r24
    44d2:	d9 2a       	or	r13, r25
    44d4:	ea 2a       	or	r14, r26
    44d6:	fb 2a       	or	r15, r27
    44d8:	f1 01       	movw	r30, r2
    44da:	c0 82       	st	Z, r12
    44dc:	d1 82       	std	Z+1, r13	; 0x01
    44de:	e2 82       	std	Z+2, r14	; 0x02
    44e0:	f3 82       	std	Z+3, r15	; 0x03
        if(memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 || (transactionId < _dhcpInitialTransactionId) || (transactionId > _dhcpTransactionId))
    44e2:	b2 01       	movw	r22, r4
    44e4:	68 5f       	subi	r22, 0xF8	; 248
    44e6:	7f 4f       	sbci	r23, 0xFF	; 255
    44e8:	ce 01       	movw	r24, r28
    44ea:	83 96       	adiw	r24, 0x23	; 35
    44ec:	46 e0       	ldi	r20, 0x06	; 6
    44ee:	50 e0       	ldi	r21, 0x00	; 0
    44f0:	0e 94 18 3a 	call	0x7430	; 0x7430 <memcmp>
    44f4:	28 2f       	mov	r18, r24
    44f6:	39 2f       	mov	r19, r25
    44f8:	21 15       	cp	r18, r1
    44fa:	31 05       	cpc	r19, r1
    44fc:	99 f4       	brne	.+38     	; 0x4524 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x14c>
    44fe:	f2 01       	movw	r30, r4
    4500:	80 81       	ld	r24, Z
    4502:	91 81       	ldd	r25, Z+1	; 0x01
    4504:	a2 81       	ldd	r26, Z+2	; 0x02
    4506:	b3 81       	ldd	r27, Z+3	; 0x03
    4508:	c8 16       	cp	r12, r24
    450a:	d9 06       	cpc	r13, r25
    450c:	ea 06       	cpc	r14, r26
    450e:	fb 06       	cpc	r15, r27
    4510:	48 f0       	brcs	.+18     	; 0x4524 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x14c>
    4512:	84 81       	ldd	r24, Z+4	; 0x04
    4514:	95 81       	ldd	r25, Z+5	; 0x05
    4516:	a6 81       	ldd	r26, Z+6	; 0x06
    4518:	b7 81       	ldd	r27, Z+7	; 0x07
    451a:	8c 15       	cp	r24, r12
    451c:	9d 05       	cpc	r25, r13
    451e:	ae 05       	cpc	r26, r14
    4520:	bf 05       	cpc	r27, r15
    4522:	30 f4       	brcc	.+12     	; 0x4530 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x158>
        {
            // Need to read the rest of the packet here regardless
            _dhcpUdpSocket.flush();
    4524:	87 2d       	mov	r24, r7
    4526:	96 2d       	mov	r25, r6
    4528:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN11EthernetUDP5flushEv>
            return 0;
    452c:	88 24       	eor	r8, r8
    452e:	ca c1       	rjmp	.+916    	; 0x48c4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ec>
        }

        memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);
    4530:	8f 89       	ldd	r24, Y+23	; 0x17
    4532:	98 8d       	ldd	r25, Y+24	; 0x18
    4534:	a9 8d       	ldd	r26, Y+25	; 0x19
    4536:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4538:	f2 01       	movw	r30, r4
    453a:	86 87       	std	Z+14, r24	; 0x0e
    453c:	97 87       	std	Z+15, r25	; 0x0f
    453e:	a0 8b       	std	Z+16, r26	; 0x10
    4540:	b1 8b       	std	Z+17, r27	; 0x11
    4542:	0e ec       	ldi	r16, 0xCE	; 206
    4544:	10 e0       	ldi	r17, 0x00	; 0
        // Skip to the option part
        // Doing this a byte at a time so we don't have to put a big buffer
        // on the stack (as we don't have lots of memory lying around)
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
        {
            _dhcpUdpSocket.read(); // we don't care about the returned byte
    4546:	87 2d       	mov	r24, r7
    4548:	96 2d       	mov	r25, r6
    454a:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
    454e:	01 50       	subi	r16, 0x01	; 1
    4550:	10 40       	sbci	r17, 0x00	; 0
        memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);

        // Skip to the option part
        // Doing this a byte at a time so we don't have to put a big buffer
        // on the stack (as we don't have lots of memory lying around)
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
    4552:	c9 f7       	brne	.-14     	; 0x4546 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16e>
    4554:	88 24       	eor	r8, r8
                    _dhcpT2 = ntohl(_dhcpT2);
                    break;

                case dhcpIPaddrLeaseTime :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
    4556:	0f 2e       	mov	r0, r31
    4558:	f2 e2       	ldi	r31, 0x22	; 34
    455a:	ef 2e       	mov	r14, r31
    455c:	ff 24       	eor	r15, r15
    455e:	f0 2d       	mov	r31, r0
    4560:	e4 0c       	add	r14, r4
    4562:	f5 1c       	adc	r15, r5
                    }
                    break;

                case dhcpT1value : 
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
    4564:	0f 2e       	mov	r0, r31
    4566:	f6 e2       	ldi	r31, 0x26	; 38
    4568:	af 2e       	mov	r10, r31
    456a:	bb 24       	eor	r11, r11
    456c:	f0 2d       	mov	r31, r0
    456e:	a4 0c       	add	r10, r4
    4570:	b5 1c       	adc	r11, r5
                    _dhcpT1 = ntohl(_dhcpT1);
                    break;

                case dhcpT2value : 
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
    4572:	c2 01       	movw	r24, r4
    4574:	8a 96       	adiw	r24, 0x2a	; 42
    4576:	9a a7       	lds	r25, 0x7a
    4578:	89 a7       	lds	r24, 0x79
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
                    {
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
    457a:	f2 01       	movw	r30, r4
    457c:	7a 96       	adiw	r30, 0x1a	; 26
    457e:	fa ab       	sts	0x5a, r31
    4580:	e9 ab       	sts	0x59, r30

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4582:	c2 01       	movw	r24, r4
    4584:	88 5a       	subi	r24, 0xA8	; 168
    4586:	9f 4f       	sbci	r25, 0xFF	; 255
    4588:	9c ab       	sts	0x5c, r25
    458a:	8b ab       	sts	0x5b, r24
                    type = _dhcpUdpSocket.read();
                    break;
                
                case subnetMask :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpSubnetMask, 4);
    458c:	f2 01       	movw	r30, r4
    458e:	72 96       	adiw	r30, 0x12	; 18
    4590:	fc a7       	lds	r31, 0x7c
    4592:	eb a7       	lds	r30, 0x7b
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
    4594:	c2 01       	movw	r24, r4
    4596:	46 96       	adiw	r24, 0x16	; 22
    4598:	9e a7       	lds	r25, 0x7e
    459a:	8d a7       	lds	r24, 0x7d
                    for (int i = 0; i < opt_len-4; i++)
    459c:	22 24       	eor	r2, r2
    459e:	33 24       	eor	r3, r3
                    }
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
    45a0:	f2 01       	movw	r30, r4
    45a2:	7e 96       	adiw	r30, 0x1e	; 30
    45a4:	f8 ab       	sts	0x58, r31
    45a6:	ef a7       	lds	r30, 0x7f
    45a8:	67 01       	movw	r12, r14
    45aa:	79 c1       	rjmp	.+754    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
            _dhcpUdpSocket.read(); // we don't care about the returned byte
        }

        while (_dhcpUdpSocket.available() > 0) 
        {
            switch (_dhcpUdpSocket.read()) 
    45ac:	87 2d       	mov	r24, r7
    45ae:	96 2d       	mov	r25, r6
    45b0:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
    45b4:	83 33       	cpi	r24, 0x33	; 51
    45b6:	91 05       	cpc	r25, r1
    45b8:	09 f4       	brne	.+2      	; 0x45bc <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1e4>
    45ba:	29 c1       	rjmp	.+594    	; 0x480e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x436>
    45bc:	84 33       	cpi	r24, 0x34	; 52
    45be:	91 05       	cpc	r25, r1
    45c0:	94 f4       	brge	.+36     	; 0x45e6 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x20e>
    45c2:	81 30       	cpi	r24, 0x01	; 1
    45c4:	91 05       	cpc	r25, r1
    45c6:	89 f1       	breq	.+98     	; 0x462a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x252>
    45c8:	82 30       	cpi	r24, 0x02	; 2
    45ca:	91 05       	cpc	r25, r1
    45cc:	24 f4       	brge	.+8      	; 0x45d6 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1fe>
    45ce:	00 97       	sbiw	r24, 0x00	; 0
    45d0:	09 f4       	brne	.+2      	; 0x45d4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1fc>
    45d2:	65 c1       	rjmp	.+714    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
    45d4:	57 c1       	rjmp	.+686    	; 0x4884 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    45d6:	83 30       	cpi	r24, 0x03	; 3
    45d8:	91 05       	cpc	r25, r1
    45da:	a1 f1       	breq	.+104    	; 0x4644 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x26c>
    45dc:	86 30       	cpi	r24, 0x06	; 6
    45de:	91 05       	cpc	r25, r1
    45e0:	09 f0       	breq	.+2      	; 0x45e4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x20c>
    45e2:	50 c1       	rjmp	.+672    	; 0x4884 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    45e4:	4f c0       	rjmp	.+158    	; 0x4684 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2ac>
    45e6:	8a 33       	cpi	r24, 0x3A	; 58
    45e8:	91 05       	cpc	r25, r1
    45ea:	09 f4       	brne	.+2      	; 0x45ee <_ZN9DhcpClass17parseDHCPResponseEmRm+0x216>
    45ec:	a1 c0       	rjmp	.+322    	; 0x4730 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x358>
    45ee:	8b 33       	cpi	r24, 0x3B	; 59
    45f0:	91 05       	cpc	r25, r1
    45f2:	44 f4       	brge	.+16     	; 0x4604 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x22c>
    45f4:	85 33       	cpi	r24, 0x35	; 53
    45f6:	91 05       	cpc	r25, r1
    45f8:	71 f0       	breq	.+28     	; 0x4616 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x23e>
    45fa:	86 33       	cpi	r24, 0x36	; 54
    45fc:	91 05       	cpc	r25, r1
    45fe:	09 f0       	breq	.+2      	; 0x4602 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x22a>
    4600:	41 c1       	rjmp	.+642    	; 0x4884 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    4602:	60 c0       	rjmp	.+192    	; 0x46c4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2ec>
    4604:	8b 33       	cpi	r24, 0x3B	; 59
    4606:	91 05       	cpc	r25, r1
    4608:	09 f4       	brne	.+2      	; 0x460c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x234>
    460a:	c9 c0       	rjmp	.+402    	; 0x479e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x3c6>
    460c:	8f 3f       	cpi	r24, 0xFF	; 255
    460e:	91 05       	cpc	r25, r1
    4610:	09 f0       	breq	.+2      	; 0x4614 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x23c>
    4612:	38 c1       	rjmp	.+624    	; 0x4884 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    4614:	44 c1       	rjmp	.+648    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                    
                case padOption :
                    break;
                
                case dhcpMessageType :
                    opt_len = _dhcpUdpSocket.read();
    4616:	87 2d       	mov	r24, r7
    4618:	96 2d       	mov	r25, r6
    461a:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
                    type = _dhcpUdpSocket.read();
    461e:	87 2d       	mov	r24, r7
    4620:	96 2d       	mov	r25, r6
    4622:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
    4626:	88 2e       	mov	r8, r24
                    break;
    4628:	3a c1       	rjmp	.+628    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                
                case subnetMask :
                    opt_len = _dhcpUdpSocket.read();
    462a:	87 2d       	mov	r24, r7
    462c:	96 2d       	mov	r25, r6
    462e:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read(_dhcpSubnetMask, 4);
    4632:	87 2d       	mov	r24, r7
    4634:	96 2d       	mov	r25, r6
    4636:	6b a5       	lds	r22, 0x6b
    4638:	7c a5       	lds	r23, 0x6c
    463a:	44 e0       	ldi	r20, 0x04	; 4
    463c:	50 e0       	ldi	r21, 0x00	; 0
    463e:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
                    break;
    4642:	2d c1       	rjmp	.+602    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
    4644:	87 2d       	mov	r24, r7
    4646:	96 2d       	mov	r25, r6
    4648:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
    464c:	08 2f       	mov	r16, r24
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
    464e:	87 2d       	mov	r24, r7
    4650:	96 2d       	mov	r25, r6
    4652:	6d a5       	lds	r22, 0x6d
    4654:	7e a5       	lds	r23, 0x6e
    4656:	44 e0       	ldi	r20, 0x04	; 4
    4658:	50 e0       	ldi	r21, 0x00	; 0
    465a:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
                    for (int i = 0; i < opt_len-4; i++)
    465e:	10 e0       	ldi	r17, 0x00	; 0
    4660:	04 50       	subi	r16, 0x04	; 4
    4662:	10 40       	sbci	r17, 0x00	; 0
    4664:	10 16       	cp	r1, r16
    4666:	11 06       	cpc	r1, r17
    4668:	0c f0       	brlt	.+2      	; 0x466c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x294>
    466a:	19 c1       	rjmp	.+562    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
    466c:	71 01       	movw	r14, r2
                    {
                        _dhcpUdpSocket.read();
    466e:	87 2d       	mov	r24, r7
    4670:	96 2d       	mov	r25, r6
    4672:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
                    for (int i = 0; i < opt_len-4; i++)
    4676:	08 94       	sec
    4678:	e1 1c       	adc	r14, r1
    467a:	f1 1c       	adc	r15, r1
    467c:	e0 16       	cp	r14, r16
    467e:	f1 06       	cpc	r15, r17
    4680:	b4 f3       	brlt	.-20     	; 0x466e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x296>
    4682:	0d c1       	rjmp	.+538    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        _dhcpUdpSocket.read();
                    }
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
    4684:	87 2d       	mov	r24, r7
    4686:	96 2d       	mov	r25, r6
    4688:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
    468c:	08 2f       	mov	r16, r24
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
    468e:	87 2d       	mov	r24, r7
    4690:	96 2d       	mov	r25, r6
    4692:	6f a5       	lds	r22, 0x6f
    4694:	78 a9       	sts	0x48, r23
    4696:	44 e0       	ldi	r20, 0x04	; 4
    4698:	50 e0       	ldi	r21, 0x00	; 0
    469a:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
                    for (int i = 0; i < opt_len-4; i++)
    469e:	10 e0       	ldi	r17, 0x00	; 0
    46a0:	04 50       	subi	r16, 0x04	; 4
    46a2:	10 40       	sbci	r17, 0x00	; 0
    46a4:	10 16       	cp	r1, r16
    46a6:	11 06       	cpc	r1, r17
    46a8:	0c f0       	brlt	.+2      	; 0x46ac <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2d4>
    46aa:	f9 c0       	rjmp	.+498    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
    46ac:	71 01       	movw	r14, r2
                    {
                        _dhcpUdpSocket.read();
    46ae:	87 2d       	mov	r24, r7
    46b0:	96 2d       	mov	r25, r6
    46b2:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
                    for (int i = 0; i < opt_len-4; i++)
    46b6:	08 94       	sec
    46b8:	e1 1c       	adc	r14, r1
    46ba:	f1 1c       	adc	r15, r1
    46bc:	e0 16       	cp	r14, r16
    46be:	f1 06       	cpc	r15, r17
    46c0:	b4 f3       	brlt	.-20     	; 0x46ae <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2d6>
    46c2:	ed c0       	rjmp	.+474    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        _dhcpUdpSocket.read();
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
    46c4:	87 2d       	mov	r24, r7
    46c6:	96 2d       	mov	r25, r6
    46c8:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
    46cc:	18 2f       	mov	r17, r24
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
    46ce:	f2 01       	movw	r30, r4
    46d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    46d2:	93 8d       	ldd	r25, Z+27	; 0x1b
    46d4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    46d6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    46d8:	00 97       	sbiw	r24, 0x00	; 0
    46da:	a1 05       	cpc	r26, r1
    46dc:	b1 05       	cpc	r27, r1
    46de:	a9 f0       	breq	.+42     	; 0x470a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x332>
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
    46e0:	ce 01       	movw	r24, r28
    46e2:	01 96       	adiw	r24, 0x01	; 1
    46e4:	69 a9       	sts	0x49, r22
    46e6:	7a a9       	sts	0x4a, r23
    46e8:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN9IPAddressC1EPKh>
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
    46ec:	8b 81       	ldd	r24, Y+3	; 0x03
    46ee:	9c 81       	ldd	r25, Y+4	; 0x04
    46f0:	ad 81       	ldd	r26, Y+5	; 0x05
    46f2:	be 81       	ldd	r27, Y+6	; 0x06
    46f4:	eb a9       	sts	0x4b, r30
    46f6:	fc a9       	sts	0x4c, r31
    46f8:	40 81       	ld	r20, Z
    46fa:	51 81       	ldd	r21, Z+1	; 0x01
    46fc:	62 81       	ldd	r22, Z+2	; 0x02
    46fe:	73 81       	ldd	r23, Z+3	; 0x03
    4700:	84 17       	cp	r24, r20
    4702:	95 07       	cpc	r25, r21
    4704:	a6 07       	cpc	r26, r22
    4706:	b7 07       	cpc	r27, r23
    4708:	49 f4       	brne	.+18     	; 0x471c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x344>
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
                    {
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
    470a:	87 2d       	mov	r24, r7
    470c:	96 2d       	mov	r25, r6
    470e:	69 a9       	sts	0x49, r22
    4710:	7a a9       	sts	0x4a, r23
    4712:	44 e0       	ldi	r20, 0x04	; 4
    4714:	50 e0       	ldi	r21, 0x00	; 0
    4716:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
    471a:	c1 c0       	rjmp	.+386    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                    }
                    else
                    {
                        // Skip over the rest of this option
                        while (opt_len--)
    471c:	11 23       	and	r17, r17
    471e:	09 f4       	brne	.+2      	; 0x4722 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x34a>
    4720:	be c0       	rjmp	.+380    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        {
                            _dhcpUdpSocket.read();
    4722:	87 2d       	mov	r24, r7
    4724:	96 2d       	mov	r25, r6
    4726:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
    472a:	11 50       	subi	r17, 0x01	; 1
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
                    }
                    else
                    {
                        // Skip over the rest of this option
                        while (opt_len--)
    472c:	d1 f7       	brne	.-12     	; 0x4722 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x34a>
    472e:	b7 c0       	rjmp	.+366    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        }
                    }
                    break;

                case dhcpT1value : 
                    opt_len = _dhcpUdpSocket.read();
    4730:	87 2d       	mov	r24, r7
    4732:	96 2d       	mov	r25, r6
    4734:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
    4738:	87 2d       	mov	r24, r7
    473a:	96 2d       	mov	r25, r6
    473c:	b5 01       	movw	r22, r10
    473e:	44 e0       	ldi	r20, 0x04	; 4
    4740:	50 e0       	ldi	r21, 0x00	; 0
    4742:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
                    _dhcpT1 = ntohl(_dhcpT1);
    4746:	f2 01       	movw	r30, r4
    4748:	06 a1       	lds	r16, 0x46
    474a:	17 a1       	lds	r17, 0x47
    474c:	20 a5       	lds	r18, 0x60
    474e:	31 a5       	lds	r19, 0x61
    4750:	83 2f       	mov	r24, r19
    4752:	99 27       	eor	r25, r25
    4754:	aa 27       	eor	r26, r26
    4756:	bb 27       	eor	r27, r27
    4758:	70 2f       	mov	r23, r16
    475a:	66 27       	eor	r22, r22
    475c:	55 27       	eor	r21, r21
    475e:	44 27       	eor	r20, r20
    4760:	48 2b       	or	r20, r24
    4762:	59 2b       	or	r21, r25
    4764:	6a 2b       	or	r22, r26
    4766:	7b 2b       	or	r23, r27
    4768:	b2 2f       	mov	r27, r18
    476a:	a1 2f       	mov	r26, r17
    476c:	90 2f       	mov	r25, r16
    476e:	88 27       	eor	r24, r24
    4770:	80 70       	andi	r24, 0x00	; 0
    4772:	90 70       	andi	r25, 0x00	; 0
    4774:	b0 70       	andi	r27, 0x00	; 0
    4776:	48 2b       	or	r20, r24
    4778:	59 2b       	or	r21, r25
    477a:	6a 2b       	or	r22, r26
    477c:	7b 2b       	or	r23, r27
    477e:	bb 27       	eor	r27, r27
    4780:	a3 2f       	mov	r26, r19
    4782:	92 2f       	mov	r25, r18
    4784:	81 2f       	mov	r24, r17
    4786:	80 70       	andi	r24, 0x00	; 0
    4788:	a0 70       	andi	r26, 0x00	; 0
    478a:	b0 70       	andi	r27, 0x00	; 0
    478c:	84 2b       	or	r24, r20
    478e:	95 2b       	or	r25, r21
    4790:	a6 2b       	or	r26, r22
    4792:	b7 2b       	or	r27, r23
    4794:	86 a3       	lds	r24, 0x56
    4796:	97 a3       	lds	r25, 0x57
    4798:	a0 a7       	lds	r26, 0x70
    479a:	b1 a7       	lds	r27, 0x71
                    break;
    479c:	80 c0       	rjmp	.+256    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>

                case dhcpT2value : 
                    opt_len = _dhcpUdpSocket.read();
    479e:	87 2d       	mov	r24, r7
    47a0:	96 2d       	mov	r25, r6
    47a2:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
    47a6:	87 2d       	mov	r24, r7
    47a8:	96 2d       	mov	r25, r6
    47aa:	69 a5       	lds	r22, 0x69
    47ac:	7a a5       	lds	r23, 0x6a
    47ae:	44 e0       	ldi	r20, 0x04	; 4
    47b0:	50 e0       	ldi	r21, 0x00	; 0
    47b2:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
                    _dhcpT2 = ntohl(_dhcpT2);
    47b6:	f2 01       	movw	r30, r4
    47b8:	02 a5       	lds	r16, 0x62
    47ba:	13 a5       	lds	r17, 0x63
    47bc:	24 a5       	lds	r18, 0x64
    47be:	35 a5       	lds	r19, 0x65
    47c0:	83 2f       	mov	r24, r19
    47c2:	99 27       	eor	r25, r25
    47c4:	aa 27       	eor	r26, r26
    47c6:	bb 27       	eor	r27, r27
    47c8:	70 2f       	mov	r23, r16
    47ca:	66 27       	eor	r22, r22
    47cc:	55 27       	eor	r21, r21
    47ce:	44 27       	eor	r20, r20
    47d0:	48 2b       	or	r20, r24
    47d2:	59 2b       	or	r21, r25
    47d4:	6a 2b       	or	r22, r26
    47d6:	7b 2b       	or	r23, r27
    47d8:	b2 2f       	mov	r27, r18
    47da:	a1 2f       	mov	r26, r17
    47dc:	90 2f       	mov	r25, r16
    47de:	88 27       	eor	r24, r24
    47e0:	80 70       	andi	r24, 0x00	; 0
    47e2:	90 70       	andi	r25, 0x00	; 0
    47e4:	b0 70       	andi	r27, 0x00	; 0
    47e6:	48 2b       	or	r20, r24
    47e8:	59 2b       	or	r21, r25
    47ea:	6a 2b       	or	r22, r26
    47ec:	7b 2b       	or	r23, r27
    47ee:	bb 27       	eor	r27, r27
    47f0:	a3 2f       	mov	r26, r19
    47f2:	92 2f       	mov	r25, r18
    47f4:	81 2f       	mov	r24, r17
    47f6:	80 70       	andi	r24, 0x00	; 0
    47f8:	a0 70       	andi	r26, 0x00	; 0
    47fa:	b0 70       	andi	r27, 0x00	; 0
    47fc:	84 2b       	or	r24, r20
    47fe:	95 2b       	or	r25, r21
    4800:	a6 2b       	or	r26, r22
    4802:	b7 2b       	or	r27, r23
    4804:	82 a7       	lds	r24, 0x72
    4806:	93 a7       	lds	r25, 0x73
    4808:	a4 a7       	lds	r26, 0x74
    480a:	b5 a7       	lds	r27, 0x75
                    break;
    480c:	48 c0       	rjmp	.+144    	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>

                case dhcpIPaddrLeaseTime :
                    opt_len = _dhcpUdpSocket.read();
    480e:	87 2d       	mov	r24, r7
    4810:	96 2d       	mov	r25, r6
    4812:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
    4816:	87 2d       	mov	r24, r7
    4818:	96 2d       	mov	r25, r6
    481a:	b6 01       	movw	r22, r12
    481c:	44 e0       	ldi	r20, 0x04	; 4
    481e:	50 e0       	ldi	r21, 0x00	; 0
    4820:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
                    _dhcpLeaseTime = ntohl(_dhcpLeaseTime);
    4824:	f2 01       	movw	r30, r4
    4826:	02 a1       	lds	r16, 0x42
    4828:	13 a1       	lds	r17, 0x43
    482a:	24 a1       	lds	r18, 0x44
    482c:	35 a1       	lds	r19, 0x45
    482e:	83 2f       	mov	r24, r19
    4830:	99 27       	eor	r25, r25
    4832:	aa 27       	eor	r26, r26
    4834:	bb 27       	eor	r27, r27
    4836:	70 2f       	mov	r23, r16
    4838:	66 27       	eor	r22, r22
    483a:	55 27       	eor	r21, r21
    483c:	44 27       	eor	r20, r20
    483e:	48 2b       	or	r20, r24
    4840:	59 2b       	or	r21, r25
    4842:	6a 2b       	or	r22, r26
    4844:	7b 2b       	or	r23, r27
    4846:	b2 2f       	mov	r27, r18
    4848:	a1 2f       	mov	r26, r17
    484a:	90 2f       	mov	r25, r16
    484c:	88 27       	eor	r24, r24
    484e:	80 70       	andi	r24, 0x00	; 0
    4850:	90 70       	andi	r25, 0x00	; 0
    4852:	b0 70       	andi	r27, 0x00	; 0
    4854:	48 2b       	or	r20, r24
    4856:	59 2b       	or	r21, r25
    4858:	6a 2b       	or	r22, r26
    485a:	7b 2b       	or	r23, r27
    485c:	bb 27       	eor	r27, r27
    485e:	a3 2f       	mov	r26, r19
    4860:	92 2f       	mov	r25, r18
    4862:	81 2f       	mov	r24, r17
    4864:	80 70       	andi	r24, 0x00	; 0
    4866:	a0 70       	andi	r26, 0x00	; 0
    4868:	b0 70       	andi	r27, 0x00	; 0
    486a:	84 2b       	or	r24, r20
    486c:	95 2b       	or	r25, r21
    486e:	a6 2b       	or	r26, r22
    4870:	b7 2b       	or	r27, r23
    4872:	82 a3       	lds	r24, 0x52
    4874:	93 a3       	lds	r25, 0x53
    4876:	a4 a3       	lds	r26, 0x54
    4878:	b5 a3       	lds	r27, 0x55
                    _renewInSec = _dhcpLeaseTime;
    487a:	86 a7       	lds	r24, 0x76
    487c:	97 a7       	lds	r25, 0x77
    487e:	a0 ab       	sts	0x50, r26
    4880:	b1 ab       	sts	0x51, r27
                    break;
    4882:	0d c0       	rjmp	.+26     	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>

                default :
                    opt_len = _dhcpUdpSocket.read();
    4884:	87 2d       	mov	r24, r7
    4886:	96 2d       	mov	r25, r6
    4888:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
    488c:	18 2f       	mov	r17, r24
                    // Skip over the rest of this option
                    while (opt_len--)
    488e:	88 23       	and	r24, r24
    4890:	31 f0       	breq	.+12     	; 0x489e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                    {
                        _dhcpUdpSocket.read();
    4892:	87 2d       	mov	r24, r7
    4894:	96 2d       	mov	r25, r6
    4896:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
    489a:	11 50       	subi	r17, 0x01	; 1
                    break;

                default :
                    opt_len = _dhcpUdpSocket.read();
                    // Skip over the rest of this option
                    while (opt_len--)
    489c:	d1 f7       	brne	.-12     	; 0x4892 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ba>
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
        {
            _dhcpUdpSocket.read(); // we don't care about the returned byte
        }

        while (_dhcpUdpSocket.available() > 0) 
    489e:	87 2d       	mov	r24, r7
    48a0:	96 2d       	mov	r25, r6
    48a2:	0e 94 6d 05 	call	0xada	; 0xada <_ZN11EthernetUDP9availableEv>
    48a6:	18 16       	cp	r1, r24
    48a8:	19 06       	cpc	r1, r25
    48aa:	0c f4       	brge	.+2      	; 0x48ae <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4d6>
    48ac:	7f ce       	rjmp	.-770    	; 0x45ac <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1d4>
    48ae:	03 c0       	rjmp	.+6      	; 0x48b6 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4de>
    _dhcpUdpSocket.endPacket();
}

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
    uint8_t type = 0;
    48b0:	88 24       	eor	r8, r8
    48b2:	01 c0       	rjmp	.+2      	; 0x48b6 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4de>
    48b4:	88 24       	eor	r8, r8
            }
        }
    }

    // Need to skip to end of the packet regardless here
    _dhcpUdpSocket.flush();
    48b6:	87 2d       	mov	r24, r7
    48b8:	96 2d       	mov	r25, r6
    48ba:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN11EthernetUDP5flushEv>

    return type;
    48be:	02 c0       	rjmp	.+4      	; 0x48c4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ec>

    while(_dhcpUdpSocket.parsePacket() <= 0)
    {
        if((millis() - startTime) > responseTimeout)
        {
            return 255;
    48c0:	88 24       	eor	r8, r8
    48c2:	8a 94       	dec	r8

    // Need to skip to end of the packet regardless here
    _dhcpUdpSocket.flush();

    return type;
}
    48c4:	88 2d       	mov	r24, r8
    48c6:	e4 96       	adiw	r28, 0x34	; 52
    48c8:	0f b6       	in	r0, 0x3f	; 63
    48ca:	f8 94       	cli
    48cc:	de bf       	out	0x3e, r29	; 62
    48ce:	0f be       	out	0x3f, r0	; 63
    48d0:	cd bf       	out	0x3d, r28	; 61
    48d2:	df 91       	pop	r29
    48d4:	cf 91       	pop	r28
    48d6:	1f 91       	pop	r17
    48d8:	0f 91       	pop	r16
    48da:	ff 90       	pop	r15
    48dc:	ef 90       	pop	r14
    48de:	df 90       	pop	r13
    48e0:	cf 90       	pop	r12
    48e2:	bf 90       	pop	r11
    48e4:	af 90       	pop	r10
    48e6:	9f 90       	pop	r9
    48e8:	8f 90       	pop	r8
    48ea:	7f 90       	pop	r7
    48ec:	6f 90       	pop	r6
    48ee:	5f 90       	pop	r5
    48f0:	4f 90       	pop	r4
    48f2:	3f 90       	pop	r3
    48f4:	2f 90       	pop	r2
    48f6:	08 95       	ret

000048f8 <_ZN9DhcpClass10getLocalIpEv>:
    _lastCheck = now;
    return rc;
}

IPAddress DhcpClass::getLocalIp()
{
    48f8:	cf 93       	push	r28
    48fa:	df 93       	push	r29
    48fc:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpLocalIp);
    48fe:	62 5f       	subi	r22, 0xF2	; 242
    4900:	7f 4f       	sbci	r23, 0xFF	; 255
    4902:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN9IPAddressC1EPKh>
}
    4906:	ce 01       	movw	r24, r28
    4908:	df 91       	pop	r29
    490a:	cf 91       	pop	r28
    490c:	08 95       	ret

0000490e <_ZN9DhcpClass13getSubnetMaskEv>:

IPAddress DhcpClass::getSubnetMask()
{
    490e:	cf 93       	push	r28
    4910:	df 93       	push	r29
    4912:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpSubnetMask);
    4914:	6e 5e       	subi	r22, 0xEE	; 238
    4916:	7f 4f       	sbci	r23, 0xFF	; 255
    4918:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN9IPAddressC1EPKh>
}
    491c:	ce 01       	movw	r24, r28
    491e:	df 91       	pop	r29
    4920:	cf 91       	pop	r28
    4922:	08 95       	ret

00004924 <_ZN9DhcpClass12getGatewayIpEv>:

IPAddress DhcpClass::getGatewayIp()
{
    4924:	cf 93       	push	r28
    4926:	df 93       	push	r29
    4928:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpGatewayIp);
    492a:	6a 5e       	subi	r22, 0xEA	; 234
    492c:	7f 4f       	sbci	r23, 0xFF	; 255
    492e:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN9IPAddressC1EPKh>
}
    4932:	ce 01       	movw	r24, r28
    4934:	df 91       	pop	r29
    4936:	cf 91       	pop	r28
    4938:	08 95       	ret

0000493a <_ZN9DhcpClass15getDhcpServerIpEv>:

IPAddress DhcpClass::getDhcpServerIp()
{
    493a:	cf 93       	push	r28
    493c:	df 93       	push	r29
    493e:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpDhcpServerIp);
    4940:	66 5e       	subi	r22, 0xE6	; 230
    4942:	7f 4f       	sbci	r23, 0xFF	; 255
    4944:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN9IPAddressC1EPKh>
}
    4948:	ce 01       	movw	r24, r28
    494a:	df 91       	pop	r29
    494c:	cf 91       	pop	r28
    494e:	08 95       	ret

00004950 <_ZN9DhcpClass14getDnsServerIpEv>:

IPAddress DhcpClass::getDnsServerIp()
{
    4950:	cf 93       	push	r28
    4952:	df 93       	push	r29
    4954:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpDnsServerIp);
    4956:	62 5e       	subi	r22, 0xE2	; 226
    4958:	7f 4f       	sbci	r23, 0xFF	; 255
    495a:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN9IPAddressC1EPKh>
}
    495e:	ce 01       	movw	r24, r28
    4960:	df 91       	pop	r29
    4962:	cf 91       	pop	r28
    4964:	08 95       	ret

00004966 <_ZN9DhcpClass9printByteEPch>:

void DhcpClass::printByte(char * buf, uint8_t n ) {
  char *str = &buf[1];
  buf[0]='0';
    4966:	80 e3       	ldi	r24, 0x30	; 48
    4968:	fb 01       	movw	r30, r22
    496a:	80 83       	st	Z, r24
IPAddress DhcpClass::getDnsServerIp()
{
    return IPAddress(_dhcpDnsServerIp);
}

void DhcpClass::printByte(char * buf, uint8_t n ) {
    496c:	32 96       	adiw	r30, 0x02	; 2
    496e:	01 c0       	rjmp	.+2      	; 0x4972 <_ZN9DhcpClass9printByteEPch+0xc>
  char *str = &buf[1];
  buf[0]='0';
  do {
    unsigned long m = n;
    n /= 16;
    4970:	48 2f       	mov	r20, r24
    char c = m - 16 * n;
    4972:	84 2f       	mov	r24, r20
    4974:	82 95       	swap	r24
    4976:	8f 70       	andi	r24, 0x0F	; 15
    4978:	4f 70       	andi	r20, 0x0F	; 15
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
    497a:	4a 30       	cpi	r20, 0x0A	; 10
    497c:	10 f4       	brcc	.+4      	; 0x4982 <_ZN9DhcpClass9printByteEPch+0x1c>
    497e:	40 5d       	subi	r20, 0xD0	; 208
    4980:	01 c0       	rjmp	.+2      	; 0x4984 <_ZN9DhcpClass9printByteEPch+0x1e>
    4982:	49 5c       	subi	r20, 0xC9	; 201
    4984:	42 93       	st	-Z, r20
}

void DhcpClass::printByte(char * buf, uint8_t n ) {
  char *str = &buf[1];
  buf[0]='0';
  do {
    4986:	88 23       	and	r24, r24
    4988:	99 f7       	brne	.-26     	; 0x4970 <_ZN9DhcpClass9printByteEPch+0xa>
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    498a:	08 95       	ret

0000498c <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>:
void DhcpClass::presend_DHCP()
{
}

void DhcpClass::send_DHCP_MESSAGE(uint8_t messageType, uint16_t secondsElapsed)
{
    498c:	9f 92       	push	r9
    498e:	af 92       	push	r10
    4990:	bf 92       	push	r11
    4992:	cf 92       	push	r12
    4994:	df 92       	push	r13
    4996:	ef 92       	push	r14
    4998:	ff 92       	push	r15
    499a:	0f 93       	push	r16
    499c:	1f 93       	push	r17
    499e:	cf 93       	push	r28
    49a0:	df 93       	push	r29
    49a2:	cd b7       	in	r28, 0x3d	; 61
    49a4:	de b7       	in	r29, 0x3e	; 62
    49a6:	ac 97       	sbiw	r28, 0x2c	; 44
    49a8:	0f b6       	in	r0, 0x3f	; 63
    49aa:	f8 94       	cli
    49ac:	de bf       	out	0x3e, r29	; 62
    49ae:	0f be       	out	0x3f, r0	; 63
    49b0:	cd bf       	out	0x3d, r28	; 61
    49b2:	5c 01       	movw	r10, r24
    49b4:	96 2e       	mov	r9, r22
    49b6:	d4 2e       	mov	r13, r20
    49b8:	c5 2e       	mov	r12, r21
    uint8_t buffer[32];
    memset(buffer, 0, 32);
    49ba:	80 e2       	ldi	r24, 0x20	; 32
    49bc:	fe 01       	movw	r30, r28
    49be:	3d 96       	adiw	r30, 0x0d	; 13
    49c0:	df 01       	movw	r26, r30
    49c2:	1d 92       	st	X+, r1
    49c4:	8a 95       	dec	r24
    49c6:	e9 f7       	brne	.-6      	; 0x49c2 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x36>
    IPAddress dest_addr( 255, 255, 255, 255 ); // Broadcast address
    49c8:	ce 01       	movw	r24, r28
    49ca:	07 96       	adiw	r24, 0x07	; 7
    49cc:	6f ef       	ldi	r22, 0xFF	; 255
    49ce:	4f ef       	ldi	r20, 0xFF	; 255
    49d0:	2f ef       	ldi	r18, 0xFF	; 255
    49d2:	0f ef       	ldi	r16, 0xFF	; 255
    49d4:	0e 94 5f 13 	call	0x26be	; 0x26be <_ZN9IPAddressC1Ehhhh>

    if (-1 == _dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT))
    49d8:	0f 2e       	mov	r0, r31
    49da:	f7 e4       	ldi	r31, 0x47	; 71
    49dc:	ef 2e       	mov	r14, r31
    49de:	ff 24       	eor	r15, r15
    49e0:	f0 2d       	mov	r31, r0
    49e2:	ea 0c       	add	r14, r10
    49e4:	fb 1c       	adc	r15, r11
    49e6:	83 ea       	ldi	r24, 0xA3	; 163
    49e8:	92 e0       	ldi	r25, 0x02	; 2
    49ea:	9a 83       	std	Y+2, r25	; 0x02
    49ec:	89 83       	std	Y+1, r24	; 0x01
    49ee:	89 85       	ldd	r24, Y+9	; 0x09
    49f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    49f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    49f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    49f6:	8b 83       	std	Y+3, r24	; 0x03
    49f8:	9c 83       	std	Y+4, r25	; 0x04
    49fa:	ad 83       	std	Y+5, r26	; 0x05
    49fc:	be 83       	std	Y+6, r27	; 0x06
    49fe:	c7 01       	movw	r24, r14
    4a00:	be 01       	movw	r22, r28
    4a02:	6f 5f       	subi	r22, 0xFF	; 255
    4a04:	7f 4f       	sbci	r23, 0xFF	; 255
    4a06:	43 e4       	ldi	r20, 0x43	; 67
    4a08:	50 e0       	ldi	r21, 0x00	; 0
    4a0a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN11EthernetUDP11beginPacketE9IPAddressj>
    4a0e:	bf ef       	ldi	r27, 0xFF	; 255
    4a10:	8f 3f       	cpi	r24, 0xFF	; 255
    4a12:	9b 07       	cpc	r25, r27
    4a14:	09 f4       	brne	.+2      	; 0x4a18 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x8c>
    4a16:	f3 c0       	rjmp	.+486    	; 0x4bfe <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x272>
    {
        // FIXME Need to return errors
        return;
    }

    buffer[0] = DHCP_BOOTREQUEST;   // op
    4a18:	81 e0       	ldi	r24, 0x01	; 1
    4a1a:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = DHCP_HTYPE10MB;     // htype
    4a1c:	8e 87       	std	Y+14, r24	; 0x0e
    buffer[2] = DHCP_HLENETHERNET;  // hlen
    4a1e:	86 e0       	ldi	r24, 0x06	; 6
    4a20:	8f 87       	std	Y+15, r24	; 0x0f
    buffer[3] = DHCP_HOPS;          // hops
    4a22:	18 8a       	std	Y+16, r1	; 0x10

    // xid
    unsigned long xid = htonl(_dhcpTransactionId);
    4a24:	f5 01       	movw	r30, r10
    4a26:	04 81       	ldd	r16, Z+4	; 0x04
    4a28:	15 81       	ldd	r17, Z+5	; 0x05
    4a2a:	26 81       	ldd	r18, Z+6	; 0x06
    4a2c:	37 81       	ldd	r19, Z+7	; 0x07
    4a2e:	43 2f       	mov	r20, r19
    4a30:	55 27       	eor	r21, r21
    4a32:	66 27       	eor	r22, r22
    4a34:	77 27       	eor	r23, r23
    4a36:	b0 2f       	mov	r27, r16
    4a38:	aa 27       	eor	r26, r26
    4a3a:	99 27       	eor	r25, r25
    4a3c:	88 27       	eor	r24, r24
    4a3e:	48 2b       	or	r20, r24
    4a40:	59 2b       	or	r21, r25
    4a42:	6a 2b       	or	r22, r26
    4a44:	7b 2b       	or	r23, r27
    4a46:	b2 2f       	mov	r27, r18
    4a48:	a1 2f       	mov	r26, r17
    4a4a:	90 2f       	mov	r25, r16
    4a4c:	88 27       	eor	r24, r24
    4a4e:	80 70       	andi	r24, 0x00	; 0
    4a50:	90 70       	andi	r25, 0x00	; 0
    4a52:	b0 70       	andi	r27, 0x00	; 0
    4a54:	84 2b       	or	r24, r20
    4a56:	95 2b       	or	r25, r21
    4a58:	a6 2b       	or	r26, r22
    4a5a:	b7 2b       	or	r27, r23
    4a5c:	01 2f       	mov	r16, r17
    4a5e:	12 2f       	mov	r17, r18
    4a60:	23 2f       	mov	r18, r19
    4a62:	33 27       	eor	r19, r19
    4a64:	00 70       	andi	r16, 0x00	; 0
    4a66:	20 70       	andi	r18, 0x00	; 0
    4a68:	30 70       	andi	r19, 0x00	; 0
    4a6a:	80 2b       	or	r24, r16
    4a6c:	91 2b       	or	r25, r17
    4a6e:	a2 2b       	or	r26, r18
    4a70:	b3 2b       	or	r27, r19
    memcpy(buffer + 4, &(xid), 4);
    4a72:	89 8b       	std	Y+17, r24	; 0x11
    4a74:	9a 8b       	std	Y+18, r25	; 0x12
    4a76:	ab 8b       	std	Y+19, r26	; 0x13
    4a78:	bc 8b       	std	Y+20, r27	; 0x14

    // 8, 9 - seconds elapsed
    buffer[8] = ((secondsElapsed & 0xff00) >> 8);
    4a7a:	cd 8a       	std	Y+21, r12	; 0x15
    buffer[9] = (secondsElapsed & 0x00ff);
    4a7c:	de 8a       	std	Y+22, r13	; 0x16

    // flags
    unsigned short flags = htons(DHCP_FLAGSBROADCAST);
    memcpy(buffer + 10, &(flags), 2);
    4a7e:	80 e8       	ldi	r24, 0x80	; 128
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	98 8f       	std	Y+24, r25	; 0x18
    4a84:	8f 8b       	std	Y+23, r24	; 0x17
    // yiaddr: already zeroed
    // siaddr: already zeroed
    // giaddr: already zeroed

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 28);
    4a86:	8e 01       	movw	r16, r28
    4a88:	03 5f       	subi	r16, 0xF3	; 243
    4a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a8c:	c7 01       	movw	r24, r14
    4a8e:	b8 01       	movw	r22, r16
    4a90:	4c e1       	ldi	r20, 0x1C	; 28
    4a92:	50 e0       	ldi	r21, 0x00	; 0
    4a94:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>

    memset(buffer, 0, 32); // clear local buffer
    4a98:	80 e2       	ldi	r24, 0x20	; 32
    4a9a:	d8 01       	movw	r26, r16
    4a9c:	1d 92       	st	X+, r1
    4a9e:	8a 95       	dec	r24
    4aa0:	e9 f7       	brne	.-6      	; 0x4a9c <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x110>

    memcpy(buffer, _dhcpMacAddr, 6); // chaddr
    4aa2:	cc 24       	eor	r12, r12
    4aa4:	dd 24       	eor	r13, r13
    4aa6:	68 94       	set
    4aa8:	c3 f8       	bld	r12, 3
    4aaa:	ca 0c       	add	r12, r10
    4aac:	db 1c       	adc	r13, r11
    4aae:	f8 01       	movw	r30, r16
    4ab0:	d6 01       	movw	r26, r12
    4ab2:	86 e0       	ldi	r24, 0x06	; 6
    4ab4:	0d 90       	ld	r0, X+
    4ab6:	01 92       	st	Z+, r0
    4ab8:	81 50       	subi	r24, 0x01	; 1
    4aba:	e1 f7       	brne	.-8      	; 0x4ab4 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x128>

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 16);
    4abc:	8e 01       	movw	r16, r28
    4abe:	03 5f       	subi	r16, 0xF3	; 243
    4ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac2:	c7 01       	movw	r24, r14
    4ac4:	b8 01       	movw	r22, r16
    4ac6:	40 e1       	ldi	r20, 0x10	; 16
    4ac8:	50 e0       	ldi	r21, 0x00	; 0
    4aca:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>

    memset(buffer, 0, 32); // clear local buffer
    4ace:	80 e2       	ldi	r24, 0x20	; 32
    4ad0:	f8 01       	movw	r30, r16
    4ad2:	11 92       	st	Z+, r1
    4ad4:	8a 95       	dec	r24
    4ad6:	e9 f7       	brne	.-6      	; 0x4ad2 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x146>
    4ad8:	06 e0       	ldi	r16, 0x06	; 6
    4ada:	10 e0       	ldi	r17, 0x00	; 0

    // leave zeroed out for sname && file
    // put in W5100 transmit buffer x 6 (192 bytes)
  
    for(int i = 0; i < 6; i++) {
        _dhcpUdpSocket.write(buffer, 32);
    4adc:	c7 01       	movw	r24, r14
    4ade:	be 01       	movw	r22, r28
    4ae0:	63 5f       	subi	r22, 0xF3	; 243
    4ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae4:	40 e2       	ldi	r20, 0x20	; 32
    4ae6:	50 e0       	ldi	r21, 0x00	; 0
    4ae8:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>
    4aec:	01 50       	subi	r16, 0x01	; 1
    4aee:	10 40       	sbci	r17, 0x00	; 0
    memset(buffer, 0, 32); // clear local buffer

    // leave zeroed out for sname && file
    // put in W5100 transmit buffer x 6 (192 bytes)
  
    for(int i = 0; i < 6; i++) {
    4af0:	a9 f7       	brne	.-22     	; 0x4adc <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x150>
        _dhcpUdpSocket.write(buffer, 32);
    }
  
    // OPT - Magic Cookie
    buffer[0] = (uint8_t)((MAGIC_COOKIE >> 24)& 0xFF);
    4af2:	83 e6       	ldi	r24, 0x63	; 99
    4af4:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = (uint8_t)((MAGIC_COOKIE >> 16)& 0xFF);
    4af6:	92 e8       	ldi	r25, 0x82	; 130
    4af8:	9e 87       	std	Y+14, r25	; 0x0e
    buffer[2] = (uint8_t)((MAGIC_COOKIE >> 8)& 0xFF);
    4afa:	93 e5       	ldi	r25, 0x53	; 83
    4afc:	9f 87       	std	Y+15, r25	; 0x0f
    buffer[3] = (uint8_t)(MAGIC_COOKIE& 0xFF);
    4afe:	88 8b       	std	Y+16, r24	; 0x10

    // OPT - message type
    buffer[4] = dhcpMessageType;
    4b00:	85 e3       	ldi	r24, 0x35	; 53
    4b02:	89 8b       	std	Y+17, r24	; 0x11
    buffer[5] = 0x01;
    4b04:	81 e0       	ldi	r24, 0x01	; 1
    4b06:	8a 8b       	std	Y+18, r24	; 0x12
    buffer[6] = messageType; //DHCP_REQUEST;
    4b08:	9b 8a       	std	Y+19, r9	; 0x13

    // OPT - client identifier
    buffer[7] = dhcpClientIdentifier;
    4b0a:	9d e3       	ldi	r25, 0x3D	; 61
    4b0c:	9c 8b       	std	Y+20, r25	; 0x14
    buffer[8] = 0x07;
    4b0e:	97 e0       	ldi	r25, 0x07	; 7
    4b10:	9d 8b       	std	Y+21, r25	; 0x15
    buffer[9] = 0x01;
    4b12:	8e 8b       	std	Y+22, r24	; 0x16
    memcpy(buffer + 10, _dhcpMacAddr, 6);
    4b14:	fe 01       	movw	r30, r28
    4b16:	77 96       	adiw	r30, 0x17	; 23
    4b18:	d6 01       	movw	r26, r12
    4b1a:	86 e0       	ldi	r24, 0x06	; 6
    4b1c:	0d 90       	ld	r0, X+
    4b1e:	01 92       	st	Z+, r0
    4b20:	81 50       	subi	r24, 0x01	; 1
    4b22:	e1 f7       	brne	.-8      	; 0x4b1c <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x190>

    // OPT - host name
    buffer[16] = hostName;
    4b24:	8c e0       	ldi	r24, 0x0C	; 12
    4b26:	8d 8f       	std	Y+29, r24	; 0x1d
    buffer[17] = strlen(HOST_NAME) + 6; // length of hostname + last 3 bytes of mac address
    4b28:	8e 8f       	std	Y+30, r24	; 0x1e
    strcpy((char*)&(buffer[18]), HOST_NAME);
    4b2a:	fe 01       	movw	r30, r28
    4b2c:	7f 96       	adiw	r30, 0x1f	; 31
    4b2e:	a6 eb       	ldi	r26, 0xB6	; 182
    4b30:	b2 e0       	ldi	r27, 0x02	; 2
    4b32:	87 e0       	ldi	r24, 0x07	; 7
    4b34:	0d 90       	ld	r0, X+
    4b36:	01 92       	st	Z+, r0
    4b38:	81 50       	subi	r24, 0x01	; 1
    4b3a:	e1 f7       	brne	.-8      	; 0x4b34 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x1a8>

    printByte((char*)&(buffer[24]), _dhcpMacAddr[3]);
    4b3c:	c5 01       	movw	r24, r10
    4b3e:	be 01       	movw	r22, r28
    4b40:	6b 5d       	subi	r22, 0xDB	; 219
    4b42:	7f 4f       	sbci	r23, 0xFF	; 255
    4b44:	d5 01       	movw	r26, r10
    4b46:	1b 96       	adiw	r26, 0x0b	; 11
    4b48:	4c 91       	ld	r20, X
    4b4a:	0e 94 b3 24 	call	0x4966	; 0x4966 <_ZN9DhcpClass9printByteEPch>
    printByte((char*)&(buffer[26]), _dhcpMacAddr[4]);
    4b4e:	c5 01       	movw	r24, r10
    4b50:	be 01       	movw	r22, r28
    4b52:	69 5d       	subi	r22, 0xD9	; 217
    4b54:	7f 4f       	sbci	r23, 0xFF	; 255
    4b56:	f5 01       	movw	r30, r10
    4b58:	44 85       	ldd	r20, Z+12	; 0x0c
    4b5a:	0e 94 b3 24 	call	0x4966	; 0x4966 <_ZN9DhcpClass9printByteEPch>
    printByte((char*)&(buffer[28]), _dhcpMacAddr[5]);
    4b5e:	c5 01       	movw	r24, r10
    4b60:	be 01       	movw	r22, r28
    4b62:	67 5d       	subi	r22, 0xD7	; 215
    4b64:	7f 4f       	sbci	r23, 0xFF	; 255
    4b66:	d5 01       	movw	r26, r10
    4b68:	1d 96       	adiw	r26, 0x0d	; 13
    4b6a:	4c 91       	ld	r20, X
    4b6c:	0e 94 b3 24 	call	0x4966	; 0x4966 <_ZN9DhcpClass9printByteEPch>

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 30);
    4b70:	c7 01       	movw	r24, r14
    4b72:	be 01       	movw	r22, r28
    4b74:	63 5f       	subi	r22, 0xF3	; 243
    4b76:	7f 4f       	sbci	r23, 0xFF	; 255
    4b78:	4e e1       	ldi	r20, 0x1E	; 30
    4b7a:	50 e0       	ldi	r21, 0x00	; 0
    4b7c:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>

    if(messageType == DHCP_REQUEST)
    4b80:	b3 e0       	ldi	r27, 0x03	; 3
    4b82:	9b 16       	cp	r9, r27
    4b84:	01 f5       	brne	.+64     	; 0x4bc6 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x23a>
    {
        buffer[0] = dhcpRequestedIPaddr;
    4b86:	82 e3       	ldi	r24, 0x32	; 50
    4b88:	8d 87       	std	Y+13, r24	; 0x0d
        buffer[1] = 0x04;
    4b8a:	84 e0       	ldi	r24, 0x04	; 4
    4b8c:	8e 87       	std	Y+14, r24	; 0x0e
        buffer[2] = _dhcpLocalIp[0];
    4b8e:	f5 01       	movw	r30, r10
    4b90:	96 85       	ldd	r25, Z+14	; 0x0e
    4b92:	9f 87       	std	Y+15, r25	; 0x0f
        buffer[3] = _dhcpLocalIp[1];
    4b94:	97 85       	ldd	r25, Z+15	; 0x0f
    4b96:	98 8b       	std	Y+16, r25	; 0x10
        buffer[4] = _dhcpLocalIp[2];
    4b98:	90 89       	ldd	r25, Z+16	; 0x10
    4b9a:	99 8b       	std	Y+17, r25	; 0x11
        buffer[5] = _dhcpLocalIp[3];
    4b9c:	91 89       	ldd	r25, Z+17	; 0x11
    4b9e:	9a 8b       	std	Y+18, r25	; 0x12

        buffer[6] = dhcpServerIdentifier;
    4ba0:	96 e3       	ldi	r25, 0x36	; 54
    4ba2:	9b 8b       	std	Y+19, r25	; 0x13
        buffer[7] = 0x04;
    4ba4:	8c 8b       	std	Y+20, r24	; 0x14
        buffer[8] = _dhcpDhcpServerIp[0];
    4ba6:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ba8:	8d 8b       	std	Y+21, r24	; 0x15
        buffer[9] = _dhcpDhcpServerIp[1];
    4baa:	83 8d       	ldd	r24, Z+27	; 0x1b
    4bac:	8e 8b       	std	Y+22, r24	; 0x16
        buffer[10] = _dhcpDhcpServerIp[2];
    4bae:	84 8d       	ldd	r24, Z+28	; 0x1c
    4bb0:	8f 8b       	std	Y+23, r24	; 0x17
        buffer[11] = _dhcpDhcpServerIp[3];
    4bb2:	85 8d       	ldd	r24, Z+29	; 0x1d
    4bb4:	88 8f       	std	Y+24, r24	; 0x18

        //put data in W5100 transmit buffer
        _dhcpUdpSocket.write(buffer, 12);
    4bb6:	c7 01       	movw	r24, r14
    4bb8:	be 01       	movw	r22, r28
    4bba:	63 5f       	subi	r22, 0xF3	; 243
    4bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    4bbe:	4c e0       	ldi	r20, 0x0C	; 12
    4bc0:	50 e0       	ldi	r21, 0x00	; 0
    4bc2:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>
    }
    
    buffer[0] = dhcpParamRequest;
    4bc6:	87 e3       	ldi	r24, 0x37	; 55
    4bc8:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = 0x06;
    4bca:	86 e0       	ldi	r24, 0x06	; 6
    4bcc:	8e 87       	std	Y+14, r24	; 0x0e
    buffer[2] = subnetMask;
    4bce:	91 e0       	ldi	r25, 0x01	; 1
    4bd0:	9f 87       	std	Y+15, r25	; 0x0f
    buffer[3] = routersOnSubnet;
    4bd2:	93 e0       	ldi	r25, 0x03	; 3
    4bd4:	98 8b       	std	Y+16, r25	; 0x10
    buffer[4] = dns;
    4bd6:	89 8b       	std	Y+17, r24	; 0x11
    buffer[5] = domainName;
    4bd8:	8f e0       	ldi	r24, 0x0F	; 15
    4bda:	8a 8b       	std	Y+18, r24	; 0x12
    buffer[6] = dhcpT1value;
    4bdc:	8a e3       	ldi	r24, 0x3A	; 58
    4bde:	8b 8b       	std	Y+19, r24	; 0x13
    buffer[7] = dhcpT2value;
    4be0:	8b e3       	ldi	r24, 0x3B	; 59
    4be2:	8c 8b       	std	Y+20, r24	; 0x14
    buffer[8] = endOption;
    4be4:	8f ef       	ldi	r24, 0xFF	; 255
    4be6:	8d 8b       	std	Y+21, r24	; 0x15
    
    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 9);
    4be8:	c7 01       	movw	r24, r14
    4bea:	be 01       	movw	r22, r28
    4bec:	63 5f       	subi	r22, 0xF3	; 243
    4bee:	7f 4f       	sbci	r23, 0xFF	; 255
    4bf0:	49 e0       	ldi	r20, 0x09	; 9
    4bf2:	50 e0       	ldi	r21, 0x00	; 0
    4bf4:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>

    _dhcpUdpSocket.endPacket();
    4bf8:	c7 01       	movw	r24, r14
    4bfa:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN11EthernetUDP9endPacketEv>
}
    4bfe:	ac 96       	adiw	r28, 0x2c	; 44
    4c00:	0f b6       	in	r0, 0x3f	; 63
    4c02:	f8 94       	cli
    4c04:	de bf       	out	0x3e, r29	; 62
    4c06:	0f be       	out	0x3f, r0	; 63
    4c08:	cd bf       	out	0x3d, r28	; 61
    4c0a:	df 91       	pop	r29
    4c0c:	cf 91       	pop	r28
    4c0e:	1f 91       	pop	r17
    4c10:	0f 91       	pop	r16
    4c12:	ff 90       	pop	r15
    4c14:	ef 90       	pop	r14
    4c16:	df 90       	pop	r13
    4c18:	cf 90       	pop	r12
    4c1a:	bf 90       	pop	r11
    4c1c:	af 90       	pop	r10
    4c1e:	9f 90       	pop	r9
    4c20:	08 95       	ret

00004c22 <_ZN9DhcpClass18request_DHCP_leaseEv>:
    // zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
    memset(_dhcpLocalIp, 0, 20);
}

//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease(){
    4c22:	2f 92       	push	r2
    4c24:	3f 92       	push	r3
    4c26:	4f 92       	push	r4
    4c28:	5f 92       	push	r5
    4c2a:	6f 92       	push	r6
    4c2c:	7f 92       	push	r7
    4c2e:	8f 92       	push	r8
    4c30:	9f 92       	push	r9
    4c32:	af 92       	push	r10
    4c34:	bf 92       	push	r11
    4c36:	cf 92       	push	r12
    4c38:	df 92       	push	r13
    4c3a:	ef 92       	push	r14
    4c3c:	ff 92       	push	r15
    4c3e:	0f 93       	push	r16
    4c40:	1f 93       	push	r17
    4c42:	cf 93       	push	r28
    4c44:	df 93       	push	r29
    4c46:	cd b7       	in	r28, 0x3d	; 61
    4c48:	de b7       	in	r29, 0x3e	; 62
    4c4a:	2a 97       	sbiw	r28, 0x0a	; 10
    4c4c:	0f b6       	in	r0, 0x3f	; 63
    4c4e:	f8 94       	cli
    4c50:	de bf       	out	0x3e, r29	; 62
    4c52:	0f be       	out	0x3f, r0	; 63
    4c54:	cd bf       	out	0x3d, r28	; 61
    4c56:	8c 01       	movw	r16, r24
    uint8_t messageType = 0;
  
    
  
    // Pick an initial transaction ID
    _dhcpTransactionId = random(1UL, 2000UL);
    4c58:	61 e0       	ldi	r22, 0x01	; 1
    4c5a:	70 e0       	ldi	r23, 0x00	; 0
    4c5c:	80 e0       	ldi	r24, 0x00	; 0
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	20 ed       	ldi	r18, 0xD0	; 208
    4c62:	37 e0       	ldi	r19, 0x07	; 7
    4c64:	40 e0       	ldi	r20, 0x00	; 0
    4c66:	50 e0       	ldi	r21, 0x00	; 0
    4c68:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <_Z6randomll>
    4c6c:	d8 01       	movw	r26, r16
    4c6e:	14 96       	adiw	r26, 0x04	; 4
    4c70:	6c 93       	st	X, r22
    4c72:	14 97       	sbiw	r26, 0x04	; 4
    4c74:	15 96       	adiw	r26, 0x05	; 5
    4c76:	7c 93       	st	X, r23
    4c78:	15 97       	sbiw	r26, 0x05	; 5
    4c7a:	16 96       	adiw	r26, 0x06	; 6
    4c7c:	8c 93       	st	X, r24
    4c7e:	16 97       	sbiw	r26, 0x06	; 6
    4c80:	17 96       	adiw	r26, 0x07	; 7
    4c82:	9c 93       	st	X, r25
    4c84:	17 97       	sbiw	r26, 0x07	; 7
    _dhcpInitialTransactionId = _dhcpTransactionId;
    4c86:	6c 93       	st	X, r22
    4c88:	11 96       	adiw	r26, 0x01	; 1
    4c8a:	7c 93       	st	X, r23
    4c8c:	11 97       	sbiw	r26, 0x01	; 1
    4c8e:	12 96       	adiw	r26, 0x02	; 2
    4c90:	8c 93       	st	X, r24
    4c92:	12 97       	sbiw	r26, 0x02	; 2
    4c94:	13 96       	adiw	r26, 0x03	; 3
    4c96:	9c 93       	st	X, r25

    if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0)
    4c98:	f8 01       	movw	r30, r16
    4c9a:	e9 5b       	subi	r30, 0xB9	; 185
    4c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9e:	f8 87       	std	Y+8, r31	; 0x08
    4ca0:	ef 83       	std	Y+7, r30	; 0x07
    4ca2:	cf 01       	movw	r24, r30
    4ca4:	64 e4       	ldi	r22, 0x44	; 68
    4ca6:	70 e0       	ldi	r23, 0x00	; 0
    4ca8:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN11EthernetUDP5beginEj>
    4cac:	88 23       	and	r24, r24
    4cae:	09 f4       	brne	.+2      	; 0x4cb2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x90>
    4cb0:	41 c1       	rjmp	.+642    	; 0x4f34 <_ZN9DhcpClass18request_DHCP_leaseEv+0x312>
    
    presend_DHCP();
    
    int result = 0;
    
    unsigned long startTime = millis();
    4cb2:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    4cb6:	4b 01       	movw	r8, r22
    4cb8:	5c 01       	movw	r10, r24
      return 0;
    }
    
    presend_DHCP();
    
    int result = 0;
    4cba:	cc 24       	eor	r12, r12
    4cbc:	dd 24       	eor	r13, r13
}

//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease(){
    
    uint8_t messageType = 0;
    4cbe:	ff 24       	eor	r15, r15
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    4cc0:	0f 2e       	mov	r0, r31
    4cc2:	f6 e4       	ldi	r31, 0x46	; 70
    4cc4:	6f 2e       	mov	r6, r31
    4cc6:	77 24       	eor	r7, r7
    4cc8:	f0 2d       	mov	r31, r0
    4cca:	60 0e       	add	r6, r16
    4ccc:	71 1e       	adc	r7, r17
                _dhcp_state = STATE_DHCP_START;
        }
        
        if(messageType == 255)
        {
            messageType = 0;
    4cce:	ee 24       	eor	r14, r14
            }
        }
        else if(_dhcp_state == STATE_DHCP_REQUEST)
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    4cd0:	c8 01       	movw	r24, r16
    4cd2:	ce 96       	adiw	r24, 0x3e	; 62
    4cd4:	9a 87       	std	Y+10, r25	; 0x0a
    4cd6:	89 87       	std	Y+9, r24	; 0x09
            if(messageType == DHCP_OFFER)
            {
                // We'll use the transaction ID that the offer came with,
                // rather than the one we were up to
                _dhcpTransactionId = respId;
                send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime) / 1000));
    4cd8:	0f 2e       	mov	r0, r31
    4cda:	f8 ee       	ldi	r31, 0xE8	; 232
    4cdc:	2f 2e       	mov	r2, r31
    4cde:	f3 e0       	ldi	r31, 0x03	; 3
    4ce0:	3f 2e       	mov	r3, r31
    4ce2:	f0 e0       	ldi	r31, 0x00	; 0
    4ce4:	4f 2e       	mov	r4, r31
    4ce6:	f0 e0       	ldi	r31, 0x00	; 0
    4ce8:	5f 2e       	mov	r5, r31
    4cea:	f0 2d       	mov	r31, r0
    4cec:	7e 82       	std	Y+6, r7	; 0x06
    4cee:	6d 82       	std	Y+5, r6	; 0x05
    4cf0:	38 01       	movw	r6, r16
    4cf2:	0f 2d       	mov	r16, r15
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    4cf4:	08 c1       	rjmp	.+528    	; 0x4f06 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e4>
    {
        if(_dhcp_state == STATE_DHCP_START)
    4cf6:	88 23       	and	r24, r24
    4cf8:	21 f5       	brne	.+72     	; 0x4d42 <_ZN9DhcpClass18request_DHCP_leaseEv+0x120>
        {
            _dhcpTransactionId++;
    4cfa:	f3 01       	movw	r30, r6
    4cfc:	84 81       	ldd	r24, Z+4	; 0x04
    4cfe:	95 81       	ldd	r25, Z+5	; 0x05
    4d00:	a6 81       	ldd	r26, Z+6	; 0x06
    4d02:	b7 81       	ldd	r27, Z+7	; 0x07
    4d04:	01 96       	adiw	r24, 0x01	; 1
    4d06:	a1 1d       	adc	r26, r1
    4d08:	b1 1d       	adc	r27, r1
    4d0a:	84 83       	std	Z+4, r24	; 0x04
    4d0c:	95 83       	std	Z+5, r25	; 0x05
    4d0e:	a6 83       	std	Z+6, r26	; 0x06
    4d10:	b7 83       	std	Z+7, r27	; 0x07
            
            send_DHCP_MESSAGE(DHCP_DISCOVER, ((millis() - startTime) / 1000));
    4d12:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    4d16:	dc 01       	movw	r26, r24
    4d18:	cb 01       	movw	r24, r22
    4d1a:	88 19       	sub	r24, r8
    4d1c:	99 09       	sbc	r25, r9
    4d1e:	aa 09       	sbc	r26, r10
    4d20:	bb 09       	sbc	r27, r11
    4d22:	bc 01       	movw	r22, r24
    4d24:	cd 01       	movw	r24, r26
    4d26:	a2 01       	movw	r20, r4
    4d28:	91 01       	movw	r18, r2
    4d2a:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    4d2e:	c3 01       	movw	r24, r6
    4d30:	61 e0       	ldi	r22, 0x01	; 1
    4d32:	a9 01       	movw	r20, r18
    4d34:	0e 94 c6 24 	call	0x498c	; 0x498c <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
            _dhcp_state = STATE_DHCP_DISCOVER;
    4d38:	81 e0       	ldi	r24, 0x01	; 1
    4d3a:	ad 81       	ldd	r26, Y+5	; 0x05
    4d3c:	be 81       	ldd	r27, Y+6	; 0x06
    4d3e:	8c 93       	st	X, r24
    4d40:	c6 c0       	rjmp	.+396    	; 0x4ece <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
        }
        else if(_dhcp_state == STATE_DHCP_REREQUEST){
    4d42:	84 30       	cpi	r24, 0x04	; 4
    4d44:	21 f5       	brne	.+72     	; 0x4d8e <_ZN9DhcpClass18request_DHCP_leaseEv+0x16c>
            _dhcpTransactionId++;
    4d46:	f3 01       	movw	r30, r6
    4d48:	84 81       	ldd	r24, Z+4	; 0x04
    4d4a:	95 81       	ldd	r25, Z+5	; 0x05
    4d4c:	a6 81       	ldd	r26, Z+6	; 0x06
    4d4e:	b7 81       	ldd	r27, Z+7	; 0x07
    4d50:	01 96       	adiw	r24, 0x01	; 1
    4d52:	a1 1d       	adc	r26, r1
    4d54:	b1 1d       	adc	r27, r1
    4d56:	84 83       	std	Z+4, r24	; 0x04
    4d58:	95 83       	std	Z+5, r25	; 0x05
    4d5a:	a6 83       	std	Z+6, r26	; 0x06
    4d5c:	b7 83       	std	Z+7, r27	; 0x07
            send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime)/1000));
    4d5e:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    4d62:	dc 01       	movw	r26, r24
    4d64:	cb 01       	movw	r24, r22
    4d66:	88 19       	sub	r24, r8
    4d68:	99 09       	sbc	r25, r9
    4d6a:	aa 09       	sbc	r26, r10
    4d6c:	bb 09       	sbc	r27, r11
    4d6e:	bc 01       	movw	r22, r24
    4d70:	cd 01       	movw	r24, r26
    4d72:	a2 01       	movw	r20, r4
    4d74:	91 01       	movw	r18, r2
    4d76:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    4d7a:	c3 01       	movw	r24, r6
    4d7c:	63 e0       	ldi	r22, 0x03	; 3
    4d7e:	a9 01       	movw	r20, r18
    4d80:	0e 94 c6 24 	call	0x498c	; 0x498c <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
            _dhcp_state = STATE_DHCP_REQUEST;
    4d84:	e2 e0       	ldi	r30, 0x02	; 2
    4d86:	ad 81       	ldd	r26, Y+5	; 0x05
    4d88:	be 81       	ldd	r27, Y+6	; 0x06
    4d8a:	ec 93       	st	X, r30
    4d8c:	a0 c0       	rjmp	.+320    	; 0x4ece <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
        }
        else if(_dhcp_state == STATE_DHCP_DISCOVER)
    4d8e:	81 30       	cpi	r24, 0x01	; 1
    4d90:	89 f5       	brne	.+98     	; 0x4df4 <_ZN9DhcpClass18request_DHCP_leaseEv+0x1d2>
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    4d92:	a9 85       	ldd	r26, Y+9	; 0x09
    4d94:	ba 85       	ldd	r27, Y+10	; 0x0a
    4d96:	4d 91       	ld	r20, X+
    4d98:	5d 91       	ld	r21, X+
    4d9a:	6d 91       	ld	r22, X+
    4d9c:	7c 91       	ld	r23, X
    4d9e:	c3 01       	movw	r24, r6
    4da0:	9e 01       	movw	r18, r28
    4da2:	2f 5f       	subi	r18, 0xFF	; 255
    4da4:	3f 4f       	sbci	r19, 0xFF	; 255
    4da6:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_ZN9DhcpClass17parseDHCPResponseEmRm>
    4daa:	08 2f       	mov	r16, r24
            if(messageType == DHCP_OFFER)
    4dac:	82 30       	cpi	r24, 0x02	; 2
    4dae:	09 f0       	breq	.+2      	; 0x4db2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x190>
    4db0:	8e c0       	rjmp	.+284    	; 0x4ece <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
            {
                // We'll use the transaction ID that the offer came with,
                // rather than the one we were up to
                _dhcpTransactionId = respId;
    4db2:	89 81       	ldd	r24, Y+1	; 0x01
    4db4:	9a 81       	ldd	r25, Y+2	; 0x02
    4db6:	ab 81       	ldd	r26, Y+3	; 0x03
    4db8:	bc 81       	ldd	r27, Y+4	; 0x04
    4dba:	f3 01       	movw	r30, r6
    4dbc:	84 83       	std	Z+4, r24	; 0x04
    4dbe:	95 83       	std	Z+5, r25	; 0x05
    4dc0:	a6 83       	std	Z+6, r26	; 0x06
    4dc2:	b7 83       	std	Z+7, r27	; 0x07
                send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime) / 1000));
    4dc4:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    4dc8:	dc 01       	movw	r26, r24
    4dca:	cb 01       	movw	r24, r22
    4dcc:	88 19       	sub	r24, r8
    4dce:	99 09       	sbc	r25, r9
    4dd0:	aa 09       	sbc	r26, r10
    4dd2:	bb 09       	sbc	r27, r11
    4dd4:	bc 01       	movw	r22, r24
    4dd6:	cd 01       	movw	r24, r26
    4dd8:	a2 01       	movw	r20, r4
    4dda:	91 01       	movw	r18, r2
    4ddc:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    4de0:	c3 01       	movw	r24, r6
    4de2:	63 e0       	ldi	r22, 0x03	; 3
    4de4:	a9 01       	movw	r20, r18
    4de6:	0e 94 c6 24 	call	0x498c	; 0x498c <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
                _dhcp_state = STATE_DHCP_REQUEST;
    4dea:	e2 e0       	ldi	r30, 0x02	; 2
    4dec:	ad 81       	ldd	r26, Y+5	; 0x05
    4dee:	be 81       	ldd	r27, Y+6	; 0x06
    4df0:	ec 93       	st	X, r30
    4df2:	73 c0       	rjmp	.+230    	; 0x4eda <_ZN9DhcpClass18request_DHCP_leaseEv+0x2b8>
            }
        }
        else if(_dhcp_state == STATE_DHCP_REQUEST)
    4df4:	82 30       	cpi	r24, 0x02	; 2
    4df6:	09 f0       	breq	.+2      	; 0x4dfa <_ZN9DhcpClass18request_DHCP_leaseEv+0x1d8>
    4df8:	6a c0       	rjmp	.+212    	; 0x4ece <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    4dfa:	a9 85       	ldd	r26, Y+9	; 0x09
    4dfc:	ba 85       	ldd	r27, Y+10	; 0x0a
    4dfe:	4d 91       	ld	r20, X+
    4e00:	5d 91       	ld	r21, X+
    4e02:	6d 91       	ld	r22, X+
    4e04:	7c 91       	ld	r23, X
    4e06:	c3 01       	movw	r24, r6
    4e08:	9e 01       	movw	r18, r28
    4e0a:	2f 5f       	subi	r18, 0xFF	; 255
    4e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e0e:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <_ZN9DhcpClass17parseDHCPResponseEmRm>
    4e12:	08 2f       	mov	r16, r24
            if(messageType == DHCP_ACK)
    4e14:	85 30       	cpi	r24, 0x05	; 5
    4e16:	09 f0       	breq	.+2      	; 0x4e1a <_ZN9DhcpClass18request_DHCP_leaseEv+0x1f8>
    4e18:	54 c0       	rjmp	.+168    	; 0x4ec2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2a0>
            {
                _dhcp_state = STATE_DHCP_LEASED;
    4e1a:	83 e0       	ldi	r24, 0x03	; 3
    4e1c:	ed 81       	ldd	r30, Y+5	; 0x05
    4e1e:	fe 81       	ldd	r31, Y+6	; 0x06
    4e20:	80 83       	st	Z, r24
                result = 1;
                //use default lease time if we didn't get it
                if(_dhcpLeaseTime == 0){
    4e22:	f3 01       	movw	r30, r6
    4e24:	82 a1       	lds	r24, 0x42
    4e26:	93 a1       	lds	r25, 0x43
    4e28:	a4 a1       	lds	r26, 0x44
    4e2a:	b5 a1       	lds	r27, 0x45
    4e2c:	00 97       	sbiw	r24, 0x00	; 0
    4e2e:	a1 05       	cpc	r26, r1
    4e30:	b1 05       	cpc	r27, r1
    4e32:	41 f4       	brne	.+16     	; 0x4e44 <_ZN9DhcpClass18request_DHCP_leaseEv+0x222>
                    _dhcpLeaseTime = DEFAULT_LEASE;
    4e34:	84 e8       	ldi	r24, 0x84	; 132
    4e36:	93 e0       	ldi	r25, 0x03	; 3
    4e38:	a0 e0       	ldi	r26, 0x00	; 0
    4e3a:	b0 e0       	ldi	r27, 0x00	; 0
    4e3c:	82 a3       	lds	r24, 0x52
    4e3e:	93 a3       	lds	r25, 0x53
    4e40:	a4 a3       	lds	r26, 0x54
    4e42:	b5 a3       	lds	r27, 0x55
                }
                //calculate T1 & T2 if we didn't get it
                if(_dhcpT1 == 0){
    4e44:	f3 01       	movw	r30, r6
    4e46:	86 a1       	lds	r24, 0x46
    4e48:	97 a1       	lds	r25, 0x47
    4e4a:	a0 a5       	lds	r26, 0x60
    4e4c:	b1 a5       	lds	r27, 0x61
    4e4e:	00 97       	sbiw	r24, 0x00	; 0
    4e50:	a1 05       	cpc	r26, r1
    4e52:	b1 05       	cpc	r27, r1
    4e54:	61 f4       	brne	.+24     	; 0x4e6e <_ZN9DhcpClass18request_DHCP_leaseEv+0x24c>
                    //T1 should be 50% of _dhcpLeaseTime
                    _dhcpT1 = _dhcpLeaseTime >> 1;
    4e56:	82 a1       	lds	r24, 0x42
    4e58:	93 a1       	lds	r25, 0x43
    4e5a:	a4 a1       	lds	r26, 0x44
    4e5c:	b5 a1       	lds	r27, 0x45
    4e5e:	b6 95       	lsr	r27
    4e60:	a7 95       	ror	r26
    4e62:	97 95       	ror	r25
    4e64:	87 95       	ror	r24
    4e66:	86 a3       	lds	r24, 0x56
    4e68:	97 a3       	lds	r25, 0x57
    4e6a:	a0 a7       	lds	r26, 0x70
    4e6c:	b1 a7       	lds	r27, 0x71
                }
                if(_dhcpT2 == 0){
    4e6e:	f3 01       	movw	r30, r6
    4e70:	82 a5       	lds	r24, 0x62
    4e72:	93 a5       	lds	r25, 0x63
    4e74:	a4 a5       	lds	r26, 0x64
    4e76:	b5 a5       	lds	r27, 0x65
    4e78:	00 97       	sbiw	r24, 0x00	; 0
    4e7a:	a1 05       	cpc	r26, r1
    4e7c:	b1 05       	cpc	r27, r1
    4e7e:	61 f4       	brne	.+24     	; 0x4e98 <_ZN9DhcpClass18request_DHCP_leaseEv+0x276>
                    //T2 should be 87.5% (7/8ths) of _dhcpLeaseTime
                    _dhcpT2 = _dhcpT1 << 1;
    4e80:	86 a1       	lds	r24, 0x46
    4e82:	97 a1       	lds	r25, 0x47
    4e84:	a0 a5       	lds	r26, 0x60
    4e86:	b1 a5       	lds	r27, 0x61
    4e88:	88 0f       	add	r24, r24
    4e8a:	99 1f       	adc	r25, r25
    4e8c:	aa 1f       	adc	r26, r26
    4e8e:	bb 1f       	adc	r27, r27
    4e90:	82 a7       	lds	r24, 0x72
    4e92:	93 a7       	lds	r25, 0x73
    4e94:	a4 a7       	lds	r26, 0x74
    4e96:	b5 a7       	lds	r27, 0x75
                }
                _renewInSec = _dhcpT1;
    4e98:	f3 01       	movw	r30, r6
    4e9a:	86 a1       	lds	r24, 0x46
    4e9c:	97 a1       	lds	r25, 0x47
    4e9e:	a0 a5       	lds	r26, 0x60
    4ea0:	b1 a5       	lds	r27, 0x61
    4ea2:	86 a7       	lds	r24, 0x76
    4ea4:	97 a7       	lds	r25, 0x77
    4ea6:	a0 ab       	sts	0x50, r26
    4ea8:	b1 ab       	sts	0x51, r27
                _rebindInSec = _dhcpT2;
    4eaa:	82 a5       	lds	r24, 0x62
    4eac:	93 a5       	lds	r25, 0x63
    4eae:	a4 a5       	lds	r26, 0x64
    4eb0:	b5 a5       	lds	r27, 0x65
    4eb2:	82 ab       	sts	0x52, r24
    4eb4:	93 ab       	sts	0x53, r25
    4eb6:	a4 ab       	sts	0x54, r26
    4eb8:	b5 ab       	sts	0x55, r27
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
            if(messageType == DHCP_ACK)
            {
                _dhcp_state = STATE_DHCP_LEASED;
                result = 1;
    4eba:	cc 24       	eor	r12, r12
    4ebc:	dd 24       	eor	r13, r13
    4ebe:	c3 94       	inc	r12
    4ec0:	06 c0       	rjmp	.+12     	; 0x4ece <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
                    _dhcpT2 = _dhcpT1 << 1;
                }
                _renewInSec = _dhcpT1;
                _rebindInSec = _dhcpT2;
            }
            else if(messageType == DHCP_NAK)
    4ec2:	86 30       	cpi	r24, 0x06	; 6
    4ec4:	21 f4       	brne	.+8      	; 0x4ece <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
                _dhcp_state = STATE_DHCP_START;
    4ec6:	ad 81       	ldd	r26, Y+5	; 0x05
    4ec8:	be 81       	ldd	r27, Y+6	; 0x06
    4eca:	1c 92       	st	X, r1
    4ecc:	06 c0       	rjmp	.+12     	; 0x4eda <_ZN9DhcpClass18request_DHCP_leaseEv+0x2b8>
        }
        
        if(messageType == 255)
    4ece:	0f 3f       	cpi	r16, 0xFF	; 255
    4ed0:	21 f4       	brne	.+8      	; 0x4eda <_ZN9DhcpClass18request_DHCP_leaseEv+0x2b8>
        {
            messageType = 0;
            _dhcp_state = STATE_DHCP_START;
    4ed2:	ed 81       	ldd	r30, Y+5	; 0x05
    4ed4:	fe 81       	ldd	r31, Y+6	; 0x06
    4ed6:	10 82       	st	Z, r1
                _dhcp_state = STATE_DHCP_START;
        }
        
        if(messageType == 255)
        {
            messageType = 0;
    4ed8:	0e 2d       	mov	r16, r14
            _dhcp_state = STATE_DHCP_START;
        }
        
        if(result != 1 && ((millis() - startTime) > _timeout))
    4eda:	f1 e0       	ldi	r31, 0x01	; 1
    4edc:	cf 16       	cp	r12, r31
    4ede:	d1 04       	cpc	r13, r1
    4ee0:	91 f0       	breq	.+36     	; 0x4f06 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e4>
    4ee2:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    4ee6:	dc 01       	movw	r26, r24
    4ee8:	cb 01       	movw	r24, r22
    4eea:	88 19       	sub	r24, r8
    4eec:	99 09       	sbc	r25, r9
    4eee:	aa 09       	sbc	r26, r10
    4ef0:	bb 09       	sbc	r27, r11
    4ef2:	f3 01       	movw	r30, r6
    4ef4:	42 ad       	sts	0x62, r20
    4ef6:	53 ad       	sts	0x63, r21
    4ef8:	64 ad       	sts	0x64, r22
    4efa:	75 ad       	sts	0x65, r23
    4efc:	48 17       	cp	r20, r24
    4efe:	59 07       	cpc	r21, r25
    4f00:	6a 07       	cpc	r22, r26
    4f02:	7b 07       	cpc	r23, r27
    4f04:	30 f0       	brcs	.+12     	; 0x4f12 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2f0>
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    4f06:	ad 81       	ldd	r26, Y+5	; 0x05
    4f08:	be 81       	ldd	r27, Y+6	; 0x06
    4f0a:	8c 91       	ld	r24, X
    4f0c:	83 30       	cpi	r24, 0x03	; 3
    4f0e:	09 f0       	breq	.+2      	; 0x4f12 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2f0>
    4f10:	f2 ce       	rjmp	.-540    	; 0x4cf6 <_ZN9DhcpClass18request_DHCP_leaseEv+0xd4>
        if(result != 1 && ((millis() - startTime) > _timeout))
            break;
    }
    
    // We're done with the socket now
    _dhcpUdpSocket.stop();
    4f12:	8f 81       	ldd	r24, Y+7	; 0x07
    4f14:	98 85       	ldd	r25, Y+8	; 0x08
    4f16:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_ZN11EthernetUDP4stopEv>
    _dhcpTransactionId++;
    4f1a:	f3 01       	movw	r30, r6
    4f1c:	84 81       	ldd	r24, Z+4	; 0x04
    4f1e:	95 81       	ldd	r25, Z+5	; 0x05
    4f20:	a6 81       	ldd	r26, Z+6	; 0x06
    4f22:	b7 81       	ldd	r27, Z+7	; 0x07
    4f24:	01 96       	adiw	r24, 0x01	; 1
    4f26:	a1 1d       	adc	r26, r1
    4f28:	b1 1d       	adc	r27, r1
    4f2a:	84 83       	std	Z+4, r24	; 0x04
    4f2c:	95 83       	std	Z+5, r25	; 0x05
    4f2e:	a6 83       	std	Z+6, r26	; 0x06
    4f30:	b7 83       	std	Z+7, r27	; 0x07

    return result;
    4f32:	02 c0       	rjmp	.+4      	; 0x4f38 <_ZN9DhcpClass18request_DHCP_leaseEv+0x316>
    _dhcpInitialTransactionId = _dhcpTransactionId;

    if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0)
    {
      // Couldn't get a socket
      return 0;
    4f34:	cc 24       	eor	r12, r12
    4f36:	dd 24       	eor	r13, r13
    // We're done with the socket now
    _dhcpUdpSocket.stop();
    _dhcpTransactionId++;

    return result;
}
    4f38:	8c 2d       	mov	r24, r12
    4f3a:	9d 2d       	mov	r25, r13
    4f3c:	2a 96       	adiw	r28, 0x0a	; 10
    4f3e:	0f b6       	in	r0, 0x3f	; 63
    4f40:	f8 94       	cli
    4f42:	de bf       	out	0x3e, r29	; 62
    4f44:	0f be       	out	0x3f, r0	; 63
    4f46:	cd bf       	out	0x3d, r28	; 61
    4f48:	df 91       	pop	r29
    4f4a:	cf 91       	pop	r28
    4f4c:	1f 91       	pop	r17
    4f4e:	0f 91       	pop	r16
    4f50:	ff 90       	pop	r15
    4f52:	ef 90       	pop	r14
    4f54:	df 90       	pop	r13
    4f56:	cf 90       	pop	r12
    4f58:	bf 90       	pop	r11
    4f5a:	af 90       	pop	r10
    4f5c:	9f 90       	pop	r9
    4f5e:	8f 90       	pop	r8
    4f60:	7f 90       	pop	r7
    4f62:	6f 90       	pop	r6
    4f64:	5f 90       	pop	r5
    4f66:	4f 90       	pop	r4
    4f68:	3f 90       	pop	r3
    4f6a:	2f 90       	pop	r2
    4f6c:	08 95       	ret

00004f6e <_ZN9DhcpClass10checkLeaseEv>:
    1/DHCP_CHECK_RENEW_FAIL: renew failed
    2/DHCP_CHECK_RENEW_OK: renew success
    3/DHCP_CHECK_REBIND_FAIL: rebind fail
    4/DHCP_CHECK_REBIND_OK: rebind success
*/
int DhcpClass::checkLease(){
    4f6e:	6f 92       	push	r6
    4f70:	7f 92       	push	r7
    4f72:	8f 92       	push	r8
    4f74:	9f 92       	push	r9
    4f76:	af 92       	push	r10
    4f78:	bf 92       	push	r11
    4f7a:	cf 92       	push	r12
    4f7c:	df 92       	push	r13
    4f7e:	ef 92       	push	r14
    4f80:	ff 92       	push	r15
    4f82:	0f 93       	push	r16
    4f84:	1f 93       	push	r17
    4f86:	cf 93       	push	r28
    4f88:	df 93       	push	r29
    4f8a:	ec 01       	movw	r28, r24
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    4f8c:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    signed long snow = (long)now;
    4f90:	c6 2e       	mov	r12, r22
    4f92:	d7 2e       	mov	r13, r23
    4f94:	e8 2e       	mov	r14, r24
    4f96:	f9 2e       	mov	r15, r25
    int rc=DHCP_CHECK_NONE;
    if (_lastCheck != 0){
    4f98:	8e a9       	sts	0x4e, r24
    4f9a:	9f a9       	sts	0x4f, r25
    4f9c:	a8 ad       	sts	0x68, r26
    4f9e:	b9 ad       	sts	0x69, r27
    4fa0:	00 97       	sbiw	r24, 0x00	; 0
    4fa2:	a1 05       	cpc	r26, r1
    4fa4:	b1 05       	cpc	r27, r1
    4fa6:	09 f4       	brne	.+2      	; 0x4faa <_ZN9DhcpClass10checkLeaseEv+0x3c>
    4fa8:	a2 c0       	rjmp	.+324    	; 0x50ee <_ZN9DhcpClass10checkLeaseEv+0x180>
        signed long factor;
        //calc how many ms past the timeout we are
        factor = snow - (long)_secTimeout;
    4faa:	fe 01       	movw	r30, r28
    4fac:	ee 5b       	subi	r30, 0xBE	; 190
    4fae:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb0:	80 81       	ld	r24, Z
    4fb2:	91 81       	ldd	r25, Z+1	; 0x01
    4fb4:	a2 81       	ldd	r26, Z+2	; 0x02
    4fb6:	b3 81       	ldd	r27, Z+3	; 0x03
    4fb8:	a7 01       	movw	r20, r14
    4fba:	96 01       	movw	r18, r12
    4fbc:	28 1b       	sub	r18, r24
    4fbe:	39 0b       	sbc	r19, r25
    4fc0:	4a 0b       	sbc	r20, r26
    4fc2:	5b 0b       	sbc	r21, r27
    4fc4:	ca 01       	movw	r24, r20
    4fc6:	b9 01       	movw	r22, r18
        //if on or passed the timeout, reduce the counters
        if ( factor >= 0 ){
    4fc8:	0a f4       	brpl	.+2      	; 0x4fcc <_ZN9DhcpClass10checkLeaseEv+0x5e>
    4fca:	5a c0       	rjmp	.+180    	; 0x5080 <_ZN9DhcpClass10checkLeaseEv+0x112>
            //next timeout should be now plus 1000 ms minus parts of second in factor
            _secTimeout = snow + 1000 - factor % 1000;
    4fcc:	3f 01       	movw	r6, r30
    4fce:	0f 2e       	mov	r0, r31
    4fd0:	f8 ee       	ldi	r31, 0xE8	; 232
    4fd2:	8f 2e       	mov	r8, r31
    4fd4:	f3 e0       	ldi	r31, 0x03	; 3
    4fd6:	9f 2e       	mov	r9, r31
    4fd8:	f0 e0       	ldi	r31, 0x00	; 0
    4fda:	af 2e       	mov	r10, r31
    4fdc:	f0 e0       	ldi	r31, 0x00	; 0
    4fde:	bf 2e       	mov	r11, r31
    4fe0:	f0 2d       	mov	r31, r0
    4fe2:	8c 0c       	add	r8, r12
    4fe4:	9d 1c       	adc	r9, r13
    4fe6:	ae 1c       	adc	r10, r14
    4fe8:	bf 1c       	adc	r11, r15
    4fea:	28 ee       	ldi	r18, 0xE8	; 232
    4fec:	33 e0       	ldi	r19, 0x03	; 3
    4fee:	40 e0       	ldi	r20, 0x00	; 0
    4ff0:	50 e0       	ldi	r21, 0x00	; 0
    4ff2:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <__divmodsi4>
    4ff6:	89 01       	movw	r16, r18
    4ff8:	9a 01       	movw	r18, r20
    4ffa:	dc 01       	movw	r26, r24
    4ffc:	cb 01       	movw	r24, r22
    4ffe:	b5 01       	movw	r22, r10
    5000:	a4 01       	movw	r20, r8
    5002:	48 1b       	sub	r20, r24
    5004:	59 0b       	sbc	r21, r25
    5006:	6a 0b       	sbc	r22, r26
    5008:	7b 0b       	sbc	r23, r27
    500a:	f3 01       	movw	r30, r6
    500c:	40 83       	st	Z, r20
    500e:	51 83       	std	Z+1, r21	; 0x01
    5010:	62 83       	std	Z+2, r22	; 0x02
    5012:	73 83       	std	Z+3, r23	; 0x03
            //how many seconds late are we, minimum 1
            factor = factor / 1000 +1;
    5014:	0f 5f       	subi	r16, 0xFF	; 255
    5016:	1f 4f       	sbci	r17, 0xFF	; 255
    5018:	2f 4f       	sbci	r18, 0xFF	; 255
    501a:	3f 4f       	sbci	r19, 0xFF	; 255
            
            //reduce the counters by that mouch
            //if we can assume that the cycle time (factor) is fairly constant
            //and if the remainder is less than cycle time * 2 
            //do it early instead of late
            if(_renewInSec < factor*2 )
    501c:	4e a5       	lds	r20, 0x6e
    501e:	5f a5       	lds	r21, 0x6f
    5020:	68 a9       	sts	0x48, r22
    5022:	79 a9       	sts	0x49, r23
    5024:	d9 01       	movw	r26, r18
    5026:	c8 01       	movw	r24, r16
    5028:	88 0f       	add	r24, r24
    502a:	99 1f       	adc	r25, r25
    502c:	aa 1f       	adc	r26, r26
    502e:	bb 1f       	adc	r27, r27
    5030:	48 17       	cp	r20, r24
    5032:	59 07       	cpc	r21, r25
    5034:	6a 07       	cpc	r22, r26
    5036:	7b 07       	cpc	r23, r27
    5038:	2c f4       	brge	.+10     	; 0x5044 <_ZN9DhcpClass10checkLeaseEv+0xd6>
                _renewInSec = 0;
    503a:	1e a6       	lds	r17, 0xbe
    503c:	1f a6       	lds	r17, 0xbf
    503e:	18 aa       	sts	0x98, r17
    5040:	19 aa       	sts	0x99, r17
    5042:	08 c0       	rjmp	.+16     	; 0x5054 <_ZN9DhcpClass10checkLeaseEv+0xe6>
            else
                _renewInSec -= factor;
    5044:	40 1b       	sub	r20, r16
    5046:	51 0b       	sbc	r21, r17
    5048:	62 0b       	sbc	r22, r18
    504a:	73 0b       	sbc	r23, r19
    504c:	4e a7       	lds	r20, 0x7e
    504e:	5f a7       	lds	r21, 0x7f
    5050:	68 ab       	sts	0x58, r22
    5052:	79 ab       	sts	0x59, r23
            
            if(_rebindInSec < factor*2 )
    5054:	4a a9       	sts	0x4a, r20
    5056:	5b a9       	sts	0x4b, r21
    5058:	6c a9       	sts	0x4c, r22
    505a:	7d a9       	sts	0x4d, r23
    505c:	48 17       	cp	r20, r24
    505e:	59 07       	cpc	r21, r25
    5060:	6a 07       	cpc	r22, r26
    5062:	7b 07       	cpc	r23, r27
    5064:	2c f4       	brge	.+10     	; 0x5070 <_ZN9DhcpClass10checkLeaseEv+0x102>
                _rebindInSec = 0;
    5066:	1a aa       	sts	0x9a, r17
    5068:	1b aa       	sts	0x9b, r17
    506a:	1c aa       	sts	0x9c, r17
    506c:	1d aa       	sts	0x9d, r17
    506e:	08 c0       	rjmp	.+16     	; 0x5080 <_ZN9DhcpClass10checkLeaseEv+0x112>
            else
                _rebindInSec -= factor;
    5070:	40 1b       	sub	r20, r16
    5072:	51 0b       	sbc	r21, r17
    5074:	62 0b       	sbc	r22, r18
    5076:	73 0b       	sbc	r23, r19
    5078:	4a ab       	sts	0x5a, r20
    507a:	5b ab       	sts	0x5b, r21
    507c:	6c ab       	sts	0x5c, r22
    507e:	7d ab       	sts	0x5d, r23
        }

        //if we have a lease but should renew, do it
        if (_dhcp_state == STATE_DHCP_LEASED && _renewInSec <=0){
    5080:	fe 01       	movw	r30, r28
    5082:	ea 5b       	subi	r30, 0xBA	; 186
    5084:	ff 4f       	sbci	r31, 0xFF	; 255
    5086:	20 81       	ld	r18, Z
    5088:	23 30       	cpi	r18, 0x03	; 3
    508a:	a9 f4       	brne	.+42     	; 0x50b6 <_ZN9DhcpClass10checkLeaseEv+0x148>
    508c:	8e a5       	lds	r24, 0x6e
    508e:	9f a5       	lds	r25, 0x6f
    5090:	a8 a9       	sts	0x48, r26
    5092:	b9 a9       	sts	0x49, r27
    5094:	18 16       	cp	r1, r24
    5096:	19 06       	cpc	r1, r25
    5098:	1a 06       	cpc	r1, r26
    509a:	1b 06       	cpc	r1, r27
    509c:	8c f0       	brlt	.+34     	; 0x50c0 <_ZN9DhcpClass10checkLeaseEv+0x152>
            _dhcp_state = STATE_DHCP_REREQUEST;
    509e:	8f 01       	movw	r16, r30
    50a0:	84 e0       	ldi	r24, 0x04	; 4
    50a2:	80 83       	st	Z, r24
            rc = 1 + request_DHCP_lease();
    50a4:	ce 01       	movw	r24, r28
    50a6:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_ZN9DhcpClass18request_DHCP_leaseEv>
    50aa:	01 96       	adiw	r24, 0x01	; 1
        }

        //if we have a lease or is renewing but should bind, do it
        if( (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START) && _rebindInSec <=0){
    50ac:	f8 01       	movw	r30, r16
    50ae:	20 81       	ld	r18, Z
    50b0:	23 30       	cpi	r18, 0x03	; 3
    50b2:	41 f0       	breq	.+16     	; 0x50c4 <_ZN9DhcpClass10checkLeaseEv+0x156>
    50b4:	02 c0       	rjmp	.+4      	; 0x50ba <_ZN9DhcpClass10checkLeaseEv+0x14c>
*/
int DhcpClass::checkLease(){
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    signed long snow = (long)now;
    int rc=DHCP_CHECK_NONE;
    50b6:	80 e0       	ldi	r24, 0x00	; 0
    50b8:	90 e0       	ldi	r25, 0x00	; 0
            _dhcp_state = STATE_DHCP_REREQUEST;
            rc = 1 + request_DHCP_lease();
        }

        //if we have a lease or is renewing but should bind, do it
        if( (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START) && _rebindInSec <=0){
    50ba:	22 23       	and	r18, r18
    50bc:	19 f0       	breq	.+6      	; 0x50c4 <_ZN9DhcpClass10checkLeaseEv+0x156>
    50be:	26 c0       	rjmp	.+76     	; 0x510c <_ZN9DhcpClass10checkLeaseEv+0x19e>
*/
int DhcpClass::checkLease(){
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    signed long snow = (long)now;
    int rc=DHCP_CHECK_NONE;
    50c0:	80 e0       	ldi	r24, 0x00	; 0
    50c2:	90 e0       	ldi	r25, 0x00	; 0
            _dhcp_state = STATE_DHCP_REREQUEST;
            rc = 1 + request_DHCP_lease();
        }

        //if we have a lease or is renewing but should bind, do it
        if( (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START) && _rebindInSec <=0){
    50c4:	4a a9       	sts	0x4a, r20
    50c6:	5b a9       	sts	0x4b, r21
    50c8:	6c a9       	sts	0x4c, r22
    50ca:	7d a9       	sts	0x4d, r23
    50cc:	14 16       	cp	r1, r20
    50ce:	15 06       	cpc	r1, r21
    50d0:	16 06       	cpc	r1, r22
    50d2:	17 06       	cpc	r1, r23
    50d4:	dc f0       	brlt	.+54     	; 0x510c <_ZN9DhcpClass10checkLeaseEv+0x19e>
            //this should basically restart completely
            _dhcp_state = STATE_DHCP_START;
    50d6:	fe 01       	movw	r30, r28
    50d8:	ea 5b       	subi	r30, 0xBA	; 186
    50da:	ff 4f       	sbci	r31, 0xFF	; 255
    50dc:	10 82       	st	Z, r1
            reset_DHCP_lease();
    50de:	ce 01       	movw	r24, r28
    50e0:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <_ZN9DhcpClass16reset_DHCP_leaseEv>
            rc = 3 + request_DHCP_lease();
    50e4:	ce 01       	movw	r24, r28
    50e6:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_ZN9DhcpClass18request_DHCP_leaseEv>
    50ea:	03 96       	adiw	r24, 0x03	; 3
    50ec:	0f c0       	rjmp	.+30     	; 0x510c <_ZN9DhcpClass10checkLeaseEv+0x19e>
        }
    }
    else{
        _secTimeout = snow + 1000;
    50ee:	fe 01       	movw	r30, r28
    50f0:	ee 5b       	subi	r30, 0xBE	; 190
    50f2:	ff 4f       	sbci	r31, 0xFF	; 255
    50f4:	d7 01       	movw	r26, r14
    50f6:	c6 01       	movw	r24, r12
    50f8:	88 51       	subi	r24, 0x18	; 24
    50fa:	9c 4f       	sbci	r25, 0xFC	; 252
    50fc:	af 4f       	sbci	r26, 0xFF	; 255
    50fe:	bf 4f       	sbci	r27, 0xFF	; 255
    5100:	80 83       	st	Z, r24
    5102:	91 83       	std	Z+1, r25	; 0x01
    5104:	a2 83       	std	Z+2, r26	; 0x02
    5106:	b3 83       	std	Z+3, r27	; 0x03
*/
int DhcpClass::checkLease(){
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    signed long snow = (long)now;
    int rc=DHCP_CHECK_NONE;
    5108:	80 e0       	ldi	r24, 0x00	; 0
    510a:	90 e0       	ldi	r25, 0x00	; 0
    }
    else{
        _secTimeout = snow + 1000;
    }

    _lastCheck = now;
    510c:	ce aa       	sts	0x9e, r28
    510e:	df aa       	sts	0x9f, r29
    5110:	e8 ae       	sts	0xb8, r30
    5112:	f9 ae       	sts	0xb9, r31
    return rc;
}
    5114:	df 91       	pop	r29
    5116:	cf 91       	pop	r28
    5118:	1f 91       	pop	r17
    511a:	0f 91       	pop	r16
    511c:	ff 90       	pop	r15
    511e:	ef 90       	pop	r14
    5120:	df 90       	pop	r13
    5122:	cf 90       	pop	r12
    5124:	bf 90       	pop	r11
    5126:	af 90       	pop	r10
    5128:	9f 90       	pop	r9
    512a:	8f 90       	pop	r8
    512c:	7f 90       	pop	r7
    512e:	6f 90       	pop	r6
    5130:	08 95       	ret

00005132 <_ZN9DhcpClass13beginWithDHCPEPhmm>:
#include "Dhcp.h"
#include "..\Arduino.h"
#include "util.h"

int DhcpClass::beginWithDHCP(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
    5132:	af 92       	push	r10
    5134:	bf 92       	push	r11
    5136:	cf 92       	push	r12
    5138:	df 92       	push	r13
    513a:	ef 92       	push	r14
    513c:	ff 92       	push	r15
    513e:	0f 93       	push	r16
    5140:	1f 93       	push	r17
    5142:	cf 93       	push	r28
    5144:	df 93       	push	r29
    5146:	6c 01       	movw	r12, r24
    5148:	b6 2e       	mov	r11, r22
    514a:	a7 2e       	mov	r10, r23
    514c:	da 01       	movw	r26, r20
    514e:	c9 01       	movw	r24, r18
    _dhcpLeaseTime=0;
    5150:	f6 01       	movw	r30, r12
    5152:	12 a2       	lds	r17, 0x92
    5154:	13 a2       	lds	r17, 0x93
    5156:	14 a2       	lds	r17, 0x94
    5158:	15 a2       	lds	r17, 0x95
    _dhcpT1=0;
    515a:	16 a2       	lds	r17, 0x96
    515c:	17 a2       	lds	r17, 0x97
    515e:	10 a6       	lds	r17, 0xb0
    5160:	11 a6       	lds	r17, 0xb1
    _dhcpT2=0;
    5162:	12 a6       	lds	r17, 0xb2
    5164:	13 a6       	lds	r17, 0xb3
    5166:	14 a6       	lds	r17, 0xb4
    5168:	15 a6       	lds	r17, 0xb5
    _lastCheck=0;
    516a:	16 aa       	sts	0x96, r17
    516c:	17 aa       	sts	0x97, r17
    516e:	10 ae       	sts	0xb0, r17
    5170:	11 ae       	sts	0xb1, r17
    _timeout = timeout;
    5172:	82 af       	sts	0x72, r24
    5174:	93 af       	sts	0x73, r25
    5176:	a4 af       	sts	0x74, r26
    5178:	b5 af       	sts	0x75, r27
    _responseTimeout = responseTimeout;
    517a:	fe 96       	adiw	r30, 0x3e	; 62
    517c:	e0 82       	st	Z, r14
    517e:	f1 82       	std	Z+1, r15	; 0x01
    5180:	02 83       	std	Z+2, r16	; 0x02
    5182:	13 83       	std	Z+3, r17	; 0x03

    // zero out _dhcpMacAddr
    memset(_dhcpMacAddr, 0, 6); 
    5184:	e6 01       	movw	r28, r12
    5186:	28 96       	adiw	r28, 0x08	; 8
    5188:	86 e0       	ldi	r24, 0x06	; 6
    518a:	fe 01       	movw	r30, r28
    518c:	11 92       	st	Z+, r1
    518e:	8a 95       	dec	r24
    5190:	e9 f7       	brne	.-6      	; 0x518c <_ZN9DhcpClass13beginWithDHCPEPhmm+0x5a>
    reset_DHCP_lease();
    5192:	c6 01       	movw	r24, r12
    5194:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <_ZN9DhcpClass16reset_DHCP_leaseEv>

    memcpy((void*)_dhcpMacAddr, (void*)mac, 6);
    5198:	eb 2d       	mov	r30, r11
    519a:	fa 2d       	mov	r31, r10
    519c:	86 e0       	ldi	r24, 0x06	; 6
    519e:	01 90       	ld	r0, Z+
    51a0:	09 92       	st	Y+, r0
    51a2:	81 50       	subi	r24, 0x01	; 1
    51a4:	e1 f7       	brne	.-8      	; 0x519e <_ZN9DhcpClass13beginWithDHCPEPhmm+0x6c>
    _dhcp_state = STATE_DHCP_START;
    51a6:	f6 01       	movw	r30, r12
    51a8:	ea 5b       	subi	r30, 0xBA	; 186
    51aa:	ff 4f       	sbci	r31, 0xFF	; 255
    51ac:	10 82       	st	Z, r1
    return request_DHCP_lease();
    51ae:	c6 01       	movw	r24, r12
    51b0:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_ZN9DhcpClass18request_DHCP_leaseEv>
}
    51b4:	df 91       	pop	r29
    51b6:	cf 91       	pop	r28
    51b8:	1f 91       	pop	r17
    51ba:	0f 91       	pop	r16
    51bc:	ff 90       	pop	r15
    51be:	ef 90       	pop	r14
    51c0:	df 90       	pop	r13
    51c2:	cf 90       	pop	r12
    51c4:	bf 90       	pop	r11
    51c6:	af 90       	pop	r10
    51c8:	08 95       	ret

000051ca <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    51ca:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    51cc:	85 ed       	ldi	r24, 0xD5	; 213
    51ce:	97 e0       	ldi	r25, 0x07	; 7
    51d0:	60 e0       	ldi	r22, 0x00	; 0
    51d2:	40 e0       	ldi	r20, 0x00	; 0
    51d4:	20 e0       	ldi	r18, 0x00	; 0
    51d6:	00 e0       	ldi	r16, 0x00	; 0
    51d8:	0e 94 5f 13 	call	0x26be	; 0x26be <_ZN9IPAddressC1Ehhhh>
    51dc:	0f 91       	pop	r16
    51de:	08 95       	ret

000051e0 <_ZN9DNSClient5beginERK9IPAddress>:
#define INVALID_SERVER   -2
#define TRUNCATED        -3
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    51e0:	cf 93       	push	r28
    51e2:	df 93       	push	r29
    51e4:	fc 01       	movw	r30, r24

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    51e6:	eb 01       	movw	r28, r22
    51e8:	8a 81       	ldd	r24, Y+2	; 0x02
    51ea:	9b 81       	ldd	r25, Y+3	; 0x03
    51ec:	ac 81       	ldd	r26, Y+4	; 0x04
    51ee:	bd 81       	ldd	r27, Y+5	; 0x05
    51f0:	82 83       	std	Z+2, r24	; 0x02
    51f2:	93 83       	std	Z+3, r25	; 0x03
    51f4:	a4 83       	std	Z+4, r26	; 0x04
    51f6:	b5 83       	std	Z+5, r27	; 0x05
    iDNSServer = aDNSServer;
    iRequestId = 0;
    51f8:	17 82       	std	Z+7, r1	; 0x07
    51fa:	16 82       	std	Z+6, r1	; 0x06
}
    51fc:	df 91       	pop	r29
    51fe:	cf 91       	pop	r28
    5200:	08 95       	ret

00005202 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    5202:	0f 93       	push	r16
    5204:	1f 93       	push	r17
    5206:	cf 93       	push	r28
    5208:	df 93       	push	r29
    520a:	db 01       	movw	r26, r22
    520c:	ea 01       	movw	r28, r20
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    520e:	8c 91       	ld	r24, X
    5210:	88 23       	and	r24, r24
    5212:	29 f0       	breq	.+10     	; 0x521e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1c>
    iDNSServer = aDNSServer;
    iRequestId = 0;
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
    5214:	fb 01       	movw	r30, r22
    5216:	31 96       	adiw	r30, 0x01	; 1
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    5218:	81 91       	ld	r24, Z+
    521a:	88 23       	and	r24, r24
    521c:	e9 f7       	brne	.-6      	; 0x5218 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
                    segment++;
                    segmentValue = 0;
    521e:	80 e0       	ldi	r24, 0x00	; 0
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	40 e0       	ldi	r20, 0x00	; 0
    5224:	50 e0       	ldi	r21, 0x00	; 0
    5226:	00 e0       	ldi	r16, 0x00	; 0
    5228:	10 e0       	ldi	r17, 0x00	; 0
    522a:	1c c0       	rjmp	.+56     	; 0x5264 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
        while (*p && (segment < 4))
        {
            if (*p == '.')
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    522c:	8f 3f       	cpi	r24, 0xFF	; 255
    522e:	91 05       	cpc	r25, r1
    5230:	09 f0       	breq	.+2      	; 0x5234 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    5232:	54 f5       	brge	.+84     	; 0x5288 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x86>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    5234:	fe 01       	movw	r30, r28
    5236:	e4 0f       	add	r30, r20
    5238:	f5 1f       	adc	r31, r21
    523a:	82 83       	std	Z+2, r24	; 0x02
                    segment++;
    523c:	4f 5f       	subi	r20, 0xFF	; 255
    523e:	5f 4f       	sbci	r21, 0xFF	; 255
                    segmentValue = 0;
    5240:	c8 01       	movw	r24, r16
    5242:	10 c0       	rjmp	.+32     	; 0x5264 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    5244:	9c 01       	movw	r18, r24
    5246:	22 0f       	add	r18, r18
    5248:	33 1f       	adc	r19, r19
    524a:	88 0f       	add	r24, r24
    524c:	99 1f       	adc	r25, r25
    524e:	88 0f       	add	r24, r24
    5250:	99 1f       	adc	r25, r25
    5252:	88 0f       	add	r24, r24
    5254:	99 1f       	adc	r25, r25
    5256:	28 0f       	add	r18, r24
    5258:	39 1f       	adc	r19, r25
    525a:	86 2f       	mov	r24, r22
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	c0 97       	sbiw	r24, 0x30	; 48
    5260:	82 0f       	add	r24, r18
    5262:	93 1f       	adc	r25, r19
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    5264:	6d 91       	ld	r22, X+
    5266:	66 23       	and	r22, r22
    5268:	e1 f0       	breq	.+56     	; 0x52a2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa0>
    526a:	44 30       	cpi	r20, 0x04	; 4
    526c:	51 05       	cpc	r21, r1
    526e:	cc f4       	brge	.+50     	; 0x52a2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa0>
        {
            if (*p == '.')
    5270:	6e 32       	cpi	r22, 0x2E	; 46
    5272:	41 f7       	brne	.-48     	; 0x5244 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x42>
    5274:	db cf       	rjmp	.-74     	; 0x522c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x2a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    5276:	44 30       	cpi	r20, 0x04	; 4
    5278:	51 05       	cpc	r21, r1
    527a:	4c f4       	brge	.+18     	; 0x528e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x8c>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    527c:	c4 0f       	add	r28, r20
    527e:	d5 1f       	adc	r29, r21
    5280:	8a 83       	std	Y+2, r24	; 0x02
            return 1;
    5282:	81 e0       	ldi	r24, 0x01	; 1
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	08 c0       	rjmp	.+16     	; 0x5298 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x96>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
                {
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
    5288:	80 e0       	ldi	r24, 0x00	; 0
    528a:	90 e0       	ldi	r25, 0x00	; 0
    528c:	05 c0       	rjmp	.+10     	; 0x5298 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x96>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    528e:	80 e0       	ldi	r24, 0x00	; 0
    5290:	90 e0       	ldi	r25, 0x00	; 0
    5292:	02 c0       	rjmp	.+4      	; 0x5298 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x96>
    5294:	80 e0       	ldi	r24, 0x00	; 0
    5296:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    5298:	df 91       	pop	r29
    529a:	cf 91       	pop	r28
    529c:	1f 91       	pop	r17
    529e:	0f 91       	pop	r16
    52a0:	08 95       	ret
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    52a2:	8f 3f       	cpi	r24, 0xFF	; 255
    52a4:	91 05       	cpc	r25, r1
    52a6:	39 f3       	breq	.-50     	; 0x5276 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x74>
    52a8:	34 f3       	brlt	.-52     	; 0x5276 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x74>
    52aa:	f4 cf       	rjmp	.-24     	; 0x5294 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x92>

000052ac <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    52ac:	af 92       	push	r10
    52ae:	bf 92       	push	r11
    52b0:	cf 92       	push	r12
    52b2:	df 92       	push	r13
    52b4:	ef 92       	push	r14
    52b6:	ff 92       	push	r15
    52b8:	0f 93       	push	r16
    52ba:	1f 93       	push	r17
    52bc:	cf 93       	push	r28
    52be:	df 93       	push	r29
    52c0:	00 d0       	rcall	.+0      	; 0x52c2 <_ZN9DNSClient12BuildRequestEPKc+0x16>
    52c2:	cd b7       	in	r28, 0x3d	; 61
    52c4:	de b7       	in	r29, 0x3e	; 62
    52c6:	8c 01       	movw	r16, r24
    52c8:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    52ca:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    52ce:	dc 01       	movw	r26, r24
    52d0:	cb 01       	movw	r24, r22
    52d2:	f8 01       	movw	r30, r16
    52d4:	97 83       	std	Z+7, r25	; 0x07
    52d6:	86 83       	std	Z+6, r24	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    52d8:	aa 24       	eor	r10, r10
    52da:	bb 24       	eor	r11, r11
    52dc:	68 94       	set
    52de:	a3 f8       	bld	r10, 3
    52e0:	a0 0e       	add	r10, r16
    52e2:	b1 1e       	adc	r11, r17
    52e4:	b8 01       	movw	r22, r16
    52e6:	6a 5f       	subi	r22, 0xFA	; 250
    52e8:	7f 4f       	sbci	r23, 0xFF	; 255
    52ea:	c5 01       	movw	r24, r10
    52ec:	42 e0       	ldi	r20, 0x02	; 2
    52ee:	50 e0       	ldi	r21, 0x00	; 0
    52f0:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    52f4:	81 e0       	ldi	r24, 0x01	; 1
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	9b 83       	std	Y+3, r25	; 0x03
    52fa:	8a 83       	std	Y+2, r24	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    52fc:	c5 01       	movw	r24, r10
    52fe:	be 01       	movw	r22, r28
    5300:	6e 5f       	subi	r22, 0xFE	; 254
    5302:	7f 4f       	sbci	r23, 0xFF	; 255
    5304:	42 e0       	ldi	r20, 0x02	; 2
    5306:	50 e0       	ldi	r21, 0x00	; 0
    5308:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    530c:	80 e0       	ldi	r24, 0x00	; 0
    530e:	91 e0       	ldi	r25, 0x01	; 1
    5310:	9b 83       	std	Y+3, r25	; 0x03
    5312:	8a 83       	std	Y+2, r24	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    5314:	c5 01       	movw	r24, r10
    5316:	be 01       	movw	r22, r28
    5318:	6e 5f       	subi	r22, 0xFE	; 254
    531a:	7f 4f       	sbci	r23, 0xFF	; 255
    531c:	42 e0       	ldi	r20, 0x02	; 2
    531e:	50 e0       	ldi	r21, 0x00	; 0
    5320:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    5324:	1b 82       	std	Y+3, r1	; 0x03
    5326:	1a 82       	std	Y+2, r1	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    5328:	c5 01       	movw	r24, r10
    532a:	be 01       	movw	r22, r28
    532c:	6e 5f       	subi	r22, 0xFE	; 254
    532e:	7f 4f       	sbci	r23, 0xFF	; 255
    5330:	42 e0       	ldi	r20, 0x02	; 2
    5332:	50 e0       	ldi	r21, 0x00	; 0
    5334:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    5338:	c5 01       	movw	r24, r10
    533a:	be 01       	movw	r22, r28
    533c:	6e 5f       	subi	r22, 0xFE	; 254
    533e:	7f 4f       	sbci	r23, 0xFF	; 255
    5340:	42 e0       	ldi	r20, 0x02	; 2
    5342:	50 e0       	ldi	r21, 0x00	; 0
    5344:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    5348:	c5 01       	movw	r24, r10
    534a:	be 01       	movw	r22, r28
    534c:	6e 5f       	subi	r22, 0xFE	; 254
    534e:	7f 4f       	sbci	r23, 0xFF	; 255
    5350:	42 e0       	ldi	r20, 0x02	; 2
    5352:	50 e0       	ldi	r21, 0x00	; 0
    5354:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    5358:	f7 01       	movw	r30, r14
    535a:	80 81       	ld	r24, Z
    535c:	88 23       	and	r24, r24
    535e:	11 f5       	brne	.+68     	; 0x53a4 <_ZN9DNSClient12BuildRequestEPKc+0xf8>
    5360:	27 c0       	rjmp	.+78     	; 0x53b0 <_ZN9DNSClient12BuildRequestEPKc+0x104>
    5362:	7f 01       	movw	r14, r30
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    5364:	81 91       	ld	r24, Z+
    5366:	88 23       	and	r24, r24
    5368:	09 f4       	brne	.+2      	; 0x536c <_ZN9DNSClient12BuildRequestEPKc+0xc0>
    536a:	51 c0       	rjmp	.+162    	; 0x540e <_ZN9DNSClient12BuildRequestEPKc+0x162>
    536c:	8e 32       	cpi	r24, 0x2E	; 46
    536e:	c9 f7       	brne	.-14     	; 0x5362 <_ZN9DNSClient12BuildRequestEPKc+0xb6>
    5370:	4e c0       	rjmp	.+156    	; 0x540e <_ZN9DNSClient12BuildRequestEPKc+0x162>
        }

        if (end-start > 0)
        {
            // Write out the size of this section
            len = end-start;
    5372:	09 83       	std	Y+1, r16	; 0x01
            iUdp.write(&len, sizeof(len));
    5374:	c5 01       	movw	r24, r10
    5376:	be 01       	movw	r22, r28
    5378:	6f 5f       	subi	r22, 0xFF	; 255
    537a:	7f 4f       	sbci	r23, 0xFF	; 255
    537c:	41 e0       	ldi	r20, 0x01	; 1
    537e:	50 e0       	ldi	r21, 0x00	; 0
    5380:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    5384:	c5 01       	movw	r24, r10
    5386:	b6 01       	movw	r22, r12
    5388:	a8 01       	movw	r20, r16
    538a:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    538e:	f7 01       	movw	r30, r14
    5390:	80 81       	ld	r24, Z
    5392:	88 23       	and	r24, r24
    5394:	69 f0       	breq	.+26     	; 0x53b0 <_ZN9DNSClient12BuildRequestEPKc+0x104>
            len = end-start;
            iUdp.write(&len, sizeof(len));
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
        }
        start = end+1;
    5396:	67 01       	movw	r12, r14
    5398:	08 94       	sec
    539a:	c1 1c       	adc	r12, r1
    539c:	d1 1c       	adc	r13, r1
    539e:	9c 2d       	mov	r25, r12
    53a0:	8d 2d       	mov	r24, r13
    53a2:	03 c0       	rjmp	.+6      	; 0x53aa <_ZN9DNSClient12BuildRequestEPKc+0xfe>
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    53a4:	67 01       	movw	r12, r14
    53a6:	9e 2d       	mov	r25, r14
    53a8:	8f 2d       	mov	r24, r15
            len = end-start;
            iUdp.write(&len, sizeof(len));
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
        }
        start = end+1;
    53aa:	e9 2f       	mov	r30, r25
    53ac:	f8 2f       	mov	r31, r24
    53ae:	d9 cf       	rjmp	.-78     	; 0x5362 <_ZN9DNSClient12BuildRequestEPKc+0xb6>
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    53b0:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write(&len, sizeof(len));
    53b2:	c5 01       	movw	r24, r10
    53b4:	be 01       	movw	r22, r28
    53b6:	6f 5f       	subi	r22, 0xFF	; 255
    53b8:	7f 4f       	sbci	r23, 0xFF	; 255
    53ba:	41 e0       	ldi	r20, 0x01	; 1
    53bc:	50 e0       	ldi	r21, 0x00	; 0
    53be:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    53c2:	00 e0       	ldi	r16, 0x00	; 0
    53c4:	11 e0       	ldi	r17, 0x01	; 1
    53c6:	1b 83       	std	Y+3, r17	; 0x03
    53c8:	0a 83       	std	Y+2, r16	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    53ca:	c5 01       	movw	r24, r10
    53cc:	be 01       	movw	r22, r28
    53ce:	6e 5f       	subi	r22, 0xFE	; 254
    53d0:	7f 4f       	sbci	r23, 0xFF	; 255
    53d2:	42 e0       	ldi	r20, 0x02	; 2
    53d4:	50 e0       	ldi	r21, 0x00	; 0
    53d6:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    53da:	1b 83       	std	Y+3, r17	; 0x03
    53dc:	0a 83       	std	Y+2, r16	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    53de:	c5 01       	movw	r24, r10
    53e0:	be 01       	movw	r22, r28
    53e2:	6e 5f       	subi	r22, 0xFE	; 254
    53e4:	7f 4f       	sbci	r23, 0xFF	; 255
    53e6:	42 e0       	ldi	r20, 0x02	; 2
    53e8:	50 e0       	ldi	r21, 0x00	; 0
    53ea:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    53ee:	81 e0       	ldi	r24, 0x01	; 1
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	0f 90       	pop	r0
    53f4:	0f 90       	pop	r0
    53f6:	0f 90       	pop	r0
    53f8:	df 91       	pop	r29
    53fa:	cf 91       	pop	r28
    53fc:	1f 91       	pop	r17
    53fe:	0f 91       	pop	r16
    5400:	ff 90       	pop	r15
    5402:	ef 90       	pop	r14
    5404:	df 90       	pop	r13
    5406:	cf 90       	pop	r12
    5408:	bf 90       	pop	r11
    540a:	af 90       	pop	r10
    540c:	08 95       	ret
        while (*end && (*end != '.') )
        {
            end++;
        }

        if (end-start > 0)
    540e:	87 01       	movw	r16, r14
    5410:	0c 19       	sub	r16, r12
    5412:	1d 09       	sbc	r17, r13
    5414:	10 16       	cp	r1, r16
    5416:	11 06       	cpc	r1, r17
    5418:	0c f4       	brge	.+2      	; 0x541c <_ZN9DNSClient12BuildRequestEPKc+0x170>
    541a:	ab cf       	rjmp	.-170    	; 0x5372 <_ZN9DNSClient12BuildRequestEPKc+0xc6>
    541c:	b8 cf       	rjmp	.-144    	; 0x538e <_ZN9DNSClient12BuildRequestEPKc+0xe2>

0000541e <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:
    return 1;
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    541e:	2f 92       	push	r2
    5420:	3f 92       	push	r3
    5422:	4f 92       	push	r4
    5424:	5f 92       	push	r5
    5426:	6f 92       	push	r6
    5428:	7f 92       	push	r7
    542a:	8f 92       	push	r8
    542c:	9f 92       	push	r9
    542e:	af 92       	push	r10
    5430:	bf 92       	push	r11
    5432:	cf 92       	push	r12
    5434:	df 92       	push	r13
    5436:	ef 92       	push	r14
    5438:	ff 92       	push	r15
    543a:	0f 93       	push	r16
    543c:	1f 93       	push	r17
    543e:	cf 93       	push	r28
    5440:	df 93       	push	r29
    5442:	cd b7       	in	r28, 0x3d	; 61
    5444:	de b7       	in	r29, 0x3e	; 62
    5446:	63 97       	sbiw	r28, 0x13	; 19
    5448:	0f b6       	in	r0, 0x3f	; 63
    544a:	f8 94       	cli
    544c:	de bf       	out	0x3e, r29	; 62
    544e:	0f be       	out	0x3f, r0	; 63
    5450:	cd bf       	out	0x3d, r28	; 61
    5452:	6c 01       	movw	r12, r24
    5454:	8b 01       	movw	r16, r22
    5456:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    5458:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    545c:	2b 01       	movw	r4, r22
    545e:	3c 01       	movw	r6, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    5460:	ee 24       	eor	r14, r14
    5462:	ff 24       	eor	r15, r15
    5464:	68 94       	set
    5466:	e3 f8       	bld	r14, 3
    5468:	ec 0c       	add	r14, r12
    546a:	fd 1c       	adc	r15, r13
    {
        if((millis() - startTime) > aTimeout)
    546c:	48 01       	movw	r8, r16
    546e:	aa 24       	eor	r10, r10
    5470:	bb 24       	eor	r11, r11
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    5472:	14 c0       	rjmp	.+40     	; 0x549c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x7e>
    {
        if((millis() - startTime) > aTimeout)
    5474:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    5478:	dc 01       	movw	r26, r24
    547a:	cb 01       	movw	r24, r22
    547c:	84 19       	sub	r24, r4
    547e:	95 09       	sbc	r25, r5
    5480:	a6 09       	sbc	r26, r6
    5482:	b7 09       	sbc	r27, r7
    5484:	88 16       	cp	r8, r24
    5486:	99 06       	cpc	r9, r25
    5488:	aa 06       	cpc	r10, r26
    548a:	bb 06       	cpc	r11, r27
    548c:	08 f4       	brcc	.+2      	; 0x5490 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x72>
    548e:	3b c1       	rjmp	.+630    	; 0x5706 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e8>
            return TIMED_OUT;
        delay(50);
    5490:	62 e3       	ldi	r22, 0x32	; 50
    5492:	70 e0       	ldi	r23, 0x00	; 0
    5494:	80 e0       	ldi	r24, 0x00	; 0
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    549c:	0e 2d       	mov	r16, r14
    549e:	1f 2d       	mov	r17, r15
    54a0:	c7 01       	movw	r24, r14
    54a2:	0e 94 37 06 	call	0xc6e	; 0xc6e <_ZN11EthernetUDP11parsePacketEv>
    54a6:	18 16       	cp	r1, r24
    54a8:	19 06       	cpc	r1, r25
    54aa:	24 f7       	brge	.-56     	; 0x5474 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x56>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    54ac:	f6 01       	movw	r30, r12
    54ae:	42 81       	ldd	r20, Z+2	; 0x02
    54b0:	53 81       	ldd	r21, Z+3	; 0x03
    54b2:	64 81       	ldd	r22, Z+4	; 0x04
    54b4:	75 81       	ldd	r23, Z+5	; 0x05
    54b6:	81 8d       	ldd	r24, Z+25	; 0x19
    54b8:	92 8d       	ldd	r25, Z+26	; 0x1a
    54ba:	a3 8d       	ldd	r26, Z+27	; 0x1b
    54bc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    54be:	48 17       	cp	r20, r24
    54c0:	59 07       	cpc	r21, r25
    54c2:	6a 07       	cpc	r22, r26
    54c4:	7b 07       	cpc	r23, r27
    54c6:	09 f0       	breq	.+2      	; 0x54ca <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xac>
    54c8:	21 c1       	rjmp	.+578    	; 0x570c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ee>
    54ca:	85 8d       	ldd	r24, Z+29	; 0x1d
    54cc:	96 8d       	ldd	r25, Z+30	; 0x1e
    54ce:	85 33       	cpi	r24, 0x35	; 53
    54d0:	91 05       	cpc	r25, r1
    54d2:	09 f0       	breq	.+2      	; 0x54d6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>
    54d4:	1e c1       	rjmp	.+572    	; 0x5712 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2f4>
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    54d6:	8e 2d       	mov	r24, r14
    54d8:	9f 2d       	mov	r25, r15
    54da:	0e 94 6d 05 	call	0xada	; 0xada <_ZN11EthernetUDP9availableEv>
    54de:	8c 30       	cpi	r24, 0x0C	; 12
    54e0:	91 05       	cpc	r25, r1
    54e2:	0c f4       	brge	.+2      	; 0x54e6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc8>
    54e4:	19 c1       	rjmp	.+562    	; 0x5718 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fa>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    54e6:	8e 2d       	mov	r24, r14
    54e8:	9f 2d       	mov	r25, r15
    54ea:	be 01       	movw	r22, r28
    54ec:	68 5f       	subi	r22, 0xF8	; 248
    54ee:	7f 4f       	sbci	r23, 0xFF	; 255
    54f0:	4c e0       	ldi	r20, 0x0C	; 12
    54f2:	50 e0       	ldi	r21, 0x00	; 0
    54f4:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    54f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    54fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    54fc:	58 2f       	mov	r21, r24
    54fe:	49 2f       	mov	r20, r25
    5500:	5f 83       	std	Y+7, r21	; 0x07
    5502:	4e 83       	std	Y+6, r20	; 0x06
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    5504:	f6 01       	movw	r30, r12
    5506:	26 81       	ldd	r18, Z+6	; 0x06
    5508:	37 81       	ldd	r19, Z+7	; 0x07
    550a:	88 85       	ldd	r24, Y+8	; 0x08
    550c:	99 85       	ldd	r25, Y+9	; 0x09
    550e:	28 17       	cp	r18, r24
    5510:	39 07       	cpc	r19, r25
    5512:	11 f4       	brne	.+4      	; 0x5518 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xfa>
    5514:	55 23       	and	r21, r21
    5516:	3c f0       	brlt	.+14     	; 0x5526 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x108>
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    5518:	80 2f       	mov	r24, r16
    551a:	91 2f       	mov	r25, r17
    551c:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    5520:	8c ef       	ldi	r24, 0xFC	; 252
    5522:	9f ef       	ldi	r25, 0xFF	; 255
    5524:	fb c0       	rjmp	.+502    	; 0x571c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    // Success!  Everything buffered okay
    return 1;
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
    5526:	4f 70       	andi	r20, 0x0F	; 15
    5528:	52 70       	andi	r21, 0x02	; 2
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    552a:	41 15       	cp	r20, r1
    552c:	51 05       	cpc	r21, r1
    552e:	39 f0       	breq	.+14     	; 0x553e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x120>
    {
        // Mark the entire packet as read
        iUdp.flush();
    5530:	8e 2d       	mov	r24, r14
    5532:	9f 2d       	mov	r25, r15
    5534:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    5538:	8b ef       	ldi	r24, 0xFB	; 251
    553a:	9f ef       	ldi	r25, 0xFF	; 255
    553c:	ef c0       	rjmp	.+478    	; 0x571c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    553e:	8e 84       	ldd	r8, Y+14	; 0x0e
    5540:	9f 84       	ldd	r9, Y+15	; 0x0f
    5542:	98 24       	eor	r9, r8
    5544:	89 24       	eor	r8, r9
    5546:	98 24       	eor	r9, r8
    if (answerCount == 0 )
    5548:	81 14       	cp	r8, r1
    554a:	91 04       	cpc	r9, r1
    554c:	59 f0       	breq	.+22     	; 0x5564 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x146>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    554e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5550:	9d 85       	ldd	r25, Y+13	; 0x0d
    5552:	00 97       	sbiw	r24, 0x00	; 0
    5554:	71 f4       	brne	.+28     	; 0x5572 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x154>
    5556:	cc 24       	eor	r12, r12
    5558:	dd 24       	eor	r13, r13

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    555a:	44 24       	eor	r4, r4
    555c:	55 24       	eor	r5, r5
    555e:	68 94       	set
    5560:	42 f8       	bld	r4, 2
    5562:	3e c0       	rjmp	.+124    	; 0x55e0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c2>
    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    {
        // Mark the entire packet as read
        iUdp.flush();
    5564:	8e 2d       	mov	r24, r14
    5566:	9f 2d       	mov	r25, r15
    5568:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    556c:	8a ef       	ldi	r24, 0xFA	; 250
    556e:	9f ef       	ldi	r25, 0xFF	; 255
    5570:	d5 c0       	rjmp	.+426    	; 0x571c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    5572:	cc 24       	eor	r12, r12
    5574:	dd 24       	eor	r13, r13
    5576:	44 24       	eor	r4, r4
    5578:	55 24       	eor	r5, r5
    557a:	68 94       	set
    557c:	42 f8       	bld	r4, 2
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    557e:	80 2f       	mov	r24, r16
    5580:	91 2f       	mov	r25, r17
    5582:	be 01       	movw	r22, r28
    5584:	6f 5f       	subi	r22, 0xFF	; 255
    5586:	7f 4f       	sbci	r23, 0xFF	; 255
    5588:	41 e0       	ldi	r20, 0x01	; 1
    558a:	50 e0       	ldi	r21, 0x00	; 0
    558c:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    5590:	89 81       	ldd	r24, Y+1	; 0x01
    5592:	88 23       	and	r24, r24
    5594:	71 f0       	breq	.+28     	; 0x55b2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x194>
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    5596:	81 50       	subi	r24, 0x01	; 1
    5598:	89 83       	std	Y+1, r24	; 0x01
                {
                    iUdp.read(); // we don't care about the returned byte
    559a:	80 2f       	mov	r24, r16
    559c:	91 2f       	mov	r25, r17
    559e:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    55a2:	89 81       	ldd	r24, Y+1	; 0x01
    55a4:	98 2f       	mov	r25, r24
    55a6:	91 50       	subi	r25, 0x01	; 1
    55a8:	99 83       	std	Y+1, r25	; 0x01
    55aa:	88 23       	and	r24, r24
    55ac:	b1 f7       	brne	.-20     	; 0x559a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    {
        // Skip over the name
        uint8_t len;
        do
    55ae:	99 23       	and	r25, r25
    55b0:	31 f7       	brne	.-52     	; 0x557e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x160>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    55b2:	72 01       	movw	r14, r4
        } while (len != 0);

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    55b4:	80 2f       	mov	r24, r16
    55b6:	91 2f       	mov	r25, r17
    55b8:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
    55bc:	08 94       	sec
    55be:	e1 08       	sbc	r14, r1
    55c0:	f1 08       	sbc	r15, r1
                }
            }
        } while (len != 0);

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
    55c2:	e1 14       	cp	r14, r1
    55c4:	f1 04       	cpc	r15, r1
    55c6:	b1 f7       	brne	.-20     	; 0x55b4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x196>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    55c8:	08 94       	sec
    55ca:	c1 1c       	adc	r12, r1
    55cc:	d1 1c       	adc	r13, r1
    55ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    55d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    55d2:	98 27       	eor	r25, r24
    55d4:	89 27       	eor	r24, r25
    55d6:	98 27       	eor	r25, r24
    55d8:	c8 16       	cp	r12, r24
    55da:	d9 06       	cpc	r13, r25
    55dc:	80 f2       	brcs	.-96     	; 0x557e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x160>
    55de:	bb cf       	rjmp	.-138    	; 0x5556 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x138>
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    55e0:	80 2f       	mov	r24, r16
    55e2:	91 2f       	mov	r25, r17
    55e4:	be 01       	movw	r22, r28
    55e6:	6f 5f       	subi	r22, 0xFF	; 255
    55e8:	7f 4f       	sbci	r23, 0xFF	; 255
    55ea:	41 e0       	ldi	r20, 0x01	; 1
    55ec:	50 e0       	ldi	r21, 0x00	; 0
    55ee:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    55f2:	89 81       	ldd	r24, Y+1	; 0x01
    55f4:	98 2f       	mov	r25, r24
    55f6:	90 7c       	andi	r25, 0xC0	; 192
    55f8:	79 f4       	brne	.+30     	; 0x5618 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1fa>
            {
                // It's just a normal label
                if (len > 0)
    55fa:	88 23       	and	r24, r24
    55fc:	a9 f0       	breq	.+42     	; 0x5628 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x20a>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    55fe:	81 50       	subi	r24, 0x01	; 1
    5600:	89 83       	std	Y+1, r24	; 0x01
                    {
                        iUdp.read(); // we don't care about the returned byte
    5602:	80 2f       	mov	r24, r16
    5604:	91 2f       	mov	r25, r17
    5606:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    560a:	89 81       	ldd	r24, Y+1	; 0x01
    560c:	98 2f       	mov	r25, r24
    560e:	91 50       	subi	r25, 0x01	; 1
    5610:	99 83       	std	Y+1, r25	; 0x01
    5612:	88 23       	and	r24, r24
    5614:	b1 f7       	brne	.-20     	; 0x5602 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1e4>
    5616:	06 c0       	rjmp	.+12     	; 0x5624 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x206>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    5618:	80 2f       	mov	r24, r16
    561a:	91 2f       	mov	r25, r17
    561c:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
                // And set len so that we drop out of the name loop
                len = 0;
    5620:	19 82       	std	Y+1, r1	; 0x01
    5622:	02 c0       	rjmp	.+4      	; 0x5628 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x20a>

    for (uint16_t i =0; i < answerCount; i++)
    {
        // Skip the name
        uint8_t len;
        do
    5624:	99 23       	and	r25, r25
    5626:	e1 f6       	brne	.-72     	; 0x55e0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c2>
        } while (len != 0);

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    5628:	80 2f       	mov	r24, r16
    562a:	91 2f       	mov	r25, r17
    562c:	be 01       	movw	r22, r28
    562e:	6c 5f       	subi	r22, 0xFC	; 252
    5630:	7f 4f       	sbci	r23, 0xFF	; 255
    5632:	42 e0       	ldi	r20, 0x02	; 2
    5634:	50 e0       	ldi	r21, 0x00	; 0
    5636:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    563a:	80 2f       	mov	r24, r16
    563c:	91 2f       	mov	r25, r17
    563e:	be 01       	movw	r22, r28
    5640:	6e 5f       	subi	r22, 0xFE	; 254
    5642:	7f 4f       	sbci	r23, 0xFF	; 255
    5644:	42 e0       	ldi	r20, 0x02	; 2
    5646:	50 e0       	ldi	r21, 0x00	; 0
    5648:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
    564c:	72 01       	movw	r14, r4

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    564e:	80 2f       	mov	r24, r16
    5650:	91 2f       	mov	r25, r17
    5652:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
    5656:	08 94       	sec
    5658:	e1 08       	sbc	r14, r1
    565a:	f1 08       	sbc	r15, r1
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
    565c:	e1 14       	cp	r14, r1
    565e:	f1 04       	cpc	r15, r1
    5660:	b1 f7       	brne	.-20     	; 0x564e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x230>
            iUdp.read(); // we don't care about the returned byte
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    5662:	80 2f       	mov	r24, r16
    5664:	91 2f       	mov	r25, r17
    5666:	be 01       	movw	r22, r28
    5668:	6a 5f       	subi	r22, 0xFA	; 250
    566a:	7f 4f       	sbci	r23, 0xFF	; 255
    566c:	42 e0       	ldi	r20, 0x02	; 2
    566e:	50 e0       	ldi	r21, 0x00	; 0
    5670:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    5674:	8c 81       	ldd	r24, Y+4	; 0x04
    5676:	9d 81       	ldd	r25, Y+5	; 0x05
    5678:	f1 e0       	ldi	r31, 0x01	; 1
    567a:	80 30       	cpi	r24, 0x00	; 0
    567c:	9f 07       	cpc	r25, r31
    567e:	29 f0       	breq	.+10     	; 0x568a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26c>
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    5680:	8e 81       	ldd	r24, Y+6	; 0x06
    5682:	9f 81       	ldd	r25, Y+7	; 0x07
    5684:	00 97       	sbiw	r24, 0x00	; 0
    5686:	01 f5       	brne	.+64     	; 0x56c8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2aa>
    5688:	30 c0       	rjmp	.+96     	; 0x56ea <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2cc>

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    568a:	8a 81       	ldd	r24, Y+2	; 0x02
    568c:	9b 81       	ldd	r25, Y+3	; 0x03
    568e:	21 e0       	ldi	r18, 0x01	; 1
    5690:	80 30       	cpi	r24, 0x00	; 0
    5692:	92 07       	cpc	r25, r18
    5694:	a9 f7       	brne	.-22     	; 0x5680 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x262>
        {
            if (htons(header_flags) != 4)
    5696:	8e 81       	ldd	r24, Y+6	; 0x06
    5698:	9f 81       	ldd	r25, Y+7	; 0x07
    569a:	e4 e0       	ldi	r30, 0x04	; 4
    569c:	80 30       	cpi	r24, 0x00	; 0
    569e:	9e 07       	cpc	r25, r30
    56a0:	39 f0       	breq	.+14     	; 0x56b0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x292>
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    56a2:	80 2f       	mov	r24, r16
    56a4:	91 2f       	mov	r25, r17
    56a6:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN11EthernetUDP5flushEv>
                return -9;//INVALID_RESPONSE;
    56aa:	87 ef       	ldi	r24, 0xF7	; 247
    56ac:	9f ef       	ldi	r25, 0xFF	; 255
    56ae:	36 c0       	rjmp	.+108    	; 0x571c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
            }
            iUdp.read(aAddress.raw_address(), 4);
    56b0:	b1 01       	movw	r22, r2
    56b2:	6e 5f       	subi	r22, 0xFE	; 254
    56b4:	7f 4f       	sbci	r23, 0xFF	; 255
    56b6:	80 2f       	mov	r24, r16
    56b8:	91 2f       	mov	r25, r17
    56ba:	44 e0       	ldi	r20, 0x04	; 4
    56bc:	50 e0       	ldi	r21, 0x00	; 0
    56be:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN11EthernetUDP4readEPhj>
            return SUCCESS;
    56c2:	81 e0       	ldi	r24, 0x01	; 1
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	2a c0       	rjmp	.+84     	; 0x571c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    56c8:	ee 24       	eor	r14, r14
    56ca:	ff 24       	eor	r15, r15
            {
                iUdp.read(); // we don't care about the returned byte
    56cc:	80 2f       	mov	r24, r16
    56ce:	91 2f       	mov	r25, r17
    56d0:	0e 94 0b 06 	call	0xc16	; 0xc16 <_ZN11EthernetUDP4readEv>
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    56d4:	08 94       	sec
    56d6:	e1 1c       	adc	r14, r1
    56d8:	f1 1c       	adc	r15, r1
    56da:	8e 81       	ldd	r24, Y+6	; 0x06
    56dc:	9f 81       	ldd	r25, Y+7	; 0x07
    56de:	98 27       	eor	r25, r24
    56e0:	89 27       	eor	r24, r25
    56e2:	98 27       	eor	r25, r24
    56e4:	e8 16       	cp	r14, r24
    56e6:	f9 06       	cpc	r15, r25
    56e8:	88 f3       	brcs	.-30     	; 0x56cc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ae>
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    56ea:	08 94       	sec
    56ec:	c1 1c       	adc	r12, r1
    56ee:	d1 1c       	adc	r13, r1
    56f0:	c8 14       	cp	r12, r8
    56f2:	d9 04       	cpc	r13, r9
    56f4:	09 f0       	breq	.+2      	; 0x56f8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2da>
    56f6:	74 cf       	rjmp	.-280    	; 0x55e0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c2>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    56f8:	80 2f       	mov	r24, r16
    56fa:	91 2f       	mov	r25, r17
    56fc:	0e 94 87 05 	call	0xb0e	; 0xb0e <_ZN11EthernetUDP5flushEv>

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    5700:	86 ef       	ldi	r24, 0xF6	; 246
    5702:	9f ef       	ldi	r25, 0xFF	; 255
    5704:	0b c0       	rjmp	.+22     	; 0x571c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    5706:	8f ef       	ldi	r24, 0xFF	; 255
    5708:	9f ef       	ldi	r25, 0xFF	; 255
    570a:	08 c0       	rjmp	.+16     	; 0x571c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    570c:	8e ef       	ldi	r24, 0xFE	; 254
    570e:	9f ef       	ldi	r25, 0xFF	; 255
    5710:	05 c0       	rjmp	.+10     	; 0x571c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    5712:	8e ef       	ldi	r24, 0xFE	; 254
    5714:	9f ef       	ldi	r25, 0xFF	; 255
    5716:	02 c0       	rjmp	.+4      	; 0x571c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    5718:	8d ef       	ldi	r24, 0xFD	; 253
    571a:	9f ef       	ldi	r25, 0xFF	; 255
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    571c:	63 96       	adiw	r28, 0x13	; 19
    571e:	0f b6       	in	r0, 0x3f	; 63
    5720:	f8 94       	cli
    5722:	de bf       	out	0x3e, r29	; 62
    5724:	0f be       	out	0x3f, r0	; 63
    5726:	cd bf       	out	0x3d, r28	; 61
    5728:	df 91       	pop	r29
    572a:	cf 91       	pop	r28
    572c:	1f 91       	pop	r17
    572e:	0f 91       	pop	r16
    5730:	ff 90       	pop	r15
    5732:	ef 90       	pop	r14
    5734:	df 90       	pop	r13
    5736:	cf 90       	pop	r12
    5738:	bf 90       	pop	r11
    573a:	af 90       	pop	r10
    573c:	9f 90       	pop	r9
    573e:	8f 90       	pop	r8
    5740:	7f 90       	pop	r7
    5742:	6f 90       	pop	r6
    5744:	5f 90       	pop	r5
    5746:	4f 90       	pop	r4
    5748:	3f 90       	pop	r3
    574a:	2f 90       	pop	r2
    574c:	08 95       	ret

0000574e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    574e:	8f 92       	push	r8
    5750:	9f 92       	push	r9
    5752:	af 92       	push	r10
    5754:	bf 92       	push	r11
    5756:	cf 92       	push	r12
    5758:	df 92       	push	r13
    575a:	ef 92       	push	r14
    575c:	ff 92       	push	r15
    575e:	0f 93       	push	r16
    5760:	1f 93       	push	r17
    5762:	cf 93       	push	r28
    5764:	df 93       	push	r29
    5766:	00 d0       	rcall	.+0      	; 0x5768 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    5768:	00 d0       	rcall	.+0      	; 0x576a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    576a:	cd b7       	in	r28, 0x3d	; 61
    576c:	de b7       	in	r29, 0x3e	; 62
    576e:	7c 01       	movw	r14, r24
    5770:	6b 01       	movw	r12, r22
    5772:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    5774:	0e 94 01 29 	call	0x5202	; 0x5202 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    5778:	00 97       	sbiw	r24, 0x00	; 0
    577a:	09 f0       	breq	.+2      	; 0x577e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x30>
    577c:	69 c0       	rjmp	.+210    	; 0x5850 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x102>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    577e:	f7 01       	movw	r30, r14
    5780:	82 81       	ldd	r24, Z+2	; 0x02
    5782:	93 81       	ldd	r25, Z+3	; 0x03
    5784:	a4 81       	ldd	r26, Z+4	; 0x04
    5786:	b5 81       	ldd	r27, Z+5	; 0x05
    5788:	40 91 dd 07 	lds	r20, 0x07DD
    578c:	50 91 de 07 	lds	r21, 0x07DE
    5790:	60 91 df 07 	lds	r22, 0x07DF
    5794:	70 91 e0 07 	lds	r23, 0x07E0
    5798:	84 17       	cp	r24, r20
    579a:	95 07       	cpc	r25, r21
    579c:	a6 07       	cpc	r26, r22
    579e:	b7 07       	cpc	r27, r23
    57a0:	09 f4       	brne	.+2      	; 0x57a4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x56>
    57a2:	59 c0       	rjmp	.+178    	; 0x5856 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x108>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    57a4:	88 24       	eor	r8, r8
    57a6:	99 24       	eor	r9, r9
    57a8:	68 94       	set
    57aa:	83 f8       	bld	r8, 3
    57ac:	8e 0c       	add	r8, r14
    57ae:	9f 1c       	adc	r9, r15
    57b0:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    57b4:	6f 70       	andi	r22, 0x0F	; 15
    57b6:	70 70       	andi	r23, 0x00	; 0
    57b8:	60 50       	subi	r22, 0x00	; 0
    57ba:	7c 4f       	sbci	r23, 0xFC	; 252
    57bc:	c4 01       	movw	r24, r8
    57be:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN11EthernetUDP5beginEj>
    57c2:	81 30       	cpi	r24, 0x01	; 1
    57c4:	09 f0       	breq	.+2      	; 0x57c8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x7a>
    57c6:	4a c0       	rjmp	.+148    	; 0x585c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x10e>
    57c8:	83 ea       	ldi	r24, 0xA3	; 163
    57ca:	92 e0       	ldi	r25, 0x02	; 2
    57cc:	9a 83       	std	Y+2, r25	; 0x02
    57ce:	89 83       	std	Y+1, r24	; 0x01
    57d0:	f7 01       	movw	r30, r14
    57d2:	82 81       	ldd	r24, Z+2	; 0x02
    57d4:	93 81       	ldd	r25, Z+3	; 0x03
    57d6:	a4 81       	ldd	r26, Z+4	; 0x04
    57d8:	b5 81       	ldd	r27, Z+5	; 0x05
    57da:	8b 83       	std	Y+3, r24	; 0x03
    57dc:	9c 83       	std	Y+4, r25	; 0x04
    57de:	ad 83       	std	Y+5, r26	; 0x05
    57e0:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    57e2:	c4 01       	movw	r24, r8
    57e4:	be 01       	movw	r22, r28
    57e6:	6f 5f       	subi	r22, 0xFF	; 255
    57e8:	7f 4f       	sbci	r23, 0xFF	; 255
    57ea:	45 e3       	ldi	r20, 0x35	; 53
    57ec:	50 e0       	ldi	r21, 0x00	; 0
    57ee:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN11EthernetUDP11beginPacketE9IPAddressj>
    57f2:	8c 01       	movw	r16, r24
            if (ret != 0)
    57f4:	00 97       	sbiw	r24, 0x00	; 0
    57f6:	41 f1       	breq	.+80     	; 0x5848 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfa>
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    57f8:	c7 01       	movw	r24, r14
    57fa:	b6 01       	movw	r22, r12
    57fc:	0e 94 56 29 	call	0x52ac	; 0x52ac <_ZN9DNSClient12BuildRequestEPKc>
    5800:	08 2f       	mov	r16, r24
    5802:	19 2f       	mov	r17, r25
                if (ret != 0)
    5804:	01 15       	cp	r16, r1
    5806:	11 05       	cpc	r17, r1
    5808:	f9 f0       	breq	.+62     	; 0x5848 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfa>
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    580a:	c4 01       	movw	r24, r8
    580c:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN11EthernetUDP9endPacketEv>
    5810:	8c 01       	movw	r16, r24
                    if (ret != 0)
    5812:	00 97       	sbiw	r24, 0x00	; 0
    5814:	31 f4       	brne	.+12     	; 0x5822 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd4>
    5816:	18 c0       	rjmp	.+48     	; 0x5848 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfa>
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    5818:	ff ef       	ldi	r31, 0xFF	; 255
    581a:	0f 3f       	cpi	r16, 0xFF	; 255
    581c:	1f 07       	cpc	r17, r31
    581e:	a1 f4       	brne	.+40     	; 0x5848 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfa>
    5820:	05 c0       	rjmp	.+10     	; 0x582c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xde>
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
                    if (ret != 0)
    5822:	0f 2e       	mov	r0, r31
    5824:	f3 e0       	ldi	r31, 0x03	; 3
    5826:	cf 2e       	mov	r12, r31
    5828:	dd 24       	eor	r13, r13
    582a:	f0 2d       	mov	r31, r0
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    582c:	c7 01       	movw	r24, r14
    582e:	68 e8       	ldi	r22, 0x88	; 136
    5830:	73 e1       	ldi	r23, 0x13	; 19
    5832:	a5 01       	movw	r20, r10
    5834:	0e 94 0f 2a 	call	0x541e	; 0x541e <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    5838:	08 2f       	mov	r16, r24
    583a:	19 2f       	mov	r17, r25
    583c:	08 94       	sec
    583e:	c1 08       	sbc	r12, r1
    5840:	d1 08       	sbc	r13, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    5842:	c1 14       	cp	r12, r1
    5844:	d1 04       	cpc	r13, r1
    5846:	41 f7       	brne	.-48     	; 0x5818 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xca>
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    5848:	c4 01       	movw	r24, r8
    584a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <_ZN11EthernetUDP4stopEv>
    584e:	08 c0       	rjmp	.+16     	; 0x5860 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x112>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    5850:	01 e0       	ldi	r16, 0x01	; 1
    5852:	10 e0       	ldi	r17, 0x00	; 0
    5854:	05 c0       	rjmp	.+10     	; 0x5860 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x112>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    5856:	0e ef       	ldi	r16, 0xFE	; 254
    5858:	1f ef       	ldi	r17, 0xFF	; 255
    585a:	02 c0       	rjmp	.+4      	; 0x5860 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x112>
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    585c:	00 e0       	ldi	r16, 0x00	; 0
    585e:	10 e0       	ldi	r17, 0x00	; 0
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    5860:	80 2f       	mov	r24, r16
    5862:	91 2f       	mov	r25, r17
    5864:	26 96       	adiw	r28, 0x06	; 6
    5866:	0f b6       	in	r0, 0x3f	; 63
    5868:	f8 94       	cli
    586a:	de bf       	out	0x3e, r29	; 62
    586c:	0f be       	out	0x3f, r0	; 63
    586e:	cd bf       	out	0x3d, r28	; 61
    5870:	df 91       	pop	r29
    5872:	cf 91       	pop	r28
    5874:	1f 91       	pop	r17
    5876:	0f 91       	pop	r16
    5878:	ff 90       	pop	r15
    587a:	ef 90       	pop	r14
    587c:	df 90       	pop	r13
    587e:	cf 90       	pop	r12
    5880:	bf 90       	pop	r11
    5882:	af 90       	pop	r10
    5884:	9f 90       	pop	r9
    5886:	8f 90       	pop	r8
    5888:	08 95       	ret

0000588a <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    588a:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    588c:	8b ed       	ldi	r24, 0xDB	; 219
    588e:	97 e0       	ldi	r25, 0x07	; 7
    5890:	60 e0       	ldi	r22, 0x00	; 0
    5892:	40 e0       	ldi	r20, 0x00	; 0
    5894:	20 e0       	ldi	r18, 0x00	; 0
    5896:	00 e0       	ldi	r16, 0x00	; 0
    5898:	0e 94 5f 13 	call	0x26be	; 0x26be <_ZN9IPAddressC1Ehhhh>
    589c:	0f 91       	pop	r16
    589e:	08 95       	ret

000058a0 <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    58a0:	00 97       	sbiw	r24, 0x00	; 0
    58a2:	29 f0       	breq	.+10     	; 0x58ae <_Z10randomSeedj+0xe>
    srandom(seed);
    58a4:	bc 01       	movw	r22, r24
    58a6:	80 e0       	ldi	r24, 0x00	; 0
    58a8:	90 e0       	ldi	r25, 0x00	; 0
    58aa:	0e 94 ee 38 	call	0x71dc	; 0x71dc <srandom>
    58ae:	08 95       	ret

000058b0 <_Z6randoml>:
  }
}

long random(long howbig)
{
    58b0:	cf 92       	push	r12
    58b2:	df 92       	push	r13
    58b4:	ef 92       	push	r14
    58b6:	ff 92       	push	r15
    58b8:	0f 93       	push	r16
    58ba:	1f 93       	push	r17
    58bc:	6b 01       	movw	r12, r22
    58be:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    58c0:	61 15       	cp	r22, r1
    58c2:	71 05       	cpc	r23, r1
    58c4:	81 05       	cpc	r24, r1
    58c6:	91 05       	cpc	r25, r1
    58c8:	49 f0       	breq	.+18     	; 0x58dc <_Z6randoml+0x2c>
    return 0;
  }
  return random() % howbig;
    58ca:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <random>
    58ce:	a7 01       	movw	r20, r14
    58d0:	96 01       	movw	r18, r12
    58d2:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <__divmodsi4>
    58d6:	8b 01       	movw	r16, r22
    58d8:	9c 01       	movw	r18, r24
    58da:	03 c0       	rjmp	.+6      	; 0x58e2 <_Z6randoml+0x32>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    58dc:	00 e0       	ldi	r16, 0x00	; 0
    58de:	10 e0       	ldi	r17, 0x00	; 0
    58e0:	98 01       	movw	r18, r16
  }
  return random() % howbig;
}
    58e2:	60 2f       	mov	r22, r16
    58e4:	71 2f       	mov	r23, r17
    58e6:	82 2f       	mov	r24, r18
    58e8:	93 2f       	mov	r25, r19
    58ea:	1f 91       	pop	r17
    58ec:	0f 91       	pop	r16
    58ee:	ff 90       	pop	r15
    58f0:	ef 90       	pop	r14
    58f2:	df 90       	pop	r13
    58f4:	cf 90       	pop	r12
    58f6:	08 95       	ret

000058f8 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    58f8:	cf 92       	push	r12
    58fa:	df 92       	push	r13
    58fc:	ef 92       	push	r14
    58fe:	ff 92       	push	r15
    5900:	6b 01       	movw	r12, r22
    5902:	7c 01       	movw	r14, r24
    5904:	da 01       	movw	r26, r20
    5906:	c9 01       	movw	r24, r18
  if (howsmall >= howbig) {
    5908:	c2 16       	cp	r12, r18
    590a:	d3 06       	cpc	r13, r19
    590c:	e4 06       	cpc	r14, r20
    590e:	f5 06       	cpc	r15, r21
    5910:	74 f4       	brge	.+28     	; 0x592e <_Z6randomll+0x36>
    return howsmall;
  }
  long diff = howbig - howsmall;
    5912:	8c 19       	sub	r24, r12
    5914:	9d 09       	sbc	r25, r13
    5916:	ae 09       	sbc	r26, r14
    5918:	bf 09       	sbc	r27, r15
  return random(diff) + howsmall;
    591a:	bc 01       	movw	r22, r24
    591c:	cd 01       	movw	r24, r26
    591e:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <_Z6randoml>
    5922:	dc 01       	movw	r26, r24
    5924:	cb 01       	movw	r24, r22
    5926:	c8 0e       	add	r12, r24
    5928:	d9 1e       	adc	r13, r25
    592a:	ea 1e       	adc	r14, r26
    592c:	fb 1e       	adc	r15, r27
}
    592e:	6c 2d       	mov	r22, r12
    5930:	7d 2d       	mov	r23, r13
    5932:	8e 2d       	mov	r24, r14
    5934:	9f 2d       	mov	r25, r15
    5936:	ff 90       	pop	r15
    5938:	ef 90       	pop	r14
    593a:	df 90       	pop	r13
    593c:	cf 90       	pop	r12
    593e:	08 95       	ret

00005940 <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    5940:	4f 92       	push	r4
    5942:	5f 92       	push	r5
    5944:	6f 92       	push	r6
    5946:	7f 92       	push	r7
    5948:	af 92       	push	r10
    594a:	bf 92       	push	r11
    594c:	cf 92       	push	r12
    594e:	df 92       	push	r13
    5950:	ef 92       	push	r14
    5952:	ff 92       	push	r15
    5954:	0f 93       	push	r16
    5956:	1f 93       	push	r17
    5958:	cf 93       	push	r28
    595a:	df 93       	push	r29
    595c:	00 d0       	rcall	.+0      	; 0x595e <_Z3maplllll+0x1e>
    595e:	0f 92       	push	r0
    5960:	cd b7       	in	r28, 0x3d	; 61
    5962:	de b7       	in	r29, 0x3e	; 62
    5964:	29 01       	movw	r4, r18
    5966:	3a 01       	movw	r6, r20
    5968:	e9 82       	std	Y+1, r14	; 0x01
    596a:	fa 82       	std	Y+2, r15	; 0x02
    596c:	0b 83       	std	Y+3, r16	; 0x03
    596e:	1c 83       	std	Y+4, r17	; 0x04
    5970:	76 01       	movw	r14, r12
    5972:	65 01       	movw	r12, r10
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    5974:	62 1b       	sub	r22, r18
    5976:	73 0b       	sbc	r23, r19
    5978:	84 0b       	sbc	r24, r20
    597a:	95 0b       	sbc	r25, r21
    597c:	2e 89       	ldd	r18, Y+22	; 0x16
    597e:	3f 89       	ldd	r19, Y+23	; 0x17
    5980:	48 8d       	ldd	r20, Y+24	; 0x18
    5982:	59 8d       	ldd	r21, Y+25	; 0x19
    5984:	2c 19       	sub	r18, r12
    5986:	3d 09       	sbc	r19, r13
    5988:	4e 09       	sbc	r20, r14
    598a:	5f 09       	sbc	r21, r15
    598c:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <__mulsi3>
    5990:	29 81       	ldd	r18, Y+1	; 0x01
    5992:	3a 81       	ldd	r19, Y+2	; 0x02
    5994:	4b 81       	ldd	r20, Y+3	; 0x03
    5996:	5c 81       	ldd	r21, Y+4	; 0x04
    5998:	24 19       	sub	r18, r4
    599a:	35 09       	sbc	r19, r5
    599c:	46 09       	sbc	r20, r6
    599e:	57 09       	sbc	r21, r7
    59a0:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <__divmodsi4>
    59a4:	c2 0e       	add	r12, r18
    59a6:	d3 1e       	adc	r13, r19
    59a8:	e4 1e       	adc	r14, r20
    59aa:	f5 1e       	adc	r15, r21
}
    59ac:	6c 2d       	mov	r22, r12
    59ae:	7d 2d       	mov	r23, r13
    59b0:	8e 2d       	mov	r24, r14
    59b2:	9f 2d       	mov	r25, r15
    59b4:	0f 90       	pop	r0
    59b6:	0f 90       	pop	r0
    59b8:	0f 90       	pop	r0
    59ba:	0f 90       	pop	r0
    59bc:	df 91       	pop	r29
    59be:	cf 91       	pop	r28
    59c0:	1f 91       	pop	r17
    59c2:	0f 91       	pop	r16
    59c4:	ff 90       	pop	r15
    59c6:	ef 90       	pop	r14
    59c8:	df 90       	pop	r13
    59ca:	cf 90       	pop	r12
    59cc:	bf 90       	pop	r11
    59ce:	af 90       	pop	r10
    59d0:	7f 90       	pop	r7
    59d2:	6f 90       	pop	r6
    59d4:	5f 90       	pop	r5
    59d6:	4f 90       	pop	r4
    59d8:	08 95       	ret

000059da <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
    59da:	08 95       	ret

000059dc <_Z8makeWordhh>:
    59dc:	70 e0       	ldi	r23, 0x00	; 0
    59de:	38 2f       	mov	r19, r24
    59e0:	20 e0       	ldi	r18, 0x00	; 0
    59e2:	26 2b       	or	r18, r22
    59e4:	37 2b       	or	r19, r23
    59e6:	82 2f       	mov	r24, r18
    59e8:	93 2f       	mov	r25, r19
    59ea:	08 95       	ret

000059ec <_ZN10RobotModel4initEv>:
RobotModel::RobotModel() {
	// TODO Auto-generated constructor stub
	init();
}
void RobotModel::init(){
	_sectionCount = 0;
    59ec:	fc 01       	movw	r30, r24
    59ee:	13 8a       	std	Z+19, r1	; 0x13
    59f0:	12 8a       	std	Z+18, r1	; 0x12
}
    59f2:	08 95       	ret

000059f4 <_ZN10RobotModelC1Ev>:
#include "..\Utils\ByteReader.h"
#include "..\Utils\ByteWriter.h"

RobotModel::RobotModel() {
	// TODO Auto-generated constructor stub
	init();
    59f4:	0e 94 f6 2c 	call	0x59ec	; 0x59ec <_ZN10RobotModel4initEv>
}
    59f8:	08 95       	ret

000059fa <_ZN10RobotModel6updateEPhjj>:
void RobotModel::init(){
	_sectionCount = 0;
}

void RobotModel::update(unsigned char data[], unsigned int offset, unsigned int length){
    59fa:	2f 92       	push	r2
    59fc:	3f 92       	push	r3
    59fe:	4f 92       	push	r4
    5a00:	5f 92       	push	r5
    5a02:	6f 92       	push	r6
    5a04:	7f 92       	push	r7
    5a06:	8f 92       	push	r8
    5a08:	9f 92       	push	r9
    5a0a:	af 92       	push	r10
    5a0c:	bf 92       	push	r11
    5a0e:	cf 92       	push	r12
    5a10:	df 92       	push	r13
    5a12:	ef 92       	push	r14
    5a14:	ff 92       	push	r15
    5a16:	0f 93       	push	r16
    5a18:	1f 93       	push	r17
    5a1a:	cf 93       	push	r28
    5a1c:	df 93       	push	r29
    5a1e:	00 d0       	rcall	.+0      	; 0x5a20 <_ZN10RobotModel6updateEPhjj+0x26>
    5a20:	0f 92       	push	r0
    5a22:	0f 92       	push	r0
    5a24:	cd b7       	in	r28, 0x3d	; 61
    5a26:	de b7       	in	r29, 0x3e	; 62
    5a28:	4c 01       	movw	r8, r24
    5a2a:	3b 01       	movw	r6, r22
	if (data[offset++] == PACKET_VERSION){
    5a2c:	84 2f       	mov	r24, r20
    5a2e:	95 2f       	mov	r25, r21
    5a30:	fb 01       	movw	r30, r22
    5a32:	e8 0f       	add	r30, r24
    5a34:	f9 1f       	adc	r31, r25
    5a36:	20 81       	ld	r18, Z
    5a38:	01 96       	adiw	r24, 0x01	; 1
    5a3a:	9a 83       	std	Y+2, r25	; 0x02
    5a3c:	89 83       	std	Y+1, r24	; 0x01
    5a3e:	24 30       	cpi	r18, 0x04	; 4
    5a40:	09 f0       	breq	.+2      	; 0x5a44 <_ZN10RobotModel6updateEPhjj+0x4a>
    5a42:	87 c0       	rjmp	.+270    	; 0x5b52 <_ZN10RobotModel6updateEPhjj+0x158>
		packetIndex = readUInt16(data, &offset);
    5a44:	cb 01       	movw	r24, r22
    5a46:	be 01       	movw	r22, r28
    5a48:	6f 5f       	subi	r22, 0xFF	; 255
    5a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a4c:	0e 94 43 30 	call	0x6086	; 0x6086 <_Z10readUInt16PhPj>
    5a50:	d4 01       	movw	r26, r8
    5a52:	51 96       	adiw	r26, 0x11	; 17
    5a54:	9c 93       	st	X, r25
    5a56:	8e 93       	st	-X, r24
    5a58:	50 97       	sbiw	r26, 0x10	; 16
		uint8_t packetType = data[offset++];
    5a5a:	29 81       	ldd	r18, Y+1	; 0x01
    5a5c:	3a 81       	ldd	r19, Y+2	; 0x02
    5a5e:	f3 01       	movw	r30, r6
    5a60:	e2 0f       	add	r30, r18
    5a62:	f3 1f       	adc	r31, r19
    5a64:	40 81       	ld	r20, Z
		
		offset+=2; //Ignore the content length.
    5a66:	c9 01       	movw	r24, r18
    5a68:	03 96       	adiw	r24, 0x03	; 3
		if (packetType == 2) {
    5a6a:	42 30       	cpi	r20, 0x02	; 2
    5a6c:	09 f0       	breq	.+2      	; 0x5a70 <_ZN10RobotModel6updateEPhjj+0x76>
    5a6e:	71 c0       	rjmp	.+226    	; 0x5b52 <_ZN10RobotModel6updateEPhjj+0x158>
			uint8_t sectionCount = data[offset++];
    5a70:	86 0d       	add	r24, r6
    5a72:	97 1d       	adc	r25, r7
    5a74:	fc 01       	movw	r30, r24
    5a76:	80 81       	ld	r24, Z
    5a78:	2c 5f       	subi	r18, 0xFC	; 252
    5a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a7c:	3a 83       	std	Y+2, r19	; 0x02
    5a7e:	29 83       	std	Y+1, r18	; 0x01
			
			for (int i = 0; i < sectionCount; i++){
    5a80:	28 2f       	mov	r18, r24
    5a82:	30 e0       	ldi	r19, 0x00	; 0
    5a84:	3c 83       	std	Y+4, r19	; 0x04
    5a86:	2b 83       	std	Y+3, r18	; 0x03
    5a88:	12 16       	cp	r1, r18
    5a8a:	13 06       	cpc	r1, r19
    5a8c:	0c f0       	brlt	.+2      	; 0x5a90 <_ZN10RobotModel6updateEPhjj+0x96>
    5a8e:	61 c0       	rjmp	.+194    	; 0x5b52 <_ZN10RobotModel6updateEPhjj+0x158>
    5a90:	44 24       	eor	r4, r4
    5a92:	55 24       	eor	r5, r5
				unsigned char sectionId = data[offset++];
				
				unsigned short length = readUInt16(data, &offset);
				for (int iSection = 0; iSection < _sectionCount; iSection++){
    5a94:	a8 2c       	mov	r10, r8
    5a96:	9d 82       	std	Y+5, r9	; 0x05
		offset+=2; //Ignore the content length.
		if (packetType == 2) {
			uint8_t sectionCount = data[offset++];
			
			for (int i = 0; i < sectionCount; i++){
				unsigned char sectionId = data[offset++];
    5a98:	89 81       	ldd	r24, Y+1	; 0x01
    5a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5a9c:	f3 01       	movw	r30, r6
    5a9e:	e8 0f       	add	r30, r24
    5aa0:	f9 1f       	adc	r31, r25
    5aa2:	b0 80       	ld	r11, Z
    5aa4:	01 96       	adiw	r24, 0x01	; 1
    5aa6:	9a 83       	std	Y+2, r25	; 0x02
    5aa8:	89 83       	std	Y+1, r24	; 0x01
				
				unsigned short length = readUInt16(data, &offset);
    5aaa:	c3 01       	movw	r24, r6
    5aac:	be 01       	movw	r22, r28
    5aae:	6f 5f       	subi	r22, 0xFF	; 255
    5ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ab2:	0e 94 43 30 	call	0x6086	; 0x6086 <_Z10readUInt16PhPj>
    5ab6:	1c 01       	movw	r2, r24
				for (int iSection = 0; iSection < _sectionCount; iSection++){
    5ab8:	d4 01       	movw	r26, r8
    5aba:	52 96       	adiw	r26, 0x12	; 18
    5abc:	8d 91       	ld	r24, X+
    5abe:	9c 91       	ld	r25, X
    5ac0:	53 97       	sbiw	r26, 0x13	; 19
    5ac2:	18 16       	cp	r1, r24
    5ac4:	19 06       	cpc	r1, r25
    5ac6:	b4 f5       	brge	.+108    	; 0x5b34 <_ZN10RobotModel6updateEPhjj+0x13a>
    5ac8:	0a 2d       	mov	r16, r10
    5aca:	1d 81       	ldd	r17, Y+5	; 0x05
    5acc:	ee 24       	eor	r14, r14
    5ace:	ff 24       	eor	r15, r15
}
void RobotModel::init(){
	_sectionCount = 0;
}

void RobotModel::update(unsigned char data[], unsigned int offset, unsigned int length){
    5ad0:	68 01       	movw	r12, r16
			for (int i = 0; i < sectionCount; i++){
				unsigned char sectionId = data[offset++];
				
				unsigned short length = readUInt16(data, &offset);
				for (int iSection = 0; iSection < _sectionCount; iSection++){
					if (sections[iSection]->sectionId == sectionId){
    5ad2:	d8 01       	movw	r26, r16
    5ad4:	ed 91       	ld	r30, X+
    5ad6:	fc 91       	ld	r31, X
    5ad8:	11 97       	sbiw	r26, 0x01	; 1
    5ada:	82 81       	ldd	r24, Z+2	; 0x02
    5adc:	8b 15       	cp	r24, r11
    5ade:	f9 f4       	brne	.+62     	; 0x5b1e <_ZN10RobotModel6updateEPhjj+0x124>
						if (!sections[iSection]->isActive){
    5ae0:	83 81       	ldd	r24, Z+3	; 0x03
    5ae2:	88 23       	and	r24, r24
    5ae4:	79 f4       	brne	.+30     	; 0x5b04 <_ZN10RobotModel6updateEPhjj+0x10a>
							sections[iSection]->isActive = true;
    5ae6:	b1 e0       	ldi	r27, 0x01	; 1
    5ae8:	b3 83       	std	Z+3, r27	; 0x03
							Serial.print("Activated section:");
    5aea:	85 e8       	ldi	r24, 0x85	; 133
    5aec:	95 e0       	ldi	r25, 0x05	; 5
    5aee:	6d eb       	ldi	r22, 0xBD	; 189
    5af0:	72 e0       	ldi	r23, 0x02	; 2
    5af2:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN5Print5printEPKc>
							Serial.println(sectionId);
    5af6:	85 e8       	ldi	r24, 0x85	; 133
    5af8:	95 e0       	ldi	r25, 0x05	; 5
    5afa:	6b 2d       	mov	r22, r11
    5afc:	4a e0       	ldi	r20, 0x0A	; 10
    5afe:	50 e0       	ldi	r21, 0x00	; 0
    5b00:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <_ZN5Print7printlnEhi>
						}						
						sections[iSection]->update(data, offset);
    5b04:	f6 01       	movw	r30, r12
    5b06:	80 81       	ld	r24, Z
    5b08:	91 81       	ldd	r25, Z+1	; 0x01
    5b0a:	dc 01       	movw	r26, r24
    5b0c:	ed 91       	ld	r30, X+
    5b0e:	fc 91       	ld	r31, X
    5b10:	49 81       	ldd	r20, Y+1	; 0x01
    5b12:	5a 81       	ldd	r21, Y+2	; 0x02
    5b14:	01 90       	ld	r0, Z+
    5b16:	f0 81       	ld	r31, Z
    5b18:	e0 2d       	mov	r30, r0
    5b1a:	b3 01       	movw	r22, r6
    5b1c:	19 95       	eicall
			
			for (int i = 0; i < sectionCount; i++){
				unsigned char sectionId = data[offset++];
				
				unsigned short length = readUInt16(data, &offset);
				for (int iSection = 0; iSection < _sectionCount; iSection++){
    5b1e:	08 94       	sec
    5b20:	e1 1c       	adc	r14, r1
    5b22:	f1 1c       	adc	r15, r1
    5b24:	0e 5f       	subi	r16, 0xFE	; 254
    5b26:	1f 4f       	sbci	r17, 0xFF	; 255
    5b28:	f4 01       	movw	r30, r8
    5b2a:	82 89       	ldd	r24, Z+18	; 0x12
    5b2c:	93 89       	ldd	r25, Z+19	; 0x13
    5b2e:	e8 16       	cp	r14, r24
    5b30:	f9 06       	cpc	r15, r25
    5b32:	74 f2       	brlt	.-100    	; 0x5ad0 <_ZN10RobotModel6updateEPhjj+0xd6>
							Serial.println(sectionId);
						}						
						sections[iSection]->update(data, offset);
					}
				}
				offset += length;
    5b34:	89 81       	ldd	r24, Y+1	; 0x01
    5b36:	9a 81       	ldd	r25, Y+2	; 0x02
    5b38:	82 0d       	add	r24, r2
    5b3a:	93 1d       	adc	r25, r3
    5b3c:	9a 83       	std	Y+2, r25	; 0x02
    5b3e:	89 83       	std	Y+1, r24	; 0x01
		
		offset+=2; //Ignore the content length.
		if (packetType == 2) {
			uint8_t sectionCount = data[offset++];
			
			for (int i = 0; i < sectionCount; i++){
    5b40:	08 94       	sec
    5b42:	41 1c       	adc	r4, r1
    5b44:	51 1c       	adc	r5, r1
    5b46:	2b 81       	ldd	r18, Y+3	; 0x03
    5b48:	3c 81       	ldd	r19, Y+4	; 0x04
    5b4a:	42 16       	cp	r4, r18
    5b4c:	53 06       	cpc	r5, r19
    5b4e:	0c f4       	brge	.+2      	; 0x5b52 <_ZN10RobotModel6updateEPhjj+0x158>
    5b50:	a3 cf       	rjmp	.-186    	; 0x5a98 <_ZN10RobotModel6updateEPhjj+0x9e>
		}
	}
	else{
		//TODO:Invalid packet version. DTC.
	}
}
    5b52:	0f 90       	pop	r0
    5b54:	0f 90       	pop	r0
    5b56:	0f 90       	pop	r0
    5b58:	0f 90       	pop	r0
    5b5a:	0f 90       	pop	r0
    5b5c:	df 91       	pop	r29
    5b5e:	cf 91       	pop	r28
    5b60:	1f 91       	pop	r17
    5b62:	0f 91       	pop	r16
    5b64:	ff 90       	pop	r15
    5b66:	ef 90       	pop	r14
    5b68:	df 90       	pop	r13
    5b6a:	cf 90       	pop	r12
    5b6c:	bf 90       	pop	r11
    5b6e:	af 90       	pop	r10
    5b70:	9f 90       	pop	r9
    5b72:	8f 90       	pop	r8
    5b74:	7f 90       	pop	r7
    5b76:	6f 90       	pop	r6
    5b78:	5f 90       	pop	r5
    5b7a:	4f 90       	pop	r4
    5b7c:	3f 90       	pop	r3
    5b7e:	2f 90       	pop	r2
    5b80:	08 95       	ret

00005b82 <_ZN10RobotModel9getStatusEPhPj>:
void RobotModel::getStatus(unsigned char data[], unsigned int *offset){
    5b82:	4f 92       	push	r4
    5b84:	5f 92       	push	r5
    5b86:	6f 92       	push	r6
    5b88:	7f 92       	push	r7
    5b8a:	8f 92       	push	r8
    5b8c:	9f 92       	push	r9
    5b8e:	af 92       	push	r10
    5b90:	bf 92       	push	r11
    5b92:	cf 92       	push	r12
    5b94:	df 92       	push	r13
    5b96:	ef 92       	push	r14
    5b98:	ff 92       	push	r15
    5b9a:	0f 93       	push	r16
    5b9c:	1f 93       	push	r17
    5b9e:	cf 93       	push	r28
    5ba0:	df 93       	push	r29
    5ba2:	3c 01       	movw	r6, r24
    5ba4:	4b 01       	movw	r8, r22
    5ba6:	5a 01       	movw	r10, r20
	data[(*offset)++] = PACKET_VERSION;
    5ba8:	da 01       	movw	r26, r20
    5baa:	4d 91       	ld	r20, X+
    5bac:	5c 91       	ld	r21, X
    5bae:	11 97       	sbiw	r26, 0x01	; 1
    5bb0:	fb 01       	movw	r30, r22
    5bb2:	e4 0f       	add	r30, r20
    5bb4:	f5 1f       	adc	r31, r21
    5bb6:	84 e0       	ldi	r24, 0x04	; 4
    5bb8:	80 83       	st	Z, r24
    5bba:	4f 5f       	subi	r20, 0xFF	; 255
    5bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    5bbe:	4d 93       	st	X+, r20
    5bc0:	5c 93       	st	X, r21
	writeUInt16(data, packetIndex, (*offset)); (*offset) += 2;
    5bc2:	f3 01       	movw	r30, r6
    5bc4:	60 89       	ldd	r22, Z+16	; 0x10
    5bc6:	71 89       	ldd	r23, Z+17	; 0x11
    5bc8:	c4 01       	movw	r24, r8
    5bca:	0e 94 00 34 	call	0x6800	; 0x6800 <_Z11writeUInt16Phtj>
    5bce:	d5 01       	movw	r26, r10
    5bd0:	2d 91       	ld	r18, X+
    5bd2:	3c 91       	ld	r19, X
    5bd4:	11 97       	sbiw	r26, 0x01	; 1
	data[(*offset)++] = 3; //Set as status packet
    5bd6:	f4 01       	movw	r30, r8
    5bd8:	e2 0f       	add	r30, r18
    5bda:	f3 1f       	adc	r31, r19
    5bdc:	83 e0       	ldi	r24, 0x03	; 3
    5bde:	82 83       	std	Z+2, r24	; 0x02
    5be0:	0f 2e       	mov	r0, r31
    5be2:	f3 e0       	ldi	r31, 0x03	; 3
    5be4:	4f 2e       	mov	r4, r31
    5be6:	55 24       	eor	r5, r5
    5be8:	f0 2d       	mov	r31, r0
    5bea:	42 0e       	add	r4, r18
    5bec:	53 1e       	adc	r5, r19
	unsigned int contentLengthOffset = *offset;
	(*offset) += 2;
    5bee:	c9 01       	movw	r24, r18
    5bf0:	05 96       	adiw	r24, 0x05	; 5
    5bf2:	8d 93       	st	X+, r24
    5bf4:	9c 93       	st	X, r25
	data[(*offset)++] = _sectionCount;
    5bf6:	88 0d       	add	r24, r8
    5bf8:	99 1d       	adc	r25, r9
    5bfa:	f3 01       	movw	r30, r6
    5bfc:	42 89       	ldd	r20, Z+18	; 0x12
    5bfe:	dc 01       	movw	r26, r24
    5c00:	4c 93       	st	X, r20
    5c02:	c9 01       	movw	r24, r18
    5c04:	06 96       	adiw	r24, 0x06	; 6
    5c06:	f5 01       	movw	r30, r10
    5c08:	91 83       	std	Z+1, r25	; 0x01
    5c0a:	80 83       	st	Z, r24
	
	for (int i = 0; i < _sectionCount; i++){
    5c0c:	d3 01       	movw	r26, r6
    5c0e:	52 96       	adiw	r26, 0x12	; 18
    5c10:	8d 91       	ld	r24, X+
    5c12:	9c 91       	ld	r25, X
    5c14:	53 97       	sbiw	r26, 0x13	; 19
    5c16:	18 16       	cp	r1, r24
    5c18:	19 06       	cpc	r1, r25
    5c1a:	e4 f5       	brge	.+120    	; 0x5c94 <_ZN10RobotModel9getStatusEPhPj+0x112>
    5c1c:	83 01       	movw	r16, r6
    5c1e:	ee 24       	eor	r14, r14
    5c20:	ff 24       	eor	r15, r15
		unsigned short sectionHeaderOffset = *offset;
    5c22:	f5 01       	movw	r30, r10
    5c24:	80 81       	ld	r24, Z
    5c26:	91 81       	ldd	r25, Z+1	; 0x01
		data[(*offset)++] = sections[i]->sectionId;
    5c28:	d8 01       	movw	r26, r16
    5c2a:	ed 91       	ld	r30, X+
    5c2c:	fc 91       	ld	r31, X
    5c2e:	22 81       	ldd	r18, Z+2	; 0x02
    5c30:	f4 01       	movw	r30, r8
    5c32:	e8 0f       	add	r30, r24
    5c34:	f9 1f       	adc	r31, r25
    5c36:	20 83       	st	Z, r18
    5c38:	6c 01       	movw	r12, r24
    5c3a:	08 94       	sec
    5c3c:	c1 1c       	adc	r12, r1
    5c3e:	d1 1c       	adc	r13, r1
		(*offset) += 2;
    5c40:	ec 01       	movw	r28, r24
    5c42:	23 96       	adiw	r28, 0x03	; 3
    5c44:	f5 01       	movw	r30, r10
    5c46:	d1 83       	std	Z+1, r29	; 0x01
    5c48:	c0 83       	st	Z, r28
		unsigned short contentStartOffset = *offset;

		if (sections[i]->isActive){
    5c4a:	f8 01       	movw	r30, r16
    5c4c:	a1 91       	ld	r26, Z+
    5c4e:	b1 91       	ld	r27, Z+
    5c50:	8f 01       	movw	r16, r30
    5c52:	13 96       	adiw	r26, 0x03	; 3
    5c54:	8c 91       	ld	r24, X
    5c56:	13 97       	sbiw	r26, 0x03	; 3
    5c58:	88 23       	and	r24, r24
    5c5a:	51 f0       	breq	.+20     	; 0x5c70 <_ZN10RobotModel9getStatusEPhPj+0xee>
			sections[i]->getStatus(data, offset);
    5c5c:	ed 91       	ld	r30, X+
    5c5e:	fc 91       	ld	r31, X
    5c60:	11 97       	sbiw	r26, 0x01	; 1
    5c62:	02 80       	ldd	r0, Z+2	; 0x02
    5c64:	f3 81       	ldd	r31, Z+3	; 0x03
    5c66:	e0 2d       	mov	r30, r0
    5c68:	cd 01       	movw	r24, r26
    5c6a:	b4 01       	movw	r22, r8
    5c6c:	a5 01       	movw	r20, r10
    5c6e:	19 95       	eicall
		}		
		//Write length to header
		unsigned short length = (*offset) - contentStartOffset;
    5c70:	d5 01       	movw	r26, r10
    5c72:	6d 91       	ld	r22, X+
    5c74:	7c 91       	ld	r23, X
    5c76:	6c 1b       	sub	r22, r28
    5c78:	7d 0b       	sbc	r23, r29
		writeUInt16(data, length, sectionHeaderOffset + 1);
    5c7a:	c4 01       	movw	r24, r8
    5c7c:	a6 01       	movw	r20, r12
    5c7e:	0e 94 00 34 	call	0x6800	; 0x6800 <_Z11writeUInt16Phtj>
	data[(*offset)++] = 3; //Set as status packet
	unsigned int contentLengthOffset = *offset;
	(*offset) += 2;
	data[(*offset)++] = _sectionCount;
	
	for (int i = 0; i < _sectionCount; i++){
    5c82:	08 94       	sec
    5c84:	e1 1c       	adc	r14, r1
    5c86:	f1 1c       	adc	r15, r1
    5c88:	f3 01       	movw	r30, r6
    5c8a:	82 89       	ldd	r24, Z+18	; 0x12
    5c8c:	93 89       	ldd	r25, Z+19	; 0x13
    5c8e:	e8 16       	cp	r14, r24
    5c90:	f9 06       	cpc	r15, r25
    5c92:	3c f2       	brlt	.-114    	; 0x5c22 <_ZN10RobotModel9getStatusEPhPj+0xa0>
		}		
		//Write length to header
		unsigned short length = (*offset) - contentStartOffset;
		writeUInt16(data, length, sectionHeaderOffset + 1);
	}
	writeUInt16(data, (*offset) - contentLengthOffset, contentLengthOffset);
    5c94:	d5 01       	movw	r26, r10
    5c96:	6d 91       	ld	r22, X+
    5c98:	7c 91       	ld	r23, X
    5c9a:	64 19       	sub	r22, r4
    5c9c:	75 09       	sbc	r23, r5
    5c9e:	c4 01       	movw	r24, r8
    5ca0:	a2 01       	movw	r20, r4
    5ca2:	0e 94 00 34 	call	0x6800	; 0x6800 <_Z11writeUInt16Phtj>
}
    5ca6:	df 91       	pop	r29
    5ca8:	cf 91       	pop	r28
    5caa:	1f 91       	pop	r17
    5cac:	0f 91       	pop	r16
    5cae:	ff 90       	pop	r15
    5cb0:	ef 90       	pop	r14
    5cb2:	df 90       	pop	r13
    5cb4:	cf 90       	pop	r12
    5cb6:	bf 90       	pop	r11
    5cb8:	af 90       	pop	r10
    5cba:	9f 90       	pop	r9
    5cbc:	8f 90       	pop	r8
    5cbe:	7f 90       	pop	r7
    5cc0:	6f 90       	pop	r6
    5cc2:	5f 90       	pop	r5
    5cc4:	4f 90       	pop	r4
    5cc6:	08 95       	ret

00005cc8 <_ZN10RobotModel4loopEb>:

void RobotModel::loop(bool safteyTripped){
    5cc8:	df 92       	push	r13
    5cca:	ef 92       	push	r14
    5ccc:	ff 92       	push	r15
    5cce:	0f 93       	push	r16
    5cd0:	1f 93       	push	r17
    5cd2:	cf 93       	push	r28
    5cd4:	df 93       	push	r29
    5cd6:	7c 01       	movw	r14, r24
    5cd8:	d6 2e       	mov	r13, r22
	for (int i = 0; i < _sectionCount; i++){
    5cda:	fc 01       	movw	r30, r24
    5cdc:	82 89       	ldd	r24, Z+18	; 0x12
    5cde:	93 89       	ldd	r25, Z+19	; 0x13
    5ce0:	18 16       	cp	r1, r24
    5ce2:	19 06       	cpc	r1, r25
    5ce4:	e4 f4       	brge	.+56     	; 0x5d1e <_ZN10RobotModel4loopEb+0x56>
    5ce6:	87 01       	movw	r16, r14
    5ce8:	c0 e0       	ldi	r28, 0x00	; 0
    5cea:	d0 e0       	ldi	r29, 0x00	; 0
		if (sections[i]->isActive)
    5cec:	f8 01       	movw	r30, r16
    5cee:	a1 91       	ld	r26, Z+
    5cf0:	b1 91       	ld	r27, Z+
    5cf2:	8f 01       	movw	r16, r30
    5cf4:	13 96       	adiw	r26, 0x03	; 3
    5cf6:	8c 91       	ld	r24, X
    5cf8:	13 97       	sbiw	r26, 0x03	; 3
    5cfa:	88 23       	and	r24, r24
    5cfc:	49 f0       	breq	.+18     	; 0x5d10 <_ZN10RobotModel4loopEb+0x48>
		sections[i]->loop(safteyTripped);
    5cfe:	ed 91       	ld	r30, X+
    5d00:	fc 91       	ld	r31, X
    5d02:	11 97       	sbiw	r26, 0x01	; 1
    5d04:	04 80       	ldd	r0, Z+4	; 0x04
    5d06:	f5 81       	ldd	r31, Z+5	; 0x05
    5d08:	e0 2d       	mov	r30, r0
    5d0a:	cd 01       	movw	r24, r26
    5d0c:	6d 2d       	mov	r22, r13
    5d0e:	19 95       	eicall
	}
	writeUInt16(data, (*offset) - contentLengthOffset, contentLengthOffset);
}

void RobotModel::loop(bool safteyTripped){
	for (int i = 0; i < _sectionCount; i++){
    5d10:	21 96       	adiw	r28, 0x01	; 1
    5d12:	f7 01       	movw	r30, r14
    5d14:	82 89       	ldd	r24, Z+18	; 0x12
    5d16:	93 89       	ldd	r25, Z+19	; 0x13
    5d18:	c8 17       	cp	r28, r24
    5d1a:	d9 07       	cpc	r29, r25
    5d1c:	3c f3       	brlt	.-50     	; 0x5cec <_ZN10RobotModel4loopEb+0x24>
		if (sections[i]->isActive)
		sections[i]->loop(safteyTripped);
	}
}
    5d1e:	df 91       	pop	r29
    5d20:	cf 91       	pop	r28
    5d22:	1f 91       	pop	r17
    5d24:	0f 91       	pop	r16
    5d26:	ff 90       	pop	r15
    5d28:	ef 90       	pop	r14
    5d2a:	df 90       	pop	r13
    5d2c:	08 95       	ret

00005d2e <_ZN10RobotModel10addSectionEP17RobotModelSection>:

bool RobotModel::addSection(RobotModelSection *section){
    5d2e:	ef 92       	push	r14
    5d30:	ff 92       	push	r15
    5d32:	0f 93       	push	r16
    5d34:	1f 93       	push	r17
    5d36:	cf 93       	push	r28
    5d38:	df 93       	push	r29
    5d3a:	8c 01       	movw	r16, r24
    5d3c:	7b 01       	movw	r14, r22
	if (_sectionCount < MAX_MODEL_SECTIONS){
    5d3e:	fc 01       	movw	r30, r24
    5d40:	82 89       	ldd	r24, Z+18	; 0x12
    5d42:	93 89       	ldd	r25, Z+19	; 0x13
    5d44:	88 30       	cpi	r24, 0x08	; 8
    5d46:	91 05       	cpc	r25, r1
    5d48:	e4 f4       	brge	.+56     	; 0x5d82 <_ZN10RobotModel10addSectionEP17RobotModelSection+0x54>
		sections[_sectionCount++] = section;
    5d4a:	fc 01       	movw	r30, r24
    5d4c:	ee 0f       	add	r30, r30
    5d4e:	ff 1f       	adc	r31, r31
    5d50:	e0 0f       	add	r30, r16
    5d52:	f1 1f       	adc	r31, r17
    5d54:	71 83       	std	Z+1, r23	; 0x01
    5d56:	60 83       	st	Z, r22
    5d58:	01 96       	adiw	r24, 0x01	; 1
    5d5a:	f8 01       	movw	r30, r16
    5d5c:	93 8b       	std	Z+19, r25	; 0x13
    5d5e:	82 8b       	std	Z+18, r24	; 0x12
		Serial.print("Added section:");
    5d60:	c5 e8       	ldi	r28, 0x85	; 133
    5d62:	d5 e0       	ldi	r29, 0x05	; 5
    5d64:	ce 01       	movw	r24, r28
    5d66:	60 ed       	ldi	r22, 0xD0	; 208
    5d68:	72 e0       	ldi	r23, 0x02	; 2
    5d6a:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN5Print5printEPKc>
		Serial.println((int)(section->sectionId));
    5d6e:	f7 01       	movw	r30, r14
    5d70:	62 81       	ldd	r22, Z+2	; 0x02
    5d72:	ce 01       	movw	r24, r28
    5d74:	70 e0       	ldi	r23, 0x00	; 0
    5d76:	4a e0       	ldi	r20, 0x0A	; 10
    5d78:	50 e0       	ldi	r21, 0x00	; 0
    5d7a:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <_ZN5Print7printlnEii>
		return true;
    5d7e:	81 e0       	ldi	r24, 0x01	; 1
    5d80:	10 c0       	rjmp	.+32     	; 0x5da2 <_ZN10RobotModel10addSectionEP17RobotModelSection+0x74>
	}
	else
	{
		Serial.print("Too many sections:");
    5d82:	c5 e8       	ldi	r28, 0x85	; 133
    5d84:	d5 e0       	ldi	r29, 0x05	; 5
    5d86:	ce 01       	movw	r24, r28
    5d88:	6f ed       	ldi	r22, 0xDF	; 223
    5d8a:	72 e0       	ldi	r23, 0x02	; 2
    5d8c:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN5Print5printEPKc>
		Serial.print(_sectionCount);
    5d90:	f8 01       	movw	r30, r16
    5d92:	62 89       	ldd	r22, Z+18	; 0x12
    5d94:	73 89       	ldd	r23, Z+19	; 0x13
    5d96:	ce 01       	movw	r24, r28
    5d98:	4a e0       	ldi	r20, 0x0A	; 10
    5d9a:	50 e0       	ldi	r21, 0x00	; 0
    5d9c:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <_ZN5Print5printEii>
		return false;
    5da0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    5da2:	df 91       	pop	r29
    5da4:	cf 91       	pop	r28
    5da6:	1f 91       	pop	r17
    5da8:	0f 91       	pop	r16
    5daa:	ff 90       	pop	r15
    5dac:	ef 90       	pop	r14
    5dae:	08 95       	ret

00005db0 <_ZN15RslModelSection6updateEPhj>:
	state = 0;
	isActive = true;
	pinMode(pin, OUTPUT);
}
void RslModelSection::update(unsigned char data[], unsigned int offset){
	state = data[offset++];
    5db0:	64 0f       	add	r22, r20
    5db2:	75 1f       	adc	r23, r21
    5db4:	fb 01       	movw	r30, r22
    5db6:	20 81       	ld	r18, Z
    5db8:	fc 01       	movw	r30, r24
    5dba:	20 87       	std	Z+8, r18	; 0x08
}
    5dbc:	08 95       	ret

00005dbe <_ZN15RslModelSection9getStatusEPhPj>:
void RslModelSection::getStatus(unsigned char data[], unsigned int *offset){
	//RSL has no status
}
    5dbe:	08 95       	ret

00005dc0 <_ZN15RslModelSectionC1Ev>:
 *      Author: EHaskins
 */

#include "RslModelSection.h"

RslModelSection::RslModelSection() {
    5dc0:	cf 93       	push	r28
    5dc2:	df 93       	push	r29
    5dc4:	ec 01       	movw	r28, r24
    5dc6:	0e 94 65 34 	call	0x68ca	; 0x68ca <_ZN17RobotModelSectionC1Ev>
    5dca:	86 ef       	ldi	r24, 0xF6	; 246
    5dcc:	92 e0       	ldi	r25, 0x02	; 2
    5dce:	99 83       	std	Y+1, r25	; 0x01
    5dd0:	88 83       	st	Y, r24
	sectionId = 0;
    5dd2:	1a 82       	std	Y+2, r1	; 0x02
	pin = 13;
    5dd4:	8d e0       	ldi	r24, 0x0D	; 13
    5dd6:	90 e0       	ldi	r25, 0x00	; 0
    5dd8:	9f 83       	std	Y+7, r25	; 0x07
    5dda:	8e 83       	std	Y+6, r24	; 0x06
	state = 0;
    5ddc:	18 86       	std	Y+8, r1	; 0x08
	isActive = true;
    5dde:	81 e0       	ldi	r24, 0x01	; 1
    5de0:	8b 83       	std	Y+3, r24	; 0x03
	pinMode(pin, OUTPUT);
    5de2:	8d e0       	ldi	r24, 0x0D	; 13
    5de4:	61 e0       	ldi	r22, 0x01	; 1
    5de6:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <pinMode>
}
    5dea:	df 91       	pop	r29
    5dec:	cf 91       	pop	r28
    5dee:	08 95       	ret

00005df0 <_ZN15RslModelSection12driveNoStateEv>:
}

void RslModelSection::driveEStopped(){
	driveDisabled();
}
void RslModelSection::driveNoState(){
    5df0:	cf 93       	push	r28
    5df2:	df 93       	push	r29
    5df4:	ec 01       	movw	r28, r24
	if (millis() % 400 < 100)
    5df6:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    5dfa:	20 e9       	ldi	r18, 0x90	; 144
    5dfc:	31 e0       	ldi	r19, 0x01	; 1
    5dfe:	40 e0       	ldi	r20, 0x00	; 0
    5e00:	50 e0       	ldi	r21, 0x00	; 0
    5e02:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    5e06:	dc 01       	movw	r26, r24
    5e08:	cb 01       	movw	r24, r22
    5e0a:	84 36       	cpi	r24, 0x64	; 100
    5e0c:	91 05       	cpc	r25, r1
    5e0e:	a1 05       	cpc	r26, r1
    5e10:	b1 05       	cpc	r27, r1
    5e12:	28 f4       	brcc	.+10     	; 0x5e1e <_ZN15RslModelSection12driveNoStateEv+0x2e>
		digitalWrite(pin, HIGH);
    5e14:	8e 81       	ldd	r24, Y+6	; 0x06
    5e16:	61 e0       	ldi	r22, 0x01	; 1
    5e18:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
    5e1c:	04 c0       	rjmp	.+8      	; 0x5e26 <_ZN15RslModelSection12driveNoStateEv+0x36>
	else
		digitalWrite(pin, LOW);
    5e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    5e20:	60 e0       	ldi	r22, 0x00	; 0
    5e22:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
}
    5e26:	df 91       	pop	r29
    5e28:	cf 91       	pop	r28
    5e2a:	08 95       	ret

00005e2c <_ZN15RslModelSection17driveNoBeagleCommEv>:

void RslModelSection::driveNoBeagleComm(){
    5e2c:	cf 93       	push	r28
    5e2e:	df 93       	push	r29
    5e30:	ec 01       	movw	r28, r24
	if (millis() % 200 < 100)
    5e32:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    5e36:	28 ec       	ldi	r18, 0xC8	; 200
    5e38:	30 e0       	ldi	r19, 0x00	; 0
    5e3a:	40 e0       	ldi	r20, 0x00	; 0
    5e3c:	50 e0       	ldi	r21, 0x00	; 0
    5e3e:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    5e42:	dc 01       	movw	r26, r24
    5e44:	cb 01       	movw	r24, r22
    5e46:	84 36       	cpi	r24, 0x64	; 100
    5e48:	91 05       	cpc	r25, r1
    5e4a:	a1 05       	cpc	r26, r1
    5e4c:	b1 05       	cpc	r27, r1
    5e4e:	28 f4       	brcc	.+10     	; 0x5e5a <_ZN15RslModelSection17driveNoBeagleCommEv+0x2e>
		digitalWrite(pin, HIGH);
    5e50:	8e 81       	ldd	r24, Y+6	; 0x06
    5e52:	61 e0       	ldi	r22, 0x01	; 1
    5e54:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
    5e58:	04 c0       	rjmp	.+8      	; 0x5e62 <_ZN15RslModelSection17driveNoBeagleCommEv+0x36>
	else
		digitalWrite(pin, LOW);
    5e5a:	8e 81       	ldd	r24, Y+6	; 0x06
    5e5c:	60 e0       	ldi	r22, 0x00	; 0
    5e5e:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
}
    5e62:	df 91       	pop	r29
    5e64:	cf 91       	pop	r28
    5e66:	08 95       	ret

00005e68 <_ZN15RslModelSection14driveNoFrcCommEv>:
void RslModelSection::driveNoFrcComm(){
    5e68:	cf 93       	push	r28
    5e6a:	df 93       	push	r29
    5e6c:	ec 01       	movw	r28, r24
	if (millis() % 900 < 100)
    5e6e:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    5e72:	24 e8       	ldi	r18, 0x84	; 132
    5e74:	33 e0       	ldi	r19, 0x03	; 3
    5e76:	40 e0       	ldi	r20, 0x00	; 0
    5e78:	50 e0       	ldi	r21, 0x00	; 0
    5e7a:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    5e7e:	dc 01       	movw	r26, r24
    5e80:	cb 01       	movw	r24, r22
    5e82:	84 36       	cpi	r24, 0x64	; 100
    5e84:	91 05       	cpc	r25, r1
    5e86:	a1 05       	cpc	r26, r1
    5e88:	b1 05       	cpc	r27, r1
    5e8a:	28 f4       	brcc	.+10     	; 0x5e96 <_ZN15RslModelSection14driveNoFrcCommEv+0x2e>
		digitalWrite(pin, HIGH);
    5e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    5e8e:	61 e0       	ldi	r22, 0x01	; 1
    5e90:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
    5e94:	04 c0       	rjmp	.+8      	; 0x5e9e <_ZN15RslModelSection14driveNoFrcCommEv+0x36>
	else
		digitalWrite(pin, LOW);
    5e96:	8e 81       	ldd	r24, Y+6	; 0x06
    5e98:	60 e0       	ldi	r22, 0x00	; 0
    5e9a:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
}
    5e9e:	df 91       	pop	r29
    5ea0:	cf 91       	pop	r28
    5ea2:	08 95       	ret

00005ea4 <_ZN15RslModelSection12driveEnabledEv>:
void RslModelSection::driveEnabled(){
    5ea4:	cf 93       	push	r28
    5ea6:	df 93       	push	r29
    5ea8:	ec 01       	movw	r28, r24
	unsigned long m = millis();
    5eaa:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
	if (m % 1200 < 50)
    5eae:	20 eb       	ldi	r18, 0xB0	; 176
    5eb0:	34 e0       	ldi	r19, 0x04	; 4
    5eb2:	40 e0       	ldi	r20, 0x00	; 0
    5eb4:	50 e0       	ldi	r21, 0x00	; 0
    5eb6:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    5eba:	dc 01       	movw	r26, r24
    5ebc:	cb 01       	movw	r24, r22
    5ebe:	82 33       	cpi	r24, 0x32	; 50
    5ec0:	91 05       	cpc	r25, r1
    5ec2:	a1 05       	cpc	r26, r1
    5ec4:	b1 05       	cpc	r27, r1
    5ec6:	28 f4       	brcc	.+10     	; 0x5ed2 <_ZN15RslModelSection12driveEnabledEv+0x2e>
		digitalWrite(pin, LOW);
    5ec8:	8e 81       	ldd	r24, Y+6	; 0x06
    5eca:	60 e0       	ldi	r22, 0x00	; 0
    5ecc:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
    5ed0:	18 c0       	rjmp	.+48     	; 0x5f02 <_ZN15RslModelSection12driveEnabledEv+0x5e>
	else if (m % 1200 < 150)
    5ed2:	86 39       	cpi	r24, 0x96	; 150
    5ed4:	91 05       	cpc	r25, r1
    5ed6:	a1 05       	cpc	r26, r1
    5ed8:	b1 05       	cpc	r27, r1
    5eda:	28 f4       	brcc	.+10     	; 0x5ee6 <_ZN15RslModelSection12driveEnabledEv+0x42>
		digitalWrite(pin, HIGH);
    5edc:	8e 81       	ldd	r24, Y+6	; 0x06
    5ede:	61 e0       	ldi	r22, 0x01	; 1
    5ee0:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
    5ee4:	0e c0       	rjmp	.+28     	; 0x5f02 <_ZN15RslModelSection12driveEnabledEv+0x5e>
	else if (m % 1200 < 200)
    5ee6:	88 3c       	cpi	r24, 0xC8	; 200
    5ee8:	91 05       	cpc	r25, r1
    5eea:	a1 05       	cpc	r26, r1
    5eec:	b1 05       	cpc	r27, r1
    5eee:	28 f4       	brcc	.+10     	; 0x5efa <_ZN15RslModelSection12driveEnabledEv+0x56>
		digitalWrite(pin, LOW);
    5ef0:	8e 81       	ldd	r24, Y+6	; 0x06
    5ef2:	60 e0       	ldi	r22, 0x00	; 0
    5ef4:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
    5ef8:	04 c0       	rjmp	.+8      	; 0x5f02 <_ZN15RslModelSection12driveEnabledEv+0x5e>
	else
		digitalWrite(pin, HIGH);
    5efa:	8e 81       	ldd	r24, Y+6	; 0x06
    5efc:	61 e0       	ldi	r22, 0x01	; 1
    5efe:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>

}
    5f02:	df 91       	pop	r29
    5f04:	cf 91       	pop	r28
    5f06:	08 95       	ret

00005f08 <_ZN15RslModelSection13driveDisabledEv>:
void RslModelSection::driveDisabled(){
    5f08:	cf 93       	push	r28
    5f0a:	df 93       	push	r29
    5f0c:	ec 01       	movw	r28, r24
	if (millis() % 2000 < 1000)
    5f0e:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
    5f12:	20 ed       	ldi	r18, 0xD0	; 208
    5f14:	37 e0       	ldi	r19, 0x07	; 7
    5f16:	40 e0       	ldi	r20, 0x00	; 0
    5f18:	50 e0       	ldi	r21, 0x00	; 0
    5f1a:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    5f1e:	dc 01       	movw	r26, r24
    5f20:	cb 01       	movw	r24, r22
    5f22:	88 3e       	cpi	r24, 0xE8	; 232
    5f24:	23 e0       	ldi	r18, 0x03	; 3
    5f26:	92 07       	cpc	r25, r18
    5f28:	20 e0       	ldi	r18, 0x00	; 0
    5f2a:	a2 07       	cpc	r26, r18
    5f2c:	20 e0       	ldi	r18, 0x00	; 0
    5f2e:	b2 07       	cpc	r27, r18
    5f30:	28 f4       	brcc	.+10     	; 0x5f3c <_ZN15RslModelSection13driveDisabledEv+0x34>
		digitalWrite(pin, HIGH);
    5f32:	8e 81       	ldd	r24, Y+6	; 0x06
    5f34:	61 e0       	ldi	r22, 0x01	; 1
    5f36:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
    5f3a:	04 c0       	rjmp	.+8      	; 0x5f44 <_ZN15RslModelSection13driveDisabledEv+0x3c>
	else
		digitalWrite(pin, LOW);
    5f3c:	8e 81       	ldd	r24, Y+6	; 0x06
    5f3e:	60 e0       	ldi	r22, 0x00	; 0
    5f40:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
}
    5f44:	df 91       	pop	r29
    5f46:	cf 91       	pop	r28
    5f48:	08 95       	ret

00005f4a <_ZN15RslModelSection13driveEStoppedEv>:
		}
	}
}

void RslModelSection::driveEStopped(){
	driveDisabled();
    5f4a:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <_ZN15RslModelSection13driveDisabledEv>
}
    5f4e:	08 95       	ret

00005f50 <_ZN15RslModelSection15driveAutonomousEv>:
	if (millis() % 2000 < 1000)
		digitalWrite(pin, HIGH);
	else
		digitalWrite(pin, LOW);
}
void RslModelSection::driveAutonomous(){
    5f50:	cf 93       	push	r28
    5f52:	df 93       	push	r29
    5f54:	ec 01       	movw	r28, r24
	unsigned long m = millis();
    5f56:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <millis>
	if (m % 1200 < 50)
    5f5a:	20 eb       	ldi	r18, 0xB0	; 176
    5f5c:	34 e0       	ldi	r19, 0x04	; 4
    5f5e:	40 e0       	ldi	r20, 0x00	; 0
    5f60:	50 e0       	ldi	r21, 0x00	; 0
    5f62:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    5f66:	dc 01       	movw	r26, r24
    5f68:	cb 01       	movw	r24, r22
    5f6a:	82 33       	cpi	r24, 0x32	; 50
    5f6c:	91 05       	cpc	r25, r1
    5f6e:	a1 05       	cpc	r26, r1
    5f70:	b1 05       	cpc	r27, r1
    5f72:	28 f4       	brcc	.+10     	; 0x5f7e <_ZN15RslModelSection15driveAutonomousEv+0x2e>
		digitalWrite(pin, LOW);
    5f74:	8e 81       	ldd	r24, Y+6	; 0x06
    5f76:	60 e0       	ldi	r22, 0x00	; 0
    5f78:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
    5f7c:	32 c0       	rjmp	.+100    	; 0x5fe2 <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 150)
    5f7e:	86 39       	cpi	r24, 0x96	; 150
    5f80:	91 05       	cpc	r25, r1
    5f82:	a1 05       	cpc	r26, r1
    5f84:	b1 05       	cpc	r27, r1
    5f86:	28 f4       	brcc	.+10     	; 0x5f92 <_ZN15RslModelSection15driveAutonomousEv+0x42>
		digitalWrite(pin, HIGH);
    5f88:	8e 81       	ldd	r24, Y+6	; 0x06
    5f8a:	61 e0       	ldi	r22, 0x01	; 1
    5f8c:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
    5f90:	28 c0       	rjmp	.+80     	; 0x5fe2 <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 250)
    5f92:	8a 3f       	cpi	r24, 0xFA	; 250
    5f94:	91 05       	cpc	r25, r1
    5f96:	a1 05       	cpc	r26, r1
    5f98:	b1 05       	cpc	r27, r1
    5f9a:	28 f4       	brcc	.+10     	; 0x5fa6 <_ZN15RslModelSection15driveAutonomousEv+0x56>
		digitalWrite(pin, LOW);
    5f9c:	8e 81       	ldd	r24, Y+6	; 0x06
    5f9e:	60 e0       	ldi	r22, 0x00	; 0
    5fa0:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
    5fa4:	1e c0       	rjmp	.+60     	; 0x5fe2 <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 350)
    5fa6:	8e 35       	cpi	r24, 0x5E	; 94
    5fa8:	21 e0       	ldi	r18, 0x01	; 1
    5faa:	92 07       	cpc	r25, r18
    5fac:	20 e0       	ldi	r18, 0x00	; 0
    5fae:	a2 07       	cpc	r26, r18
    5fb0:	20 e0       	ldi	r18, 0x00	; 0
    5fb2:	b2 07       	cpc	r27, r18
    5fb4:	28 f4       	brcc	.+10     	; 0x5fc0 <_ZN15RslModelSection15driveAutonomousEv+0x70>
		digitalWrite(pin, HIGH);
    5fb6:	8e 81       	ldd	r24, Y+6	; 0x06
    5fb8:	61 e0       	ldi	r22, 0x01	; 1
    5fba:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
    5fbe:	11 c0       	rjmp	.+34     	; 0x5fe2 <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 400)
    5fc0:	80 39       	cpi	r24, 0x90	; 144
    5fc2:	21 e0       	ldi	r18, 0x01	; 1
    5fc4:	92 07       	cpc	r25, r18
    5fc6:	20 e0       	ldi	r18, 0x00	; 0
    5fc8:	a2 07       	cpc	r26, r18
    5fca:	20 e0       	ldi	r18, 0x00	; 0
    5fcc:	b2 07       	cpc	r27, r18
    5fce:	28 f4       	brcc	.+10     	; 0x5fda <_ZN15RslModelSection15driveAutonomousEv+0x8a>
		digitalWrite(pin, LOW);
    5fd0:	8e 81       	ldd	r24, Y+6	; 0x06
    5fd2:	60 e0       	ldi	r22, 0x00	; 0
    5fd4:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
    5fd8:	04 c0       	rjmp	.+8      	; 0x5fe2 <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else
		digitalWrite(pin, HIGH);
    5fda:	8e 81       	ldd	r24, Y+6	; 0x06
    5fdc:	61 e0       	ldi	r22, 0x01	; 1
    5fde:	0e 94 28 19 	call	0x3250	; 0x3250 <digitalWrite>
}
    5fe2:	df 91       	pop	r29
    5fe4:	cf 91       	pop	r28
    5fe6:	08 95       	ret

00005fe8 <_ZN15RslModelSection10driveLightEb>:
}
void RslModelSection::loop(bool safteyTripped){
	RobotModelSection::loop(safteyTripped);
	driveLight(safteyTripped);
}
void RslModelSection::driveLight(bool safteyTripped){
    5fe8:	cf 93       	push	r28
    5fea:	df 93       	push	r29
    5fec:	ec 01       	movw	r28, r24
	if (safteyTripped){
    5fee:	66 23       	and	r22, r22
    5ff0:	29 f0       	breq	.+10     	; 0x5ffc <_ZN15RslModelSection10driveLightEb+0x14>
		driveNoBeagleComm();
    5ff2:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <_ZN15RslModelSection17driveNoBeagleCommEv>
		state = 255;
    5ff6:	8f ef       	ldi	r24, 0xFF	; 255
    5ff8:	88 87       	std	Y+8, r24	; 0x08
    5ffa:	27 c0       	rjmp	.+78     	; 0x604a <_ZN15RslModelSection10driveLightEb+0x62>
	}
	else{
		switch (state){
    5ffc:	88 85       	ldd	r24, Y+8	; 0x08
    5ffe:	82 30       	cpi	r24, 0x02	; 2
    6000:	c9 f0       	breq	.+50     	; 0x6034 <_ZN15RslModelSection10driveLightEb+0x4c>
    6002:	83 30       	cpi	r24, 0x03	; 3
    6004:	28 f4       	brcc	.+10     	; 0x6010 <_ZN15RslModelSection10driveLightEb+0x28>
    6006:	88 23       	and	r24, r24
    6008:	69 f0       	breq	.+26     	; 0x6024 <_ZN15RslModelSection10driveLightEb+0x3c>
    600a:	81 30       	cpi	r24, 0x01	; 1
    600c:	f1 f4       	brne	.+60     	; 0x604a <_ZN15RslModelSection10driveLightEb+0x62>
    600e:	0e c0       	rjmp	.+28     	; 0x602c <_ZN15RslModelSection10driveLightEb+0x44>
    6010:	84 30       	cpi	r24, 0x04	; 4
    6012:	c1 f0       	breq	.+48     	; 0x6044 <_ZN15RslModelSection10driveLightEb+0x5c>
    6014:	84 30       	cpi	r24, 0x04	; 4
    6016:	90 f0       	brcs	.+36     	; 0x603c <_ZN15RslModelSection10driveLightEb+0x54>
    6018:	8f 3f       	cpi	r24, 0xFF	; 255
    601a:	b9 f4       	brne	.+46     	; 0x604a <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_NOSTATE:
			driveNoState();
    601c:	ce 01       	movw	r24, r28
    601e:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <_ZN15RslModelSection12driveNoStateEv>
			break;
    6022:	13 c0       	rjmp	.+38     	; 0x604a <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_NOFRCCOMM:
			driveNoFrcComm();
    6024:	ce 01       	movw	r24, r28
    6026:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <_ZN15RslModelSection14driveNoFrcCommEv>
			break;
    602a:	0f c0       	rjmp	.+30     	; 0x604a <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_ENABLED:
			driveEnabled();
    602c:	ce 01       	movw	r24, r28
    602e:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <_ZN15RslModelSection12driveEnabledEv>
			break;
    6032:	0b c0       	rjmp	.+22     	; 0x604a <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_DISABLED:
			driveDisabled();
    6034:	ce 01       	movw	r24, r28
    6036:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <_ZN15RslModelSection13driveDisabledEv>
			break;
    603a:	07 c0       	rjmp	.+14     	; 0x604a <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_AUTONOMOUS:
			driveAutonomous();
    603c:	ce 01       	movw	r24, r28
    603e:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <_ZN15RslModelSection15driveAutonomousEv>
			break;
    6042:	03 c0       	rjmp	.+6      	; 0x604a <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_ESTOPPED:
			driveEStopped();
    6044:	ce 01       	movw	r24, r28
    6046:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <_ZN15RslModelSection13driveEStoppedEv>
			break;
		}
	}
}
    604a:	df 91       	pop	r29
    604c:	cf 91       	pop	r28
    604e:	08 95       	ret

00006050 <_ZN15RslModelSection4loopEb>:
	state = data[offset++];
}
void RslModelSection::getStatus(unsigned char data[], unsigned int *offset){
	//RSL has no status
}
void RslModelSection::loop(bool safteyTripped){
    6050:	1f 93       	push	r17
    6052:	cf 93       	push	r28
    6054:	df 93       	push	r29
    6056:	ec 01       	movw	r28, r24
    6058:	16 2f       	mov	r17, r22
	RobotModelSection::loop(safteyTripped);
    605a:	0e 94 38 34 	call	0x6870	; 0x6870 <_ZN17RobotModelSection4loopEb>
	driveLight(safteyTripped);
    605e:	ce 01       	movw	r24, r28
    6060:	61 2f       	mov	r22, r17
    6062:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <_ZN15RslModelSection10driveLightEb>
}
    6066:	df 91       	pop	r29
    6068:	cf 91       	pop	r28
    606a:	1f 91       	pop	r17
    606c:	08 95       	ret

0000606e <_Z9readUInt8PhPj>:
	}
	Serial.print("ReadBytes: Offset:");
	Serial.println(*offset);
}*/

unsigned char readUInt8(unsigned char data[], unsigned int *offset){
    606e:	fb 01       	movw	r30, r22
	unsigned char out = data[*offset];
    6070:	20 81       	ld	r18, Z
    6072:	31 81       	ldd	r19, Z+1	; 0x01
    6074:	dc 01       	movw	r26, r24
    6076:	a2 0f       	add	r26, r18
    6078:	b3 1f       	adc	r27, r19
    607a:	8c 91       	ld	r24, X
	*offset += 1;
    607c:	2f 5f       	subi	r18, 0xFF	; 255
    607e:	3f 4f       	sbci	r19, 0xFF	; 255
    6080:	31 83       	std	Z+1, r19	; 0x01
    6082:	20 83       	st	Z, r18
	return out;
}
    6084:	08 95       	ret

00006086 <_Z10readUInt16PhPj>:
unsigned short readUInt16(unsigned char data[], unsigned int *offset){
    6086:	db 01       	movw	r26, r22
	unsigned short out = (data[*offset + 1] << 8) + (data[*offset]);
    6088:	2d 91       	ld	r18, X+
    608a:	3c 91       	ld	r19, X
    608c:	11 97       	sbiw	r26, 0x01	; 1
    608e:	fc 01       	movw	r30, r24
    6090:	e2 0f       	add	r30, r18
    6092:	f3 1f       	adc	r31, r19
    6094:	91 81       	ldd	r25, Z+1	; 0x01
    6096:	80 e0       	ldi	r24, 0x00	; 0
    6098:	40 81       	ld	r20, Z
    609a:	84 0f       	add	r24, r20
    609c:	91 1d       	adc	r25, r1
	/*unsigned char byteCount = 2;
	for (int i = 0; i < byteCount; i++){
		out += data[*offset + byteCount - i] << (8 * i);
	}*/
	*offset += 2;
    609e:	2e 5f       	subi	r18, 0xFE	; 254
    60a0:	3f 4f       	sbci	r19, 0xFF	; 255
    60a2:	11 96       	adiw	r26, 0x01	; 1
    60a4:	3c 93       	st	X, r19
    60a6:	2e 93       	st	-X, r18
	return out;
}
    60a8:	08 95       	ret

000060aa <_Z10readUInt32PhPj>:
unsigned long readUInt32(unsigned char data[], unsigned int *offset){
    60aa:	0f 93       	push	r16
    60ac:	1f 93       	push	r17
    60ae:	cf 93       	push	r28
    60b0:	df 93       	push	r29
    60b2:	eb 01       	movw	r28, r22
	unsigned long out =
	((unsigned long)data[*offset + 3] << 24) +
    60b4:	48 81       	ld	r20, Y
    60b6:	59 81       	ldd	r21, Y+1	; 0x01
    60b8:	fc 01       	movw	r30, r24
    60ba:	e4 0f       	add	r30, r20
    60bc:	f5 1f       	adc	r31, r21
	((unsigned long)data[*offset + 2] << 16) +
	((unsigned long)data[*offset + 1] << 8) +
	((unsigned long)data[*offset]);
    60be:	83 81       	ldd	r24, Z+3	; 0x03
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	a0 e0       	ldi	r26, 0x00	; 0
    60c4:	b0 e0       	ldi	r27, 0x00	; 0
    60c6:	b8 2f       	mov	r27, r24
    60c8:	aa 27       	eor	r26, r26
    60ca:	99 27       	eor	r25, r25
    60cc:	88 27       	eor	r24, r24
    60ce:	02 81       	ldd	r16, Z+2	; 0x02
    60d0:	10 e0       	ldi	r17, 0x00	; 0
    60d2:	20 e0       	ldi	r18, 0x00	; 0
    60d4:	30 e0       	ldi	r19, 0x00	; 0
    60d6:	98 01       	movw	r18, r16
    60d8:	11 27       	eor	r17, r17
    60da:	00 27       	eor	r16, r16
    60dc:	08 0f       	add	r16, r24
    60de:	19 1f       	adc	r17, r25
    60e0:	2a 1f       	adc	r18, r26
    60e2:	3b 1f       	adc	r19, r27
    60e4:	80 81       	ld	r24, Z
    60e6:	08 0f       	add	r16, r24
    60e8:	11 1d       	adc	r17, r1
    60ea:	21 1d       	adc	r18, r1
    60ec:	31 1d       	adc	r19, r1
    60ee:	81 81       	ldd	r24, Z+1	; 0x01
    60f0:	90 e0       	ldi	r25, 0x00	; 0
    60f2:	a0 e0       	ldi	r26, 0x00	; 0
    60f4:	b0 e0       	ldi	r27, 0x00	; 0
    60f6:	ba 2f       	mov	r27, r26
    60f8:	a9 2f       	mov	r26, r25
    60fa:	98 2f       	mov	r25, r24
    60fc:	88 27       	eor	r24, r24
    60fe:	08 0f       	add	r16, r24
    6100:	19 1f       	adc	r17, r25
    6102:	2a 1f       	adc	r18, r26
    6104:	3b 1f       	adc	r19, r27
	/*unsigned char byteCount = 2;
	for (int i = 0; i < byteCount; i++){
		out += data[*offset + byteCount - i] << (8 * i);
	}*/
	*offset += 4;
    6106:	4c 5f       	subi	r20, 0xFC	; 252
    6108:	5f 4f       	sbci	r21, 0xFF	; 255
    610a:	59 83       	std	Y+1, r21	; 0x01
    610c:	48 83       	st	Y, r20
	return out;
}
    610e:	60 2f       	mov	r22, r16
    6110:	71 2f       	mov	r23, r17
    6112:	82 2f       	mov	r24, r18
    6114:	93 2f       	mov	r25, r19
    6116:	df 91       	pop	r29
    6118:	cf 91       	pop	r28
    611a:	1f 91       	pop	r17
    611c:	0f 91       	pop	r16
    611e:	08 95       	ret

00006120 <_Z10readUInt64PhPj>:
unsigned long long readUInt64(unsigned char data[], unsigned int *offset){
    6120:	2f 92       	push	r2
    6122:	3f 92       	push	r3
    6124:	4f 92       	push	r4
    6126:	5f 92       	push	r5
    6128:	6f 92       	push	r6
    612a:	7f 92       	push	r7
    612c:	8f 92       	push	r8
    612e:	9f 92       	push	r9
    6130:	af 92       	push	r10
    6132:	bf 92       	push	r11
    6134:	cf 92       	push	r12
    6136:	df 92       	push	r13
    6138:	ef 92       	push	r14
    613a:	ff 92       	push	r15
    613c:	0f 93       	push	r16
    613e:	1f 93       	push	r17
    6140:	cf 93       	push	r28
    6142:	df 93       	push	r29
    6144:	cd b7       	in	r28, 0x3d	; 61
    6146:	de b7       	in	r29, 0x3e	; 62
    6148:	2b 97       	sbiw	r28, 0x0b	; 11
    614a:	0f b6       	in	r0, 0x3f	; 63
    614c:	f8 94       	cli
    614e:	de bf       	out	0x3e, r29	; 62
    6150:	0f be       	out	0x3f, r0	; 63
    6152:	cd bf       	out	0x3d, r28	; 61
    6154:	9d 83       	std	Y+5, r25	; 0x05
    6156:	8c 83       	std	Y+4, r24	; 0x04
    6158:	79 87       	std	Y+9, r23	; 0x09
    615a:	68 87       	std	Y+8, r22	; 0x08
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
    615c:	db 01       	movw	r26, r22
    615e:	0d 90       	ld	r0, X+
    6160:	bc 91       	ld	r27, X
    6162:	a0 2d       	mov	r26, r0
    6164:	bb 83       	std	Y+3, r27	; 0x03
    6166:	aa 83       	std	Y+2, r26	; 0x02
    6168:	6c 01       	movw	r12, r24
    616a:	ca 0e       	add	r12, r26
    616c:	db 1e       	adc	r13, r27
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    616e:	f6 01       	movw	r30, r12
    6170:	27 81       	ldd	r18, Z+7	; 0x07
    6172:	30 e0       	ldi	r19, 0x00	; 0
    6174:	40 e0       	ldi	r20, 0x00	; 0
    6176:	50 e0       	ldi	r21, 0x00	; 0
    6178:	60 e0       	ldi	r22, 0x00	; 0
    617a:	70 e0       	ldi	r23, 0x00	; 0
    617c:	80 e0       	ldi	r24, 0x00	; 0
    617e:	90 e0       	ldi	r25, 0x00	; 0
    6180:	08 e3       	ldi	r16, 0x38	; 56
    6182:	0e 94 6d 34 	call	0x68da	; 0x68da <__ashldi3>
    6186:	f2 2e       	mov	r15, r18
    6188:	13 2f       	mov	r17, r19
    618a:	e4 2e       	mov	r14, r20
    618c:	b5 2e       	mov	r11, r21
    618e:	a6 2e       	mov	r10, r22
    6190:	97 2e       	mov	r9, r23
    6192:	88 2e       	mov	r8, r24
    6194:	69 2e       	mov	r6, r25
    6196:	d6 01       	movw	r26, r12
    6198:	16 96       	adiw	r26, 0x06	; 6
    619a:	2c 91       	ld	r18, X
    619c:	30 e0       	ldi	r19, 0x00	; 0
    619e:	40 e0       	ldi	r20, 0x00	; 0
    61a0:	50 e0       	ldi	r21, 0x00	; 0
    61a2:	60 e0       	ldi	r22, 0x00	; 0
    61a4:	70 e0       	ldi	r23, 0x00	; 0
    61a6:	80 e0       	ldi	r24, 0x00	; 0
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	00 e3       	ldi	r16, 0x30	; 48
    61ac:	0e 94 6d 34 	call	0x68da	; 0x68da <__ashldi3>
    61b0:	2f 0d       	add	r18, r15
    61b2:	e1 e0       	ldi	r30, 0x01	; 1
    61b4:	2f 15       	cp	r18, r15
    61b6:	08 f0       	brcs	.+2      	; 0x61ba <_Z10readUInt64PhPj+0x9a>
    61b8:	e0 e0       	ldi	r30, 0x00	; 0
    61ba:	31 0f       	add	r19, r17
    61bc:	f1 e0       	ldi	r31, 0x01	; 1
    61be:	31 17       	cp	r19, r17
    61c0:	08 f0       	brcs	.+2      	; 0x61c4 <_Z10readUInt64PhPj+0xa4>
    61c2:	f0 e0       	ldi	r31, 0x00	; 0
    61c4:	3e 2e       	mov	r3, r30
    61c6:	33 0e       	add	r3, r19
    61c8:	e1 e0       	ldi	r30, 0x01	; 1
    61ca:	33 16       	cp	r3, r19
    61cc:	08 f0       	brcs	.+2      	; 0x61d0 <_Z10readUInt64PhPj+0xb0>
    61ce:	e0 e0       	ldi	r30, 0x00	; 0
    61d0:	fe 2b       	or	r31, r30
    61d2:	33 2d       	mov	r19, r3
    61d4:	4e 0d       	add	r20, r14
    61d6:	e1 e0       	ldi	r30, 0x01	; 1
    61d8:	4e 15       	cp	r20, r14
    61da:	08 f0       	brcs	.+2      	; 0x61de <_Z10readUInt64PhPj+0xbe>
    61dc:	e0 e0       	ldi	r30, 0x00	; 0
    61de:	2f 2e       	mov	r2, r31
    61e0:	24 0e       	add	r2, r20
    61e2:	f1 e0       	ldi	r31, 0x01	; 1
    61e4:	24 16       	cp	r2, r20
    61e6:	08 f0       	brcs	.+2      	; 0x61ea <_Z10readUInt64PhPj+0xca>
    61e8:	f0 e0       	ldi	r31, 0x00	; 0
    61ea:	ef 2b       	or	r30, r31
    61ec:	42 2d       	mov	r20, r2
    61ee:	5b 0d       	add	r21, r11
    61f0:	f1 e0       	ldi	r31, 0x01	; 1
    61f2:	5b 15       	cp	r21, r11
    61f4:	08 f0       	brcs	.+2      	; 0x61f8 <_Z10readUInt64PhPj+0xd8>
    61f6:	f0 e0       	ldi	r31, 0x00	; 0
    61f8:	fe 2e       	mov	r15, r30
    61fa:	f5 0e       	add	r15, r21
    61fc:	e1 e0       	ldi	r30, 0x01	; 1
    61fe:	f5 16       	cp	r15, r21
    6200:	08 f0       	brcs	.+2      	; 0x6204 <_Z10readUInt64PhPj+0xe4>
    6202:	e0 e0       	ldi	r30, 0x00	; 0
    6204:	fe 2b       	or	r31, r30
    6206:	5f 2d       	mov	r21, r15
    6208:	6a 0d       	add	r22, r10
    620a:	e1 e0       	ldi	r30, 0x01	; 1
    620c:	6a 15       	cp	r22, r10
    620e:	08 f0       	brcs	.+2      	; 0x6212 <_Z10readUInt64PhPj+0xf2>
    6210:	e0 e0       	ldi	r30, 0x00	; 0
    6212:	ef 2e       	mov	r14, r31
    6214:	e6 0e       	add	r14, r22
    6216:	f1 e0       	ldi	r31, 0x01	; 1
    6218:	e6 16       	cp	r14, r22
    621a:	08 f0       	brcs	.+2      	; 0x621e <_Z10readUInt64PhPj+0xfe>
    621c:	f0 e0       	ldi	r31, 0x00	; 0
    621e:	ef 2b       	or	r30, r31
    6220:	6e 2d       	mov	r22, r14
    6222:	79 0d       	add	r23, r9
    6224:	f1 e0       	ldi	r31, 0x01	; 1
    6226:	79 15       	cp	r23, r9
    6228:	08 f0       	brcs	.+2      	; 0x622c <_Z10readUInt64PhPj+0x10c>
    622a:	f0 e0       	ldi	r31, 0x00	; 0
    622c:	de 2e       	mov	r13, r30
    622e:	d7 0e       	add	r13, r23
    6230:	e1 e0       	ldi	r30, 0x01	; 1
    6232:	d7 16       	cp	r13, r23
    6234:	08 f0       	brcs	.+2      	; 0x6238 <_Z10readUInt64PhPj+0x118>
    6236:	e0 e0       	ldi	r30, 0x00	; 0
    6238:	fe 2b       	or	r31, r30
    623a:	7d 2d       	mov	r23, r13
    623c:	88 0d       	add	r24, r8
    623e:	e1 e0       	ldi	r30, 0x01	; 1
    6240:	88 15       	cp	r24, r8
    6242:	08 f0       	brcs	.+2      	; 0x6246 <_Z10readUInt64PhPj+0x126>
    6244:	e0 e0       	ldi	r30, 0x00	; 0
    6246:	cf 2e       	mov	r12, r31
    6248:	c8 0e       	add	r12, r24
    624a:	f1 e0       	ldi	r31, 0x01	; 1
    624c:	c8 16       	cp	r12, r24
    624e:	08 f0       	brcs	.+2      	; 0x6252 <_Z10readUInt64PhPj+0x132>
    6250:	f0 e0       	ldi	r31, 0x00	; 0
    6252:	ef 2b       	or	r30, r31
    6254:	8c 2d       	mov	r24, r12
    6256:	96 0d       	add	r25, r6
    6258:	9e 0f       	add	r25, r30
    625a:	ec 81       	ldd	r30, Y+4	; 0x04
    625c:	fd 81       	ldd	r31, Y+5	; 0x05
    625e:	aa 81       	ldd	r26, Y+2	; 0x02
    6260:	bb 81       	ldd	r27, Y+3	; 0x03
    6262:	ea 0f       	add	r30, r26
    6264:	fb 1f       	adc	r31, r27
    6266:	70 80       	ld	r7, Z
    6268:	72 0e       	add	r7, r18
    626a:	f1 e0       	ldi	r31, 0x01	; 1
    626c:	72 16       	cp	r7, r18
    626e:	08 f0       	brcs	.+2      	; 0x6272 <_Z10readUInt64PhPj+0x152>
    6270:	f0 e0       	ldi	r31, 0x00	; 0
    6272:	e1 e0       	ldi	r30, 0x01	; 1
    6274:	33 16       	cp	r3, r19
    6276:	08 f0       	brcs	.+2      	; 0x627a <_Z10readUInt64PhPj+0x15a>
    6278:	e0 e0       	ldi	r30, 0x00	; 0
    627a:	bf 2e       	mov	r11, r31
    627c:	b3 0c       	add	r11, r3
    627e:	21 e0       	ldi	r18, 0x01	; 1
    6280:	b3 14       	cp	r11, r3
    6282:	08 f0       	brcs	.+2      	; 0x6286 <_Z10readUInt64PhPj+0x166>
    6284:	20 e0       	ldi	r18, 0x00	; 0
    6286:	e2 2b       	or	r30, r18
    6288:	3b 2c       	mov	r3, r11
    628a:	21 e0       	ldi	r18, 0x01	; 1
    628c:	24 16       	cp	r2, r20
    628e:	08 f0       	brcs	.+2      	; 0x6292 <_Z10readUInt64PhPj+0x172>
    6290:	20 e0       	ldi	r18, 0x00	; 0
    6292:	ae 2e       	mov	r10, r30
    6294:	a2 0c       	add	r10, r2
    6296:	31 e0       	ldi	r19, 0x01	; 1
    6298:	a2 14       	cp	r10, r2
    629a:	08 f0       	brcs	.+2      	; 0x629e <_Z10readUInt64PhPj+0x17e>
    629c:	30 e0       	ldi	r19, 0x00	; 0
    629e:	23 2b       	or	r18, r19
    62a0:	2a 2c       	mov	r2, r10
    62a2:	31 e0       	ldi	r19, 0x01	; 1
    62a4:	f5 16       	cp	r15, r21
    62a6:	08 f0       	brcs	.+2      	; 0x62aa <_Z10readUInt64PhPj+0x18a>
    62a8:	30 e0       	ldi	r19, 0x00	; 0
    62aa:	92 2e       	mov	r9, r18
    62ac:	9f 0c       	add	r9, r15
    62ae:	21 e0       	ldi	r18, 0x01	; 1
    62b0:	9f 14       	cp	r9, r15
    62b2:	08 f0       	brcs	.+2      	; 0x62b6 <_Z10readUInt64PhPj+0x196>
    62b4:	20 e0       	ldi	r18, 0x00	; 0
    62b6:	32 2b       	or	r19, r18
    62b8:	f9 2c       	mov	r15, r9
    62ba:	21 e0       	ldi	r18, 0x01	; 1
    62bc:	e6 16       	cp	r14, r22
    62be:	08 f0       	brcs	.+2      	; 0x62c2 <_Z10readUInt64PhPj+0x1a2>
    62c0:	20 e0       	ldi	r18, 0x00	; 0
    62c2:	83 2e       	mov	r8, r19
    62c4:	8e 0c       	add	r8, r14
    62c6:	31 e0       	ldi	r19, 0x01	; 1
    62c8:	8e 14       	cp	r8, r14
    62ca:	08 f0       	brcs	.+2      	; 0x62ce <_Z10readUInt64PhPj+0x1ae>
    62cc:	30 e0       	ldi	r19, 0x00	; 0
    62ce:	23 2b       	or	r18, r19
    62d0:	e8 2c       	mov	r14, r8
    62d2:	31 e0       	ldi	r19, 0x01	; 1
    62d4:	d7 16       	cp	r13, r23
    62d6:	08 f0       	brcs	.+2      	; 0x62da <_Z10readUInt64PhPj+0x1ba>
    62d8:	30 e0       	ldi	r19, 0x00	; 0
    62da:	52 2e       	mov	r5, r18
    62dc:	5d 0c       	add	r5, r13
    62de:	21 e0       	ldi	r18, 0x01	; 1
    62e0:	5d 14       	cp	r5, r13
    62e2:	08 f0       	brcs	.+2      	; 0x62e6 <_Z10readUInt64PhPj+0x1c6>
    62e4:	20 e0       	ldi	r18, 0x00	; 0
    62e6:	32 2b       	or	r19, r18
    62e8:	d5 2c       	mov	r13, r5
    62ea:	21 e0       	ldi	r18, 0x01	; 1
    62ec:	c8 16       	cp	r12, r24
    62ee:	08 f0       	brcs	.+2      	; 0x62f2 <_Z10readUInt64PhPj+0x1d2>
    62f0:	20 e0       	ldi	r18, 0x00	; 0
    62f2:	43 2e       	mov	r4, r19
    62f4:	4c 0c       	add	r4, r12
    62f6:	81 e0       	ldi	r24, 0x01	; 1
    62f8:	4c 14       	cp	r4, r12
    62fa:	08 f0       	brcs	.+2      	; 0x62fe <_Z10readUInt64PhPj+0x1de>
    62fc:	80 e0       	ldi	r24, 0x00	; 0
    62fe:	28 2b       	or	r18, r24
    6300:	c4 2c       	mov	r12, r4
    6302:	62 2e       	mov	r6, r18
    6304:	69 0e       	add	r6, r25
}
unsigned long long readUInt64(unsigned char data[], unsigned int *offset){
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
    6306:	ec 81       	ldd	r30, Y+4	; 0x04
    6308:	fd 81       	ldd	r31, Y+5	; 0x05
    630a:	2a 81       	ldd	r18, Y+2	; 0x02
    630c:	3b 81       	ldd	r19, Y+3	; 0x03
    630e:	e2 0f       	add	r30, r18
    6310:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    6312:	25 81       	ldd	r18, Z+5	; 0x05
    6314:	30 e0       	ldi	r19, 0x00	; 0
    6316:	40 e0       	ldi	r20, 0x00	; 0
    6318:	50 e0       	ldi	r21, 0x00	; 0
    631a:	60 e0       	ldi	r22, 0x00	; 0
    631c:	70 e0       	ldi	r23, 0x00	; 0
    631e:	80 e0       	ldi	r24, 0x00	; 0
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	08 e2       	ldi	r16, 0x28	; 40
    6324:	0e 94 6d 34 	call	0x68da	; 0x68da <__ashldi3>
    6328:	27 0d       	add	r18, r7
    632a:	2e 83       	std	Y+6, r18	; 0x06
    632c:	11 e0       	ldi	r17, 0x01	; 1
    632e:	27 15       	cp	r18, r7
    6330:	08 f0       	brcs	.+2      	; 0x6334 <_Z10readUInt64PhPj+0x214>
    6332:	10 e0       	ldi	r17, 0x00	; 0
    6334:	b3 0e       	add	r11, r19
    6336:	21 e0       	ldi	r18, 0x01	; 1
    6338:	b3 14       	cp	r11, r3
    633a:	08 f0       	brcs	.+2      	; 0x633e <_Z10readUInt64PhPj+0x21e>
    633c:	20 e0       	ldi	r18, 0x00	; 0
    633e:	1b 0d       	add	r17, r11
    6340:	31 e0       	ldi	r19, 0x01	; 1
    6342:	1b 15       	cp	r17, r11
    6344:	08 f0       	brcs	.+2      	; 0x6348 <_Z10readUInt64PhPj+0x228>
    6346:	30 e0       	ldi	r19, 0x00	; 0
    6348:	23 2b       	or	r18, r19
    634a:	b1 2e       	mov	r11, r17
    634c:	a4 0e       	add	r10, r20
    634e:	31 e0       	ldi	r19, 0x01	; 1
    6350:	a2 14       	cp	r10, r2
    6352:	08 f0       	brcs	.+2      	; 0x6356 <_Z10readUInt64PhPj+0x236>
    6354:	30 e0       	ldi	r19, 0x00	; 0
    6356:	2a 0d       	add	r18, r10
    6358:	29 83       	std	Y+1, r18	; 0x01
    635a:	21 e0       	ldi	r18, 0x01	; 1
    635c:	49 81       	ldd	r20, Y+1	; 0x01
    635e:	4a 15       	cp	r20, r10
    6360:	08 f0       	brcs	.+2      	; 0x6364 <_Z10readUInt64PhPj+0x244>
    6362:	20 e0       	ldi	r18, 0x00	; 0
    6364:	32 2b       	or	r19, r18
    6366:	a9 80       	ldd	r10, Y+1	; 0x01
    6368:	95 0e       	add	r9, r21
    636a:	21 e0       	ldi	r18, 0x01	; 1
    636c:	9f 14       	cp	r9, r15
    636e:	08 f0       	brcs	.+2      	; 0x6372 <_Z10readUInt64PhPj+0x252>
    6370:	20 e0       	ldi	r18, 0x00	; 0
    6372:	23 2e       	mov	r2, r19
    6374:	29 0c       	add	r2, r9
    6376:	31 e0       	ldi	r19, 0x01	; 1
    6378:	29 14       	cp	r2, r9
    637a:	08 f0       	brcs	.+2      	; 0x637e <_Z10readUInt64PhPj+0x25e>
    637c:	30 e0       	ldi	r19, 0x00	; 0
    637e:	23 2b       	or	r18, r19
    6380:	92 2c       	mov	r9, r2
    6382:	86 0e       	add	r8, r22
    6384:	31 e0       	ldi	r19, 0x01	; 1
    6386:	8e 14       	cp	r8, r14
    6388:	08 f0       	brcs	.+2      	; 0x638c <_Z10readUInt64PhPj+0x26c>
    638a:	30 e0       	ldi	r19, 0x00	; 0
    638c:	32 2e       	mov	r3, r18
    638e:	38 0c       	add	r3, r8
    6390:	21 e0       	ldi	r18, 0x01	; 1
    6392:	38 14       	cp	r3, r8
    6394:	08 f0       	brcs	.+2      	; 0x6398 <_Z10readUInt64PhPj+0x278>
    6396:	20 e0       	ldi	r18, 0x00	; 0
    6398:	32 2b       	or	r19, r18
    639a:	83 2c       	mov	r8, r3
    639c:	57 0e       	add	r5, r23
    639e:	5a 86       	std	Y+10, r5	; 0x0a
    63a0:	21 e0       	ldi	r18, 0x01	; 1
    63a2:	5d 14       	cp	r5, r13
    63a4:	08 f0       	brcs	.+2      	; 0x63a8 <_Z10readUInt64PhPj+0x288>
    63a6:	20 e0       	ldi	r18, 0x00	; 0
    63a8:	7a 84       	ldd	r7, Y+10	; 0x0a
    63aa:	73 0e       	add	r7, r19
    63ac:	31 e0       	ldi	r19, 0x01	; 1
    63ae:	aa 85       	ldd	r26, Y+10	; 0x0a
    63b0:	7a 16       	cp	r7, r26
    63b2:	08 f0       	brcs	.+2      	; 0x63b6 <_Z10readUInt64PhPj+0x296>
    63b4:	30 e0       	ldi	r19, 0x00	; 0
    63b6:	23 2b       	or	r18, r19
    63b8:	7a 86       	std	Y+10, r7	; 0x0a
    63ba:	48 0e       	add	r4, r24
    63bc:	4b 86       	std	Y+11, r4	; 0x0b
    63be:	81 e0       	ldi	r24, 0x01	; 1
    63c0:	4c 14       	cp	r4, r12
    63c2:	08 f0       	brcs	.+2      	; 0x63c6 <_Z10readUInt64PhPj+0x2a6>
    63c4:	80 e0       	ldi	r24, 0x00	; 0
    63c6:	cb 84       	ldd	r12, Y+11	; 0x0b
    63c8:	c2 0e       	add	r12, r18
    63ca:	21 e0       	ldi	r18, 0x01	; 1
    63cc:	bb 85       	ldd	r27, Y+11	; 0x0b
    63ce:	cb 16       	cp	r12, r27
    63d0:	08 f0       	brcs	.+2      	; 0x63d4 <_Z10readUInt64PhPj+0x2b4>
    63d2:	20 e0       	ldi	r18, 0x00	; 0
    63d4:	82 2b       	or	r24, r18
    63d6:	cb 86       	std	Y+11, r12	; 0x0b
    63d8:	69 0e       	add	r6, r25
    63da:	68 0e       	add	r6, r24
unsigned long long readUInt64(unsigned char data[], unsigned int *offset){
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
    63dc:	ec 81       	ldd	r30, Y+4	; 0x04
    63de:	fd 81       	ldd	r31, Y+5	; 0x05
    63e0:	2a 81       	ldd	r18, Y+2	; 0x02
    63e2:	3b 81       	ldd	r19, Y+3	; 0x03
    63e4:	e2 0f       	add	r30, r18
    63e6:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    63e8:	24 81       	ldd	r18, Z+4	; 0x04
    63ea:	30 e0       	ldi	r19, 0x00	; 0
    63ec:	40 e0       	ldi	r20, 0x00	; 0
    63ee:	50 e0       	ldi	r21, 0x00	; 0
    63f0:	60 e0       	ldi	r22, 0x00	; 0
    63f2:	70 e0       	ldi	r23, 0x00	; 0
    63f4:	80 e0       	ldi	r24, 0x00	; 0
    63f6:	90 e0       	ldi	r25, 0x00	; 0
    63f8:	00 e2       	ldi	r16, 0x20	; 32
    63fa:	0e 94 6d 34 	call	0x68da	; 0x68da <__ashldi3>
    63fe:	ae 81       	ldd	r26, Y+6	; 0x06
    6400:	a2 0f       	add	r26, r18
    6402:	af 83       	std	Y+7, r26	; 0x07
    6404:	21 e0       	ldi	r18, 0x01	; 1
    6406:	be 81       	ldd	r27, Y+6	; 0x06
    6408:	ab 17       	cp	r26, r27
    640a:	08 f0       	brcs	.+2      	; 0x640e <_Z10readUInt64PhPj+0x2ee>
    640c:	20 e0       	ldi	r18, 0x00	; 0
    640e:	13 0f       	add	r17, r19
    6410:	31 e0       	ldi	r19, 0x01	; 1
    6412:	1b 15       	cp	r17, r11
    6414:	08 f0       	brcs	.+2      	; 0x6418 <_Z10readUInt64PhPj+0x2f8>
    6416:	30 e0       	ldi	r19, 0x00	; 0
    6418:	e2 2e       	mov	r14, r18
    641a:	e1 0e       	add	r14, r17
    641c:	21 e0       	ldi	r18, 0x01	; 1
    641e:	e1 16       	cp	r14, r17
    6420:	08 f0       	brcs	.+2      	; 0x6424 <_Z10readUInt64PhPj+0x304>
    6422:	20 e0       	ldi	r18, 0x00	; 0
    6424:	32 2b       	or	r19, r18
    6426:	1e 2d       	mov	r17, r14
    6428:	f9 80       	ldd	r15, Y+1	; 0x01
    642a:	f4 0e       	add	r15, r20
    642c:	21 e0       	ldi	r18, 0x01	; 1
    642e:	fa 14       	cp	r15, r10
    6430:	08 f0       	brcs	.+2      	; 0x6434 <_Z10readUInt64PhPj+0x314>
    6432:	20 e0       	ldi	r18, 0x00	; 0
    6434:	3f 0d       	add	r19, r15
    6436:	39 83       	std	Y+1, r19	; 0x01
    6438:	31 e0       	ldi	r19, 0x01	; 1
    643a:	e9 81       	ldd	r30, Y+1	; 0x01
    643c:	ef 15       	cp	r30, r15
    643e:	08 f0       	brcs	.+2      	; 0x6442 <_Z10readUInt64PhPj+0x322>
    6440:	30 e0       	ldi	r19, 0x00	; 0
    6442:	23 2b       	or	r18, r19
    6444:	f9 80       	ldd	r15, Y+1	; 0x01
    6446:	d2 2c       	mov	r13, r2
    6448:	d5 0e       	add	r13, r21
    644a:	31 e0       	ldi	r19, 0x01	; 1
    644c:	d9 14       	cp	r13, r9
    644e:	08 f0       	brcs	.+2      	; 0x6452 <_Z10readUInt64PhPj+0x332>
    6450:	30 e0       	ldi	r19, 0x00	; 0
    6452:	42 2e       	mov	r4, r18
    6454:	4d 0c       	add	r4, r13
    6456:	21 e0       	ldi	r18, 0x01	; 1
    6458:	4d 14       	cp	r4, r13
    645a:	08 f0       	brcs	.+2      	; 0x645e <_Z10readUInt64PhPj+0x33e>
    645c:	20 e0       	ldi	r18, 0x00	; 0
    645e:	32 2b       	or	r19, r18
    6460:	d4 2c       	mov	r13, r4
    6462:	b3 2c       	mov	r11, r3
    6464:	b6 0e       	add	r11, r22
    6466:	21 e0       	ldi	r18, 0x01	; 1
    6468:	b8 14       	cp	r11, r8
    646a:	08 f0       	brcs	.+2      	; 0x646e <_Z10readUInt64PhPj+0x34e>
    646c:	20 e0       	ldi	r18, 0x00	; 0
    646e:	53 2e       	mov	r5, r19
    6470:	5b 0c       	add	r5, r11
    6472:	31 e0       	ldi	r19, 0x01	; 1
    6474:	5b 14       	cp	r5, r11
    6476:	08 f0       	brcs	.+2      	; 0x647a <_Z10readUInt64PhPj+0x35a>
    6478:	30 e0       	ldi	r19, 0x00	; 0
    647a:	23 2b       	or	r18, r19
    647c:	b5 2c       	mov	r11, r5
    647e:	97 2c       	mov	r9, r7
    6480:	97 0e       	add	r9, r23
    6482:	31 e0       	ldi	r19, 0x01	; 1
    6484:	fa 85       	ldd	r31, Y+10	; 0x0a
    6486:	9f 16       	cp	r9, r31
    6488:	08 f0       	brcs	.+2      	; 0x648c <_Z10readUInt64PhPj+0x36c>
    648a:	30 e0       	ldi	r19, 0x00	; 0
    648c:	72 2e       	mov	r7, r18
    648e:	79 0c       	add	r7, r9
    6490:	21 e0       	ldi	r18, 0x01	; 1
    6492:	79 14       	cp	r7, r9
    6494:	08 f0       	brcs	.+2      	; 0x6498 <_Z10readUInt64PhPj+0x378>
    6496:	20 e0       	ldi	r18, 0x00	; 0
    6498:	32 2b       	or	r19, r18
    649a:	97 2c       	mov	r9, r7
    649c:	ac 2c       	mov	r10, r12
    649e:	a8 0e       	add	r10, r24
    64a0:	81 e0       	ldi	r24, 0x01	; 1
    64a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    64a4:	a2 16       	cp	r10, r18
    64a6:	08 f0       	brcs	.+2      	; 0x64aa <_Z10readUInt64PhPj+0x38a>
    64a8:	80 e0       	ldi	r24, 0x00	; 0
    64aa:	83 2e       	mov	r8, r19
    64ac:	8a 0c       	add	r8, r10
    64ae:	21 e0       	ldi	r18, 0x01	; 1
    64b0:	8a 14       	cp	r8, r10
    64b2:	08 f0       	brcs	.+2      	; 0x64b6 <_Z10readUInt64PhPj+0x396>
    64b4:	20 e0       	ldi	r18, 0x00	; 0
    64b6:	82 2b       	or	r24, r18
    64b8:	a8 2c       	mov	r10, r8
    64ba:	69 0e       	add	r6, r25
    64bc:	68 0e       	add	r6, r24
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
    64be:	ec 81       	ldd	r30, Y+4	; 0x04
    64c0:	fd 81       	ldd	r31, Y+5	; 0x05
    64c2:	8a 81       	ldd	r24, Y+2	; 0x02
    64c4:	9b 81       	ldd	r25, Y+3	; 0x03
    64c6:	e8 0f       	add	r30, r24
    64c8:	f9 1f       	adc	r31, r25
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    64ca:	23 81       	ldd	r18, Z+3	; 0x03
    64cc:	30 e0       	ldi	r19, 0x00	; 0
    64ce:	40 e0       	ldi	r20, 0x00	; 0
    64d0:	50 e0       	ldi	r21, 0x00	; 0
    64d2:	60 e0       	ldi	r22, 0x00	; 0
    64d4:	70 e0       	ldi	r23, 0x00	; 0
    64d6:	80 e0       	ldi	r24, 0x00	; 0
    64d8:	90 e0       	ldi	r25, 0x00	; 0
    64da:	08 e1       	ldi	r16, 0x18	; 24
    64dc:	0e 94 6d 34 	call	0x68da	; 0x68da <__ashldi3>
    64e0:	2f 80       	ldd	r2, Y+7	; 0x07
    64e2:	22 0e       	add	r2, r18
    64e4:	21 e0       	ldi	r18, 0x01	; 1
    64e6:	af 81       	ldd	r26, Y+7	; 0x07
    64e8:	2a 16       	cp	r2, r26
    64ea:	08 f0       	brcs	.+2      	; 0x64ee <_Z10readUInt64PhPj+0x3ce>
    64ec:	20 e0       	ldi	r18, 0x00	; 0
    64ee:	e3 0e       	add	r14, r19
    64f0:	31 e0       	ldi	r19, 0x01	; 1
    64f2:	e1 16       	cp	r14, r17
    64f4:	08 f0       	brcs	.+2      	; 0x64f8 <_Z10readUInt64PhPj+0x3d8>
    64f6:	30 e0       	ldi	r19, 0x00	; 0
    64f8:	32 2e       	mov	r3, r18
    64fa:	3e 0c       	add	r3, r14
    64fc:	21 e0       	ldi	r18, 0x01	; 1
    64fe:	3e 14       	cp	r3, r14
    6500:	08 f0       	brcs	.+2      	; 0x6504 <_Z10readUInt64PhPj+0x3e4>
    6502:	20 e0       	ldi	r18, 0x00	; 0
    6504:	32 2b       	or	r19, r18
    6506:	e3 2c       	mov	r14, r3
    6508:	b9 81       	ldd	r27, Y+1	; 0x01
    650a:	b4 0f       	add	r27, r20
    650c:	be 83       	std	Y+6, r27	; 0x06
    650e:	21 e0       	ldi	r18, 0x01	; 1
    6510:	bf 15       	cp	r27, r15
    6512:	08 f0       	brcs	.+2      	; 0x6516 <_Z10readUInt64PhPj+0x3f6>
    6514:	20 e0       	ldi	r18, 0x00	; 0
    6516:	ce 80       	ldd	r12, Y+6	; 0x06
    6518:	c3 0e       	add	r12, r19
    651a:	31 e0       	ldi	r19, 0x01	; 1
    651c:	ee 81       	ldd	r30, Y+6	; 0x06
    651e:	ce 16       	cp	r12, r30
    6520:	08 f0       	brcs	.+2      	; 0x6524 <_Z10readUInt64PhPj+0x404>
    6522:	30 e0       	ldi	r19, 0x00	; 0
    6524:	23 2b       	or	r18, r19
    6526:	ce 82       	std	Y+6, r12	; 0x06
    6528:	45 0e       	add	r4, r21
    652a:	4f 82       	std	Y+7, r4	; 0x07
    652c:	31 e0       	ldi	r19, 0x01	; 1
    652e:	4d 14       	cp	r4, r13
    6530:	08 f0       	brcs	.+2      	; 0x6534 <_Z10readUInt64PhPj+0x414>
    6532:	30 e0       	ldi	r19, 0x00	; 0
    6534:	4f 80       	ldd	r4, Y+7	; 0x07
    6536:	42 0e       	add	r4, r18
    6538:	21 e0       	ldi	r18, 0x01	; 1
    653a:	ff 81       	ldd	r31, Y+7	; 0x07
    653c:	4f 16       	cp	r4, r31
    653e:	08 f0       	brcs	.+2      	; 0x6542 <_Z10readUInt64PhPj+0x422>
    6540:	20 e0       	ldi	r18, 0x00	; 0
    6542:	32 2b       	or	r19, r18
    6544:	4f 82       	std	Y+7, r4	; 0x07
    6546:	f5 2c       	mov	r15, r5
    6548:	f6 0e       	add	r15, r22
    654a:	21 e0       	ldi	r18, 0x01	; 1
    654c:	fb 14       	cp	r15, r11
    654e:	08 f0       	brcs	.+2      	; 0x6552 <_Z10readUInt64PhPj+0x432>
    6550:	20 e0       	ldi	r18, 0x00	; 0
    6552:	53 2e       	mov	r5, r19
    6554:	5f 0c       	add	r5, r15
    6556:	31 e0       	ldi	r19, 0x01	; 1
    6558:	5f 14       	cp	r5, r15
    655a:	08 f0       	brcs	.+2      	; 0x655e <_Z10readUInt64PhPj+0x43e>
    655c:	30 e0       	ldi	r19, 0x00	; 0
    655e:	23 2b       	or	r18, r19
    6560:	f5 2c       	mov	r15, r5
    6562:	d7 2c       	mov	r13, r7
    6564:	d7 0e       	add	r13, r23
    6566:	11 e0       	ldi	r17, 0x01	; 1
    6568:	d9 14       	cp	r13, r9
    656a:	08 f0       	brcs	.+2      	; 0x656e <_Z10readUInt64PhPj+0x44e>
    656c:	10 e0       	ldi	r17, 0x00	; 0
    656e:	72 2e       	mov	r7, r18
    6570:	7d 0c       	add	r7, r13
    6572:	21 e0       	ldi	r18, 0x01	; 1
    6574:	7d 14       	cp	r7, r13
    6576:	08 f0       	brcs	.+2      	; 0x657a <_Z10readUInt64PhPj+0x45a>
    6578:	20 e0       	ldi	r18, 0x00	; 0
    657a:	12 2b       	or	r17, r18
    657c:	d7 2c       	mov	r13, r7
    657e:	98 2c       	mov	r9, r8
    6580:	98 0e       	add	r9, r24
    6582:	81 e0       	ldi	r24, 0x01	; 1
    6584:	9a 14       	cp	r9, r10
    6586:	08 f0       	brcs	.+2      	; 0x658a <_Z10readUInt64PhPj+0x46a>
    6588:	80 e0       	ldi	r24, 0x00	; 0
    658a:	19 0d       	add	r17, r9
    658c:	21 e0       	ldi	r18, 0x01	; 1
    658e:	19 15       	cp	r17, r9
    6590:	08 f0       	brcs	.+2      	; 0x6594 <_Z10readUInt64PhPj+0x474>
    6592:	20 e0       	ldi	r18, 0x00	; 0
    6594:	82 2b       	or	r24, r18
    6596:	91 2e       	mov	r9, r17
    6598:	69 0e       	add	r6, r25
    659a:	68 0e       	add	r6, r24
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
    659c:	ec 81       	ldd	r30, Y+4	; 0x04
    659e:	fd 81       	ldd	r31, Y+5	; 0x05
    65a0:	2a 81       	ldd	r18, Y+2	; 0x02
    65a2:	3b 81       	ldd	r19, Y+3	; 0x03
    65a4:	e2 0f       	add	r30, r18
    65a6:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    65a8:	22 81       	ldd	r18, Z+2	; 0x02
    65aa:	30 e0       	ldi	r19, 0x00	; 0
    65ac:	40 e0       	ldi	r20, 0x00	; 0
    65ae:	50 e0       	ldi	r21, 0x00	; 0
    65b0:	60 e0       	ldi	r22, 0x00	; 0
    65b2:	70 e0       	ldi	r23, 0x00	; 0
    65b4:	80 e0       	ldi	r24, 0x00	; 0
    65b6:	90 e0       	ldi	r25, 0x00	; 0
    65b8:	00 e1       	ldi	r16, 0x10	; 16
    65ba:	0e 94 6d 34 	call	0x68da	; 0x68da <__ashldi3>
    65be:	22 0d       	add	r18, r2
    65c0:	29 83       	std	Y+1, r18	; 0x01
    65c2:	21 e0       	ldi	r18, 0x01	; 1
    65c4:	a9 81       	ldd	r26, Y+1	; 0x01
    65c6:	a2 15       	cp	r26, r2
    65c8:	08 f0       	brcs	.+2      	; 0x65cc <_Z10readUInt64PhPj+0x4ac>
    65ca:	20 e0       	ldi	r18, 0x00	; 0
    65cc:	b3 2c       	mov	r11, r3
    65ce:	b3 0e       	add	r11, r19
    65d0:	31 e0       	ldi	r19, 0x01	; 1
    65d2:	be 14       	cp	r11, r14
    65d4:	08 f0       	brcs	.+2      	; 0x65d8 <_Z10readUInt64PhPj+0x4b8>
    65d6:	30 e0       	ldi	r19, 0x00	; 0
    65d8:	22 2e       	mov	r2, r18
    65da:	2b 0c       	add	r2, r11
    65dc:	21 e0       	ldi	r18, 0x01	; 1
    65de:	2b 14       	cp	r2, r11
    65e0:	08 f0       	brcs	.+2      	; 0x65e4 <_Z10readUInt64PhPj+0x4c4>
    65e2:	20 e0       	ldi	r18, 0x00	; 0
    65e4:	32 2b       	or	r19, r18
    65e6:	b2 2c       	mov	r11, r2
    65e8:	c4 0e       	add	r12, r20
    65ea:	21 e0       	ldi	r18, 0x01	; 1
    65ec:	be 81       	ldd	r27, Y+6	; 0x06
    65ee:	cb 16       	cp	r12, r27
    65f0:	08 f0       	brcs	.+2      	; 0x65f4 <_Z10readUInt64PhPj+0x4d4>
    65f2:	20 e0       	ldi	r18, 0x00	; 0
    65f4:	33 2e       	mov	r3, r19
    65f6:	3c 0c       	add	r3, r12
    65f8:	31 e0       	ldi	r19, 0x01	; 1
    65fa:	3c 14       	cp	r3, r12
    65fc:	08 f0       	brcs	.+2      	; 0x6600 <_Z10readUInt64PhPj+0x4e0>
    65fe:	30 e0       	ldi	r19, 0x00	; 0
    6600:	23 2b       	or	r18, r19
    6602:	c3 2c       	mov	r12, r3
    6604:	e4 2c       	mov	r14, r4
    6606:	e5 0e       	add	r14, r21
    6608:	31 e0       	ldi	r19, 0x01	; 1
    660a:	ef 81       	ldd	r30, Y+7	; 0x07
    660c:	ee 16       	cp	r14, r30
    660e:	08 f0       	brcs	.+2      	; 0x6612 <_Z10readUInt64PhPj+0x4f2>
    6610:	30 e0       	ldi	r19, 0x00	; 0
    6612:	42 2e       	mov	r4, r18
    6614:	4e 0c       	add	r4, r14
    6616:	21 e0       	ldi	r18, 0x01	; 1
    6618:	4e 14       	cp	r4, r14
    661a:	08 f0       	brcs	.+2      	; 0x661e <_Z10readUInt64PhPj+0x4fe>
    661c:	20 e0       	ldi	r18, 0x00	; 0
    661e:	32 2b       	or	r19, r18
    6620:	e4 2c       	mov	r14, r4
    6622:	56 0e       	add	r5, r22
    6624:	21 e0       	ldi	r18, 0x01	; 1
    6626:	5f 14       	cp	r5, r15
    6628:	08 f0       	brcs	.+2      	; 0x662c <_Z10readUInt64PhPj+0x50c>
    662a:	20 e0       	ldi	r18, 0x00	; 0
    662c:	83 2e       	mov	r8, r19
    662e:	85 0c       	add	r8, r5
    6630:	31 e0       	ldi	r19, 0x01	; 1
    6632:	85 14       	cp	r8, r5
    6634:	08 f0       	brcs	.+2      	; 0x6638 <_Z10readUInt64PhPj+0x518>
    6636:	30 e0       	ldi	r19, 0x00	; 0
    6638:	23 2b       	or	r18, r19
    663a:	58 2c       	mov	r5, r8
    663c:	77 0e       	add	r7, r23
    663e:	31 e0       	ldi	r19, 0x01	; 1
    6640:	7d 14       	cp	r7, r13
    6642:	08 f0       	brcs	.+2      	; 0x6646 <_Z10readUInt64PhPj+0x526>
    6644:	30 e0       	ldi	r19, 0x00	; 0
    6646:	a2 2e       	mov	r10, r18
    6648:	a7 0c       	add	r10, r7
    664a:	21 e0       	ldi	r18, 0x01	; 1
    664c:	a7 14       	cp	r10, r7
    664e:	08 f0       	brcs	.+2      	; 0x6652 <_Z10readUInt64PhPj+0x532>
    6650:	20 e0       	ldi	r18, 0x00	; 0
    6652:	32 2b       	or	r19, r18
    6654:	7a 2c       	mov	r7, r10
    6656:	18 0f       	add	r17, r24
    6658:	81 e0       	ldi	r24, 0x01	; 1
    665a:	19 15       	cp	r17, r9
    665c:	08 f0       	brcs	.+2      	; 0x6660 <_Z10readUInt64PhPj+0x540>
    665e:	80 e0       	ldi	r24, 0x00	; 0
    6660:	f3 2e       	mov	r15, r19
    6662:	f1 0e       	add	r15, r17
    6664:	21 e0       	ldi	r18, 0x01	; 1
    6666:	f1 16       	cp	r15, r17
    6668:	08 f0       	brcs	.+2      	; 0x666c <_Z10readUInt64PhPj+0x54c>
    666a:	20 e0       	ldi	r18, 0x00	; 0
    666c:	82 2b       	or	r24, r18
    666e:	1f 2d       	mov	r17, r15
    6670:	d6 2c       	mov	r13, r6
    6672:	d9 0e       	add	r13, r25
    6674:	d8 0e       	add	r13, r24
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
    6676:	ec 81       	ldd	r30, Y+4	; 0x04
    6678:	fd 81       	ldd	r31, Y+5	; 0x05
    667a:	2a 81       	ldd	r18, Y+2	; 0x02
    667c:	3b 81       	ldd	r19, Y+3	; 0x03
    667e:	e2 0f       	add	r30, r18
    6680:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 0]);
    6682:	21 81       	ldd	r18, Z+1	; 0x01
    6684:	30 e0       	ldi	r19, 0x00	; 0
    6686:	40 e0       	ldi	r20, 0x00	; 0
    6688:	50 e0       	ldi	r21, 0x00	; 0
    668a:	60 e0       	ldi	r22, 0x00	; 0
    668c:	70 e0       	ldi	r23, 0x00	; 0
    668e:	80 e0       	ldi	r24, 0x00	; 0
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	08 e0       	ldi	r16, 0x08	; 8
    6694:	0e 94 6d 34 	call	0x68da	; 0x68da <__ashldi3>
    6698:	a9 81       	ldd	r26, Y+1	; 0x01
    669a:	2a 0f       	add	r18, r26
    669c:	f1 e0       	ldi	r31, 0x01	; 1
    669e:	2a 17       	cp	r18, r26
    66a0:	08 f0       	brcs	.+2      	; 0x66a4 <_Z10readUInt64PhPj+0x584>
    66a2:	f0 e0       	ldi	r31, 0x00	; 0
    66a4:	23 0e       	add	r2, r19
    66a6:	e1 e0       	ldi	r30, 0x01	; 1
    66a8:	2b 14       	cp	r2, r11
    66aa:	08 f0       	brcs	.+2      	; 0x66ae <_Z10readUInt64PhPj+0x58e>
    66ac:	e0 e0       	ldi	r30, 0x00	; 0
    66ae:	3f 2f       	mov	r19, r31
    66b0:	32 0d       	add	r19, r2
    66b2:	f1 e0       	ldi	r31, 0x01	; 1
    66b4:	32 15       	cp	r19, r2
    66b6:	08 f0       	brcs	.+2      	; 0x66ba <_Z10readUInt64PhPj+0x59a>
    66b8:	f0 e0       	ldi	r31, 0x00	; 0
    66ba:	ef 2b       	or	r30, r31
    66bc:	34 0e       	add	r3, r20
    66be:	f1 e0       	ldi	r31, 0x01	; 1
    66c0:	3c 14       	cp	r3, r12
    66c2:	08 f0       	brcs	.+2      	; 0x66c6 <_Z10readUInt64PhPj+0x5a6>
    66c4:	f0 e0       	ldi	r31, 0x00	; 0
    66c6:	4e 2f       	mov	r20, r30
    66c8:	43 0d       	add	r20, r3
    66ca:	e1 e0       	ldi	r30, 0x01	; 1
    66cc:	43 15       	cp	r20, r3
    66ce:	08 f0       	brcs	.+2      	; 0x66d2 <_Z10readUInt64PhPj+0x5b2>
    66d0:	e0 e0       	ldi	r30, 0x00	; 0
    66d2:	fe 2b       	or	r31, r30
    66d4:	45 0e       	add	r4, r21
    66d6:	e1 e0       	ldi	r30, 0x01	; 1
    66d8:	4e 14       	cp	r4, r14
    66da:	08 f0       	brcs	.+2      	; 0x66de <_Z10readUInt64PhPj+0x5be>
    66dc:	e0 e0       	ldi	r30, 0x00	; 0
    66de:	5f 2f       	mov	r21, r31
    66e0:	54 0d       	add	r21, r4
    66e2:	f1 e0       	ldi	r31, 0x01	; 1
    66e4:	54 15       	cp	r21, r4
    66e6:	08 f0       	brcs	.+2      	; 0x66ea <_Z10readUInt64PhPj+0x5ca>
    66e8:	f0 e0       	ldi	r31, 0x00	; 0
    66ea:	ef 2b       	or	r30, r31
    66ec:	86 0e       	add	r8, r22
    66ee:	f1 e0       	ldi	r31, 0x01	; 1
    66f0:	85 14       	cp	r8, r5
    66f2:	08 f0       	brcs	.+2      	; 0x66f6 <_Z10readUInt64PhPj+0x5d6>
    66f4:	f0 e0       	ldi	r31, 0x00	; 0
    66f6:	6e 2f       	mov	r22, r30
    66f8:	68 0d       	add	r22, r8
    66fa:	e1 e0       	ldi	r30, 0x01	; 1
    66fc:	68 15       	cp	r22, r8
    66fe:	08 f0       	brcs	.+2      	; 0x6702 <_Z10readUInt64PhPj+0x5e2>
    6700:	e0 e0       	ldi	r30, 0x00	; 0
    6702:	fe 2b       	or	r31, r30
    6704:	a7 0e       	add	r10, r23
    6706:	e1 e0       	ldi	r30, 0x01	; 1
    6708:	a7 14       	cp	r10, r7
    670a:	08 f0       	brcs	.+2      	; 0x670e <_Z10readUInt64PhPj+0x5ee>
    670c:	e0 e0       	ldi	r30, 0x00	; 0
    670e:	7f 2f       	mov	r23, r31
    6710:	7a 0d       	add	r23, r10
    6712:	f1 e0       	ldi	r31, 0x01	; 1
    6714:	7a 15       	cp	r23, r10
    6716:	08 f0       	brcs	.+2      	; 0x671a <_Z10readUInt64PhPj+0x5fa>
    6718:	f0 e0       	ldi	r31, 0x00	; 0
    671a:	ef 2b       	or	r30, r31
    671c:	f8 0e       	add	r15, r24
    671e:	a1 e0       	ldi	r26, 0x01	; 1
    6720:	f1 16       	cp	r15, r17
    6722:	08 f0       	brcs	.+2      	; 0x6726 <_Z10readUInt64PhPj+0x606>
    6724:	a0 e0       	ldi	r26, 0x00	; 0
    6726:	8e 2f       	mov	r24, r30
    6728:	8f 0d       	add	r24, r15
    672a:	e1 e0       	ldi	r30, 0x01	; 1
    672c:	8f 15       	cp	r24, r15
    672e:	08 f0       	brcs	.+2      	; 0x6732 <_Z10readUInt64PhPj+0x612>
    6730:	e0 e0       	ldi	r30, 0x00	; 0
    6732:	ae 2b       	or	r26, r30
    6734:	9d 0d       	add	r25, r13
	/*unsigned char byteCount = 2;
	for (int i = 0; i < byteCount; i++){
		out += data[*offset + byteCount - i] << (8 * i);
	}*/
	*offset += 8;
    6736:	0a 81       	ldd	r16, Y+2	; 0x02
    6738:	1b 81       	ldd	r17, Y+3	; 0x03
    673a:	08 5f       	subi	r16, 0xF8	; 248
    673c:	1f 4f       	sbci	r17, 0xFF	; 255
    673e:	e8 85       	ldd	r30, Y+8	; 0x08
    6740:	f9 85       	ldd	r31, Y+9	; 0x09
    6742:	11 83       	std	Z+1, r17	; 0x01
    6744:	00 83       	st	Z, r16
	return out;
}
    6746:	9a 0f       	add	r25, r26
    6748:	2b 96       	adiw	r28, 0x0b	; 11
    674a:	0f b6       	in	r0, 0x3f	; 63
    674c:	f8 94       	cli
    674e:	de bf       	out	0x3e, r29	; 62
    6750:	0f be       	out	0x3f, r0	; 63
    6752:	cd bf       	out	0x3d, r28	; 61
    6754:	df 91       	pop	r29
    6756:	cf 91       	pop	r28
    6758:	1f 91       	pop	r17
    675a:	0f 91       	pop	r16
    675c:	ff 90       	pop	r15
    675e:	ef 90       	pop	r14
    6760:	df 90       	pop	r13
    6762:	cf 90       	pop	r12
    6764:	bf 90       	pop	r11
    6766:	af 90       	pop	r10
    6768:	9f 90       	pop	r9
    676a:	8f 90       	pop	r8
    676c:	7f 90       	pop	r7
    676e:	6f 90       	pop	r6
    6770:	5f 90       	pop	r5
    6772:	4f 90       	pop	r4
    6774:	3f 90       	pop	r3
    6776:	2f 90       	pop	r2
    6778:	08 95       	ret

0000677a <_Z9readBytesPhS_iPj>:
void readBytes(unsigned char data[], unsigned char out[], int count, unsigned int *offset){
    677a:	0f 93       	push	r16
    677c:	1f 93       	push	r17
    677e:	cf 93       	push	r28
    6780:	df 93       	push	r29
    6782:	8c 01       	movw	r16, r24
    6784:	e9 01       	movw	r28, r18
	for (int i = 0; i < count; i++){
    6786:	14 16       	cp	r1, r20
    6788:	15 06       	cpc	r1, r21
    678a:	94 f4       	brge	.+36     	; 0x67b0 <_Z9readBytesPhS_iPj+0x36>
    678c:	a6 2f       	mov	r26, r22
    678e:	b7 2f       	mov	r27, r23
    6790:	20 e0       	ldi	r18, 0x00	; 0
    6792:	30 e0       	ldi	r19, 0x00	; 0
		out[i] = data[i + *offset];
    6794:	f8 01       	movw	r30, r16
    6796:	e2 0f       	add	r30, r18
    6798:	f3 1f       	adc	r31, r19
    679a:	88 81       	ld	r24, Y
    679c:	99 81       	ldd	r25, Y+1	; 0x01
    679e:	e8 0f       	add	r30, r24
    67a0:	f9 1f       	adc	r31, r25
    67a2:	80 81       	ld	r24, Z
    67a4:	8d 93       	st	X+, r24
	}*/
	*offset += 8;
	return out;
}
void readBytes(unsigned char data[], unsigned char out[], int count, unsigned int *offset){
	for (int i = 0; i < count; i++){
    67a6:	2f 5f       	subi	r18, 0xFF	; 255
    67a8:	3f 4f       	sbci	r19, 0xFF	; 255
    67aa:	24 17       	cp	r18, r20
    67ac:	35 07       	cpc	r19, r21
    67ae:	91 f7       	brne	.-28     	; 0x6794 <_Z9readBytesPhS_iPj+0x1a>
		out[i] = data[i + *offset];
	}
	*offset += count;
    67b0:	88 81       	ld	r24, Y
    67b2:	99 81       	ldd	r25, Y+1	; 0x01
    67b4:	48 0f       	add	r20, r24
    67b6:	59 1f       	adc	r21, r25
    67b8:	59 83       	std	Y+1, r21	; 0x01
    67ba:	48 83       	st	Y, r20
}
    67bc:	df 91       	pop	r29
    67be:	cf 91       	pop	r28
    67c0:	1f 91       	pop	r17
    67c2:	0f 91       	pop	r16
    67c4:	08 95       	ret

000067c6 <_Z9readFloatPhPj>:

float readFloat(unsigned char data[], unsigned int* offset){
    67c6:	fb 01       	movw	r30, r22
	byte *bytes = &data[*offset];
    67c8:	20 81       	ld	r18, Z
    67ca:	31 81       	ldd	r19, Z+1	; 0x01
	float* val = reinterpret_cast<float*>(bytes);
	*offset += 4;
    67cc:	a9 01       	movw	r20, r18
    67ce:	4c 5f       	subi	r20, 0xFC	; 252
    67d0:	5f 4f       	sbci	r21, 0xFF	; 255
    67d2:	51 83       	std	Z+1, r21	; 0x01
    67d4:	40 83       	st	Z, r20
	return *val;
    67d6:	fc 01       	movw	r30, r24
    67d8:	e2 0f       	add	r30, r18
    67da:	f3 1f       	adc	r31, r19
    67dc:	50 81       	ld	r21, Z
    67de:	41 81       	ldd	r20, Z+1	; 0x01
    67e0:	32 81       	ldd	r19, Z+2	; 0x02
    67e2:	23 81       	ldd	r18, Z+3	; 0x03
    67e4:	85 2f       	mov	r24, r21
    67e6:	94 2f       	mov	r25, r20
    67e8:	a3 2f       	mov	r26, r19
    67ea:	b2 2f       	mov	r27, r18
    67ec:	bc 01       	movw	r22, r24
    67ee:	cd 01       	movw	r24, r26
    67f0:	08 95       	ret

000067f2 <_Z9writeBytePhhi>:
 *      Author: EHaskins
 */

#include "ByteWriter.h"
int writeByte(unsigned char data[], unsigned char val, int offset){
	data[offset] = val;
    67f2:	fc 01       	movw	r30, r24
    67f4:	e4 0f       	add	r30, r20
    67f6:	f5 1f       	adc	r31, r21
    67f8:	60 83       	st	Z, r22
	return offset + 1;
    67fa:	ca 01       	movw	r24, r20
    67fc:	01 96       	adiw	r24, 0x01	; 1
}
    67fe:	08 95       	ret

00006800 <_Z11writeUInt16Phtj>:
int writeUInt16(unsigned char data[], unsigned short val, unsigned int offset){

	data[offset + 1] = (unsigned char)(val >> 8);
    6800:	fc 01       	movw	r30, r24
    6802:	e4 0f       	add	r30, r20
    6804:	f5 1f       	adc	r31, r21
    6806:	71 83       	std	Z+1, r23	; 0x01
	data[offset + 0] = (unsigned char)val;
    6808:	60 83       	st	Z, r22
	return offset + 2;
    680a:	ca 01       	movw	r24, r20
    680c:	02 96       	adiw	r24, 0x02	; 2
}
    680e:	08 95       	ret

00006810 <_Z11writeUInt32Phmj>:
int writeUInt32(unsigned char data[], unsigned long val, unsigned int offset){
	data[offset + 3] = (unsigned char)(val >> 24);
    6810:	fc 01       	movw	r30, r24
    6812:	e2 0f       	add	r30, r18
    6814:	f3 1f       	adc	r31, r19
    6816:	73 83       	std	Z+3, r23	; 0x03
	data[offset + 2] = (unsigned char)(val >> 16);
    6818:	62 83       	std	Z+2, r22	; 0x02
	data[offset + 1] = (unsigned char)(val >> 8);
    681a:	51 83       	std	Z+1, r21	; 0x01
	data[offset + 0] = (unsigned char)val;
    681c:	40 83       	st	Z, r20
	return offset + 4;
    681e:	c9 01       	movw	r24, r18
    6820:	04 96       	adiw	r24, 0x04	; 4
}
    6822:	08 95       	ret

00006824 <_Z17writeUInt32ForCrcPhmj>:

int writeUInt32ForCrc(unsigned char data[], unsigned long val, unsigned int offset){
	data[offset + 3] = (unsigned char)(val >> 24);
    6824:	fc 01       	movw	r30, r24
    6826:	e2 0f       	add	r30, r18
    6828:	f3 1f       	adc	r31, r19
    682a:	73 83       	std	Z+3, r23	; 0x03
	data[offset + 2] = (unsigned char)(val >> 16);
    682c:	62 83       	std	Z+2, r22	; 0x02
	data[offset + 1] = (unsigned char)(val >> 8);
    682e:	51 83       	std	Z+1, r21	; 0x01
	data[offset] = (unsigned char)val;
    6830:	40 83       	st	Z, r20
	return offset + 4;
    6832:	c9 01       	movw	r24, r18
    6834:	04 96       	adiw	r24, 0x04	; 4
}
    6836:	08 95       	ret

00006838 <_Z10writeBytesPhjS_ij>:

int writeBytes(unsigned char data[], unsigned int dataOffset, unsigned char val[], int count, unsigned int valOffset){
    6838:	0f 93       	push	r16
    683a:	1f 93       	push	r17
	for (int i = 0; i < count; i++){
    683c:	12 16       	cp	r1, r18
    683e:	13 06       	cpc	r1, r19
    6840:	74 f4       	brge	.+28     	; 0x685e <_Z10writeBytesPhjS_ij+0x26>
	data[offset + 1] = (unsigned char)(val >> 8);
	data[offset] = (unsigned char)val;
	return offset + 4;
}

int writeBytes(unsigned char data[], unsigned int dataOffset, unsigned char val[], int count, unsigned int valOffset){
    6842:	da 01       	movw	r26, r20
    6844:	a0 0f       	add	r26, r16
    6846:	b1 1f       	adc	r27, r17
    6848:	fc 01       	movw	r30, r24
    684a:	e6 0f       	add	r30, r22
    684c:	f7 1f       	adc	r31, r23
	for (int i = 0; i < count; i++){
    684e:	80 e0       	ldi	r24, 0x00	; 0
    6850:	90 e0       	ldi	r25, 0x00	; 0
		data[i + dataOffset] = val[i + valOffset];
    6852:	4d 91       	ld	r20, X+
    6854:	41 93       	st	Z+, r20
	data[offset] = (unsigned char)val;
	return offset + 4;
}

int writeBytes(unsigned char data[], unsigned int dataOffset, unsigned char val[], int count, unsigned int valOffset){
	for (int i = 0; i < count; i++){
    6856:	01 96       	adiw	r24, 0x01	; 1
    6858:	82 17       	cp	r24, r18
    685a:	93 07       	cpc	r25, r19
    685c:	d1 f7       	brne	.-12     	; 0x6852 <_Z10writeBytesPhjS_ij+0x1a>
		data[i + dataOffset] = val[i + valOffset];
	}
	return dataOffset + count;
    685e:	26 0f       	add	r18, r22
    6860:	37 1f       	adc	r19, r23
}
    6862:	82 2f       	mov	r24, r18
    6864:	93 2f       	mov	r25, r19
    6866:	1f 91       	pop	r17
    6868:	0f 91       	pop	r16
    686a:	08 95       	ret

0000686c <_ZN17RobotModelSection6updateEPhj>:
	isActive = false;
}

void RobotModelSection::update(unsigned char data[], unsigned int offset){

}
    686c:	08 95       	ret

0000686e <_ZN17RobotModelSection9getStatusEPhPj>:
void RobotModelSection::getStatus(unsigned char data[], unsigned int *offset){

}
    686e:	08 95       	ret

00006870 <_ZN17RobotModelSection4loopEb>:

void RobotModelSection::loop(bool safteyTripped){
    6870:	1f 93       	push	r17
    6872:	cf 93       	push	r28
    6874:	df 93       	push	r29
    6876:	ec 01       	movw	r28, r24
    6878:	16 2f       	mov	r17, r22
	if (safteyTripped && !lastIsSafteyTripped)
    687a:	66 23       	and	r22, r22
    687c:	59 f0       	breq	.+22     	; 0x6894 <_ZN17RobotModelSection4loopEb+0x24>
    687e:	8d 81       	ldd	r24, Y+5	; 0x05
    6880:	88 23       	and	r24, r24
    6882:	59 f4       	brne	.+22     	; 0x689a <_ZN17RobotModelSection4loopEb+0x2a>
		disableOutputs();
    6884:	e8 81       	ld	r30, Y
    6886:	f9 81       	ldd	r31, Y+1	; 0x01
    6888:	06 80       	ldd	r0, Z+6	; 0x06
    688a:	f7 81       	ldd	r31, Z+7	; 0x07
    688c:	e0 2d       	mov	r30, r0
    688e:	ce 01       	movw	r24, r28
    6890:	19 95       	eicall
    6892:	0d c0       	rjmp	.+26     	; 0x68ae <_ZN17RobotModelSection4loopEb+0x3e>
	else if ((!safteyTripped && lastIsSafteyTripped) || isFirstLoop){
    6894:	8d 81       	ldd	r24, Y+5	; 0x05
    6896:	88 23       	and	r24, r24
    6898:	19 f4       	brne	.+6      	; 0x68a0 <_ZN17RobotModelSection4loopEb+0x30>
    689a:	8c 81       	ldd	r24, Y+4	; 0x04
    689c:	88 23       	and	r24, r24
    689e:	39 f0       	breq	.+14     	; 0x68ae <_ZN17RobotModelSection4loopEb+0x3e>
		enableOutputs();
    68a0:	e8 81       	ld	r30, Y
    68a2:	f9 81       	ldd	r31, Y+1	; 0x01
    68a4:	00 84       	ldd	r0, Z+8	; 0x08
    68a6:	f1 85       	ldd	r31, Z+9	; 0x09
    68a8:	e0 2d       	mov	r30, r0
    68aa:	ce 01       	movw	r24, r28
    68ac:	19 95       	eicall
	}
	lastIsSafteyTripped = safteyTripped;
    68ae:	1d 83       	std	Y+5, r17	; 0x05
	isFirstLoop = false;
    68b0:	1c 82       	std	Y+4, r1	; 0x04
}
    68b2:	df 91       	pop	r29
    68b4:	cf 91       	pop	r28
    68b6:	1f 91       	pop	r17
    68b8:	08 95       	ret

000068ba <_ZN17RobotModelSection14disableOutputsEv>:
void RobotModelSection::disableOutputs(){}
    68ba:	08 95       	ret

000068bc <_ZN17RobotModelSection13enableOutputsEv>:
void RobotModelSection::enableOutputs(){}
    68bc:	08 95       	ret

000068be <_ZN17RobotModelSection4initEv>:

RobotModelSection::RobotModelSection() {
	init();
}

void RobotModelSection::init(){
    68be:	fc 01       	movw	r30, r24
	lastIsSafteyTripped = false;
    68c0:	15 82       	std	Z+5, r1	; 0x05
	isFirstLoop = true;
    68c2:	81 e0       	ldi	r24, 0x01	; 1
    68c4:	84 83       	std	Z+4, r24	; 0x04
	isActive = false;
    68c6:	13 82       	std	Z+3, r1	; 0x03
}
    68c8:	08 95       	ret

000068ca <_ZN17RobotModelSectionC1Ev>:
 *      Author: EHaskins
 */

#include "RobotModelSection.h"

RobotModelSection::RobotModelSection() {
    68ca:	24 e0       	ldi	r18, 0x04	; 4
    68cc:	33 e0       	ldi	r19, 0x03	; 3
    68ce:	fc 01       	movw	r30, r24
    68d0:	31 83       	std	Z+1, r19	; 0x01
    68d2:	20 83       	st	Z, r18
	init();
    68d4:	0e 94 5f 34 	call	0x68be	; 0x68be <_ZN17RobotModelSection4initEv>
}
    68d8:	08 95       	ret

000068da <__ashldi3>:
    68da:	cf 92       	push	r12
    68dc:	df 92       	push	r13
    68de:	ef 92       	push	r14
    68e0:	ff 92       	push	r15
    68e2:	0f 93       	push	r16
    68e4:	cf 93       	push	r28
    68e6:	df 93       	push	r29
    68e8:	cd b7       	in	r28, 0x3d	; 61
    68ea:	de b7       	in	r29, 0x3e	; 62
    68ec:	60 97       	sbiw	r28, 0x10	; 16
    68ee:	0f b6       	in	r0, 0x3f	; 63
    68f0:	f8 94       	cli
    68f2:	de bf       	out	0x3e, r29	; 62
    68f4:	0f be       	out	0x3f, r0	; 63
    68f6:	cd bf       	out	0x3d, r28	; 61
    68f8:	00 23       	and	r16, r16
    68fa:	09 f4       	brne	.+2      	; 0x68fe <__ashldi3+0x24>
    68fc:	5a c0       	rjmp	.+180    	; 0x69b2 <__ashldi3+0xd8>
    68fe:	29 87       	std	Y+9, r18	; 0x09
    6900:	3a 87       	std	Y+10, r19	; 0x0a
    6902:	4b 87       	std	Y+11, r20	; 0x0b
    6904:	5c 87       	std	Y+12, r21	; 0x0c
    6906:	6d 87       	std	Y+13, r22	; 0x0d
    6908:	7e 87       	std	Y+14, r23	; 0x0e
    690a:	8f 87       	std	Y+15, r24	; 0x0f
    690c:	98 8b       	std	Y+16, r25	; 0x10
    690e:	80 e2       	ldi	r24, 0x20	; 32
    6910:	80 1b       	sub	r24, r16
    6912:	49 85       	ldd	r20, Y+9	; 0x09
    6914:	5a 85       	ldd	r21, Y+10	; 0x0a
    6916:	6b 85       	ldd	r22, Y+11	; 0x0b
    6918:	7c 85       	ldd	r23, Y+12	; 0x0c
    691a:	18 16       	cp	r1, r24
    691c:	b4 f0       	brlt	.+44     	; 0x694a <__ashldi3+0x70>
    691e:	19 82       	std	Y+1, r1	; 0x01
    6920:	1a 82       	std	Y+2, r1	; 0x02
    6922:	1b 82       	std	Y+3, r1	; 0x03
    6924:	1c 82       	std	Y+4, r1	; 0x04
    6926:	99 27       	eor	r25, r25
    6928:	87 fd       	sbrc	r24, 7
    692a:	90 95       	com	r25
    692c:	90 95       	com	r25
    692e:	81 95       	neg	r24
    6930:	9f 4f       	sbci	r25, 0xFF	; 255
    6932:	04 c0       	rjmp	.+8      	; 0x693c <__ashldi3+0x62>
    6934:	44 0f       	add	r20, r20
    6936:	55 1f       	adc	r21, r21
    6938:	66 1f       	adc	r22, r22
    693a:	77 1f       	adc	r23, r23
    693c:	8a 95       	dec	r24
    693e:	d2 f7       	brpl	.-12     	; 0x6934 <__ashldi3+0x5a>
    6940:	4d 83       	std	Y+5, r20	; 0x05
    6942:	5e 83       	std	Y+6, r21	; 0x06
    6944:	6f 83       	std	Y+7, r22	; 0x07
    6946:	78 87       	std	Y+8, r23	; 0x08
    6948:	2c c0       	rjmp	.+88     	; 0x69a2 <__ashldi3+0xc8>
    694a:	6a 01       	movw	r12, r20
    694c:	7b 01       	movw	r14, r22
    694e:	00 2e       	mov	r0, r16
    6950:	04 c0       	rjmp	.+8      	; 0x695a <__ashldi3+0x80>
    6952:	cc 0c       	add	r12, r12
    6954:	dd 1c       	adc	r13, r13
    6956:	ee 1c       	adc	r14, r14
    6958:	ff 1c       	adc	r15, r15
    695a:	0a 94       	dec	r0
    695c:	d2 f7       	brpl	.-12     	; 0x6952 <__ashldi3+0x78>
    695e:	c9 82       	std	Y+1, r12	; 0x01
    6960:	da 82       	std	Y+2, r13	; 0x02
    6962:	eb 82       	std	Y+3, r14	; 0x03
    6964:	fc 82       	std	Y+4, r15	; 0x04
    6966:	6a 01       	movw	r12, r20
    6968:	7b 01       	movw	r14, r22
    696a:	04 c0       	rjmp	.+8      	; 0x6974 <__ashldi3+0x9a>
    696c:	f6 94       	lsr	r15
    696e:	e7 94       	ror	r14
    6970:	d7 94       	ror	r13
    6972:	c7 94       	ror	r12
    6974:	8a 95       	dec	r24
    6976:	d2 f7       	brpl	.-12     	; 0x696c <__ashldi3+0x92>
    6978:	d7 01       	movw	r26, r14
    697a:	c6 01       	movw	r24, r12
    697c:	4d 85       	ldd	r20, Y+13	; 0x0d
    697e:	5e 85       	ldd	r21, Y+14	; 0x0e
    6980:	6f 85       	ldd	r22, Y+15	; 0x0f
    6982:	78 89       	ldd	r23, Y+16	; 0x10
    6984:	04 c0       	rjmp	.+8      	; 0x698e <__ashldi3+0xb4>
    6986:	44 0f       	add	r20, r20
    6988:	55 1f       	adc	r21, r21
    698a:	66 1f       	adc	r22, r22
    698c:	77 1f       	adc	r23, r23
    698e:	0a 95       	dec	r16
    6990:	d2 f7       	brpl	.-12     	; 0x6986 <__ashldi3+0xac>
    6992:	84 2b       	or	r24, r20
    6994:	95 2b       	or	r25, r21
    6996:	a6 2b       	or	r26, r22
    6998:	b7 2b       	or	r27, r23
    699a:	8d 83       	std	Y+5, r24	; 0x05
    699c:	9e 83       	std	Y+6, r25	; 0x06
    699e:	af 83       	std	Y+7, r26	; 0x07
    69a0:	b8 87       	std	Y+8, r27	; 0x08
    69a2:	29 81       	ldd	r18, Y+1	; 0x01
    69a4:	3a 81       	ldd	r19, Y+2	; 0x02
    69a6:	4b 81       	ldd	r20, Y+3	; 0x03
    69a8:	5c 81       	ldd	r21, Y+4	; 0x04
    69aa:	6d 81       	ldd	r22, Y+5	; 0x05
    69ac:	7e 81       	ldd	r23, Y+6	; 0x06
    69ae:	8f 81       	ldd	r24, Y+7	; 0x07
    69b0:	98 85       	ldd	r25, Y+8	; 0x08
    69b2:	60 96       	adiw	r28, 0x10	; 16
    69b4:	0f b6       	in	r0, 0x3f	; 63
    69b6:	f8 94       	cli
    69b8:	de bf       	out	0x3e, r29	; 62
    69ba:	0f be       	out	0x3f, r0	; 63
    69bc:	cd bf       	out	0x3d, r28	; 61
    69be:	df 91       	pop	r29
    69c0:	cf 91       	pop	r28
    69c2:	0f 91       	pop	r16
    69c4:	ff 90       	pop	r15
    69c6:	ef 90       	pop	r14
    69c8:	df 90       	pop	r13
    69ca:	cf 90       	pop	r12
    69cc:	08 95       	ret

000069ce <__subsf3>:
    69ce:	50 58       	subi	r21, 0x80	; 128

000069d0 <__addsf3>:
    69d0:	bb 27       	eor	r27, r27
    69d2:	aa 27       	eor	r26, r26
    69d4:	0e d0       	rcall	.+28     	; 0x69f2 <__addsf3x>
    69d6:	75 c1       	rjmp	.+746    	; 0x6cc2 <__fp_round>
    69d8:	66 d1       	rcall	.+716    	; 0x6ca6 <__fp_pscA>
    69da:	30 f0       	brcs	.+12     	; 0x69e8 <__addsf3+0x18>
    69dc:	6b d1       	rcall	.+726    	; 0x6cb4 <__fp_pscB>
    69de:	20 f0       	brcs	.+8      	; 0x69e8 <__addsf3+0x18>
    69e0:	31 f4       	brne	.+12     	; 0x69ee <__addsf3+0x1e>
    69e2:	9f 3f       	cpi	r25, 0xFF	; 255
    69e4:	11 f4       	brne	.+4      	; 0x69ea <__addsf3+0x1a>
    69e6:	1e f4       	brtc	.+6      	; 0x69ee <__addsf3+0x1e>
    69e8:	5b c1       	rjmp	.+694    	; 0x6ca0 <__fp_nan>
    69ea:	0e f4       	brtc	.+2      	; 0x69ee <__addsf3+0x1e>
    69ec:	e0 95       	com	r30
    69ee:	e7 fb       	bst	r30, 7
    69f0:	51 c1       	rjmp	.+674    	; 0x6c94 <__fp_inf>

000069f2 <__addsf3x>:
    69f2:	e9 2f       	mov	r30, r25
    69f4:	77 d1       	rcall	.+750    	; 0x6ce4 <__fp_split3>
    69f6:	80 f3       	brcs	.-32     	; 0x69d8 <__addsf3+0x8>
    69f8:	ba 17       	cp	r27, r26
    69fa:	62 07       	cpc	r22, r18
    69fc:	73 07       	cpc	r23, r19
    69fe:	84 07       	cpc	r24, r20
    6a00:	95 07       	cpc	r25, r21
    6a02:	18 f0       	brcs	.+6      	; 0x6a0a <__addsf3x+0x18>
    6a04:	71 f4       	brne	.+28     	; 0x6a22 <__addsf3x+0x30>
    6a06:	9e f5       	brtc	.+102    	; 0x6a6e <__addsf3x+0x7c>
    6a08:	8f c1       	rjmp	.+798    	; 0x6d28 <__fp_zero>
    6a0a:	0e f4       	brtc	.+2      	; 0x6a0e <__addsf3x+0x1c>
    6a0c:	e0 95       	com	r30
    6a0e:	0b 2e       	mov	r0, r27
    6a10:	ba 2f       	mov	r27, r26
    6a12:	a0 2d       	mov	r26, r0
    6a14:	0b 01       	movw	r0, r22
    6a16:	b9 01       	movw	r22, r18
    6a18:	90 01       	movw	r18, r0
    6a1a:	0c 01       	movw	r0, r24
    6a1c:	ca 01       	movw	r24, r20
    6a1e:	a0 01       	movw	r20, r0
    6a20:	11 24       	eor	r1, r1
    6a22:	ff 27       	eor	r31, r31
    6a24:	59 1b       	sub	r21, r25
    6a26:	99 f0       	breq	.+38     	; 0x6a4e <__addsf3x+0x5c>
    6a28:	59 3f       	cpi	r21, 0xF9	; 249
    6a2a:	50 f4       	brcc	.+20     	; 0x6a40 <__addsf3x+0x4e>
    6a2c:	50 3e       	cpi	r21, 0xE0	; 224
    6a2e:	68 f1       	brcs	.+90     	; 0x6a8a <__addsf3x+0x98>
    6a30:	1a 16       	cp	r1, r26
    6a32:	f0 40       	sbci	r31, 0x00	; 0
    6a34:	a2 2f       	mov	r26, r18
    6a36:	23 2f       	mov	r18, r19
    6a38:	34 2f       	mov	r19, r20
    6a3a:	44 27       	eor	r20, r20
    6a3c:	58 5f       	subi	r21, 0xF8	; 248
    6a3e:	f3 cf       	rjmp	.-26     	; 0x6a26 <__addsf3x+0x34>
    6a40:	46 95       	lsr	r20
    6a42:	37 95       	ror	r19
    6a44:	27 95       	ror	r18
    6a46:	a7 95       	ror	r26
    6a48:	f0 40       	sbci	r31, 0x00	; 0
    6a4a:	53 95       	inc	r21
    6a4c:	c9 f7       	brne	.-14     	; 0x6a40 <__addsf3x+0x4e>
    6a4e:	7e f4       	brtc	.+30     	; 0x6a6e <__addsf3x+0x7c>
    6a50:	1f 16       	cp	r1, r31
    6a52:	ba 0b       	sbc	r27, r26
    6a54:	62 0b       	sbc	r22, r18
    6a56:	73 0b       	sbc	r23, r19
    6a58:	84 0b       	sbc	r24, r20
    6a5a:	ba f0       	brmi	.+46     	; 0x6a8a <__addsf3x+0x98>
    6a5c:	91 50       	subi	r25, 0x01	; 1
    6a5e:	a1 f0       	breq	.+40     	; 0x6a88 <__addsf3x+0x96>
    6a60:	ff 0f       	add	r31, r31
    6a62:	bb 1f       	adc	r27, r27
    6a64:	66 1f       	adc	r22, r22
    6a66:	77 1f       	adc	r23, r23
    6a68:	88 1f       	adc	r24, r24
    6a6a:	c2 f7       	brpl	.-16     	; 0x6a5c <__addsf3x+0x6a>
    6a6c:	0e c0       	rjmp	.+28     	; 0x6a8a <__addsf3x+0x98>
    6a6e:	ba 0f       	add	r27, r26
    6a70:	62 1f       	adc	r22, r18
    6a72:	73 1f       	adc	r23, r19
    6a74:	84 1f       	adc	r24, r20
    6a76:	48 f4       	brcc	.+18     	; 0x6a8a <__addsf3x+0x98>
    6a78:	87 95       	ror	r24
    6a7a:	77 95       	ror	r23
    6a7c:	67 95       	ror	r22
    6a7e:	b7 95       	ror	r27
    6a80:	f7 95       	ror	r31
    6a82:	9e 3f       	cpi	r25, 0xFE	; 254
    6a84:	08 f0       	brcs	.+2      	; 0x6a88 <__addsf3x+0x96>
    6a86:	b3 cf       	rjmp	.-154    	; 0x69ee <__addsf3+0x1e>
    6a88:	93 95       	inc	r25
    6a8a:	88 0f       	add	r24, r24
    6a8c:	08 f0       	brcs	.+2      	; 0x6a90 <__addsf3x+0x9e>
    6a8e:	99 27       	eor	r25, r25
    6a90:	ee 0f       	add	r30, r30
    6a92:	97 95       	ror	r25
    6a94:	87 95       	ror	r24
    6a96:	08 95       	ret

00006a98 <__cmpsf2>:
    6a98:	d9 d0       	rcall	.+434    	; 0x6c4c <__fp_cmp>
    6a9a:	08 f4       	brcc	.+2      	; 0x6a9e <__cmpsf2+0x6>
    6a9c:	81 e0       	ldi	r24, 0x01	; 1
    6a9e:	08 95       	ret

00006aa0 <__divsf3>:
    6aa0:	0c d0       	rcall	.+24     	; 0x6aba <__divsf3x>
    6aa2:	0f c1       	rjmp	.+542    	; 0x6cc2 <__fp_round>
    6aa4:	07 d1       	rcall	.+526    	; 0x6cb4 <__fp_pscB>
    6aa6:	40 f0       	brcs	.+16     	; 0x6ab8 <__divsf3+0x18>
    6aa8:	fe d0       	rcall	.+508    	; 0x6ca6 <__fp_pscA>
    6aaa:	30 f0       	brcs	.+12     	; 0x6ab8 <__divsf3+0x18>
    6aac:	21 f4       	brne	.+8      	; 0x6ab6 <__divsf3+0x16>
    6aae:	5f 3f       	cpi	r21, 0xFF	; 255
    6ab0:	19 f0       	breq	.+6      	; 0x6ab8 <__divsf3+0x18>
    6ab2:	f0 c0       	rjmp	.+480    	; 0x6c94 <__fp_inf>
    6ab4:	51 11       	cpse	r21, r1
    6ab6:	39 c1       	rjmp	.+626    	; 0x6d2a <__fp_szero>
    6ab8:	f3 c0       	rjmp	.+486    	; 0x6ca0 <__fp_nan>

00006aba <__divsf3x>:
    6aba:	14 d1       	rcall	.+552    	; 0x6ce4 <__fp_split3>
    6abc:	98 f3       	brcs	.-26     	; 0x6aa4 <__divsf3+0x4>

00006abe <__divsf3_pse>:
    6abe:	99 23       	and	r25, r25
    6ac0:	c9 f3       	breq	.-14     	; 0x6ab4 <__divsf3+0x14>
    6ac2:	55 23       	and	r21, r21
    6ac4:	b1 f3       	breq	.-20     	; 0x6ab2 <__divsf3+0x12>
    6ac6:	95 1b       	sub	r25, r21
    6ac8:	55 0b       	sbc	r21, r21
    6aca:	bb 27       	eor	r27, r27
    6acc:	aa 27       	eor	r26, r26
    6ace:	62 17       	cp	r22, r18
    6ad0:	73 07       	cpc	r23, r19
    6ad2:	84 07       	cpc	r24, r20
    6ad4:	38 f0       	brcs	.+14     	; 0x6ae4 <__divsf3_pse+0x26>
    6ad6:	9f 5f       	subi	r25, 0xFF	; 255
    6ad8:	5f 4f       	sbci	r21, 0xFF	; 255
    6ada:	22 0f       	add	r18, r18
    6adc:	33 1f       	adc	r19, r19
    6ade:	44 1f       	adc	r20, r20
    6ae0:	aa 1f       	adc	r26, r26
    6ae2:	a9 f3       	breq	.-22     	; 0x6ace <__divsf3_pse+0x10>
    6ae4:	33 d0       	rcall	.+102    	; 0x6b4c <__divsf3_pse+0x8e>
    6ae6:	0e 2e       	mov	r0, r30
    6ae8:	3a f0       	brmi	.+14     	; 0x6af8 <__divsf3_pse+0x3a>
    6aea:	e0 e8       	ldi	r30, 0x80	; 128
    6aec:	30 d0       	rcall	.+96     	; 0x6b4e <__divsf3_pse+0x90>
    6aee:	91 50       	subi	r25, 0x01	; 1
    6af0:	50 40       	sbci	r21, 0x00	; 0
    6af2:	e6 95       	lsr	r30
    6af4:	00 1c       	adc	r0, r0
    6af6:	ca f7       	brpl	.-14     	; 0x6aea <__divsf3_pse+0x2c>
    6af8:	29 d0       	rcall	.+82     	; 0x6b4c <__divsf3_pse+0x8e>
    6afa:	fe 2f       	mov	r31, r30
    6afc:	27 d0       	rcall	.+78     	; 0x6b4c <__divsf3_pse+0x8e>
    6afe:	66 0f       	add	r22, r22
    6b00:	77 1f       	adc	r23, r23
    6b02:	88 1f       	adc	r24, r24
    6b04:	bb 1f       	adc	r27, r27
    6b06:	26 17       	cp	r18, r22
    6b08:	37 07       	cpc	r19, r23
    6b0a:	48 07       	cpc	r20, r24
    6b0c:	ab 07       	cpc	r26, r27
    6b0e:	b0 e8       	ldi	r27, 0x80	; 128
    6b10:	09 f0       	breq	.+2      	; 0x6b14 <__divsf3_pse+0x56>
    6b12:	bb 0b       	sbc	r27, r27
    6b14:	80 2d       	mov	r24, r0
    6b16:	bf 01       	movw	r22, r30
    6b18:	ff 27       	eor	r31, r31
    6b1a:	93 58       	subi	r25, 0x83	; 131
    6b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    6b1e:	2a f0       	brmi	.+10     	; 0x6b2a <__divsf3_pse+0x6c>
    6b20:	9e 3f       	cpi	r25, 0xFE	; 254
    6b22:	51 05       	cpc	r21, r1
    6b24:	68 f0       	brcs	.+26     	; 0x6b40 <__divsf3_pse+0x82>
    6b26:	b6 c0       	rjmp	.+364    	; 0x6c94 <__fp_inf>
    6b28:	00 c1       	rjmp	.+512    	; 0x6d2a <__fp_szero>
    6b2a:	5f 3f       	cpi	r21, 0xFF	; 255
    6b2c:	ec f3       	brlt	.-6      	; 0x6b28 <__divsf3_pse+0x6a>
    6b2e:	98 3e       	cpi	r25, 0xE8	; 232
    6b30:	dc f3       	brlt	.-10     	; 0x6b28 <__divsf3_pse+0x6a>
    6b32:	86 95       	lsr	r24
    6b34:	77 95       	ror	r23
    6b36:	67 95       	ror	r22
    6b38:	b7 95       	ror	r27
    6b3a:	f7 95       	ror	r31
    6b3c:	9f 5f       	subi	r25, 0xFF	; 255
    6b3e:	c9 f7       	brne	.-14     	; 0x6b32 <__divsf3_pse+0x74>
    6b40:	88 0f       	add	r24, r24
    6b42:	91 1d       	adc	r25, r1
    6b44:	96 95       	lsr	r25
    6b46:	87 95       	ror	r24
    6b48:	97 f9       	bld	r25, 7
    6b4a:	08 95       	ret
    6b4c:	e1 e0       	ldi	r30, 0x01	; 1
    6b4e:	66 0f       	add	r22, r22
    6b50:	77 1f       	adc	r23, r23
    6b52:	88 1f       	adc	r24, r24
    6b54:	bb 1f       	adc	r27, r27
    6b56:	62 17       	cp	r22, r18
    6b58:	73 07       	cpc	r23, r19
    6b5a:	84 07       	cpc	r24, r20
    6b5c:	ba 07       	cpc	r27, r26
    6b5e:	20 f0       	brcs	.+8      	; 0x6b68 <__divsf3_pse+0xaa>
    6b60:	62 1b       	sub	r22, r18
    6b62:	73 0b       	sbc	r23, r19
    6b64:	84 0b       	sbc	r24, r20
    6b66:	ba 0b       	sbc	r27, r26
    6b68:	ee 1f       	adc	r30, r30
    6b6a:	88 f7       	brcc	.-30     	; 0x6b4e <__divsf3_pse+0x90>
    6b6c:	e0 95       	com	r30
    6b6e:	08 95       	ret

00006b70 <__fixsfsi>:
    6b70:	04 d0       	rcall	.+8      	; 0x6b7a <__fixunssfsi>
    6b72:	68 94       	set
    6b74:	b1 11       	cpse	r27, r1
    6b76:	d9 c0       	rjmp	.+434    	; 0x6d2a <__fp_szero>
    6b78:	08 95       	ret

00006b7a <__fixunssfsi>:
    6b7a:	bc d0       	rcall	.+376    	; 0x6cf4 <__fp_splitA>
    6b7c:	88 f0       	brcs	.+34     	; 0x6ba0 <__fixunssfsi+0x26>
    6b7e:	9f 57       	subi	r25, 0x7F	; 127
    6b80:	90 f0       	brcs	.+36     	; 0x6ba6 <__fixunssfsi+0x2c>
    6b82:	b9 2f       	mov	r27, r25
    6b84:	99 27       	eor	r25, r25
    6b86:	b7 51       	subi	r27, 0x17	; 23
    6b88:	a0 f0       	brcs	.+40     	; 0x6bb2 <__fixunssfsi+0x38>
    6b8a:	d1 f0       	breq	.+52     	; 0x6bc0 <__fixunssfsi+0x46>
    6b8c:	66 0f       	add	r22, r22
    6b8e:	77 1f       	adc	r23, r23
    6b90:	88 1f       	adc	r24, r24
    6b92:	99 1f       	adc	r25, r25
    6b94:	1a f0       	brmi	.+6      	; 0x6b9c <__fixunssfsi+0x22>
    6b96:	ba 95       	dec	r27
    6b98:	c9 f7       	brne	.-14     	; 0x6b8c <__fixunssfsi+0x12>
    6b9a:	12 c0       	rjmp	.+36     	; 0x6bc0 <__fixunssfsi+0x46>
    6b9c:	b1 30       	cpi	r27, 0x01	; 1
    6b9e:	81 f0       	breq	.+32     	; 0x6bc0 <__fixunssfsi+0x46>
    6ba0:	c3 d0       	rcall	.+390    	; 0x6d28 <__fp_zero>
    6ba2:	b1 e0       	ldi	r27, 0x01	; 1
    6ba4:	08 95       	ret
    6ba6:	c0 c0       	rjmp	.+384    	; 0x6d28 <__fp_zero>
    6ba8:	67 2f       	mov	r22, r23
    6baa:	78 2f       	mov	r23, r24
    6bac:	88 27       	eor	r24, r24
    6bae:	b8 5f       	subi	r27, 0xF8	; 248
    6bb0:	39 f0       	breq	.+14     	; 0x6bc0 <__fixunssfsi+0x46>
    6bb2:	b9 3f       	cpi	r27, 0xF9	; 249
    6bb4:	cc f3       	brlt	.-14     	; 0x6ba8 <__fixunssfsi+0x2e>
    6bb6:	86 95       	lsr	r24
    6bb8:	77 95       	ror	r23
    6bba:	67 95       	ror	r22
    6bbc:	b3 95       	inc	r27
    6bbe:	d9 f7       	brne	.-10     	; 0x6bb6 <__fixunssfsi+0x3c>
    6bc0:	3e f4       	brtc	.+14     	; 0x6bd0 <__fixunssfsi+0x56>
    6bc2:	90 95       	com	r25
    6bc4:	80 95       	com	r24
    6bc6:	70 95       	com	r23
    6bc8:	61 95       	neg	r22
    6bca:	7f 4f       	sbci	r23, 0xFF	; 255
    6bcc:	8f 4f       	sbci	r24, 0xFF	; 255
    6bce:	9f 4f       	sbci	r25, 0xFF	; 255
    6bd0:	08 95       	ret

00006bd2 <__floatunsisf>:
    6bd2:	e8 94       	clt
    6bd4:	09 c0       	rjmp	.+18     	; 0x6be8 <__floatsisf+0x12>

00006bd6 <__floatsisf>:
    6bd6:	97 fb       	bst	r25, 7
    6bd8:	3e f4       	brtc	.+14     	; 0x6be8 <__floatsisf+0x12>
    6bda:	90 95       	com	r25
    6bdc:	80 95       	com	r24
    6bde:	70 95       	com	r23
    6be0:	61 95       	neg	r22
    6be2:	7f 4f       	sbci	r23, 0xFF	; 255
    6be4:	8f 4f       	sbci	r24, 0xFF	; 255
    6be6:	9f 4f       	sbci	r25, 0xFF	; 255
    6be8:	99 23       	and	r25, r25
    6bea:	a9 f0       	breq	.+42     	; 0x6c16 <__floatsisf+0x40>
    6bec:	f9 2f       	mov	r31, r25
    6bee:	96 e9       	ldi	r25, 0x96	; 150
    6bf0:	bb 27       	eor	r27, r27
    6bf2:	93 95       	inc	r25
    6bf4:	f6 95       	lsr	r31
    6bf6:	87 95       	ror	r24
    6bf8:	77 95       	ror	r23
    6bfa:	67 95       	ror	r22
    6bfc:	b7 95       	ror	r27
    6bfe:	f1 11       	cpse	r31, r1
    6c00:	f8 cf       	rjmp	.-16     	; 0x6bf2 <__floatsisf+0x1c>
    6c02:	fa f4       	brpl	.+62     	; 0x6c42 <__floatsisf+0x6c>
    6c04:	bb 0f       	add	r27, r27
    6c06:	11 f4       	brne	.+4      	; 0x6c0c <__floatsisf+0x36>
    6c08:	60 ff       	sbrs	r22, 0
    6c0a:	1b c0       	rjmp	.+54     	; 0x6c42 <__floatsisf+0x6c>
    6c0c:	6f 5f       	subi	r22, 0xFF	; 255
    6c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    6c10:	8f 4f       	sbci	r24, 0xFF	; 255
    6c12:	9f 4f       	sbci	r25, 0xFF	; 255
    6c14:	16 c0       	rjmp	.+44     	; 0x6c42 <__floatsisf+0x6c>
    6c16:	88 23       	and	r24, r24
    6c18:	11 f0       	breq	.+4      	; 0x6c1e <__floatsisf+0x48>
    6c1a:	96 e9       	ldi	r25, 0x96	; 150
    6c1c:	11 c0       	rjmp	.+34     	; 0x6c40 <__floatsisf+0x6a>
    6c1e:	77 23       	and	r23, r23
    6c20:	21 f0       	breq	.+8      	; 0x6c2a <__floatsisf+0x54>
    6c22:	9e e8       	ldi	r25, 0x8E	; 142
    6c24:	87 2f       	mov	r24, r23
    6c26:	76 2f       	mov	r23, r22
    6c28:	05 c0       	rjmp	.+10     	; 0x6c34 <__floatsisf+0x5e>
    6c2a:	66 23       	and	r22, r22
    6c2c:	71 f0       	breq	.+28     	; 0x6c4a <__floatsisf+0x74>
    6c2e:	96 e8       	ldi	r25, 0x86	; 134
    6c30:	86 2f       	mov	r24, r22
    6c32:	70 e0       	ldi	r23, 0x00	; 0
    6c34:	60 e0       	ldi	r22, 0x00	; 0
    6c36:	2a f0       	brmi	.+10     	; 0x6c42 <__floatsisf+0x6c>
    6c38:	9a 95       	dec	r25
    6c3a:	66 0f       	add	r22, r22
    6c3c:	77 1f       	adc	r23, r23
    6c3e:	88 1f       	adc	r24, r24
    6c40:	da f7       	brpl	.-10     	; 0x6c38 <__floatsisf+0x62>
    6c42:	88 0f       	add	r24, r24
    6c44:	96 95       	lsr	r25
    6c46:	87 95       	ror	r24
    6c48:	97 f9       	bld	r25, 7
    6c4a:	08 95       	ret

00006c4c <__fp_cmp>:
    6c4c:	99 0f       	add	r25, r25
    6c4e:	00 08       	sbc	r0, r0
    6c50:	55 0f       	add	r21, r21
    6c52:	aa 0b       	sbc	r26, r26
    6c54:	e0 e8       	ldi	r30, 0x80	; 128
    6c56:	fe ef       	ldi	r31, 0xFE	; 254
    6c58:	16 16       	cp	r1, r22
    6c5a:	17 06       	cpc	r1, r23
    6c5c:	e8 07       	cpc	r30, r24
    6c5e:	f9 07       	cpc	r31, r25
    6c60:	c0 f0       	brcs	.+48     	; 0x6c92 <__fp_cmp+0x46>
    6c62:	12 16       	cp	r1, r18
    6c64:	13 06       	cpc	r1, r19
    6c66:	e4 07       	cpc	r30, r20
    6c68:	f5 07       	cpc	r31, r21
    6c6a:	98 f0       	brcs	.+38     	; 0x6c92 <__fp_cmp+0x46>
    6c6c:	62 1b       	sub	r22, r18
    6c6e:	73 0b       	sbc	r23, r19
    6c70:	84 0b       	sbc	r24, r20
    6c72:	95 0b       	sbc	r25, r21
    6c74:	39 f4       	brne	.+14     	; 0x6c84 <__fp_cmp+0x38>
    6c76:	0a 26       	eor	r0, r26
    6c78:	61 f0       	breq	.+24     	; 0x6c92 <__fp_cmp+0x46>
    6c7a:	23 2b       	or	r18, r19
    6c7c:	24 2b       	or	r18, r20
    6c7e:	25 2b       	or	r18, r21
    6c80:	21 f4       	brne	.+8      	; 0x6c8a <__fp_cmp+0x3e>
    6c82:	08 95       	ret
    6c84:	0a 26       	eor	r0, r26
    6c86:	09 f4       	brne	.+2      	; 0x6c8a <__fp_cmp+0x3e>
    6c88:	a1 40       	sbci	r26, 0x01	; 1
    6c8a:	a6 95       	lsr	r26
    6c8c:	8f ef       	ldi	r24, 0xFF	; 255
    6c8e:	81 1d       	adc	r24, r1
    6c90:	81 1d       	adc	r24, r1
    6c92:	08 95       	ret

00006c94 <__fp_inf>:
    6c94:	97 f9       	bld	r25, 7
    6c96:	9f 67       	ori	r25, 0x7F	; 127
    6c98:	80 e8       	ldi	r24, 0x80	; 128
    6c9a:	70 e0       	ldi	r23, 0x00	; 0
    6c9c:	60 e0       	ldi	r22, 0x00	; 0
    6c9e:	08 95       	ret

00006ca0 <__fp_nan>:
    6ca0:	9f ef       	ldi	r25, 0xFF	; 255
    6ca2:	80 ec       	ldi	r24, 0xC0	; 192
    6ca4:	08 95       	ret

00006ca6 <__fp_pscA>:
    6ca6:	00 24       	eor	r0, r0
    6ca8:	0a 94       	dec	r0
    6caa:	16 16       	cp	r1, r22
    6cac:	17 06       	cpc	r1, r23
    6cae:	18 06       	cpc	r1, r24
    6cb0:	09 06       	cpc	r0, r25
    6cb2:	08 95       	ret

00006cb4 <__fp_pscB>:
    6cb4:	00 24       	eor	r0, r0
    6cb6:	0a 94       	dec	r0
    6cb8:	12 16       	cp	r1, r18
    6cba:	13 06       	cpc	r1, r19
    6cbc:	14 06       	cpc	r1, r20
    6cbe:	05 06       	cpc	r0, r21
    6cc0:	08 95       	ret

00006cc2 <__fp_round>:
    6cc2:	09 2e       	mov	r0, r25
    6cc4:	03 94       	inc	r0
    6cc6:	00 0c       	add	r0, r0
    6cc8:	11 f4       	brne	.+4      	; 0x6cce <__fp_round+0xc>
    6cca:	88 23       	and	r24, r24
    6ccc:	52 f0       	brmi	.+20     	; 0x6ce2 <__fp_round+0x20>
    6cce:	bb 0f       	add	r27, r27
    6cd0:	40 f4       	brcc	.+16     	; 0x6ce2 <__fp_round+0x20>
    6cd2:	bf 2b       	or	r27, r31
    6cd4:	11 f4       	brne	.+4      	; 0x6cda <__fp_round+0x18>
    6cd6:	60 ff       	sbrs	r22, 0
    6cd8:	04 c0       	rjmp	.+8      	; 0x6ce2 <__fp_round+0x20>
    6cda:	6f 5f       	subi	r22, 0xFF	; 255
    6cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    6cde:	8f 4f       	sbci	r24, 0xFF	; 255
    6ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    6ce2:	08 95       	ret

00006ce4 <__fp_split3>:
    6ce4:	57 fd       	sbrc	r21, 7
    6ce6:	90 58       	subi	r25, 0x80	; 128
    6ce8:	44 0f       	add	r20, r20
    6cea:	55 1f       	adc	r21, r21
    6cec:	59 f0       	breq	.+22     	; 0x6d04 <__fp_splitA+0x10>
    6cee:	5f 3f       	cpi	r21, 0xFF	; 255
    6cf0:	71 f0       	breq	.+28     	; 0x6d0e <__fp_splitA+0x1a>
    6cf2:	47 95       	ror	r20

00006cf4 <__fp_splitA>:
    6cf4:	88 0f       	add	r24, r24
    6cf6:	97 fb       	bst	r25, 7
    6cf8:	99 1f       	adc	r25, r25
    6cfa:	61 f0       	breq	.+24     	; 0x6d14 <__fp_splitA+0x20>
    6cfc:	9f 3f       	cpi	r25, 0xFF	; 255
    6cfe:	79 f0       	breq	.+30     	; 0x6d1e <__fp_splitA+0x2a>
    6d00:	87 95       	ror	r24
    6d02:	08 95       	ret
    6d04:	12 16       	cp	r1, r18
    6d06:	13 06       	cpc	r1, r19
    6d08:	14 06       	cpc	r1, r20
    6d0a:	55 1f       	adc	r21, r21
    6d0c:	f2 cf       	rjmp	.-28     	; 0x6cf2 <__fp_split3+0xe>
    6d0e:	46 95       	lsr	r20
    6d10:	f1 df       	rcall	.-30     	; 0x6cf4 <__fp_splitA>
    6d12:	08 c0       	rjmp	.+16     	; 0x6d24 <__fp_splitA+0x30>
    6d14:	16 16       	cp	r1, r22
    6d16:	17 06       	cpc	r1, r23
    6d18:	18 06       	cpc	r1, r24
    6d1a:	99 1f       	adc	r25, r25
    6d1c:	f1 cf       	rjmp	.-30     	; 0x6d00 <__fp_splitA+0xc>
    6d1e:	86 95       	lsr	r24
    6d20:	71 05       	cpc	r23, r1
    6d22:	61 05       	cpc	r22, r1
    6d24:	08 94       	sec
    6d26:	08 95       	ret

00006d28 <__fp_zero>:
    6d28:	e8 94       	clt

00006d2a <__fp_szero>:
    6d2a:	bb 27       	eor	r27, r27
    6d2c:	66 27       	eor	r22, r22
    6d2e:	77 27       	eor	r23, r23
    6d30:	cb 01       	movw	r24, r22
    6d32:	97 f9       	bld	r25, 7
    6d34:	08 95       	ret

00006d36 <__mulsf3>:
    6d36:	0b d0       	rcall	.+22     	; 0x6d4e <__mulsf3x>
    6d38:	c4 cf       	rjmp	.-120    	; 0x6cc2 <__fp_round>
    6d3a:	b5 df       	rcall	.-150    	; 0x6ca6 <__fp_pscA>
    6d3c:	28 f0       	brcs	.+10     	; 0x6d48 <__mulsf3+0x12>
    6d3e:	ba df       	rcall	.-140    	; 0x6cb4 <__fp_pscB>
    6d40:	18 f0       	brcs	.+6      	; 0x6d48 <__mulsf3+0x12>
    6d42:	95 23       	and	r25, r21
    6d44:	09 f0       	breq	.+2      	; 0x6d48 <__mulsf3+0x12>
    6d46:	a6 cf       	rjmp	.-180    	; 0x6c94 <__fp_inf>
    6d48:	ab cf       	rjmp	.-170    	; 0x6ca0 <__fp_nan>
    6d4a:	11 24       	eor	r1, r1
    6d4c:	ee cf       	rjmp	.-36     	; 0x6d2a <__fp_szero>

00006d4e <__mulsf3x>:
    6d4e:	ca df       	rcall	.-108    	; 0x6ce4 <__fp_split3>
    6d50:	a0 f3       	brcs	.-24     	; 0x6d3a <__mulsf3+0x4>

00006d52 <__mulsf3_pse>:
    6d52:	95 9f       	mul	r25, r21
    6d54:	d1 f3       	breq	.-12     	; 0x6d4a <__mulsf3+0x14>
    6d56:	95 0f       	add	r25, r21
    6d58:	50 e0       	ldi	r21, 0x00	; 0
    6d5a:	55 1f       	adc	r21, r21
    6d5c:	62 9f       	mul	r22, r18
    6d5e:	f0 01       	movw	r30, r0
    6d60:	72 9f       	mul	r23, r18
    6d62:	bb 27       	eor	r27, r27
    6d64:	f0 0d       	add	r31, r0
    6d66:	b1 1d       	adc	r27, r1
    6d68:	63 9f       	mul	r22, r19
    6d6a:	aa 27       	eor	r26, r26
    6d6c:	f0 0d       	add	r31, r0
    6d6e:	b1 1d       	adc	r27, r1
    6d70:	aa 1f       	adc	r26, r26
    6d72:	64 9f       	mul	r22, r20
    6d74:	66 27       	eor	r22, r22
    6d76:	b0 0d       	add	r27, r0
    6d78:	a1 1d       	adc	r26, r1
    6d7a:	66 1f       	adc	r22, r22
    6d7c:	82 9f       	mul	r24, r18
    6d7e:	22 27       	eor	r18, r18
    6d80:	b0 0d       	add	r27, r0
    6d82:	a1 1d       	adc	r26, r1
    6d84:	62 1f       	adc	r22, r18
    6d86:	73 9f       	mul	r23, r19
    6d88:	b0 0d       	add	r27, r0
    6d8a:	a1 1d       	adc	r26, r1
    6d8c:	62 1f       	adc	r22, r18
    6d8e:	83 9f       	mul	r24, r19
    6d90:	a0 0d       	add	r26, r0
    6d92:	61 1d       	adc	r22, r1
    6d94:	22 1f       	adc	r18, r18
    6d96:	74 9f       	mul	r23, r20
    6d98:	33 27       	eor	r19, r19
    6d9a:	a0 0d       	add	r26, r0
    6d9c:	61 1d       	adc	r22, r1
    6d9e:	23 1f       	adc	r18, r19
    6da0:	84 9f       	mul	r24, r20
    6da2:	60 0d       	add	r22, r0
    6da4:	21 1d       	adc	r18, r1
    6da6:	82 2f       	mov	r24, r18
    6da8:	76 2f       	mov	r23, r22
    6daa:	6a 2f       	mov	r22, r26
    6dac:	11 24       	eor	r1, r1
    6dae:	9f 57       	subi	r25, 0x7F	; 127
    6db0:	50 40       	sbci	r21, 0x00	; 0
    6db2:	8a f0       	brmi	.+34     	; 0x6dd6 <__mulsf3_pse+0x84>
    6db4:	e1 f0       	breq	.+56     	; 0x6dee <__mulsf3_pse+0x9c>
    6db6:	88 23       	and	r24, r24
    6db8:	4a f0       	brmi	.+18     	; 0x6dcc <__mulsf3_pse+0x7a>
    6dba:	ee 0f       	add	r30, r30
    6dbc:	ff 1f       	adc	r31, r31
    6dbe:	bb 1f       	adc	r27, r27
    6dc0:	66 1f       	adc	r22, r22
    6dc2:	77 1f       	adc	r23, r23
    6dc4:	88 1f       	adc	r24, r24
    6dc6:	91 50       	subi	r25, 0x01	; 1
    6dc8:	50 40       	sbci	r21, 0x00	; 0
    6dca:	a9 f7       	brne	.-22     	; 0x6db6 <__mulsf3_pse+0x64>
    6dcc:	9e 3f       	cpi	r25, 0xFE	; 254
    6dce:	51 05       	cpc	r21, r1
    6dd0:	70 f0       	brcs	.+28     	; 0x6dee <__mulsf3_pse+0x9c>
    6dd2:	60 cf       	rjmp	.-320    	; 0x6c94 <__fp_inf>
    6dd4:	aa cf       	rjmp	.-172    	; 0x6d2a <__fp_szero>
    6dd6:	5f 3f       	cpi	r21, 0xFF	; 255
    6dd8:	ec f3       	brlt	.-6      	; 0x6dd4 <__mulsf3_pse+0x82>
    6dda:	98 3e       	cpi	r25, 0xE8	; 232
    6ddc:	dc f3       	brlt	.-10     	; 0x6dd4 <__mulsf3_pse+0x82>
    6dde:	86 95       	lsr	r24
    6de0:	77 95       	ror	r23
    6de2:	67 95       	ror	r22
    6de4:	b7 95       	ror	r27
    6de6:	f7 95       	ror	r31
    6de8:	e7 95       	ror	r30
    6dea:	9f 5f       	subi	r25, 0xFF	; 255
    6dec:	c1 f7       	brne	.-16     	; 0x6dde <__mulsf3_pse+0x8c>
    6dee:	fe 2b       	or	r31, r30
    6df0:	88 0f       	add	r24, r24
    6df2:	91 1d       	adc	r25, r1
    6df4:	96 95       	lsr	r25
    6df6:	87 95       	ror	r24
    6df8:	97 f9       	bld	r25, 7
    6dfa:	08 95       	ret

00006dfc <__mulsi3>:
    6dfc:	62 9f       	mul	r22, r18
    6dfe:	d0 01       	movw	r26, r0
    6e00:	73 9f       	mul	r23, r19
    6e02:	f0 01       	movw	r30, r0
    6e04:	82 9f       	mul	r24, r18
    6e06:	e0 0d       	add	r30, r0
    6e08:	f1 1d       	adc	r31, r1
    6e0a:	64 9f       	mul	r22, r20
    6e0c:	e0 0d       	add	r30, r0
    6e0e:	f1 1d       	adc	r31, r1
    6e10:	92 9f       	mul	r25, r18
    6e12:	f0 0d       	add	r31, r0
    6e14:	83 9f       	mul	r24, r19
    6e16:	f0 0d       	add	r31, r0
    6e18:	74 9f       	mul	r23, r20
    6e1a:	f0 0d       	add	r31, r0
    6e1c:	65 9f       	mul	r22, r21
    6e1e:	f0 0d       	add	r31, r0
    6e20:	99 27       	eor	r25, r25
    6e22:	72 9f       	mul	r23, r18
    6e24:	b0 0d       	add	r27, r0
    6e26:	e1 1d       	adc	r30, r1
    6e28:	f9 1f       	adc	r31, r25
    6e2a:	63 9f       	mul	r22, r19
    6e2c:	b0 0d       	add	r27, r0
    6e2e:	e1 1d       	adc	r30, r1
    6e30:	f9 1f       	adc	r31, r25
    6e32:	bd 01       	movw	r22, r26
    6e34:	cf 01       	movw	r24, r30
    6e36:	11 24       	eor	r1, r1
    6e38:	08 95       	ret

00006e3a <__udivmodsi4>:
    6e3a:	a1 e2       	ldi	r26, 0x21	; 33
    6e3c:	1a 2e       	mov	r1, r26
    6e3e:	aa 1b       	sub	r26, r26
    6e40:	bb 1b       	sub	r27, r27
    6e42:	fd 01       	movw	r30, r26
    6e44:	0d c0       	rjmp	.+26     	; 0x6e60 <__udivmodsi4_ep>

00006e46 <__udivmodsi4_loop>:
    6e46:	aa 1f       	adc	r26, r26
    6e48:	bb 1f       	adc	r27, r27
    6e4a:	ee 1f       	adc	r30, r30
    6e4c:	ff 1f       	adc	r31, r31
    6e4e:	a2 17       	cp	r26, r18
    6e50:	b3 07       	cpc	r27, r19
    6e52:	e4 07       	cpc	r30, r20
    6e54:	f5 07       	cpc	r31, r21
    6e56:	20 f0       	brcs	.+8      	; 0x6e60 <__udivmodsi4_ep>
    6e58:	a2 1b       	sub	r26, r18
    6e5a:	b3 0b       	sbc	r27, r19
    6e5c:	e4 0b       	sbc	r30, r20
    6e5e:	f5 0b       	sbc	r31, r21

00006e60 <__udivmodsi4_ep>:
    6e60:	66 1f       	adc	r22, r22
    6e62:	77 1f       	adc	r23, r23
    6e64:	88 1f       	adc	r24, r24
    6e66:	99 1f       	adc	r25, r25
    6e68:	1a 94       	dec	r1
    6e6a:	69 f7       	brne	.-38     	; 0x6e46 <__udivmodsi4_loop>
    6e6c:	60 95       	com	r22
    6e6e:	70 95       	com	r23
    6e70:	80 95       	com	r24
    6e72:	90 95       	com	r25
    6e74:	9b 01       	movw	r18, r22
    6e76:	ac 01       	movw	r20, r24
    6e78:	bd 01       	movw	r22, r26
    6e7a:	cf 01       	movw	r24, r30
    6e7c:	08 95       	ret

00006e7e <__divmodsi4>:
    6e7e:	97 fb       	bst	r25, 7
    6e80:	09 2e       	mov	r0, r25
    6e82:	05 26       	eor	r0, r21
    6e84:	0e d0       	rcall	.+28     	; 0x6ea2 <__divmodsi4_neg1>
    6e86:	57 fd       	sbrc	r21, 7
    6e88:	04 d0       	rcall	.+8      	; 0x6e92 <__divmodsi4_neg2>
    6e8a:	d7 df       	rcall	.-82     	; 0x6e3a <__udivmodsi4>
    6e8c:	0a d0       	rcall	.+20     	; 0x6ea2 <__divmodsi4_neg1>
    6e8e:	00 1c       	adc	r0, r0
    6e90:	38 f4       	brcc	.+14     	; 0x6ea0 <__divmodsi4_exit>

00006e92 <__divmodsi4_neg2>:
    6e92:	50 95       	com	r21
    6e94:	40 95       	com	r20
    6e96:	30 95       	com	r19
    6e98:	21 95       	neg	r18
    6e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e9c:	4f 4f       	sbci	r20, 0xFF	; 255
    6e9e:	5f 4f       	sbci	r21, 0xFF	; 255

00006ea0 <__divmodsi4_exit>:
    6ea0:	08 95       	ret

00006ea2 <__divmodsi4_neg1>:
    6ea2:	f6 f7       	brtc	.-4      	; 0x6ea0 <__divmodsi4_exit>
    6ea4:	90 95       	com	r25
    6ea6:	80 95       	com	r24
    6ea8:	70 95       	com	r23
    6eaa:	61 95       	neg	r22
    6eac:	7f 4f       	sbci	r23, 0xFF	; 255
    6eae:	8f 4f       	sbci	r24, 0xFF	; 255
    6eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    6eb2:	08 95       	ret

00006eb4 <__tablejump_elpm__>:
    6eb4:	07 90       	elpm	r0, Z+
    6eb6:	f6 91       	elpm	r31, Z
    6eb8:	e0 2d       	mov	r30, r0
    6eba:	19 94       	eijmp

00006ebc <malloc>:
    6ebc:	cf 93       	push	r28
    6ebe:	df 93       	push	r29
    6ec0:	ac 01       	movw	r20, r24
    6ec2:	82 30       	cpi	r24, 0x02	; 2
    6ec4:	91 05       	cpc	r25, r1
    6ec6:	10 f4       	brcc	.+4      	; 0x6ecc <malloc+0x10>
    6ec8:	42 e0       	ldi	r20, 0x02	; 2
    6eca:	50 e0       	ldi	r21, 0x00	; 0
    6ecc:	e0 91 e3 07 	lds	r30, 0x07E3
    6ed0:	f0 91 e4 07 	lds	r31, 0x07E4
    6ed4:	20 e0       	ldi	r18, 0x00	; 0
    6ed6:	30 e0       	ldi	r19, 0x00	; 0
    6ed8:	a0 e0       	ldi	r26, 0x00	; 0
    6eda:	b0 e0       	ldi	r27, 0x00	; 0
    6edc:	24 c0       	rjmp	.+72     	; 0x6f26 <malloc+0x6a>
    6ede:	80 81       	ld	r24, Z
    6ee0:	91 81       	ldd	r25, Z+1	; 0x01
    6ee2:	84 17       	cp	r24, r20
    6ee4:	95 07       	cpc	r25, r21
    6ee6:	d0 f0       	brcs	.+52     	; 0x6f1c <malloc+0x60>
    6ee8:	84 17       	cp	r24, r20
    6eea:	95 07       	cpc	r25, r21
    6eec:	71 f4       	brne	.+28     	; 0x6f0a <malloc+0x4e>
    6eee:	82 81       	ldd	r24, Z+2	; 0x02
    6ef0:	93 81       	ldd	r25, Z+3	; 0x03
    6ef2:	10 97       	sbiw	r26, 0x00	; 0
    6ef4:	29 f0       	breq	.+10     	; 0x6f00 <malloc+0x44>
    6ef6:	13 96       	adiw	r26, 0x03	; 3
    6ef8:	9c 93       	st	X, r25
    6efa:	8e 93       	st	-X, r24
    6efc:	12 97       	sbiw	r26, 0x02	; 2
    6efe:	2c c0       	rjmp	.+88     	; 0x6f58 <malloc+0x9c>
    6f00:	90 93 e4 07 	sts	0x07E4, r25
    6f04:	80 93 e3 07 	sts	0x07E3, r24
    6f08:	27 c0       	rjmp	.+78     	; 0x6f58 <malloc+0x9c>
    6f0a:	21 15       	cp	r18, r1
    6f0c:	31 05       	cpc	r19, r1
    6f0e:	19 f0       	breq	.+6      	; 0x6f16 <malloc+0x5a>
    6f10:	82 17       	cp	r24, r18
    6f12:	93 07       	cpc	r25, r19
    6f14:	18 f4       	brcc	.+6      	; 0x6f1c <malloc+0x60>
    6f16:	9c 01       	movw	r18, r24
    6f18:	bd 01       	movw	r22, r26
    6f1a:	ef 01       	movw	r28, r30
    6f1c:	92 81       	ldd	r25, Z+2	; 0x02
    6f1e:	83 81       	ldd	r24, Z+3	; 0x03
    6f20:	df 01       	movw	r26, r30
    6f22:	e9 2f       	mov	r30, r25
    6f24:	f8 2f       	mov	r31, r24
    6f26:	30 97       	sbiw	r30, 0x00	; 0
    6f28:	d1 f6       	brne	.-76     	; 0x6ede <malloc+0x22>
    6f2a:	21 15       	cp	r18, r1
    6f2c:	31 05       	cpc	r19, r1
    6f2e:	f9 f0       	breq	.+62     	; 0x6f6e <malloc+0xb2>
    6f30:	c9 01       	movw	r24, r18
    6f32:	84 1b       	sub	r24, r20
    6f34:	95 0b       	sbc	r25, r21
    6f36:	84 30       	cpi	r24, 0x04	; 4
    6f38:	91 05       	cpc	r25, r1
    6f3a:	80 f4       	brcc	.+32     	; 0x6f5c <malloc+0xa0>
    6f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    6f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    6f40:	61 15       	cp	r22, r1
    6f42:	71 05       	cpc	r23, r1
    6f44:	21 f0       	breq	.+8      	; 0x6f4e <malloc+0x92>
    6f46:	fb 01       	movw	r30, r22
    6f48:	93 83       	std	Z+3, r25	; 0x03
    6f4a:	82 83       	std	Z+2, r24	; 0x02
    6f4c:	04 c0       	rjmp	.+8      	; 0x6f56 <malloc+0x9a>
    6f4e:	90 93 e4 07 	sts	0x07E4, r25
    6f52:	80 93 e3 07 	sts	0x07E3, r24
    6f56:	fe 01       	movw	r30, r28
    6f58:	32 96       	adiw	r30, 0x02	; 2
    6f5a:	42 c0       	rjmp	.+132    	; 0x6fe0 <malloc+0x124>
    6f5c:	fe 01       	movw	r30, r28
    6f5e:	e8 0f       	add	r30, r24
    6f60:	f9 1f       	adc	r31, r25
    6f62:	41 93       	st	Z+, r20
    6f64:	51 93       	st	Z+, r21
    6f66:	02 97       	sbiw	r24, 0x02	; 2
    6f68:	99 83       	std	Y+1, r25	; 0x01
    6f6a:	88 83       	st	Y, r24
    6f6c:	39 c0       	rjmp	.+114    	; 0x6fe0 <malloc+0x124>
    6f6e:	80 91 e1 07 	lds	r24, 0x07E1
    6f72:	90 91 e2 07 	lds	r25, 0x07E2
    6f76:	00 97       	sbiw	r24, 0x00	; 0
    6f78:	41 f4       	brne	.+16     	; 0x6f8a <malloc+0xce>
    6f7a:	80 91 10 03 	lds	r24, 0x0310
    6f7e:	90 91 11 03 	lds	r25, 0x0311
    6f82:	90 93 e2 07 	sts	0x07E2, r25
    6f86:	80 93 e1 07 	sts	0x07E1, r24
    6f8a:	20 91 0e 03 	lds	r18, 0x030E
    6f8e:	30 91 0f 03 	lds	r19, 0x030F
    6f92:	21 15       	cp	r18, r1
    6f94:	31 05       	cpc	r19, r1
    6f96:	41 f4       	brne	.+16     	; 0x6fa8 <malloc+0xec>
    6f98:	2d b7       	in	r18, 0x3d	; 61
    6f9a:	3e b7       	in	r19, 0x3e	; 62
    6f9c:	80 91 12 03 	lds	r24, 0x0312
    6fa0:	90 91 13 03 	lds	r25, 0x0313
    6fa4:	28 1b       	sub	r18, r24
    6fa6:	39 0b       	sbc	r19, r25
    6fa8:	e0 91 e1 07 	lds	r30, 0x07E1
    6fac:	f0 91 e2 07 	lds	r31, 0x07E2
    6fb0:	e2 17       	cp	r30, r18
    6fb2:	f3 07       	cpc	r31, r19
    6fb4:	98 f4       	brcc	.+38     	; 0x6fdc <malloc+0x120>
    6fb6:	2e 1b       	sub	r18, r30
    6fb8:	3f 0b       	sbc	r19, r31
    6fba:	24 17       	cp	r18, r20
    6fbc:	35 07       	cpc	r19, r21
    6fbe:	70 f0       	brcs	.+28     	; 0x6fdc <malloc+0x120>
    6fc0:	ca 01       	movw	r24, r20
    6fc2:	02 96       	adiw	r24, 0x02	; 2
    6fc4:	28 17       	cp	r18, r24
    6fc6:	39 07       	cpc	r19, r25
    6fc8:	48 f0       	brcs	.+18     	; 0x6fdc <malloc+0x120>
    6fca:	8e 0f       	add	r24, r30
    6fcc:	9f 1f       	adc	r25, r31
    6fce:	90 93 e2 07 	sts	0x07E2, r25
    6fd2:	80 93 e1 07 	sts	0x07E1, r24
    6fd6:	41 93       	st	Z+, r20
    6fd8:	51 93       	st	Z+, r21
    6fda:	02 c0       	rjmp	.+4      	; 0x6fe0 <malloc+0x124>
    6fdc:	e0 e0       	ldi	r30, 0x00	; 0
    6fde:	f0 e0       	ldi	r31, 0x00	; 0
    6fe0:	cf 01       	movw	r24, r30
    6fe2:	df 91       	pop	r29
    6fe4:	cf 91       	pop	r28
    6fe6:	08 95       	ret

00006fe8 <free>:
    6fe8:	0f 93       	push	r16
    6fea:	1f 93       	push	r17
    6fec:	cf 93       	push	r28
    6fee:	df 93       	push	r29
    6ff0:	9c 01       	movw	r18, r24
    6ff2:	00 97       	sbiw	r24, 0x00	; 0
    6ff4:	09 f4       	brne	.+2      	; 0x6ff8 <free+0x10>
    6ff6:	8c c0       	rjmp	.+280    	; 0x7110 <free+0x128>
    6ff8:	dc 01       	movw	r26, r24
    6ffa:	12 97       	sbiw	r26, 0x02	; 2
    6ffc:	13 96       	adiw	r26, 0x03	; 3
    6ffe:	1c 92       	st	X, r1
    7000:	1e 92       	st	-X, r1
    7002:	12 97       	sbiw	r26, 0x02	; 2
    7004:	60 91 e3 07 	lds	r22, 0x07E3
    7008:	70 91 e4 07 	lds	r23, 0x07E4
    700c:	61 15       	cp	r22, r1
    700e:	71 05       	cpc	r23, r1
    7010:	89 f4       	brne	.+34     	; 0x7034 <free+0x4c>
    7012:	8d 91       	ld	r24, X+
    7014:	9c 91       	ld	r25, X
    7016:	11 97       	sbiw	r26, 0x01	; 1
    7018:	82 0f       	add	r24, r18
    701a:	93 1f       	adc	r25, r19
    701c:	20 91 e1 07 	lds	r18, 0x07E1
    7020:	30 91 e2 07 	lds	r19, 0x07E2
    7024:	28 17       	cp	r18, r24
    7026:	39 07       	cpc	r19, r25
    7028:	69 f5       	brne	.+90     	; 0x7084 <free+0x9c>
    702a:	b0 93 e2 07 	sts	0x07E2, r27
    702e:	a0 93 e1 07 	sts	0x07E1, r26
    7032:	6e c0       	rjmp	.+220    	; 0x7110 <free+0x128>
    7034:	fb 01       	movw	r30, r22
    7036:	40 e0       	ldi	r20, 0x00	; 0
    7038:	50 e0       	ldi	r21, 0x00	; 0
    703a:	01 c0       	rjmp	.+2      	; 0x703e <free+0x56>
    703c:	fc 01       	movw	r30, r24
    703e:	ea 17       	cp	r30, r26
    7040:	fb 07       	cpc	r31, r27
    7042:	30 f4       	brcc	.+12     	; 0x7050 <free+0x68>
    7044:	82 81       	ldd	r24, Z+2	; 0x02
    7046:	93 81       	ldd	r25, Z+3	; 0x03
    7048:	af 01       	movw	r20, r30
    704a:	00 97       	sbiw	r24, 0x00	; 0
    704c:	b9 f7       	brne	.-18     	; 0x703c <free+0x54>
    704e:	1f c0       	rjmp	.+62     	; 0x708e <free+0xa6>
    7050:	e9 01       	movw	r28, r18
    7052:	22 97       	sbiw	r28, 0x02	; 2
    7054:	fb 83       	std	Y+3, r31	; 0x03
    7056:	ea 83       	std	Y+2, r30	; 0x02
    7058:	08 81       	ld	r16, Y
    705a:	19 81       	ldd	r17, Y+1	; 0x01
    705c:	c9 01       	movw	r24, r18
    705e:	80 0f       	add	r24, r16
    7060:	91 1f       	adc	r25, r17
    7062:	8e 17       	cp	r24, r30
    7064:	9f 07       	cpc	r25, r31
    7066:	59 f4       	brne	.+22     	; 0x707e <free+0x96>
    7068:	80 81       	ld	r24, Z
    706a:	91 81       	ldd	r25, Z+1	; 0x01
    706c:	80 0f       	add	r24, r16
    706e:	91 1f       	adc	r25, r17
    7070:	02 96       	adiw	r24, 0x02	; 2
    7072:	99 83       	std	Y+1, r25	; 0x01
    7074:	88 83       	st	Y, r24
    7076:	82 81       	ldd	r24, Z+2	; 0x02
    7078:	93 81       	ldd	r25, Z+3	; 0x03
    707a:	9b 83       	std	Y+3, r25	; 0x03
    707c:	8a 83       	std	Y+2, r24	; 0x02
    707e:	41 15       	cp	r20, r1
    7080:	51 05       	cpc	r21, r1
    7082:	29 f4       	brne	.+10     	; 0x708e <free+0xa6>
    7084:	b0 93 e4 07 	sts	0x07E4, r27
    7088:	a0 93 e3 07 	sts	0x07E3, r26
    708c:	41 c0       	rjmp	.+130    	; 0x7110 <free+0x128>
    708e:	fa 01       	movw	r30, r20
    7090:	b3 83       	std	Z+3, r27	; 0x03
    7092:	a2 83       	std	Z+2, r26	; 0x02
    7094:	c1 91       	ld	r28, Z+
    7096:	d1 91       	ld	r29, Z+
    7098:	ec 0f       	add	r30, r28
    709a:	fd 1f       	adc	r31, r29
    709c:	ae 17       	cp	r26, r30
    709e:	bf 07       	cpc	r27, r31
    70a0:	81 f4       	brne	.+32     	; 0x70c2 <free+0xda>
    70a2:	f9 01       	movw	r30, r18
    70a4:	92 91       	ld	r25, -Z
    70a6:	82 91       	ld	r24, -Z
    70a8:	8c 0f       	add	r24, r28
    70aa:	9d 1f       	adc	r25, r29
    70ac:	02 96       	adiw	r24, 0x02	; 2
    70ae:	da 01       	movw	r26, r20
    70b0:	11 96       	adiw	r26, 0x01	; 1
    70b2:	9c 93       	st	X, r25
    70b4:	8e 93       	st	-X, r24
    70b6:	82 81       	ldd	r24, Z+2	; 0x02
    70b8:	93 81       	ldd	r25, Z+3	; 0x03
    70ba:	13 96       	adiw	r26, 0x03	; 3
    70bc:	9c 93       	st	X, r25
    70be:	8e 93       	st	-X, r24
    70c0:	12 97       	sbiw	r26, 0x02	; 2
    70c2:	e0 e0       	ldi	r30, 0x00	; 0
    70c4:	f0 e0       	ldi	r31, 0x00	; 0
    70c6:	02 c0       	rjmp	.+4      	; 0x70cc <free+0xe4>
    70c8:	fb 01       	movw	r30, r22
    70ca:	bc 01       	movw	r22, r24
    70cc:	db 01       	movw	r26, r22
    70ce:	12 96       	adiw	r26, 0x02	; 2
    70d0:	8d 91       	ld	r24, X+
    70d2:	9c 91       	ld	r25, X
    70d4:	13 97       	sbiw	r26, 0x03	; 3
    70d6:	00 97       	sbiw	r24, 0x00	; 0
    70d8:	b9 f7       	brne	.-18     	; 0x70c8 <free+0xe0>
    70da:	cb 01       	movw	r24, r22
    70dc:	02 96       	adiw	r24, 0x02	; 2
    70de:	2d 91       	ld	r18, X+
    70e0:	3c 91       	ld	r19, X
    70e2:	11 97       	sbiw	r26, 0x01	; 1
    70e4:	82 0f       	add	r24, r18
    70e6:	93 1f       	adc	r25, r19
    70e8:	20 91 e1 07 	lds	r18, 0x07E1
    70ec:	30 91 e2 07 	lds	r19, 0x07E2
    70f0:	28 17       	cp	r18, r24
    70f2:	39 07       	cpc	r19, r25
    70f4:	69 f4       	brne	.+26     	; 0x7110 <free+0x128>
    70f6:	30 97       	sbiw	r30, 0x00	; 0
    70f8:	29 f4       	brne	.+10     	; 0x7104 <free+0x11c>
    70fa:	10 92 e4 07 	sts	0x07E4, r1
    70fe:	10 92 e3 07 	sts	0x07E3, r1
    7102:	02 c0       	rjmp	.+4      	; 0x7108 <free+0x120>
    7104:	13 82       	std	Z+3, r1	; 0x03
    7106:	12 82       	std	Z+2, r1	; 0x02
    7108:	70 93 e2 07 	sts	0x07E2, r23
    710c:	60 93 e1 07 	sts	0x07E1, r22
    7110:	df 91       	pop	r29
    7112:	cf 91       	pop	r28
    7114:	1f 91       	pop	r17
    7116:	0f 91       	pop	r16
    7118:	08 95       	ret

0000711a <do_random>:
    711a:	8f 92       	push	r8
    711c:	9f 92       	push	r9
    711e:	af 92       	push	r10
    7120:	bf 92       	push	r11
    7122:	cf 92       	push	r12
    7124:	df 92       	push	r13
    7126:	ef 92       	push	r14
    7128:	ff 92       	push	r15
    712a:	0f 93       	push	r16
    712c:	1f 93       	push	r17
    712e:	cf 93       	push	r28
    7130:	df 93       	push	r29
    7132:	ec 01       	movw	r28, r24
    7134:	88 81       	ld	r24, Y
    7136:	99 81       	ldd	r25, Y+1	; 0x01
    7138:	aa 81       	ldd	r26, Y+2	; 0x02
    713a:	bb 81       	ldd	r27, Y+3	; 0x03
    713c:	00 97       	sbiw	r24, 0x00	; 0
    713e:	a1 05       	cpc	r26, r1
    7140:	b1 05       	cpc	r27, r1
    7142:	21 f4       	brne	.+8      	; 0x714c <do_random+0x32>
    7144:	84 e2       	ldi	r24, 0x24	; 36
    7146:	99 ed       	ldi	r25, 0xD9	; 217
    7148:	ab e5       	ldi	r26, 0x5B	; 91
    714a:	b7 e0       	ldi	r27, 0x07	; 7
    714c:	bc 01       	movw	r22, r24
    714e:	cd 01       	movw	r24, r26
    7150:	2d e1       	ldi	r18, 0x1D	; 29
    7152:	33 ef       	ldi	r19, 0xF3	; 243
    7154:	41 e0       	ldi	r20, 0x01	; 1
    7156:	50 e0       	ldi	r21, 0x00	; 0
    7158:	0e 94 3f 37 	call	0x6e7e	; 0x6e7e <__divmodsi4>
    715c:	49 01       	movw	r8, r18
    715e:	5a 01       	movw	r10, r20
    7160:	27 ea       	ldi	r18, 0xA7	; 167
    7162:	31 e4       	ldi	r19, 0x41	; 65
    7164:	40 e0       	ldi	r20, 0x00	; 0
    7166:	50 e0       	ldi	r21, 0x00	; 0
    7168:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <__mulsi3>
    716c:	6b 01       	movw	r12, r22
    716e:	7c 01       	movw	r14, r24
    7170:	c5 01       	movw	r24, r10
    7172:	b4 01       	movw	r22, r8
    7174:	2c ee       	ldi	r18, 0xEC	; 236
    7176:	34 ef       	ldi	r19, 0xF4	; 244
    7178:	4f ef       	ldi	r20, 0xFF	; 255
    717a:	5f ef       	ldi	r21, 0xFF	; 255
    717c:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <__mulsi3>
    7180:	dc 01       	movw	r26, r24
    7182:	cb 01       	movw	r24, r22
    7184:	c8 0e       	add	r12, r24
    7186:	d9 1e       	adc	r13, r25
    7188:	ea 1e       	adc	r14, r26
    718a:	fb 1e       	adc	r15, r27
    718c:	f7 fe       	sbrs	r15, 7
    718e:	08 c0       	rjmp	.+16     	; 0x71a0 <do_random+0x86>
    7190:	8f ef       	ldi	r24, 0xFF	; 255
    7192:	9f ef       	ldi	r25, 0xFF	; 255
    7194:	af ef       	ldi	r26, 0xFF	; 255
    7196:	bf e7       	ldi	r27, 0x7F	; 127
    7198:	c8 0e       	add	r12, r24
    719a:	d9 1e       	adc	r13, r25
    719c:	ea 1e       	adc	r14, r26
    719e:	fb 1e       	adc	r15, r27
    71a0:	c8 82       	st	Y, r12
    71a2:	d9 82       	std	Y+1, r13	; 0x01
    71a4:	ea 82       	std	Y+2, r14	; 0x02
    71a6:	fb 82       	std	Y+3, r15	; 0x03
    71a8:	97 01       	movw	r18, r14
    71aa:	86 01       	movw	r16, r12
    71ac:	3f 77       	andi	r19, 0x7F	; 127
    71ae:	b8 01       	movw	r22, r16
    71b0:	c9 01       	movw	r24, r18
    71b2:	df 91       	pop	r29
    71b4:	cf 91       	pop	r28
    71b6:	1f 91       	pop	r17
    71b8:	0f 91       	pop	r16
    71ba:	ff 90       	pop	r15
    71bc:	ef 90       	pop	r14
    71be:	df 90       	pop	r13
    71c0:	cf 90       	pop	r12
    71c2:	bf 90       	pop	r11
    71c4:	af 90       	pop	r10
    71c6:	9f 90       	pop	r9
    71c8:	8f 90       	pop	r8
    71ca:	08 95       	ret

000071cc <random_r>:
    71cc:	0e 94 8d 38 	call	0x711a	; 0x711a <do_random>
    71d0:	08 95       	ret

000071d2 <random>:
    71d2:	84 e1       	ldi	r24, 0x14	; 20
    71d4:	93 e0       	ldi	r25, 0x03	; 3
    71d6:	0e 94 8d 38 	call	0x711a	; 0x711a <do_random>
    71da:	08 95       	ret

000071dc <srandom>:
    71dc:	dc 01       	movw	r26, r24
    71de:	cb 01       	movw	r24, r22
    71e0:	80 93 14 03 	sts	0x0314, r24
    71e4:	90 93 15 03 	sts	0x0315, r25
    71e8:	a0 93 16 03 	sts	0x0316, r26
    71ec:	b0 93 17 03 	sts	0x0317, r27
    71f0:	08 95       	ret

000071f2 <realloc>:
    71f2:	8f 92       	push	r8
    71f4:	9f 92       	push	r9
    71f6:	af 92       	push	r10
    71f8:	bf 92       	push	r11
    71fa:	cf 92       	push	r12
    71fc:	df 92       	push	r13
    71fe:	ef 92       	push	r14
    7200:	ff 92       	push	r15
    7202:	0f 93       	push	r16
    7204:	1f 93       	push	r17
    7206:	cf 93       	push	r28
    7208:	df 93       	push	r29
    720a:	0f 92       	push	r0
    720c:	0f 92       	push	r0
    720e:	cd b7       	in	r28, 0x3d	; 61
    7210:	de b7       	in	r29, 0x3e	; 62
    7212:	8c 01       	movw	r16, r24
    7214:	00 97       	sbiw	r24, 0x00	; 0
    7216:	29 f4       	brne	.+10     	; 0x7222 <realloc+0x30>
    7218:	cb 01       	movw	r24, r22
    721a:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <malloc>
    721e:	8c 01       	movw	r16, r24
    7220:	b8 c0       	rjmp	.+368    	; 0x7392 <realloc+0x1a0>
    7222:	dc 01       	movw	r26, r24
    7224:	a6 0f       	add	r26, r22
    7226:	b7 1f       	adc	r27, r23
    7228:	fc 01       	movw	r30, r24
    722a:	32 97       	sbiw	r30, 0x02	; 2
    722c:	ae 17       	cp	r26, r30
    722e:	bf 07       	cpc	r27, r31
    7230:	08 f4       	brcc	.+2      	; 0x7234 <realloc+0x42>
    7232:	ad c0       	rjmp	.+346    	; 0x738e <realloc+0x19c>
    7234:	20 81       	ld	r18, Z
    7236:	31 81       	ldd	r19, Z+1	; 0x01
    7238:	26 17       	cp	r18, r22
    723a:	37 07       	cpc	r19, r23
    723c:	b0 f0       	brcs	.+44     	; 0x726a <realloc+0x78>
    723e:	25 30       	cpi	r18, 0x05	; 5
    7240:	31 05       	cpc	r19, r1
    7242:	08 f4       	brcc	.+2      	; 0x7246 <realloc+0x54>
    7244:	a6 c0       	rjmp	.+332    	; 0x7392 <realloc+0x1a0>
    7246:	c9 01       	movw	r24, r18
    7248:	04 97       	sbiw	r24, 0x04	; 4
    724a:	86 17       	cp	r24, r22
    724c:	97 07       	cpc	r25, r23
    724e:	08 f4       	brcc	.+2      	; 0x7252 <realloc+0x60>
    7250:	a0 c0       	rjmp	.+320    	; 0x7392 <realloc+0x1a0>
    7252:	22 50       	subi	r18, 0x02	; 2
    7254:	30 40       	sbci	r19, 0x00	; 0
    7256:	26 1b       	sub	r18, r22
    7258:	37 0b       	sbc	r19, r23
    725a:	2d 93       	st	X+, r18
    725c:	3d 93       	st	X+, r19
    725e:	cd 01       	movw	r24, r26
    7260:	71 83       	std	Z+1, r23	; 0x01
    7262:	60 83       	st	Z, r22
    7264:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <free>
    7268:	94 c0       	rjmp	.+296    	; 0x7392 <realloc+0x1a0>
    726a:	6b 01       	movw	r12, r22
    726c:	c2 1a       	sub	r12, r18
    726e:	d3 0a       	sbc	r13, r19
    7270:	5c 01       	movw	r10, r24
    7272:	a2 0e       	add	r10, r18
    7274:	b3 1e       	adc	r11, r19
    7276:	e0 91 e3 07 	lds	r30, 0x07E3
    727a:	f0 91 e4 07 	lds	r31, 0x07E4
    727e:	40 e0       	ldi	r20, 0x00	; 0
    7280:	50 e0       	ldi	r21, 0x00	; 0
    7282:	88 24       	eor	r8, r8
    7284:	99 24       	eor	r9, r9
    7286:	49 c0       	rjmp	.+146    	; 0x731a <realloc+0x128>
    7288:	ea 15       	cp	r30, r10
    728a:	fb 05       	cpc	r31, r11
    728c:	e1 f5       	brne	.+120    	; 0x7306 <realloc+0x114>
    728e:	e0 80       	ld	r14, Z
    7290:	f1 80       	ldd	r15, Z+1	; 0x01
    7292:	c7 01       	movw	r24, r14
    7294:	02 96       	adiw	r24, 0x02	; 2
    7296:	8c 15       	cp	r24, r12
    7298:	9d 05       	cpc	r25, r13
    729a:	a8 f1       	brcs	.+106    	; 0x7306 <realloc+0x114>
    729c:	a7 01       	movw	r20, r14
    729e:	4c 19       	sub	r20, r12
    72a0:	5d 09       	sbc	r21, r13
    72a2:	ca 01       	movw	r24, r20
    72a4:	02 96       	adiw	r24, 0x02	; 2
    72a6:	0f 2e       	mov	r0, r31
    72a8:	fe ef       	ldi	r31, 0xFE	; 254
    72aa:	cf 2e       	mov	r12, r31
    72ac:	ff ef       	ldi	r31, 0xFF	; 255
    72ae:	df 2e       	mov	r13, r31
    72b0:	f0 2d       	mov	r31, r0
    72b2:	c0 0e       	add	r12, r16
    72b4:	d1 1e       	adc	r13, r17
    72b6:	85 30       	cpi	r24, 0x05	; 5
    72b8:	91 05       	cpc	r25, r1
    72ba:	78 f0       	brcs	.+30     	; 0x72da <realloc+0xe8>
    72bc:	82 81       	ldd	r24, Z+2	; 0x02
    72be:	93 81       	ldd	r25, Z+3	; 0x03
    72c0:	13 96       	adiw	r26, 0x03	; 3
    72c2:	9c 93       	st	X, r25
    72c4:	8e 93       	st	-X, r24
    72c6:	12 97       	sbiw	r26, 0x02	; 2
    72c8:	11 96       	adiw	r26, 0x01	; 1
    72ca:	5c 93       	st	X, r21
    72cc:	4e 93       	st	-X, r20
    72ce:	f6 01       	movw	r30, r12
    72d0:	71 83       	std	Z+1, r23	; 0x01
    72d2:	60 83       	st	Z, r22
    72d4:	9a 2f       	mov	r25, r26
    72d6:	8b 2f       	mov	r24, r27
    72d8:	0a c0       	rjmp	.+20     	; 0x72ee <realloc+0xfc>
    72da:	c9 01       	movw	r24, r18
    72dc:	02 96       	adiw	r24, 0x02	; 2
    72de:	8e 0d       	add	r24, r14
    72e0:	9f 1d       	adc	r25, r15
    72e2:	d6 01       	movw	r26, r12
    72e4:	11 96       	adiw	r26, 0x01	; 1
    72e6:	9c 93       	st	X, r25
    72e8:	8e 93       	st	-X, r24
    72ea:	92 81       	ldd	r25, Z+2	; 0x02
    72ec:	83 81       	ldd	r24, Z+3	; 0x03
    72ee:	81 14       	cp	r8, r1
    72f0:	91 04       	cpc	r9, r1
    72f2:	21 f0       	breq	.+8      	; 0x72fc <realloc+0x10a>
    72f4:	f4 01       	movw	r30, r8
    72f6:	92 83       	std	Z+2, r25	; 0x02
    72f8:	83 83       	std	Z+3, r24	; 0x03
    72fa:	4b c0       	rjmp	.+150    	; 0x7392 <realloc+0x1a0>
    72fc:	90 93 e3 07 	sts	0x07E3, r25
    7300:	80 93 e4 07 	sts	0x07E4, r24
    7304:	46 c0       	rjmp	.+140    	; 0x7392 <realloc+0x1a0>
    7306:	80 81       	ld	r24, Z
    7308:	91 81       	ldd	r25, Z+1	; 0x01
    730a:	48 17       	cp	r20, r24
    730c:	59 07       	cpc	r21, r25
    730e:	08 f4       	brcc	.+2      	; 0x7312 <realloc+0x120>
    7310:	ac 01       	movw	r20, r24
    7312:	82 81       	ldd	r24, Z+2	; 0x02
    7314:	93 81       	ldd	r25, Z+3	; 0x03
    7316:	4f 01       	movw	r8, r30
    7318:	fc 01       	movw	r30, r24
    731a:	30 97       	sbiw	r30, 0x00	; 0
    731c:	09 f0       	breq	.+2      	; 0x7320 <realloc+0x12e>
    731e:	b4 cf       	rjmp	.-152    	; 0x7288 <realloc+0x96>
    7320:	80 91 e1 07 	lds	r24, 0x07E1
    7324:	90 91 e2 07 	lds	r25, 0x07E2
    7328:	8a 15       	cp	r24, r10
    732a:	9b 05       	cpc	r25, r11
    732c:	e9 f4       	brne	.+58     	; 0x7368 <realloc+0x176>
    732e:	46 17       	cp	r20, r22
    7330:	57 07       	cpc	r21, r23
    7332:	d0 f4       	brcc	.+52     	; 0x7368 <realloc+0x176>
    7334:	80 91 0e 03 	lds	r24, 0x030E
    7338:	90 91 0f 03 	lds	r25, 0x030F
    733c:	00 97       	sbiw	r24, 0x00	; 0
    733e:	41 f4       	brne	.+16     	; 0x7350 <realloc+0x15e>
    7340:	8d b7       	in	r24, 0x3d	; 61
    7342:	9e b7       	in	r25, 0x3e	; 62
    7344:	20 91 12 03 	lds	r18, 0x0312
    7348:	30 91 13 03 	lds	r19, 0x0313
    734c:	82 1b       	sub	r24, r18
    734e:	93 0b       	sbc	r25, r19
    7350:	a8 17       	cp	r26, r24
    7352:	b9 07       	cpc	r27, r25
    7354:	e0 f4       	brcc	.+56     	; 0x738e <realloc+0x19c>
    7356:	b0 93 e2 07 	sts	0x07E2, r27
    735a:	a0 93 e1 07 	sts	0x07E1, r26
    735e:	f8 01       	movw	r30, r16
    7360:	32 97       	sbiw	r30, 0x02	; 2
    7362:	71 83       	std	Z+1, r23	; 0x01
    7364:	60 83       	st	Z, r22
    7366:	15 c0       	rjmp	.+42     	; 0x7392 <realloc+0x1a0>
    7368:	cb 01       	movw	r24, r22
    736a:	29 83       	std	Y+1, r18	; 0x01
    736c:	3a 83       	std	Y+2, r19	; 0x02
    736e:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <malloc>
    7372:	7c 01       	movw	r14, r24
    7374:	29 81       	ldd	r18, Y+1	; 0x01
    7376:	3a 81       	ldd	r19, Y+2	; 0x02
    7378:	00 97       	sbiw	r24, 0x00	; 0
    737a:	49 f0       	breq	.+18     	; 0x738e <realloc+0x19c>
    737c:	b8 01       	movw	r22, r16
    737e:	a9 01       	movw	r20, r18
    7380:	0e 94 25 3a 	call	0x744a	; 0x744a <memcpy>
    7384:	c8 01       	movw	r24, r16
    7386:	0e 94 f4 37 	call	0x6fe8	; 0x6fe8 <free>
    738a:	87 01       	movw	r16, r14
    738c:	02 c0       	rjmp	.+4      	; 0x7392 <realloc+0x1a0>
    738e:	00 e0       	ldi	r16, 0x00	; 0
    7390:	10 e0       	ldi	r17, 0x00	; 0
    7392:	c8 01       	movw	r24, r16
    7394:	0f 90       	pop	r0
    7396:	0f 90       	pop	r0
    7398:	df 91       	pop	r29
    739a:	cf 91       	pop	r28
    739c:	1f 91       	pop	r17
    739e:	0f 91       	pop	r16
    73a0:	ff 90       	pop	r15
    73a2:	ef 90       	pop	r14
    73a4:	df 90       	pop	r13
    73a6:	cf 90       	pop	r12
    73a8:	bf 90       	pop	r11
    73aa:	af 90       	pop	r10
    73ac:	9f 90       	pop	r9
    73ae:	8f 90       	pop	r8
    73b0:	08 95       	ret

000073b2 <atol>:
    73b2:	1f 93       	push	r17
    73b4:	fc 01       	movw	r30, r24
    73b6:	99 27       	eor	r25, r25
    73b8:	88 27       	eor	r24, r24
    73ba:	bc 01       	movw	r22, r24
    73bc:	e8 94       	clt
    73be:	11 91       	ld	r17, Z+
    73c0:	10 32       	cpi	r17, 0x20	; 32
    73c2:	e9 f3       	breq	.-6      	; 0x73be <atol+0xc>
    73c4:	19 30       	cpi	r17, 0x09	; 9
    73c6:	10 f0       	brcs	.+4      	; 0x73cc <atol+0x1a>
    73c8:	1e 30       	cpi	r17, 0x0E	; 14
    73ca:	c8 f3       	brcs	.-14     	; 0x73be <atol+0xc>
    73cc:	1b 32       	cpi	r17, 0x2B	; 43
    73ce:	51 f0       	breq	.+20     	; 0x73e4 <atol+0x32>
    73d0:	1d 32       	cpi	r17, 0x2D	; 45
    73d2:	49 f4       	brne	.+18     	; 0x73e6 <atol+0x34>
    73d4:	68 94       	set
    73d6:	06 c0       	rjmp	.+12     	; 0x73e4 <atol+0x32>
    73d8:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <__mulsi_const_10>
    73dc:	61 0f       	add	r22, r17
    73de:	71 1d       	adc	r23, r1
    73e0:	81 1d       	adc	r24, r1
    73e2:	91 1d       	adc	r25, r1
    73e4:	11 91       	ld	r17, Z+
    73e6:	10 53       	subi	r17, 0x30	; 48
    73e8:	1a 30       	cpi	r17, 0x0A	; 10
    73ea:	b0 f3       	brcs	.-20     	; 0x73d8 <atol+0x26>
    73ec:	3e f4       	brtc	.+14     	; 0x73fc <atol+0x4a>
    73ee:	90 95       	com	r25
    73f0:	80 95       	com	r24
    73f2:	70 95       	com	r23
    73f4:	61 95       	neg	r22
    73f6:	7f 4f       	sbci	r23, 0xFF	; 255
    73f8:	8f 4f       	sbci	r24, 0xFF	; 255
    73fa:	9f 4f       	sbci	r25, 0xFF	; 255
    73fc:	1f 91       	pop	r17
    73fe:	08 95       	ret

00007400 <isspace>:
    7400:	91 11       	cpse	r25, r1
    7402:	40 c1       	rjmp	.+640    	; 0x7684 <__ctype_isfalse>
    7404:	80 32       	cpi	r24, 0x20	; 32
    7406:	19 f0       	breq	.+6      	; 0x740e <isspace+0xe>
    7408:	89 50       	subi	r24, 0x09	; 9
    740a:	85 50       	subi	r24, 0x05	; 5
    740c:	d0 f7       	brcc	.-12     	; 0x7402 <isspace+0x2>
    740e:	08 95       	ret

00007410 <tolower>:
    7410:	91 11       	cpse	r25, r1
    7412:	08 95       	ret
    7414:	81 54       	subi	r24, 0x41	; 65
    7416:	8a 51       	subi	r24, 0x1A	; 26
    7418:	08 f4       	brcc	.+2      	; 0x741c <tolower+0xc>
    741a:	80 5e       	subi	r24, 0xE0	; 224
    741c:	85 5a       	subi	r24, 0xA5	; 165
    741e:	08 95       	ret

00007420 <toupper>:
    7420:	91 11       	cpse	r25, r1
    7422:	08 95       	ret
    7424:	81 56       	subi	r24, 0x61	; 97
    7426:	8a 51       	subi	r24, 0x1A	; 26
    7428:	08 f4       	brcc	.+2      	; 0x742c <toupper+0xc>
    742a:	80 52       	subi	r24, 0x20	; 32
    742c:	85 58       	subi	r24, 0x85	; 133
    742e:	08 95       	ret

00007430 <memcmp>:
    7430:	fb 01       	movw	r30, r22
    7432:	dc 01       	movw	r26, r24
    7434:	04 c0       	rjmp	.+8      	; 0x743e <memcmp+0xe>
    7436:	8d 91       	ld	r24, X+
    7438:	01 90       	ld	r0, Z+
    743a:	80 19       	sub	r24, r0
    743c:	21 f4       	brne	.+8      	; 0x7446 <memcmp+0x16>
    743e:	41 50       	subi	r20, 0x01	; 1
    7440:	50 40       	sbci	r21, 0x00	; 0
    7442:	c8 f7       	brcc	.-14     	; 0x7436 <memcmp+0x6>
    7444:	88 1b       	sub	r24, r24
    7446:	99 0b       	sbc	r25, r25
    7448:	08 95       	ret

0000744a <memcpy>:
    744a:	fb 01       	movw	r30, r22
    744c:	dc 01       	movw	r26, r24
    744e:	02 c0       	rjmp	.+4      	; 0x7454 <memcpy+0xa>
    7450:	01 90       	ld	r0, Z+
    7452:	0d 92       	st	X+, r0
    7454:	41 50       	subi	r20, 0x01	; 1
    7456:	50 40       	sbci	r21, 0x00	; 0
    7458:	d8 f7       	brcc	.-10     	; 0x7450 <memcpy+0x6>
    745a:	08 95       	ret

0000745c <memmove>:
    745c:	68 17       	cp	r22, r24
    745e:	79 07       	cpc	r23, r25
    7460:	68 f4       	brcc	.+26     	; 0x747c <memmove+0x20>
    7462:	fb 01       	movw	r30, r22
    7464:	dc 01       	movw	r26, r24
    7466:	e4 0f       	add	r30, r20
    7468:	f5 1f       	adc	r31, r21
    746a:	a4 0f       	add	r26, r20
    746c:	b5 1f       	adc	r27, r21
    746e:	02 c0       	rjmp	.+4      	; 0x7474 <memmove+0x18>
    7470:	02 90       	ld	r0, -Z
    7472:	0e 92       	st	-X, r0
    7474:	41 50       	subi	r20, 0x01	; 1
    7476:	50 40       	sbci	r21, 0x00	; 0
    7478:	d8 f7       	brcc	.-10     	; 0x7470 <memmove+0x14>
    747a:	08 95       	ret
    747c:	0c 94 25 3a 	jmp	0x744a	; 0x744a <memcpy>

00007480 <strchr>:
    7480:	fc 01       	movw	r30, r24
    7482:	81 91       	ld	r24, Z+
    7484:	86 17       	cp	r24, r22
    7486:	21 f0       	breq	.+8      	; 0x7490 <strchr+0x10>
    7488:	88 23       	and	r24, r24
    748a:	d9 f7       	brne	.-10     	; 0x7482 <strchr+0x2>
    748c:	99 27       	eor	r25, r25
    748e:	08 95       	ret
    7490:	31 97       	sbiw	r30, 0x01	; 1
    7492:	cf 01       	movw	r24, r30
    7494:	08 95       	ret

00007496 <strcmp>:
    7496:	fb 01       	movw	r30, r22
    7498:	dc 01       	movw	r26, r24
    749a:	8d 91       	ld	r24, X+
    749c:	01 90       	ld	r0, Z+
    749e:	80 19       	sub	r24, r0
    74a0:	01 10       	cpse	r0, r1
    74a2:	d9 f3       	breq	.-10     	; 0x749a <strcmp+0x4>
    74a4:	99 0b       	sbc	r25, r25
    74a6:	08 95       	ret

000074a8 <strcpy>:
    74a8:	fb 01       	movw	r30, r22
    74aa:	dc 01       	movw	r26, r24
    74ac:	01 90       	ld	r0, Z+
    74ae:	0d 92       	st	X+, r0
    74b0:	00 20       	and	r0, r0
    74b2:	e1 f7       	brne	.-8      	; 0x74ac <strcpy+0x4>
    74b4:	08 95       	ret

000074b6 <strncmp>:
    74b6:	fb 01       	movw	r30, r22
    74b8:	dc 01       	movw	r26, r24
    74ba:	41 50       	subi	r20, 0x01	; 1
    74bc:	50 40       	sbci	r21, 0x00	; 0
    74be:	30 f0       	brcs	.+12     	; 0x74cc <strncmp+0x16>
    74c0:	8d 91       	ld	r24, X+
    74c2:	01 90       	ld	r0, Z+
    74c4:	80 19       	sub	r24, r0
    74c6:	19 f4       	brne	.+6      	; 0x74ce <strncmp+0x18>
    74c8:	00 20       	and	r0, r0
    74ca:	b9 f7       	brne	.-18     	; 0x74ba <strncmp+0x4>
    74cc:	88 1b       	sub	r24, r24
    74ce:	99 0b       	sbc	r25, r25
    74d0:	08 95       	ret

000074d2 <strncpy>:
    74d2:	fb 01       	movw	r30, r22
    74d4:	dc 01       	movw	r26, r24
    74d6:	41 50       	subi	r20, 0x01	; 1
    74d8:	50 40       	sbci	r21, 0x00	; 0
    74da:	48 f0       	brcs	.+18     	; 0x74ee <strncpy+0x1c>
    74dc:	01 90       	ld	r0, Z+
    74de:	0d 92       	st	X+, r0
    74e0:	00 20       	and	r0, r0
    74e2:	c9 f7       	brne	.-14     	; 0x74d6 <strncpy+0x4>
    74e4:	01 c0       	rjmp	.+2      	; 0x74e8 <strncpy+0x16>
    74e6:	1d 92       	st	X+, r1
    74e8:	41 50       	subi	r20, 0x01	; 1
    74ea:	50 40       	sbci	r21, 0x00	; 0
    74ec:	e0 f7       	brcc	.-8      	; 0x74e6 <strncpy+0x14>
    74ee:	08 95       	ret

000074f0 <strrchr>:
    74f0:	fc 01       	movw	r30, r24
    74f2:	81 e0       	ldi	r24, 0x01	; 1
    74f4:	90 e0       	ldi	r25, 0x00	; 0
    74f6:	01 90       	ld	r0, Z+
    74f8:	06 16       	cp	r0, r22
    74fa:	09 f4       	brne	.+2      	; 0x74fe <strrchr+0xe>
    74fc:	cf 01       	movw	r24, r30
    74fe:	00 20       	and	r0, r0
    7500:	d1 f7       	brne	.-12     	; 0x74f6 <strrchr+0x6>
    7502:	01 97       	sbiw	r24, 0x01	; 1
    7504:	08 95       	ret

00007506 <strstr>:
    7506:	fb 01       	movw	r30, r22
    7508:	51 91       	ld	r21, Z+
    750a:	55 23       	and	r21, r21
    750c:	a9 f0       	breq	.+42     	; 0x7538 <strstr+0x32>
    750e:	bf 01       	movw	r22, r30
    7510:	dc 01       	movw	r26, r24
    7512:	4d 91       	ld	r20, X+
    7514:	45 17       	cp	r20, r21
    7516:	41 11       	cpse	r20, r1
    7518:	e1 f7       	brne	.-8      	; 0x7512 <strstr+0xc>
    751a:	59 f4       	brne	.+22     	; 0x7532 <strstr+0x2c>
    751c:	cd 01       	movw	r24, r26
    751e:	01 90       	ld	r0, Z+
    7520:	00 20       	and	r0, r0
    7522:	49 f0       	breq	.+18     	; 0x7536 <strstr+0x30>
    7524:	4d 91       	ld	r20, X+
    7526:	40 15       	cp	r20, r0
    7528:	41 11       	cpse	r20, r1
    752a:	c9 f3       	breq	.-14     	; 0x751e <strstr+0x18>
    752c:	fb 01       	movw	r30, r22
    752e:	41 11       	cpse	r20, r1
    7530:	ef cf       	rjmp	.-34     	; 0x7510 <strstr+0xa>
    7532:	81 e0       	ldi	r24, 0x01	; 1
    7534:	90 e0       	ldi	r25, 0x00	; 0
    7536:	01 97       	sbiw	r24, 0x01	; 1
    7538:	08 95       	ret

0000753a <itoa>:
    753a:	fb 01       	movw	r30, r22
    753c:	9f 01       	movw	r18, r30
    753e:	e8 94       	clt
    7540:	42 30       	cpi	r20, 0x02	; 2
    7542:	c4 f0       	brlt	.+48     	; 0x7574 <itoa+0x3a>
    7544:	45 32       	cpi	r20, 0x25	; 37
    7546:	b4 f4       	brge	.+44     	; 0x7574 <itoa+0x3a>
    7548:	4a 30       	cpi	r20, 0x0A	; 10
    754a:	29 f4       	brne	.+10     	; 0x7556 <itoa+0x1c>
    754c:	97 fb       	bst	r25, 7
    754e:	1e f4       	brtc	.+6      	; 0x7556 <itoa+0x1c>
    7550:	90 95       	com	r25
    7552:	81 95       	neg	r24
    7554:	9f 4f       	sbci	r25, 0xFF	; 255
    7556:	64 2f       	mov	r22, r20
    7558:	77 27       	eor	r23, r23
    755a:	0e 94 55 3b 	call	0x76aa	; 0x76aa <__udivmodhi4>
    755e:	80 5d       	subi	r24, 0xD0	; 208
    7560:	8a 33       	cpi	r24, 0x3A	; 58
    7562:	0c f0       	brlt	.+2      	; 0x7566 <itoa+0x2c>
    7564:	89 5d       	subi	r24, 0xD9	; 217
    7566:	81 93       	st	Z+, r24
    7568:	cb 01       	movw	r24, r22
    756a:	00 97       	sbiw	r24, 0x00	; 0
    756c:	a1 f7       	brne	.-24     	; 0x7556 <itoa+0x1c>
    756e:	16 f4       	brtc	.+4      	; 0x7574 <itoa+0x3a>
    7570:	5d e2       	ldi	r21, 0x2D	; 45
    7572:	51 93       	st	Z+, r21
    7574:	10 82       	st	Z, r1
    7576:	c9 01       	movw	r24, r18
    7578:	0c 94 45 3b 	jmp	0x768a	; 0x768a <strrev>

0000757c <ltoa>:
    757c:	fa 01       	movw	r30, r20
    757e:	cf 93       	push	r28
    7580:	ff 93       	push	r31
    7582:	ef 93       	push	r30
    7584:	22 30       	cpi	r18, 0x02	; 2
    7586:	44 f1       	brlt	.+80     	; 0x75d8 <ltoa+0x5c>
    7588:	25 32       	cpi	r18, 0x25	; 37
    758a:	34 f5       	brge	.+76     	; 0x75d8 <ltoa+0x5c>
    758c:	c2 2f       	mov	r28, r18
    758e:	e8 94       	clt
    7590:	ca 30       	cpi	r28, 0x0A	; 10
    7592:	49 f4       	brne	.+18     	; 0x75a6 <ltoa+0x2a>
    7594:	97 fb       	bst	r25, 7
    7596:	3e f4       	brtc	.+14     	; 0x75a6 <ltoa+0x2a>
    7598:	90 95       	com	r25
    759a:	80 95       	com	r24
    759c:	70 95       	com	r23
    759e:	61 95       	neg	r22
    75a0:	7f 4f       	sbci	r23, 0xFF	; 255
    75a2:	8f 4f       	sbci	r24, 0xFF	; 255
    75a4:	9f 4f       	sbci	r25, 0xFF	; 255
    75a6:	2c 2f       	mov	r18, r28
    75a8:	33 27       	eor	r19, r19
    75aa:	44 27       	eor	r20, r20
    75ac:	55 27       	eor	r21, r21
    75ae:	ff 93       	push	r31
    75b0:	ef 93       	push	r30
    75b2:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    75b6:	ef 91       	pop	r30
    75b8:	ff 91       	pop	r31
    75ba:	60 5d       	subi	r22, 0xD0	; 208
    75bc:	6a 33       	cpi	r22, 0x3A	; 58
    75be:	0c f0       	brlt	.+2      	; 0x75c2 <ltoa+0x46>
    75c0:	69 5d       	subi	r22, 0xD9	; 217
    75c2:	61 93       	st	Z+, r22
    75c4:	b9 01       	movw	r22, r18
    75c6:	ca 01       	movw	r24, r20
    75c8:	60 50       	subi	r22, 0x00	; 0
    75ca:	70 40       	sbci	r23, 0x00	; 0
    75cc:	80 40       	sbci	r24, 0x00	; 0
    75ce:	90 40       	sbci	r25, 0x00	; 0
    75d0:	51 f7       	brne	.-44     	; 0x75a6 <ltoa+0x2a>
    75d2:	16 f4       	brtc	.+4      	; 0x75d8 <ltoa+0x5c>
    75d4:	cd e2       	ldi	r28, 0x2D	; 45
    75d6:	c1 93       	st	Z+, r28
    75d8:	10 82       	st	Z, r1
    75da:	8f 91       	pop	r24
    75dc:	9f 91       	pop	r25
    75de:	cf 91       	pop	r28
    75e0:	0c 94 45 3b 	jmp	0x768a	; 0x768a <strrev>

000075e4 <__mulsi_const_10>:
    75e4:	59 2f       	mov	r21, r25
    75e6:	48 2f       	mov	r20, r24
    75e8:	37 2f       	mov	r19, r23
    75ea:	26 2f       	mov	r18, r22
    75ec:	66 0f       	add	r22, r22
    75ee:	77 1f       	adc	r23, r23
    75f0:	88 1f       	adc	r24, r24
    75f2:	99 1f       	adc	r25, r25
    75f4:	66 0f       	add	r22, r22
    75f6:	77 1f       	adc	r23, r23
    75f8:	88 1f       	adc	r24, r24
    75fa:	99 1f       	adc	r25, r25
    75fc:	62 0f       	add	r22, r18
    75fe:	73 1f       	adc	r23, r19
    7600:	84 1f       	adc	r24, r20
    7602:	95 1f       	adc	r25, r21
    7604:	66 0f       	add	r22, r22
    7606:	77 1f       	adc	r23, r23
    7608:	88 1f       	adc	r24, r24
    760a:	99 1f       	adc	r25, r25
    760c:	08 95       	ret

0000760e <ultoa>:
    760e:	fa 01       	movw	r30, r20
    7610:	cf 93       	push	r28
    7612:	ff 93       	push	r31
    7614:	ef 93       	push	r30
    7616:	22 30       	cpi	r18, 0x02	; 2
    7618:	cc f0       	brlt	.+50     	; 0x764c <ultoa+0x3e>
    761a:	25 32       	cpi	r18, 0x25	; 37
    761c:	bc f4       	brge	.+46     	; 0x764c <ultoa+0x3e>
    761e:	c2 2f       	mov	r28, r18
    7620:	2c 2f       	mov	r18, r28
    7622:	33 27       	eor	r19, r19
    7624:	44 27       	eor	r20, r20
    7626:	55 27       	eor	r21, r21
    7628:	ff 93       	push	r31
    762a:	ef 93       	push	r30
    762c:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__udivmodsi4>
    7630:	ef 91       	pop	r30
    7632:	ff 91       	pop	r31
    7634:	60 5d       	subi	r22, 0xD0	; 208
    7636:	6a 33       	cpi	r22, 0x3A	; 58
    7638:	0c f0       	brlt	.+2      	; 0x763c <ultoa+0x2e>
    763a:	69 5d       	subi	r22, 0xD9	; 217
    763c:	61 93       	st	Z+, r22
    763e:	b9 01       	movw	r22, r18
    7640:	ca 01       	movw	r24, r20
    7642:	60 50       	subi	r22, 0x00	; 0
    7644:	70 40       	sbci	r23, 0x00	; 0
    7646:	80 40       	sbci	r24, 0x00	; 0
    7648:	90 40       	sbci	r25, 0x00	; 0
    764a:	51 f7       	brne	.-44     	; 0x7620 <ultoa+0x12>
    764c:	10 82       	st	Z, r1
    764e:	8f 91       	pop	r24
    7650:	9f 91       	pop	r25
    7652:	cf 91       	pop	r28
    7654:	0c 94 45 3b 	jmp	0x768a	; 0x768a <strrev>

00007658 <utoa>:
    7658:	fb 01       	movw	r30, r22
    765a:	9f 01       	movw	r18, r30
    765c:	42 30       	cpi	r20, 0x02	; 2
    765e:	74 f0       	brlt	.+28     	; 0x767c <utoa+0x24>
    7660:	45 32       	cpi	r20, 0x25	; 37
    7662:	64 f4       	brge	.+24     	; 0x767c <utoa+0x24>
    7664:	64 2f       	mov	r22, r20
    7666:	77 27       	eor	r23, r23
    7668:	0e 94 55 3b 	call	0x76aa	; 0x76aa <__udivmodhi4>
    766c:	80 5d       	subi	r24, 0xD0	; 208
    766e:	8a 33       	cpi	r24, 0x3A	; 58
    7670:	0c f0       	brlt	.+2      	; 0x7674 <utoa+0x1c>
    7672:	89 5d       	subi	r24, 0xD9	; 217
    7674:	81 93       	st	Z+, r24
    7676:	cb 01       	movw	r24, r22
    7678:	00 97       	sbiw	r24, 0x00	; 0
    767a:	a1 f7       	brne	.-24     	; 0x7664 <utoa+0xc>
    767c:	10 82       	st	Z, r1
    767e:	c9 01       	movw	r24, r18
    7680:	0c 94 45 3b 	jmp	0x768a	; 0x768a <strrev>

00007684 <__ctype_isfalse>:
    7684:	99 27       	eor	r25, r25
    7686:	88 27       	eor	r24, r24

00007688 <__ctype_istrue>:
    7688:	08 95       	ret

0000768a <strrev>:
    768a:	dc 01       	movw	r26, r24
    768c:	fc 01       	movw	r30, r24
    768e:	67 2f       	mov	r22, r23
    7690:	71 91       	ld	r23, Z+
    7692:	77 23       	and	r23, r23
    7694:	e1 f7       	brne	.-8      	; 0x768e <strrev+0x4>
    7696:	32 97       	sbiw	r30, 0x02	; 2
    7698:	04 c0       	rjmp	.+8      	; 0x76a2 <strrev+0x18>
    769a:	7c 91       	ld	r23, X
    769c:	6d 93       	st	X+, r22
    769e:	70 83       	st	Z, r23
    76a0:	62 91       	ld	r22, -Z
    76a2:	ae 17       	cp	r26, r30
    76a4:	bf 07       	cpc	r27, r31
    76a6:	c8 f3       	brcs	.-14     	; 0x769a <strrev+0x10>
    76a8:	08 95       	ret

000076aa <__udivmodhi4>:
    76aa:	aa 1b       	sub	r26, r26
    76ac:	bb 1b       	sub	r27, r27
    76ae:	51 e1       	ldi	r21, 0x11	; 17
    76b0:	07 c0       	rjmp	.+14     	; 0x76c0 <__udivmodhi4_ep>

000076b2 <__udivmodhi4_loop>:
    76b2:	aa 1f       	adc	r26, r26
    76b4:	bb 1f       	adc	r27, r27
    76b6:	a6 17       	cp	r26, r22
    76b8:	b7 07       	cpc	r27, r23
    76ba:	10 f0       	brcs	.+4      	; 0x76c0 <__udivmodhi4_ep>
    76bc:	a6 1b       	sub	r26, r22
    76be:	b7 0b       	sbc	r27, r23

000076c0 <__udivmodhi4_ep>:
    76c0:	88 1f       	adc	r24, r24
    76c2:	99 1f       	adc	r25, r25
    76c4:	5a 95       	dec	r21
    76c6:	a9 f7       	brne	.-22     	; 0x76b2 <__udivmodhi4_loop>
    76c8:	80 95       	com	r24
    76ca:	90 95       	com	r25
    76cc:	bc 01       	movw	r22, r24
    76ce:	cd 01       	movw	r24, r26
    76d0:	08 95       	ret

000076d2 <_exit>:
    76d2:	f8 94       	cli

000076d4 <__stop_program>:
    76d4:	ff cf       	rjmp	.-2      	; 0x76d4 <__stop_program>
