
ArduinoTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  000070ce  00007162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000070ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d8  00800218  00800218  0000727a  2**0
                  ALLOC
  3 .stab         0000384c  00000000  00000000  0000727c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ec4  00000000  00000000  0000aac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004a0  00000000  00000000  0000b990  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000144c1  00000000  00000000  0000be30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c40  00000000  00000000  000202f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003942  00000000  00000000  00023f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002668  00000000  00000000  00027874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000041f0  00000000  00000000  00029edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c453  00000000  00000000  0002e0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  0003a51f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__vector_18>
      4c:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__vector_19>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000068 <digital_pin_to_timer_PGM>:
      68:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      78:	00 00 00 00                                         ....

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	d0 01       	movw	r26, r0
      c4:	98 04       	cpc	r9, r8
      c6:	bf 06       	cpc	r11, r31
      c8:	1f 10       	cpse	r1, r15
      ca:	fd 10       	cpse	r15, r13
      cc:	c9 25       	eor	r28, r9
      ce:	2b 29       	or	r18, r11

000000d0 <__ctors_end>:
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d8 e0       	ldi	r29, 0x08	; 8
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
      dc:	12 e0       	ldi	r17, 0x02	; 2
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	ee ec       	ldi	r30, 0xCE	; 206
      e4:	f0 e7       	ldi	r31, 0x70	; 112
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
      e8:	05 90       	lpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a8 31       	cpi	r26, 0x18	; 24
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
      f2:	14 e0       	ldi	r17, 0x04	; 4
      f4:	a8 e1       	ldi	r26, 0x18	; 24
      f6:	b2 e0       	ldi	r27, 0x02	; 2
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	a0 3f       	cpi	r26, 0xF0	; 240
      fe:	b1 07       	cpc	r27, r17
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>

00000102 <__do_global_ctors>:
     102:	10 e0       	ldi	r17, 0x00	; 0
     104:	c0 ed       	ldi	r28, 0xD0	; 208
     106:	d0 e0       	ldi	r29, 0x00	; 0
     108:	04 c0       	rjmp	.+8      	; 0x112 <__do_global_ctors+0x10>
     10a:	22 97       	sbiw	r28, 0x02	; 2
     10c:	fe 01       	movw	r30, r28
     10e:	0e 94 42 34 	call	0x6884	; 0x6884 <__tablejump__>
     112:	c2 3c       	cpi	r28, 0xC2	; 194
     114:	d1 07       	cpc	r29, r17
     116:	c9 f7       	brne	.-14     	; 0x10a <__do_global_ctors+0x8>
     118:	0e 94 c9 01 	call	0x392	; 0x392 <main>
     11c:	0c 94 65 38 	jmp	0x70ca	; 0x70ca <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <setup>:
	}
        
	return 0;
}

void setup() {
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
	init();
     130:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <init>

	Serial.begin(115200);
     134:	88 e2       	ldi	r24, 0x28	; 40
     136:	94 e0       	ldi	r25, 0x04	; 4
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	52 ec       	ldi	r21, 0xC2	; 194
     13c:	61 e0       	ldi	r22, 0x01	; 1
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <_ZN14HardwareSerial5beginEm>

	//gyroDef = new AnalogGyroDefinition();
	//gyroDef->pin = 0;

	// Controls the robot status light.
	RslModelSection * rsl = new RslModelSection();
     144:	89 e0       	ldi	r24, 0x09	; 9
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	0e 94 08 11 	call	0x2210	; 0x2210 <_Znwj>
     14c:	8c 01       	movw	r16, r24
     14e:	0e 94 c6 2b 	call	0x578c	; 0x578c <_ZN15RslModelSectionC1Ev>



void init(){
	int result;
	if (isDhcp){
     152:	80 91 22 02 	lds	r24, 0x0222
     156:	88 23       	and	r24, r24
     158:	41 f0       	breq	.+16     	; 0x16a <setup+0x46>
		result = Ethernet.begin(macAddress);
     15a:	86 ef       	ldi	r24, 0xF6	; 246
     15c:	93 e0       	ldi	r25, 0x03	; 3
     15e:	6c e1       	ldi	r22, 0x1C	; 28
     160:	72 e0       	ldi	r23, 0x02	; 2
     162:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_ZN13EthernetClass5beginEPh>
     166:	7c 01       	movw	r14, r24
     168:	03 c0       	rjmp	.+6      	; 0x170 <setup+0x4c>
	}
	else{
		result = -1;//Ethernet.begin(macAddress, ipAddress);
     16a:	ee 24       	eor	r14, r14
     16c:	ea 94       	dec	r14
     16e:	fe 2c       	mov	r15, r14
	}
	
	Udp.begin(receivePort);
     170:	c1 e4       	ldi	r28, 0x41	; 65
     172:	d2 e0       	ldi	r29, 0x02	; 2
     174:	60 91 2a 02 	lds	r22, 0x022A
     178:	70 91 2b 02 	lds	r23, 0x022B
     17c:	ce 01       	movw	r24, r28
     17e:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZN11EthernetUDP5beginEj>
	initSuccessful = result == 0;
     182:	68 97       	sbiw	r28, 0x18	; 24
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	e1 14       	cp	r14, r1
     188:	f1 04       	cpc	r15, r1
     18a:	09 f0       	breq	.+2      	; 0x18e <setup+0x6a>
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	88 83       	st	Y, r24
	//
	//// Controls data acquisition from the quadrature shaft encoders.
	//EncoderModelSection *enc = new EncoderModelSection();

	beagleComm.init();
	beagleComm.robotModel.addSection(rsl);
     190:	8d e2       	ldi	r24, 0x2D	; 45
     192:	92 e0       	ldi	r25, 0x02	; 2
     194:	b8 01       	movw	r22, r16
     196:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <_ZN10RobotModel10addSectionEP17RobotModelSection>
	//beagleComm.robotModel.addSection(analog);
	//beagleComm.robotModel.addSection(dio);
	//beagleComm.robotModel.addSection(dutyCycle);
	//beagleComm.robotModel.addSection(enc);

	Serial.println("Ready.");
     19a:	88 e2       	ldi	r24, 0x28	; 40
     19c:	94 e0       	ldi	r25, 0x04	; 4
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	71 e0       	ldi	r23, 0x01	; 1
     1a2:	0e 94 10 12 	call	0x2420	; 0x2420 <_ZN5Print7printlnEPKc>
}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	1f 91       	pop	r17
     1ac:	0f 91       	pop	r16
     1ae:	ff 90       	pop	r15
     1b0:	ef 90       	pop	r14
     1b2:	08 95       	ret

000001b4 <loop>:

unsigned long startMillis = 0;

void loop() {
     1b4:	4f 92       	push	r4
     1b6:	5f 92       	push	r5
     1b8:	6f 92       	push	r6
     1ba:	7f 92       	push	r7
     1bc:	8f 92       	push	r8
     1be:	9f 92       	push	r9
     1c0:	af 92       	push	r10
     1c2:	bf 92       	push	r11
     1c4:	cf 92       	push	r12
     1c6:	df 92       	push	r13
     1c8:	ef 92       	push	r14
     1ca:	ff 92       	push	r15
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
     1d8:	28 97       	sbiw	r28, 0x08	; 8
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	f8 94       	cli
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	cd bf       	out	0x3d, r28	; 61
}

void poll(){
	unsigned long now = millis();
     1e4:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
     1e8:	2b 01       	movw	r4, r22
     1ea:	3c 01       	movw	r6, r24
	//Handle rollover. Vehicle should never be on that long, but...
	if (now < lastDataReceived) {
     1ec:	80 91 ec 03 	lds	r24, 0x03EC
     1f0:	90 91 ed 03 	lds	r25, 0x03ED
     1f4:	a0 91 ee 03 	lds	r26, 0x03EE
     1f8:	b0 91 ef 03 	lds	r27, 0x03EF
     1fc:	48 16       	cp	r4, r24
     1fe:	59 06       	cpc	r5, r25
     200:	6a 06       	cpc	r6, r26
     202:	7b 06       	cpc	r7, r27
     204:	40 f4       	brcc	.+16     	; 0x216 <loop+0x62>
		lastDataReceived = 0;
     206:	10 92 ec 03 	sts	0x03EC, r1
     20a:	10 92 ed 03 	sts	0x03ED, r1
     20e:	10 92 ee 03 	sts	0x03EE, r1
     212:	10 92 ef 03 	sts	0x03EF, r1
	}
	
	int packetSize = Udp.parsePacket();
     216:	81 e4       	ldi	r24, 0x41	; 65
     218:	92 e0       	ldi	r25, 0x02	; 2
     21a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN11EthernetUDP11parsePacketEv>
     21e:	8c 01       	movw	r16, r24
	if (packetSize > 0){
     220:	18 16       	cp	r1, r24
     222:	19 06       	cpc	r1, r25
     224:	0c f0       	brlt	.+2      	; 0x228 <loop+0x74>
     226:	6d c0       	rjmp	.+218    	; 0x302 <loop+0x14e>
		Serial.print("Received:");
     228:	0f 2e       	mov	r0, r31
     22a:	f8 e2       	ldi	r31, 0x28	; 40
     22c:	af 2e       	mov	r10, r31
     22e:	f4 e0       	ldi	r31, 0x04	; 4
     230:	bf 2e       	mov	r11, r31
     232:	f0 2d       	mov	r31, r0
     234:	c5 01       	movw	r24, r10
     236:	67 e0       	ldi	r22, 0x07	; 7
     238:	71 e0       	ldi	r23, 0x01	; 1
     23a:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN5Print5printEPKc>
		Serial.print(packetSize);
     23e:	c5 01       	movw	r24, r10
     240:	b8 01       	movw	r22, r16
     242:	4a e0       	ldi	r20, 0x0A	; 10
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN5Print5printEii>
		Udp.read(receiveBuffer, 200);
     24a:	0f 2e       	mov	r0, r31
     24c:	f1 e4       	ldi	r31, 0x41	; 65
     24e:	cf 2e       	mov	r12, r31
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	df 2e       	mov	r13, r31
     254:	f0 2d       	mov	r31, r0
     256:	0f 2e       	mov	r0, r31
     258:	fb e1       	ldi	r31, 0x1B	; 27
     25a:	ef 2e       	mov	r14, r31
     25c:	ff 24       	eor	r15, r15
     25e:	f0 2d       	mov	r31, r0
     260:	ec 0c       	add	r14, r12
     262:	fd 1c       	adc	r15, r13
     264:	c6 01       	movw	r24, r12
     266:	b7 01       	movw	r22, r14
     268:	48 ec       	ldi	r20, 0xC8	; 200
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
		
		robotModel.update(receiveBuffer, 0, packetSize);
     270:	0f 2e       	mov	r0, r31
     272:	fc ee       	ldi	r31, 0xEC	; 236
     274:	8f 2e       	mov	r8, r31
     276:	ff ef       	ldi	r31, 0xFF	; 255
     278:	9f 2e       	mov	r9, r31
     27a:	f0 2d       	mov	r31, r0
     27c:	8c 0c       	add	r8, r12
     27e:	9d 1c       	adc	r9, r13
     280:	c4 01       	movw	r24, r8
     282:	b7 01       	movw	r22, r14
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	50 e0       	ldi	r21, 0x00	; 0
     288:	98 01       	movw	r18, r16
     28a:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <_ZN10RobotModel6updateEPhjj>
		
		unsigned int transmitLength = 0;
     28e:	18 86       	std	Y+8, r1	; 0x08
     290:	1f 82       	std	Y+7, r1	; 0x07
		robotModel.getStatus(transmitBuffer, &transmitLength);
     292:	04 e2       	ldi	r16, 0x24	; 36
     294:	13 e0       	ldi	r17, 0x03	; 3
     296:	c4 01       	movw	r24, r8
     298:	b8 01       	movw	r22, r16
     29a:	ae 01       	movw	r20, r28
     29c:	49 5f       	subi	r20, 0xF9	; 249
     29e:	5f 4f       	sbci	r21, 0xFF	; 255
     2a0:	0e 94 a7 2a 	call	0x554e	; 0x554e <_ZN10RobotModel9getStatusEPhPj>
		
		Serial.print(" Sending:");
     2a4:	c5 01       	movw	r24, r10
     2a6:	61 e1       	ldi	r22, 0x11	; 17
     2a8:	71 e0       	ldi	r23, 0x01	; 1
     2aa:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN5Print5printEPKc>
		Serial.println(transmitLength);
     2ae:	6f 81       	ldd	r22, Y+7	; 0x07
     2b0:	78 85       	ldd	r23, Y+8	; 0x08
     2b2:	c5 01       	movw	r24, r10
     2b4:	4a e0       	ldi	r20, 0x0A	; 10
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	0e 94 e6 12 	call	0x25cc	; 0x25cc <_ZN5Print7printlnEji>

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
     2bc:	83 ea       	ldi	r24, 0xA3	; 163
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	9a 83       	std	Y+2, r25	; 0x02
     2c2:	89 83       	std	Y+1, r24	; 0x01
     2c4:	80 91 52 02 	lds	r24, 0x0252
     2c8:	90 91 53 02 	lds	r25, 0x0253
     2cc:	a0 91 54 02 	lds	r26, 0x0254
     2d0:	b0 91 55 02 	lds	r27, 0x0255
     2d4:	8b 83       	std	Y+3, r24	; 0x03
     2d6:	9c 83       	std	Y+4, r25	; 0x04
     2d8:	ad 83       	std	Y+5, r26	; 0x05
     2da:	be 83       	std	Y+6, r27	; 0x06
		
		Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
     2dc:	40 91 56 02 	lds	r20, 0x0256
     2e0:	50 91 57 02 	lds	r21, 0x0257
     2e4:	c6 01       	movw	r24, r12
     2e6:	be 01       	movw	r22, r28
     2e8:	6f 5f       	subi	r22, 0xFF	; 255
     2ea:	7f 4f       	sbci	r23, 0xFF	; 255
     2ec:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
		Udp.write(transmitBuffer, transmitLength);
     2f0:	4f 81       	ldd	r20, Y+7	; 0x07
     2f2:	58 85       	ldd	r21, Y+8	; 0x08
     2f4:	c6 01       	movw	r24, r12
     2f6:	b8 01       	movw	r22, r16
     2f8:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>
		Udp.endPacket();
     2fc:	c6 01       	movw	r24, r12
     2fe:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN11EthernetUDP9endPacketEv>
	}
	
	unsigned long safeTime = lastDataReceived + RECEIVE_SAFTEY_DELAY;
     302:	80 91 ec 03 	lds	r24, 0x03EC
     306:	90 91 ed 03 	lds	r25, 0x03ED
     30a:	a0 91 ee 03 	lds	r26, 0x03EE
     30e:	b0 91 ef 03 	lds	r27, 0x03EF
     312:	8c 50       	subi	r24, 0x0C	; 12
     314:	9e 4f       	sbci	r25, 0xFE	; 254
     316:	af 4f       	sbci	r26, 0xFF	; 255
     318:	bf 4f       	sbci	r27, 0xFF	; 255
	isConnected = now > safeTime;
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	84 15       	cp	r24, r4
     31e:	95 05       	cpc	r25, r5
     320:	a6 05       	cpc	r26, r6
     322:	b7 05       	cpc	r27, r7
     324:	08 f0       	brcs	.+2      	; 0x328 <loop+0x174>
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	60 93 2c 02 	sts	0x022C, r22
	robotModel.loop(isConnected);
     32c:	8d e2       	ldi	r24, 0x2D	; 45
     32e:	92 e0       	ldi	r25, 0x02	; 2
     330:	0e 94 4a 2b 	call	0x5694	; 0x5694 <_ZN10RobotModel4loopEb>
	beagleComm.poll();

	unsigned long now = millis();
     334:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
     338:	ab 01       	movw	r20, r22
     33a:	bc 01       	movw	r22, r24
	if (startMillis == 0)
     33c:	80 91 18 02 	lds	r24, 0x0218
     340:	90 91 19 02 	lds	r25, 0x0219
     344:	a0 91 1a 02 	lds	r26, 0x021A
     348:	b0 91 1b 02 	lds	r27, 0x021B
     34c:	00 97       	sbiw	r24, 0x00	; 0
     34e:	a1 05       	cpc	r26, r1
     350:	b1 05       	cpc	r27, r1
     352:	41 f4       	brne	.+16     	; 0x364 <loop+0x1b0>
	startMillis = now;
     354:	40 93 18 02 	sts	0x0218, r20
     358:	50 93 19 02 	sts	0x0219, r21
     35c:	60 93 1a 02 	sts	0x021A, r22
     360:	70 93 1b 02 	sts	0x021B, r23

	//bool cal = (now - startMillis < 1000);
	//gyroDef->update(cal);
	//Serial.println((long) gyroDef->value);
}
     364:	28 96       	adiw	r28, 0x08	; 8
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	bf 90       	pop	r11
     382:	af 90       	pop	r10
     384:	9f 90       	pop	r9
     386:	8f 90       	pop	r8
     388:	7f 90       	pop	r7
     38a:	6f 90       	pop	r6
     38c:	5f 90       	pop	r5
     38e:	4f 90       	pop	r4
     390:	08 95       	ret

00000392 <main>:
UdpComms beagleComm;

//AnalogGyroDefinition * gyroDef;
int main(void)
{
	init();
     392:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <init>

	/*#if defined(USBCON)
	USBDevice.attach();
	#endif*/
	
	setup();
     396:	0e 94 92 00 	call	0x124	; 0x124 <setup>
    
	for (;;) {
		loop();
     39a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <loop>
     39e:	fd cf       	rjmp	.-6      	; 0x39a <main+0x8>

000003a0 <_GLOBAL__sub_I_beagleComm>:
	startMillis = now;

	//bool cal = (now - startMillis < 1000);
	//gyroDef->update(cal);
	//Serial.println((long) gyroDef->value);
}
     3a0:	0f 93       	push	r16
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     3a6:	80 ef       	ldi	r24, 0xF0	; 240
     3a8:	93 e0       	ldi	r25, 0x03	; 3
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	00 e0       	ldi	r16, 0x00	; 0
     3b2:	0e 94 b2 10 	call	0x2164	; 0x2164 <_ZN9IPAddressC1Ehhhh>
#include <Ethernet\EthernetUdp.h>
#include <RobotModel\RobotModel.h>

class UdpComms {
	public:
UdpComms(){}
     3b6:	c3 e2       	ldi	r28, 0x23	; 35
     3b8:	d2 e0       	ldi	r29, 0x02	; 2
     3ba:	ce 01       	movw	r24, r28
     3bc:	0e 94 a8 10 	call	0x2150	; 0x2150 <_ZN9IPAddressC1Ev>
     3c0:	ce 01       	movw	r24, r28
     3c2:	0a 96       	adiw	r24, 0x0a	; 10
     3c4:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <_ZN10RobotModelC1Ev>
     3c8:	ce 01       	movw	r24, r28
     3ca:	4e 96       	adiw	r24, 0x1e	; 30
     3cc:	0e 94 4b 06 	call	0xc96	; 0xc96 <_ZN11EthernetUDPC1Ev>
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	0f 91       	pop	r16
     3d6:	08 95       	ret

000003d8 <_ZN13EthernetClass5beginEPh>:
  0, 0, 0, 0 };
uint16_t EthernetClass::_server_port[MAX_SOCK_NUM] = { 
  0, 0, 0, 0 };

int EthernetClass::begin(uint8_t *mac_address)
{
     3d8:	cf 92       	push	r12
     3da:	df 92       	push	r13
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	6e 97       	sbiw	r28, 0x1e	; 30
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	6c 01       	movw	r12, r24
     3fa:	7b 01       	movw	r14, r22
  _dhcp = new DhcpClass();
     3fc:	82 e6       	ldi	r24, 0x62	; 98
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 08 11 	call	0x2210	; 0x2210 <_Znwj>
     404:	8c 01       	movw	r16, r24
     406:	82 e6       	ldi	r24, 0x62	; 98
     408:	f8 01       	movw	r30, r16
     40a:	11 92       	st	Z+, r1
     40c:	8a 95       	dec	r24
     40e:	e9 f7       	brne	.-6      	; 0x40a <_ZN13EthernetClass5beginEPh+0x32>
	uint8_t  siaddr[4];
	uint8_t  giaddr[4];
	uint8_t  chaddr[6];
}RIP_MSG_FIXED;

class DhcpClass {
     410:	c8 01       	movw	r24, r16
     412:	89 5b       	subi	r24, 0xB9	; 185
     414:	9f 4f       	sbci	r25, 0xFF	; 255
     416:	0e 94 4b 06 	call	0xc96	; 0xc96 <_ZN11EthernetUDPC1Ev>
     41a:	f6 01       	movw	r30, r12
     41c:	17 83       	std	Z+7, r17	; 0x07
     41e:	06 83       	std	Z+6, r16	; 0x06


  // Initialise the basic info
  W5100.init();
     420:	88 e1       	ldi	r24, 0x18	; 24
     422:	94 e0       	ldi	r25, 0x04	; 4
     424:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZN10W5100Class4initEv>

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
     428:	89 e0       	ldi	r24, 0x09	; 9
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	b7 01       	movw	r22, r14
     42e:	46 e0       	ldi	r20, 0x06	; 6
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
  W5100.setMACAddress(mac_address);
  W5100.setIPAddress(IPAddress(0,0,0,0).raw_address());
     436:	ce 01       	movw	r24, r28
     438:	49 96       	adiw	r24, 0x19	; 25
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	00 e0       	ldi	r16, 0x00	; 0
     442:	0e 94 b2 10 	call	0x2164	; 0x2164 <_ZN9IPAddressC1Ehhhh>
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
     446:	8f e0       	ldi	r24, 0x0F	; 15
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	be 01       	movw	r22, r28
     44c:	65 5e       	subi	r22, 0xE5	; 229
     44e:	7f 4f       	sbci	r23, 0xFF	; 255
     450:	44 e0       	ldi	r20, 0x04	; 4
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>

  // Now try to get our config info from a DHCP server
  int ret = _dhcp->beginWithDHCP(mac_address);
     458:	f6 01       	movw	r30, r12
     45a:	86 81       	ldd	r24, Z+6	; 0x06
     45c:	97 81       	ldd	r25, Z+7	; 0x07
     45e:	b7 01       	movw	r22, r14
     460:	20 e6       	ldi	r18, 0x60	; 96
     462:	3a ee       	ldi	r19, 0xEA	; 234
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	0f 2e       	mov	r0, r31
     46a:	f0 ea       	ldi	r31, 0xA0	; 160
     46c:	ef 2e       	mov	r14, r31
     46e:	ff e0       	ldi	r31, 0x0F	; 15
     470:	ff 2e       	mov	r15, r31
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	0f 2f       	mov	r16, r31
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	1f 2f       	mov	r17, r31
     47a:	f0 2d       	mov	r31, r0
     47c:	0e 94 7d 25 	call	0x4afa	; 0x4afa <_ZN9DhcpClass13beginWithDHCPEPhmm>
     480:	8c 01       	movw	r16, r24
  if(ret == 1)
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	91 05       	cpc	r25, r1
     486:	09 f0       	breq	.+2      	; 0x48a <_ZN13EthernetClass5beginEPh+0xb2>
     488:	40 c0       	rjmp	.+128    	; 0x50a <_ZN13EthernetClass5beginEPh+0x132>
  {
    // We've successfully found a DHCP server and got our configuration info, so set things
    // accordingly
    W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
     48a:	f6 01       	movw	r30, r12
     48c:	66 81       	ldd	r22, Z+6	; 0x06
     48e:	77 81       	ldd	r23, Z+7	; 0x07
     490:	ce 01       	movw	r24, r28
     492:	43 96       	adiw	r24, 0x13	; 19
     494:	0e 94 60 21 	call	0x42c0	; 0x42c0 <_ZN9DhcpClass10getLocalIpEv>
     498:	8f e0       	ldi	r24, 0x0F	; 15
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	be 01       	movw	r22, r28
     49e:	6b 5e       	subi	r22, 0xEB	; 235
     4a0:	7f 4f       	sbci	r23, 0xFF	; 255
     4a2:	44 e0       	ldi	r20, 0x04	; 4
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
    W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
     4aa:	f6 01       	movw	r30, r12
     4ac:	66 81       	ldd	r22, Z+6	; 0x06
     4ae:	77 81       	ldd	r23, Z+7	; 0x07
     4b0:	ce 01       	movw	r24, r28
     4b2:	0d 96       	adiw	r24, 0x0d	; 13
     4b4:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN9DhcpClass12getGatewayIpEv>
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	be 01       	movw	r22, r28
     4be:	61 5f       	subi	r22, 0xF1	; 241
     4c0:	7f 4f       	sbci	r23, 0xFF	; 255
     4c2:	44 e0       	ldi	r20, 0x04	; 4
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
    W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
     4ca:	f6 01       	movw	r30, r12
     4cc:	66 81       	ldd	r22, Z+6	; 0x06
     4ce:	77 81       	ldd	r23, Z+7	; 0x07
     4d0:	ce 01       	movw	r24, r28
     4d2:	07 96       	adiw	r24, 0x07	; 7
     4d4:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <_ZN9DhcpClass13getSubnetMaskEv>
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
     4d8:	85 e0       	ldi	r24, 0x05	; 5
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	be 01       	movw	r22, r28
     4de:	67 5f       	subi	r22, 0xF7	; 247
     4e0:	7f 4f       	sbci	r23, 0xFF	; 255
     4e2:	44 e0       	ldi	r20, 0x04	; 4
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
    _dnsServerAddress = _dhcp->getDnsServerIp();
     4ea:	f6 01       	movw	r30, r12
     4ec:	66 81       	ldd	r22, Z+6	; 0x06
     4ee:	77 81       	ldd	r23, Z+7	; 0x07
     4f0:	ce 01       	movw	r24, r28
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	0e 94 8c 21 	call	0x4318	; 0x4318 <_ZN9DhcpClass14getDnsServerIpEv>

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
     4f8:	8b 81       	ldd	r24, Y+3	; 0x03
     4fa:	9c 81       	ldd	r25, Y+4	; 0x04
     4fc:	ad 81       	ldd	r26, Y+5	; 0x05
     4fe:	be 81       	ldd	r27, Y+6	; 0x06
     500:	f6 01       	movw	r30, r12
     502:	82 83       	std	Z+2, r24	; 0x02
     504:	93 83       	std	Z+3, r25	; 0x03
     506:	a4 83       	std	Z+4, r26	; 0x04
     508:	b5 83       	std	Z+5, r27	; 0x05
  }

  return ret;
}
     50a:	80 2f       	mov	r24, r16
     50c:	91 2f       	mov	r25, r17
     50e:	6e 96       	adiw	r28, 0x1e	; 30
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	1f 91       	pop	r17
     520:	0f 91       	pop	r16
     522:	ff 90       	pop	r15
     524:	ef 90       	pop	r14
     526:	df 90       	pop	r13
     528:	cf 90       	pop	r12
     52a:	08 95       	ret

0000052c <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
{
     52c:	8f 92       	push	r8
     52e:	9f 92       	push	r9
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	4c 01       	movw	r8, r24
     546:	6b 01       	movw	r12, r22
     548:	ea 01       	movw	r28, r20
     54a:	59 01       	movw	r10, r18
  W5100.init();
     54c:	88 e1       	ldi	r24, 0x18	; 24
     54e:	94 e0       	ldi	r25, 0x04	; 4
     550:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZN10W5100Class4initEv>
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
     554:	89 e0       	ldi	r24, 0x09	; 9
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	b6 01       	movw	r22, r12
     55a:	46 e0       	ldi	r20, 0x06	; 6
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
  W5100.setMACAddress(mac);
  W5100.setIPAddress(local_ip._address);
     562:	be 01       	movw	r22, r28
     564:	6e 5f       	subi	r22, 0xFE	; 254
     566:	7f 4f       	sbci	r23, 0xFF	; 255
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
     568:	8f e0       	ldi	r24, 0x0F	; 15
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	44 e0       	ldi	r20, 0x04	; 4
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
  W5100.setGatewayIp(gateway._address);
     574:	b8 01       	movw	r22, r16
     576:	6e 5f       	subi	r22, 0xFE	; 254
     578:	7f 4f       	sbci	r23, 0xFF	; 255
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	44 e0       	ldi	r20, 0x04	; 4
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
  W5100.setSubnetMask(subnet._address);
     586:	b7 01       	movw	r22, r14
     588:	6e 5f       	subi	r22, 0xFE	; 254
     58a:	7f 4f       	sbci	r23, 0xFF	; 255
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
     58c:	85 e0       	ldi	r24, 0x05	; 5
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	44 e0       	ldi	r20, 0x04	; 4
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
     598:	f5 01       	movw	r30, r10
     59a:	82 81       	ldd	r24, Z+2	; 0x02
     59c:	93 81       	ldd	r25, Z+3	; 0x03
     59e:	a4 81       	ldd	r26, Z+4	; 0x04
     5a0:	b5 81       	ldd	r27, Z+5	; 0x05
     5a2:	f4 01       	movw	r30, r8
     5a4:	82 83       	std	Z+2, r24	; 0x02
     5a6:	93 83       	std	Z+3, r25	; 0x03
     5a8:	a4 83       	std	Z+4, r26	; 0x04
     5aa:	b5 83       	std	Z+5, r27	; 0x05
  _dnsServerAddress = dns_server;
}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	bf 90       	pop	r11
     5be:	af 90       	pop	r10
     5c0:	9f 90       	pop	r9
     5c2:	8f 90       	pop	r8
     5c4:	08 95       	ret

000005c6 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>:
  gateway[3] = 1;
  begin(mac_address, local_ip, dns_server, gateway);
}

void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip, IPAddress dns_server, IPAddress gateway)
{
     5c6:	6f 92       	push	r6
     5c8:	7f 92       	push	r7
     5ca:	8f 92       	push	r8
     5cc:	9f 92       	push	r9
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	6e 97       	sbiw	r28, 0x1e	; 30
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	4c 01       	movw	r8, r24
     5f4:	3b 01       	movw	r6, r22
     5f6:	7a 01       	movw	r14, r20
     5f8:	69 01       	movw	r12, r18
     5fa:	58 01       	movw	r10, r16
  IPAddress subnet(255, 255, 255, 0);
     5fc:	ce 01       	movw	r24, r28
     5fe:	49 96       	adiw	r24, 0x19	; 25
     600:	6f ef       	ldi	r22, 0xFF	; 255
     602:	4f ef       	ldi	r20, 0xFF	; 255
     604:	2f ef       	ldi	r18, 0xFF	; 255
     606:	00 e0       	ldi	r16, 0x00	; 0
     608:	0e 94 b2 10 	call	0x2164	; 0x2164 <_ZN9IPAddressC1Ehhhh>
     60c:	23 ea       	ldi	r18, 0xA3	; 163
     60e:	31 e0       	ldi	r19, 0x01	; 1
     610:	3c 8b       	std	Y+20, r19	; 0x14
     612:	2b 8b       	std	Y+19, r18	; 0x13
     614:	f7 01       	movw	r30, r14
     616:	82 81       	ldd	r24, Z+2	; 0x02
     618:	93 81       	ldd	r25, Z+3	; 0x03
     61a:	a4 81       	ldd	r26, Z+4	; 0x04
     61c:	b5 81       	ldd	r27, Z+5	; 0x05
     61e:	8d 8b       	std	Y+21, r24	; 0x15
     620:	9e 8b       	std	Y+22, r25	; 0x16
     622:	af 8b       	std	Y+23, r26	; 0x17
     624:	b8 8f       	std	Y+24, r27	; 0x18
     626:	3e 87       	std	Y+14, r19	; 0x0e
     628:	2d 87       	std	Y+13, r18	; 0x0d
     62a:	f6 01       	movw	r30, r12
     62c:	82 81       	ldd	r24, Z+2	; 0x02
     62e:	93 81       	ldd	r25, Z+3	; 0x03
     630:	a4 81       	ldd	r26, Z+4	; 0x04
     632:	b5 81       	ldd	r27, Z+5	; 0x05
     634:	8f 87       	std	Y+15, r24	; 0x0f
     636:	98 8b       	std	Y+16, r25	; 0x10
     638:	a9 8b       	std	Y+17, r26	; 0x11
     63a:	ba 8b       	std	Y+18, r27	; 0x12
     63c:	38 87       	std	Y+8, r19	; 0x08
     63e:	2f 83       	std	Y+7, r18	; 0x07
     640:	f5 01       	movw	r30, r10
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	a4 81       	ldd	r26, Z+4	; 0x04
     648:	b5 81       	ldd	r27, Z+5	; 0x05
     64a:	89 87       	std	Y+9, r24	; 0x09
     64c:	9a 87       	std	Y+10, r25	; 0x0a
     64e:	ab 87       	std	Y+11, r26	; 0x0b
     650:	bc 87       	std	Y+12, r27	; 0x0c
     652:	3a 83       	std	Y+2, r19	; 0x02
     654:	29 83       	std	Y+1, r18	; 0x01
     656:	8b 8d       	ldd	r24, Y+27	; 0x1b
     658:	9c 8d       	ldd	r25, Y+28	; 0x1c
     65a:	ad 8d       	ldd	r26, Y+29	; 0x1d
     65c:	be 8d       	ldd	r27, Y+30	; 0x1e
     65e:	8b 83       	std	Y+3, r24	; 0x03
     660:	9c 83       	std	Y+4, r25	; 0x04
     662:	ad 83       	std	Y+5, r26	; 0x05
     664:	be 83       	std	Y+6, r27	; 0x06
  begin(mac_address, local_ip, dns_server, gateway, subnet);
     666:	c4 01       	movw	r24, r8
     668:	b3 01       	movw	r22, r6
     66a:	ae 01       	movw	r20, r28
     66c:	4d 5e       	subi	r20, 0xED	; 237
     66e:	5f 4f       	sbci	r21, 0xFF	; 255
     670:	9e 01       	movw	r18, r28
     672:	23 5f       	subi	r18, 0xF3	; 243
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	8e 01       	movw	r16, r28
     678:	09 5f       	subi	r16, 0xF9	; 249
     67a:	1f 4f       	sbci	r17, 0xFF	; 255
     67c:	7e 01       	movw	r14, r28
     67e:	08 94       	sec
     680:	e1 1c       	adc	r14, r1
     682:	f1 1c       	adc	r15, r1
     684:	0e 94 96 02 	call	0x52c	; 0x52c <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
}
     688:	6e 96       	adiw	r28, 0x1e	; 30
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	cf 90       	pop	r12
     6a4:	bf 90       	pop	r11
     6a6:	af 90       	pop	r10
     6a8:	9f 90       	pop	r9
     6aa:	8f 90       	pop	r8
     6ac:	7f 90       	pop	r7
     6ae:	6f 90       	pop	r6
     6b0:	08 95       	ret

000006b2 <_ZN13EthernetClass5beginEPh9IPAddressS1_>:
  dns_server[3] = 1;
  begin(mac_address, local_ip, dns_server);
}

void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip, IPAddress dns_server)
{
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	68 97       	sbiw	r28, 0x18	; 24
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	7b 01       	movw	r14, r22
     6d0:	da 01       	movw	r26, r20
     6d2:	12 96       	adiw	r26, 0x02	; 2
     6d4:	4d 91       	ld	r20, X+
     6d6:	5d 91       	ld	r21, X+
     6d8:	6d 91       	ld	r22, X+
     6da:	7c 91       	ld	r23, X
     6dc:	15 97       	sbiw	r26, 0x05	; 5
     6de:	4d 8b       	std	Y+21, r20	; 0x15
     6e0:	5e 8b       	std	Y+22, r21	; 0x16
     6e2:	6f 8b       	std	Y+23, r22	; 0x17
     6e4:	78 8f       	std	Y+24, r23	; 0x18
     6e6:	e3 ea       	ldi	r30, 0xA3	; 163
     6e8:	f1 e0       	ldi	r31, 0x01	; 1
     6ea:	fe 87       	std	Y+14, r31	; 0x0e
     6ec:	ed 87       	std	Y+13, r30	; 0x0d
     6ee:	4f 87       	std	Y+15, r20	; 0x0f
     6f0:	58 8b       	std	Y+16, r21	; 0x10
     6f2:	69 8b       	std	Y+17, r22	; 0x11
     6f4:	7a 8b       	std	Y+18, r23	; 0x12
     6f6:	f8 87       	std	Y+8, r31	; 0x08
     6f8:	ef 83       	std	Y+7, r30	; 0x07
     6fa:	d9 01       	movw	r26, r18
     6fc:	12 96       	adiw	r26, 0x02	; 2
     6fe:	0d 91       	ld	r16, X+
     700:	1d 91       	ld	r17, X+
     702:	2d 91       	ld	r18, X+
     704:	3c 91       	ld	r19, X
     706:	15 97       	sbiw	r26, 0x05	; 5
     708:	09 87       	std	Y+9, r16	; 0x09
     70a:	1a 87       	std	Y+10, r17	; 0x0a
     70c:	2b 87       	std	Y+11, r18	; 0x0b
     70e:	3c 87       	std	Y+12, r19	; 0x0c
     710:	fa 83       	std	Y+2, r31	; 0x02
     712:	e9 83       	std	Y+1, r30	; 0x01
     714:	4b 83       	std	Y+3, r20	; 0x03
     716:	5c 83       	std	Y+4, r21	; 0x04
     718:	6d 83       	std	Y+5, r22	; 0x05
     71a:	7e 83       	std	Y+6, r23	; 0x06
     71c:	21 e0       	ldi	r18, 0x01	; 1
     71e:	2e 83       	std	Y+6, r18	; 0x06
  // Assume the gateway will be the machine on the same network as the local IP
  // but with last octet being '1'
  IPAddress gateway = local_ip;
  gateway[3] = 1;
  begin(mac_address, local_ip, dns_server, gateway);
     720:	b7 01       	movw	r22, r14
     722:	ae 01       	movw	r20, r28
     724:	43 5f       	subi	r20, 0xF3	; 243
     726:	5f 4f       	sbci	r21, 0xFF	; 255
     728:	9e 01       	movw	r18, r28
     72a:	29 5f       	subi	r18, 0xF9	; 249
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	8e 01       	movw	r16, r28
     730:	0f 5f       	subi	r16, 0xFF	; 255
     732:	1f 4f       	sbci	r17, 0xFF	; 255
     734:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>
}
     738:	68 96       	adiw	r28, 0x18	; 24
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	08 95       	ret

00000752 <_ZN13EthernetClass5beginEPh9IPAddress>:

  return ret;
}

void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip)
{
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	62 97       	sbiw	r28, 0x12	; 18
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	fb 01       	movw	r30, r22
     768:	da 01       	movw	r26, r20
     76a:	12 96       	adiw	r26, 0x02	; 2
     76c:	4d 91       	ld	r20, X+
     76e:	5d 91       	ld	r21, X+
     770:	6d 91       	ld	r22, X+
     772:	7c 91       	ld	r23, X
     774:	15 97       	sbiw	r26, 0x05	; 5
     776:	4f 87       	std	Y+15, r20	; 0x0f
     778:	58 8b       	std	Y+16, r21	; 0x10
     77a:	69 8b       	std	Y+17, r22	; 0x11
     77c:	7a 8b       	std	Y+18, r23	; 0x12
     77e:	23 ea       	ldi	r18, 0xA3	; 163
     780:	31 e0       	ldi	r19, 0x01	; 1
     782:	38 87       	std	Y+8, r19	; 0x08
     784:	2f 83       	std	Y+7, r18	; 0x07
     786:	49 87       	std	Y+9, r20	; 0x09
     788:	5a 87       	std	Y+10, r21	; 0x0a
     78a:	6b 87       	std	Y+11, r22	; 0x0b
     78c:	7c 87       	std	Y+12, r23	; 0x0c
     78e:	3a 83       	std	Y+2, r19	; 0x02
     790:	29 83       	std	Y+1, r18	; 0x01
     792:	4b 83       	std	Y+3, r20	; 0x03
     794:	5c 83       	std	Y+4, r21	; 0x04
     796:	6d 83       	std	Y+5, r22	; 0x05
     798:	7e 83       	std	Y+6, r23	; 0x06
     79a:	21 e0       	ldi	r18, 0x01	; 1
     79c:	2e 83       	std	Y+6, r18	; 0x06
  // Assume the DNS server will be the machine on the same network as the local IP
  // but with last octet being '1'
  IPAddress dns_server = local_ip;
  dns_server[3] = 1;
  begin(mac_address, local_ip, dns_server);
     79e:	bf 01       	movw	r22, r30
     7a0:	ae 01       	movw	r20, r28
     7a2:	49 5f       	subi	r20, 0xF9	; 249
     7a4:	5f 4f       	sbci	r21, 0xFF	; 255
     7a6:	9e 01       	movw	r18, r28
     7a8:	2f 5f       	subi	r18, 0xFF	; 255
     7aa:	3f 4f       	sbci	r19, 0xFF	; 255
     7ac:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN13EthernetClass5beginEPh9IPAddressS1_>
}
     7b0:	62 96       	adiw	r28, 0x12	; 18
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <_ZN13EthernetClass8maintainEv>:
  W5100.setGatewayIp(gateway._address);
  W5100.setSubnetMask(subnet._address);
  _dnsServerAddress = dns_server;
}

int EthernetClass::maintain(){
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	68 97       	sbiw	r28, 0x18	; 24
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	7c 01       	movw	r14, r24
  int rc = DHCP_CHECK_NONE;
  if(_dhcp != NULL){
     7e0:	fc 01       	movw	r30, r24
     7e2:	86 81       	ldd	r24, Z+6	; 0x06
     7e4:	97 81       	ldd	r25, Z+7	; 0x07
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	09 f4       	brne	.+2      	; 0x7ec <_ZN13EthernetClass8maintainEv+0x2a>
     7ea:	4b c0       	rjmp	.+150    	; 0x882 <_ZN13EthernetClass8maintainEv+0xc0>
    //we have a pointer to dhcp, use it
    rc = _dhcp->checkLease();
     7ec:	0e 94 9b 24 	call	0x4936	; 0x4936 <_ZN9DhcpClass10checkLeaseEv>
     7f0:	8c 01       	movw	r16, r24
    switch ( rc ){
     7f2:	82 30       	cpi	r24, 0x02	; 2
     7f4:	91 05       	cpc	r25, r1
     7f6:	21 f0       	breq	.+8      	; 0x800 <_ZN13EthernetClass8maintainEv+0x3e>
     7f8:	84 30       	cpi	r24, 0x04	; 4
     7fa:	91 05       	cpc	r25, r1
     7fc:	09 f0       	breq	.+2      	; 0x800 <_ZN13EthernetClass8maintainEv+0x3e>
     7fe:	43 c0       	rjmp	.+134    	; 0x886 <_ZN13EthernetClass8maintainEv+0xc4>
        //nothing done
        break;
      case DHCP_CHECK_RENEW_OK:
      case DHCP_CHECK_REBIND_OK:
        //we might have got a new IP.
        W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
     800:	f7 01       	movw	r30, r14
     802:	66 81       	ldd	r22, Z+6	; 0x06
     804:	77 81       	ldd	r23, Z+7	; 0x07
     806:	ce 01       	movw	r24, r28
     808:	43 96       	adiw	r24, 0x13	; 19
     80a:	0e 94 60 21 	call	0x42c0	; 0x42c0 <_ZN9DhcpClass10getLocalIpEv>
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
     80e:	8f e0       	ldi	r24, 0x0F	; 15
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	be 01       	movw	r22, r28
     814:	6b 5e       	subi	r22, 0xEB	; 235
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	44 e0       	ldi	r20, 0x04	; 4
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
        W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
     820:	f7 01       	movw	r30, r14
     822:	66 81       	ldd	r22, Z+6	; 0x06
     824:	77 81       	ldd	r23, Z+7	; 0x07
     826:	ce 01       	movw	r24, r28
     828:	0d 96       	adiw	r24, 0x0d	; 13
     82a:	0e 94 76 21 	call	0x42ec	; 0x42ec <_ZN9DhcpClass12getGatewayIpEv>
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	be 01       	movw	r22, r28
     834:	61 5f       	subi	r22, 0xF1	; 241
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	44 e0       	ldi	r20, 0x04	; 4
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
        W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
     840:	f7 01       	movw	r30, r14
     842:	66 81       	ldd	r22, Z+6	; 0x06
     844:	77 81       	ldd	r23, Z+7	; 0x07
     846:	ce 01       	movw	r24, r28
     848:	07 96       	adiw	r24, 0x07	; 7
     84a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <_ZN9DhcpClass13getSubnetMaskEv>
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
     84e:	85 e0       	ldi	r24, 0x05	; 5
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	be 01       	movw	r22, r28
     854:	67 5f       	subi	r22, 0xF7	; 247
     856:	7f 4f       	sbci	r23, 0xFF	; 255
     858:	44 e0       	ldi	r20, 0x04	; 4
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
        _dnsServerAddress = _dhcp->getDnsServerIp();
     860:	f7 01       	movw	r30, r14
     862:	66 81       	ldd	r22, Z+6	; 0x06
     864:	77 81       	ldd	r23, Z+7	; 0x07
     866:	ce 01       	movw	r24, r28
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	0e 94 8c 21 	call	0x4318	; 0x4318 <_ZN9DhcpClass14getDnsServerIpEv>
     86e:	8b 81       	ldd	r24, Y+3	; 0x03
     870:	9c 81       	ldd	r25, Y+4	; 0x04
     872:	ad 81       	ldd	r26, Y+5	; 0x05
     874:	be 81       	ldd	r27, Y+6	; 0x06
     876:	f7 01       	movw	r30, r14
     878:	82 83       	std	Z+2, r24	; 0x02
     87a:	93 83       	std	Z+3, r25	; 0x03
     87c:	a4 83       	std	Z+4, r26	; 0x04
     87e:	b5 83       	std	Z+5, r27	; 0x05
     880:	02 c0       	rjmp	.+4      	; 0x886 <_ZN13EthernetClass8maintainEv+0xc4>
  W5100.setSubnetMask(subnet._address);
  _dnsServerAddress = dns_server;
}

int EthernetClass::maintain(){
  int rc = DHCP_CHECK_NONE;
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	10 e0       	ldi	r17, 0x00	; 0
        //this is actually a error, it will retry though
        break;
    }
  }
  return rc;
}
     886:	80 2f       	mov	r24, r16
     888:	91 2f       	mov	r25, r17
     88a:	68 96       	adiw	r28, 0x18	; 24
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	08 95       	ret

000008a4 <_ZN13EthernetClass7localIPEv>:

IPAddress EthernetClass::localIP()
{
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	ec 01       	movw	r28, r24
  IPAddress ret;
     8aa:	0e 94 a8 10 	call	0x2150	; 0x2150 <_ZN9IPAddressC1Ev>
  W5100.getIPAddress(ret.raw_address());
     8ae:	be 01       	movw	r22, r28
     8b0:	6e 5f       	subi	r22, 0xFE	; 254
     8b2:	7f 4f       	sbci	r23, 0xFF	; 255
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
     8b4:	8f e0       	ldi	r24, 0x0F	; 15
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	44 e0       	ldi	r20, 0x04	; 4
     8ba:	50 e0       	ldi	r21, 0x00	; 0
     8bc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN10W5100Class4readEjPhj>
  return ret;
}
     8c0:	ce 01       	movw	r24, r28
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <_ZN13EthernetClass10subnetMaskEv>:

IPAddress EthernetClass::subnetMask()
{
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	ec 01       	movw	r28, r24
  IPAddress ret;
     8ce:	0e 94 a8 10 	call	0x2150	; 0x2150 <_ZN9IPAddressC1Ev>
  W5100.getSubnetMask(ret.raw_address());
     8d2:	be 01       	movw	r22, r28
     8d4:	6e 5f       	subi	r22, 0xFE	; 254
     8d6:	7f 4f       	sbci	r23, 0xFF	; 255
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
     8d8:	85 e0       	ldi	r24, 0x05	; 5
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	44 e0       	ldi	r20, 0x04	; 4
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN10W5100Class4readEjPhj>
  return ret;
}
     8e4:	ce 01       	movw	r24, r28
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <_ZN13EthernetClass9gatewayIPEv>:

IPAddress EthernetClass::gatewayIP()
{
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	ec 01       	movw	r28, r24
  IPAddress ret;
     8f2:	0e 94 a8 10 	call	0x2150	; 0x2150 <_ZN9IPAddressC1Ev>
  W5100.getGatewayIp(ret.raw_address());
     8f6:	be 01       	movw	r22, r28
     8f8:	6e 5f       	subi	r22, 0xFE	; 254
     8fa:	7f 4f       	sbci	r23, 0xFF	; 255
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	44 e0       	ldi	r20, 0x04	; 4
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN10W5100Class4readEjPhj>
  return ret;
}
     908:	ce 01       	movw	r24, r28
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <_ZN13EthernetClass11dnsServerIPEv>:
     910:	23 ea       	ldi	r18, 0xA3	; 163
     912:	31 e0       	ldi	r19, 0x01	; 1
     914:	fc 01       	movw	r30, r24
     916:	31 83       	std	Z+1, r19	; 0x01
     918:	20 83       	st	Z, r18
     91a:	fb 01       	movw	r30, r22
     91c:	42 81       	ldd	r20, Z+2	; 0x02
     91e:	53 81       	ldd	r21, Z+3	; 0x03
     920:	64 81       	ldd	r22, Z+4	; 0x04
     922:	75 81       	ldd	r23, Z+5	; 0x05
     924:	fc 01       	movw	r30, r24
     926:	42 83       	std	Z+2, r20	; 0x02
     928:	53 83       	std	Z+3, r21	; 0x03
     92a:	64 83       	std	Z+4, r22	; 0x04
     92c:	75 83       	std	Z+5, r23	; 0x05

IPAddress EthernetClass::dnsServerIP()
{
  return _dnsServerAddress;
}
     92e:	08 95       	ret

00000930 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
     930:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     932:	8a e0       	ldi	r24, 0x0A	; 10
     934:	94 e0       	ldi	r25, 0x04	; 4
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	00 e0       	ldi	r16, 0x00	; 0
     93e:	0e 94 b2 10 	call	0x2164	; 0x2164 <_ZN9IPAddressC1Ehhhh>
#include "EthernetServer.h"
#include "Dhcp.h"

#define MAX_SOCK_NUM 4

class EthernetClass {
     942:	86 ef       	ldi	r24, 0xF6	; 246
     944:	93 e0       	ldi	r25, 0x03	; 3
     946:	0e 94 a8 10 	call	0x2150	; 0x2150 <_ZN9IPAddressC1Ev>
     94a:	0f 91       	pop	r16
     94c:	08 95       	ret

0000094e <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
     94e:	dc 01       	movw	r26, r24
     950:	ed 91       	ld	r30, X+
     952:	fc 91       	ld	r31, X
     954:	00 8c       	ldd	r0, Z+24	; 0x18
     956:	f1 8d       	ldd	r31, Z+25	; 0x19
     958:	e0 2d       	mov	r30, r0
     95a:	09 95       	icall
     95c:	08 95       	ret

0000095e <_ZN11EthernetUDP8remoteIPEv>:

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
     95e:	23 ea       	ldi	r18, 0xA3	; 163
     960:	31 e0       	ldi	r19, 0x01	; 1
     962:	fc 01       	movw	r30, r24
     964:	31 83       	std	Z+1, r19	; 0x01
     966:	20 83       	st	Z, r18
     968:	fb 01       	movw	r30, r22
     96a:	41 89       	ldd	r20, Z+17	; 0x11
     96c:	52 89       	ldd	r21, Z+18	; 0x12
     96e:	63 89       	ldd	r22, Z+19	; 0x13
     970:	74 89       	ldd	r23, Z+20	; 0x14
     972:	fc 01       	movw	r30, r24
     974:	42 83       	std	Z+2, r20	; 0x02
     976:	53 83       	std	Z+3, r21	; 0x03
     978:	64 83       	std	Z+4, r22	; 0x04
     97a:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
     97c:	08 95       	ret

0000097e <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
     97e:	fc 01       	movw	r30, r24
     980:	85 89       	ldd	r24, Z+21	; 0x15
     982:	96 89       	ldd	r25, Z+22	; 0x16
     984:	08 95       	ret

00000986 <_ZN11EthernetUDP9availableEv>:
  return 1;
}

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
     986:	fc 01       	movw	r30, r24
  return _remaining;
}
     988:	81 8d       	ldd	r24, Z+25	; 0x19
     98a:	92 8d       	ldd	r25, Z+26	; 0x1a
     98c:	08 95       	ret

0000098e <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	0f 92       	push	r0
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
     99a:	dc 01       	movw	r26, r24
     99c:	ed 91       	ld	r30, X+
     99e:	fc 91       	ld	r31, X
     9a0:	02 80       	ldd	r0, Z+2	; 0x02
     9a2:	f3 81       	ldd	r31, Z+3	; 0x03
     9a4:	e0 2d       	mov	r30, r0
     9a6:	be 01       	movw	r22, r28
     9a8:	6f 5f       	subi	r22, 0xFF	; 255
     9aa:	7f 4f       	sbci	r23, 0xFF	; 255
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	09 95       	icall
}
     9b2:	0f 90       	pop	r0
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	8c 01       	movw	r16, r24
  while (_remaining)
  {
	byte garbage[_remaining];
	read(garbage, _remaining);
  }
}
     9d0:	cd b6       	in	r12, 0x3d	; 61
     9d2:	de b6       	in	r13, 0x3e	; 62
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5100 always behaves :)

  while (_remaining)
     9d4:	dc 01       	movw	r26, r24
     9d6:	59 96       	adiw	r26, 0x19	; 25
     9d8:	8d 91       	ld	r24, X+
     9da:	9c 91       	ld	r25, X
     9dc:	5a 97       	sbiw	r26, 0x1a	; 26
     9de:	00 97       	sbiw	r24, 0x00	; 0
     9e0:	19 f1       	breq	.+70     	; 0xa28 <_ZN11EthernetUDP5flushEv+0x6e>
     9e2:	fd b6       	in	r15, 0x3d	; 61
     9e4:	ee b6       	in	r14, 0x3e	; 62
  {
	byte garbage[_remaining];
     9e6:	f8 01       	movw	r30, r16
     9e8:	41 8d       	ldd	r20, Z+25	; 0x19
     9ea:	52 8d       	ldd	r21, Z+26	; 0x1a
     9ec:	8d b7       	in	r24, 0x3d	; 61
     9ee:	9e b7       	in	r25, 0x3e	; 62
     9f0:	84 1b       	sub	r24, r20
     9f2:	95 0b       	sbc	r25, r21
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	9e bf       	out	0x3e, r25	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	8d bf       	out	0x3d, r24	; 61
     9fe:	6d b7       	in	r22, 0x3d	; 61
     a00:	7e b7       	in	r23, 0x3e	; 62
     a02:	6f 5f       	subi	r22, 0xFF	; 255
     a04:	7f 4f       	sbci	r23, 0xFF	; 255
	read(garbage, _remaining);
     a06:	01 90       	ld	r0, Z+
     a08:	f0 81       	ld	r31, Z
     a0a:	e0 2d       	mov	r30, r0
     a0c:	00 8c       	ldd	r0, Z+24	; 0x18
     a0e:	f1 8d       	ldd	r31, Z+25	; 0x19
     a10:	e0 2d       	mov	r30, r0
     a12:	c8 01       	movw	r24, r16
     a14:	09 95       	icall
     a16:	fd be       	out	0x3d, r15	; 61
     a18:	ee be       	out	0x3e, r14	; 62
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5100 always behaves :)

  while (_remaining)
     a1a:	d8 01       	movw	r26, r16
     a1c:	59 96       	adiw	r26, 0x19	; 25
     a1e:	8d 91       	ld	r24, X+
     a20:	9c 91       	ld	r25, X
     a22:	5a 97       	sbiw	r26, 0x1a	; 26
     a24:	00 97       	sbiw	r24, 0x00	; 0
     a26:	e9 f6       	brne	.-70     	; 0x9e2 <_ZN11EthernetUDP5flushEv+0x28>
  {
	byte garbage[_remaining];
	read(garbage, _remaining);
  }
}
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	de be       	out	0x3e, r13	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	cd be       	out	0x3d, r12	; 61
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	08 95       	ret

00000a44 <_ZN11EthernetUDP4peekEv>:
  return -1;

}

int EthernetUDP::peek()
{
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	0f 92       	push	r0
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	fc 01       	movw	r30, r24
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
     a50:	81 8d       	ldd	r24, Z+25	; 0x19
     a52:	92 8d       	ldd	r25, Z+26	; 0x1a
     a54:	00 97       	sbiw	r24, 0x00	; 0
     a56:	49 f0       	breq	.+18     	; 0xa6a <_ZN11EthernetUDP4peekEv+0x26>
    return -1;
  ::peek(_sock, &b);
     a58:	84 85       	ldd	r24, Z+12	; 0x0c
     a5a:	be 01       	movw	r22, r28
     a5c:	6f 5f       	subi	r22, 0xFF	; 255
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	0e 94 54 08 	call	0x10a8	; 0x10a8 <_Z4peekhPh>
  return b;
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <_ZN11EthernetUDP4peekEv+0x2a>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
     a6e:	0f 90       	pop	r0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <_ZN11EthernetUDP4readEPhj>:
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	ec 01       	movw	r28, r24
     a7c:	9a 01       	movw	r18, r20

  if (_remaining > 0)
     a7e:	49 8d       	ldd	r20, Y+25	; 0x19
     a80:	5a 8d       	ldd	r21, Y+26	; 0x1a
     a82:	41 15       	cp	r20, r1
     a84:	51 05       	cpc	r21, r1
     a86:	a9 f0       	breq	.+42     	; 0xab2 <_ZN11EthernetUDP4readEPhj+0x3c>
  {

    int got;

    if (_remaining <= len)
     a88:	24 17       	cp	r18, r20
     a8a:	35 07       	cpc	r19, r21
     a8c:	20 f0       	brcs	.+8      	; 0xa96 <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
     a8e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a90:	0e 94 09 08 	call	0x1012	; 0x1012 <_Z4recvhPhi>
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <_ZN11EthernetUDP4readEPhj+0x28>
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
     a96:	8c 85       	ldd	r24, Y+12	; 0x0c
     a98:	a9 01       	movw	r20, r18
     a9a:	0e 94 09 08 	call	0x1012	; 0x1012 <_Z4recvhPhi>
    }

    if (got > 0)
     a9e:	18 16       	cp	r1, r24
     aa0:	19 06       	cpc	r1, r25
     aa2:	54 f4       	brge	.+20     	; 0xab8 <_ZN11EthernetUDP4readEPhj+0x42>
    {
      _remaining -= got;
     aa4:	29 8d       	ldd	r18, Y+25	; 0x19
     aa6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     aa8:	28 1b       	sub	r18, r24
     aaa:	39 0b       	sbc	r19, r25
     aac:	3a 8f       	std	Y+26, r19	; 0x1a
     aae:	29 8f       	std	Y+25, r18	; 0x19
      return got;
     ab0:	05 c0       	rjmp	.+10     	; 0xabc <_ZN11EthernetUDP4readEPhj+0x46>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
     ab2:	8f ef       	ldi	r24, 0xFF	; 255
     ab4:	9f ef       	ldi	r25, 0xFF	; 255
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <_ZN11EthernetUDP4readEPhj+0x46>
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	9f ef       	ldi	r25, 0xFF	; 255

}
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	0f 92       	push	r0
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	8c 01       	movw	r16, r24
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
     ad2:	fc 01       	movw	r30, r24
     ad4:	81 8d       	ldd	r24, Z+25	; 0x19
     ad6:	92 8d       	ldd	r25, Z+26	; 0x1a
     ad8:	00 97       	sbiw	r24, 0x00	; 0
     ada:	a1 f0       	breq	.+40     	; 0xb04 <_ZN11EthernetUDP4readEv+0x42>
     adc:	84 85       	ldd	r24, Z+12	; 0x0c
     ade:	be 01       	movw	r22, r28
     ae0:	6f 5f       	subi	r22, 0xFF	; 255
     ae2:	7f 4f       	sbci	r23, 0xFF	; 255
     ae4:	41 e0       	ldi	r20, 0x01	; 1
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	0e 94 09 08 	call	0x1012	; 0x1012 <_Z4recvhPhi>
     aec:	18 16       	cp	r1, r24
     aee:	19 06       	cpc	r1, r25
     af0:	64 f4       	brge	.+24     	; 0xb0a <_ZN11EthernetUDP4readEv+0x48>
  {
    // We read things without any problems
    _remaining--;
     af2:	f8 01       	movw	r30, r16
     af4:	81 8d       	ldd	r24, Z+25	; 0x19
     af6:	92 8d       	ldd	r25, Z+26	; 0x1a
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	92 8f       	std	Z+26, r25	; 0x1a
     afc:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	05 c0       	rjmp	.+10     	; 0xb0e <_ZN11EthernetUDP4readEv+0x4c>
  }

  // If we get here, there's no data available
  return -1;
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	9f ef       	ldi	r25, 0xFF	; 255
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <_ZN11EthernetUDP4readEv+0x4c>
     b0a:	8f ef       	ldi	r24, 0xFF	; 255
     b0c:	9f ef       	ldi	r25, 0xFF	; 255
}
     b0e:	0f 90       	pop	r0
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	08 95       	ret

00000b1a <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	28 97       	sbiw	r28, 0x08	; 8
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
     b34:	dc 01       	movw	r26, r24
     b36:	ed 91       	ld	r30, X+
     b38:	fc 91       	ld	r31, X
     b3a:	02 84       	ldd	r0, Z+10	; 0x0a
     b3c:	f3 85       	ldd	r31, Z+11	; 0x0b
     b3e:	e0 2d       	mov	r30, r0
     b40:	09 95       	icall

  if (W5100.getRXReceivedSize(_sock) > 0)
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	94 e0       	ldi	r25, 0x04	; 4
     b46:	f8 01       	movw	r30, r16
     b48:	64 85       	ldd	r22, Z+12	; 0x0c
     b4a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN10W5100Class17getRXReceivedSizeEh>
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	21 f1       	breq	.+72     	; 0xb9a <_ZN11EthernetUDP11parsePacketEv+0x80>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
     b52:	d8 01       	movw	r26, r16
     b54:	1c 96       	adiw	r26, 0x0c	; 12
     b56:	8c 91       	ld	r24, X
     b58:	be 01       	movw	r22, r28
     b5a:	6f 5f       	subi	r22, 0xFF	; 255
     b5c:	7f 4f       	sbci	r23, 0xFF	; 255
     b5e:	48 e0       	ldi	r20, 0x08	; 8
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	0e 94 09 08 	call	0x1012	; 0x1012 <_Z4recvhPhi>
    if (ret > 0)
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	cc f4       	brge	.+50     	; 0xb9e <_ZN11EthernetUDP11parsePacketEv+0x84>
    {
      _remoteIP = tmpBuf;
     b6c:	c8 01       	movw	r24, r16
     b6e:	0f 96       	adiw	r24, 0x0f	; 15
     b70:	be 01       	movw	r22, r28
     b72:	6f 5f       	subi	r22, 0xFF	; 255
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
     b7a:	9d 81       	ldd	r25, Y+5	; 0x05
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	2e 81       	ldd	r18, Y+6	; 0x06
     b80:	82 0f       	add	r24, r18
     b82:	91 1d       	adc	r25, r1
     b84:	f8 01       	movw	r30, r16
     b86:	96 8b       	std	Z+22, r25	; 0x16
     b88:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
     b8a:	9f 81       	ldd	r25, Y+7	; 0x07
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	28 85       	ldd	r18, Y+8	; 0x08
     b90:	82 0f       	add	r24, r18
     b92:	91 1d       	adc	r25, r1
     b94:	92 8f       	std	Z+26, r25	; 0x1a
     b96:	81 8f       	std	Z+25, r24	; 0x19
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <_ZN11EthernetUDP11parsePacketEv+0x84>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
}
     b9e:	28 96       	adiw	r28, 0x08	; 8
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	ec 01       	movw	r28, r24
     bba:	9b 01       	movw	r18, r22
     bbc:	fa 01       	movw	r30, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
     bbe:	6f 89       	ldd	r22, Y+23	; 0x17
     bc0:	78 8d       	ldd	r23, Y+24	; 0x18
     bc2:	8c 85       	ldd	r24, Y+12	; 0x0c
     bc4:	a9 01       	movw	r20, r18
     bc6:	9f 01       	movw	r18, r30
     bc8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
     bcc:	2f 89       	ldd	r18, Y+23	; 0x17
     bce:	38 8d       	ldd	r19, Y+24	; 0x18
     bd0:	28 0f       	add	r18, r24
     bd2:	39 1f       	adc	r19, r25
     bd4:	38 8f       	std	Y+24, r19	; 0x18
     bd6:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <_ZN11EthernetUDP9endPacketEv>:
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
     bde:	fc 01       	movw	r30, r24
     be0:	84 85       	ldd	r24, Z+12	; 0x0c
     be2:	0e 94 bd 0a 	call	0x157a	; 0x157a <_Z7sendUDPh>
}
     be6:	08 95       	ret

00000be8 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
     be8:	fc 01       	movw	r30, r24
  _offset = 0;
     bea:	10 8e       	std	Z+24, r1	; 0x18
     bec:	17 8a       	std	Z+23, r1	; 0x17
  return startUDP(_sock, rawIPAddress(ip), port);
     bee:	6e 5f       	subi	r22, 0xFE	; 254
     bf0:	7f 4f       	sbci	r23, 0xFF	; 255
     bf2:	84 85       	ldd	r24, Z+12	; 0x0c
     bf4:	0e 94 85 0a 	call	0x150a	; 0x150a <_Z8startUDPhPhj>
}
     bf8:	08 95       	ret

00000bfa <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
     c00:	8c 85       	ldd	r24, Y+12	; 0x0c
     c02:	84 30       	cpi	r24, 0x04	; 4
     c04:	61 f0       	breq	.+24     	; 0xc1e <_ZN11EthernetUDP4stopEv+0x24>
    return;

  close(_sock);
     c06:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
     c0a:	ec 85       	ldd	r30, Y+12	; 0x0c
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	ee 0f       	add	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	e2 50       	subi	r30, 0x02	; 2
     c14:	fc 4f       	sbci	r31, 0xFC	; 252
     c16:	11 82       	std	Z+1, r1	; 0x01
     c18:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
     c1a:	84 e0       	ldi	r24, 0x04	; 4
     c1c:	8c 87       	std	Y+12, r24	; 0x0c
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	7c 01       	movw	r14, r24
     c34:	6b 01       	movw	r12, r22
  if (_sock != MAX_SOCK_NUM)
     c36:	fc 01       	movw	r30, r24
     c38:	84 85       	ldd	r24, Z+12	; 0x0c
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	09 f5       	brne	.+66     	; 0xc80 <_ZN11EthernetUDP5beginEj+0x5c>
     c3e:	c3 e0       	ldi	r28, 0x03	; 3
     c40:	d4 e0       	ldi	r29, 0x04	; 4
     c42:	10 e0       	ldi	r17, 0x00	; 0
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
     c44:	ce 01       	movw	r24, r28
     c46:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = W5100.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
     c4a:	88 23       	and	r24, r24
     c4c:	11 f0       	breq	.+4      	; 0xc52 <_ZN11EthernetUDP5beginEj+0x2e>
     c4e:	88 31       	cpi	r24, 0x18	; 24
     c50:	19 f4       	brne	.+6      	; 0xc58 <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
     c52:	f7 01       	movw	r30, r14
     c54:	14 87       	std	Z+12, r17	; 0x0c
      break;
     c56:	05 c0       	rjmp	.+10     	; 0xc62 <_ZN11EthernetUDP5beginEj+0x3e>
     c58:	1f 5f       	subi	r17, 0xFF	; 255
     c5a:	c0 50       	subi	r28, 0x00	; 0
     c5c:	df 4f       	sbci	r29, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
     c5e:	14 30       	cpi	r17, 0x04	; 4
     c60:	89 f7       	brne	.-30     	; 0xc44 <_ZN11EthernetUDP5beginEj+0x20>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
     c62:	f7 01       	movw	r30, r14
     c64:	84 85       	ldd	r24, Z+12	; 0x0c
     c66:	84 30       	cpi	r24, 0x04	; 4
     c68:	69 f0       	breq	.+26     	; 0xc84 <_ZN11EthernetUDP5beginEj+0x60>
    return 0;

  _port = port;
     c6a:	d6 86       	std	Z+14, r13	; 0x0e
     c6c:	c5 86       	std	Z+13, r12	; 0x0d
  _remaining = 0;
     c6e:	12 8e       	std	Z+26, r1	; 0x1a
     c70:	11 8e       	std	Z+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
     c72:	62 e0       	ldi	r22, 0x02	; 2
     c74:	a6 01       	movw	r20, r12
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_Z6sockethhjh>

  return 1;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	03 c0       	rjmp	.+6      	; 0xc86 <_ZN11EthernetUDP5beginEj+0x62>
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <_ZN11EthernetUDP5beginEj+0x62>
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    return 0;
     c84:	80 e0       	ldi	r24, 0x00	; 0
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	08 95       	ret

00000c96 <_ZN11EthernetUDPC1Ev>:
#include "Ethernet.h"
#include "..\Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
     c96:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c98:	13 82       	std	Z+3, r1	; 0x03
     c9a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     c9c:	48 ee       	ldi	r20, 0xE8	; 232
     c9e:	53 e0       	ldi	r21, 0x03	; 3
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	44 83       	std	Z+4, r20	; 0x04
     ca6:	55 83       	std	Z+5, r21	; 0x05
     ca8:	66 83       	std	Z+6, r22	; 0x06
     caa:	77 83       	std	Z+7, r23	; 0x07
     cac:	85 e2       	ldi	r24, 0x25	; 37
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	91 83       	std	Z+1, r25	; 0x01
     cb2:	80 83       	st	Z, r24
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	84 87       	std	Z+12, r24	; 0x0c
     cb8:	cf 01       	movw	r24, r30
     cba:	0f 96       	adiw	r24, 0x0f	; 15
     cbc:	0e 94 a8 10 	call	0x2150	; 0x2150 <_ZN9IPAddressC1Ev>
     cc0:	08 95       	ret

00000cc2 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	e5 97       	sbiw	r28, 0x35	; 53
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	7c 01       	movw	r14, r24
     ce4:	8b 01       	movw	r16, r22
     ce6:	6a 01       	movw	r12, r20
#ifndef DNSClient_h
#define DNSClient_h

#include "EthernetUdp.h"

class DNSClient
     ce8:	ce 01       	movw	r24, r28
     cea:	43 96       	adiw	r24, 0x13	; 19
     cec:	0e 94 a8 10 	call	0x2150	; 0x2150 <_ZN9IPAddressC1Ev>
     cf0:	ce 01       	movw	r24, r28
     cf2:	4b 96       	adiw	r24, 0x1b	; 27
     cf4:	0e 94 4b 06 	call	0xc96	; 0xc96 <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
     cf8:	ce 01       	movw	r24, r28
     cfa:	0d 96       	adiw	r24, 0x0d	; 13
     cfc:	0e 94 a8 10 	call	0x2150	; 0x2150 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
     d00:	ce 01       	movw	r24, r28
     d02:	07 96       	adiw	r24, 0x07	; 7
     d04:	66 ef       	ldi	r22, 0xF6	; 246
     d06:	73 e0       	ldi	r23, 0x03	; 3
     d08:	0e 94 88 04 	call	0x910	; 0x910 <_ZN13EthernetClass11dnsServerIPEv>
     d0c:	ce 01       	movw	r24, r28
     d0e:	43 96       	adiw	r24, 0x13	; 19
     d10:	be 01       	movw	r22, r28
     d12:	69 5f       	subi	r22, 0xF9	; 249
     d14:	7f 4f       	sbci	r23, 0xFF	; 255
     d16:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
     d1a:	ce 01       	movw	r24, r28
     d1c:	43 96       	adiw	r24, 0x13	; 19
     d1e:	b8 01       	movw	r22, r16
     d20:	ae 01       	movw	r20, r28
     d22:	43 5f       	subi	r20, 0xF3	; 243
     d24:	5f 4f       	sbci	r21, 0xFF	; 255
     d26:	0e 94 8c 28 	call	0x5118	; 0x5118 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	91 05       	cpc	r25, r1
     d2e:	c1 f4       	brne	.+48     	; 0xd60 <_ZN11EthernetUDP11beginPacketEPKcj+0x9e>
    return beginPacket(remote_addr, port);
     d30:	d7 01       	movw	r26, r14
     d32:	ed 91       	ld	r30, X+
     d34:	fc 91       	ld	r31, X
     d36:	00 88       	ldd	r0, Z+16	; 0x10
     d38:	f1 89       	ldd	r31, Z+17	; 0x11
     d3a:	e0 2d       	mov	r30, r0
     d3c:	83 ea       	ldi	r24, 0xA3	; 163
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	9a 83       	std	Y+2, r25	; 0x02
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	8f 85       	ldd	r24, Y+15	; 0x0f
     d46:	98 89       	ldd	r25, Y+16	; 0x10
     d48:	a9 89       	ldd	r26, Y+17	; 0x11
     d4a:	ba 89       	ldd	r27, Y+18	; 0x12
     d4c:	8b 83       	std	Y+3, r24	; 0x03
     d4e:	9c 83       	std	Y+4, r25	; 0x04
     d50:	ad 83       	std	Y+5, r26	; 0x05
     d52:	be 83       	std	Y+6, r27	; 0x06
     d54:	c7 01       	movw	r24, r14
     d56:	be 01       	movw	r22, r28
     d58:	6f 5f       	subi	r22, 0xFF	; 255
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	a6 01       	movw	r20, r12
     d5e:	09 95       	icall
  } else {
    return ret;
  }
}
     d60:	e5 96       	adiw	r28, 0x35	; 53
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	cf 90       	pop	r12
     d7c:	08 95       	ret

00000d7e <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:
  while (_remaining)
  {
	byte garbage[_remaining];
	read(garbage, _remaining);
  }
}
     d7e:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     d80:	80 e1       	ldi	r24, 0x10	; 16
     d82:	94 e0       	ldi	r25, 0x04	; 4
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	00 e0       	ldi	r16, 0x00	; 0
     d8c:	0e 94 b2 10 	call	0x2164	; 0x2164 <_ZN9IPAddressC1Ehhhh>
     d90:	0f 91       	pop	r16
     d92:	08 95       	ret

00000d94 <_Z5closeh>:

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	18 2f       	mov	r17, r24
  W5100.execCmdSn(s, Sock_CLOSE);
     d9c:	88 e1       	ldi	r24, 0x18	; 24
     d9e:	94 e0       	ldi	r25, 0x04	; 4
     da0:	61 2f       	mov	r22, r17
     da2:	40 e1       	ldi	r20, 0x10	; 16
     da4:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN10W5100Class9execCmdSnEh7SockCMD>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
     da8:	d1 2f       	mov	r29, r17
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	c8 2f       	mov	r28, r24
     dae:	ce 01       	movw	r24, r28
     db0:	8e 5f       	subi	r24, 0xFE	; 254
     db2:	9b 4f       	sbci	r25, 0xFB	; 251
     db4:	6f ef       	ldi	r22, 0xFF	; 255
     db6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
  W5100.writeSnIR(s, 0xFF);
}
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	08 95       	ret

00000dc2 <_Z6sockethhjh>:
/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for W5100 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
{
     dc2:	cf 92       	push	r12
     dc4:	df 92       	push	r13
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	18 2f       	mov	r17, r24
     dd2:	c6 2f       	mov	r28, r22
     dd4:	7a 01       	movw	r14, r20
     dd6:	d2 2f       	mov	r29, r18
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
     dd8:	86 2f       	mov	r24, r22
     dda:	81 50       	subi	r24, 0x01	; 1
     ddc:	85 30       	cpi	r24, 0x05	; 5
     dde:	b0 f5       	brcc	.+108    	; 0xe4c <_Z6sockethhjh+0x8a>
  {
    close(s);
     de0:	81 2f       	mov	r24, r17
     de2:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z5closeh>
     de6:	81 2f       	mov	r24, r17
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	04 96       	adiw	r24, 0x04	; 4
     dec:	d8 2e       	mov	r13, r24
     dee:	cc 24       	eor	r12, r12
    W5100.writeSnMR(s, protocol | flag);
     df0:	6d 2f       	mov	r22, r29
     df2:	6c 2b       	or	r22, r28
     df4:	c6 01       	movw	r24, r12
     df6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    if (port != 0) {
     dfa:	e1 14       	cp	r14, r1
     dfc:	f1 04       	cpc	r15, r1
     dfe:	59 f0       	breq	.+22     	; 0xe16 <_Z6sockethhjh+0x54>
     e00:	c6 01       	movw	r24, r12
     e02:	04 96       	adiw	r24, 0x04	; 4
     e04:	6f 2d       	mov	r22, r15
     e06:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
     e0a:	c6 01       	movw	r24, r12
     e0c:	05 96       	adiw	r24, 0x05	; 5
     e0e:	6e 2d       	mov	r22, r14
     e10:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
     e14:	13 c0       	rjmp	.+38     	; 0xe3c <_Z6sockethhjh+0x7a>
      W5100.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
     e16:	c0 91 16 04 	lds	r28, 0x0416
     e1a:	d0 91 17 04 	lds	r29, 0x0417
     e1e:	21 96       	adiw	r28, 0x01	; 1
     e20:	d0 93 17 04 	sts	0x0417, r29
     e24:	c0 93 16 04 	sts	0x0416, r28
     e28:	c6 01       	movw	r24, r12
     e2a:	04 96       	adiw	r24, 0x04	; 4
     e2c:	6d 2f       	mov	r22, r29
     e2e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
     e32:	c6 01       	movw	r24, r12
     e34:	05 96       	adiw	r24, 0x05	; 5
     e36:	6c 2f       	mov	r22, r28
     e38:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
      W5100.writeSnPORT(s, local_port);
    }

    W5100.execCmdSn(s, Sock_OPEN);
     e3c:	88 e1       	ldi	r24, 0x18	; 24
     e3e:	94 e0       	ldi	r25, 0x04	; 4
     e40:	61 2f       	mov	r22, r17
     e42:	41 e0       	ldi	r20, 0x01	; 1
     e44:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN10W5100Class9execCmdSnEh7SockCMD>
    
    return 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <_Z6sockethhjh+0x8c>
  }

  return 0;
     e4c:	80 e0       	ldi	r24, 0x00	; 0
}
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	cf 90       	pop	r12
     e5c:	08 95       	ret

00000e5e <_Z6listenh>:
/**
 * @brief	This function established  the connection for the channel in passive (server) mode. This function waits for the request from the peer.
 * @return	1 for success else 0.
 */
uint8_t listen(SOCKET s)
{
     e5e:	cf 93       	push	r28
     e60:	c8 2f       	mov	r28, r24
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
     e62:	38 2f       	mov	r19, r24
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	c9 01       	movw	r24, r18
     e68:	8d 5f       	subi	r24, 0xFD	; 253
     e6a:	9b 4f       	sbci	r25, 0xFB	; 251
     e6c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  if (W5100.readSnSR(s) != SnSR::INIT)
     e70:	83 31       	cpi	r24, 0x13	; 19
     e72:	41 f4       	brne	.+16     	; 0xe84 <_Z6listenh+0x26>
    return 0;
  W5100.execCmdSn(s, Sock_LISTEN);
     e74:	88 e1       	ldi	r24, 0x18	; 24
     e76:	94 e0       	ldi	r25, 0x04	; 4
     e78:	6c 2f       	mov	r22, r28
     e7a:	42 e0       	ldi	r20, 0x02	; 2
     e7c:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN10W5100Class9execCmdSnEh7SockCMD>
  return 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <_Z6listenh+0x28>
 * @return	1 for success else 0.
 */
uint8_t listen(SOCKET s)
{
  if (W5100.readSnSR(s) != SnSR::INIT)
    return 0;
     e84:	80 e0       	ldi	r24, 0x00	; 0
  W5100.execCmdSn(s, Sock_LISTEN);
  return 1;
}
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <_Z7connecthPhj>:
 * 		This function waits for the untill the connection is established.
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	18 2f       	mov	r17, r24
     e96:	fb 01       	movw	r30, r22
     e98:	7a 01       	movw	r14, r20
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
     e9a:	80 81       	ld	r24, Z
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
     e9c:	8f 3f       	cpi	r24, 0xFF	; 255
     e9e:	51 f4       	brne	.+20     	; 0xeb4 <_Z7connecthPhj+0x2a>
     ea0:	81 81       	ldd	r24, Z+1	; 0x01
     ea2:	8f 3f       	cpi	r24, 0xFF	; 255
     ea4:	91 f4       	brne	.+36     	; 0xeca <_Z7connecthPhj+0x40>
     ea6:	82 81       	ldd	r24, Z+2	; 0x02
     ea8:	8f 3f       	cpi	r24, 0xFF	; 255
     eaa:	79 f4       	brne	.+30     	; 0xeca <_Z7connecthPhj+0x40>
     eac:	83 81       	ldd	r24, Z+3	; 0x03
     eae:	8f 3f       	cpi	r24, 0xFF	; 255
     eb0:	61 f4       	brne	.+24     	; 0xeca <_Z7connecthPhj+0x40>
     eb2:	2c c0       	rjmp	.+88     	; 0xf0c <_Z7connecthPhj+0x82>
     eb4:	88 23       	and	r24, r24
     eb6:	49 f4       	brne	.+18     	; 0xeca <_Z7connecthPhj+0x40>
     eb8:	81 81       	ldd	r24, Z+1	; 0x01
     eba:	88 23       	and	r24, r24
     ebc:	31 f4       	brne	.+12     	; 0xeca <_Z7connecthPhj+0x40>
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	88 23       	and	r24, r24
     ec2:	19 f4       	brne	.+6      	; 0xeca <_Z7connecthPhj+0x40>
     ec4:	83 81       	ldd	r24, Z+3	; 0x03
     ec6:	88 23       	and	r24, r24
     ec8:	19 f1       	breq	.+70     	; 0xf10 <_Z7connecthPhj+0x86>
     eca:	e1 14       	cp	r14, r1
     ecc:	f1 04       	cpc	r15, r1
     ece:	11 f1       	breq	.+68     	; 0xf14 <_Z7connecthPhj+0x8a>
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
     ed0:	c1 2f       	mov	r28, r17
     ed2:	d0 e0       	ldi	r29, 0x00	; 0
     ed4:	24 96       	adiw	r28, 0x04	; 4
     ed6:	dc 2f       	mov	r29, r28
     ed8:	cc 27       	eor	r28, r28
     eda:	ce 01       	movw	r24, r28
     edc:	0c 96       	adiw	r24, 0x0c	; 12
     ede:	bf 01       	movw	r22, r30
     ee0:	44 e0       	ldi	r20, 0x04	; 4
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
     ee8:	ce 01       	movw	r24, r28
     eea:	40 96       	adiw	r24, 0x10	; 16
     eec:	6f 2d       	mov	r22, r15
     eee:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
     ef2:	ce 01       	movw	r24, r28
     ef4:	41 96       	adiw	r24, 0x11	; 17
     ef6:	6e 2d       	mov	r22, r14
     ef8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    return 0;

  // set destination IP
  W5100.writeSnDIPR(s, addr);
  W5100.writeSnDPORT(s, port);
  W5100.execCmdSn(s, Sock_CONNECT);
     efc:	88 e1       	ldi	r24, 0x18	; 24
     efe:	94 e0       	ldi	r25, 0x04	; 4
     f00:	61 2f       	mov	r22, r17
     f02:	44 e0       	ldi	r20, 0x04	; 4
     f04:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN10W5100Class9execCmdSnEh7SockCMD>

  return 1;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <_Z7connecthPhj+0x8c>
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    (port == 0x00) 
    ) 
    return 0;
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <_Z7connecthPhj+0x8c>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <_Z7connecthPhj+0x8c>
     f14:	80 e0       	ldi	r24, 0x00	; 0
  W5100.writeSnDIPR(s, addr);
  W5100.writeSnDPORT(s, port);
  W5100.execCmdSn(s, Sock_CONNECT);

  return 1;
}
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	08 95       	ret

00000f22 <_Z10disconnecth>:
/**
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
     f22:	68 2f       	mov	r22, r24
  W5100.execCmdSn(s, Sock_DISCON);
     f24:	88 e1       	ldi	r24, 0x18	; 24
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	48 e0       	ldi	r20, 0x08	; 8
     f2a:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
     f2e:	08 95       	ret

00000f30 <_Z4sendhPKhj>:
/**
 * @brief	This function used to send the data in TCP mode
 * @return	1 for success else 0.
 */
uint16_t send(SOCKET s, const uint8_t * buf, uint16_t len)
{
     f30:	6f 92       	push	r6
     f32:	7f 92       	push	r7
     f34:	8f 92       	push	r8
     f36:	9f 92       	push	r9
     f38:	af 92       	push	r10
     f3a:	bf 92       	push	r11
     f3c:	cf 92       	push	r12
     f3e:	df 92       	push	r13
     f40:	ef 92       	push	r14
     f42:	ff 92       	push	r15
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	f8 2e       	mov	r15, r24
     f4e:	3b 01       	movw	r6, r22
  {
    /* m2008.01 [bj] : reduce code */
    if ( W5100.readSnSR(s) == SnSR::CLOSED )
    {
      close(s);
      return 0;
     f50:	a4 2e       	mov	r10, r20
     f52:	b5 2e       	mov	r11, r21
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	a8 16       	cp	r10, r24
     f58:	88 e0       	ldi	r24, 0x08	; 8
     f5a:	b8 06       	cpc	r11, r24
     f5c:	20 f0       	brcs	.+8      	; 0xf66 <_Z4sendhPKhj+0x36>
     f5e:	aa 24       	eor	r10, r10
     f60:	bb 24       	eor	r11, r11
     f62:	68 94       	set
     f64:	b3 f8       	bld	r11, 3
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
     f66:	cf 2d       	mov	r28, r15
     f68:	d0 e0       	ldi	r29, 0x00	; 0
     f6a:	24 96       	adiw	r28, 0x04	; 4
     f6c:	9c 2e       	mov	r9, r28
     f6e:	88 24       	eor	r8, r8
     f70:	84 01       	movw	r16, r8
     f72:	0d 5f       	subi	r16, 0xFD	; 253
     f74:	1f 4f       	sbci	r17, 0xFF	; 255
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = W5100.getTXFreeSize(s);
     f76:	0f 2e       	mov	r0, r31
     f78:	f8 e1       	ldi	r31, 0x18	; 24
     f7a:	cf 2e       	mov	r12, r31
     f7c:	f4 e0       	ldi	r31, 0x04	; 4
     f7e:	df 2e       	mov	r13, r31
     f80:	f0 2d       	mov	r31, r0
     f82:	c6 01       	movw	r24, r12
     f84:	6f 2d       	mov	r22, r15
     f86:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_ZN10W5100Class13getTXFreeSizeEh>
     f8a:	ec 01       	movw	r28, r24
     f8c:	c8 01       	movw	r24, r16
     f8e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
    status = W5100.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
     f92:	87 31       	cpi	r24, 0x17	; 23
     f94:	11 f0       	breq	.+4      	; 0xf9a <_Z4sendhPKhj+0x6a>
     f96:	8c 31       	cpi	r24, 0x1C	; 28
     f98:	21 f4       	brne	.+8      	; 0xfa2 <_Z4sendhPKhj+0x72>
    ret = W5100.SSIZE; // check size not to exceed MAX size.
  else 
    ret = len;

  // if freebuf is available, start.
  do 
     f9a:	ca 15       	cp	r28, r10
     f9c:	db 05       	cpc	r29, r11
     f9e:	88 f3       	brcs	.-30     	; 0xf82 <_Z4sendhPKhj+0x52>
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <_Z4sendhPKhj+0x76>
  {
    freesize = W5100.getTXFreeSize(s);
    status = W5100.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
     fa2:	aa 24       	eor	r10, r10
     fa4:	bb 24       	eor	r11, r11
    }
  } 
  while (freesize < ret);

  // copy data
  W5100.send_data_processing(s, (uint8_t *)buf, ret);
     fa6:	c8 e1       	ldi	r28, 0x18	; 24
     fa8:	d4 e0       	ldi	r29, 0x04	; 4
     faa:	ce 01       	movw	r24, r28
     fac:	6f 2d       	mov	r22, r15
     fae:	a3 01       	movw	r20, r6
     fb0:	95 01       	movw	r18, r10
     fb2:	0e 94 a6 0c 	call	0x194c	; 0x194c <_ZN10W5100Class20send_data_processingEhPKhj>
  W5100.execCmdSn(s, Sock_SEND);
     fb6:	ce 01       	movw	r24, r28
     fb8:	6f 2d       	mov	r22, r15
     fba:	40 e2       	ldi	r20, 0x20	; 32
     fbc:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN10W5100Class9execCmdSnEh7SockCMD>
     fc0:	e4 01       	movw	r28, r8
     fc2:	22 96       	adiw	r28, 0x02	; 2

  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
     fc4:	0b c0       	rjmp	.+22     	; 0xfdc <_Z4sendhPKhj+0xac>
     fc6:	c8 01       	movw	r24, r16
     fc8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  {
    /* m2008.01 [bj] : reduce code */
    if ( W5100.readSnSR(s) == SnSR::CLOSED )
     fcc:	88 23       	and	r24, r24
     fce:	31 f4       	brne	.+12     	; 0xfdc <_Z4sendhPKhj+0xac>
    {
      close(s);
     fd0:	8f 2d       	mov	r24, r15
     fd2:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z5closeh>
      return 0;
     fd6:	aa 24       	eor	r10, r10
     fd8:	bb 24       	eor	r11, r11
     fda:	0a c0       	rjmp	.+20     	; 0xff0 <_Z4sendhPKhj+0xc0>
     fdc:	ce 01       	movw	r24, r28
     fde:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  // copy data
  W5100.send_data_processing(s, (uint8_t *)buf, ret);
  W5100.execCmdSn(s, Sock_SEND);

  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
     fe2:	84 ff       	sbrs	r24, 4
     fe4:	f0 cf       	rjmp	.-32     	; 0xfc6 <_Z4sendhPKhj+0x96>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
     fe6:	8c 2f       	mov	r24, r28
     fe8:	9d 2f       	mov	r25, r29
     fea:	60 e1       	ldi	r22, 0x10	; 16
     fec:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    }
  }
  /* +2008.01 bj */
  W5100.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
     ff0:	8a 2d       	mov	r24, r10
     ff2:	9b 2d       	mov	r25, r11
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	ff 90       	pop	r15
     ffe:	ef 90       	pop	r14
    1000:	df 90       	pop	r13
    1002:	cf 90       	pop	r12
    1004:	bf 90       	pop	r11
    1006:	af 90       	pop	r10
    1008:	9f 90       	pop	r9
    100a:	8f 90       	pop	r8
    100c:	7f 90       	pop	r7
    100e:	6f 90       	pop	r6
    1010:	08 95       	ret

00001012 <_Z4recvhPhi>:
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
    1012:	af 92       	push	r10
    1014:	bf 92       	push	r11
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	18 2f       	mov	r17, r24
    1028:	6b 01       	movw	r12, r22
    102a:	ea 01       	movw	r28, r20
  // Check how much data is available
  int16_t ret = W5100.getRXReceivedSize(s);
    102c:	88 e1       	ldi	r24, 0x18	; 24
    102e:	94 e0       	ldi	r25, 0x04	; 4
    1030:	61 2f       	mov	r22, r17
    1032:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN10W5100Class17getRXReceivedSizeEh>
    1036:	e8 2e       	mov	r14, r24
    1038:	f9 2e       	mov	r15, r25
  if ( ret == 0 )
    103a:	e1 14       	cp	r14, r1
    103c:	f1 04       	cpc	r15, r1
    103e:	71 f4       	brne	.+28     	; 0x105c <_Z4recvhPhi+0x4a>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1040:	b1 2e       	mov	r11, r17
    1042:	aa 24       	eor	r10, r10
    1044:	c5 01       	movw	r24, r10
    1046:	8d 5f       	subi	r24, 0xFD	; 253
    1048:	9b 4f       	sbci	r25, 0xFB	; 251
    104a:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  {
    // No data available.
    uint8_t status = W5100.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
    104e:	84 31       	cpi	r24, 0x14	; 20
    1050:	d1 f0       	breq	.+52     	; 0x1086 <_Z4recvhPhi+0x74>
    1052:	88 23       	and	r24, r24
    1054:	c1 f0       	breq	.+48     	; 0x1086 <_Z4recvhPhi+0x74>
    1056:	8c 31       	cpi	r24, 0x1C	; 28
    1058:	b1 f0       	breq	.+44     	; 0x1086 <_Z4recvhPhi+0x74>
    105a:	22 c0       	rjmp	.+68     	; 0x10a0 <_Z4recvhPhi+0x8e>
    105c:	ce 15       	cp	r28, r14
    105e:	df 05       	cpc	r29, r15
    1060:	0c f4       	brge	.+2      	; 0x1064 <_Z4recvhPhi+0x52>
    1062:	7e 01       	movw	r14, r28
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
    1064:	1e 14       	cp	r1, r14
    1066:	1f 04       	cpc	r1, r15
    1068:	74 f4       	brge	.+28     	; 0x1086 <_Z4recvhPhi+0x74>
  {
    W5100.recv_data_processing(s, buf, ret);
    106a:	c8 e1       	ldi	r28, 0x18	; 24
    106c:	d4 e0       	ldi	r29, 0x04	; 4
    106e:	ce 01       	movw	r24, r28
    1070:	61 2f       	mov	r22, r17
    1072:	a6 01       	movw	r20, r12
    1074:	97 01       	movw	r18, r14
    1076:	00 e0       	ldi	r16, 0x00	; 0
    1078:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN10W5100Class20recv_data_processingEhPhjh>
    W5100.execCmdSn(s, Sock_RECV);
    107c:	ce 01       	movw	r24, r28
    107e:	61 2f       	mov	r22, r17
    1080:	40 e4       	ldi	r20, 0x40	; 64
    1082:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN10W5100Class9execCmdSnEh7SockCMD>
  }
  return ret;
}
    1086:	8e 2d       	mov	r24, r14
    1088:	9f 2d       	mov	r25, r15
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	df 90       	pop	r13
    1098:	cf 90       	pop	r12
    109a:	bf 90       	pop	r11
    109c:	af 90       	pop	r10
    109e:	08 95       	ret
      ret = 0;
    }
    else
    {
      // The connection is still up, but there's no data waiting to be read
      ret = -1;
    10a0:	ee 24       	eor	r14, r14
    10a2:	ea 94       	dec	r14
    10a4:	fe 2c       	mov	r15, r14
    10a6:	ef cf       	rjmp	.-34     	; 0x1086 <_Z4recvhPhi+0x74>

000010a8 <_Z4peekhPh>:
 * @brief	Returns the first byte in the receive queue (no checking)
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
    10a8:	0f 93       	push	r16
    10aa:	28 2f       	mov	r18, r24
    10ac:	ab 01       	movw	r20, r22
  W5100.recv_data_processing(s, buf, 1, 1);
    10ae:	88 e1       	ldi	r24, 0x18	; 24
    10b0:	94 e0       	ldi	r25, 0x04	; 4
    10b2:	62 2f       	mov	r22, r18
    10b4:	21 e0       	ldi	r18, 0x01	; 1
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	01 e0       	ldi	r16, 0x01	; 1
    10ba:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN10W5100Class20recv_data_processingEhPhjh>

  return 1;
}
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0f 91       	pop	r16
    10c4:	08 95       	ret

000010c6 <_Z6sendtohPKhjPhj>:
 * 		Unlike TCP transmission, The peer's destination address and the port is needed.
 * 		
 * @return	This function return send data size for success else -1.
 */
uint16_t sendto(SOCKET s, const uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t port)
{
    10c6:	af 92       	push	r10
    10c8:	bf 92       	push	r11
    10ca:	cf 92       	push	r12
    10cc:	df 92       	push	r13
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	f8 2e       	mov	r15, r24
    10da:	5b 01       	movw	r10, r22
    10dc:	f9 01       	movw	r30, r18
    10de:	68 01       	movw	r12, r16
  uint16_t ret=0;

  if (len > W5100.SSIZE) ret = W5100.SSIZE; // check size not to exceed MAX size.
  else ret = len;

  if
    10e0:	80 81       	ld	r24, Z
    10e2:	88 23       	and	r24, r24
    10e4:	51 f4       	brne	.+20     	; 0x10fa <_Z6sendtohPKhjPhj+0x34>
    10e6:	81 81       	ldd	r24, Z+1	; 0x01
    10e8:	88 23       	and	r24, r24
    10ea:	39 f4       	brne	.+14     	; 0x10fa <_Z6sendtohPKhjPhj+0x34>
    10ec:	82 81       	ldd	r24, Z+2	; 0x02
    10ee:	88 23       	and	r24, r24
    10f0:	21 f4       	brne	.+8      	; 0x10fa <_Z6sendtohPKhjPhj+0x34>
    10f2:	83 81       	ldd	r24, Z+3	; 0x03
    10f4:	88 23       	and	r24, r24
    10f6:	09 f4       	brne	.+2      	; 0x10fa <_Z6sendtohPKhjPhj+0x34>
    10f8:	53 c0       	rjmp	.+166    	; 0x11a0 <_Z6sendtohPKhjPhj+0xda>
    10fa:	c1 14       	cp	r12, r1
    10fc:	d1 04       	cpc	r13, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <_Z6sendtohPKhjPhj+0x3c>
    1100:	52 c0       	rjmp	.+164    	; 0x11a6 <_Z6sendtohPKhjPhj+0xe0>
    1102:	04 2f       	mov	r16, r20
    1104:	15 2f       	mov	r17, r21
    1106:	88 e0       	ldi	r24, 0x08	; 8
    1108:	01 30       	cpi	r16, 0x01	; 1
    110a:	18 07       	cpc	r17, r24
    110c:	10 f0       	brcs	.+4      	; 0x1112 <_Z6sendtohPKhjPhj+0x4c>
    110e:	00 e0       	ldi	r16, 0x00	; 0
    1110:	18 e0       	ldi	r17, 0x08	; 8
    1112:	01 15       	cp	r16, r1
    1114:	11 05       	cpc	r17, r1
    1116:	09 f4       	brne	.+2      	; 0x111a <_Z6sendtohPKhjPhj+0x54>
    1118:	48 c0       	rjmp	.+144    	; 0x11aa <_Z6sendtohPKhjPhj+0xe4>
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    111a:	cf 2d       	mov	r28, r15
    111c:	d0 e0       	ldi	r29, 0x00	; 0
    111e:	24 96       	adiw	r28, 0x04	; 4
    1120:	dc 2f       	mov	r29, r28
    1122:	cc 27       	eor	r28, r28
    1124:	ce 01       	movw	r24, r28
    1126:	0c 96       	adiw	r24, 0x0c	; 12
    1128:	bf 01       	movw	r22, r30
    112a:	44 e0       	ldi	r20, 0x04	; 4
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    1132:	ce 01       	movw	r24, r28
    1134:	40 96       	adiw	r24, 0x10	; 16
    1136:	6d 2d       	mov	r22, r13
    1138:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    113c:	ce 01       	movw	r24, r28
    113e:	41 96       	adiw	r24, 0x11	; 17
    1140:	6c 2d       	mov	r22, r12
    1142:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
  {
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);

    // copy data
    W5100.send_data_processing(s, (uint8_t *)buf, ret);
    1146:	0f 2e       	mov	r0, r31
    1148:	f8 e1       	ldi	r31, 0x18	; 24
    114a:	cf 2e       	mov	r12, r31
    114c:	f4 e0       	ldi	r31, 0x04	; 4
    114e:	df 2e       	mov	r13, r31
    1150:	f0 2d       	mov	r31, r0
    1152:	c6 01       	movw	r24, r12
    1154:	6f 2d       	mov	r22, r15
    1156:	a5 01       	movw	r20, r10
    1158:	98 01       	movw	r18, r16
    115a:	0e 94 a6 0c 	call	0x194c	; 0x194c <_ZN10W5100Class20send_data_processingEhPKhj>
    W5100.execCmdSn(s, Sock_SEND);
    115e:	c6 01       	movw	r24, r12
    1160:	6f 2d       	mov	r22, r15
    1162:	40 e2       	ldi	r20, 0x20	; 32
    1164:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN10W5100Class9execCmdSnEh7SockCMD>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1168:	22 96       	adiw	r28, 0x02	; 2

    /* +2008.01 bj */
    while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <_Z6sendtohPKhjPhj+0xc0>
    116c:	ce 01       	movw	r24, r28
    116e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
    {
      if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    1172:	83 ff       	sbrs	r24, 3
    1174:	08 c0       	rjmp	.+16     	; 0x1186 <_Z6sendtohPKhjPhj+0xc0>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    1176:	8f 2d       	mov	r24, r15
    1178:	9c 2d       	mov	r25, r12
    117a:	68 e1       	ldi	r22, 0x18	; 24
    117c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
      {
        /* +2008.01 [bj]: clear interrupt */
        W5100.writeSnIR(s, (SnIR::SEND_OK | SnIR::TIMEOUT)); /* clear SEND_OK & TIMEOUT */
        return 0;
    1180:	00 e0       	ldi	r16, 0x00	; 0
    1182:	10 e0       	ldi	r17, 0x00	; 0
    1184:	12 c0       	rjmp	.+36     	; 0x11aa <_Z6sendtohPKhjPhj+0xe4>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1186:	fc 2e       	mov	r15, r28
    1188:	cd 2e       	mov	r12, r29
    118a:	ce 01       	movw	r24, r28
    118c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
    // copy data
    W5100.send_data_processing(s, (uint8_t *)buf, ret);
    W5100.execCmdSn(s, Sock_SEND);

    /* +2008.01 bj */
    while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    1190:	84 ff       	sbrs	r24, 4
    1192:	ec cf       	rjmp	.-40     	; 0x116c <_Z6sendtohPKhjPhj+0xa6>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    1194:	8c 2f       	mov	r24, r28
    1196:	9d 2f       	mov	r25, r29
    1198:	60 e1       	ldi	r22, 0x10	; 16
    119a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    119e:	05 c0       	rjmp	.+10     	; 0x11aa <_Z6sendtohPKhjPhj+0xe4>
  ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    ((port == 0x00)) ||(ret == 0)
    ) 
  {
    /* +2008.01 [bj] : added return value */
    ret = 0;
    11a0:	00 e0       	ldi	r16, 0x00	; 0
    11a2:	10 e0       	ldi	r17, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <_Z6sendtohPKhjPhj+0xe4>
    11a6:	00 e0       	ldi	r16, 0x00	; 0
    11a8:	10 e0       	ldi	r17, 0x00	; 0

    /* +2008.01 bj */
    W5100.writeSnIR(s, SnIR::SEND_OK);
  }
  return ret;
}
    11aa:	80 2f       	mov	r24, r16
    11ac:	91 2f       	mov	r25, r17
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
    11bc:	bf 90       	pop	r11
    11be:	af 90       	pop	r10
    11c0:	08 95       	ret

000011c2 <_Z8recvfromhPhjS_Pj>:
 * 	TCP mode. This function is used to receive UDP, IP_RAW and MAC_RAW mode, and handle the header as well. 
 * 	
 * @return	This function return received data size for success else -1.
 */
uint16_t recvfrom(SOCKET s, uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t *port)
{
    11c2:	2f 92       	push	r2
    11c4:	3f 92       	push	r3
    11c6:	4f 92       	push	r4
    11c8:	5f 92       	push	r5
    11ca:	6f 92       	push	r6
    11cc:	7f 92       	push	r7
    11ce:	8f 92       	push	r8
    11d0:	9f 92       	push	r9
    11d2:	af 92       	push	r10
    11d4:	bf 92       	push	r11
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	2a 97       	sbiw	r28, 0x0a	; 10
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	d8 2e       	mov	r13, r24
    11f6:	3b 01       	movw	r6, r22
    11f8:	59 01       	movw	r10, r18
    11fa:	48 01       	movw	r8, r16
  uint8_t head[8];
  uint16_t data_len=0;
  uint16_t ptr=0;

  if ( len > 0 )
    11fc:	41 15       	cp	r20, r1
    11fe:	51 05       	cpc	r21, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <_Z8recvfromhPhjS_Pj+0x42>
    1202:	e2 c0       	rjmp	.+452    	; 0x13c8 <_Z8recvfromhPhjS_Pj+0x206>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1204:	08 2f       	mov	r16, r24
    1206:	10 e0       	ldi	r17, 0x00	; 0
    1208:	0c 5f       	subi	r16, 0xFC	; 252
    120a:	1f 4f       	sbci	r17, 0xFF	; 255
    120c:	10 2f       	mov	r17, r16
    120e:	00 27       	eor	r16, r16
    1210:	0f 2e       	mov	r0, r31
    1212:	f8 e2       	ldi	r31, 0x28	; 40
    1214:	4f 2e       	mov	r4, r31
    1216:	55 24       	eor	r5, r5
    1218:	f0 2d       	mov	r31, r0
    121a:	40 0e       	add	r4, r16
    121c:	51 1e       	adc	r5, r17
    121e:	c2 01       	movw	r24, r4
    1220:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
    1224:	e8 2e       	mov	r14, r24
    1226:	0f 2e       	mov	r0, r31
    1228:	f9 e2       	ldi	r31, 0x29	; 41
    122a:	2f 2e       	mov	r2, r31
    122c:	33 24       	eor	r3, r3
    122e:	f0 2d       	mov	r31, r0
    1230:	20 0e       	add	r2, r16
    1232:	31 1e       	adc	r3, r17
    1234:	c1 01       	movw	r24, r2
    1236:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	9e 2d       	mov	r25, r14
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	79 01       	movw	r14, r18
    1244:	e8 2a       	or	r14, r24
    1246:	f9 2a       	or	r15, r25
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1248:	c8 01       	movw	r24, r16
    124a:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  {
    ptr = W5100.readSnRX_RD(s);
    switch (W5100.readSnMR(s) & 0x07)
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	87 70       	andi	r24, 0x07	; 7
    1252:	90 70       	andi	r25, 0x00	; 0
    1254:	83 30       	cpi	r24, 0x03	; 3
    1256:	91 05       	cpc	r25, r1
    1258:	09 f4       	brne	.+2      	; 0x125c <_Z8recvfromhPhjS_Pj+0x9a>
    125a:	44 c0       	rjmp	.+136    	; 0x12e4 <_Z8recvfromhPhjS_Pj+0x122>
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	91 05       	cpc	r25, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <_Z8recvfromhPhjS_Pj+0xa2>
    1262:	78 c0       	rjmp	.+240    	; 0x1354 <_Z8recvfromhPhjS_Pj+0x192>
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	91 05       	cpc	r25, r1
    1268:	09 f0       	breq	.+2      	; 0x126c <_Z8recvfromhPhjS_Pj+0xaa>
    126a:	a5 c0       	rjmp	.+330    	; 0x13b6 <_Z8recvfromhPhjS_Pj+0x1f4>
    {
    case SnMR::UDP :
      W5100.read_data(s, (uint8_t *)ptr, head, 0x08);
    126c:	88 e1       	ldi	r24, 0x18	; 24
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	6d 2d       	mov	r22, r13
    1272:	a7 01       	movw	r20, r14
    1274:	9e 01       	movw	r18, r28
    1276:	2f 5f       	subi	r18, 0xFF	; 255
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	08 e0       	ldi	r16, 0x08	; 8
    127c:	10 e0       	ldi	r17, 0x00	; 0
    127e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += 8;
    1282:	c7 01       	movw	r24, r14
    1284:	08 96       	adiw	r24, 0x08	; 8
    1286:	9a 87       	std	Y+10, r25	; 0x0a
    1288:	89 87       	std	Y+9, r24	; 0x09
      // read peer's IP address, port number.
      addr[0] = head[0];
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	f5 01       	movw	r30, r10
    128e:	80 83       	st	Z, r24
      addr[1] = head[1];
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	81 83       	std	Z+1, r24	; 0x01
      addr[2] = head[2];
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	82 83       	std	Z+2, r24	; 0x02
      addr[3] = head[3];
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	83 83       	std	Z+3, r24	; 0x03
      *port = head[4];
      *port = (*port << 8) + head[5];
    129c:	9d 81       	ldd	r25, Y+5	; 0x05
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	2e 81       	ldd	r18, Y+6	; 0x06
    12a2:	82 0f       	add	r24, r18
    12a4:	91 1d       	adc	r25, r1
    12a6:	f4 01       	movw	r30, r8
    12a8:	91 83       	std	Z+1, r25	; 0x01
    12aa:	80 83       	st	Z, r24
      data_len = head[6];
      data_len = (data_len << 8) + head[7];
    12ac:	9f 81       	ldd	r25, Y+7	; 0x07
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	28 85       	ldd	r18, Y+8	; 0x08
    12b2:	7c 01       	movw	r14, r24
    12b4:	e2 0e       	add	r14, r18
    12b6:	f1 1c       	adc	r15, r1

      W5100.read_data(s, (uint8_t *)ptr, buf, data_len); // data copy.
    12b8:	88 e1       	ldi	r24, 0x18	; 24
    12ba:	94 e0       	ldi	r25, 0x04	; 4
    12bc:	6d 2d       	mov	r22, r13
    12be:	49 85       	ldd	r20, Y+9	; 0x09
    12c0:	5a 85       	ldd	r21, Y+10	; 0x0a
    12c2:	93 01       	movw	r18, r6
    12c4:	87 01       	movw	r16, r14
    12c6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += data_len;
    12ca:	09 85       	ldd	r16, Y+9	; 0x09
    12cc:	1a 85       	ldd	r17, Y+10	; 0x0a
    12ce:	0e 0d       	add	r16, r14
    12d0:	1f 1d       	adc	r17, r15
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    12d2:	c2 01       	movw	r24, r4
    12d4:	61 2f       	mov	r22, r17
    12d6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    12da:	c1 01       	movw	r24, r2
    12dc:	60 2f       	mov	r22, r16
    12de:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    12e2:	6b c0       	rjmp	.+214    	; 0x13ba <_Z8recvfromhPhjS_Pj+0x1f8>

      W5100.writeSnRX_RD(s, ptr);
      break;

    case SnMR::IPRAW :
      W5100.read_data(s, (uint8_t *)ptr, head, 0x06);
    12e4:	0f 2e       	mov	r0, r31
    12e6:	f8 e1       	ldi	r31, 0x18	; 24
    12e8:	8f 2e       	mov	r8, r31
    12ea:	f4 e0       	ldi	r31, 0x04	; 4
    12ec:	9f 2e       	mov	r9, r31
    12ee:	f0 2d       	mov	r31, r0
    12f0:	c4 01       	movw	r24, r8
    12f2:	6d 2d       	mov	r22, r13
    12f4:	a7 01       	movw	r20, r14
    12f6:	9e 01       	movw	r18, r28
    12f8:	2f 5f       	subi	r18, 0xFF	; 255
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	06 e0       	ldi	r16, 0x06	; 6
    12fe:	10 e0       	ldi	r17, 0x00	; 0
    1300:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += 6;
    1304:	c7 01       	movw	r24, r14
    1306:	06 96       	adiw	r24, 0x06	; 6
    1308:	9a 87       	std	Y+10, r25	; 0x0a
    130a:	89 87       	std	Y+9, r24	; 0x09

      addr[0] = head[0];
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	f5 01       	movw	r30, r10
    1310:	80 83       	st	Z, r24
      addr[1] = head[1];
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	81 83       	std	Z+1, r24	; 0x01
      addr[2] = head[2];
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	82 83       	std	Z+2, r24	; 0x02
      addr[3] = head[3];
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	83 83       	std	Z+3, r24	; 0x03
      data_len = head[4];
      data_len = (data_len << 8) + head[5];
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	2e 81       	ldd	r18, Y+6	; 0x06
    1324:	7c 01       	movw	r14, r24
    1326:	e2 0e       	add	r14, r18
    1328:	f1 1c       	adc	r15, r1

      W5100.read_data(s, (uint8_t *)ptr, buf, data_len); // data copy.
    132a:	c4 01       	movw	r24, r8
    132c:	6d 2d       	mov	r22, r13
    132e:	49 85       	ldd	r20, Y+9	; 0x09
    1330:	5a 85       	ldd	r21, Y+10	; 0x0a
    1332:	93 01       	movw	r18, r6
    1334:	87 01       	movw	r16, r14
    1336:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += data_len;
    133a:	09 85       	ldd	r16, Y+9	; 0x09
    133c:	1a 85       	ldd	r17, Y+10	; 0x0a
    133e:	0e 0d       	add	r16, r14
    1340:	1f 1d       	adc	r17, r15
    1342:	c2 01       	movw	r24, r4
    1344:	61 2f       	mov	r22, r17
    1346:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    134a:	c1 01       	movw	r24, r2
    134c:	60 2f       	mov	r22, r16
    134e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    1352:	33 c0       	rjmp	.+102    	; 0x13ba <_Z8recvfromhPhjS_Pj+0x1f8>

      W5100.writeSnRX_RD(s, ptr);
      break;

    case SnMR::MACRAW:
      W5100.read_data(s,(uint8_t*)ptr,head,2);
    1354:	0f 2e       	mov	r0, r31
    1356:	f8 e1       	ldi	r31, 0x18	; 24
    1358:	8f 2e       	mov	r8, r31
    135a:	f4 e0       	ldi	r31, 0x04	; 4
    135c:	9f 2e       	mov	r9, r31
    135e:	f0 2d       	mov	r31, r0
    1360:	c4 01       	movw	r24, r8
    1362:	6d 2d       	mov	r22, r13
    1364:	a7 01       	movw	r20, r14
    1366:	9e 01       	movw	r18, r28
    1368:	2f 5f       	subi	r18, 0xFF	; 255
    136a:	3f 4f       	sbci	r19, 0xFF	; 255
    136c:	02 e0       	ldi	r16, 0x02	; 2
    136e:	10 e0       	ldi	r17, 0x00	; 0
    1370:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr+=2;
    1374:	aa 24       	eor	r10, r10
    1376:	bb 24       	eor	r11, r11
    1378:	68 94       	set
    137a:	a1 f8       	bld	r10, 1
    137c:	ae 0c       	add	r10, r14
    137e:	bf 1c       	adc	r11, r15
      data_len = head[0];
      data_len = (data_len<<8) + head[1] - 2;
    1380:	39 81       	ldd	r19, Y+1	; 0x01
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 97       	sbiw	r24, 0x02	; 2
    138a:	7c 01       	movw	r14, r24
    138c:	e2 0e       	add	r14, r18
    138e:	f3 1e       	adc	r15, r19

      W5100.read_data(s,(uint8_t*) ptr,buf,data_len);
    1390:	c4 01       	movw	r24, r8
    1392:	6d 2d       	mov	r22, r13
    1394:	a5 01       	movw	r20, r10
    1396:	93 01       	movw	r18, r6
    1398:	87 01       	movw	r16, r14
    139a:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += data_len;
    139e:	85 01       	movw	r16, r10
    13a0:	0e 0d       	add	r16, r14
    13a2:	1f 1d       	adc	r17, r15
    13a4:	c2 01       	movw	r24, r4
    13a6:	61 2f       	mov	r22, r17
    13a8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    13ac:	c1 01       	movw	r24, r2
    13ae:	60 2f       	mov	r22, r16
    13b0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <_Z8recvfromhPhjS_Pj+0x1f8>
 * @return	This function return received data size for success else -1.
 */
uint16_t recvfrom(SOCKET s, uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t *port)
{
  uint8_t head[8];
  uint16_t data_len=0;
    13b6:	ee 24       	eor	r14, r14
    13b8:	ff 24       	eor	r15, r15
      break;

    default :
      break;
    }
    W5100.execCmdSn(s, Sock_RECV);
    13ba:	88 e1       	ldi	r24, 0x18	; 24
    13bc:	94 e0       	ldi	r25, 0x04	; 4
    13be:	6d 2d       	mov	r22, r13
    13c0:	40 e4       	ldi	r20, 0x40	; 64
    13c2:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN10W5100Class9execCmdSnEh7SockCMD>
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <_Z8recvfromhPhjS_Pj+0x20a>
 * @return	This function return received data size for success else -1.
 */
uint16_t recvfrom(SOCKET s, uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t *port)
{
  uint8_t head[8];
  uint16_t data_len=0;
    13c8:	ee 24       	eor	r14, r14
    13ca:	ff 24       	eor	r15, r15
      break;
    }
    W5100.execCmdSn(s, Sock_RECV);
  }
  return data_len;
}
    13cc:	8e 2d       	mov	r24, r14
    13ce:	9f 2d       	mov	r25, r15
    13d0:	2a 96       	adiw	r28, 0x0a	; 10
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	bf 90       	pop	r11
    13ec:	af 90       	pop	r10
    13ee:	9f 90       	pop	r9
    13f0:	8f 90       	pop	r8
    13f2:	7f 90       	pop	r7
    13f4:	6f 90       	pop	r6
    13f6:	5f 90       	pop	r5
    13f8:	4f 90       	pop	r4
    13fa:	3f 90       	pop	r3
    13fc:	2f 90       	pop	r2
    13fe:	08 95       	ret

00001400 <_Z8igmpsendhPKhj>:


uint16_t igmpsend(SOCKET s, const uint8_t * buf, uint16_t len)
{
    1400:	df 92       	push	r13
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	d8 2e       	mov	r13, r24
    1410:	9b 01       	movw	r18, r22
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    {
      /* in case of igmp, if send fails, then socket closed */
      /* if you want change, remove this code. */
      close(s);
      return 0;
    1412:	04 2f       	mov	r16, r20
    1414:	15 2f       	mov	r17, r21
    1416:	88 e0       	ldi	r24, 0x08	; 8
    1418:	01 30       	cpi	r16, 0x01	; 1
    141a:	18 07       	cpc	r17, r24
    141c:	10 f0       	brcs	.+4      	; 0x1422 <_Z8igmpsendhPKhj+0x22>
    141e:	00 e0       	ldi	r16, 0x00	; 0
    1420:	18 e0       	ldi	r17, 0x08	; 8
  if (len > W5100.SSIZE) 
    ret = W5100.SSIZE; // check size not to exceed MAX size.
  else 
    ret = len;

  if (ret == 0)
    1422:	01 15       	cp	r16, r1
    1424:	11 05       	cpc	r17, r1
    1426:	99 f1       	breq	.+102    	; 0x148e <_Z8igmpsendhPKhj+0x8e>
    return 0;

  W5100.send_data_processing(s, (uint8_t *)buf, ret);
    1428:	c8 e1       	ldi	r28, 0x18	; 24
    142a:	d4 e0       	ldi	r29, 0x04	; 4
    142c:	ce 01       	movw	r24, r28
    142e:	6d 2d       	mov	r22, r13
    1430:	a9 01       	movw	r20, r18
    1432:	98 01       	movw	r18, r16
    1434:	0e 94 a6 0c 	call	0x194c	; 0x194c <_ZN10W5100Class20send_data_processingEhPKhj>
  W5100.execCmdSn(s, Sock_SEND);
    1438:	ce 01       	movw	r24, r28
    143a:	6d 2d       	mov	r22, r13
    143c:	40 e2       	ldi	r20, 0x20	; 32
    143e:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN10W5100Class9execCmdSnEh7SockCMD>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1442:	8d 2d       	mov	r24, r13
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	04 96       	adiw	r24, 0x04	; 4
    1448:	98 2f       	mov	r25, r24
    144a:	88 27       	eor	r24, r24
    144c:	ec 01       	movw	r28, r24
    144e:	22 96       	adiw	r28, 0x02	; 2
    1450:	0f 2e       	mov	r0, r31
    1452:	f3 e0       	ldi	r31, 0x03	; 3
    1454:	ef 2e       	mov	r14, r31
    1456:	ff 24       	eor	r15, r15
    1458:	f0 2d       	mov	r31, r0
    145a:	e8 0e       	add	r14, r24
    145c:	f9 1e       	adc	r15, r25

  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    145e:	0e c0       	rjmp	.+28     	; 0x147c <_Z8igmpsendhPKhj+0x7c>
    1460:	c7 01       	movw	r24, r14
    1462:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
    1466:	ce 01       	movw	r24, r28
    1468:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  {
    status = W5100.readSnSR(s);
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    146c:	83 ff       	sbrs	r24, 3
    146e:	06 c0       	rjmp	.+12     	; 0x147c <_Z8igmpsendhPKhj+0x7c>
    {
      /* in case of igmp, if send fails, then socket closed */
      /* if you want change, remove this code. */
      close(s);
    1470:	8d 2d       	mov	r24, r13
    1472:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z5closeh>
      return 0;
    1476:	00 e0       	ldi	r16, 0x00	; 0
    1478:	10 e0       	ldi	r17, 0x00	; 0
    147a:	09 c0       	rjmp	.+18     	; 0x148e <_Z8igmpsendhPKhj+0x8e>
    147c:	ce 01       	movw	r24, r28
    147e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
    return 0;

  W5100.send_data_processing(s, (uint8_t *)buf, ret);
  W5100.execCmdSn(s, Sock_SEND);

  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    1482:	84 ff       	sbrs	r24, 4
    1484:	ed cf       	rjmp	.-38     	; 0x1460 <_Z8igmpsendhPKhj+0x60>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    1486:	ce 01       	movw	r24, r28
    1488:	60 e1       	ldi	r22, 0x10	; 16
    148a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    }
  }

  W5100.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    148e:	80 2f       	mov	r24, r16
    1490:	91 2f       	mov	r25, r17
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	ff 90       	pop	r15
    149c:	ef 90       	pop	r14
    149e:	df 90       	pop	r13
    14a0:	08 95       	ret

000014a2 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    14a2:	af 92       	push	r10
    14a4:	bf 92       	push	r11
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ff 92       	push	r15
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	c8 2f       	mov	r28, r24
    14b6:	6b 01       	movw	r12, r22
    14b8:	5a 01       	movw	r10, r20
    14ba:	89 01       	movw	r16, r18
  uint16_t ret =0;
  if (len > W5100.getTXFreeSize(s))
    14bc:	88 e1       	ldi	r24, 0x18	; 24
    14be:	94 e0       	ldi	r25, 0x04	; 4
    14c0:	6c 2f       	mov	r22, r28
    14c2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_ZN10W5100Class13getTXFreeSizeEh>
    14c6:	80 17       	cp	r24, r16
    14c8:	91 07       	cpc	r25, r17
    14ca:	40 f4       	brcc	.+16     	; 0x14dc <_Z10bufferDatahjPKhj+0x3a>
  {
    ret = W5100.getTXFreeSize(s); // check size not to exceed MAX size.
    14cc:	88 e1       	ldi	r24, 0x18	; 24
    14ce:	94 e0       	ldi	r25, 0x04	; 4
    14d0:	6c 2f       	mov	r22, r28
    14d2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_ZN10W5100Class13getTXFreeSizeEh>
    14d6:	f8 2e       	mov	r15, r24
    14d8:	d9 2f       	mov	r29, r25
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <_Z10bufferDatahjPKhj+0x3e>
  }
  else
  {
    ret = len;
    14dc:	f0 2e       	mov	r15, r16
    14de:	d1 2f       	mov	r29, r17
  }
  W5100.send_data_processing_offset(s, offset, buf, ret);
    14e0:	88 e1       	ldi	r24, 0x18	; 24
    14e2:	94 e0       	ldi	r25, 0x04	; 4
    14e4:	6c 2f       	mov	r22, r28
    14e6:	a6 01       	movw	r20, r12
    14e8:	95 01       	movw	r18, r10
    14ea:	0f 2d       	mov	r16, r15
    14ec:	1d 2f       	mov	r17, r29
    14ee:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    14f2:	8f 2d       	mov	r24, r15
    14f4:	9d 2f       	mov	r25, r29
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	df 90       	pop	r13
    1502:	cf 90       	pop	r12
    1504:	bf 90       	pop	r11
    1506:	af 90       	pop	r10
    1508:	08 95       	ret

0000150a <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	fb 01       	movw	r30, r22
    1514:	8a 01       	movw	r16, r20
  if
    1516:	90 81       	ld	r25, Z
    1518:	99 23       	and	r25, r25
    151a:	49 f4       	brne	.+18     	; 0x152e <_Z8startUDPhPhj+0x24>
    151c:	91 81       	ldd	r25, Z+1	; 0x01
    151e:	99 23       	and	r25, r25
    1520:	31 f4       	brne	.+12     	; 0x152e <_Z8startUDPhPhj+0x24>
    1522:	92 81       	ldd	r25, Z+2	; 0x02
    1524:	99 23       	and	r25, r25
    1526:	19 f4       	brne	.+6      	; 0x152e <_Z8startUDPhPhj+0x24>
    1528:	93 81       	ldd	r25, Z+3	; 0x03
    152a:	99 23       	and	r25, r25
    152c:	e1 f0       	breq	.+56     	; 0x1566 <_Z8startUDPhPhj+0x5c>
    152e:	01 15       	cp	r16, r1
    1530:	11 05       	cpc	r17, r1
    1532:	e1 f0       	breq	.+56     	; 0x156c <_Z8startUDPhPhj+0x62>
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    1534:	c8 2f       	mov	r28, r24
    1536:	d0 e0       	ldi	r29, 0x00	; 0
    1538:	24 96       	adiw	r28, 0x04	; 4
    153a:	dc 2f       	mov	r29, r28
    153c:	cc 27       	eor	r28, r28
    153e:	ce 01       	movw	r24, r28
    1540:	0c 96       	adiw	r24, 0x0c	; 12
    1542:	bf 01       	movw	r22, r30
    1544:	44 e0       	ldi	r20, 0x04	; 4
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    154c:	ce 01       	movw	r24, r28
    154e:	40 96       	adiw	r24, 0x10	; 16
    1550:	61 2f       	mov	r22, r17
    1552:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    1556:	ce 01       	movw	r24, r28
    1558:	41 96       	adiw	r24, 0x11	; 17
    155a:	60 2f       	mov	r22, r16
    155c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
  }
  else
  {
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);
    return 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <_Z8startUDPhPhj+0x66>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <_Z8startUDPhPhj+0x66>
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
  {
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);
    return 1;
  }
}
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	08 95       	ret

0000157a <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	18 2f       	mov	r17, r24
  W5100.execCmdSn(s, Sock_SEND);
    1582:	88 e1       	ldi	r24, 0x18	; 24
    1584:	94 e0       	ldi	r25, 0x04	; 4
    1586:	61 2f       	mov	r22, r17
    1588:	40 e2       	ldi	r20, 0x20	; 32
    158a:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN10W5100Class9execCmdSnEh7SockCMD>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    158e:	d1 2f       	mov	r29, r17
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	c8 2f       	mov	r28, r24
    1594:	ce 5f       	subi	r28, 0xFE	; 254
    1596:	db 4f       	sbci	r29, 0xFB	; 251
		
  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    1598:	0c c0       	rjmp	.+24     	; 0x15b2 <_Z7sendUDPh+0x38>
    159a:	ce 01       	movw	r24, r28
    159c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  {
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    15a0:	83 ff       	sbrs	r24, 3
    15a2:	07 c0       	rjmp	.+14     	; 0x15b2 <_Z7sendUDPh+0x38>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    15a4:	ce 01       	movw	r24, r28
    15a6:	68 e1       	ldi	r22, 0x18	; 24
    15a8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    {
      /* +2008.01 [bj]: clear interrupt */
      W5100.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0b c0       	rjmp	.+22     	; 0x15c8 <_Z7sendUDPh+0x4e>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    15b2:	ce 01       	movw	r24, r28
    15b4:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
int sendUDP(SOCKET s)
{
  W5100.execCmdSn(s, Sock_SEND);
		
  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    15b8:	84 ff       	sbrs	r24, 4
    15ba:	ef cf       	rjmp	.-34     	; 0x159a <_Z7sendUDPh+0x20>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    15bc:	ce 01       	movw	r24, r28
    15be:	60 e1       	ldi	r22, 0x10	; 16
    15c0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>

  /* +2008.01 bj */	
  W5100.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
}
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	08 95       	ret

000015d0 <_ZN10W5100Class5writeEjh>:
  inline static void initSS()    { DDRB  |=  _BV(0); };
  inline static void setSS()     { PORTB &= ~_BV(0); };
  inline static void resetSS()   { PORTB |=  _BV(0); }; 
#else
  inline static void initSS()    { DDRB  |=  _BV(2); };
  inline static void setSS()     { PORTB &= ~_BV(2); };
    15d0:	2a 98       	cbi	0x05, 2	; 5
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    15d2:	20 ef       	ldi	r18, 0xF0	; 240
    15d4:	2e bd       	out	0x2e, r18	; 46
  while (!(SPSR & _BV(SPIF)))
    15d6:	0d b4       	in	r0, 0x2d	; 45
    15d8:	07 fe       	sbrs	r0, 7
    15da:	fd cf       	rjmp	.-6      	; 0x15d6 <_ZN10W5100Class5writeEjh+0x6>
    ;
  return SPDR;
    15dc:	2e b5       	in	r18, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    15de:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    15e0:	0d b4       	in	r0, 0x2d	; 45
    15e2:	07 fe       	sbrs	r0, 7
    15e4:	fd cf       	rjmp	.-6      	; 0x15e0 <_ZN10W5100Class5writeEjh+0x10>
    ;
  return SPDR;
    15e6:	9e b5       	in	r25, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    15e8:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    15ea:	0d b4       	in	r0, 0x2d	; 45
    15ec:	07 fe       	sbrs	r0, 7
    15ee:	fd cf       	rjmp	.-6      	; 0x15ea <_ZN10W5100Class5writeEjh+0x1a>
    ;
  return SPDR;
    15f0:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    15f2:	6e bd       	out	0x2e, r22	; 46
  while (!(SPSR & _BV(SPIF)))
    15f4:	0d b4       	in	r0, 0x2d	; 45
    15f6:	07 fe       	sbrs	r0, 7
    15f8:	fd cf       	rjmp	.-6      	; 0x15f4 <_ZN10W5100Class5writeEjh+0x24>
    ;
  return SPDR;
    15fa:	8e b5       	in	r24, 0x2e	; 46
  inline static void resetSS()   { PORTB |=  _BV(2); };
    15fc:	2a 9a       	sbi	0x05, 2	; 5
  SPI.transfer(_addr >> 8);
  SPI.transfer(_addr & 0xFF);
  SPI.transfer(_data);
  resetSS();
  return 1;
}
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	08 95       	ret

00001602 <_ZN10W5100Class4initEv>:

#define TXBUF_BASE 0x4000
#define RXBUF_BASE 0x6000

void W5100Class::init(void)
{
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	ec 01       	movw	r28, r24
  delay(300);
    1608:	6c e2       	ldi	r22, 0x2C	; 44
    160a:	71 e0       	ldi	r23, 0x01	; 1
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <delay>

  SPI.begin();
    1614:	0e 94 74 14 	call	0x28e8	; 0x28e8 <_ZN8SPIClass5beginEv>
#elif defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB162__)
  inline static void initSS()    { DDRB  |=  _BV(0); };
  inline static void setSS()     { PORTB &= ~_BV(0); };
  inline static void resetSS()   { PORTB |=  _BV(0); }; 
#else
  inline static void initSS()    { DDRB  |=  _BV(2); };
    1618:	22 9a       	sbi	0x04, 2	; 4
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	60 e8       	ldi	r22, 0x80	; 128
    1620:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
  __GP_REGISTER8 (TMSR,   0x001B);    // Transmit memory size
    1624:	8b e1       	ldi	r24, 0x1B	; 27
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	65 e5       	ldi	r22, 0x55	; 85
    162a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
    162e:	8a e1       	ldi	r24, 0x1A	; 26
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	65 e5       	ldi	r22, 0x55	; 85
    1634:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e4       	ldi	r25, 0x40	; 64
    163c:	99 83       	std	Y+1, r25	; 0x01
    163e:	88 83       	st	Y, r24
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e6       	ldi	r25, 0x60	; 96
    1644:	99 87       	std	Y+9, r25	; 0x09
    1646:	88 87       	std	Y+8, r24	; 0x08
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	98 e4       	ldi	r25, 0x48	; 72
    164c:	9b 83       	std	Y+3, r25	; 0x03
    164e:	8a 83       	std	Y+2, r24	; 0x02
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	98 e6       	ldi	r25, 0x68	; 104
    1654:	9b 87       	std	Y+11, r25	; 0x0b
    1656:	8a 87       	std	Y+10, r24	; 0x0a
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e5       	ldi	r25, 0x50	; 80
    165c:	9d 83       	std	Y+5, r25	; 0x05
    165e:	8c 83       	std	Y+4, r24	; 0x04
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e7       	ldi	r25, 0x70	; 112
    1664:	9d 87       	std	Y+13, r25	; 0x0d
    1666:	8c 87       	std	Y+12, r24	; 0x0c
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	98 e5       	ldi	r25, 0x58	; 88
    166c:	9f 83       	std	Y+7, r25	; 0x07
    166e:	8e 83       	std	Y+6, r24	; 0x06
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	98 e7       	ldi	r25, 0x78	; 120
    1674:	9f 87       	std	Y+15, r25	; 0x0f
    1676:	8e 87       	std	Y+14, r24	; 0x0e
  }
}
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	08 95       	ret

0000167e <_ZN10W5100Class5writeEjPKhj>:
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    167e:	41 15       	cp	r20, r1
    1680:	51 05       	cpc	r21, r1
    1682:	09 f1       	breq	.+66     	; 0x16c6 <_ZN10W5100Class5writeEjPKhj+0x48>
    1684:	e6 2f       	mov	r30, r22
    1686:	f7 2f       	mov	r31, r23
  SPI.transfer(_data);
  resetSS();
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
    1688:	9a 01       	movw	r18, r20
    168a:	28 0f       	add	r18, r24
    168c:	39 1f       	adc	r19, r25
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    168e:	70 ef       	ldi	r23, 0xF0	; 240
  inline static void initSS()    { DDRB  |=  _BV(0); };
  inline static void setSS()     { PORTB &= ~_BV(0); };
  inline static void resetSS()   { PORTB |=  _BV(0); }; 
#else
  inline static void initSS()    { DDRB  |=  _BV(2); };
  inline static void setSS()     { PORTB &= ~_BV(2); };
    1690:	2a 98       	cbi	0x05, 2	; 5
    1692:	7e bd       	out	0x2e, r23	; 46
  while (!(SPSR & _BV(SPIF)))
    1694:	0d b4       	in	r0, 0x2d	; 45
    1696:	07 fe       	sbrs	r0, 7
    1698:	fd cf       	rjmp	.-6      	; 0x1694 <_ZN10W5100Class5writeEjPKhj+0x16>
    ;
  return SPDR;
    169a:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    169c:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    169e:	0d b4       	in	r0, 0x2d	; 45
    16a0:	07 fe       	sbrs	r0, 7
    16a2:	fd cf       	rjmp	.-6      	; 0x169e <_ZN10W5100Class5writeEjPKhj+0x20>
    ;
  return SPDR;
    16a4:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    16a6:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    16a8:	0d b4       	in	r0, 0x2d	; 45
    16aa:	07 fe       	sbrs	r0, 7
    16ac:	fd cf       	rjmp	.-6      	; 0x16a8 <_ZN10W5100Class5writeEjPKhj+0x2a>
    ;
  return SPDR;
    16ae:	6e b5       	in	r22, 0x2e	; 46
  {
    setSS();    
    SPI.transfer(0xF0);
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    _addr++;
    16b0:	01 96       	adiw	r24, 0x01	; 1
    SPI.transfer(_buf[i]);
    16b2:	61 91       	ld	r22, Z+
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    16b4:	6e bd       	out	0x2e, r22	; 46
  while (!(SPSR & _BV(SPIF)))
    16b6:	0d b4       	in	r0, 0x2d	; 45
    16b8:	07 fe       	sbrs	r0, 7
    16ba:	fd cf       	rjmp	.-6      	; 0x16b6 <_ZN10W5100Class5writeEjPKhj+0x38>
    ;
  return SPDR;
    16bc:	6e b5       	in	r22, 0x2e	; 46
  inline static void resetSS()   { PORTB |=  _BV(2); };
    16be:	2a 9a       	sbi	0x05, 2	; 5
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    16c0:	82 17       	cp	r24, r18
    16c2:	93 07       	cpc	r25, r19
    16c4:	29 f7       	brne	.-54     	; 0x1690 <_ZN10W5100Class5writeEjPKhj+0x12>
    _addr++;
    SPI.transfer(_buf[i]);
    resetSS();
  }
  return _len;
}
    16c6:	84 2f       	mov	r24, r20
    16c8:	95 2f       	mov	r25, r21
    16ca:	08 95       	ret

000016cc <_ZN10W5100Class4readEj>:
  inline static void initSS()    { DDRB  |=  _BV(0); };
  inline static void setSS()     { PORTB &= ~_BV(0); };
  inline static void resetSS()   { PORTB |=  _BV(0); }; 
#else
  inline static void initSS()    { DDRB  |=  _BV(2); };
  inline static void setSS()     { PORTB &= ~_BV(2); };
    16cc:	2a 98       	cbi	0x05, 2	; 5
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    16ce:	2f e0       	ldi	r18, 0x0F	; 15
    16d0:	2e bd       	out	0x2e, r18	; 46
  while (!(SPSR & _BV(SPIF)))
    16d2:	0d b4       	in	r0, 0x2d	; 45
    16d4:	07 fe       	sbrs	r0, 7
    16d6:	fd cf       	rjmp	.-6      	; 0x16d2 <_ZN10W5100Class4readEj+0x6>
    ;
  return SPDR;
    16d8:	2e b5       	in	r18, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    16da:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    16dc:	0d b4       	in	r0, 0x2d	; 45
    16de:	07 fe       	sbrs	r0, 7
    16e0:	fd cf       	rjmp	.-6      	; 0x16dc <_ZN10W5100Class4readEj+0x10>
    ;
  return SPDR;
    16e2:	9e b5       	in	r25, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    16e4:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    16e6:	0d b4       	in	r0, 0x2d	; 45
    16e8:	07 fe       	sbrs	r0, 7
    16ea:	fd cf       	rjmp	.-6      	; 0x16e6 <_ZN10W5100Class4readEj+0x1a>
    ;
  return SPDR;
    16ec:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    16ee:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & _BV(SPIF)))
    16f0:	0d b4       	in	r0, 0x2d	; 45
    16f2:	07 fe       	sbrs	r0, 7
    16f4:	fd cf       	rjmp	.-6      	; 0x16f0 <_ZN10W5100Class4readEj+0x24>
    ;
  return SPDR;
    16f6:	8e b5       	in	r24, 0x2e	; 46
  inline static void resetSS()   { PORTB |=  _BV(2); };
    16f8:	2a 9a       	sbi	0x05, 2	; 5
  SPI.transfer(_addr >> 8);
  SPI.transfer(_addr & 0xFF);
  uint8_t _data = SPI.transfer(0);
  resetSS();
  return _data;
}
    16fa:	08 95       	ret

000016fc <_ZN10W5100Class13getTXFreeSizeEh>:
    RBASE[i] = RXBUF_BASE + RSIZE * i;
  }
}

uint16_t W5100Class::getTXFreeSize(SOCKET s)
{
    16fc:	8f 92       	push	r8
    16fe:	9f 92       	push	r9
    1700:	af 92       	push	r10
    1702:	bf 92       	push	r11
    1704:	cf 92       	push	r12
    1706:	df 92       	push	r13
    1708:	ef 92       	push	r14
    170a:	ff 92       	push	r15
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1714:	86 2f       	mov	r24, r22
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	04 96       	adiw	r24, 0x04	; 4
    171a:	98 2f       	mov	r25, r24
    171c:	88 27       	eor	r24, r24
    171e:	aa 24       	eor	r10, r10
    1720:	bb 24       	eor	r11, r11
    1722:	68 94       	set
    1724:	a5 f8       	bld	r10, 5
    1726:	a8 0e       	add	r10, r24
    1728:	b9 1e       	adc	r11, r25
    172a:	0f 2e       	mov	r0, r31
    172c:	f1 e2       	ldi	r31, 0x21	; 33
    172e:	cf 2e       	mov	r12, r31
    1730:	dd 24       	eor	r13, r13
    1732:	f0 2d       	mov	r31, r0
    1734:	c8 0e       	add	r12, r24
    1736:	d9 1e       	adc	r13, r25
  uint16_t val=0, val1=0;
    1738:	00 e0       	ldi	r16, 0x00	; 0
    173a:	10 e0       	ldi	r17, 0x00	; 0
    173c:	c5 01       	movw	r24, r10
    173e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
    1742:	c8 2f       	mov	r28, r24
    1744:	c6 01       	movw	r24, r12
    1746:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	fc 2e       	mov	r15, r28
    174e:	ee 24       	eor	r14, r14
    1750:	ec 01       	movw	r28, r24
    1752:	ce 29       	or	r28, r14
    1754:	df 29       	or	r29, r15
  do {
    val1 = readSnTX_FSR(s);
    if (val1 != 0)
    1756:	20 97       	sbiw	r28, 0x00	; 0
    1758:	69 f0       	breq	.+26     	; 0x1774 <_ZN10W5100Class13getTXFreeSizeEh+0x78>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    175a:	c5 01       	movw	r24, r10
    175c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
    1760:	08 2f       	mov	r16, r24
    1762:	c6 01       	movw	r24, r12
    1764:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	90 2e       	mov	r9, r16
    176c:	88 24       	eor	r8, r8
    176e:	8c 01       	movw	r16, r24
    1770:	08 29       	or	r16, r8
    1772:	19 29       	or	r17, r9
}

uint16_t W5100Class::getTXFreeSize(SOCKET s)
{
  uint16_t val=0, val1=0;
  do {
    1774:	0c 17       	cp	r16, r28
    1776:	1d 07       	cpc	r17, r29
    1778:	09 f7       	brne	.-62     	; 0x173c <_ZN10W5100Class13getTXFreeSizeEh+0x40>
    if (val1 != 0)
      val = readSnTX_FSR(s);
  } 
  while (val != val1);
  return val;
}
    177a:	80 2f       	mov	r24, r16
    177c:	91 2f       	mov	r25, r17
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	cf 90       	pop	r12
    178e:	bf 90       	pop	r11
    1790:	af 90       	pop	r10
    1792:	9f 90       	pop	r9
    1794:	8f 90       	pop	r8
    1796:	08 95       	ret

00001798 <_ZN10W5100Class17getRXReceivedSizeEh>:

uint16_t W5100Class::getRXReceivedSize(SOCKET s)
{
    1798:	8f 92       	push	r8
    179a:	9f 92       	push	r9
    179c:	af 92       	push	r10
    179e:	bf 92       	push	r11
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    17b0:	86 2f       	mov	r24, r22
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	04 96       	adiw	r24, 0x04	; 4
    17b6:	98 2f       	mov	r25, r24
    17b8:	88 27       	eor	r24, r24
    17ba:	0f 2e       	mov	r0, r31
    17bc:	f6 e2       	ldi	r31, 0x26	; 38
    17be:	af 2e       	mov	r10, r31
    17c0:	bb 24       	eor	r11, r11
    17c2:	f0 2d       	mov	r31, r0
    17c4:	a8 0e       	add	r10, r24
    17c6:	b9 1e       	adc	r11, r25
    17c8:	0f 2e       	mov	r0, r31
    17ca:	f7 e2       	ldi	r31, 0x27	; 39
    17cc:	cf 2e       	mov	r12, r31
    17ce:	dd 24       	eor	r13, r13
    17d0:	f0 2d       	mov	r31, r0
    17d2:	c8 0e       	add	r12, r24
    17d4:	d9 1e       	adc	r13, r25
  uint16_t val=0,val1=0;
    17d6:	00 e0       	ldi	r16, 0x00	; 0
    17d8:	10 e0       	ldi	r17, 0x00	; 0
    17da:	c5 01       	movw	r24, r10
    17dc:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
    17e0:	c8 2f       	mov	r28, r24
    17e2:	c6 01       	movw	r24, r12
    17e4:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	fc 2e       	mov	r15, r28
    17ec:	ee 24       	eor	r14, r14
    17ee:	ec 01       	movw	r28, r24
    17f0:	ce 29       	or	r28, r14
    17f2:	df 29       	or	r29, r15
  do {
    val1 = readSnRX_RSR(s);
    if (val1 != 0)
    17f4:	20 97       	sbiw	r28, 0x00	; 0
    17f6:	69 f0       	breq	.+26     	; 0x1812 <_ZN10W5100Class17getRXReceivedSizeEh+0x7a>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    17f8:	c5 01       	movw	r24, r10
    17fa:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
    17fe:	08 2f       	mov	r16, r24
    1800:	c6 01       	movw	r24, r12
    1802:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	90 2e       	mov	r9, r16
    180a:	88 24       	eor	r8, r8
    180c:	8c 01       	movw	r16, r24
    180e:	08 29       	or	r16, r8
    1810:	19 29       	or	r17, r9
}

uint16_t W5100Class::getRXReceivedSize(SOCKET s)
{
  uint16_t val=0,val1=0;
  do {
    1812:	0c 17       	cp	r16, r28
    1814:	1d 07       	cpc	r17, r29
    1816:	09 f7       	brne	.-62     	; 0x17da <_ZN10W5100Class17getRXReceivedSizeEh+0x42>
    if (val1 != 0)
      val = readSnRX_RSR(s);
  } 
  while (val != val1);
  return val;
}
    1818:	80 2f       	mov	r24, r16
    181a:	91 2f       	mov	r25, r17
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	df 90       	pop	r13
    182a:	cf 90       	pop	r12
    182c:	bf 90       	pop	r11
    182e:	af 90       	pop	r10
    1830:	9f 90       	pop	r9
    1832:	8f 90       	pop	r8
    1834:	08 95       	ret

00001836 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>:
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
}

void W5100Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    1836:	2f 92       	push	r2
    1838:	3f 92       	push	r3
    183a:	4f 92       	push	r4
    183c:	5f 92       	push	r5
    183e:	6f 92       	push	r6
    1840:	7f 92       	push	r7
    1842:	8f 92       	push	r8
    1844:	9f 92       	push	r9
    1846:	af 92       	push	r10
    1848:	bf 92       	push	r11
    184a:	cf 92       	push	r12
    184c:	df 92       	push	r13
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	2c 01       	movw	r4, r24
    185c:	5a 01       	movw	r10, r20
    185e:	19 01       	movw	r2, r18
    1860:	78 01       	movw	r14, r16
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1862:	c6 2e       	mov	r12, r22
    1864:	dd 24       	eor	r13, r13
    1866:	c6 01       	movw	r24, r12
    1868:	04 96       	adiw	r24, 0x04	; 4
    186a:	d8 2f       	mov	r29, r24
    186c:	cc 27       	eor	r28, r28
    186e:	0f 2e       	mov	r0, r31
    1870:	f4 e2       	ldi	r31, 0x24	; 36
    1872:	6f 2e       	mov	r6, r31
    1874:	77 24       	eor	r7, r7
    1876:	f0 2d       	mov	r31, r0
    1878:	6c 0e       	add	r6, r28
    187a:	7d 1e       	adc	r7, r29
    187c:	c3 01       	movw	r24, r6
    187e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
    1882:	18 2f       	mov	r17, r24
    1884:	0f 2e       	mov	r0, r31
    1886:	f5 e2       	ldi	r31, 0x25	; 37
    1888:	8f 2e       	mov	r8, r31
    188a:	99 24       	eor	r9, r9
    188c:	f0 2d       	mov	r31, r0
    188e:	8c 0e       	add	r8, r28
    1890:	9d 1e       	adc	r9, r29
    1892:	c4 01       	movw	r24, r8
    1894:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
    1898:	c8 2f       	mov	r28, r24
    189a:	d0 e0       	ldi	r29, 0x00	; 0
    189c:	91 2f       	mov	r25, r17
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	8c 2b       	or	r24, r28
    18a2:	9d 2b       	or	r25, r29
  uint16_t ptr = readSnTX_WR(s);
  ptr += data_offset;
    18a4:	ec 01       	movw	r28, r24
    18a6:	ca 0d       	add	r28, r10
    18a8:	db 1d       	adc	r29, r11
  uint16_t offset = ptr & SMASK;
    18aa:	ae 01       	movw	r20, r28
    18ac:	57 70       	andi	r21, 0x07	; 7
  uint16_t dstAddr = offset + SBASE[s];
    18ae:	c6 01       	movw	r24, r12
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	84 0d       	add	r24, r4
    18b6:	95 1d       	adc	r25, r5
    18b8:	fc 01       	movw	r30, r24
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
    18be:	9a 01       	movw	r18, r20
    18c0:	28 0f       	add	r18, r24
    18c2:	39 1f       	adc	r19, r25

  if (offset + len > SSIZE) 
    18c4:	ca 01       	movw	r24, r20
    18c6:	8e 0d       	add	r24, r14
    18c8:	9f 1d       	adc	r25, r15
    18ca:	f8 e0       	ldi	r31, 0x08	; 8
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	9f 07       	cpc	r25, r31
    18d0:	d8 f0       	brcs	.+54     	; 0x1908 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0xd2>
  {
    // Wrap around circular buffer
    uint16_t size = SSIZE - offset;
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	98 e0       	ldi	r25, 0x08	; 8
    18d6:	5c 01       	movw	r10, r24
    18d8:	a4 1a       	sub	r10, r20
    18da:	b5 0a       	sbc	r11, r21
    write(dstAddr, data, size);
    18dc:	c9 01       	movw	r24, r18
    18de:	b1 01       	movw	r22, r2
    18e0:	a5 01       	movw	r20, r10
    18e2:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
    write(SBASE[s], data + size, len - size);
    18e6:	c6 01       	movw	r24, r12
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	84 0d       	add	r24, r4
    18ee:	95 1d       	adc	r25, r5
    18f0:	b1 01       	movw	r22, r2
    18f2:	6a 0d       	add	r22, r10
    18f4:	7b 1d       	adc	r23, r11
    18f6:	a7 01       	movw	r20, r14
    18f8:	4a 19       	sub	r20, r10
    18fa:	5b 09       	sbc	r21, r11
    18fc:	fc 01       	movw	r30, r24
    18fe:	80 81       	ld	r24, Z
    1900:	91 81       	ldd	r25, Z+1	; 0x01
    1902:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
    1906:	05 c0       	rjmp	.+10     	; 0x1912 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0xdc>
  } 
  else {
    write(dstAddr, data, len);
    1908:	c9 01       	movw	r24, r18
    190a:	b1 01       	movw	r22, r2
    190c:	a7 01       	movw	r20, r14
    190e:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN10W5100Class5writeEjPKhj>
  }

  ptr += len;
    1912:	ce 0d       	add	r28, r14
    1914:	df 1d       	adc	r29, r15
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    1916:	c3 01       	movw	r24, r6
    1918:	6d 2f       	mov	r22, r29
    191a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    191e:	c4 01       	movw	r24, r8
    1920:	6c 2f       	mov	r22, r28
    1922:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
  writeSnTX_WR(s, ptr);
}
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	df 90       	pop	r13
    1934:	cf 90       	pop	r12
    1936:	bf 90       	pop	r11
    1938:	af 90       	pop	r10
    193a:	9f 90       	pop	r9
    193c:	8f 90       	pop	r8
    193e:	7f 90       	pop	r7
    1940:	6f 90       	pop	r6
    1942:	5f 90       	pop	r5
    1944:	4f 90       	pop	r4
    1946:	3f 90       	pop	r3
    1948:	2f 90       	pop	r2
    194a:	08 95       	ret

0000194c <_ZN10W5100Class20send_data_processingEhPKhj>:
  return val;
}


void W5100Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	fa 01       	movw	r30, r20
    1952:	89 01       	movw	r16, r18
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	9f 01       	movw	r18, r30
    195a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
}
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	08 95       	ret

00001964 <_ZN10W5100Class4readEjPhj>:
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    1964:	41 15       	cp	r20, r1
    1966:	51 05       	cpc	r21, r1
    1968:	09 f1       	breq	.+66     	; 0x19ac <_ZN10W5100Class4readEjPhj+0x48>
    196a:	e6 2f       	mov	r30, r22
    196c:	f7 2f       	mov	r31, r23
  uint8_t _data = SPI.transfer(0);
  resetSS();
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
    196e:	9a 01       	movw	r18, r20
    1970:	28 0f       	add	r18, r24
    1972:	39 1f       	adc	r19, r25
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1974:	7f e0       	ldi	r23, 0x0F	; 15
  inline static void initSS()    { DDRB  |=  _BV(0); };
  inline static void setSS()     { PORTB &= ~_BV(0); };
  inline static void resetSS()   { PORTB |=  _BV(0); }; 
#else
  inline static void initSS()    { DDRB  |=  _BV(2); };
  inline static void setSS()     { PORTB &= ~_BV(2); };
    1976:	2a 98       	cbi	0x05, 2	; 5
    1978:	7e bd       	out	0x2e, r23	; 46
  while (!(SPSR & _BV(SPIF)))
    197a:	0d b4       	in	r0, 0x2d	; 45
    197c:	07 fe       	sbrs	r0, 7
    197e:	fd cf       	rjmp	.-6      	; 0x197a <_ZN10W5100Class4readEjPhj+0x16>
    ;
  return SPDR;
    1980:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1982:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    1984:	0d b4       	in	r0, 0x2d	; 45
    1986:	07 fe       	sbrs	r0, 7
    1988:	fd cf       	rjmp	.-6      	; 0x1984 <_ZN10W5100Class4readEjPhj+0x20>
    ;
  return SPDR;
    198a:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    198c:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    198e:	0d b4       	in	r0, 0x2d	; 45
    1990:	07 fe       	sbrs	r0, 7
    1992:	fd cf       	rjmp	.-6      	; 0x198e <_ZN10W5100Class4readEjPhj+0x2a>
    ;
  return SPDR;
    1994:	6e b5       	in	r22, 0x2e	; 46
  {
    setSS();
    SPI.transfer(0x0F);
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    _addr++;
    1996:	01 96       	adiw	r24, 0x01	; 1
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    1998:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & _BV(SPIF)))
    199a:	0d b4       	in	r0, 0x2d	; 45
    199c:	07 fe       	sbrs	r0, 7
    199e:	fd cf       	rjmp	.-6      	; 0x199a <_ZN10W5100Class4readEjPhj+0x36>
    ;
  return SPDR;
    19a0:	6e b5       	in	r22, 0x2e	; 46
    _buf[i] = SPI.transfer(0);
    19a2:	61 93       	st	Z+, r22
  inline static void resetSS()   { PORTB |=  _BV(2); };
    19a4:	2a 9a       	sbi	0x05, 2	; 5
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    19a6:	82 17       	cp	r24, r18
    19a8:	93 07       	cpc	r25, r19
    19aa:	29 f7       	brne	.-54     	; 0x1976 <_ZN10W5100Class4readEjPhj+0x12>
    _addr++;
    _buf[i] = SPI.transfer(0);
    resetSS();
  }
  return _len;
}
    19ac:	84 2f       	mov	r24, r20
    19ae:	95 2f       	mov	r25, r21
    19b0:	08 95       	ret

000019b2 <_ZN10W5100Class9read_dataEhPVhS1_j>:
    writeSnRX_RD(s, ptr);
  }
}

void W5100Class::read_data(SOCKET s, volatile uint8_t *src, volatile uint8_t *dst, uint16_t len)
{
    19b2:	af 92       	push	r10
    19b4:	bf 92       	push	r11
    19b6:	cf 92       	push	r12
    19b8:	df 92       	push	r13
    19ba:	ef 92       	push	r14
    19bc:	ff 92       	push	r15
    19be:	0f 93       	push	r16
    19c0:	1f 93       	push	r17
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	6c 01       	movw	r12, r24
    19c8:	59 01       	movw	r10, r18
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  src_mask = (uint16_t)src & RMASK;
    19ca:	57 70       	andi	r21, 0x07	; 7
  src_ptr = RBASE[s] + src_mask;
    19cc:	c6 2f       	mov	r28, r22
    19ce:	d0 e0       	ldi	r29, 0x00	; 0
    19d0:	ce 01       	movw	r24, r28
    19d2:	04 96       	adiw	r24, 0x04	; 4
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	8c 0d       	add	r24, r12
    19da:	9d 1d       	adc	r25, r13
    19dc:	fc 01       	movw	r30, r24
    19de:	80 81       	ld	r24, Z
    19e0:	91 81       	ldd	r25, Z+1	; 0x01
    19e2:	9a 01       	movw	r18, r20
    19e4:	28 0f       	add	r18, r24
    19e6:	39 1f       	adc	r19, r25

  if( (src_mask + len) > RSIZE ) 
    19e8:	c8 01       	movw	r24, r16
    19ea:	84 0f       	add	r24, r20
    19ec:	95 1f       	adc	r25, r21
    19ee:	f8 e0       	ldi	r31, 0x08	; 8
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	9f 07       	cpc	r25, r31
    19f4:	e0 f0       	brcs	.+56     	; 0x1a2e <_ZN10W5100Class9read_dataEhPVhS1_j+0x7c>
  {
    size = RSIZE - src_mask;
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	98 e0       	ldi	r25, 0x08	; 8
    19fa:	7c 01       	movw	r14, r24
    19fc:	e4 1a       	sub	r14, r20
    19fe:	f5 0a       	sbc	r15, r21
    read(src_ptr, (uint8_t *)dst, size);
    1a00:	c9 01       	movw	r24, r18
    1a02:	b5 01       	movw	r22, r10
    1a04:	a7 01       	movw	r20, r14
    1a06:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN10W5100Class4readEjPhj>
    dst += size;
    read(RBASE[s], (uint8_t *) dst, len - size);
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	04 96       	adiw	r24, 0x04	; 4
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	8c 0d       	add	r24, r12
    1a14:	9d 1d       	adc	r25, r13

  if( (src_mask + len) > RSIZE ) 
  {
    size = RSIZE - src_mask;
    read(src_ptr, (uint8_t *)dst, size);
    dst += size;
    1a16:	b5 01       	movw	r22, r10
    1a18:	6e 0d       	add	r22, r14
    1a1a:	7f 1d       	adc	r23, r15
    read(RBASE[s], (uint8_t *) dst, len - size);
    1a1c:	a8 01       	movw	r20, r16
    1a1e:	4e 19       	sub	r20, r14
    1a20:	5f 09       	sbc	r21, r15
    1a22:	fc 01       	movw	r30, r24
    1a24:	80 81       	ld	r24, Z
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
    1a28:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN10W5100Class4readEjPhj>
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <_ZN10W5100Class9read_dataEhPVhS1_j+0x86>
  } 
  else
    read(src_ptr, (uint8_t *) dst, len);
    1a2e:	c9 01       	movw	r24, r18
    1a30:	b5 01       	movw	r22, r10
    1a32:	a8 01       	movw	r20, r16
    1a34:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN10W5100Class4readEjPhj>
}
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	1f 91       	pop	r17
    1a3e:	0f 91       	pop	r16
    1a40:	ff 90       	pop	r15
    1a42:	ef 90       	pop	r14
    1a44:	df 90       	pop	r13
    1a46:	cf 90       	pop	r12
    1a48:	bf 90       	pop	r11
    1a4a:	af 90       	pop	r10
    1a4c:	08 95       	ret

00001a4e <_ZN10W5100Class20recv_data_processingEhPhjh>:
  writeSnTX_WR(s, ptr);
}


void W5100Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
{
    1a4e:	4f 92       	push	r4
    1a50:	5f 92       	push	r5
    1a52:	6f 92       	push	r6
    1a54:	7f 92       	push	r7
    1a56:	8f 92       	push	r8
    1a58:	9f 92       	push	r9
    1a5a:	af 92       	push	r10
    1a5c:	bf 92       	push	r11
    1a5e:	cf 92       	push	r12
    1a60:	df 92       	push	r13
    1a62:	ff 92       	push	r15
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	3c 01       	movw	r6, r24
    1a6e:	16 2f       	mov	r17, r22
    1a70:	2a 01       	movw	r4, r20
    1a72:	69 01       	movw	r12, r18
    1a74:	f0 2e       	mov	r15, r16
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1a76:	c6 2f       	mov	r28, r22
    1a78:	d0 e0       	ldi	r29, 0x00	; 0
    1a7a:	24 96       	adiw	r28, 0x04	; 4
    1a7c:	dc 2f       	mov	r29, r28
    1a7e:	cc 27       	eor	r28, r28
    1a80:	0f 2e       	mov	r0, r31
    1a82:	f8 e2       	ldi	r31, 0x28	; 40
    1a84:	8f 2e       	mov	r8, r31
    1a86:	99 24       	eor	r9, r9
    1a88:	f0 2d       	mov	r31, r0
    1a8a:	8c 0e       	add	r8, r28
    1a8c:	9d 1e       	adc	r9, r29
    1a8e:	c4 01       	movw	r24, r8
    1a90:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
    1a94:	08 2f       	mov	r16, r24
    1a96:	0f 2e       	mov	r0, r31
    1a98:	f9 e2       	ldi	r31, 0x29	; 41
    1a9a:	af 2e       	mov	r10, r31
    1a9c:	bb 24       	eor	r11, r11
    1a9e:	f0 2d       	mov	r31, r0
    1aa0:	ac 0e       	add	r10, r28
    1aa2:	bd 1e       	adc	r11, r29
    1aa4:	c5 01       	movw	r24, r10
    1aa6:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	90 2f       	mov	r25, r16
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	e9 01       	movw	r28, r18
    1ab4:	c8 2b       	or	r28, r24
    1ab6:	d9 2b       	or	r29, r25
  uint16_t ptr;
  ptr = readSnRX_RD(s);
  read_data(s, (uint8_t *)ptr, data, len);
    1ab8:	c3 01       	movw	r24, r6
    1aba:	61 2f       	mov	r22, r17
    1abc:	ae 01       	movw	r20, r28
    1abe:	92 01       	movw	r18, r4
    1ac0:	86 01       	movw	r16, r12
    1ac2:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <_ZN10W5100Class9read_dataEhPVhS1_j>
  if (!peek)
    1ac6:	ff 20       	and	r15, r15
    1ac8:	51 f4       	brne	.+20     	; 0x1ade <_ZN10W5100Class20recv_data_processingEhPhjh+0x90>
  {
    ptr += len;
    1aca:	cc 0d       	add	r28, r12
    1acc:	dd 1d       	adc	r29, r13
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    1ace:	c4 01       	movw	r24, r8
    1ad0:	6d 2f       	mov	r22, r29
    1ad2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    1ad6:	c5 01       	movw	r24, r10
    1ad8:	6c 2f       	mov	r22, r28
    1ada:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
    writeSnRX_RD(s, ptr);
  }
}
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	ff 90       	pop	r15
    1ae8:	df 90       	pop	r13
    1aea:	cf 90       	pop	r12
    1aec:	bf 90       	pop	r11
    1aee:	af 90       	pop	r10
    1af0:	9f 90       	pop	r9
    1af2:	8f 90       	pop	r8
    1af4:	7f 90       	pop	r7
    1af6:	6f 90       	pop	r6
    1af8:	5f 90       	pop	r5
    1afa:	4f 90       	pop	r4
    1afc:	08 95       	ret

00001afe <_ZN10W5100Class9execCmdSnEh7SockCMD>:
    resetSS();
  }
  return _len;
}

void W5100Class::execCmdSn(SOCKET s, SockCMD _cmd) {
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	d6 2f       	mov	r29, r22
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	c8 2f       	mov	r28, r24
    1b08:	cf 5f       	subi	r28, 0xFF	; 255
    1b0a:	db 4f       	sbci	r29, 0xFB	; 251
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	64 2f       	mov	r22, r20
    1b10:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <_ZN10W5100Class5writeEjh>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1b14:	ce 01       	movw	r24, r28
    1b16:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN10W5100Class4readEj>
  // Send command to socket
  writeSnCR(s, _cmd);
  // Wait for command to complete
  while (readSnCR(s))
    1b1a:	88 23       	and	r24, r24
    1b1c:	d9 f7       	brne	.-10     	; 0x1b14 <_ZN10W5100Class9execCmdSnEh7SockCMD+0x16>
    ;
}
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1b24:	fc 01       	movw	r30, r24
    1b26:	24 85       	ldd	r18, Z+12	; 0x0c
    1b28:	35 85       	ldd	r19, Z+13	; 0x0d
    1b2a:	f9 01       	movw	r30, r18
    1b2c:	e0 5c       	subi	r30, 0xC0	; 192
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	91 81       	ldd	r25, Z+1	; 0x01
    1b34:	2e 5b       	subi	r18, 0xBE	; 190
    1b36:	3f 4f       	sbci	r19, 0xFF	; 255
    1b38:	f9 01       	movw	r30, r18
    1b3a:	20 81       	ld	r18, Z
    1b3c:	31 81       	ldd	r19, Z+1	; 0x01
    1b3e:	82 1b       	sub	r24, r18
    1b40:	93 0b       	sbc	r25, r19
    1b42:	8f 73       	andi	r24, 0x3F	; 63
    1b44:	90 70       	andi	r25, 0x00	; 0
}
    1b46:	08 95       	ret

00001b48 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1b48:	fc 01       	movw	r30, r24
    1b4a:	84 85       	ldd	r24, Z+12	; 0x0c
    1b4c:	95 85       	ldd	r25, Z+13	; 0x0d
    1b4e:	fc 01       	movw	r30, r24
    1b50:	e0 5c       	subi	r30, 0xC0	; 192
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	20 81       	ld	r18, Z
    1b56:	31 81       	ldd	r19, Z+1	; 0x01
    1b58:	fc 01       	movw	r30, r24
    1b5a:	ee 5b       	subi	r30, 0xBE	; 190
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	40 81       	ld	r20, Z
    1b60:	51 81       	ldd	r21, Z+1	; 0x01
    1b62:	24 17       	cp	r18, r20
    1b64:	35 07       	cpc	r19, r21
    1b66:	59 f0       	breq	.+22     	; 0x1b7e <_ZN14HardwareSerial4peekEv+0x36>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1b68:	fc 01       	movw	r30, r24
    1b6a:	ee 5b       	subi	r30, 0xBE	; 190
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	20 81       	ld	r18, Z
    1b70:	31 81       	ldd	r19, Z+1	; 0x01
    1b72:	82 0f       	add	r24, r18
    1b74:	93 1f       	adc	r25, r19
    1b76:	fc 01       	movw	r30, r24
    1b78:	80 81       	ld	r24, Z
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    1b82:	08 95       	ret

00001b84 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1b84:	dc 01       	movw	r26, r24
    1b86:	1c 96       	adiw	r26, 0x0c	; 12
    1b88:	8d 91       	ld	r24, X+
    1b8a:	9c 91       	ld	r25, X
    1b8c:	1d 97       	sbiw	r26, 0x0d	; 13
    1b8e:	fc 01       	movw	r30, r24
    1b90:	e0 5c       	subi	r30, 0xC0	; 192
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	20 81       	ld	r18, Z
    1b96:	31 81       	ldd	r19, Z+1	; 0x01
    1b98:	fc 01       	movw	r30, r24
    1b9a:	ee 5b       	subi	r30, 0xBE	; 190
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	40 81       	ld	r20, Z
    1ba0:	51 81       	ldd	r21, Z+1	; 0x01
    1ba2:	24 17       	cp	r18, r20
    1ba4:	35 07       	cpc	r19, r21
    1ba6:	99 f0       	breq	.+38     	; 0x1bce <_ZN14HardwareSerial4readEv+0x4a>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1ba8:	fc 01       	movw	r30, r24
    1baa:	ee 5b       	subi	r30, 0xBE	; 190
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	20 81       	ld	r18, Z
    1bb0:	31 81       	ldd	r19, Z+1	; 0x01
    1bb2:	82 0f       	add	r24, r18
    1bb4:	93 1f       	adc	r25, r19
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	8c 91       	ld	r24, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    1bba:	20 81       	ld	r18, Z
    1bbc:	31 81       	ldd	r19, Z+1	; 0x01
    1bbe:	2f 5f       	subi	r18, 0xFF	; 255
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	2f 73       	andi	r18, 0x3F	; 63
    1bc4:	30 70       	andi	r19, 0x00	; 0
    1bc6:	31 83       	std	Z+1, r19	; 0x01
    1bc8:	20 83       	st	Z, r18
    return c;
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    1bce:	8f ef       	ldi	r24, 0xFF	; 255
    1bd0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    1bd2:	08 95       	ret

00001bd4 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	1e 96       	adiw	r26, 0x0e	; 14
    1bd8:	ed 91       	ld	r30, X+
    1bda:	fc 91       	ld	r31, X
    1bdc:	1f 97       	sbiw	r26, 0x0f	; 15
    1bde:	df 01       	movw	r26, r30
    1be0:	a0 5c       	subi	r26, 0xC0	; 192
    1be2:	bf 4f       	sbci	r27, 0xFF	; 255
    1be4:	ee 5b       	subi	r30, 0xBE	; 190
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	2d 91       	ld	r18, X+
    1bea:	3c 91       	ld	r19, X
    1bec:	11 97       	sbiw	r26, 0x01	; 1
    1bee:	80 81       	ld	r24, Z
    1bf0:	91 81       	ldd	r25, Z+1	; 0x01
    1bf2:	28 17       	cp	r18, r24
    1bf4:	39 07       	cpc	r19, r25
    1bf6:	c1 f7       	brne	.-16     	; 0x1be8 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    1bf8:	08 95       	ret

00001bfa <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	ec 01       	movw	r28, r24
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1c02:	ae 85       	ldd	r26, Y+14	; 0x0e
    1c04:	bf 85       	ldd	r27, Y+15	; 0x0f
    1c06:	fd 01       	movw	r30, r26
    1c08:	e0 5c       	subi	r30, 0xC0	; 192
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	20 81       	ld	r18, Z
    1c0e:	31 81       	ldd	r19, Z+1	; 0x01
    1c10:	2f 5f       	subi	r18, 0xFF	; 255
    1c12:	3f 4f       	sbci	r19, 0xFF	; 255
    1c14:	2f 73       	andi	r18, 0x3F	; 63
    1c16:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1c18:	12 2f       	mov	r17, r18
    1c1a:	73 2f       	mov	r23, r19
    1c1c:	fd 01       	movw	r30, r26
    1c1e:	ee 5b       	subi	r30, 0xBE	; 190
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	41 2f       	mov	r20, r17
    1c24:	57 2f       	mov	r21, r23
    1c26:	80 81       	ld	r24, Z
    1c28:	91 81       	ldd	r25, Z+1	; 0x01
    1c2a:	28 17       	cp	r18, r24
    1c2c:	39 07       	cpc	r19, r25
    1c2e:	c9 f3       	breq	.-14     	; 0x1c22 <_ZN14HardwareSerial5writeEh+0x28>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1c30:	fd 01       	movw	r30, r26
    1c32:	e0 5c       	subi	r30, 0xC0	; 192
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	80 81       	ld	r24, Z
    1c38:	91 81       	ldd	r25, Z+1	; 0x01
    1c3a:	a8 0f       	add	r26, r24
    1c3c:	b9 1f       	adc	r27, r25
    1c3e:	6c 93       	st	X, r22
  _tx_buffer->head = i;
    1c40:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c42:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c44:	e0 5c       	subi	r30, 0xC0	; 192
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	51 83       	std	Z+1, r21	; 0x01
    1c4a:	40 83       	st	Z, r20
	
  sbi(*_ucsrb, _udrie);
    1c4c:	ee 89       	ldd	r30, Y+22	; 0x16
    1c4e:	ff 89       	ldd	r31, Y+23	; 0x17
    1c50:	40 81       	ld	r20, Z
    1c52:	21 e0       	ldi	r18, 0x01	; 1
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	c9 01       	movw	r24, r18
    1c58:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <_ZN14HardwareSerial5writeEh+0x66>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	0a 94       	dec	r0
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <_ZN14HardwareSerial5writeEh+0x62>
    1c64:	84 2b       	or	r24, r20
    1c66:	80 83       	st	Z, r24
  
  return 1;
}
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	08 95       	ret

00001c74 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1c74:	08 95       	ret

00001c76 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    1c76:	1f 92       	push	r1
    1c78:	0f 92       	push	r0
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	0f 92       	push	r0
    1c7e:	11 24       	eor	r1, r1
    1c80:	2f 93       	push	r18
    1c82:	3f 93       	push	r19
    1c84:	4f 93       	push	r20
    1c86:	8f 93       	push	r24
    1c88:	9f 93       	push	r25
    1c8a:	ef 93       	push	r30
    1c8c:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1c8e:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1c92:	80 91 cb 04 	lds	r24, 0x04CB
    1c96:	90 91 cc 04 	lds	r25, 0x04CC
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	8f 73       	andi	r24, 0x3F	; 63
    1c9e:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1ca0:	20 91 cd 04 	lds	r18, 0x04CD
    1ca4:	30 91 ce 04 	lds	r19, 0x04CE
    1ca8:	82 17       	cp	r24, r18
    1caa:	93 07       	cpc	r25, r19
    1cac:	59 f0       	breq	.+22     	; 0x1cc4 <__vector_18+0x4e>
    buffer->buffer[buffer->head] = c;
    1cae:	e0 91 cb 04 	lds	r30, 0x04CB
    1cb2:	f0 91 cc 04 	lds	r31, 0x04CC
    1cb6:	e5 57       	subi	r30, 0x75	; 117
    1cb8:	fb 4f       	sbci	r31, 0xFB	; 251
    1cba:	40 83       	st	Z, r20
    buffer->head = i;
    1cbc:	90 93 cc 04 	sts	0x04CC, r25
    1cc0:	80 93 cb 04 	sts	0x04CB, r24
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1cc4:	ff 91       	pop	r31
    1cc6:	ef 91       	pop	r30
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	4f 91       	pop	r20
    1cce:	3f 91       	pop	r19
    1cd0:	2f 91       	pop	r18
    1cd2:	0f 90       	pop	r0
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	0f 90       	pop	r0
    1cd8:	1f 90       	pop	r1
    1cda:	18 95       	reti

00001cdc <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1cdc:	88 e2       	ldi	r24, 0x28	; 40
    1cde:	94 e0       	ldi	r25, 0x04	; 4
    1ce0:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <_ZN14HardwareSerial9availableEv>
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	11 f0       	breq	.+4      	; 0x1cec <_Z14serialEventRunv+0x10>
    1ce8:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <_Z11serialEventv>
    1cec:	08 95       	ret

00001cee <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    1cee:	1f 92       	push	r1
    1cf0:	0f 92       	push	r0
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	0f 92       	push	r0
    1cf6:	11 24       	eor	r1, r1
    1cf8:	2f 93       	push	r18
    1cfa:	3f 93       	push	r19
    1cfc:	8f 93       	push	r24
    1cfe:	9f 93       	push	r25
    1d00:	ef 93       	push	r30
    1d02:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    1d04:	20 91 87 04 	lds	r18, 0x0487
    1d08:	30 91 88 04 	lds	r19, 0x0488
    1d0c:	80 91 89 04 	lds	r24, 0x0489
    1d10:	90 91 8a 04 	lds	r25, 0x048A
    1d14:	28 17       	cp	r18, r24
    1d16:	39 07       	cpc	r19, r25
    1d18:	31 f4       	brne	.+12     	; 0x1d26 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1d1a:	e1 ec       	ldi	r30, 0xC1	; 193
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	8f 7d       	andi	r24, 0xDF	; 223
    1d22:	80 83       	st	Z, r24
    1d24:	14 c0       	rjmp	.+40     	; 0x1d4e <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1d26:	e0 91 89 04 	lds	r30, 0x0489
    1d2a:	f0 91 8a 04 	lds	r31, 0x048A
    1d2e:	e9 5b       	subi	r30, 0xB9	; 185
    1d30:	fb 4f       	sbci	r31, 0xFB	; 251
    1d32:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1d34:	80 91 89 04 	lds	r24, 0x0489
    1d38:	90 91 8a 04 	lds	r25, 0x048A
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	8f 73       	andi	r24, 0x3F	; 63
    1d40:	90 70       	andi	r25, 0x00	; 0
    1d42:	90 93 8a 04 	sts	0x048A, r25
    1d46:	80 93 89 04 	sts	0x0489, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1d4a:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    1d4e:	ff 91       	pop	r31
    1d50:	ef 91       	pop	r30
    1d52:	9f 91       	pop	r25
    1d54:	8f 91       	pop	r24
    1d56:	3f 91       	pop	r19
    1d58:	2f 91       	pop	r18
    1d5a:	0f 90       	pop	r0
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	0f 90       	pop	r0
    1d60:	1f 90       	pop	r1
    1d62:	18 95       	reti

00001d64 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
    1d64:	8f 92       	push	r8
    1d66:	af 92       	push	r10
    1d68:	bf 92       	push	r11
    1d6a:	cf 92       	push	r12
    1d6c:	df 92       	push	r13
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1d80:	13 82       	std	Z+3, r1	; 0x03
    1d82:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1d84:	88 ee       	ldi	r24, 0xE8	; 232
    1d86:	93 e0       	ldi	r25, 0x03	; 3
    1d88:	a0 e0       	ldi	r26, 0x00	; 0
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	84 83       	std	Z+4, r24	; 0x04
    1d8e:	95 83       	std	Z+5, r25	; 0x05
    1d90:	a6 83       	std	Z+6, r26	; 0x06
    1d92:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1d94:	83 e8       	ldi	r24, 0x83	; 131
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    1d9c:	75 87       	std	Z+13, r23	; 0x0d
    1d9e:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
    1da0:	57 87       	std	Z+15, r21	; 0x0f
    1da2:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    1da4:	31 8b       	std	Z+17, r19	; 0x11
    1da6:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    1da8:	13 8b       	std	Z+19, r17	; 0x13
    1daa:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
    1dac:	f5 8a       	std	Z+21, r15	; 0x15
    1dae:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
    1db0:	d7 8a       	std	Z+23, r13	; 0x17
    1db2:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
    1db4:	b1 8e       	std	Z+25, r11	; 0x19
    1db6:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
    1db8:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
    1dba:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dbc:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    1dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc0:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    1dc2:	88 89       	ldd	r24, Y+16	; 0x10
    1dc4:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    1dc6:	89 89       	ldd	r24, Y+17	; 0x11
    1dc8:	86 8f       	std	Z+30, r24	; 0x1e
}
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	1f 91       	pop	r17
    1dd0:	0f 91       	pop	r16
    1dd2:	ff 90       	pop	r15
    1dd4:	ef 90       	pop	r14
    1dd6:	df 90       	pop	r13
    1dd8:	cf 90       	pop	r12
    1dda:	bf 90       	pop	r11
    1ddc:	af 90       	pop	r10
    1dde:	8f 90       	pop	r8
    1de0:	08 95       	ret

00001de2 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    1de2:	2f 92       	push	r2
    1de4:	3f 92       	push	r3
    1de6:	4f 92       	push	r4
    1de8:	5f 92       	push	r5
    1dea:	6f 92       	push	r6
    1dec:	7f 92       	push	r7
    1dee:	8f 92       	push	r8
    1df0:	9f 92       	push	r9
    1df2:	af 92       	push	r10
    1df4:	bf 92       	push	r11
    1df6:	cf 92       	push	r12
    1df8:	df 92       	push	r13
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	8c 01       	movw	r16, r24
    1e08:	6a 01       	movw	r12, r20
    1e0a:	7b 01       	movw	r14, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    1e0c:	c1 e0       	ldi	r28, 0x01	; 1
    1e0e:	40 30       	cpi	r20, 0x00	; 0
    1e10:	21 ee       	ldi	r18, 0xE1	; 225
    1e12:	52 07       	cpc	r21, r18
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	62 07       	cpc	r22, r18
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	72 07       	cpc	r23, r18
    1e1c:	21 f4       	brne	.+8      	; 0x1e26 <_ZN14HardwareSerial5beginEm+0x44>
    1e1e:	c0 e0       	ldi	r28, 0x00	; 0
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <_ZN14HardwareSerial5beginEm+0x44>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    1e22:	cd 2f       	mov	r28, r29
    1e24:	18 c0       	rjmp	.+48     	; 0x1e56 <_ZN14HardwareSerial5beginEm+0x74>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1e26:	22 24       	eor	r2, r2
    1e28:	33 24       	eor	r3, r3
    1e2a:	23 94       	inc	r2
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1e2c:	0f 2e       	mov	r0, r31
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	8f 2e       	mov	r8, r31
    1e32:	f9 e0       	ldi	r31, 0x09	; 9
    1e34:	9f 2e       	mov	r9, r31
    1e36:	fd e3       	ldi	r31, 0x3D	; 61
    1e38:	af 2e       	mov	r10, r31
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	bf 2e       	mov	r11, r31
    1e3e:	f0 2d       	mov	r31, r0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1e40:	0f 2e       	mov	r0, r31
    1e42:	f0 e8       	ldi	r31, 0x80	; 128
    1e44:	4f 2e       	mov	r4, r31
    1e46:	f4 e8       	ldi	r31, 0x84	; 132
    1e48:	5f 2e       	mov	r5, r31
    1e4a:	fe e1       	ldi	r31, 0x1E	; 30
    1e4c:	6f 2e       	mov	r6, r31
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	7f 2e       	mov	r7, r31
    1e52:	f0 2d       	mov	r31, r0
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    1e54:	d0 e0       	ldi	r29, 0x00	; 0
  }
#endif

try_again:
  
  if (use_u2x) {
    1e56:	cc 23       	and	r28, r28
    1e58:	f1 f0       	breq	.+60     	; 0x1e96 <_ZN14HardwareSerial5beginEm+0xb4>
    *_ucsra = 1 << _u2x;
    1e5a:	d8 01       	movw	r26, r16
    1e5c:	54 96       	adiw	r26, 0x14	; 20
    1e5e:	ed 91       	ld	r30, X+
    1e60:	fc 91       	ld	r31, X
    1e62:	55 97       	sbiw	r26, 0x15	; 21
    1e64:	c1 01       	movw	r24, r2
    1e66:	5e 96       	adiw	r26, 0x1e	; 30
    1e68:	0c 90       	ld	r0, X
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <_ZN14HardwareSerial5beginEm+0x8e>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <_ZN14HardwareSerial5beginEm+0x8a>
    1e74:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1e76:	c5 01       	movw	r24, r10
    1e78:	b4 01       	movw	r22, r8
    1e7a:	a7 01       	movw	r20, r14
    1e7c:	96 01       	movw	r18, r12
    1e7e:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    1e82:	da 01       	movw	r26, r20
    1e84:	c9 01       	movw	r24, r18
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	a1 09       	sbc	r26, r1
    1e8a:	b1 09       	sbc	r27, r1
    1e8c:	b6 95       	lsr	r27
    1e8e:	a7 95       	ror	r26
    1e90:	97 95       	ror	r25
    1e92:	87 95       	ror	r24
    1e94:	15 c0       	rjmp	.+42     	; 0x1ec0 <_ZN14HardwareSerial5beginEm+0xde>
  } else {
    *_ucsra = 0;
    1e96:	d8 01       	movw	r26, r16
    1e98:	54 96       	adiw	r26, 0x14	; 20
    1e9a:	ed 91       	ld	r30, X+
    1e9c:	fc 91       	ld	r31, X
    1e9e:	55 97       	sbiw	r26, 0x15	; 21
    1ea0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1ea2:	c3 01       	movw	r24, r6
    1ea4:	b2 01       	movw	r22, r4
    1ea6:	a7 01       	movw	r20, r14
    1ea8:	96 01       	movw	r18, r12
    1eaa:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    1eae:	da 01       	movw	r26, r20
    1eb0:	c9 01       	movw	r24, r18
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	a1 09       	sbc	r26, r1
    1eb6:	b1 09       	sbc	r27, r1
    1eb8:	b6 95       	lsr	r27
    1eba:	a7 95       	ror	r26
    1ebc:	97 95       	ror	r25
    1ebe:	87 95       	ror	r24
  }
  
  if ((baud_setting > 4095) && use_u2x)
    1ec0:	b0 e1       	ldi	r27, 0x10	; 16
    1ec2:	80 30       	cpi	r24, 0x00	; 0
    1ec4:	9b 07       	cpc	r25, r27
    1ec6:	18 f0       	brcs	.+6      	; 0x1ece <_ZN14HardwareSerial5beginEm+0xec>
    1ec8:	cc 23       	and	r28, r28
    1eca:	09 f0       	breq	.+2      	; 0x1ece <_ZN14HardwareSerial5beginEm+0xec>
    1ecc:	aa cf       	rjmp	.-172    	; 0x1e22 <_ZN14HardwareSerial5beginEm+0x40>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1ece:	d8 01       	movw	r26, r16
    1ed0:	50 96       	adiw	r26, 0x10	; 16
    1ed2:	ed 91       	ld	r30, X+
    1ed4:	fc 91       	ld	r31, X
    1ed6:	51 97       	sbiw	r26, 0x11	; 17
    1ed8:	90 83       	st	Z, r25
  *_ubrrl = baud_setting;
    1eda:	52 96       	adiw	r26, 0x12	; 18
    1edc:	ed 91       	ld	r30, X+
    1ede:	fc 91       	ld	r31, X
    1ee0:	53 97       	sbiw	r26, 0x13	; 19
    1ee2:	80 83       	st	Z, r24

  sbi(*_ucsrb, _rxen);
    1ee4:	56 96       	adiw	r26, 0x16	; 22
    1ee6:	ed 91       	ld	r30, X+
    1ee8:	fc 91       	ld	r31, X
    1eea:	57 97       	sbiw	r26, 0x17	; 23
    1eec:	40 81       	ld	r20, Z
    1eee:	21 e0       	ldi	r18, 0x01	; 1
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	c9 01       	movw	r24, r18
    1ef4:	5a 96       	adiw	r26, 0x1a	; 26
    1ef6:	0c 90       	ld	r0, X
    1ef8:	5a 97       	sbiw	r26, 0x1a	; 26
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <_ZN14HardwareSerial5beginEm+0x11e>
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	0a 94       	dec	r0
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <_ZN14HardwareSerial5beginEm+0x11a>
    1f04:	84 2b       	or	r24, r20
    1f06:	80 83       	st	Z, r24
  sbi(*_ucsrb, _txen);
    1f08:	56 96       	adiw	r26, 0x16	; 22
    1f0a:	ed 91       	ld	r30, X+
    1f0c:	fc 91       	ld	r31, X
    1f0e:	57 97       	sbiw	r26, 0x17	; 23
    1f10:	40 81       	ld	r20, Z
    1f12:	c9 01       	movw	r24, r18
    1f14:	5b 96       	adiw	r26, 0x1b	; 27
    1f16:	0c 90       	ld	r0, X
    1f18:	5b 97       	sbiw	r26, 0x1b	; 27
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <_ZN14HardwareSerial5beginEm+0x13e>
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	0a 94       	dec	r0
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <_ZN14HardwareSerial5beginEm+0x13a>
    1f24:	84 2b       	or	r24, r20
    1f26:	80 83       	st	Z, r24
  sbi(*_ucsrb, _rxcie);
    1f28:	56 96       	adiw	r26, 0x16	; 22
    1f2a:	ed 91       	ld	r30, X+
    1f2c:	fc 91       	ld	r31, X
    1f2e:	57 97       	sbiw	r26, 0x17	; 23
    1f30:	40 81       	ld	r20, Z
    1f32:	c9 01       	movw	r24, r18
    1f34:	5c 96       	adiw	r26, 0x1c	; 28
    1f36:	0c 90       	ld	r0, X
    1f38:	5c 97       	sbiw	r26, 0x1c	; 28
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <_ZN14HardwareSerial5beginEm+0x15e>
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	0a 94       	dec	r0
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <_ZN14HardwareSerial5beginEm+0x15a>
    1f44:	84 2b       	or	r24, r20
    1f46:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    1f48:	56 96       	adiw	r26, 0x16	; 22
    1f4a:	ed 91       	ld	r30, X+
    1f4c:	fc 91       	ld	r31, X
    1f4e:	57 97       	sbiw	r26, 0x17	; 23
    1f50:	80 81       	ld	r24, Z
    1f52:	5d 96       	adiw	r26, 0x1d	; 29
    1f54:	0c 90       	ld	r0, X
    1f56:	5d 97       	sbiw	r26, 0x1d	; 29
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <_ZN14HardwareSerial5beginEm+0x17c>
    1f5a:	22 0f       	add	r18, r18
    1f5c:	33 1f       	adc	r19, r19
    1f5e:	0a 94       	dec	r0
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <_ZN14HardwareSerial5beginEm+0x178>
    1f62:	20 95       	com	r18
    1f64:	28 23       	and	r18, r24
    1f66:	20 83       	st	Z, r18
}
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	ff 90       	pop	r15
    1f72:	ef 90       	pop	r14
    1f74:	df 90       	pop	r13
    1f76:	cf 90       	pop	r12
    1f78:	bf 90       	pop	r11
    1f7a:	af 90       	pop	r10
    1f7c:	9f 90       	pop	r9
    1f7e:	8f 90       	pop	r8
    1f80:	7f 90       	pop	r7
    1f82:	6f 90       	pop	r6
    1f84:	5f 90       	pop	r5
    1f86:	4f 90       	pop	r4
    1f88:	3f 90       	pop	r3
    1f8a:	2f 90       	pop	r2
    1f8c:	08 95       	ret

00001f8e <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	ec 01       	movw	r28, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    1f94:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f96:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f98:	df 01       	movw	r26, r30
    1f9a:	a0 5c       	subi	r26, 0xC0	; 192
    1f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9e:	ee 5b       	subi	r30, 0xBE	; 190
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	8d 91       	ld	r24, X+
    1fa4:	9c 91       	ld	r25, X
    1fa6:	11 97       	sbiw	r26, 0x01	; 1
    1fa8:	20 81       	ld	r18, Z
    1faa:	31 81       	ldd	r19, Z+1	; 0x01
    1fac:	82 17       	cp	r24, r18
    1fae:	93 07       	cpc	r25, r19
    1fb0:	c1 f7       	brne	.-16     	; 0x1fa2 <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
    1fb2:	ee 89       	ldd	r30, Y+22	; 0x16
    1fb4:	ff 89       	ldd	r31, Y+23	; 0x17
    1fb6:	40 81       	ld	r20, Z
    1fb8:	21 e0       	ldi	r18, 0x01	; 1
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	c9 01       	movw	r24, r18
    1fbe:	0a 8c       	ldd	r0, Y+26	; 0x1a
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <_ZN14HardwareSerial3endEv+0x38>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	0a 94       	dec	r0
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <_ZN14HardwareSerial3endEv+0x34>
    1fca:	80 95       	com	r24
    1fcc:	84 23       	and	r24, r20
    1fce:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    1fd0:	ee 89       	ldd	r30, Y+22	; 0x16
    1fd2:	ff 89       	ldd	r31, Y+23	; 0x17
    1fd4:	40 81       	ld	r20, Z
    1fd6:	c9 01       	movw	r24, r18
    1fd8:	0b 8c       	ldd	r0, Y+27	; 0x1b
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <_ZN14HardwareSerial3endEv+0x52>
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	0a 94       	dec	r0
    1fe2:	e2 f7       	brpl	.-8      	; 0x1fdc <_ZN14HardwareSerial3endEv+0x4e>
    1fe4:	80 95       	com	r24
    1fe6:	84 23       	and	r24, r20
    1fe8:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    1fea:	ee 89       	ldd	r30, Y+22	; 0x16
    1fec:	ff 89       	ldd	r31, Y+23	; 0x17
    1fee:	40 81       	ld	r20, Z
    1ff0:	c9 01       	movw	r24, r18
    1ff2:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <_ZN14HardwareSerial3endEv+0x6c>
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	0a 94       	dec	r0
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <_ZN14HardwareSerial3endEv+0x68>
    1ffe:	80 95       	com	r24
    2000:	84 23       	and	r24, r20
    2002:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    2004:	ee 89       	ldd	r30, Y+22	; 0x16
    2006:	ff 89       	ldd	r31, Y+23	; 0x17
    2008:	80 81       	ld	r24, Z
    200a:	0d 8c       	ldd	r0, Y+29	; 0x1d
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <_ZN14HardwareSerial3endEv+0x84>
    200e:	22 0f       	add	r18, r18
    2010:	33 1f       	adc	r19, r19
    2012:	0a 94       	dec	r0
    2014:	e2 f7       	brpl	.-8      	; 0x200e <_ZN14HardwareSerial3endEv+0x80>
    2016:	20 95       	com	r18
    2018:	28 23       	and	r18, r24
    201a:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    201c:	8c 85       	ldd	r24, Y+12	; 0x0c
    201e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2020:	fc 01       	movw	r30, r24
    2022:	ee 5b       	subi	r30, 0xBE	; 190
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	20 81       	ld	r18, Z
    2028:	31 81       	ldd	r19, Z+1	; 0x01
    202a:	80 5c       	subi	r24, 0xC0	; 192
    202c:	9f 4f       	sbci	r25, 0xFF	; 255
    202e:	fc 01       	movw	r30, r24
    2030:	31 83       	std	Z+1, r19	; 0x01
    2032:	20 83       	st	Z, r18
}
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	08 95       	ret

0000203a <_ZN14HardwareSerialcvbEv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	08 95       	ret

0000203e <_GLOBAL__sub_I_rx_buffer>:
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    203e:	8f 92       	push	r8
    2040:	af 92       	push	r10
    2042:	bf 92       	push	r11
    2044:	cf 92       	push	r12
    2046:	df 92       	push	r13
    2048:	ef 92       	push	r14
    204a:	ff 92       	push	r15
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	00 d0       	rcall	.+0      	; 0x2052 <_GLOBAL__sub_I_rx_buffer+0x14>
    2052:	00 d0       	rcall	.+0      	; 0x2054 <_GLOBAL__sub_I_rx_buffer+0x16>
    2054:	ed b7       	in	r30, 0x3d	; 61
    2056:	fe b7       	in	r31, 0x3e	; 62
    2058:	31 96       	adiw	r30, 0x01	; 1
    205a:	83 e0       	ldi	r24, 0x03	; 3
    205c:	ad b7       	in	r26, 0x3d	; 61
    205e:	be b7       	in	r27, 0x3e	; 62
    2060:	11 96       	adiw	r26, 0x01	; 1
    2062:	8c 93       	st	X, r24
    2064:	87 e0       	ldi	r24, 0x07	; 7
    2066:	81 83       	std	Z+1, r24	; 0x01
    2068:	85 e0       	ldi	r24, 0x05	; 5
    206a:	82 83       	std	Z+2, r24	; 0x02
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	83 83       	std	Z+3, r24	; 0x03
    2070:	88 e2       	ldi	r24, 0x28	; 40
    2072:	94 e0       	ldi	r25, 0x04	; 4
    2074:	6b e8       	ldi	r22, 0x8B	; 139
    2076:	74 e0       	ldi	r23, 0x04	; 4
    2078:	47 e4       	ldi	r20, 0x47	; 71
    207a:	54 e0       	ldi	r21, 0x04	; 4
    207c:	25 ec       	ldi	r18, 0xC5	; 197
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	04 ec       	ldi	r16, 0xC4	; 196
    2082:	10 e0       	ldi	r17, 0x00	; 0
    2084:	0f 2e       	mov	r0, r31
    2086:	f0 ec       	ldi	r31, 0xC0	; 192
    2088:	ef 2e       	mov	r14, r31
    208a:	ff 24       	eor	r15, r15
    208c:	f0 2d       	mov	r31, r0
    208e:	0f 2e       	mov	r0, r31
    2090:	f1 ec       	ldi	r31, 0xC1	; 193
    2092:	cf 2e       	mov	r12, r31
    2094:	dd 24       	eor	r13, r13
    2096:	f0 2d       	mov	r31, r0
    2098:	0f 2e       	mov	r0, r31
    209a:	f6 ec       	ldi	r31, 0xC6	; 198
    209c:	af 2e       	mov	r10, r31
    209e:	bb 24       	eor	r11, r11
    20a0:	f0 2d       	mov	r31, r0
    20a2:	88 24       	eor	r8, r8
    20a4:	68 94       	set
    20a6:	82 f8       	bld	r8, 2
    20a8:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	ff 90       	pop	r15
    20ba:	ef 90       	pop	r14
    20bc:	df 90       	pop	r13
    20be:	cf 90       	pop	r12
    20c0:	bf 90       	pop	r11
    20c2:	af 90       	pop	r10
    20c4:	8f 90       	pop	r8
    20c6:	08 95       	ret

000020c8 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    20c8:	8f 92       	push	r8
    20ca:	9f 92       	push	r9
    20cc:	af 92       	push	r10
    20ce:	bf 92       	push	r11
    20d0:	cf 92       	push	r12
    20d2:	df 92       	push	r13
    20d4:	ef 92       	push	r14
    20d6:	ff 92       	push	r15
    20d8:	0f 93       	push	r16
    20da:	1f 93       	push	r17
    20dc:	cf 93       	push	r28
    20de:	df 93       	push	r29
    20e0:	4c 01       	movw	r8, r24
    20e2:	7b 01       	movw	r14, r22
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    20e4:	aa 24       	eor	r10, r10
    20e6:	bb 24       	eor	r11, r11
    20e8:	68 94       	set
    20ea:	a1 f8       	bld	r10, 1
    20ec:	a8 0e       	add	r10, r24
    20ee:	b9 1e       	adc	r11, r25
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    20f0:	00 e0       	ldi	r16, 0x00	; 0
    20f2:	10 e0       	ldi	r17, 0x00	; 0
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    20f4:	cc 24       	eor	r12, r12
    20f6:	dd 24       	eor	r13, r13
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    20f8:	f5 01       	movw	r30, r10
    20fa:	61 91       	ld	r22, Z+
    20fc:	5f 01       	movw	r10, r30
    20fe:	c7 01       	movw	r24, r14
    2100:	4a e0       	ldi	r20, 0x0A	; 10
    2102:	50 e0       	ldi	r21, 0x00	; 0
    2104:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN5Print5printEhi>
    2108:	ec 01       	movw	r28, r24
        n += p.print('.');
    210a:	c7 01       	movw	r24, r14
    210c:	6e e2       	ldi	r22, 0x2E	; 46
    210e:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    2112:	8c 0f       	add	r24, r28
    2114:	9d 1f       	adc	r25, r29
        n += p.print('.');
    2116:	c8 0e       	add	r12, r24
    2118:	d9 1e       	adc	r13, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    211a:	0f 5f       	subi	r16, 0xFF	; 255
    211c:	1f 4f       	sbci	r17, 0xFF	; 255
    211e:	03 30       	cpi	r16, 0x03	; 3
    2120:	11 05       	cpc	r17, r1
    2122:	51 f7       	brne	.-44     	; 0x20f8 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    2124:	c7 01       	movw	r24, r14
    2126:	f4 01       	movw	r30, r8
    2128:	65 81       	ldd	r22, Z+5	; 0x05
    212a:	4a e0       	ldi	r20, 0x0A	; 10
    212c:	50 e0       	ldi	r21, 0x00	; 0
    212e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN5Print5printEhi>
    2132:	8c 0d       	add	r24, r12
    2134:	9d 1d       	adc	r25, r13
    return n;
}
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	1f 91       	pop	r17
    213c:	0f 91       	pop	r16
    213e:	ff 90       	pop	r15
    2140:	ef 90       	pop	r14
    2142:	df 90       	pop	r13
    2144:	cf 90       	pop	r12
    2146:	bf 90       	pop	r11
    2148:	af 90       	pop	r10
    214a:	9f 90       	pop	r9
    214c:	8f 90       	pop	r8
    214e:	08 95       	ret

00002150 <_ZN9IPAddressC1Ev>:

#include "Arduino.h"
#include "IPAddress.h"

IPAddress::IPAddress()
    2150:	fc 01       	movw	r30, r24
    2152:	83 ea       	ldi	r24, 0xA3	; 163
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
    215a:	12 82       	std	Z+2, r1	; 0x02
    215c:	13 82       	std	Z+3, r1	; 0x03
    215e:	14 82       	std	Z+4, r1	; 0x04
    2160:	15 82       	std	Z+5, r1	; 0x05
}
    2162:	08 95       	ret

00002164 <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    2164:	0f 93       	push	r16
    2166:	fc 01       	movw	r30, r24
    2168:	83 ea       	ldi	r24, 0xA3	; 163
    216a:	91 e0       	ldi	r25, 0x01	; 1
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    2170:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
    2172:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
    2174:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
    2176:	05 83       	std	Z+5, r16	; 0x05
}
    2178:	0f 91       	pop	r16
    217a:	08 95       	ret

0000217c <_ZN9IPAddressC1Em>:

IPAddress::IPAddress(uint32_t address)
    217c:	fc 01       	movw	r30, r24
    217e:	83 ea       	ldi	r24, 0xA3	; 163
    2180:	91 e0       	ldi	r25, 0x01	; 1
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    2186:	42 83       	std	Z+2, r20	; 0x02
    2188:	53 83       	std	Z+3, r21	; 0x03
    218a:	64 83       	std	Z+4, r22	; 0x04
    218c:	75 83       	std	Z+5, r23	; 0x05
}
    218e:	08 95       	ret

00002190 <_ZN9IPAddressC1EPKh>:

IPAddress::IPAddress(const uint8_t *address)
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	fc 01       	movw	r30, r24
    2196:	83 ea       	ldi	r24, 0xA3	; 163
    2198:	91 e0       	ldi	r25, 0x01	; 1
    219a:	91 83       	std	Z+1, r25	; 0x01
    219c:	80 83       	st	Z, r24
{
    memcpy(_address, address, sizeof(_address));
    219e:	eb 01       	movw	r28, r22
    21a0:	88 81       	ld	r24, Y
    21a2:	99 81       	ldd	r25, Y+1	; 0x01
    21a4:	aa 81       	ldd	r26, Y+2	; 0x02
    21a6:	bb 81       	ldd	r27, Y+3	; 0x03
    21a8:	82 83       	std	Z+2, r24	; 0x02
    21aa:	93 83       	std	Z+3, r25	; 0x03
    21ac:	a4 83       	std	Z+4, r26	; 0x04
    21ae:	b5 83       	std	Z+5, r27	; 0x05
}
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	08 95       	ret

000021b6 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address, address, sizeof(_address));
    21b6:	fb 01       	movw	r30, r22
    21b8:	40 81       	ld	r20, Z
    21ba:	51 81       	ldd	r21, Z+1	; 0x01
    21bc:	62 81       	ldd	r22, Z+2	; 0x02
    21be:	73 81       	ldd	r23, Z+3	; 0x03
    21c0:	fc 01       	movw	r30, r24
    21c2:	42 83       	std	Z+2, r20	; 0x02
    21c4:	53 83       	std	Z+3, r21	; 0x03
    21c6:	64 83       	std	Z+4, r22	; 0x04
    21c8:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
    21ca:	08 95       	ret

000021cc <_ZN9IPAddressaSEm>:

IPAddress& IPAddress::operator=(uint32_t address)
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
    21cc:	fc 01       	movw	r30, r24
    21ce:	42 83       	std	Z+2, r20	; 0x02
    21d0:	53 83       	std	Z+3, r21	; 0x03
    21d2:	64 83       	std	Z+4, r22	; 0x04
    21d4:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
    21d6:	08 95       	ret

000021d8 <_ZN9IPAddresseqEPKh>:

bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
    21d8:	9c 01       	movw	r18, r24
    21da:	2e 5f       	subi	r18, 0xFE	; 254
    21dc:	3f 4f       	sbci	r19, 0xFF	; 255
    21de:	cb 01       	movw	r24, r22
    21e0:	b9 01       	movw	r22, r18
    21e2:	44 e0       	ldi	r20, 0x04	; 4
    21e4:	50 e0       	ldi	r21, 0x00	; 0
    21e6:	0e 94 dd 36 	call	0x6dba	; 0x6dba <memcmp>
    21ea:	28 2f       	mov	r18, r24
    21ec:	39 2f       	mov	r19, r25
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	21 15       	cp	r18, r1
    21f2:	31 05       	cpc	r19, r1
    21f4:	09 f0       	breq	.+2      	; 0x21f8 <_ZN9IPAddresseqEPKh+0x20>
    21f6:	80 e0       	ldi	r24, 0x00	; 0
}
    21f8:	08 95       	ret

000021fa <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    21fa:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    21fc:	8f ec       	ldi	r24, 0xCF	; 207
    21fe:	94 e0       	ldi	r25, 0x04	; 4
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	40 e0       	ldi	r20, 0x00	; 0
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	00 e0       	ldi	r16, 0x00	; 0
    2208:	0e 94 b2 10 	call	0x2164	; 0x2164 <_ZN9IPAddressC1Ehhhh>
    220c:	0f 91       	pop	r16
    220e:	08 95       	ret

00002210 <_Znwj>:
#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    2210:	0e 94 46 34 	call	0x688c	; 0x688c <malloc>
}
    2214:	08 95       	ret

00002216 <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    2216:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <free>
} 
    221a:	08 95       	ret

0000221c <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    221c:	21 e0       	ldi	r18, 0x01	; 1
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	fc 01       	movw	r30, r24
    2222:	80 81       	ld	r24, Z
    2224:	88 23       	and	r24, r24
    2226:	11 f0       	breq	.+4      	; 0x222c <__cxa_guard_acquire+0x10>
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	82 2f       	mov	r24, r18
    222e:	93 2f       	mov	r25, r19
    2230:	08 95       	ret

00002232 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    2232:	21 e0       	ldi	r18, 0x01	; 1
    2234:	fc 01       	movw	r30, r24
    2236:	20 83       	st	Z, r18
    2238:	08 95       	ret

0000223a <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    223a:	08 95       	ret

0000223c <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    223c:	08 95       	ret

0000223e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    223e:	cf 92       	push	r12
    2240:	df 92       	push	r13
    2242:	ef 92       	push	r14
    2244:	ff 92       	push	r15
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	6c 01       	movw	r12, r24
    2250:	7b 01       	movw	r14, r22
    2252:	ea 01       	movw	r28, r20
  size_t n = 0;
  while (size--) {
    2254:	20 97       	sbiw	r28, 0x00	; 0
    2256:	91 f0       	breq	.+36     	; 0x227c <_ZN5Print5writeEPKhj+0x3e>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    2258:	00 e0       	ldi	r16, 0x00	; 0
    225a:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    n += write(*buffer++);
    225c:	d7 01       	movw	r26, r14
    225e:	6d 91       	ld	r22, X+
    2260:	7d 01       	movw	r14, r26
    2262:	d6 01       	movw	r26, r12
    2264:	ed 91       	ld	r30, X+
    2266:	fc 91       	ld	r31, X
    2268:	01 90       	ld	r0, Z+
    226a:	f0 81       	ld	r31, Z
    226c:	e0 2d       	mov	r30, r0
    226e:	c6 01       	movw	r24, r12
    2270:	09 95       	icall
    2272:	08 0f       	add	r16, r24
    2274:	19 1f       	adc	r17, r25
    2276:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    2278:	89 f7       	brne	.-30     	; 0x225c <_ZN5Print5writeEPKhj+0x1e>
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <_ZN5Print5writeEPKhj+0x42>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    227c:	00 e0       	ldi	r16, 0x00	; 0
    227e:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    2280:	80 2f       	mov	r24, r16
    2282:	91 2f       	mov	r25, r17
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	ff 90       	pop	r15
    228e:	ef 90       	pop	r14
    2290:	df 90       	pop	r13
    2292:	cf 90       	pop	r12
    2294:	08 95       	ret

00002296 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    2296:	ef 92       	push	r14
    2298:	ff 92       	push	r15
    229a:	0f 93       	push	r16
    229c:	1f 93       	push	r17
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	7c 01       	movw	r14, r24
    22a4:	eb 01       	movw	r28, r22
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    22a6:	fb 01       	movw	r30, r22
    22a8:	64 91       	lpm	r22, Z
    if (c == 0) break;
    22aa:	66 23       	and	r22, r22
    22ac:	91 f0       	breq	.+36     	; 0x22d2 <_ZN5Print5printEPK19__FlashStringHelper+0x3c>
size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    22ae:	21 96       	adiw	r28, 0x01	; 1
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
    22b0:	00 e0       	ldi	r16, 0x00	; 0
    22b2:	10 e0       	ldi	r17, 0x00	; 0
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
    22b4:	f7 01       	movw	r30, r14
    22b6:	a0 81       	ld	r26, Z
    22b8:	b1 81       	ldd	r27, Z+1	; 0x01
    22ba:	ed 91       	ld	r30, X+
    22bc:	fc 91       	ld	r31, X
    22be:	c7 01       	movw	r24, r14
    22c0:	09 95       	icall
    22c2:	08 0f       	add	r16, r24
    22c4:	19 1f       	adc	r17, r25
size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    22c6:	fe 01       	movw	r30, r28
    22c8:	21 96       	adiw	r28, 0x01	; 1
    22ca:	64 91       	lpm	r22, Z
    if (c == 0) break;
    22cc:	66 23       	and	r22, r22
    22ce:	91 f7       	brne	.-28     	; 0x22b4 <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <_ZN5Print5printEPK19__FlashStringHelper+0x40>
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
    22d2:	00 e0       	ldi	r16, 0x00	; 0
    22d4:	10 e0       	ldi	r17, 0x00	; 0
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    22d6:	80 2f       	mov	r24, r16
    22d8:	91 2f       	mov	r25, r17
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	08 95       	ret

000022e8 <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    22e8:	af 92       	push	r10
    22ea:	bf 92       	push	r11
    22ec:	cf 92       	push	r12
    22ee:	df 92       	push	r13
    22f0:	ef 92       	push	r14
    22f2:	ff 92       	push	r15
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	5c 01       	movw	r10, r24
    22fe:	6b 01       	movw	r12, r22
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    2300:	db 01       	movw	r26, r22
    2302:	14 96       	adiw	r26, 0x04	; 4
    2304:	8d 91       	ld	r24, X+
    2306:	9c 91       	ld	r25, X
    2308:	15 97       	sbiw	r26, 0x05	; 5
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	e1 f0       	breq	.+56     	; 0x2346 <_ZN5Print5printERK6String+0x5e>
    230e:	00 e0       	ldi	r16, 0x00	; 0
    2310:	10 e0       	ldi	r17, 0x00	; 0
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    2312:	ee 24       	eor	r14, r14
    2314:	ff 24       	eor	r15, r15
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    2316:	d5 01       	movw	r26, r10
    2318:	ed 91       	ld	r30, X+
    231a:	fc 91       	ld	r31, X
    231c:	c0 81       	ld	r28, Z
    231e:	d1 81       	ldd	r29, Z+1	; 0x01
    2320:	c6 01       	movw	r24, r12
    2322:	b8 01       	movw	r22, r16
    2324:	0e 94 8d 1b 	call	0x371a	; 0x371a <_ZNK6StringixEj>
    2328:	68 2f       	mov	r22, r24
    232a:	c5 01       	movw	r24, r10
    232c:	fe 01       	movw	r30, r28
    232e:	09 95       	icall
    2330:	e8 0e       	add	r14, r24
    2332:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    2334:	0f 5f       	subi	r16, 0xFF	; 255
    2336:	1f 4f       	sbci	r17, 0xFF	; 255
    2338:	f6 01       	movw	r30, r12
    233a:	84 81       	ldd	r24, Z+4	; 0x04
    233c:	95 81       	ldd	r25, Z+5	; 0x05
    233e:	08 17       	cp	r16, r24
    2340:	19 07       	cpc	r17, r25
    2342:	48 f3       	brcs	.-46     	; 0x2316 <_ZN5Print5printERK6String+0x2e>
    2344:	02 c0       	rjmp	.+4      	; 0x234a <_ZN5Print5printERK6String+0x62>
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    2346:	ee 24       	eor	r14, r14
    2348:	ff 24       	eor	r15, r15
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
  }
  return n;
}
    234a:	8e 2d       	mov	r24, r14
    234c:	9f 2d       	mov	r25, r15
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	ff 90       	pop	r15
    2358:	ef 90       	pop	r14
    235a:	df 90       	pop	r13
    235c:	cf 90       	pop	r12
    235e:	bf 90       	pop	r11
    2360:	af 90       	pop	r10
    2362:	08 95       	ret

00002364 <_ZN5Print5printEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    2364:	e6 2f       	mov	r30, r22
    2366:	f7 2f       	mov	r31, r23
    2368:	df 01       	movw	r26, r30
    236a:	0d 90       	ld	r0, X+
    236c:	00 20       	and	r0, r0
    236e:	e9 f7       	brne	.-6      	; 0x236a <_ZN5Print5printEPKc+0x6>
    2370:	ad 01       	movw	r20, r26
    2372:	41 50       	subi	r20, 0x01	; 1
    2374:	50 40       	sbci	r21, 0x00	; 0
    2376:	4e 1b       	sub	r20, r30
    2378:	5f 0b       	sbc	r21, r31
    237a:	dc 01       	movw	r26, r24
    237c:	ed 91       	ld	r30, X+
    237e:	fc 91       	ld	r31, X
    2380:	02 80       	ldd	r0, Z+2	; 0x02
    2382:	f3 81       	ldd	r31, Z+3	; 0x03
    2384:	e0 2d       	mov	r30, r0
    2386:	09 95       	icall

size_t Print::print(const char str[])
{
  return write(str);
}
    2388:	08 95       	ret

0000238a <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    238a:	dc 01       	movw	r26, r24
    238c:	ed 91       	ld	r30, X+
    238e:	fc 91       	ld	r31, X
    2390:	01 90       	ld	r0, Z+
    2392:	f0 81       	ld	r31, Z
    2394:	e0 2d       	mov	r30, r0
    2396:	09 95       	icall
}
    2398:	08 95       	ret

0000239a <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    239a:	9c 01       	movw	r18, r24
    239c:	cb 01       	movw	r24, r22
  return x.printTo(*this);
    239e:	db 01       	movw	r26, r22
    23a0:	ed 91       	ld	r30, X+
    23a2:	fc 91       	ld	r31, X
    23a4:	01 90       	ld	r0, Z+
    23a6:	f0 81       	ld	r31, Z
    23a8:	e0 2d       	mov	r30, r0
    23aa:	b9 01       	movw	r22, r18
    23ac:	09 95       	icall
}
    23ae:	08 95       	ret

000023b0 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    23b0:	0f 93       	push	r16
    23b2:	1f 93       	push	r17
    23b4:	cf 93       	push	r28
    23b6:	df 93       	push	r29
    23b8:	8c 01       	movw	r16, r24
  size_t n = print('\r');
    23ba:	6d e0       	ldi	r22, 0x0D	; 13
    23bc:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN5Print5printEc>
    23c0:	ec 01       	movw	r28, r24
  n += print('\n');
    23c2:	c8 01       	movw	r24, r16
    23c4:	6a e0       	ldi	r22, 0x0A	; 10
    23c6:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN5Print5printEc>
    23ca:	8c 0f       	add	r24, r28
    23cc:	9d 1f       	adc	r25, r29
  return n;
}
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	1f 91       	pop	r17
    23d4:	0f 91       	pop	r16
    23d6:	08 95       	ret

000023d8 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	8c 01       	movw	r16, r24
  size_t n = print(ifsh);
    23e2:	0e 94 4b 11 	call	0x2296	; 0x2296 <_ZN5Print5printEPK19__FlashStringHelper>
    23e6:	ec 01       	movw	r28, r24
  n += println();
    23e8:	c8 01       	movw	r24, r16
    23ea:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5Print7printlnEv>
    23ee:	8c 0f       	add	r24, r28
    23f0:	9d 1f       	adc	r25, r29
  return n;
}
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	08 95       	ret

000023fc <_ZN5Print7printlnERK6String>:
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    23fc:	0f 93       	push	r16
    23fe:	1f 93       	push	r17
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	8c 01       	movw	r16, r24
  size_t n = print(s);
    2406:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_ZN5Print5printERK6String>
    240a:	ec 01       	movw	r28, r24
  n += println();
    240c:	c8 01       	movw	r24, r16
    240e:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5Print7printlnEv>
    2412:	8c 0f       	add	r24, r28
    2414:	9d 1f       	adc	r25, r29
  return n;
}
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	1f 91       	pop	r17
    241c:	0f 91       	pop	r16
    241e:	08 95       	ret

00002420 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	8c 01       	movw	r16, r24
  size_t n = print(c);
    242a:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN5Print5printEPKc>
    242e:	ec 01       	movw	r28, r24
  n += println();
    2430:	c8 01       	movw	r24, r16
    2432:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5Print7printlnEv>
    2436:	8c 0f       	add	r24, r28
    2438:	9d 1f       	adc	r25, r29
  return n;
}
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	1f 91       	pop	r17
    2440:	0f 91       	pop	r16
    2442:	08 95       	ret

00002444 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    2444:	0f 93       	push	r16
    2446:	1f 93       	push	r17
    2448:	cf 93       	push	r28
    244a:	df 93       	push	r29
    244c:	8c 01       	movw	r16, r24
  size_t n = print(c);
    244e:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN5Print5printEc>
    2452:	ec 01       	movw	r28, r24
  n += println();
    2454:	c8 01       	movw	r24, r16
    2456:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5Print7printlnEv>
    245a:	8c 0f       	add	r24, r28
    245c:	9d 1f       	adc	r25, r29
  return n;
}
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	1f 91       	pop	r17
    2464:	0f 91       	pop	r16
    2466:	08 95       	ret

00002468 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    2468:	0f 93       	push	r16
    246a:	1f 93       	push	r17
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	8c 01       	movw	r16, r24
  size_t n = print(x);
    2472:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN5Print5printERK9Printable>
    2476:	ec 01       	movw	r28, r24
  n += println();
    2478:	c8 01       	movw	r24, r16
    247a:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5Print7printlnEv>
    247e:	8c 0f       	add	r24, r28
    2480:	9d 1f       	adc	r25, r29
  return n;
}
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	0f 91       	pop	r16
    248a:	08 95       	ret

0000248c <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    248c:	4f 92       	push	r4
    248e:	5f 92       	push	r5
    2490:	6f 92       	push	r6
    2492:	7f 92       	push	r7
    2494:	8f 92       	push	r8
    2496:	9f 92       	push	r9
    2498:	af 92       	push	r10
    249a:	bf 92       	push	r11
    249c:	cf 92       	push	r12
    249e:	df 92       	push	r13
    24a0:	ef 92       	push	r14
    24a2:	ff 92       	push	r15
    24a4:	0f 93       	push	r16
    24a6:	1f 93       	push	r17
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	a1 97       	sbiw	r28, 0x21	; 33
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
    24bc:	4c 01       	movw	r8, r24
    24be:	14 2f       	mov	r17, r20
    24c0:	35 2f       	mov	r19, r21
    24c2:	86 2f       	mov	r24, r22
    24c4:	97 2f       	mov	r25, r23
    24c6:	02 2f       	mov	r16, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    24c8:	19 a2       	lds	r17, 0x99

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    24ca:	22 30       	cpi	r18, 0x02	; 2
    24cc:	08 f4       	brcc	.+2      	; 0x24d0 <_ZN5Print11printNumberEmh+0x44>
    24ce:	0a e0       	ldi	r16, 0x0A	; 10
    24d0:	0f 2e       	mov	r0, r31
    24d2:	f1 e2       	ldi	r31, 0x21	; 33
    24d4:	af 2e       	mov	r10, r31
    24d6:	bb 24       	eor	r11, r11
    24d8:	f0 2d       	mov	r31, r0
    24da:	ac 0e       	add	r10, r28
    24dc:	bd 1e       	adc	r11, r29

  do {
    unsigned long m = n;
    n /= base;
    24de:	40 2e       	mov	r4, r16
    24e0:	55 24       	eor	r5, r5
    24e2:	66 24       	eor	r6, r6
    24e4:	77 24       	eor	r7, r7
    24e6:	03 c0       	rjmp	.+6      	; 0x24ee <_ZN5Print11printNumberEmh+0x62>
    24e8:	12 2f       	mov	r17, r18
    24ea:	84 2f       	mov	r24, r20
    24ec:	95 2f       	mov	r25, r21
    24ee:	61 2f       	mov	r22, r17
    24f0:	73 2f       	mov	r23, r19
    24f2:	a3 01       	movw	r20, r6
    24f4:	92 01       	movw	r18, r4
    24f6:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    24fa:	c2 2e       	mov	r12, r18
    24fc:	d3 2e       	mov	r13, r19
    24fe:	e4 2e       	mov	r14, r20
    2500:	f5 2e       	mov	r15, r21
    char c = m - base * n;
    2502:	02 9f       	mul	r16, r18
    2504:	80 2d       	mov	r24, r0
    2506:	11 24       	eor	r1, r1
    2508:	18 1b       	sub	r17, r24
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    250a:	08 94       	sec
    250c:	a1 08       	sbc	r10, r1
    250e:	b1 08       	sbc	r11, r1
    2510:	1a 30       	cpi	r17, 0x0A	; 10
    2512:	10 f4       	brcc	.+4      	; 0x2518 <_ZN5Print11printNumberEmh+0x8c>
    2514:	10 5d       	subi	r17, 0xD0	; 208
    2516:	01 c0       	rjmp	.+2      	; 0x251a <_ZN5Print11printNumberEmh+0x8e>
    2518:	19 5c       	subi	r17, 0xC9	; 201
    251a:	d5 01       	movw	r26, r10
    251c:	1c 93       	st	X, r17
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    251e:	c1 14       	cp	r12, r1
    2520:	d1 04       	cpc	r13, r1
    2522:	e1 04       	cpc	r14, r1
    2524:	f1 04       	cpc	r15, r1
    2526:	01 f7       	brne	.-64     	; 0x24e8 <_ZN5Print11printNumberEmh+0x5c>
    2528:	ea 2d       	mov	r30, r10
    252a:	fb 2d       	mov	r31, r11
    252c:	df 01       	movw	r26, r30
    252e:	0d 90       	ld	r0, X+
    2530:	00 20       	and	r0, r0
    2532:	e9 f7       	brne	.-6      	; 0x252e <_ZN5Print11printNumberEmh+0xa2>
    2534:	11 97       	sbiw	r26, 0x01	; 1
    2536:	ad 01       	movw	r20, r26
    2538:	4e 1b       	sub	r20, r30
    253a:	5f 0b       	sbc	r21, r31
    253c:	d4 01       	movw	r26, r8
    253e:	ed 91       	ld	r30, X+
    2540:	fc 91       	ld	r31, X
    2542:	02 80       	ldd	r0, Z+2	; 0x02
    2544:	f3 81       	ldd	r31, Z+3	; 0x03
    2546:	e0 2d       	mov	r30, r0
    2548:	c4 01       	movw	r24, r8
    254a:	b5 01       	movw	r22, r10
    254c:	09 95       	icall
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    254e:	a1 96       	adiw	r28, 0x21	; 33
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	ff 90       	pop	r15
    2564:	ef 90       	pop	r14
    2566:	df 90       	pop	r13
    2568:	cf 90       	pop	r12
    256a:	bf 90       	pop	r11
    256c:	af 90       	pop	r10
    256e:	9f 90       	pop	r9
    2570:	8f 90       	pop	r8
    2572:	7f 90       	pop	r7
    2574:	6f 90       	pop	r6
    2576:	5f 90       	pop	r5
    2578:	4f 90       	pop	r4
    257a:	08 95       	ret

0000257c <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    257c:	21 15       	cp	r18, r1
    257e:	31 05       	cpc	r19, r1
    2580:	49 f4       	brne	.+18     	; 0x2594 <_ZN5Print5printEmi+0x18>
    2582:	dc 01       	movw	r26, r24
    2584:	ed 91       	ld	r30, X+
    2586:	fc 91       	ld	r31, X
    2588:	01 90       	ld	r0, Z+
    258a:	f0 81       	ld	r31, Z
    258c:	e0 2d       	mov	r30, r0
    258e:	64 2f       	mov	r22, r20
    2590:	09 95       	icall
    2592:	08 95       	ret
  else return printNumber(n, base);
    2594:	0e 94 46 12 	call	0x248c	; 0x248c <_ZN5Print11printNumberEmh>
}
    2598:	08 95       	ret

0000259a <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    25a4:	0e 94 be 12 	call	0x257c	; 0x257c <_ZN5Print5printEmi>
    25a8:	ec 01       	movw	r28, r24
  n += println();
    25aa:	c8 01       	movw	r24, r16
    25ac:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5Print7printlnEv>
    25b0:	8c 0f       	add	r24, r28
    25b2:	9d 1f       	adc	r25, r29
  return n;
}
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	1f 91       	pop	r17
    25ba:	0f 91       	pop	r16
    25bc:	08 95       	ret

000025be <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    25be:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    25c0:	ab 01       	movw	r20, r22
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	70 e0       	ldi	r23, 0x00	; 0
    25c6:	0e 94 be 12 	call	0x257c	; 0x257c <_ZN5Print5printEmi>
}
    25ca:	08 95       	ret

000025cc <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    25cc:	0f 93       	push	r16
    25ce:	1f 93       	push	r17
    25d0:	cf 93       	push	r28
    25d2:	df 93       	push	r29
    25d4:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    25d6:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN5Print5printEji>
    25da:	ec 01       	movw	r28, r24
  n += println();
    25dc:	c8 01       	movw	r24, r16
    25de:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5Print7printlnEv>
    25e2:	8c 0f       	add	r24, r28
    25e4:	9d 1f       	adc	r25, r29
  return n;
}
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	08 95       	ret

000025f0 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    25f0:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    25f2:	46 2f       	mov	r20, r22
    25f4:	50 e0       	ldi	r21, 0x00	; 0
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	70 e0       	ldi	r23, 0x00	; 0
    25fa:	0e 94 be 12 	call	0x257c	; 0x257c <_ZN5Print5printEmi>
}
    25fe:	08 95       	ret

00002600 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	8c 01       	movw	r16, r24
  size_t n = print(b, base);
    260a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN5Print5printEhi>
    260e:	ec 01       	movw	r28, r24
  n += println();
    2610:	c8 01       	movw	r24, r16
    2612:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5Print7printlnEv>
    2616:	8c 0f       	add	r24, r28
    2618:	9d 1f       	adc	r25, r29
  return n;
}
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	1f 91       	pop	r17
    2620:	0f 91       	pop	r16
    2622:	08 95       	ret

00002624 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    2624:	cf 92       	push	r12
    2626:	df 92       	push	r13
    2628:	ef 92       	push	r14
    262a:	ff 92       	push	r15
    262c:	0f 93       	push	r16
    262e:	1f 93       	push	r17
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	ec 01       	movw	r28, r24
    2636:	6a 01       	movw	r12, r20
    2638:	7b 01       	movw	r14, r22
  if (base == 0) {
    263a:	21 15       	cp	r18, r1
    263c:	31 05       	cpc	r19, r1
    263e:	41 f4       	brne	.+16     	; 0x2650 <_ZN5Print5printEli+0x2c>
    return write(n);
    2640:	e8 81       	ld	r30, Y
    2642:	f9 81       	ldd	r31, Y+1	; 0x01
    2644:	01 90       	ld	r0, Z+
    2646:	f0 81       	ld	r31, Z
    2648:	e0 2d       	mov	r30, r0
    264a:	64 2f       	mov	r22, r20
    264c:	09 95       	icall
    264e:	1d c0       	rjmp	.+58     	; 0x268a <_ZN5Print5printEli+0x66>
  } else if (base == 10) {
    2650:	2a 30       	cpi	r18, 0x0A	; 10
    2652:	31 05       	cpc	r19, r1
    2654:	c1 f4       	brne	.+48     	; 0x2686 <_ZN5Print5printEli+0x62>
    if (n < 0) {
    2656:	77 23       	and	r23, r23
    2658:	94 f4       	brge	.+36     	; 0x267e <_ZN5Print5printEli+0x5a>
      int t = print('-');
    265a:	6d e2       	ldi	r22, 0x2D	; 45
    265c:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN5Print5printEc>
    2660:	8c 01       	movw	r16, r24
      n = -n;
    2662:	44 27       	eor	r20, r20
    2664:	55 27       	eor	r21, r21
    2666:	ba 01       	movw	r22, r20
    2668:	4c 19       	sub	r20, r12
    266a:	5d 09       	sbc	r21, r13
    266c:	6e 09       	sbc	r22, r14
    266e:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    2670:	ce 01       	movw	r24, r28
    2672:	2a e0       	ldi	r18, 0x0A	; 10
    2674:	0e 94 46 12 	call	0x248c	; 0x248c <_ZN5Print11printNumberEmh>
    2678:	80 0f       	add	r24, r16
    267a:	91 1f       	adc	r25, r17
    267c:	06 c0       	rjmp	.+12     	; 0x268a <_ZN5Print5printEli+0x66>
    }
    return printNumber(n, 10);
    267e:	2a e0       	ldi	r18, 0x0A	; 10
    2680:	0e 94 46 12 	call	0x248c	; 0x248c <_ZN5Print11printNumberEmh>
    2684:	02 c0       	rjmp	.+4      	; 0x268a <_ZN5Print5printEli+0x66>
  } else {
    return printNumber(n, base);
    2686:	0e 94 46 12 	call	0x248c	; 0x248c <_ZN5Print11printNumberEmh>
  }
}
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	1f 91       	pop	r17
    2690:	0f 91       	pop	r16
    2692:	ff 90       	pop	r15
    2694:	ef 90       	pop	r14
    2696:	df 90       	pop	r13
    2698:	cf 90       	pop	r12
    269a:	08 95       	ret

0000269c <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    26a6:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN5Print5printEli>
    26aa:	ec 01       	movw	r28, r24
  n += println();
    26ac:	c8 01       	movw	r24, r16
    26ae:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5Print7printlnEv>
    26b2:	8c 0f       	add	r24, r28
    26b4:	9d 1f       	adc	r25, r29
  return n;
}
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	08 95       	ret

000026c0 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    26c0:	9a 01       	movw	r18, r20
  return print((long) n, base);
    26c2:	fb 01       	movw	r30, r22
    26c4:	af 01       	movw	r20, r30
    26c6:	66 27       	eor	r22, r22
    26c8:	57 fd       	sbrc	r21, 7
    26ca:	60 95       	com	r22
    26cc:	76 2f       	mov	r23, r22
    26ce:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN5Print5printEli>
}
    26d2:	08 95       	ret

000026d4 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    26d4:	0f 93       	push	r16
    26d6:	1f 93       	push	r17
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    26de:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN5Print5printEii>
    26e2:	ec 01       	movw	r28, r24
  n += println();
    26e4:	c8 01       	movw	r24, r16
    26e6:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5Print7printlnEv>
    26ea:	8c 0f       	add	r24, r28
    26ec:	9d 1f       	adc	r25, r29
  return n;
}
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	08 95       	ret

000026f8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    26f8:	4f 92       	push	r4
    26fa:	5f 92       	push	r5
    26fc:	6f 92       	push	r6
    26fe:	7f 92       	push	r7
    2700:	8f 92       	push	r8
    2702:	9f 92       	push	r9
    2704:	af 92       	push	r10
    2706:	bf 92       	push	r11
    2708:	df 92       	push	r13
    270a:	ef 92       	push	r14
    270c:	ff 92       	push	r15
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	3c 01       	movw	r6, r24
    2718:	4a 01       	movw	r8, r20
    271a:	5b 01       	movw	r10, r22
    271c:	e2 2e       	mov	r14, r18
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    271e:	cb 01       	movw	r24, r22
    2720:	ba 01       	movw	r22, r20
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	a9 01       	movw	r20, r18
    2728:	0e 94 32 32 	call	0x6464	; 0x6464 <__cmpsf2>
    272c:	88 23       	and	r24, r24
    272e:	54 f4       	brge	.+20     	; 0x2744 <_ZN5Print10printFloatEdh+0x4c>
  {
     n += print('-');
    2730:	c3 01       	movw	r24, r6
    2732:	6d e2       	ldi	r22, 0x2D	; 45
    2734:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN5Print5printEc>
    2738:	2c 01       	movw	r4, r24
     number = -number;
    273a:	b7 fa       	bst	r11, 7
    273c:	b0 94       	com	r11
    273e:	b7 f8       	bld	r11, 7
    2740:	b0 94       	com	r11
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <_ZN5Print10printFloatEdh+0x50>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2744:	44 24       	eor	r4, r4
    2746:	55 24       	eor	r5, r5
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2748:	ee 20       	and	r14, r14
    274a:	09 f4       	brne	.+2      	; 0x274e <_ZN5Print10printFloatEdh+0x56>
    274c:	a3 c0       	rjmp	.+326    	; 0x2894 <_ZN5Print10printFloatEdh+0x19c>
    274e:	c0 e0       	ldi	r28, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	40 e0       	ldi	r20, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    2758:	85 2f       	mov	r24, r21
    275a:	94 2f       	mov	r25, r20
    275c:	a3 2f       	mov	r26, r19
    275e:	b2 2f       	mov	r27, r18
    2760:	bc 01       	movw	r22, r24
    2762:	cd 01       	movw	r24, r26
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e2       	ldi	r20, 0x20	; 32
    276a:	51 e4       	ldi	r21, 0x41	; 65
    276c:	0e 94 36 32 	call	0x646c	; 0x646c <__divsf3>
    2770:	56 2f       	mov	r21, r22
    2772:	47 2f       	mov	r20, r23
    2774:	38 2f       	mov	r19, r24
    2776:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2778:	cf 5f       	subi	r28, 0xFF	; 255
    277a:	ce 15       	cp	r28, r14
    277c:	69 f7       	brne	.-38     	; 0x2758 <_ZN5Print10printFloatEdh+0x60>
    rounding /= 10.0;
  
  number += rounding;
    277e:	c5 01       	movw	r24, r10
    2780:	b4 01       	movw	r22, r8
    2782:	e2 2f       	mov	r30, r18
    2784:	05 2f       	mov	r16, r21
    2786:	14 2f       	mov	r17, r20
    2788:	23 2f       	mov	r18, r19
    278a:	3e 2f       	mov	r19, r30
    278c:	a9 01       	movw	r20, r18
    278e:	98 01       	movw	r18, r16
    2790:	0e 94 ce 31 	call	0x639c	; 0x639c <__addsf3>
    2794:	16 2f       	mov	r17, r22
    2796:	07 2f       	mov	r16, r23
    2798:	f8 2e       	mov	r15, r24
    279a:	d9 2e       	mov	r13, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    279c:	86 2f       	mov	r24, r22
    279e:	90 2f       	mov	r25, r16
    27a0:	af 2d       	mov	r26, r15
    27a2:	bd 2d       	mov	r27, r13
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 a3 32 	call	0x6546	; 0x6546 <__fixunssfsi>
    27ac:	c6 2f       	mov	r28, r22
    27ae:	a7 2e       	mov	r10, r23
    27b0:	88 2e       	mov	r8, r24
    27b2:	d9 2f       	mov	r29, r25
  double remainder = number - (double)int_part;
    27b4:	0e 94 cf 32 	call	0x659e	; 0x659e <__floatunsisf>
    27b8:	9b 01       	movw	r18, r22
    27ba:	ac 01       	movw	r20, r24
    27bc:	81 2f       	mov	r24, r17
    27be:	90 2f       	mov	r25, r16
    27c0:	af 2d       	mov	r26, r15
    27c2:	bd 2d       	mov	r27, r13
    27c4:	bc 01       	movw	r22, r24
    27c6:	cd 01       	movw	r24, r26
    27c8:	0e 94 cd 31 	call	0x639a	; 0x639a <__subsf3>
    27cc:	f6 2e       	mov	r15, r22
    27ce:	d7 2e       	mov	r13, r23
    27d0:	18 2f       	mov	r17, r24
    27d2:	09 2f       	mov	r16, r25
  n += print(int_part);
    27d4:	c3 01       	movw	r24, r6
    27d6:	4c 2f       	mov	r20, r28
    27d8:	5a 2d       	mov	r21, r10
    27da:	68 2d       	mov	r22, r8
    27dc:	7d 2f       	mov	r23, r29
    27de:	2a e0       	ldi	r18, 0x0A	; 10
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	0e 94 be 12 	call	0x257c	; 0x257c <_ZN5Print5printEmi>
    27e6:	ec 01       	movw	r28, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    27e8:	c3 01       	movw	r24, r6
    27ea:	6b ea       	ldi	r22, 0xAB	; 171
    27ec:	71 e0       	ldi	r23, 0x01	; 1
    27ee:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN5Print5printEPKc>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    27f2:	c8 0f       	add	r28, r24
    27f4:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    27f6:	5e 01       	movw	r10, r28
    27f8:	a4 0c       	add	r10, r4
    27fa:	b5 1c       	adc	r11, r5
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    27fc:	8f 2d       	mov	r24, r15
    27fe:	9d 2d       	mov	r25, r13
    2800:	a1 2f       	mov	r26, r17
    2802:	b0 2f       	mov	r27, r16
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e2       	ldi	r20, 0x20	; 32
    280e:	51 e4       	ldi	r21, 0x41	; 65
    2810:	0e 94 81 33 	call	0x6702	; 0x6702 <__mulsf3>
    2814:	16 2f       	mov	r17, r22
    2816:	07 2f       	mov	r16, r23
    2818:	f8 2e       	mov	r15, r24
    281a:	d9 2e       	mov	r13, r25
    int toPrint = int(remainder);
    281c:	86 2f       	mov	r24, r22
    281e:	90 2f       	mov	r25, r16
    2820:	af 2d       	mov	r26, r15
    2822:	bd 2d       	mov	r27, r13
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	0e 94 9e 32 	call	0x653c	; 0x653c <__fixsfsi>
    282c:	ab 01       	movw	r20, r22
    282e:	bc 01       	movw	r22, r24
    2830:	ea 01       	movw	r28, r20
    n += print(toPrint);
    2832:	c3 01       	movw	r24, r6
    2834:	ba 01       	movw	r22, r20
    2836:	4a e0       	ldi	r20, 0x0A	; 10
    2838:	50 e0       	ldi	r21, 0x00	; 0
    283a:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN5Print5printEii>
    283e:	a8 0e       	add	r10, r24
    2840:	b9 1e       	adc	r11, r25
    remainder -= toPrint; 
    2842:	be 01       	movw	r22, r28
    2844:	88 27       	eor	r24, r24
    2846:	77 fd       	sbrc	r23, 7
    2848:	80 95       	com	r24
    284a:	98 2f       	mov	r25, r24
    284c:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <__floatsisf>
    2850:	9b 01       	movw	r18, r22
    2852:	ac 01       	movw	r20, r24
    2854:	81 2f       	mov	r24, r17
    2856:	90 2f       	mov	r25, r16
    2858:	af 2d       	mov	r26, r15
    285a:	bd 2d       	mov	r27, r13
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 cd 31 	call	0x639a	; 0x639a <__subsf3>
    2864:	f6 2e       	mov	r15, r22
    2866:	d7 2e       	mov	r13, r23
    2868:	18 2f       	mov	r17, r24
    286a:	09 2f       	mov	r16, r25
    286c:	ea 94       	dec	r14
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    286e:	31 f6       	brne	.-116    	; 0x27fc <_ZN5Print10printFloatEdh+0x104>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2870:	8a 2d       	mov	r24, r10
    2872:	9b 2d       	mov	r25, r11
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	1f 91       	pop	r17
    287a:	0f 91       	pop	r16
    287c:	ff 90       	pop	r15
    287e:	ef 90       	pop	r14
    2880:	df 90       	pop	r13
    2882:	bf 90       	pop	r11
    2884:	af 90       	pop	r10
    2886:	9f 90       	pop	r9
    2888:	8f 90       	pop	r8
    288a:	7f 90       	pop	r7
    288c:	6f 90       	pop	r6
    288e:	5f 90       	pop	r5
    2890:	4f 90       	pop	r4
    2892:	08 95       	ret
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    2894:	c5 01       	movw	r24, r10
    2896:	b4 01       	movw	r22, r8
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	5f e3       	ldi	r21, 0x3F	; 63
    28a0:	0e 94 ce 31 	call	0x639c	; 0x639c <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    28a4:	0e 94 a3 32 	call	0x6546	; 0x6546 <__fixunssfsi>
    28a8:	ab 01       	movw	r20, r22
    28aa:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    28ac:	c3 01       	movw	r24, r6
    28ae:	2a e0       	ldi	r18, 0x0A	; 10
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	0e 94 be 12 	call	0x257c	; 0x257c <_ZN5Print5printEmi>
    28b6:	5c 01       	movw	r10, r24
    28b8:	a4 0c       	add	r10, r4
    28ba:	b5 1c       	adc	r11, r5
    28bc:	d9 cf       	rjmp	.-78     	; 0x2870 <_ZN5Print10printFloatEdh+0x178>

000028be <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    28be:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <_ZN5Print10printFloatEdh>
}
    28c2:	08 95       	ret

000028c4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    28c4:	0f 93       	push	r16
    28c6:	1f 93       	push	r17
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	8c 01       	movw	r16, r24
  size_t n = print(num, digits);
    28ce:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN5Print5printEdi>
    28d2:	ec 01       	movw	r28, r24
  n += println();
    28d4:	c8 01       	movw	r24, r16
    28d6:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5Print7printlnEv>
    28da:	8c 0f       	add	r24, r28
    28dc:	9d 1f       	adc	r25, r29
  return n;
}
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	1f 91       	pop	r17
    28e4:	0f 91       	pop	r16
    28e6:	08 95       	ret

000028e8 <_ZN8SPIClass5beginEv>:
  // MISO pin automatically overrides to INPUT.
  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).

  pinMode(SCK, OUTPUT);
    28e8:	8d e0       	ldi	r24, 0x0D	; 13
    28ea:	61 e0       	ldi	r22, 0x01	; 1
    28ec:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <pinMode>
  pinMode(MOSI, OUTPUT);
    28f0:	8b e0       	ldi	r24, 0x0B	; 11
    28f2:	61 e0       	ldi	r22, 0x01	; 1
    28f4:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <pinMode>
  pinMode(SS, OUTPUT);
    28f8:	8a e0       	ldi	r24, 0x0A	; 10
    28fa:	61 e0       	ldi	r22, 0x01	; 1
    28fc:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <pinMode>
  
  digitalWrite(SCK, LOW);
    2900:	8d e0       	ldi	r24, 0x0D	; 13
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
  digitalWrite(MOSI, LOW);
    2908:	8b e0       	ldi	r24, 0x0B	; 11
    290a:	60 e0       	ldi	r22, 0x00	; 0
    290c:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
  digitalWrite(SS, HIGH);
    2910:	8a e0       	ldi	r24, 0x0A	; 10
    2912:	61 e0       	ldi	r22, 0x01	; 1
    2914:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
    2918:	8c b5       	in	r24, 0x2c	; 44
    291a:	80 61       	ori	r24, 0x10	; 16
    291c:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
    291e:	8c b5       	in	r24, 0x2c	; 44
    2920:	80 64       	ori	r24, 0x40	; 64
    2922:	8c bd       	out	0x2c, r24	; 44
}
    2924:	08 95       	ret

00002926 <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  SPCR &= ~_BV(SPE);
    2926:	8c b5       	in	r24, 0x2c	; 44
    2928:	8f 7b       	andi	r24, 0xBF	; 191
    292a:	8c bd       	out	0x2c, r24	; 44
}
    292c:	08 95       	ret

0000292e <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    292e:	88 23       	and	r24, r24
    2930:	21 f4       	brne	.+8      	; 0x293a <_ZN8SPIClass11setBitOrderEh+0xc>
    SPCR |= _BV(DORD);
    2932:	8c b5       	in	r24, 0x2c	; 44
    2934:	80 62       	ori	r24, 0x20	; 32
    2936:	8c bd       	out	0x2c, r24	; 44
    2938:	08 95       	ret
  } else {
    SPCR &= ~(_BV(DORD));
    293a:	8c b5       	in	r24, 0x2c	; 44
    293c:	8f 7d       	andi	r24, 0xDF	; 223
    293e:	8c bd       	out	0x2c, r24	; 44
    2940:	08 95       	ret

00002942 <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    2942:	9c b5       	in	r25, 0x2c	; 44
    2944:	93 7f       	andi	r25, 0xF3	; 243
    2946:	89 2b       	or	r24, r25
    2948:	8c bd       	out	0x2c, r24	; 44
}
    294a:	08 95       	ret

0000294c <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    294c:	9c b5       	in	r25, 0x2c	; 44
    294e:	28 2f       	mov	r18, r24
    2950:	23 70       	andi	r18, 0x03	; 3
    2952:	9c 7f       	andi	r25, 0xFC	; 252
    2954:	92 2b       	or	r25, r18
    2956:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    2958:	2d b5       	in	r18, 0x2d	; 45
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	95 95       	asr	r25
    295e:	87 95       	ror	r24
    2960:	95 95       	asr	r25
    2962:	87 95       	ror	r24
    2964:	81 70       	andi	r24, 0x01	; 1
    2966:	92 2f       	mov	r25, r18
    2968:	9e 7f       	andi	r25, 0xFE	; 254
    296a:	89 2b       	or	r24, r25
    296c:	8d bd       	out	0x2d, r24	; 45
}
    296e:	08 95       	ret

00002970 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    2970:	1f 92       	push	r1
    2972:	0f 92       	push	r0
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	0f 92       	push	r0
    2978:	11 24       	eor	r1, r1
    297a:	2f 93       	push	r18
    297c:	3f 93       	push	r19
    297e:	8f 93       	push	r24
    2980:	9f 93       	push	r25
    2982:	af 93       	push	r26
    2984:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2986:	80 91 d6 04 	lds	r24, 0x04D6
    298a:	90 91 d7 04 	lds	r25, 0x04D7
    298e:	a0 91 d8 04 	lds	r26, 0x04D8
    2992:	b0 91 d9 04 	lds	r27, 0x04D9
	unsigned char f = timer0_fract;
    2996:	30 91 de 04 	lds	r19, 0x04DE

	m += MILLIS_INC;
	f += FRACT_INC;
    299a:	23 2f       	mov	r18, r19
    299c:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    299e:	2d 37       	cpi	r18, 0x7D	; 125
    29a0:	20 f4       	brcc	.+8      	; 0x29aa <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    29a2:	01 96       	adiw	r24, 0x01	; 1
    29a4:	a1 1d       	adc	r26, r1
    29a6:	b1 1d       	adc	r27, r1
    29a8:	05 c0       	rjmp	.+10     	; 0x29b4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    29aa:	23 2f       	mov	r18, r19
    29ac:	2a 57       	subi	r18, 0x7A	; 122
		m += 1;
    29ae:	02 96       	adiw	r24, 0x02	; 2
    29b0:	a1 1d       	adc	r26, r1
    29b2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    29b4:	20 93 de 04 	sts	0x04DE, r18
	timer0_millis = m;
    29b8:	80 93 d6 04 	sts	0x04D6, r24
    29bc:	90 93 d7 04 	sts	0x04D7, r25
    29c0:	a0 93 d8 04 	sts	0x04D8, r26
    29c4:	b0 93 d9 04 	sts	0x04D9, r27
	timer0_overflow_count++;
    29c8:	80 91 da 04 	lds	r24, 0x04DA
    29cc:	90 91 db 04 	lds	r25, 0x04DB
    29d0:	a0 91 dc 04 	lds	r26, 0x04DC
    29d4:	b0 91 dd 04 	lds	r27, 0x04DD
    29d8:	01 96       	adiw	r24, 0x01	; 1
    29da:	a1 1d       	adc	r26, r1
    29dc:	b1 1d       	adc	r27, r1
    29de:	80 93 da 04 	sts	0x04DA, r24
    29e2:	90 93 db 04 	sts	0x04DB, r25
    29e6:	a0 93 dc 04 	sts	0x04DC, r26
    29ea:	b0 93 dd 04 	sts	0x04DD, r27
}
    29ee:	bf 91       	pop	r27
    29f0:	af 91       	pop	r26
    29f2:	9f 91       	pop	r25
    29f4:	8f 91       	pop	r24
    29f6:	3f 91       	pop	r19
    29f8:	2f 91       	pop	r18
    29fa:	0f 90       	pop	r0
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	0f 90       	pop	r0
    2a00:	1f 90       	pop	r1
    2a02:	18 95       	reti

00002a04 <millis>:

unsigned long millis()
{
    2a04:	0f 93       	push	r16
    2a06:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG;
    2a08:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2a0a:	f8 94       	cli
	m = timer0_millis;
    2a0c:	00 91 d6 04 	lds	r16, 0x04D6
    2a10:	10 91 d7 04 	lds	r17, 0x04D7
    2a14:	20 91 d8 04 	lds	r18, 0x04D8
    2a18:	30 91 d9 04 	lds	r19, 0x04D9
	SREG = oldSREG;
    2a1c:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    2a1e:	b8 01       	movw	r22, r16
    2a20:	c9 01       	movw	r24, r18
    2a22:	1f 91       	pop	r17
    2a24:	0f 91       	pop	r16
    2a26:	08 95       	ret

00002a28 <micros>:

unsigned long micros() {
    2a28:	0f 93       	push	r16
    2a2a:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2a2c:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    2a2e:	f8 94       	cli
	m = timer0_overflow_count;
    2a30:	00 91 da 04 	lds	r16, 0x04DA
    2a34:	10 91 db 04 	lds	r17, 0x04DB
    2a38:	20 91 dc 04 	lds	r18, 0x04DC
    2a3c:	30 91 dd 04 	lds	r19, 0x04DD
#if defined(TCNT0)
	t = TCNT0;
    2a40:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2a42:	a8 9b       	sbis	0x15, 0	; 21
    2a44:	06 c0       	rjmp	.+12     	; 0x2a52 <micros+0x2a>
    2a46:	8f 3f       	cpi	r24, 0xFF	; 255
    2a48:	21 f0       	breq	.+8      	; 0x2a52 <micros+0x2a>
		m++;
    2a4a:	0f 5f       	subi	r16, 0xFF	; 255
    2a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4e:	2f 4f       	sbci	r18, 0xFF	; 255
    2a50:	3f 4f       	sbci	r19, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2a52:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2a54:	32 2f       	mov	r19, r18
    2a56:	21 2f       	mov	r18, r17
    2a58:	10 2f       	mov	r17, r16
    2a5a:	00 27       	eor	r16, r16
    2a5c:	08 0f       	add	r16, r24
    2a5e:	11 1d       	adc	r17, r1
    2a60:	21 1d       	adc	r18, r1
    2a62:	31 1d       	adc	r19, r1
    2a64:	42 e0       	ldi	r20, 0x02	; 2
    2a66:	00 0f       	add	r16, r16
    2a68:	11 1f       	adc	r17, r17
    2a6a:	22 1f       	adc	r18, r18
    2a6c:	33 1f       	adc	r19, r19
    2a6e:	4a 95       	dec	r20
    2a70:	d1 f7       	brne	.-12     	; 0x2a66 <micros+0x3e>
}
    2a72:	b8 01       	movw	r22, r16
    2a74:	c9 01       	movw	r24, r18
    2a76:	1f 91       	pop	r17
    2a78:	0f 91       	pop	r16
    2a7a:	08 95       	ret

00002a7c <delay>:

void delay(unsigned long ms)
{
    2a7c:	cf 92       	push	r12
    2a7e:	df 92       	push	r13
    2a80:	ef 92       	push	r14
    2a82:	ff 92       	push	r15
    2a84:	cf 93       	push	r28
    2a86:	df 93       	push	r29
    2a88:	6b 01       	movw	r12, r22
    2a8a:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    2a8c:	0e 94 14 15 	call	0x2a28	; 0x2a28 <micros>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	ec 01       	movw	r28, r24

	while (ms > 0) {
    2a96:	0f c0       	rjmp	.+30     	; 0x2ab6 <delay+0x3a>
		if (((uint16_t)micros() - start) >= 1000) {
    2a98:	0e 94 14 15 	call	0x2a28	; 0x2a28 <micros>
    2a9c:	6c 1b       	sub	r22, r28
    2a9e:	7d 0b       	sbc	r23, r29
    2aa0:	83 e0       	ldi	r24, 0x03	; 3
    2aa2:	68 3e       	cpi	r22, 0xE8	; 232
    2aa4:	78 07       	cpc	r23, r24
    2aa6:	38 f0       	brcs	.+14     	; 0x2ab6 <delay+0x3a>
			ms--;
    2aa8:	08 94       	sec
    2aaa:	c1 08       	sbc	r12, r1
    2aac:	d1 08       	sbc	r13, r1
    2aae:	e1 08       	sbc	r14, r1
    2ab0:	f1 08       	sbc	r15, r1
			start += 1000;
    2ab2:	c8 51       	subi	r28, 0x18	; 24
    2ab4:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2ab6:	c1 14       	cp	r12, r1
    2ab8:	d1 04       	cpc	r13, r1
    2aba:	e1 04       	cpc	r14, r1
    2abc:	f1 04       	cpc	r15, r1
    2abe:	61 f7       	brne	.-40     	; 0x2a98 <delay+0x1c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	ff 90       	pop	r15
    2ac6:	ef 90       	pop	r14
    2ac8:	df 90       	pop	r13
    2aca:	cf 90       	pop	r12
    2acc:	08 95       	ret

00002ace <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	39 f0       	breq	.+14     	; 0x2ae0 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    2ada:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <delayMicroseconds+0xe>
    2ae0:	08 95       	ret

00002ae2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2ae2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2ae4:	84 b5       	in	r24, 0x24	; 36
    2ae6:	82 60       	ori	r24, 0x02	; 2
    2ae8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2aea:	84 b5       	in	r24, 0x24	; 36
    2aec:	81 60       	ori	r24, 0x01	; 1
    2aee:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2af0:	85 b5       	in	r24, 0x25	; 37
    2af2:	82 60       	ori	r24, 0x02	; 2
    2af4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2af6:	85 b5       	in	r24, 0x25	; 37
    2af8:	81 60       	ori	r24, 0x01	; 1
    2afa:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2afc:	ee e6       	ldi	r30, 0x6E	; 110
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	81 60       	ori	r24, 0x01	; 1
    2b04:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2b06:	e1 e8       	ldi	r30, 0x81	; 129
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2b0c:	80 81       	ld	r24, Z
    2b0e:	82 60       	ori	r24, 0x02	; 2
    2b10:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2b12:	80 81       	ld	r24, Z
    2b14:	81 60       	ori	r24, 0x01	; 1
    2b16:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2b18:	e0 e8       	ldi	r30, 0x80	; 128
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	81 60       	ori	r24, 0x01	; 1
    2b20:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2b22:	e1 eb       	ldi	r30, 0xB1	; 177
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	84 60       	ori	r24, 0x04	; 4
    2b2a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2b2c:	e0 eb       	ldi	r30, 0xB0	; 176
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	81 60       	ori	r24, 0x01	; 1
    2b34:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2b36:	ea e7       	ldi	r30, 0x7A	; 122
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	84 60       	ori	r24, 0x04	; 4
    2b3e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2b40:	80 81       	ld	r24, Z
    2b42:	82 60       	ori	r24, 0x02	; 2
    2b44:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2b46:	80 81       	ld	r24, Z
    2b48:	81 60       	ori	r24, 0x01	; 1
    2b4a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2b4c:	80 81       	ld	r24, Z
    2b4e:	80 68       	ori	r24, 0x80	; 128
    2b50:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2b52:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2b56:	08 95       	ret

00002b58 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2b58:	83 30       	cpi	r24, 0x03	; 3
    2b5a:	71 f0       	breq	.+28     	; 0x2b78 <turnOffPWM+0x20>
    2b5c:	84 30       	cpi	r24, 0x04	; 4
    2b5e:	28 f4       	brcc	.+10     	; 0x2b6a <turnOffPWM+0x12>
    2b60:	81 30       	cpi	r24, 0x01	; 1
    2b62:	a1 f0       	breq	.+40     	; 0x2b8c <turnOffPWM+0x34>
    2b64:	82 30       	cpi	r24, 0x02	; 2
    2b66:	21 f5       	brne	.+72     	; 0x2bb0 <turnOffPWM+0x58>
    2b68:	14 c0       	rjmp	.+40     	; 0x2b92 <turnOffPWM+0x3a>
    2b6a:	86 30       	cpi	r24, 0x06	; 6
    2b6c:	b1 f0       	breq	.+44     	; 0x2b9a <turnOffPWM+0x42>
    2b6e:	87 30       	cpi	r24, 0x07	; 7
    2b70:	d1 f0       	breq	.+52     	; 0x2ba6 <turnOffPWM+0x4e>
    2b72:	84 30       	cpi	r24, 0x04	; 4
    2b74:	e9 f4       	brne	.+58     	; 0x2bb0 <turnOffPWM+0x58>
    2b76:	04 c0       	rjmp	.+8      	; 0x2b80 <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2b78:	80 91 80 00 	lds	r24, 0x0080
    2b7c:	8f 77       	andi	r24, 0x7F	; 127
    2b7e:	03 c0       	rjmp	.+6      	; 0x2b86 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2b80:	80 91 80 00 	lds	r24, 0x0080
    2b84:	8f 7d       	andi	r24, 0xDF	; 223
    2b86:	80 93 80 00 	sts	0x0080, r24
    2b8a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2b8c:	84 b5       	in	r24, 0x24	; 36
    2b8e:	8f 77       	andi	r24, 0x7F	; 127
    2b90:	02 c0       	rjmp	.+4      	; 0x2b96 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2b92:	84 b5       	in	r24, 0x24	; 36
    2b94:	8f 7d       	andi	r24, 0xDF	; 223
    2b96:	84 bd       	out	0x24, r24	; 36
    2b98:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2b9a:	80 91 b0 00 	lds	r24, 0x00B0
    2b9e:	8f 77       	andi	r24, 0x7F	; 127
    2ba0:	80 93 b0 00 	sts	0x00B0, r24
    2ba4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2ba6:	80 91 b0 00 	lds	r24, 0x00B0
    2baa:	8f 7d       	andi	r24, 0xDF	; 223
    2bac:	80 93 b0 00 	sts	0x00B0, r24
    2bb0:	08 95       	ret

00002bb2 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	e4 58       	subi	r30, 0x84	; 132
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2bbc:	80 57       	subi	r24, 0x70	; 112
    2bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2bc4:	88 23       	and	r24, r24
    2bc6:	41 f1       	breq	.+80     	; 0x2c18 <pinMode+0x66>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	fc 01       	movw	r30, r24
    2bd0:	e8 54       	subi	r30, 0x48	; 72
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	45 91       	lpm	r20, Z+
    2bd6:	54 91       	lpm	r21, Z
    2bd8:	da 01       	movw	r26, r20
	out = portOutputRegister(port);
    2bda:	82 55       	subi	r24, 0x52	; 82
    2bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bde:	fc 01       	movw	r30, r24
    2be0:	85 91       	lpm	r24, Z+
    2be2:	94 91       	lpm	r25, Z
    2be4:	fc 01       	movw	r30, r24

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    2be6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2be8:	f8 94       	cli
		*reg &= ~bit;
    2bea:	8c 91       	ld	r24, X

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
    2bec:	66 23       	and	r22, r22
    2bee:	31 f4       	brne	.+12     	; 0x2bfc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    2bf0:	20 95       	com	r18
    2bf2:	82 23       	and	r24, r18
    2bf4:	8c 93       	st	X, r24
		*out &= ~bit;
    2bf6:	80 81       	ld	r24, Z
    2bf8:	82 23       	and	r24, r18
    2bfa:	08 c0       	rjmp	.+16     	; 0x2c0c <pinMode+0x5a>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2bfc:	62 30       	cpi	r22, 0x02	; 2
    2bfe:	49 f4       	brne	.+18     	; 0x2c12 <pinMode+0x60>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    2c00:	32 2f       	mov	r19, r18
    2c02:	30 95       	com	r19
    2c04:	83 23       	and	r24, r19
    2c06:	8c 93       	st	X, r24
		*out |= bit;
    2c08:	80 81       	ld	r24, Z
    2c0a:	82 2b       	or	r24, r18
    2c0c:	80 83       	st	Z, r24
		SREG = oldSREG;
    2c0e:	9f bf       	out	0x3f, r25	; 63
    2c10:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
    2c12:	82 2b       	or	r24, r18
    2c14:	8c 93       	st	X, r24
		SREG = oldSREG;
    2c16:	9f bf       	out	0x3f, r25	; 63
    2c18:	08 95       	ret

00002c1a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	0f 92       	push	r0
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	f9 01       	movw	r30, r18
    2c2e:	e8 59       	subi	r30, 0x98	; 152
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2c34:	f9 01       	movw	r30, r18
    2c36:	e4 58       	subi	r30, 0x84	; 132
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    2c3c:	f9 01       	movw	r30, r18
    2c3e:	e0 57       	subi	r30, 0x70	; 112
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2c44:	00 23       	and	r16, r16
    2c46:	d1 f0       	breq	.+52     	; 0x2c7c <digitalWrite+0x62>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2c48:	88 23       	and	r24, r24
    2c4a:	21 f0       	breq	.+8      	; 0x2c54 <digitalWrite+0x3a>
    2c4c:	69 83       	std	Y+1, r22	; 0x01
    2c4e:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <turnOffPWM>
    2c52:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    2c54:	e0 2f       	mov	r30, r16
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	ee 0f       	add	r30, r30
    2c5a:	ff 1f       	adc	r31, r31
    2c5c:	e2 55       	subi	r30, 0x52	; 82
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	85 91       	lpm	r24, Z+
    2c62:	94 91       	lpm	r25, Z
    2c64:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    2c66:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2c68:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    2c6a:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    2c6c:	66 23       	and	r22, r22
    2c6e:	19 f4       	brne	.+6      	; 0x2c76 <digitalWrite+0x5c>
		*out &= ~bit;
    2c70:	10 95       	com	r17
    2c72:	81 23       	and	r24, r17
    2c74:	01 c0       	rjmp	.+2      	; 0x2c78 <digitalWrite+0x5e>
	} else {
		*out |= bit;
    2c76:	81 2b       	or	r24, r17
    2c78:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    2c7a:	9f bf       	out	0x3f, r25	; 63
}
    2c7c:	0f 90       	pop	r0
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	08 95       	ret

00002c88 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2c88:	cf 93       	push	r28
    2c8a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2c8c:	28 2f       	mov	r18, r24
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	f9 01       	movw	r30, r18
    2c92:	e8 59       	subi	r30, 0x98	; 152
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2c98:	f9 01       	movw	r30, r18
    2c9a:	e4 58       	subi	r30, 0x84	; 132
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	c4 91       	lpm	r28, Z
	uint8_t port = digitalPinToPort(pin);
    2ca0:	f9 01       	movw	r30, r18
    2ca2:	e0 57       	subi	r30, 0x70	; 112
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	d4 91       	lpm	r29, Z

	if (port == NOT_A_PIN) return LOW;
    2ca8:	dd 23       	and	r29, r29
    2caa:	91 f0       	breq	.+36     	; 0x2cd0 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2cac:	88 23       	and	r24, r24
    2cae:	11 f0       	breq	.+4      	; 0x2cb4 <digitalRead+0x2c>
    2cb0:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2cb4:	ed 2f       	mov	r30, r29
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	ee 0f       	add	r30, r30
    2cba:	ff 1f       	adc	r31, r31
    2cbc:	ec 55       	subi	r30, 0x5C	; 92
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	85 91       	lpm	r24, Z+
    2cc2:	94 91       	lpm	r25, Z
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	20 81       	ld	r18, Z
    2cc8:	2c 23       	and	r18, r28
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	11 f4       	brne	.+4      	; 0x2cd4 <digitalRead+0x4c>
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	08 95       	ret

00002cda <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
    2cda:	fc 01       	movw	r30, r24
    2cdc:	80 81       	ld	r24, Z
    2cde:	91 81       	ldd	r25, Z+1	; 0x01
    2ce0:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <free>
}
    2ce4:	08 95       	ret

00002ce6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    2cec:	88 81       	ld	r24, Y
    2cee:	99 81       	ldd	r25, Y+1	; 0x01
    2cf0:	00 97       	sbiw	r24, 0x00	; 0
    2cf2:	11 f0       	breq	.+4      	; 0x2cf8 <_ZN6String10invalidateEv+0x12>
    2cf4:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <free>
	buffer = NULL;
    2cf8:	19 82       	std	Y+1, r1	; 0x01
    2cfa:	18 82       	st	Y, r1
	capacity = len = 0;
    2cfc:	1d 82       	std	Y+5, r1	; 0x05
    2cfe:	1c 82       	std	Y+4, r1	; 0x04
    2d00:	1b 82       	std	Y+3, r1	; 0x03
    2d02:	1a 82       	std	Y+2, r1	; 0x02
}
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	08 95       	ret

00002d0a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    2d0a:	0f 93       	push	r16
    2d0c:	1f 93       	push	r17
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	ec 01       	movw	r28, r24
    2d14:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2d16:	6f 5f       	subi	r22, 0xFF	; 255
    2d18:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1a:	88 81       	ld	r24, Y
    2d1c:	99 81       	ldd	r25, Y+1	; 0x01
    2d1e:	0e 94 d3 35 	call	0x6ba6	; 0x6ba6 <realloc>
    2d22:	28 2f       	mov	r18, r24
    2d24:	39 2f       	mov	r19, r25
	if (newbuffer) {
    2d26:	21 15       	cp	r18, r1
    2d28:	31 05       	cpc	r19, r1
    2d2a:	31 f0       	breq	.+12     	; 0x2d38 <_ZN6String12changeBufferEj+0x2e>
		buffer = newbuffer;
    2d2c:	39 83       	std	Y+1, r19	; 0x01
    2d2e:	28 83       	st	Y, r18
		capacity = maxStrLen;
    2d30:	1b 83       	std	Y+3, r17	; 0x03
    2d32:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	01 c0       	rjmp	.+2      	; 0x2d3a <_ZN6String12changeBufferEj+0x30>
	}
	return 0;
    2d38:	80 e0       	ldi	r24, 0x00	; 0
}
    2d3a:	df 91       	pop	r29
    2d3c:	cf 91       	pop	r28
    2d3e:	1f 91       	pop	r17
    2d40:	0f 91       	pop	r16
    2d42:	08 95       	ret

00002d44 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    2d4a:	88 81       	ld	r24, Y
    2d4c:	99 81       	ldd	r25, Y+1	; 0x01
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	29 f0       	breq	.+10     	; 0x2d5c <_ZN6String7reserveEj+0x18>
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	9b 81       	ldd	r25, Y+3	; 0x03
    2d56:	86 17       	cp	r24, r22
    2d58:	97 07       	cpc	r25, r23
    2d5a:	70 f4       	brcc	.+28     	; 0x2d78 <_ZN6String7reserveEj+0x34>
	if (changeBuffer(size)) {
    2d5c:	ce 01       	movw	r24, r28
    2d5e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <_ZN6String12changeBufferEj>
    2d62:	88 23       	and	r24, r24
    2d64:	59 f0       	breq	.+22     	; 0x2d7c <_ZN6String7reserveEj+0x38>
		if (len == 0) buffer[0] = 0;
    2d66:	8c 81       	ldd	r24, Y+4	; 0x04
    2d68:	9d 81       	ldd	r25, Y+5	; 0x05
    2d6a:	00 97       	sbiw	r24, 0x00	; 0
    2d6c:	49 f4       	brne	.+18     	; 0x2d80 <_ZN6String7reserveEj+0x3c>
    2d6e:	e8 81       	ld	r30, Y
    2d70:	f9 81       	ldd	r31, Y+1	; 0x01
    2d72:	10 82       	st	Z, r1
		return 1;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	05 c0       	rjmp	.+10     	; 0x2d82 <_ZN6String7reserveEj+0x3e>
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	03 c0       	rjmp	.+6      	; 0x2d82 <_ZN6String7reserveEj+0x3e>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
	}
	return 0;
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	01 c0       	rjmp	.+2      	; 0x2d82 <_ZN6String7reserveEj+0x3e>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	08 95       	ret

00002d88 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2d88:	ef 92       	push	r14
    2d8a:	ff 92       	push	r15
    2d8c:	0f 93       	push	r16
    2d8e:	1f 93       	push	r17
    2d90:	cf 93       	push	r28
    2d92:	df 93       	push	r29
    2d94:	ec 01       	movw	r28, r24
    2d96:	7b 01       	movw	r14, r22
    2d98:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    2d9a:	ba 01       	movw	r22, r20
    2d9c:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <_ZN6String7reserveEj>
    2da0:	88 23       	and	r24, r24
    2da2:	21 f4       	brne	.+8      	; 0x2dac <_ZN6String4copyEPKcj+0x24>
		invalidate();
    2da4:	ce 01       	movw	r24, r28
    2da6:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN6String10invalidateEv>
		return *this;
    2daa:	07 c0       	rjmp	.+14     	; 0x2dba <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    2dac:	1d 83       	std	Y+5, r17	; 0x05
    2dae:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    2db0:	88 81       	ld	r24, Y
    2db2:	99 81       	ldd	r25, Y+1	; 0x01
    2db4:	b7 01       	movw	r22, r14
    2db6:	0e 94 19 37 	call	0x6e32	; 0x6e32 <strcpy>
	return *this;
}
    2dba:	8c 2f       	mov	r24, r28
    2dbc:	9d 2f       	mov	r25, r29
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	ff 90       	pop	r15
    2dc8:	ef 90       	pop	r14
    2dca:	08 95       	ret

00002dcc <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    2dcc:	cf 93       	push	r28
    2dce:	df 93       	push	r29
    2dd0:	dc 01       	movw	r26, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2dd2:	11 96       	adiw	r26, 0x01	; 1
    2dd4:	1c 92       	st	X, r1
    2dd6:	1e 92       	st	-X, r1
	capacity = 0;
    2dd8:	13 96       	adiw	r26, 0x03	; 3
    2dda:	1c 92       	st	X, r1
    2ddc:	1e 92       	st	-X, r1
    2dde:	12 97       	sbiw	r26, 0x02	; 2
	len = 0;
    2de0:	15 96       	adiw	r26, 0x05	; 5
    2de2:	1c 92       	st	X, r1
    2de4:	1e 92       	st	-X, r1
    2de6:	14 97       	sbiw	r26, 0x04	; 4
	flags = 0;
    2de8:	16 96       	adiw	r26, 0x06	; 6
    2dea:	1c 92       	st	X, r1
    2dec:	16 97       	sbiw	r26, 0x06	; 6
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    2dee:	61 15       	cp	r22, r1
    2df0:	71 05       	cpc	r23, r1
    2df2:	69 f0       	breq	.+26     	; 0x2e0e <_ZN6StringC1EPKc+0x42>
    2df4:	e6 2f       	mov	r30, r22
    2df6:	f7 2f       	mov	r31, r23
    2df8:	ef 01       	movw	r28, r30
    2dfa:	09 90       	ld	r0, Y+
    2dfc:	00 20       	and	r0, r0
    2dfe:	e9 f7       	brne	.-6      	; 0x2dfa <_ZN6StringC1EPKc+0x2e>
    2e00:	ae 01       	movw	r20, r28
    2e02:	41 50       	subi	r20, 0x01	; 1
    2e04:	50 40       	sbci	r21, 0x00	; 0
    2e06:	4e 1b       	sub	r20, r30
    2e08:	5f 0b       	sbc	r21, r31
    2e0a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <_ZN6String4copyEPKcj>
}
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	08 95       	ret

00002e14 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    2e14:	cf 93       	push	r28
    2e16:	df 93       	push	r29
    2e18:	ec 01       	movw	r28, r24
    2e1a:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    2e1c:	86 17       	cp	r24, r22
    2e1e:	97 07       	cpc	r25, r23
    2e20:	69 f0       	breq	.+26     	; 0x2e3c <_ZN6StringaSERKS_+0x28>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    2e22:	20 81       	ld	r18, Z
    2e24:	31 81       	ldd	r19, Z+1	; 0x01
    2e26:	21 15       	cp	r18, r1
    2e28:	31 05       	cpc	r19, r1
    2e2a:	31 f0       	breq	.+12     	; 0x2e38 <_ZN6StringaSERKS_+0x24>
    2e2c:	44 81       	ldd	r20, Z+4	; 0x04
    2e2e:	55 81       	ldd	r21, Z+5	; 0x05
    2e30:	b9 01       	movw	r22, r18
    2e32:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <_ZN6String4copyEPKcj>
    2e36:	02 c0       	rjmp	.+4      	; 0x2e3c <_ZN6StringaSERKS_+0x28>
	else invalidate();
    2e38:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN6String10invalidateEv>
	
	return *this;
}
    2e3c:	8c 2f       	mov	r24, r28
    2e3e:	9d 2f       	mov	r25, r29
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	08 95       	ret

00002e46 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    2e46:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2e48:	11 82       	std	Z+1, r1	; 0x01
    2e4a:	10 82       	st	Z, r1
	capacity = 0;
    2e4c:	13 82       	std	Z+3, r1	; 0x03
    2e4e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2e50:	15 82       	std	Z+5, r1	; 0x05
    2e52:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2e54:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    2e56:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <_ZN6StringaSERKS_>
}
    2e5a:	08 95       	ret

00002e5c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    2e5c:	cf 93       	push	r28
    2e5e:	df 93       	push	r29
    2e60:	c8 2f       	mov	r28, r24
    2e62:	d9 2f       	mov	r29, r25
	if (cstr) copy(cstr, strlen(cstr));
    2e64:	61 15       	cp	r22, r1
    2e66:	71 05       	cpc	r23, r1
    2e68:	71 f0       	breq	.+28     	; 0x2e86 <_ZN6StringaSEPKc+0x2a>
    2e6a:	e6 2f       	mov	r30, r22
    2e6c:	f7 2f       	mov	r31, r23
    2e6e:	df 01       	movw	r26, r30
    2e70:	0d 90       	ld	r0, X+
    2e72:	00 20       	and	r0, r0
    2e74:	e9 f7       	brne	.-6      	; 0x2e70 <_ZN6StringaSEPKc+0x14>
    2e76:	ad 01       	movw	r20, r26
    2e78:	41 50       	subi	r20, 0x01	; 1
    2e7a:	50 40       	sbci	r21, 0x00	; 0
    2e7c:	4e 1b       	sub	r20, r30
    2e7e:	5f 0b       	sbc	r21, r31
    2e80:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <_ZN6String4copyEPKcj>
    2e84:	02 c0       	rjmp	.+4      	; 0x2e8a <_ZN6StringaSEPKc+0x2e>
	else invalidate();
    2e86:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN6String10invalidateEv>
	
	return *this;
}
    2e8a:	8c 2f       	mov	r24, r28
    2e8c:	9d 2f       	mov	r25, r29
    2e8e:	df 91       	pop	r29
    2e90:	cf 91       	pop	r28
    2e92:	08 95       	ret

00002e94 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    2e94:	0f 93       	push	r16
    2e96:	1f 93       	push	r17
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	a1 97       	sbiw	r28, 0x21	; 33
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
    2eac:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2eae:	fc 01       	movw	r30, r24
    2eb0:	11 82       	std	Z+1, r1	; 0x01
    2eb2:	10 82       	st	Z, r1
	capacity = 0;
    2eb4:	13 82       	std	Z+3, r1	; 0x03
    2eb6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2eb8:	15 82       	std	Z+5, r1	; 0x05
    2eba:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2ebc:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	ba 01       	movw	r22, r20
    2ec2:	ae 01       	movw	r20, r28
    2ec4:	4f 5f       	subi	r20, 0xFF	; 255
    2ec6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <ultoa>
	*this = buf;
    2ece:	c8 01       	movw	r24, r16
    2ed0:	be 01       	movw	r22, r28
    2ed2:	6f 5f       	subi	r22, 0xFF	; 255
    2ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed6:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN6StringaSEPKc>
}
    2eda:	a1 96       	adiw	r28, 0x21	; 33
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	1f 91       	pop	r17
    2eec:	0f 91       	pop	r16
    2eee:	08 95       	ret

00002ef0 <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
    2efc:	a2 97       	sbiw	r28, 0x22	; 34
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	11 82       	std	Z+1, r1	; 0x01
    2f0e:	10 82       	st	Z, r1
	capacity = 0;
    2f10:	13 82       	std	Z+3, r1	; 0x03
    2f12:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2f14:	15 82       	std	Z+5, r1	; 0x05
    2f16:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2f18:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	ba 01       	movw	r22, r20
    2f1e:	ae 01       	movw	r20, r28
    2f20:	4f 5f       	subi	r20, 0xFF	; 255
    2f22:	5f 4f       	sbci	r21, 0xFF	; 255
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	0e 94 83 37 	call	0x6f06	; 0x6f06 <ltoa>
	*this = buf;
    2f2a:	c8 01       	movw	r24, r16
    2f2c:	be 01       	movw	r22, r28
    2f2e:	6f 5f       	subi	r22, 0xFF	; 255
    2f30:	7f 4f       	sbci	r23, 0xFF	; 255
    2f32:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN6StringaSEPKc>
}
    2f36:	a2 96       	adiw	r28, 0x22	; 34
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	cd bf       	out	0x3d, r28	; 61
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	1f 91       	pop	r17
    2f48:	0f 91       	pop	r16
    2f4a:	08 95       	ret

00002f4c <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    2f4c:	0f 93       	push	r16
    2f4e:	1f 93       	push	r17
    2f50:	cf 93       	push	r28
    2f52:	df 93       	push	r29
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	61 97       	sbiw	r28, 0x11	; 17
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	f8 94       	cli
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	cd bf       	out	0x3d, r28	; 61
    2f64:	8c 01       	movw	r16, r24
    2f66:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2f68:	f8 01       	movw	r30, r16
    2f6a:	11 82       	std	Z+1, r1	; 0x01
    2f6c:	10 82       	st	Z, r1
	capacity = 0;
    2f6e:	13 82       	std	Z+3, r1	; 0x03
    2f70:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2f72:	15 82       	std	Z+5, r1	; 0x05
    2f74:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2f76:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    2f78:	be 01       	movw	r22, r28
    2f7a:	6f 5f       	subi	r22, 0xFF	; 255
    2f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7e:	50 e0       	ldi	r21, 0x00	; 0
    2f80:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <utoa>
	*this = buf;
    2f84:	c8 01       	movw	r24, r16
    2f86:	be 01       	movw	r22, r28
    2f88:	6f 5f       	subi	r22, 0xFF	; 255
    2f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8c:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN6StringaSEPKc>
}
    2f90:	61 96       	adiw	r28, 0x11	; 17
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	08 95       	ret

00002fa6 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    2fa6:	0f 93       	push	r16
    2fa8:	1f 93       	push	r17
    2faa:	cf 93       	push	r28
    2fac:	df 93       	push	r29
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
    2fb2:	62 97       	sbiw	r28, 0x12	; 18
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	f8 94       	cli
    2fb8:	de bf       	out	0x3e, r29	; 62
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	8c 01       	movw	r16, r24
    2fc0:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2fc2:	f8 01       	movw	r30, r16
    2fc4:	11 82       	std	Z+1, r1	; 0x01
    2fc6:	10 82       	st	Z, r1
	capacity = 0;
    2fc8:	13 82       	std	Z+3, r1	; 0x03
    2fca:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2fcc:	15 82       	std	Z+5, r1	; 0x05
    2fce:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2fd0:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    2fd2:	be 01       	movw	r22, r28
    2fd4:	6f 5f       	subi	r22, 0xFF	; 255
    2fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <itoa>
	*this = buf;
    2fde:	c8 01       	movw	r24, r16
    2fe0:	be 01       	movw	r22, r28
    2fe2:	6f 5f       	subi	r22, 0xFF	; 255
    2fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe6:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN6StringaSEPKc>
}
    2fea:	62 96       	adiw	r28, 0x12	; 18
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	df 91       	pop	r29
    2ff8:	cf 91       	pop	r28
    2ffa:	1f 91       	pop	r17
    2ffc:	0f 91       	pop	r16
    2ffe:	08 95       	ret

00003000 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    3000:	0f 93       	push	r16
    3002:	1f 93       	push	r17
    3004:	cf 93       	push	r28
    3006:	df 93       	push	r29
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	29 97       	sbiw	r28, 0x09	; 9
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	8c 01       	movw	r16, r24
    301a:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    301c:	f8 01       	movw	r30, r16
    301e:	11 82       	std	Z+1, r1	; 0x01
    3020:	10 82       	st	Z, r1
	capacity = 0;
    3022:	13 82       	std	Z+3, r1	; 0x03
    3024:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3026:	15 82       	std	Z+5, r1	; 0x05
    3028:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    302a:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	be 01       	movw	r22, r28
    3030:	6f 5f       	subi	r22, 0xFF	; 255
    3032:	7f 4f       	sbci	r23, 0xFF	; 255
    3034:	50 e0       	ldi	r21, 0x00	; 0
    3036:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <utoa>
	*this = buf;
    303a:	c8 01       	movw	r24, r16
    303c:	be 01       	movw	r22, r28
    303e:	6f 5f       	subi	r22, 0xFF	; 255
    3040:	7f 4f       	sbci	r23, 0xFF	; 255
    3042:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN6StringaSEPKc>
}
    3046:	29 96       	adiw	r28, 0x09	; 9
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	f8 94       	cli
    304c:	de bf       	out	0x3e, r29	; 62
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	cd bf       	out	0x3d, r28	; 61
    3052:	df 91       	pop	r29
    3054:	cf 91       	pop	r28
    3056:	1f 91       	pop	r17
    3058:	0f 91       	pop	r16
    305a:	08 95       	ret

0000305c <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    305c:	cf 93       	push	r28
    305e:	df 93       	push	r29
    3060:	00 d0       	rcall	.+0      	; 0x3062 <_ZN6StringC1Ec+0x6>
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3068:	11 82       	std	Z+1, r1	; 0x01
    306a:	10 82       	st	Z, r1
	capacity = 0;
    306c:	13 82       	std	Z+3, r1	; 0x03
    306e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3070:	15 82       	std	Z+5, r1	; 0x05
    3072:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3074:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    3076:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    3078:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    307a:	be 01       	movw	r22, r28
    307c:	6f 5f       	subi	r22, 0xFF	; 255
    307e:	7f 4f       	sbci	r23, 0xFF	; 255
    3080:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN6StringaSEPKc>
}
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	08 95       	ret

0000308e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    308e:	ef 92       	push	r14
    3090:	ff 92       	push	r15
    3092:	0f 93       	push	r16
    3094:	1f 93       	push	r17
    3096:	cf 93       	push	r28
    3098:	df 93       	push	r29
    309a:	8c 01       	movw	r16, r24
    309c:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    309e:	fc 01       	movw	r30, r24
    30a0:	c4 81       	ldd	r28, Z+4	; 0x04
    30a2:	d5 81       	ldd	r29, Z+5	; 0x05
	if (!cstr) return 0;
    30a4:	61 15       	cp	r22, r1
    30a6:	71 05       	cpc	r23, r1
    30a8:	c9 f0       	breq	.+50     	; 0x30dc <_ZN6String6concatEPKcj+0x4e>
	if (length == 0) return 1;
    30aa:	41 15       	cp	r20, r1
    30ac:	51 05       	cpc	r21, r1
    30ae:	c1 f0       	breq	.+48     	; 0x30e0 <_ZN6String6concatEPKcj+0x52>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    30b0:	c4 0f       	add	r28, r20
    30b2:	d5 1f       	adc	r29, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    30b4:	be 01       	movw	r22, r28
    30b6:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <_ZN6String7reserveEj>
    30ba:	88 23       	and	r24, r24
    30bc:	99 f0       	breq	.+38     	; 0x30e4 <_ZN6String6concatEPKcj+0x56>
	strcpy(buffer + len, cstr);
    30be:	f8 01       	movw	r30, r16
    30c0:	80 81       	ld	r24, Z
    30c2:	91 81       	ldd	r25, Z+1	; 0x01
    30c4:	24 81       	ldd	r18, Z+4	; 0x04
    30c6:	35 81       	ldd	r19, Z+5	; 0x05
    30c8:	82 0f       	add	r24, r18
    30ca:	93 1f       	adc	r25, r19
    30cc:	b7 01       	movw	r22, r14
    30ce:	0e 94 19 37 	call	0x6e32	; 0x6e32 <strcpy>
	len = newlen;
    30d2:	f8 01       	movw	r30, r16
    30d4:	d5 83       	std	Z+5, r29	; 0x05
    30d6:	c4 83       	std	Z+4, r28	; 0x04
	return 1;
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	05 c0       	rjmp	.+10     	; 0x30e6 <_ZN6String6concatEPKcj+0x58>
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	03 c0       	rjmp	.+6      	; 0x30e6 <_ZN6String6concatEPKcj+0x58>
	if (length == 0) return 1;
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	01 c0       	rjmp	.+2      	; 0x30e6 <_ZN6String6concatEPKcj+0x58>
	if (!reserve(newlen)) return 0;
    30e4:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    30e6:	df 91       	pop	r29
    30e8:	cf 91       	pop	r28
    30ea:	1f 91       	pop	r17
    30ec:	0f 91       	pop	r16
    30ee:	ff 90       	pop	r15
    30f0:	ef 90       	pop	r14
    30f2:	08 95       	ret

000030f4 <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    30f4:	fb 01       	movw	r30, r22
	return concat(s.buffer, s.len);
    30f6:	20 81       	ld	r18, Z
    30f8:	31 81       	ldd	r19, Z+1	; 0x01
    30fa:	44 81       	ldd	r20, Z+4	; 0x04
    30fc:	55 81       	ldd	r21, Z+5	; 0x05
    30fe:	b9 01       	movw	r22, r18
    3100:	0e 94 47 18 	call	0x308e	; 0x308e <_ZN6String6concatEPKcj>
}
    3104:	08 95       	ret

00003106 <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    3106:	61 15       	cp	r22, r1
    3108:	71 05       	cpc	r23, r1
    310a:	71 f0       	breq	.+28     	; 0x3128 <_ZN6String6concatEPKc+0x22>
	return concat(cstr, strlen(cstr));
    310c:	e6 2f       	mov	r30, r22
    310e:	f7 2f       	mov	r31, r23
    3110:	df 01       	movw	r26, r30
    3112:	0d 90       	ld	r0, X+
    3114:	00 20       	and	r0, r0
    3116:	e9 f7       	brne	.-6      	; 0x3112 <_ZN6String6concatEPKc+0xc>
    3118:	ad 01       	movw	r20, r26
    311a:	41 50       	subi	r20, 0x01	; 1
    311c:	50 40       	sbci	r21, 0x00	; 0
    311e:	4e 1b       	sub	r20, r30
    3120:	5f 0b       	sbc	r21, r31
    3122:	0e 94 47 18 	call	0x308e	; 0x308e <_ZN6String6concatEPKcj>
    3126:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    3128:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
    312a:	08 95       	ret

0000312c <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
    3130:	00 d0       	rcall	.+0      	; 0x3132 <_ZN6String6concatEc+0x6>
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    3136:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    3138:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    313a:	be 01       	movw	r22, r28
    313c:	6f 5f       	subi	r22, 0xFF	; 255
    313e:	7f 4f       	sbci	r23, 0xFF	; 255
    3140:	41 e0       	ldi	r20, 0x01	; 1
    3142:	50 e0       	ldi	r21, 0x00	; 0
    3144:	0e 94 47 18 	call	0x308e	; 0x308e <_ZN6String6concatEPKcj>
}
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	df 91       	pop	r29
    314e:	cf 91       	pop	r28
    3150:	08 95       	ret

00003152 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    3152:	ef 92       	push	r14
    3154:	ff 92       	push	r15
    3156:	0f 93       	push	r16
    3158:	1f 93       	push	r17
    315a:	cf 93       	push	r28
    315c:	df 93       	push	r29
    315e:	00 d0       	rcall	.+0      	; 0x3160 <_ZN6String6concatEh+0xe>
    3160:	00 d0       	rcall	.+0      	; 0x3162 <_ZN6String6concatEh+0x10>
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	7c 01       	movw	r14, r24
    3168:	86 2f       	mov	r24, r22
	char buf[4];
	itoa(num, buf, 10);
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	8e 01       	movw	r16, r28
    316e:	0f 5f       	subi	r16, 0xFF	; 255
    3170:	1f 4f       	sbci	r17, 0xFF	; 255
    3172:	b8 01       	movw	r22, r16
    3174:	4a e0       	ldi	r20, 0x0A	; 10
    3176:	50 e0       	ldi	r21, 0x00	; 0
    3178:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <itoa>
	return concat(buf, strlen(buf));
    317c:	f8 01       	movw	r30, r16
    317e:	01 90       	ld	r0, Z+
    3180:	00 20       	and	r0, r0
    3182:	e9 f7       	brne	.-6      	; 0x317e <_ZN6String6concatEh+0x2c>
    3184:	af 01       	movw	r20, r30
    3186:	41 50       	subi	r20, 0x01	; 1
    3188:	50 40       	sbci	r21, 0x00	; 0
    318a:	40 1b       	sub	r20, r16
    318c:	51 0b       	sbc	r21, r17
    318e:	c7 01       	movw	r24, r14
    3190:	b8 01       	movw	r22, r16
    3192:	0e 94 47 18 	call	0x308e	; 0x308e <_ZN6String6concatEPKcj>
}
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	1f 91       	pop	r17
    31a4:	0f 91       	pop	r16
    31a6:	ff 90       	pop	r15
    31a8:	ef 90       	pop	r14
    31aa:	08 95       	ret

000031ac <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    31ac:	ef 92       	push	r14
    31ae:	ff 92       	push	r15
    31b0:	0f 93       	push	r16
    31b2:	1f 93       	push	r17
    31b4:	cf 93       	push	r28
    31b6:	df 93       	push	r29
    31b8:	cd b7       	in	r28, 0x3d	; 61
    31ba:	de b7       	in	r29, 0x3e	; 62
    31bc:	27 97       	sbiw	r28, 0x07	; 7
    31be:	0f b6       	in	r0, 0x3f	; 63
    31c0:	f8 94       	cli
    31c2:	de bf       	out	0x3e, r29	; 62
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	cd bf       	out	0x3d, r28	; 61
    31c8:	7c 01       	movw	r14, r24
    31ca:	cb 01       	movw	r24, r22
	char buf[7];
	itoa(num, buf, 10);
    31cc:	8e 01       	movw	r16, r28
    31ce:	0f 5f       	subi	r16, 0xFF	; 255
    31d0:	1f 4f       	sbci	r17, 0xFF	; 255
    31d2:	b8 01       	movw	r22, r16
    31d4:	4a e0       	ldi	r20, 0x0A	; 10
    31d6:	50 e0       	ldi	r21, 0x00	; 0
    31d8:	0e 94 62 37 	call	0x6ec4	; 0x6ec4 <itoa>
	return concat(buf, strlen(buf));
    31dc:	f8 01       	movw	r30, r16
    31de:	01 90       	ld	r0, Z+
    31e0:	00 20       	and	r0, r0
    31e2:	e9 f7       	brne	.-6      	; 0x31de <_ZN6String6concatEi+0x32>
    31e4:	af 01       	movw	r20, r30
    31e6:	41 50       	subi	r20, 0x01	; 1
    31e8:	50 40       	sbci	r21, 0x00	; 0
    31ea:	40 1b       	sub	r20, r16
    31ec:	51 0b       	sbc	r21, r17
    31ee:	c7 01       	movw	r24, r14
    31f0:	b8 01       	movw	r22, r16
    31f2:	0e 94 47 18 	call	0x308e	; 0x308e <_ZN6String6concatEPKcj>
}
    31f6:	27 96       	adiw	r28, 0x07	; 7
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	1f 91       	pop	r17
    3208:	0f 91       	pop	r16
    320a:	ff 90       	pop	r15
    320c:	ef 90       	pop	r14
    320e:	08 95       	ret

00003210 <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    3210:	ef 92       	push	r14
    3212:	ff 92       	push	r15
    3214:	0f 93       	push	r16
    3216:	1f 93       	push	r17
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	00 d0       	rcall	.+0      	; 0x321e <_ZN6String6concatEj+0xe>
    321e:	00 d0       	rcall	.+0      	; 0x3220 <_ZN6String6concatEj+0x10>
    3220:	00 d0       	rcall	.+0      	; 0x3222 <_ZN6String6concatEj+0x12>
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
    3226:	7c 01       	movw	r14, r24
    3228:	cb 01       	movw	r24, r22
	char buf[6];
	utoa(num, buf, 10);
    322a:	8e 01       	movw	r16, r28
    322c:	0f 5f       	subi	r16, 0xFF	; 255
    322e:	1f 4f       	sbci	r17, 0xFF	; 255
    3230:	b8 01       	movw	r22, r16
    3232:	4a e0       	ldi	r20, 0x0A	; 10
    3234:	50 e0       	ldi	r21, 0x00	; 0
    3236:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <utoa>
	return concat(buf, strlen(buf));
    323a:	f8 01       	movw	r30, r16
    323c:	01 90       	ld	r0, Z+
    323e:	00 20       	and	r0, r0
    3240:	e9 f7       	brne	.-6      	; 0x323c <_ZN6String6concatEj+0x2c>
    3242:	af 01       	movw	r20, r30
    3244:	41 50       	subi	r20, 0x01	; 1
    3246:	50 40       	sbci	r21, 0x00	; 0
    3248:	40 1b       	sub	r20, r16
    324a:	51 0b       	sbc	r21, r17
    324c:	c7 01       	movw	r24, r14
    324e:	b8 01       	movw	r22, r16
    3250:	0e 94 47 18 	call	0x308e	; 0x308e <_ZN6String6concatEPKcj>
}
    3254:	26 96       	adiw	r28, 0x06	; 6
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	ff 90       	pop	r15
    326a:	ef 90       	pop	r14
    326c:	08 95       	ret

0000326e <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    326e:	ef 92       	push	r14
    3270:	ff 92       	push	r15
    3272:	0f 93       	push	r16
    3274:	1f 93       	push	r17
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	2c 97       	sbiw	r28, 0x0c	; 12
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	de bf       	out	0x3e, r29	; 62
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	cd bf       	out	0x3d, r28	; 61
    328a:	7c 01       	movw	r14, r24
	char buf[12];
	ltoa(num, buf, 10);
    328c:	cb 01       	movw	r24, r22
    328e:	ba 01       	movw	r22, r20
    3290:	8e 01       	movw	r16, r28
    3292:	0f 5f       	subi	r16, 0xFF	; 255
    3294:	1f 4f       	sbci	r17, 0xFF	; 255
    3296:	a8 01       	movw	r20, r16
    3298:	2a e0       	ldi	r18, 0x0A	; 10
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	0e 94 83 37 	call	0x6f06	; 0x6f06 <ltoa>
	return concat(buf, strlen(buf));
    32a0:	f8 01       	movw	r30, r16
    32a2:	01 90       	ld	r0, Z+
    32a4:	00 20       	and	r0, r0
    32a6:	e9 f7       	brne	.-6      	; 0x32a2 <_ZN6String6concatEl+0x34>
    32a8:	af 01       	movw	r20, r30
    32aa:	41 50       	subi	r20, 0x01	; 1
    32ac:	50 40       	sbci	r21, 0x00	; 0
    32ae:	40 1b       	sub	r20, r16
    32b0:	51 0b       	sbc	r21, r17
    32b2:	c7 01       	movw	r24, r14
    32b4:	b8 01       	movw	r22, r16
    32b6:	0e 94 47 18 	call	0x308e	; 0x308e <_ZN6String6concatEPKcj>
}
    32ba:	2c 96       	adiw	r28, 0x0c	; 12
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	de bf       	out	0x3e, r29	; 62
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	cd bf       	out	0x3d, r28	; 61
    32c6:	df 91       	pop	r29
    32c8:	cf 91       	pop	r28
    32ca:	1f 91       	pop	r17
    32cc:	0f 91       	pop	r16
    32ce:	ff 90       	pop	r15
    32d0:	ef 90       	pop	r14
    32d2:	08 95       	ret

000032d4 <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    32d4:	ef 92       	push	r14
    32d6:	ff 92       	push	r15
    32d8:	0f 93       	push	r16
    32da:	1f 93       	push	r17
    32dc:	cf 93       	push	r28
    32de:	df 93       	push	r29
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	2b 97       	sbiw	r28, 0x0b	; 11
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    32f0:	7c 01       	movw	r14, r24
	char buf[11];
	ultoa(num, buf, 10);
    32f2:	cb 01       	movw	r24, r22
    32f4:	ba 01       	movw	r22, r20
    32f6:	8e 01       	movw	r16, r28
    32f8:	0f 5f       	subi	r16, 0xFF	; 255
    32fa:	1f 4f       	sbci	r17, 0xFF	; 255
    32fc:	a8 01       	movw	r20, r16
    32fe:	2a e0       	ldi	r18, 0x0A	; 10
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	0e 94 cc 37 	call	0x6f98	; 0x6f98 <ultoa>
	return concat(buf, strlen(buf));
    3306:	f8 01       	movw	r30, r16
    3308:	01 90       	ld	r0, Z+
    330a:	00 20       	and	r0, r0
    330c:	e9 f7       	brne	.-6      	; 0x3308 <_ZN6String6concatEm+0x34>
    330e:	af 01       	movw	r20, r30
    3310:	41 50       	subi	r20, 0x01	; 1
    3312:	50 40       	sbci	r21, 0x00	; 0
    3314:	40 1b       	sub	r20, r16
    3316:	51 0b       	sbc	r21, r17
    3318:	c7 01       	movw	r24, r14
    331a:	b8 01       	movw	r22, r16
    331c:	0e 94 47 18 	call	0x308e	; 0x308e <_ZN6String6concatEPKcj>
}
    3320:	2b 96       	adiw	r28, 0x0b	; 11
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	df 91       	pop	r29
    332e:	cf 91       	pop	r28
    3330:	1f 91       	pop	r17
    3332:	0f 91       	pop	r16
    3334:	ff 90       	pop	r15
    3336:	ef 90       	pop	r14
    3338:	08 95       	ret

0000333a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    333a:	cf 93       	push	r28
    333c:	df 93       	push	r29
    333e:	c8 2f       	mov	r28, r24
    3340:	d9 2f       	mov	r29, r25
    3342:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    3344:	20 81       	ld	r18, Z
    3346:	31 81       	ldd	r19, Z+1	; 0x01
    3348:	44 81       	ldd	r20, Z+4	; 0x04
    334a:	55 81       	ldd	r21, Z+5	; 0x05
    334c:	b9 01       	movw	r22, r18
    334e:	0e 94 47 18 	call	0x308e	; 0x308e <_ZN6String6concatEPKcj>
    3352:	88 23       	and	r24, r24
    3354:	21 f4       	brne	.+8      	; 0x335e <_ZplRK15StringSumHelperRK6String+0x24>
    3356:	8c 2f       	mov	r24, r28
    3358:	9d 2f       	mov	r25, r29
    335a:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN6String10invalidateEv>
	return a;
}
    335e:	8c 2f       	mov	r24, r28
    3360:	9d 2f       	mov	r25, r29
    3362:	df 91       	pop	r29
    3364:	cf 91       	pop	r28
    3366:	08 95       	ret

00003368 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    3368:	cf 93       	push	r28
    336a:	df 93       	push	r29
    336c:	c8 2f       	mov	r28, r24
    336e:	d9 2f       	mov	r29, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    3370:	61 15       	cp	r22, r1
    3372:	71 05       	cpc	r23, r1
    3374:	79 f0       	breq	.+30     	; 0x3394 <_ZplRK15StringSumHelperPKc+0x2c>
    3376:	e6 2f       	mov	r30, r22
    3378:	f7 2f       	mov	r31, r23
    337a:	df 01       	movw	r26, r30
    337c:	0d 90       	ld	r0, X+
    337e:	00 20       	and	r0, r0
    3380:	e9 f7       	brne	.-6      	; 0x337c <_ZplRK15StringSumHelperPKc+0x14>
    3382:	ad 01       	movw	r20, r26
    3384:	41 50       	subi	r20, 0x01	; 1
    3386:	50 40       	sbci	r21, 0x00	; 0
    3388:	4e 1b       	sub	r20, r30
    338a:	5f 0b       	sbc	r21, r31
    338c:	0e 94 47 18 	call	0x308e	; 0x308e <_ZN6String6concatEPKcj>
    3390:	88 23       	and	r24, r24
    3392:	21 f4       	brne	.+8      	; 0x339c <_ZplRK15StringSumHelperPKc+0x34>
    3394:	8c 2f       	mov	r24, r28
    3396:	9d 2f       	mov	r25, r29
    3398:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN6String10invalidateEv>
	return a;
}
    339c:	8c 2f       	mov	r24, r28
    339e:	9d 2f       	mov	r25, r29
    33a0:	df 91       	pop	r29
    33a2:	cf 91       	pop	r28
    33a4:	08 95       	ret

000033a6 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	d8 2f       	mov	r29, r24
    33ac:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    33ae:	0e 94 96 18 	call	0x312c	; 0x312c <_ZN6String6concatEc>
    33b2:	88 23       	and	r24, r24
    33b4:	21 f4       	brne	.+8      	; 0x33be <_ZplRK15StringSumHelperc+0x18>
    33b6:	8d 2f       	mov	r24, r29
    33b8:	9c 2f       	mov	r25, r28
    33ba:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN6String10invalidateEv>
	return a;
}
    33be:	8d 2f       	mov	r24, r29
    33c0:	9c 2f       	mov	r25, r28
    33c2:	df 91       	pop	r29
    33c4:	cf 91       	pop	r28
    33c6:	08 95       	ret

000033c8 <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    33c8:	cf 93       	push	r28
    33ca:	df 93       	push	r29
    33cc:	d8 2f       	mov	r29, r24
    33ce:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    33d0:	0e 94 a9 18 	call	0x3152	; 0x3152 <_ZN6String6concatEh>
    33d4:	88 23       	and	r24, r24
    33d6:	21 f4       	brne	.+8      	; 0x33e0 <_ZplRK15StringSumHelperh+0x18>
    33d8:	8d 2f       	mov	r24, r29
    33da:	9c 2f       	mov	r25, r28
    33dc:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN6String10invalidateEv>
	return a;
}
    33e0:	8d 2f       	mov	r24, r29
    33e2:	9c 2f       	mov	r25, r28
    33e4:	df 91       	pop	r29
    33e6:	cf 91       	pop	r28
    33e8:	08 95       	ret

000033ea <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    33ea:	cf 93       	push	r28
    33ec:	df 93       	push	r29
    33ee:	d8 2f       	mov	r29, r24
    33f0:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    33f2:	0e 94 d6 18 	call	0x31ac	; 0x31ac <_ZN6String6concatEi>
    33f6:	88 23       	and	r24, r24
    33f8:	21 f4       	brne	.+8      	; 0x3402 <_ZplRK15StringSumHelperi+0x18>
    33fa:	8d 2f       	mov	r24, r29
    33fc:	9c 2f       	mov	r25, r28
    33fe:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN6String10invalidateEv>
	return a;
}
    3402:	8d 2f       	mov	r24, r29
    3404:	9c 2f       	mov	r25, r28
    3406:	df 91       	pop	r29
    3408:	cf 91       	pop	r28
    340a:	08 95       	ret

0000340c <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	d8 2f       	mov	r29, r24
    3412:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3414:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN6String6concatEj>
    3418:	88 23       	and	r24, r24
    341a:	21 f4       	brne	.+8      	; 0x3424 <_ZplRK15StringSumHelperj+0x18>
    341c:	8d 2f       	mov	r24, r29
    341e:	9c 2f       	mov	r25, r28
    3420:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN6String10invalidateEv>
	return a;
}
    3424:	8d 2f       	mov	r24, r29
    3426:	9c 2f       	mov	r25, r28
    3428:	df 91       	pop	r29
    342a:	cf 91       	pop	r28
    342c:	08 95       	ret

0000342e <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    342e:	cf 93       	push	r28
    3430:	df 93       	push	r29
    3432:	d8 2f       	mov	r29, r24
    3434:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3436:	0e 94 37 19 	call	0x326e	; 0x326e <_ZN6String6concatEl>
    343a:	88 23       	and	r24, r24
    343c:	21 f4       	brne	.+8      	; 0x3446 <_ZplRK15StringSumHelperl+0x18>
    343e:	8d 2f       	mov	r24, r29
    3440:	9c 2f       	mov	r25, r28
    3442:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN6String10invalidateEv>
	return a;
}
    3446:	8d 2f       	mov	r24, r29
    3448:	9c 2f       	mov	r25, r28
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	08 95       	ret

00003450 <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	d8 2f       	mov	r29, r24
    3456:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3458:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <_ZN6String6concatEm>
    345c:	88 23       	and	r24, r24
    345e:	21 f4       	brne	.+8      	; 0x3468 <_ZplRK15StringSumHelperm+0x18>
    3460:	8d 2f       	mov	r24, r29
    3462:	9c 2f       	mov	r25, r28
    3464:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <_ZN6String10invalidateEv>
	return a;
}
    3468:	8d 2f       	mov	r24, r29
    346a:	9c 2f       	mov	r25, r28
    346c:	df 91       	pop	r29
    346e:	cf 91       	pop	r28
    3470:	08 95       	ret

00003472 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    3472:	dc 01       	movw	r26, r24
    3474:	fb 01       	movw	r30, r22
	if (!buffer || !s.buffer) {
    3476:	8d 91       	ld	r24, X+
    3478:	9c 91       	ld	r25, X
    347a:	11 97       	sbiw	r26, 0x01	; 1
    347c:	00 97       	sbiw	r24, 0x00	; 0
    347e:	31 f0       	breq	.+12     	; 0x348c <_ZNK6String9compareToERKS_+0x1a>
    3480:	60 81       	ld	r22, Z
    3482:	71 81       	ldd	r23, Z+1	; 0x01
    3484:	61 15       	cp	r22, r1
    3486:	71 05       	cpc	r23, r1
    3488:	d1 f4       	brne	.+52     	; 0x34be <_ZNK6String9compareToERKS_+0x4c>
    348a:	0e c0       	rjmp	.+28     	; 0x34a8 <_ZNK6String9compareToERKS_+0x36>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    348c:	a0 81       	ld	r26, Z
    348e:	b1 81       	ldd	r27, Z+1	; 0x01
    3490:	10 97       	sbiw	r26, 0x00	; 0
    3492:	d1 f0       	breq	.+52     	; 0x34c8 <_ZNK6String9compareToERKS_+0x56>
    3494:	84 81       	ldd	r24, Z+4	; 0x04
    3496:	95 81       	ldd	r25, Z+5	; 0x05
    3498:	00 97       	sbiw	r24, 0x00	; 0
    349a:	c9 f0       	breq	.+50     	; 0x34ce <_ZNK6String9compareToERKS_+0x5c>
    349c:	2c 91       	ld	r18, X
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	30 95       	com	r19
    34a2:	21 95       	neg	r18
    34a4:	3f 4f       	sbci	r19, 0xFF	; 255
    34a6:	18 c0       	rjmp	.+48     	; 0x34d8 <_ZNK6String9compareToERKS_+0x66>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    34a8:	14 96       	adiw	r26, 0x04	; 4
    34aa:	2d 91       	ld	r18, X+
    34ac:	3c 91       	ld	r19, X
    34ae:	15 97       	sbiw	r26, 0x05	; 5
    34b0:	21 15       	cp	r18, r1
    34b2:	31 05       	cpc	r19, r1
    34b4:	79 f0       	breq	.+30     	; 0x34d4 <_ZNK6String9compareToERKS_+0x62>
    34b6:	fc 01       	movw	r30, r24
    34b8:	20 81       	ld	r18, Z
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	0d c0       	rjmp	.+26     	; 0x34d8 <_ZNK6String9compareToERKS_+0x66>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    34be:	0e 94 10 37 	call	0x6e20	; 0x6e20 <strcmp>
    34c2:	28 2f       	mov	r18, r24
    34c4:	39 2f       	mov	r19, r25
    34c6:	08 c0       	rjmp	.+16     	; 0x34d8 <_ZNK6String9compareToERKS_+0x66>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	05 c0       	rjmp	.+10     	; 0x34d8 <_ZNK6String9compareToERKS_+0x66>
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	02 c0       	rjmp	.+4      	; 0x34d8 <_ZNK6String9compareToERKS_+0x66>
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    34d8:	82 2f       	mov	r24, r18
    34da:	93 2f       	mov	r25, r19
    34dc:	08 95       	ret

000034de <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    34de:	fc 01       	movw	r30, r24
    34e0:	24 81       	ldd	r18, Z+4	; 0x04
    34e2:	35 81       	ldd	r19, Z+5	; 0x05
    34e4:	fb 01       	movw	r30, r22
    34e6:	44 81       	ldd	r20, Z+4	; 0x04
    34e8:	55 81       	ldd	r21, Z+5	; 0x05
    34ea:	24 17       	cp	r18, r20
    34ec:	35 07       	cpc	r19, r21
    34ee:	39 f4       	brne	.+14     	; 0x34fe <_ZNK6String6equalsERKS_+0x20>
    34f0:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZNK6String9compareToERKS_>
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    34f4:	21 e0       	ldi	r18, 0x01	; 1
    34f6:	00 97       	sbiw	r24, 0x00	; 0
    34f8:	19 f0       	breq	.+6      	; 0x3500 <_ZNK6String6equalsERKS_+0x22>
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	01 c0       	rjmp	.+2      	; 0x3500 <_ZNK6String6equalsERKS_+0x22>
{
	return (len == s2.len && compareTo(s2) == 0);
    34fe:	20 e0       	ldi	r18, 0x00	; 0
}
    3500:	82 2f       	mov	r24, r18
    3502:	08 95       	ret

00003504 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    3504:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3506:	84 81       	ldd	r24, Z+4	; 0x04
    3508:	95 81       	ldd	r25, Z+5	; 0x05
    350a:	00 97       	sbiw	r24, 0x00	; 0
    350c:	61 f4       	brne	.+24     	; 0x3526 <_ZNK6String6equalsEPKc+0x22>
    350e:	61 15       	cp	r22, r1
    3510:	71 05       	cpc	r23, r1
    3512:	39 f0       	breq	.+14     	; 0x3522 <_ZNK6String6equalsEPKc+0x1e>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	fb 01       	movw	r30, r22
    3518:	90 81       	ld	r25, Z
    351a:	99 23       	and	r25, r25
    351c:	d9 f0       	breq	.+54     	; 0x3554 <_ZNK6String6equalsEPKc+0x50>
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	08 95       	ret
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	08 95       	ret
	if (cstr == NULL) return buffer[0] == 0;
    3526:	61 15       	cp	r22, r1
    3528:	71 05       	cpc	r23, r1
    352a:	49 f4       	brne	.+18     	; 0x353e <_ZNK6String6equalsEPKc+0x3a>
    352c:	01 90       	ld	r0, Z+
    352e:	f0 81       	ld	r31, Z
    3530:	e0 2d       	mov	r30, r0
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	90 81       	ld	r25, Z
    3536:	99 23       	and	r25, r25
    3538:	69 f0       	breq	.+26     	; 0x3554 <_ZNK6String6equalsEPKc+0x50>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    353e:	80 81       	ld	r24, Z
    3540:	91 81       	ldd	r25, Z+1	; 0x01
    3542:	0e 94 10 37 	call	0x6e20	; 0x6e20 <strcmp>
    3546:	28 2f       	mov	r18, r24
    3548:	39 2f       	mov	r19, r25
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	21 15       	cp	r18, r1
    354e:	31 05       	cpc	r19, r1
    3550:	09 f0       	breq	.+2      	; 0x3554 <_ZNK6String6equalsEPKc+0x50>
    3552:	80 e0       	ldi	r24, 0x00	; 0
}
    3554:	08 95       	ret

00003556 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    3556:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZNK6String9compareToERKS_>
}
    355a:	89 2f       	mov	r24, r25
    355c:	88 1f       	adc	r24, r24
    355e:	88 27       	eor	r24, r24
    3560:	88 1f       	adc	r24, r24
    3562:	08 95       	ret

00003564 <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    3564:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZNK6String9compareToERKS_>
    3568:	21 e0       	ldi	r18, 0x01	; 1
    356a:	18 16       	cp	r1, r24
    356c:	19 06       	cpc	r1, r25
    356e:	0c f0       	brlt	.+2      	; 0x3572 <_ZNK6StringgtERKS_+0xe>
    3570:	20 e0       	ldi	r18, 0x00	; 0
}
    3572:	82 2f       	mov	r24, r18
    3574:	08 95       	ret

00003576 <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    3576:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZNK6String9compareToERKS_>
    357a:	21 e0       	ldi	r18, 0x01	; 1
    357c:	18 16       	cp	r1, r24
    357e:	19 06       	cpc	r1, r25
    3580:	0c f4       	brge	.+2      	; 0x3584 <_ZNK6StringleERKS_+0xe>
    3582:	20 e0       	ldi	r18, 0x00	; 0
}
    3584:	82 2f       	mov	r24, r18
    3586:	08 95       	ret

00003588 <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    3588:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZNK6String9compareToERKS_>
    358c:	89 2f       	mov	r24, r25
    358e:	80 95       	com	r24
}
    3590:	88 1f       	adc	r24, r24
    3592:	88 27       	eor	r24, r24
    3594:	88 1f       	adc	r24, r24
    3596:	08 95       	ret

00003598 <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    3598:	ef 92       	push	r14
    359a:	ff 92       	push	r15
    359c:	0f 93       	push	r16
    359e:	1f 93       	push	r17
    35a0:	cf 93       	push	r28
    35a2:	df 93       	push	r29
    35a4:	dc 01       	movw	r26, r24
    35a6:	fb 01       	movw	r30, r22
	if (this == &s2) return 1;
    35a8:	86 17       	cp	r24, r22
    35aa:	97 07       	cpc	r25, r23
    35ac:	29 f1       	breq	.+74     	; 0x35f8 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	if (len != s2.len) return 0;
    35ae:	14 96       	adiw	r26, 0x04	; 4
    35b0:	8d 91       	ld	r24, X+
    35b2:	9c 91       	ld	r25, X
    35b4:	15 97       	sbiw	r26, 0x05	; 5
    35b6:	24 81       	ldd	r18, Z+4	; 0x04
    35b8:	35 81       	ldd	r19, Z+5	; 0x05
    35ba:	82 17       	cp	r24, r18
    35bc:	93 07       	cpc	r25, r19
    35be:	f1 f4       	brne	.+60     	; 0x35fc <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len == 0) return 1;
    35c0:	00 97       	sbiw	r24, 0x00	; 0
    35c2:	f1 f0       	breq	.+60     	; 0x3600 <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
    35c4:	e0 80       	ld	r14, Z
    35c6:	f1 80       	ldd	r15, Z+1	; 0x01
    35c8:	0d 91       	ld	r16, X+
    35ca:	1c 91       	ld	r17, X
    35cc:	11 97       	sbiw	r26, 0x01	; 1
	while (*p1) {
    35ce:	0d c0       	rjmp	.+26     	; 0x35ea <_ZNK6String16equalsIgnoreCaseERKS_+0x52>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <tolower>
    35d6:	ec 01       	movw	r28, r24
    35d8:	f7 01       	movw	r30, r14
    35da:	81 91       	ld	r24, Z+
    35dc:	7f 01       	movw	r14, r30
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <tolower>
    35e4:	c8 17       	cp	r28, r24
    35e6:	d9 07       	cpc	r29, r25
    35e8:	69 f4       	brne	.+26     	; 0x3604 <_ZNK6String16equalsIgnoreCaseERKS_+0x6c>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    35ea:	f8 01       	movw	r30, r16
    35ec:	81 91       	ld	r24, Z+
    35ee:	8f 01       	movw	r16, r30
    35f0:	88 23       	and	r24, r24
    35f2:	71 f7       	brne	.-36     	; 0x35d0 <_ZNK6String16equalsIgnoreCaseERKS_+0x38>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	07 c0       	rjmp	.+14     	; 0x3606 <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	05 c0       	rjmp	.+10     	; 0x3606 <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	if (len != s2.len) return 0;
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	03 c0       	rjmp	.+6      	; 0x3606 <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	if (len == 0) return 1;
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	01 c0       	rjmp	.+2      	; 0x3606 <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    3604:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return 1;
}
    3606:	df 91       	pop	r29
    3608:	cf 91       	pop	r28
    360a:	1f 91       	pop	r17
    360c:	0f 91       	pop	r16
    360e:	ff 90       	pop	r15
    3610:	ef 90       	pop	r14
    3612:	08 95       	ret

00003614 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    3614:	fc 01       	movw	r30, r24
    3616:	db 01       	movw	r26, r22
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    3618:	14 96       	adiw	r26, 0x04	; 4
    361a:	2d 91       	ld	r18, X+
    361c:	3c 91       	ld	r19, X
    361e:	15 97       	sbiw	r26, 0x05	; 5
    3620:	84 81       	ldd	r24, Z+4	; 0x04
    3622:	95 81       	ldd	r25, Z+5	; 0x05
    3624:	82 1b       	sub	r24, r18
    3626:	93 0b       	sbc	r25, r19
    3628:	84 17       	cp	r24, r20
    362a:	95 07       	cpc	r25, r21
    362c:	b8 f0       	brcs	.+46     	; 0x365c <_ZNK6String10startsWithERKS_j+0x48>
    362e:	80 81       	ld	r24, Z
    3630:	91 81       	ldd	r25, Z+1	; 0x01
    3632:	00 97       	sbiw	r24, 0x00	; 0
    3634:	a9 f0       	breq	.+42     	; 0x3660 <_ZNK6String10startsWithERKS_j+0x4c>
    3636:	6d 91       	ld	r22, X+
    3638:	7c 91       	ld	r23, X
    363a:	11 97       	sbiw	r26, 0x01	; 1
    363c:	61 15       	cp	r22, r1
    363e:	71 05       	cpc	r23, r1
    3640:	89 f0       	breq	.+34     	; 0x3664 <_ZNK6String10startsWithERKS_j+0x50>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    3642:	84 0f       	add	r24, r20
    3644:	95 1f       	adc	r25, r21
    3646:	a9 01       	movw	r20, r18
    3648:	0e 94 20 37 	call	0x6e40	; 0x6e40 <strncmp>
    364c:	28 2f       	mov	r18, r24
    364e:	39 2f       	mov	r19, r25
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	21 15       	cp	r18, r1
    3654:	31 05       	cpc	r19, r1
    3656:	39 f0       	breq	.+14     	; 0x3666 <_ZNK6String10startsWithERKS_j+0x52>
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	08 95       	ret
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	08 95       	ret
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	08 95       	ret
    3664:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    3666:	08 95       	ret

00003668 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    3668:	fc 01       	movw	r30, r24
    366a:	24 81       	ldd	r18, Z+4	; 0x04
    366c:	35 81       	ldd	r19, Z+5	; 0x05
    366e:	fb 01       	movw	r30, r22
    3670:	44 81       	ldd	r20, Z+4	; 0x04
    3672:	55 81       	ldd	r21, Z+5	; 0x05
    3674:	24 17       	cp	r18, r20
    3676:	35 07       	cpc	r19, r21
    3678:	28 f0       	brcs	.+10     	; 0x3684 <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    367a:	40 e0       	ldi	r20, 0x00	; 0
    367c:	50 e0       	ldi	r21, 0x00	; 0
    367e:	0e 94 0a 1b 	call	0x3614	; 0x3614 <_ZNK6String10startsWithERKS_j>
    3682:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    3684:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    3686:	08 95       	ret

00003688 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    3688:	fc 01       	movw	r30, r24
    368a:	db 01       	movw	r26, r22
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    368c:	84 81       	ldd	r24, Z+4	; 0x04
    368e:	95 81       	ldd	r25, Z+5	; 0x05
    3690:	14 96       	adiw	r26, 0x04	; 4
    3692:	2d 91       	ld	r18, X+
    3694:	3c 91       	ld	r19, X
    3696:	15 97       	sbiw	r26, 0x05	; 5
    3698:	82 17       	cp	r24, r18
    369a:	93 07       	cpc	r25, r19
    369c:	c8 f0       	brcs	.+50     	; 0x36d0 <_ZNK6String8endsWithERKS_+0x48>
    369e:	40 81       	ld	r20, Z
    36a0:	51 81       	ldd	r21, Z+1	; 0x01
    36a2:	41 15       	cp	r20, r1
    36a4:	51 05       	cpc	r21, r1
    36a6:	b1 f0       	breq	.+44     	; 0x36d4 <_ZNK6String8endsWithERKS_+0x4c>
    36a8:	6d 91       	ld	r22, X+
    36aa:	7c 91       	ld	r23, X
    36ac:	11 97       	sbiw	r26, 0x01	; 1
    36ae:	61 15       	cp	r22, r1
    36b0:	71 05       	cpc	r23, r1
    36b2:	91 f0       	breq	.+36     	; 0x36d8 <_ZNK6String8endsWithERKS_+0x50>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    36b4:	82 1b       	sub	r24, r18
    36b6:	93 0b       	sbc	r25, r19
    36b8:	84 0f       	add	r24, r20
    36ba:	95 1f       	adc	r25, r21
    36bc:	0e 94 10 37 	call	0x6e20	; 0x6e20 <strcmp>
    36c0:	28 2f       	mov	r18, r24
    36c2:	39 2f       	mov	r19, r25
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	21 15       	cp	r18, r1
    36c8:	31 05       	cpc	r19, r1
    36ca:	39 f0       	breq	.+14     	; 0x36da <_ZNK6String8endsWithERKS_+0x52>
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	08 95       	ret
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	08 95       	ret
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	08 95       	ret
    36d8:	80 e0       	ldi	r24, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    36da:	08 95       	ret

000036dc <_ZN6String9setCharAtEjc>:
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
    36dc:	fc 01       	movw	r30, r24
	if (loc < len) buffer[loc] = c;
    36de:	84 81       	ldd	r24, Z+4	; 0x04
    36e0:	95 81       	ldd	r25, Z+5	; 0x05
    36e2:	68 17       	cp	r22, r24
    36e4:	79 07       	cpc	r23, r25
    36e6:	30 f4       	brcc	.+12     	; 0x36f4 <_ZN6String9setCharAtEjc+0x18>
    36e8:	80 81       	ld	r24, Z
    36ea:	91 81       	ldd	r25, Z+1	; 0x01
    36ec:	68 0f       	add	r22, r24
    36ee:	79 1f       	adc	r23, r25
    36f0:	fb 01       	movw	r30, r22
    36f2:	40 83       	st	Z, r20
    36f4:	08 95       	ret

000036f6 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    36f6:	fc 01       	movw	r30, r24
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    36f8:	84 81       	ldd	r24, Z+4	; 0x04
    36fa:	95 81       	ldd	r25, Z+5	; 0x05
    36fc:	68 17       	cp	r22, r24
    36fe:	79 07       	cpc	r23, r25
    3700:	20 f4       	brcc	.+8      	; 0x370a <_ZN6StringixEj+0x14>
    3702:	80 81       	ld	r24, Z
    3704:	91 81       	ldd	r25, Z+1	; 0x01
    3706:	00 97       	sbiw	r24, 0x00	; 0
    3708:	29 f4       	brne	.+10     	; 0x3714 <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    370a:	10 92 df 04 	sts	0x04DF, r1
		return dummy_writable_char;
    370e:	8f ed       	ldi	r24, 0xDF	; 223
    3710:	94 e0       	ldi	r25, 0x04	; 4
    3712:	08 95       	ret
	}
	return buffer[index];
    3714:	86 0f       	add	r24, r22
    3716:	97 1f       	adc	r25, r23
}
    3718:	08 95       	ret

0000371a <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    371a:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    371c:	84 81       	ldd	r24, Z+4	; 0x04
    371e:	95 81       	ldd	r25, Z+5	; 0x05
    3720:	68 17       	cp	r22, r24
    3722:	79 07       	cpc	r23, r25
    3724:	48 f4       	brcc	.+18     	; 0x3738 <_ZNK6StringixEj+0x1e>
    3726:	80 81       	ld	r24, Z
    3728:	91 81       	ldd	r25, Z+1	; 0x01
    372a:	00 97       	sbiw	r24, 0x00	; 0
    372c:	39 f0       	breq	.+14     	; 0x373c <_ZNK6StringixEj+0x22>
	return buffer[index];
    372e:	68 0f       	add	r22, r24
    3730:	79 1f       	adc	r23, r25
    3732:	fb 01       	movw	r30, r22
    3734:	80 81       	ld	r24, Z
    3736:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	08 95       	ret
    373c:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    373e:	08 95       	ret

00003740 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    3740:	0e 94 8d 1b 	call	0x371a	; 0x371a <_ZNK6StringixEj>
}
    3744:	08 95       	ret

00003746 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    3746:	0f 93       	push	r16
    3748:	1f 93       	push	r17
    374a:	cf 93       	push	r28
    374c:	df 93       	push	r29
    374e:	fc 01       	movw	r30, r24
    3750:	eb 01       	movw	r28, r22
	if (!bufsize || !buf) return;
    3752:	41 15       	cp	r20, r1
    3754:	51 05       	cpc	r21, r1
    3756:	e9 f0       	breq	.+58     	; 0x3792 <_ZNK6String8getBytesEPhjj+0x4c>
    3758:	20 97       	sbiw	r28, 0x00	; 0
    375a:	d9 f0       	breq	.+54     	; 0x3792 <_ZNK6String8getBytesEPhjj+0x4c>
	if (index >= len) {
    375c:	84 81       	ldd	r24, Z+4	; 0x04
    375e:	95 81       	ldd	r25, Z+5	; 0x05
    3760:	28 17       	cp	r18, r24
    3762:	39 07       	cpc	r19, r25
    3764:	10 f0       	brcs	.+4      	; 0x376a <_ZNK6String8getBytesEPhjj+0x24>
		buf[0] = 0;
    3766:	18 82       	st	Y, r1
		return;
    3768:	14 c0       	rjmp	.+40     	; 0x3792 <_ZNK6String8getBytesEPhjj+0x4c>
	}
	unsigned int n = bufsize - 1;
    376a:	41 50       	subi	r20, 0x01	; 1
    376c:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    376e:	8c 01       	movw	r16, r24
    3770:	02 1b       	sub	r16, r18
    3772:	13 0b       	sbc	r17, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    3774:	40 17       	cp	r20, r16
    3776:	51 07       	cpc	r21, r17
    3778:	08 f4       	brcc	.+2      	; 0x377c <_ZNK6String8getBytesEPhjj+0x36>
    377a:	8a 01       	movw	r16, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    377c:	60 81       	ld	r22, Z
    377e:	71 81       	ldd	r23, Z+1	; 0x01
    3780:	62 0f       	add	r22, r18
    3782:	73 1f       	adc	r23, r19
    3784:	ce 01       	movw	r24, r28
    3786:	a8 01       	movw	r20, r16
    3788:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <strncpy>
	buf[n] = 0;
    378c:	c0 0f       	add	r28, r16
    378e:	d1 1f       	adc	r29, r17
    3790:	18 82       	st	Y, r1
}
    3792:	df 91       	pop	r29
    3794:	cf 91       	pop	r28
    3796:	1f 91       	pop	r17
    3798:	0f 91       	pop	r16
    379a:	08 95       	ret

0000379c <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    379c:	cf 93       	push	r28
    379e:	df 93       	push	r29
    37a0:	fc 01       	movw	r30, r24
	if (fromIndex >= len) return -1;
    37a2:	84 81       	ldd	r24, Z+4	; 0x04
    37a4:	95 81       	ldd	r25, Z+5	; 0x05
    37a6:	48 17       	cp	r20, r24
    37a8:	59 07       	cpc	r21, r25
    37aa:	68 f4       	brcc	.+26     	; 0x37c6 <_ZNK6String7indexOfEcj+0x2a>
	const char* temp = strchr(buffer + fromIndex, ch);
    37ac:	c0 81       	ld	r28, Z
    37ae:	d1 81       	ldd	r29, Z+1	; 0x01
    37b0:	ce 01       	movw	r24, r28
    37b2:	84 0f       	add	r24, r20
    37b4:	95 1f       	adc	r25, r21
    37b6:	70 e0       	ldi	r23, 0x00	; 0
    37b8:	0e 94 05 37 	call	0x6e0a	; 0x6e0a <strchr>
	if (temp == NULL) return -1;
    37bc:	00 97       	sbiw	r24, 0x00	; 0
    37be:	31 f0       	breq	.+12     	; 0x37cc <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
    37c0:	8c 1b       	sub	r24, r28
    37c2:	9d 0b       	sbc	r25, r29
    37c4:	05 c0       	rjmp	.+10     	; 0x37d0 <_ZNK6String7indexOfEcj+0x34>
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
    37c6:	8f ef       	ldi	r24, 0xFF	; 255
    37c8:	9f ef       	ldi	r25, 0xFF	; 255
    37ca:	02 c0       	rjmp	.+4      	; 0x37d0 <_ZNK6String7indexOfEcj+0x34>
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
    37cc:	8f ef       	ldi	r24, 0xFF	; 255
    37ce:	9f ef       	ldi	r25, 0xFF	; 255
	return temp - buffer;
}
    37d0:	df 91       	pop	r29
    37d2:	cf 91       	pop	r28
    37d4:	08 95       	ret

000037d6 <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    37d6:	40 e0       	ldi	r20, 0x00	; 0
    37d8:	50 e0       	ldi	r21, 0x00	; 0
    37da:	0e 94 ce 1b 	call	0x379c	; 0x379c <_ZNK6String7indexOfEcj>
}
    37de:	08 95       	ret

000037e0 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    37e0:	cf 93       	push	r28
    37e2:	df 93       	push	r29
    37e4:	fc 01       	movw	r30, r24
	if (fromIndex >= len) return -1;
    37e6:	84 81       	ldd	r24, Z+4	; 0x04
    37e8:	95 81       	ldd	r25, Z+5	; 0x05
    37ea:	48 17       	cp	r20, r24
    37ec:	59 07       	cpc	r21, r25
    37ee:	78 f4       	brcc	.+30     	; 0x380e <_ZNK6String7indexOfERKS_j+0x2e>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    37f0:	c0 81       	ld	r28, Z
    37f2:	d1 81       	ldd	r29, Z+1	; 0x01
    37f4:	fb 01       	movw	r30, r22
    37f6:	60 81       	ld	r22, Z
    37f8:	71 81       	ldd	r23, Z+1	; 0x01
    37fa:	ce 01       	movw	r24, r28
    37fc:	84 0f       	add	r24, r20
    37fe:	95 1f       	adc	r25, r21
    3800:	0e 94 48 37 	call	0x6e90	; 0x6e90 <strstr>
	if (found == NULL) return -1;
    3804:	00 97       	sbiw	r24, 0x00	; 0
    3806:	31 f0       	breq	.+12     	; 0x3814 <_ZNK6String7indexOfERKS_j+0x34>
	return found - buffer;
    3808:	8c 1b       	sub	r24, r28
    380a:	9d 0b       	sbc	r25, r29
    380c:	05 c0       	rjmp	.+10     	; 0x3818 <_ZNK6String7indexOfERKS_j+0x38>
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    380e:	8f ef       	ldi	r24, 0xFF	; 255
    3810:	9f ef       	ldi	r25, 0xFF	; 255
    3812:	02 c0       	rjmp	.+4      	; 0x3818 <_ZNK6String7indexOfERKS_j+0x38>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    3814:	8f ef       	ldi	r24, 0xFF	; 255
    3816:	9f ef       	ldi	r25, 0xFF	; 255
	return found - buffer;
}
    3818:	df 91       	pop	r29
    381a:	cf 91       	pop	r28
    381c:	08 95       	ret

0000381e <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    381e:	40 e0       	ldi	r20, 0x00	; 0
    3820:	50 e0       	ldi	r21, 0x00	; 0
    3822:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <_ZNK6String7indexOfERKS_j>
}
    3826:	08 95       	ret

00003828 <_ZNK6String11lastIndexOfEcj>:
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    3828:	df 92       	push	r13
    382a:	ef 92       	push	r14
    382c:	ff 92       	push	r15
    382e:	0f 93       	push	r16
    3830:	1f 93       	push	r17
    3832:	cf 93       	push	r28
    3834:	df 93       	push	r29
    3836:	8c 01       	movw	r16, r24
	if (fromIndex >= len) return -1;
    3838:	dc 01       	movw	r26, r24
    383a:	14 96       	adiw	r26, 0x04	; 4
    383c:	8d 91       	ld	r24, X+
    383e:	9c 91       	ld	r25, X
    3840:	15 97       	sbiw	r26, 0x05	; 5
    3842:	48 17       	cp	r20, r24
    3844:	59 07       	cpc	r21, r25
    3846:	e0 f4       	brcc	.+56     	; 0x3880 <_ZNK6String11lastIndexOfEcj+0x58>
	char tempchar = buffer[fromIndex + 1];
    3848:	7a 01       	movw	r14, r20
    384a:	08 94       	sec
    384c:	e1 1c       	adc	r14, r1
    384e:	f1 1c       	adc	r15, r1
    3850:	ed 91       	ld	r30, X+
    3852:	fc 91       	ld	r31, X
    3854:	11 97       	sbiw	r26, 0x01	; 1
    3856:	ee 0d       	add	r30, r14
    3858:	ff 1d       	adc	r31, r15
    385a:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    385c:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    385e:	cd 91       	ld	r28, X+
    3860:	dc 91       	ld	r29, X
    3862:	ce 01       	movw	r24, r28
    3864:	70 e0       	ldi	r23, 0x00	; 0
    3866:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <strrchr>
	buffer[fromIndex + 1] = tempchar;
    386a:	ce 0d       	add	r28, r14
    386c:	df 1d       	adc	r29, r15
    386e:	d8 82       	st	Y, r13
	if (temp == NULL) return -1;
    3870:	00 97       	sbiw	r24, 0x00	; 0
    3872:	49 f0       	breq	.+18     	; 0x3886 <_ZNK6String11lastIndexOfEcj+0x5e>
	return temp - buffer;
    3874:	f8 01       	movw	r30, r16
    3876:	20 81       	ld	r18, Z
    3878:	31 81       	ldd	r19, Z+1	; 0x01
    387a:	82 1b       	sub	r24, r18
    387c:	93 0b       	sbc	r25, r19
    387e:	05 c0       	rjmp	.+10     	; 0x388a <_ZNK6String11lastIndexOfEcj+0x62>
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    3880:	8f ef       	ldi	r24, 0xFF	; 255
    3882:	9f ef       	ldi	r25, 0xFF	; 255
    3884:	02 c0       	rjmp	.+4      	; 0x388a <_ZNK6String11lastIndexOfEcj+0x62>
	char tempchar = buffer[fromIndex + 1];
	buffer[fromIndex + 1] = '\0';
	char* temp = strrchr( buffer, ch );
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
    3886:	8f ef       	ldi	r24, 0xFF	; 255
    3888:	9f ef       	ldi	r25, 0xFF	; 255
	return temp - buffer;
}
    388a:	df 91       	pop	r29
    388c:	cf 91       	pop	r28
    388e:	1f 91       	pop	r17
    3890:	0f 91       	pop	r16
    3892:	ff 90       	pop	r15
    3894:	ef 90       	pop	r14
    3896:	df 90       	pop	r13
    3898:	08 95       	ret

0000389a <_ZNK6String11lastIndexOfEc>:
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    389a:	fc 01       	movw	r30, r24
    389c:	44 81       	ldd	r20, Z+4	; 0x04
    389e:	55 81       	ldd	r21, Z+5	; 0x05
    38a0:	41 50       	subi	r20, 0x01	; 1
    38a2:	50 40       	sbci	r21, 0x00	; 0
    38a4:	0e 94 14 1c 	call	0x3828	; 0x3828 <_ZNK6String11lastIndexOfEcj>
}
    38a8:	08 95       	ret

000038aa <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    38aa:	af 92       	push	r10
    38ac:	bf 92       	push	r11
    38ae:	cf 92       	push	r12
    38b0:	df 92       	push	r13
    38b2:	ef 92       	push	r14
    38b4:	ff 92       	push	r15
    38b6:	0f 93       	push	r16
    38b8:	1f 93       	push	r17
    38ba:	cf 93       	push	r28
    38bc:	df 93       	push	r29
    38be:	fc 01       	movw	r30, r24
    38c0:	6b 01       	movw	r12, r22
    38c2:	7a 01       	movw	r14, r20
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    38c4:	db 01       	movw	r26, r22
    38c6:	14 96       	adiw	r26, 0x04	; 4
    38c8:	2d 91       	ld	r18, X+
    38ca:	3c 91       	ld	r19, X
    38cc:	15 97       	sbiw	r26, 0x05	; 5
    38ce:	21 15       	cp	r18, r1
    38d0:	31 05       	cpc	r19, r1
    38d2:	71 f1       	breq	.+92     	; 0x3930 <_ZNK6String11lastIndexOfERKS_j+0x86>
    38d4:	84 81       	ldd	r24, Z+4	; 0x04
    38d6:	95 81       	ldd	r25, Z+5	; 0x05
    38d8:	00 97       	sbiw	r24, 0x00	; 0
    38da:	71 f1       	breq	.+92     	; 0x3938 <_ZNK6String11lastIndexOfERKS_j+0x8e>
    38dc:	82 17       	cp	r24, r18
    38de:	93 07       	cpc	r25, r19
    38e0:	78 f1       	brcs	.+94     	; 0x3940 <_ZNK6String11lastIndexOfERKS_j+0x96>
	if (fromIndex >= len) fromIndex = len - 1;
    38e2:	48 17       	cp	r20, r24
    38e4:	59 07       	cpc	r21, r25
    38e6:	20 f0       	brcs	.+8      	; 0x38f0 <_ZNK6String11lastIndexOfERKS_j+0x46>
    38e8:	7c 01       	movw	r14, r24
    38ea:	08 94       	sec
    38ec:	e1 08       	sbc	r14, r1
    38ee:	f1 08       	sbc	r15, r1
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    38f0:	c0 81       	ld	r28, Z
    38f2:	d1 81       	ldd	r29, Z+1	; 0x01
    38f4:	8e 01       	movw	r16, r28
    38f6:	0e 0d       	add	r16, r14
    38f8:	1f 1d       	adc	r17, r15
    38fa:	0c 17       	cp	r16, r28
    38fc:	1d 07       	cpc	r17, r29
    38fe:	20 f1       	brcs	.+72     	; 0x3948 <_ZNK6String11lastIndexOfERKS_j+0x9e>
    3900:	ce 01       	movw	r24, r28

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    3902:	aa 24       	eor	r10, r10
    3904:	aa 94       	dec	r10
    3906:	ba 2c       	mov	r11, r10
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
		p = strstr(p, s2.buffer);
    3908:	f6 01       	movw	r30, r12
    390a:	60 81       	ld	r22, Z
    390c:	71 81       	ldd	r23, Z+1	; 0x01
    390e:	0e 94 48 37 	call	0x6e90	; 0x6e90 <strstr>
    3912:	9c 01       	movw	r18, r24
		if (!p) break;
    3914:	00 97       	sbiw	r24, 0x00	; 0
    3916:	d9 f0       	breq	.+54     	; 0x394e <_ZNK6String11lastIndexOfERKS_j+0xa4>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    3918:	8c 1b       	sub	r24, r28
    391a:	9d 0b       	sbc	r25, r29
    391c:	e8 16       	cp	r14, r24
    391e:	f9 06       	cpc	r15, r25
    3920:	08 f0       	brcs	.+2      	; 0x3924 <_ZNK6String11lastIndexOfERKS_j+0x7a>
    3922:	5c 01       	movw	r10, r24
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3924:	c9 01       	movw	r24, r18
    3926:	01 96       	adiw	r24, 0x01	; 1
    3928:	08 17       	cp	r16, r24
    392a:	19 07       	cpc	r17, r25
    392c:	68 f7       	brcc	.-38     	; 0x3908 <_ZNK6String11lastIndexOfERKS_j+0x5e>
    392e:	0f c0       	rjmp	.+30     	; 0x394e <_ZNK6String11lastIndexOfERKS_j+0xa4>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    3930:	aa 24       	eor	r10, r10
    3932:	aa 94       	dec	r10
    3934:	ba 2c       	mov	r11, r10
    3936:	0b c0       	rjmp	.+22     	; 0x394e <_ZNK6String11lastIndexOfERKS_j+0xa4>
    3938:	aa 24       	eor	r10, r10
    393a:	aa 94       	dec	r10
    393c:	ba 2c       	mov	r11, r10
    393e:	07 c0       	rjmp	.+14     	; 0x394e <_ZNK6String11lastIndexOfERKS_j+0xa4>
    3940:	aa 24       	eor	r10, r10
    3942:	aa 94       	dec	r10
    3944:	ba 2c       	mov	r11, r10
    3946:	03 c0       	rjmp	.+6      	; 0x394e <_ZNK6String11lastIndexOfERKS_j+0xa4>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    3948:	aa 24       	eor	r10, r10
    394a:	aa 94       	dec	r10
    394c:	ba 2c       	mov	r11, r10
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    394e:	8a 2d       	mov	r24, r10
    3950:	9b 2d       	mov	r25, r11
    3952:	df 91       	pop	r29
    3954:	cf 91       	pop	r28
    3956:	1f 91       	pop	r17
    3958:	0f 91       	pop	r16
    395a:	ff 90       	pop	r15
    395c:	ef 90       	pop	r14
    395e:	df 90       	pop	r13
    3960:	cf 90       	pop	r12
    3962:	bf 90       	pop	r11
    3964:	af 90       	pop	r10
    3966:	08 95       	ret

00003968 <_ZNK6String11lastIndexOfERKS_>:
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
    3968:	fc 01       	movw	r30, r24
	return lastIndexOf(s2, len - s2.len);
    396a:	44 81       	ldd	r20, Z+4	; 0x04
    396c:	55 81       	ldd	r21, Z+5	; 0x05
    396e:	db 01       	movw	r26, r22
    3970:	14 96       	adiw	r26, 0x04	; 4
    3972:	8d 91       	ld	r24, X+
    3974:	9c 91       	ld	r25, X
    3976:	15 97       	sbiw	r26, 0x05	; 5
    3978:	48 1b       	sub	r20, r24
    397a:	59 0b       	sbc	r21, r25
    397c:	cf 01       	movw	r24, r30
    397e:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_ZNK6String11lastIndexOfERKS_j>
}
    3982:	08 95       	ret

00003984 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    3984:	bf 92       	push	r11
    3986:	cf 92       	push	r12
    3988:	df 92       	push	r13
    398a:	ef 92       	push	r14
    398c:	ff 92       	push	r15
    398e:	0f 93       	push	r16
    3990:	1f 93       	push	r17
    3992:	cf 93       	push	r28
    3994:	df 93       	push	r29
    3996:	7c 01       	movw	r14, r24
    3998:	6b 01       	movw	r12, r22
    399a:	8a 01       	movw	r16, r20
    399c:	e9 01       	movw	r28, r18
	if (left > right) {
    399e:	24 17       	cp	r18, r20
    39a0:	35 07       	cpc	r19, r21
    39a2:	20 f4       	brcc	.+8      	; 0x39ac <_ZNK6String9substringEjj+0x28>
    39a4:	81 2f       	mov	r24, r17
		unsigned int temp = right;
		right = left;
		left = temp;
    39a6:	89 01       	movw	r16, r18

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
		unsigned int temp = right;
		right = left;
    39a8:	c4 2f       	mov	r28, r20
    39aa:	d8 2f       	mov	r29, r24
		left = temp;
	}
	String out;
    39ac:	c7 01       	movw	r24, r14
    39ae:	65 eb       	ldi	r22, 0xB5	; 181
    39b0:	71 e0       	ldi	r23, 0x01	; 1
    39b2:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZN6StringC1EPKc>
	if (left > len) return out;
    39b6:	d6 01       	movw	r26, r12
    39b8:	14 96       	adiw	r26, 0x04	; 4
    39ba:	8d 91       	ld	r24, X+
    39bc:	9c 91       	ld	r25, X
    39be:	15 97       	sbiw	r26, 0x05	; 5
    39c0:	80 17       	cp	r24, r16
    39c2:	91 07       	cpc	r25, r17
    39c4:	c8 f0       	brcs	.+50     	; 0x39f8 <_ZNK6String9substringEjj+0x74>
    39c6:	8c 17       	cp	r24, r28
    39c8:	9d 07       	cpc	r25, r29
    39ca:	08 f4       	brcc	.+2      	; 0x39ce <_ZNK6String9substringEjj+0x4a>
    39cc:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    39ce:	d6 01       	movw	r26, r12
    39d0:	ed 91       	ld	r30, X+
    39d2:	fc 91       	ld	r31, X
    39d4:	11 97       	sbiw	r26, 0x01	; 1
    39d6:	ec 0f       	add	r30, r28
    39d8:	fd 1f       	adc	r31, r29
    39da:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    39dc:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    39de:	6d 91       	ld	r22, X+
    39e0:	7c 91       	ld	r23, X
    39e2:	60 0f       	add	r22, r16
    39e4:	71 1f       	adc	r23, r17
    39e6:	c7 01       	movw	r24, r14
    39e8:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    39ec:	f6 01       	movw	r30, r12
    39ee:	80 81       	ld	r24, Z
    39f0:	91 81       	ldd	r25, Z+1	; 0x01
    39f2:	c8 0f       	add	r28, r24
    39f4:	d9 1f       	adc	r29, r25
    39f6:	b8 82       	st	Y, r11
	return out;
}
    39f8:	c7 01       	movw	r24, r14
    39fa:	df 91       	pop	r29
    39fc:	cf 91       	pop	r28
    39fe:	1f 91       	pop	r17
    3a00:	0f 91       	pop	r16
    3a02:	ff 90       	pop	r15
    3a04:	ef 90       	pop	r14
    3a06:	df 90       	pop	r13
    3a08:	cf 90       	pop	r12
    3a0a:	bf 90       	pop	r11
    3a0c:	08 95       	ret

00003a0e <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    3a0e:	cf 93       	push	r28
    3a10:	df 93       	push	r29
    3a12:	ec 01       	movw	r28, r24
	return substring(left, len);
    3a14:	fb 01       	movw	r30, r22
    3a16:	24 81       	ldd	r18, Z+4	; 0x04
    3a18:	35 81       	ldd	r19, Z+5	; 0x05
    3a1a:	0e 94 c2 1c 	call	0x3984	; 0x3984 <_ZNK6String9substringEjj>
}
    3a1e:	ce 01       	movw	r24, r28
    3a20:	df 91       	pop	r29
    3a22:	cf 91       	pop	r28
    3a24:	08 95       	ret

00003a26 <_ZN6String7replaceEcc>:
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    3a26:	dc 01       	movw	r26, r24
    3a28:	ed 91       	ld	r30, X+
    3a2a:	fc 91       	ld	r31, X
    3a2c:	11 97       	sbiw	r26, 0x01	; 1
    3a2e:	30 97       	sbiw	r30, 0x00	; 0
    3a30:	61 f0       	breq	.+24     	; 0x3a4a <_ZN6String7replaceEcc+0x24>
	for (char *p = buffer; *p; p++) {
    3a32:	80 81       	ld	r24, Z
    3a34:	88 23       	and	r24, r24
    3a36:	49 f0       	breq	.+18     	; 0x3a4a <_ZN6String7replaceEcc+0x24>

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
    3a38:	31 96       	adiw	r30, 0x01	; 1
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    3a3a:	86 17       	cp	r24, r22
    3a3c:	19 f4       	brne	.+6      	; 0x3a44 <_ZN6String7replaceEcc+0x1e>

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
    3a3e:	df 01       	movw	r26, r30
    3a40:	11 97       	sbiw	r26, 0x01	; 1
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    3a42:	4c 93       	st	X, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3a44:	81 91       	ld	r24, Z+
    3a46:	88 23       	and	r24, r24
    3a48:	c1 f7       	brne	.-16     	; 0x3a3a <_ZN6String7replaceEcc+0x14>
    3a4a:	08 95       	ret

00003a4c <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    3a4c:	4f 92       	push	r4
    3a4e:	5f 92       	push	r5
    3a50:	6f 92       	push	r6
    3a52:	7f 92       	push	r7
    3a54:	8f 92       	push	r8
    3a56:	9f 92       	push	r9
    3a58:	af 92       	push	r10
    3a5a:	bf 92       	push	r11
    3a5c:	cf 92       	push	r12
    3a5e:	df 92       	push	r13
    3a60:	ef 92       	push	r14
    3a62:	ff 92       	push	r15
    3a64:	0f 93       	push	r16
    3a66:	1f 93       	push	r17
    3a68:	cf 93       	push	r28
    3a6a:	df 93       	push	r29
    3a6c:	3c 01       	movw	r6, r24
    3a6e:	4b 01       	movw	r8, r22
    3a70:	7a 01       	movw	r14, r20
	if (len == 0 || find.len == 0) return;
    3a72:	fc 01       	movw	r30, r24
    3a74:	a4 80       	ldd	r10, Z+4	; 0x04
    3a76:	b5 80       	ldd	r11, Z+5	; 0x05
    3a78:	a1 14       	cp	r10, r1
    3a7a:	b1 04       	cpc	r11, r1
    3a7c:	09 f4       	brne	.+2      	; 0x3a80 <_ZN6String7replaceERKS_S1_+0x34>
    3a7e:	ca c0       	rjmp	.+404    	; 0x3c14 <_ZN6String7replaceERKS_S1_+0x1c8>
    3a80:	fb 01       	movw	r30, r22
    3a82:	c4 80       	ldd	r12, Z+4	; 0x04
    3a84:	d5 80       	ldd	r13, Z+5	; 0x05
    3a86:	c1 14       	cp	r12, r1
    3a88:	d1 04       	cpc	r13, r1
    3a8a:	09 f4       	brne	.+2      	; 0x3a8e <_ZN6String7replaceERKS_S1_+0x42>
    3a8c:	c3 c0       	rjmp	.+390    	; 0x3c14 <_ZN6String7replaceERKS_S1_+0x1c8>
	int diff = replace.len - find.len;
    3a8e:	fa 01       	movw	r30, r20
    3a90:	84 81       	ldd	r24, Z+4	; 0x04
    3a92:	95 81       	ldd	r25, Z+5	; 0x05
    3a94:	2c 01       	movw	r4, r24
    3a96:	4c 18       	sub	r4, r12
    3a98:	5d 08       	sbc	r5, r13
    3a9a:	c2 01       	movw	r24, r4
	char *readFrom = buffer;
    3a9c:	f3 01       	movw	r30, r6
    3a9e:	00 81       	ld	r16, Z
    3aa0:	11 81       	ldd	r17, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    3aa2:	41 14       	cp	r4, r1
    3aa4:	51 04       	cpc	r5, r1
    3aa6:	79 f0       	breq	.+30     	; 0x3ac6 <_ZN6String7replaceERKS_S1_+0x7a>
    3aa8:	18 c0       	rjmp	.+48     	; 0x3ada <_ZN6String7replaceERKS_S1_+0x8e>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    3aaa:	f7 01       	movw	r30, r14
    3aac:	60 81       	ld	r22, Z
    3aae:	71 81       	ldd	r23, Z+1	; 0x01
    3ab0:	44 81       	ldd	r20, Z+4	; 0x04
    3ab2:	55 81       	ldd	r21, Z+5	; 0x05
    3ab4:	8c 2f       	mov	r24, r28
    3ab6:	9d 2f       	mov	r25, r29
    3ab8:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <memcpy>
			readFrom = foundAt + replace.len;
    3abc:	f7 01       	movw	r30, r14
    3abe:	04 81       	ldd	r16, Z+4	; 0x04
    3ac0:	15 81       	ldd	r17, Z+5	; 0x05
    3ac2:	0c 0f       	add	r16, r28
    3ac4:	1d 1f       	adc	r17, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3ac6:	f4 01       	movw	r30, r8
    3ac8:	60 81       	ld	r22, Z
    3aca:	71 81       	ldd	r23, Z+1	; 0x01
    3acc:	c8 01       	movw	r24, r16
    3ace:	0e 94 48 37 	call	0x6e90	; 0x6e90 <strstr>
    3ad2:	ec 01       	movw	r28, r24
    3ad4:	00 97       	sbiw	r24, 0x00	; 0
    3ad6:	49 f7       	brne	.-46     	; 0x3aaa <_ZN6String7replaceERKS_S1_+0x5e>
    3ad8:	9d c0       	rjmp	.+314    	; 0x3c14 <_ZN6String7replaceERKS_S1_+0x1c8>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    3ada:	99 23       	and	r25, r25
    3adc:	64 f1       	brlt	.+88     	; 0x3b36 <_ZN6String7replaceERKS_S1_+0xea>
    3ade:	e5 01       	movw	r28, r10
    3ae0:	3e c0       	rjmp	.+124    	; 0x3b5e <_ZN6String7replaceERKS_S1_+0x112>
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    3ae2:	e6 01       	movw	r28, r12
    3ae4:	c0 1b       	sub	r28, r16
    3ae6:	d1 0b       	sbc	r29, r17
			memcpy(writeTo, readFrom, n);
    3ae8:	8a 2d       	mov	r24, r10
    3aea:	9b 2d       	mov	r25, r11
    3aec:	60 2f       	mov	r22, r16
    3aee:	71 2f       	mov	r23, r17
    3af0:	4c 2f       	mov	r20, r28
    3af2:	5d 2f       	mov	r21, r29
    3af4:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <memcpy>
			writeTo += n;
    3af8:	ca 0d       	add	r28, r10
    3afa:	db 1d       	adc	r29, r11
			memcpy(writeTo, replace.buffer, replace.len);
    3afc:	f7 01       	movw	r30, r14
    3afe:	60 81       	ld	r22, Z
    3b00:	71 81       	ldd	r23, Z+1	; 0x01
    3b02:	44 81       	ldd	r20, Z+4	; 0x04
    3b04:	55 81       	ldd	r21, Z+5	; 0x05
    3b06:	8c 2f       	mov	r24, r28
    3b08:	9d 2f       	mov	r25, r29
    3b0a:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <memcpy>
			writeTo += replace.len;
    3b0e:	f7 01       	movw	r30, r14
    3b10:	84 81       	ldd	r24, Z+4	; 0x04
    3b12:	95 81       	ldd	r25, Z+5	; 0x05
    3b14:	5e 01       	movw	r10, r28
    3b16:	a8 0e       	add	r10, r24
    3b18:	b9 1e       	adc	r11, r25
			readFrom = foundAt + find.len;
    3b1a:	f4 01       	movw	r30, r8
    3b1c:	84 81       	ldd	r24, Z+4	; 0x04
    3b1e:	95 81       	ldd	r25, Z+5	; 0x05
    3b20:	86 01       	movw	r16, r12
    3b22:	08 0f       	add	r16, r24
    3b24:	19 1f       	adc	r17, r25
			len += diff;
    3b26:	f3 01       	movw	r30, r6
    3b28:	84 81       	ldd	r24, Z+4	; 0x04
    3b2a:	95 81       	ldd	r25, Z+5	; 0x05
    3b2c:	84 0d       	add	r24, r4
    3b2e:	95 1d       	adc	r25, r5
    3b30:	95 83       	std	Z+5, r25	; 0x05
    3b32:	84 83       	std	Z+4, r24	; 0x04
    3b34:	01 c0       	rjmp	.+2      	; 0x3b38 <_ZN6String7replaceERKS_S1_+0xec>
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    3b36:	58 01       	movw	r10, r16
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3b38:	f4 01       	movw	r30, r8
    3b3a:	60 81       	ld	r22, Z
    3b3c:	71 81       	ldd	r23, Z+1	; 0x01
    3b3e:	c8 01       	movw	r24, r16
    3b40:	0e 94 48 37 	call	0x6e90	; 0x6e90 <strstr>
    3b44:	6c 01       	movw	r12, r24
    3b46:	00 97       	sbiw	r24, 0x00	; 0
    3b48:	61 f6       	brne	.-104    	; 0x3ae2 <_ZN6String7replaceERKS_S1_+0x96>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    3b4a:	c5 01       	movw	r24, r10
    3b4c:	b8 01       	movw	r22, r16
    3b4e:	0e 94 19 37 	call	0x6e32	; 0x6e32 <strcpy>
    3b52:	60 c0       	rjmp	.+192    	; 0x3c14 <_ZN6String7replaceERKS_S1_+0x1c8>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    3b54:	8c 01       	movw	r16, r24
    3b56:	0c 0d       	add	r16, r12
    3b58:	1d 1d       	adc	r17, r13
			size += diff;
    3b5a:	c4 0d       	add	r28, r4
    3b5c:	d5 1d       	adc	r29, r5
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3b5e:	f4 01       	movw	r30, r8
    3b60:	60 81       	ld	r22, Z
    3b62:	71 81       	ldd	r23, Z+1	; 0x01
    3b64:	c8 01       	movw	r24, r16
    3b66:	0e 94 48 37 	call	0x6e90	; 0x6e90 <strstr>
    3b6a:	00 97       	sbiw	r24, 0x00	; 0
    3b6c:	99 f7       	brne	.-26     	; 0x3b54 <_ZN6String7replaceERKS_S1_+0x108>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    3b6e:	ca 15       	cp	r28, r10
    3b70:	db 05       	cpc	r29, r11
    3b72:	09 f4       	brne	.+2      	; 0x3b76 <_ZN6String7replaceERKS_S1_+0x12a>
    3b74:	4f c0       	rjmp	.+158    	; 0x3c14 <_ZN6String7replaceERKS_S1_+0x1c8>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    3b76:	f3 01       	movw	r30, r6
    3b78:	82 81       	ldd	r24, Z+2	; 0x02
    3b7a:	93 81       	ldd	r25, Z+3	; 0x03
    3b7c:	8c 17       	cp	r24, r28
    3b7e:	9d 07       	cpc	r25, r29
    3b80:	08 f0       	brcs	.+2      	; 0x3b84 <_ZN6String7replaceERKS_S1_+0x138>
    3b82:	42 c0       	rjmp	.+132    	; 0x3c08 <_ZN6String7replaceERKS_S1_+0x1bc>
    3b84:	c3 01       	movw	r24, r6
    3b86:	be 01       	movw	r22, r28
    3b88:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <_ZN6String12changeBufferEj>
    3b8c:	88 23       	and	r24, r24
    3b8e:	09 f4       	brne	.+2      	; 0x3b92 <_ZN6String7replaceERKS_S1_+0x146>
    3b90:	41 c0       	rjmp	.+130    	; 0x3c14 <_ZN6String7replaceERKS_S1_+0x1c8>
    3b92:	3a c0       	rjmp	.+116    	; 0x3c08 <_ZN6String7replaceERKS_S1_+0x1bc>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    3b94:	55 23       	and	r21, r21
    3b96:	f4 f1       	brlt	.+124    	; 0x3c14 <_ZN6String7replaceERKS_S1_+0x1c8>
    3b98:	c3 01       	movw	r24, r6
    3b9a:	b4 01       	movw	r22, r8
    3b9c:	0e 94 55 1c 	call	0x38aa	; 0x38aa <_ZNK6String11lastIndexOfERKS_j>
    3ba0:	ec 01       	movw	r28, r24
    3ba2:	99 23       	and	r25, r25
    3ba4:	bc f1       	brlt	.+110    	; 0x3c14 <_ZN6String7replaceERKS_S1_+0x1c8>
			readFrom = buffer + index + find.len;
    3ba6:	f3 01       	movw	r30, r6
    3ba8:	60 81       	ld	r22, Z
    3baa:	71 81       	ldd	r23, Z+1	; 0x01
    3bac:	f4 01       	movw	r30, r8
    3bae:	84 81       	ldd	r24, Z+4	; 0x04
    3bb0:	95 81       	ldd	r25, Z+5	; 0x05
    3bb2:	8c 0f       	add	r24, r28
    3bb4:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    3bb6:	68 0f       	add	r22, r24
    3bb8:	79 1f       	adc	r23, r25
    3bba:	f3 01       	movw	r30, r6
    3bbc:	44 81       	ldd	r20, Z+4	; 0x04
    3bbe:	55 81       	ldd	r21, Z+5	; 0x05
    3bc0:	48 1b       	sub	r20, r24
    3bc2:	59 0b       	sbc	r21, r25
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	84 0d       	add	r24, r4
    3bc8:	95 1d       	adc	r25, r5
    3bca:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <memmove>
			len += diff;
    3bce:	f3 01       	movw	r30, r6
    3bd0:	84 81       	ldd	r24, Z+4	; 0x04
    3bd2:	95 81       	ldd	r25, Z+5	; 0x05
    3bd4:	84 0d       	add	r24, r4
    3bd6:	95 1d       	adc	r25, r5
    3bd8:	95 83       	std	Z+5, r25	; 0x05
    3bda:	84 83       	std	Z+4, r24	; 0x04
			buffer[len] = 0;
    3bdc:	20 81       	ld	r18, Z
    3bde:	31 81       	ldd	r19, Z+1	; 0x01
    3be0:	82 0f       	add	r24, r18
    3be2:	93 1f       	adc	r25, r19
    3be4:	fc 01       	movw	r30, r24
    3be6:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    3be8:	f3 01       	movw	r30, r6
    3bea:	80 81       	ld	r24, Z
    3bec:	91 81       	ldd	r25, Z+1	; 0x01
    3bee:	8c 0f       	add	r24, r28
    3bf0:	9d 1f       	adc	r25, r29
    3bf2:	f7 01       	movw	r30, r14
    3bf4:	60 81       	ld	r22, Z
    3bf6:	71 81       	ldd	r23, Z+1	; 0x01
    3bf8:	44 81       	ldd	r20, Z+4	; 0x04
    3bfa:	55 81       	ldd	r21, Z+5	; 0x05
    3bfc:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <memcpy>
			index--;
    3c00:	ae 01       	movw	r20, r28
    3c02:	41 50       	subi	r20, 0x01	; 1
    3c04:	50 40       	sbci	r21, 0x00	; 0
    3c06:	c6 cf       	rjmp	.-116    	; 0x3b94 <_ZN6String7replaceERKS_S1_+0x148>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    3c08:	f3 01       	movw	r30, r6
    3c0a:	44 81       	ldd	r20, Z+4	; 0x04
    3c0c:	55 81       	ldd	r21, Z+5	; 0x05
    3c0e:	41 50       	subi	r20, 0x01	; 1
    3c10:	50 40       	sbci	r21, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    3c12:	c0 cf       	rjmp	.-128    	; 0x3b94 <_ZN6String7replaceERKS_S1_+0x148>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    3c14:	df 91       	pop	r29
    3c16:	cf 91       	pop	r28
    3c18:	1f 91       	pop	r17
    3c1a:	0f 91       	pop	r16
    3c1c:	ff 90       	pop	r15
    3c1e:	ef 90       	pop	r14
    3c20:	df 90       	pop	r13
    3c22:	cf 90       	pop	r12
    3c24:	bf 90       	pop	r11
    3c26:	af 90       	pop	r10
    3c28:	9f 90       	pop	r9
    3c2a:	8f 90       	pop	r8
    3c2c:	7f 90       	pop	r7
    3c2e:	6f 90       	pop	r6
    3c30:	5f 90       	pop	r5
    3c32:	4f 90       	pop	r4
    3c34:	08 95       	ret

00003c36 <_ZN6String11toLowerCaseEv>:

void String::toLowerCase(void)
{
    3c36:	0f 93       	push	r16
    3c38:	1f 93       	push	r17
    3c3a:	cf 93       	push	r28
    3c3c:	df 93       	push	r29
	if (!buffer) return;
    3c3e:	fc 01       	movw	r30, r24
    3c40:	c0 81       	ld	r28, Z
    3c42:	d1 81       	ldd	r29, Z+1	; 0x01
    3c44:	20 97       	sbiw	r28, 0x00	; 0
    3c46:	79 f0       	breq	.+30     	; 0x3c66 <_ZN6String11toLowerCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
    3c48:	88 81       	ld	r24, Y
    3c4a:	88 23       	and	r24, r24
    3c4c:	61 f0       	breq	.+24     	; 0x3c66 <_ZN6String11toLowerCaseEv+0x30>
			index--;
		}
	}
}

void String::toLowerCase(void)
    3c4e:	8e 01       	movw	r16, r28
    3c50:	0f 5f       	subi	r16, 0xFF	; 255
    3c52:	1f 4f       	sbci	r17, 0xFF	; 255
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <tolower>
    3c5a:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3c5c:	f8 01       	movw	r30, r16
    3c5e:	81 91       	ld	r24, Z+
    3c60:	8f 01       	movw	r16, r30
    3c62:	88 23       	and	r24, r24
    3c64:	b9 f7       	brne	.-18     	; 0x3c54 <_ZN6String11toLowerCaseEv+0x1e>
		*p = tolower(*p);
	}
}
    3c66:	df 91       	pop	r29
    3c68:	cf 91       	pop	r28
    3c6a:	1f 91       	pop	r17
    3c6c:	0f 91       	pop	r16
    3c6e:	08 95       	ret

00003c70 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    3c70:	0f 93       	push	r16
    3c72:	1f 93       	push	r17
    3c74:	cf 93       	push	r28
    3c76:	df 93       	push	r29
	if (!buffer) return;
    3c78:	fc 01       	movw	r30, r24
    3c7a:	c0 81       	ld	r28, Z
    3c7c:	d1 81       	ldd	r29, Z+1	; 0x01
    3c7e:	20 97       	sbiw	r28, 0x00	; 0
    3c80:	79 f0       	breq	.+30     	; 0x3ca0 <_ZN6String11toUpperCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
    3c82:	88 81       	ld	r24, Y
    3c84:	88 23       	and	r24, r24
    3c86:	61 f0       	breq	.+24     	; 0x3ca0 <_ZN6String11toUpperCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    3c88:	8e 01       	movw	r16, r28
    3c8a:	0f 5f       	subi	r16, 0xFF	; 255
    3c8c:	1f 4f       	sbci	r17, 0xFF	; 255
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	0e 94 d5 36 	call	0x6daa	; 0x6daa <toupper>
    3c94:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3c96:	f8 01       	movw	r30, r16
    3c98:	81 91       	ld	r24, Z+
    3c9a:	8f 01       	movw	r16, r30
    3c9c:	88 23       	and	r24, r24
    3c9e:	b9 f7       	brne	.-18     	; 0x3c8e <_ZN6String11toUpperCaseEv+0x1e>
		*p = toupper(*p);
	}
}
    3ca0:	df 91       	pop	r29
    3ca2:	cf 91       	pop	r28
    3ca4:	1f 91       	pop	r17
    3ca6:	0f 91       	pop	r16
    3ca8:	08 95       	ret

00003caa <_ZN6String4trimEv>:

void String::trim(void)
{
    3caa:	af 92       	push	r10
    3cac:	bf 92       	push	r11
    3cae:	cf 92       	push	r12
    3cb0:	df 92       	push	r13
    3cb2:	ef 92       	push	r14
    3cb4:	ff 92       	push	r15
    3cb6:	0f 93       	push	r16
    3cb8:	1f 93       	push	r17
    3cba:	cf 93       	push	r28
    3cbc:	df 93       	push	r29
    3cbe:	7c 01       	movw	r14, r24
	if (!buffer || len == 0) return;
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cd 90       	ld	r12, X+
    3cc4:	dc 90       	ld	r13, X
    3cc6:	11 97       	sbiw	r26, 0x01	; 1
    3cc8:	c1 14       	cp	r12, r1
    3cca:	d1 04       	cpc	r13, r1
    3ccc:	f1 f1       	breq	.+124    	; 0x3d4a <_ZN6String4trimEv+0xa0>
    3cce:	14 96       	adiw	r26, 0x04	; 4
    3cd0:	ad 90       	ld	r10, X+
    3cd2:	bc 90       	ld	r11, X
    3cd4:	15 97       	sbiw	r26, 0x05	; 5
    3cd6:	a1 14       	cp	r10, r1
    3cd8:	b1 04       	cpc	r11, r1
    3cda:	b9 f1       	breq	.+110    	; 0x3d4a <_ZN6String4trimEv+0xa0>
    3cdc:	e6 01       	movw	r28, r12
    3cde:	8e 01       	movw	r16, r28
    3ce0:	21 96       	adiw	r28, 0x01	; 1
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    3ce2:	f8 01       	movw	r30, r16
    3ce4:	80 81       	ld	r24, Z
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <isspace>
    3cec:	00 97       	sbiw	r24, 0x00	; 0
    3cee:	b9 f7       	brne	.-18     	; 0x3cde <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    3cf0:	e5 01       	movw	r28, r10
    3cf2:	21 97       	sbiw	r28, 0x01	; 1
    3cf4:	cc 0d       	add	r28, r12
    3cf6:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    3cf8:	88 81       	ld	r24, Y
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <isspace>
    3d00:	00 97       	sbiw	r24, 0x00	; 0
    3d02:	c9 f0       	breq	.+50     	; 0x3d36 <_ZN6String4trimEv+0x8c>
    3d04:	c0 17       	cp	r28, r16
    3d06:	d1 07       	cpc	r29, r17
    3d08:	b0 f0       	brcs	.+44     	; 0x3d36 <_ZN6String4trimEv+0x8c>
    3d0a:	21 97       	sbiw	r28, 0x01	; 1
    3d0c:	f5 cf       	rjmp	.-22     	; 0x3cf8 <_ZN6String4trimEv+0x4e>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
    3d0e:	8c 2d       	mov	r24, r12
    3d10:	9d 2d       	mov	r25, r13
    3d12:	60 2f       	mov	r22, r16
    3d14:	71 2f       	mov	r23, r17
    3d16:	4c 2f       	mov	r20, r28
    3d18:	5d 2f       	mov	r21, r29
    3d1a:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <memcpy>
	buffer[len] = 0;
    3d1e:	d7 01       	movw	r26, r14
    3d20:	ed 91       	ld	r30, X+
    3d22:	fc 91       	ld	r31, X
    3d24:	11 97       	sbiw	r26, 0x01	; 1
    3d26:	14 96       	adiw	r26, 0x04	; 4
    3d28:	8d 91       	ld	r24, X+
    3d2a:	9c 91       	ld	r25, X
    3d2c:	15 97       	sbiw	r26, 0x05	; 5
    3d2e:	e8 0f       	add	r30, r24
    3d30:	f9 1f       	adc	r31, r25
    3d32:	10 82       	st	Z, r1
    3d34:	0a c0       	rjmp	.+20     	; 0x3d4a <_ZN6String4trimEv+0xa0>
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
    3d36:	21 96       	adiw	r28, 0x01	; 1
    3d38:	c0 1b       	sub	r28, r16
    3d3a:	d1 0b       	sbc	r29, r17
    3d3c:	f7 01       	movw	r30, r14
    3d3e:	d5 83       	std	Z+5, r29	; 0x05
    3d40:	c4 83       	std	Z+4, r28	; 0x04
	if (begin > buffer) memcpy(buffer, begin, len);
    3d42:	c0 16       	cp	r12, r16
    3d44:	d1 06       	cpc	r13, r17
    3d46:	58 f7       	brcc	.-42     	; 0x3d1e <_ZN6String4trimEv+0x74>
    3d48:	e2 cf       	rjmp	.-60     	; 0x3d0e <_ZN6String4trimEv+0x64>
	buffer[len] = 0;
}
    3d4a:	df 91       	pop	r29
    3d4c:	cf 91       	pop	r28
    3d4e:	1f 91       	pop	r17
    3d50:	0f 91       	pop	r16
    3d52:	ff 90       	pop	r15
    3d54:	ef 90       	pop	r14
    3d56:	df 90       	pop	r13
    3d58:	cf 90       	pop	r12
    3d5a:	bf 90       	pop	r11
    3d5c:	af 90       	pop	r10
    3d5e:	08 95       	ret

00003d60 <_ZNK6String5toIntEv>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
    3d60:	0f 93       	push	r16
    3d62:	1f 93       	push	r17
	if (buffer) return atol(buffer);
    3d64:	fc 01       	movw	r30, r24
    3d66:	80 81       	ld	r24, Z
    3d68:	91 81       	ldd	r25, Z+1	; 0x01
    3d6a:	00 97       	sbiw	r24, 0x00	; 0
    3d6c:	29 f0       	breq	.+10     	; 0x3d78 <_ZNK6String5toIntEv+0x18>
    3d6e:	0e 94 9e 36 	call	0x6d3c	; 0x6d3c <atol>
    3d72:	8b 01       	movw	r16, r22
    3d74:	9c 01       	movw	r18, r24
    3d76:	03 c0       	rjmp	.+6      	; 0x3d7e <_ZNK6String5toIntEv+0x1e>
	return 0;
    3d78:	00 e0       	ldi	r16, 0x00	; 0
    3d7a:	10 e0       	ldi	r17, 0x00	; 0
    3d7c:	98 01       	movw	r18, r16
}
    3d7e:	60 2f       	mov	r22, r16
    3d80:	71 2f       	mov	r23, r17
    3d82:	82 2f       	mov	r24, r18
    3d84:	93 2f       	mov	r25, r19
    3d86:	1f 91       	pop	r17
    3d88:	0f 91       	pop	r16
    3d8a:	08 95       	ret

00003d8c <_ZN9DhcpClass16reset_DHCP_leaseEv>:
    return request_DHCP_lease();
}

void DhcpClass::reset_DHCP_lease(){
    // zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
    memset(_dhcpLocalIp, 0, 20);
    3d8c:	0e 96       	adiw	r24, 0x0e	; 14
    3d8e:	e8 2f       	mov	r30, r24
    3d90:	f9 2f       	mov	r31, r25
    3d92:	84 e1       	ldi	r24, 0x14	; 20
    3d94:	df 01       	movw	r26, r30
    3d96:	1d 92       	st	X+, r1
    3d98:	8a 95       	dec	r24
    3d9a:	e9 f7       	brne	.-6      	; 0x3d96 <_ZN9DhcpClass16reset_DHCP_leaseEv+0xa>
}
    3d9c:	08 95       	ret

00003d9e <_ZN9DhcpClass12presend_DHCPEv>:
    return result;
}

void DhcpClass::presend_DHCP()
{
}
    3d9e:	08 95       	ret

00003da0 <_ZN9DhcpClass17parseDHCPResponseEmRm>:

    _dhcpUdpSocket.endPacket();
}

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
    3da0:	2f 92       	push	r2
    3da2:	3f 92       	push	r3
    3da4:	4f 92       	push	r4
    3da6:	5f 92       	push	r5
    3da8:	6f 92       	push	r6
    3daa:	7f 92       	push	r7
    3dac:	8f 92       	push	r8
    3dae:	9f 92       	push	r9
    3db0:	af 92       	push	r10
    3db2:	bf 92       	push	r11
    3db4:	cf 92       	push	r12
    3db6:	df 92       	push	r13
    3db8:	ef 92       	push	r14
    3dba:	ff 92       	push	r15
    3dbc:	0f 93       	push	r16
    3dbe:	1f 93       	push	r17
    3dc0:	cf 93       	push	r28
    3dc2:	df 93       	push	r29
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	e4 97       	sbiw	r28, 0x34	; 52
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	2c 01       	movw	r4, r24
    3dd6:	6a 01       	movw	r12, r20
    3dd8:	7b 01       	movw	r14, r22
    3dda:	19 01       	movw	r2, r18
    uint8_t type = 0;
    uint8_t opt_len = 0;
     
    unsigned long startTime = millis();
    3ddc:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    3de0:	4b 01       	movw	r8, r22
    3de2:	5c 01       	movw	r10, r24

    while(_dhcpUdpSocket.parsePacket() <= 0)
    3de4:	82 01       	movw	r16, r4
    3de6:	09 5b       	subi	r16, 0xB9	; 185
    3de8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dea:	14 c0       	rjmp	.+40     	; 0x3e14 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x74>
    {
        if((millis() - startTime) > responseTimeout)
    3dec:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    3df0:	dc 01       	movw	r26, r24
    3df2:	cb 01       	movw	r24, r22
    3df4:	88 19       	sub	r24, r8
    3df6:	99 09       	sbc	r25, r9
    3df8:	aa 09       	sbc	r26, r10
    3dfa:	bb 09       	sbc	r27, r11
    3dfc:	c8 16       	cp	r12, r24
    3dfe:	d9 06       	cpc	r13, r25
    3e00:	ea 06       	cpc	r14, r26
    3e02:	fb 06       	cpc	r15, r27
    3e04:	08 f4       	brcc	.+2      	; 0x3e08 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x68>
    3e06:	40 c2       	rjmp	.+1152   	; 0x4288 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4e8>
        {
            return 255;
        }
        delay(50);
    3e08:	62 e3       	ldi	r22, 0x32	; 50
    3e0a:	70 e0       	ldi	r23, 0x00	; 0
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <delay>
    uint8_t type = 0;
    uint8_t opt_len = 0;
     
    unsigned long startTime = millis();

    while(_dhcpUdpSocket.parsePacket() <= 0)
    3e14:	70 2e       	mov	r7, r16
    3e16:	61 2e       	mov	r6, r17
    3e18:	c8 01       	movw	r24, r16
    3e1a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN11EthernetUDP11parsePacketEv>
    3e1e:	18 16       	cp	r1, r24
    3e20:	19 06       	cpc	r1, r25
    3e22:	24 f7       	brge	.-56     	; 0x3dec <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c>
        }
        delay(50);
    }
    // start reading in the packet
    RIP_MSG_FIXED fixedMsg;
    _dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));
    3e24:	80 2f       	mov	r24, r16
    3e26:	91 2f       	mov	r25, r17
    3e28:	be 01       	movw	r22, r28
    3e2a:	69 5f       	subi	r22, 0xF9	; 249
    3e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e2e:	42 e2       	ldi	r20, 0x22	; 34
    3e30:	50 e0       	ldi	r21, 0x00	; 0
    3e32:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
  
    if(fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT)
    3e36:	8f 81       	ldd	r24, Y+7	; 0x07
    3e38:	82 30       	cpi	r24, 0x02	; 2
    3e3a:	09 f0       	breq	.+2      	; 0x3e3e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x9e>
    3e3c:	1d c2       	rjmp	.+1082   	; 0x4278 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4d8>
    3e3e:	f2 01       	movw	r30, r4
    3e40:	e9 5b       	subi	r30, 0xB9	; 185
    3e42:	ff 4f       	sbci	r31, 0xFF	; 255
    3e44:	85 89       	ldd	r24, Z+21	; 0x15
    3e46:	96 89       	ldd	r25, Z+22	; 0x16
    3e48:	83 34       	cpi	r24, 0x43	; 67
    3e4a:	91 05       	cpc	r25, r1
    3e4c:	09 f0       	breq	.+2      	; 0x3e50 <_ZN9DhcpClass17parseDHCPResponseEmRm+0xb0>
    3e4e:	16 c2       	rjmp	.+1068   	; 0x427c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4dc>
    {
        transactionId = ntohl(fixedMsg.xid);
    3e50:	0b 85       	ldd	r16, Y+11	; 0x0b
    3e52:	1c 85       	ldd	r17, Y+12	; 0x0c
    3e54:	2d 85       	ldd	r18, Y+13	; 0x0d
    3e56:	3e 85       	ldd	r19, Y+14	; 0x0e
    3e58:	43 2f       	mov	r20, r19
    3e5a:	55 27       	eor	r21, r21
    3e5c:	66 27       	eor	r22, r22
    3e5e:	77 27       	eor	r23, r23
    3e60:	b0 2f       	mov	r27, r16
    3e62:	aa 27       	eor	r26, r26
    3e64:	99 27       	eor	r25, r25
    3e66:	88 27       	eor	r24, r24
    3e68:	48 2b       	or	r20, r24
    3e6a:	59 2b       	or	r21, r25
    3e6c:	6a 2b       	or	r22, r26
    3e6e:	7b 2b       	or	r23, r27
    3e70:	b2 2f       	mov	r27, r18
    3e72:	a1 2f       	mov	r26, r17
    3e74:	90 2f       	mov	r25, r16
    3e76:	88 27       	eor	r24, r24
    3e78:	80 70       	andi	r24, 0x00	; 0
    3e7a:	90 70       	andi	r25, 0x00	; 0
    3e7c:	b0 70       	andi	r27, 0x00	; 0
    3e7e:	48 2b       	or	r20, r24
    3e80:	59 2b       	or	r21, r25
    3e82:	6a 2b       	or	r22, r26
    3e84:	7b 2b       	or	r23, r27
    3e86:	bb 27       	eor	r27, r27
    3e88:	a3 2f       	mov	r26, r19
    3e8a:	92 2f       	mov	r25, r18
    3e8c:	81 2f       	mov	r24, r17
    3e8e:	80 70       	andi	r24, 0x00	; 0
    3e90:	a0 70       	andi	r26, 0x00	; 0
    3e92:	b0 70       	andi	r27, 0x00	; 0
    3e94:	6a 01       	movw	r12, r20
    3e96:	7b 01       	movw	r14, r22
    3e98:	c8 2a       	or	r12, r24
    3e9a:	d9 2a       	or	r13, r25
    3e9c:	ea 2a       	or	r14, r26
    3e9e:	fb 2a       	or	r15, r27
    3ea0:	f1 01       	movw	r30, r2
    3ea2:	c0 82       	st	Z, r12
    3ea4:	d1 82       	std	Z+1, r13	; 0x01
    3ea6:	e2 82       	std	Z+2, r14	; 0x02
    3ea8:	f3 82       	std	Z+3, r15	; 0x03
        if(memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 || (transactionId < _dhcpInitialTransactionId) || (transactionId > _dhcpTransactionId))
    3eaa:	b2 01       	movw	r22, r4
    3eac:	68 5f       	subi	r22, 0xF8	; 248
    3eae:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb0:	ce 01       	movw	r24, r28
    3eb2:	83 96       	adiw	r24, 0x23	; 35
    3eb4:	46 e0       	ldi	r20, 0x06	; 6
    3eb6:	50 e0       	ldi	r21, 0x00	; 0
    3eb8:	0e 94 dd 36 	call	0x6dba	; 0x6dba <memcmp>
    3ebc:	28 2f       	mov	r18, r24
    3ebe:	39 2f       	mov	r19, r25
    3ec0:	21 15       	cp	r18, r1
    3ec2:	31 05       	cpc	r19, r1
    3ec4:	99 f4       	brne	.+38     	; 0x3eec <_ZN9DhcpClass17parseDHCPResponseEmRm+0x14c>
    3ec6:	f2 01       	movw	r30, r4
    3ec8:	80 81       	ld	r24, Z
    3eca:	91 81       	ldd	r25, Z+1	; 0x01
    3ecc:	a2 81       	ldd	r26, Z+2	; 0x02
    3ece:	b3 81       	ldd	r27, Z+3	; 0x03
    3ed0:	c8 16       	cp	r12, r24
    3ed2:	d9 06       	cpc	r13, r25
    3ed4:	ea 06       	cpc	r14, r26
    3ed6:	fb 06       	cpc	r15, r27
    3ed8:	48 f0       	brcs	.+18     	; 0x3eec <_ZN9DhcpClass17parseDHCPResponseEmRm+0x14c>
    3eda:	84 81       	ldd	r24, Z+4	; 0x04
    3edc:	95 81       	ldd	r25, Z+5	; 0x05
    3ede:	a6 81       	ldd	r26, Z+6	; 0x06
    3ee0:	b7 81       	ldd	r27, Z+7	; 0x07
    3ee2:	8c 15       	cp	r24, r12
    3ee4:	9d 05       	cpc	r25, r13
    3ee6:	ae 05       	cpc	r26, r14
    3ee8:	bf 05       	cpc	r27, r15
    3eea:	30 f4       	brcc	.+12     	; 0x3ef8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x158>
        {
            // Need to read the rest of the packet here regardless
            _dhcpUdpSocket.flush();
    3eec:	87 2d       	mov	r24, r7
    3eee:	96 2d       	mov	r25, r6
    3ef0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11EthernetUDP5flushEv>
            return 0;
    3ef4:	88 24       	eor	r8, r8
    3ef6:	ca c1       	rjmp	.+916    	; 0x428c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ec>
        }

        memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);
    3ef8:	8f 89       	ldd	r24, Y+23	; 0x17
    3efa:	98 8d       	ldd	r25, Y+24	; 0x18
    3efc:	a9 8d       	ldd	r26, Y+25	; 0x19
    3efe:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3f00:	f2 01       	movw	r30, r4
    3f02:	86 87       	std	Z+14, r24	; 0x0e
    3f04:	97 87       	std	Z+15, r25	; 0x0f
    3f06:	a0 8b       	std	Z+16, r26	; 0x10
    3f08:	b1 8b       	std	Z+17, r27	; 0x11
    3f0a:	0e ec       	ldi	r16, 0xCE	; 206
    3f0c:	10 e0       	ldi	r17, 0x00	; 0
        // Skip to the option part
        // Doing this a byte at a time so we don't have to put a big buffer
        // on the stack (as we don't have lots of memory lying around)
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
        {
            _dhcpUdpSocket.read(); // we don't care about the returned byte
    3f0e:	87 2d       	mov	r24, r7
    3f10:	96 2d       	mov	r25, r6
    3f12:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
    3f16:	01 50       	subi	r16, 0x01	; 1
    3f18:	10 40       	sbci	r17, 0x00	; 0
        memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);

        // Skip to the option part
        // Doing this a byte at a time so we don't have to put a big buffer
        // on the stack (as we don't have lots of memory lying around)
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
    3f1a:	c9 f7       	brne	.-14     	; 0x3f0e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16e>
    3f1c:	88 24       	eor	r8, r8
                    _dhcpT2 = ntohl(_dhcpT2);
                    break;

                case dhcpIPaddrLeaseTime :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
    3f1e:	0f 2e       	mov	r0, r31
    3f20:	f2 e2       	ldi	r31, 0x22	; 34
    3f22:	ef 2e       	mov	r14, r31
    3f24:	ff 24       	eor	r15, r15
    3f26:	f0 2d       	mov	r31, r0
    3f28:	e4 0c       	add	r14, r4
    3f2a:	f5 1c       	adc	r15, r5
                    }
                    break;

                case dhcpT1value : 
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
    3f2c:	0f 2e       	mov	r0, r31
    3f2e:	f6 e2       	ldi	r31, 0x26	; 38
    3f30:	af 2e       	mov	r10, r31
    3f32:	bb 24       	eor	r11, r11
    3f34:	f0 2d       	mov	r31, r0
    3f36:	a4 0c       	add	r10, r4
    3f38:	b5 1c       	adc	r11, r5
                    _dhcpT1 = ntohl(_dhcpT1);
                    break;

                case dhcpT2value : 
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
    3f3a:	c2 01       	movw	r24, r4
    3f3c:	8a 96       	adiw	r24, 0x2a	; 42
    3f3e:	9a a7       	lds	r25, 0x7a
    3f40:	89 a7       	lds	r24, 0x79
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
                    {
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
    3f42:	f2 01       	movw	r30, r4
    3f44:	7a 96       	adiw	r30, 0x1a	; 26
    3f46:	fa ab       	sts	0x5a, r31
    3f48:	e9 ab       	sts	0x59, r30

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    3f4a:	c2 01       	movw	r24, r4
    3f4c:	88 5a       	subi	r24, 0xA8	; 168
    3f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f50:	9c ab       	sts	0x5c, r25
    3f52:	8b ab       	sts	0x5b, r24
                    type = _dhcpUdpSocket.read();
                    break;
                
                case subnetMask :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpSubnetMask, 4);
    3f54:	f2 01       	movw	r30, r4
    3f56:	72 96       	adiw	r30, 0x12	; 18
    3f58:	fc a7       	lds	r31, 0x7c
    3f5a:	eb a7       	lds	r30, 0x7b
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
    3f5c:	c2 01       	movw	r24, r4
    3f5e:	46 96       	adiw	r24, 0x16	; 22
    3f60:	9e a7       	lds	r25, 0x7e
    3f62:	8d a7       	lds	r24, 0x7d
                    for (int i = 0; i < opt_len-4; i++)
    3f64:	22 24       	eor	r2, r2
    3f66:	33 24       	eor	r3, r3
                    }
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
    3f68:	f2 01       	movw	r30, r4
    3f6a:	7e 96       	adiw	r30, 0x1e	; 30
    3f6c:	f8 ab       	sts	0x58, r31
    3f6e:	ef a7       	lds	r30, 0x7f
    3f70:	67 01       	movw	r12, r14
    3f72:	79 c1       	rjmp	.+754    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
            _dhcpUdpSocket.read(); // we don't care about the returned byte
        }

        while (_dhcpUdpSocket.available() > 0) 
        {
            switch (_dhcpUdpSocket.read()) 
    3f74:	87 2d       	mov	r24, r7
    3f76:	96 2d       	mov	r25, r6
    3f78:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
    3f7c:	83 33       	cpi	r24, 0x33	; 51
    3f7e:	91 05       	cpc	r25, r1
    3f80:	09 f4       	brne	.+2      	; 0x3f84 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1e4>
    3f82:	29 c1       	rjmp	.+594    	; 0x41d6 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x436>
    3f84:	84 33       	cpi	r24, 0x34	; 52
    3f86:	91 05       	cpc	r25, r1
    3f88:	94 f4       	brge	.+36     	; 0x3fae <_ZN9DhcpClass17parseDHCPResponseEmRm+0x20e>
    3f8a:	81 30       	cpi	r24, 0x01	; 1
    3f8c:	91 05       	cpc	r25, r1
    3f8e:	89 f1       	breq	.+98     	; 0x3ff2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x252>
    3f90:	82 30       	cpi	r24, 0x02	; 2
    3f92:	91 05       	cpc	r25, r1
    3f94:	24 f4       	brge	.+8      	; 0x3f9e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1fe>
    3f96:	00 97       	sbiw	r24, 0x00	; 0
    3f98:	09 f4       	brne	.+2      	; 0x3f9c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1fc>
    3f9a:	65 c1       	rjmp	.+714    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
    3f9c:	57 c1       	rjmp	.+686    	; 0x424c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    3f9e:	83 30       	cpi	r24, 0x03	; 3
    3fa0:	91 05       	cpc	r25, r1
    3fa2:	a1 f1       	breq	.+104    	; 0x400c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x26c>
    3fa4:	86 30       	cpi	r24, 0x06	; 6
    3fa6:	91 05       	cpc	r25, r1
    3fa8:	09 f0       	breq	.+2      	; 0x3fac <_ZN9DhcpClass17parseDHCPResponseEmRm+0x20c>
    3faa:	50 c1       	rjmp	.+672    	; 0x424c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    3fac:	4f c0       	rjmp	.+158    	; 0x404c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2ac>
    3fae:	8a 33       	cpi	r24, 0x3A	; 58
    3fb0:	91 05       	cpc	r25, r1
    3fb2:	09 f4       	brne	.+2      	; 0x3fb6 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x216>
    3fb4:	a1 c0       	rjmp	.+322    	; 0x40f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x358>
    3fb6:	8b 33       	cpi	r24, 0x3B	; 59
    3fb8:	91 05       	cpc	r25, r1
    3fba:	44 f4       	brge	.+16     	; 0x3fcc <_ZN9DhcpClass17parseDHCPResponseEmRm+0x22c>
    3fbc:	85 33       	cpi	r24, 0x35	; 53
    3fbe:	91 05       	cpc	r25, r1
    3fc0:	71 f0       	breq	.+28     	; 0x3fde <_ZN9DhcpClass17parseDHCPResponseEmRm+0x23e>
    3fc2:	86 33       	cpi	r24, 0x36	; 54
    3fc4:	91 05       	cpc	r25, r1
    3fc6:	09 f0       	breq	.+2      	; 0x3fca <_ZN9DhcpClass17parseDHCPResponseEmRm+0x22a>
    3fc8:	41 c1       	rjmp	.+642    	; 0x424c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    3fca:	60 c0       	rjmp	.+192    	; 0x408c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2ec>
    3fcc:	8b 33       	cpi	r24, 0x3B	; 59
    3fce:	91 05       	cpc	r25, r1
    3fd0:	09 f4       	brne	.+2      	; 0x3fd4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x234>
    3fd2:	c9 c0       	rjmp	.+402    	; 0x4166 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x3c6>
    3fd4:	8f 3f       	cpi	r24, 0xFF	; 255
    3fd6:	91 05       	cpc	r25, r1
    3fd8:	09 f0       	breq	.+2      	; 0x3fdc <_ZN9DhcpClass17parseDHCPResponseEmRm+0x23c>
    3fda:	38 c1       	rjmp	.+624    	; 0x424c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    3fdc:	44 c1       	rjmp	.+648    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                    
                case padOption :
                    break;
                
                case dhcpMessageType :
                    opt_len = _dhcpUdpSocket.read();
    3fde:	87 2d       	mov	r24, r7
    3fe0:	96 2d       	mov	r25, r6
    3fe2:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
                    type = _dhcpUdpSocket.read();
    3fe6:	87 2d       	mov	r24, r7
    3fe8:	96 2d       	mov	r25, r6
    3fea:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
    3fee:	88 2e       	mov	r8, r24
                    break;
    3ff0:	3a c1       	rjmp	.+628    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                
                case subnetMask :
                    opt_len = _dhcpUdpSocket.read();
    3ff2:	87 2d       	mov	r24, r7
    3ff4:	96 2d       	mov	r25, r6
    3ff6:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read(_dhcpSubnetMask, 4);
    3ffa:	87 2d       	mov	r24, r7
    3ffc:	96 2d       	mov	r25, r6
    3ffe:	6b a5       	lds	r22, 0x6b
    4000:	7c a5       	lds	r23, 0x6c
    4002:	44 e0       	ldi	r20, 0x04	; 4
    4004:	50 e0       	ldi	r21, 0x00	; 0
    4006:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
                    break;
    400a:	2d c1       	rjmp	.+602    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
    400c:	87 2d       	mov	r24, r7
    400e:	96 2d       	mov	r25, r6
    4010:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
    4014:	08 2f       	mov	r16, r24
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
    4016:	87 2d       	mov	r24, r7
    4018:	96 2d       	mov	r25, r6
    401a:	6d a5       	lds	r22, 0x6d
    401c:	7e a5       	lds	r23, 0x6e
    401e:	44 e0       	ldi	r20, 0x04	; 4
    4020:	50 e0       	ldi	r21, 0x00	; 0
    4022:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
                    for (int i = 0; i < opt_len-4; i++)
    4026:	10 e0       	ldi	r17, 0x00	; 0
    4028:	04 50       	subi	r16, 0x04	; 4
    402a:	10 40       	sbci	r17, 0x00	; 0
    402c:	10 16       	cp	r1, r16
    402e:	11 06       	cpc	r1, r17
    4030:	0c f0       	brlt	.+2      	; 0x4034 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x294>
    4032:	19 c1       	rjmp	.+562    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
    4034:	71 01       	movw	r14, r2
                    {
                        _dhcpUdpSocket.read();
    4036:	87 2d       	mov	r24, r7
    4038:	96 2d       	mov	r25, r6
    403a:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
                    for (int i = 0; i < opt_len-4; i++)
    403e:	08 94       	sec
    4040:	e1 1c       	adc	r14, r1
    4042:	f1 1c       	adc	r15, r1
    4044:	e0 16       	cp	r14, r16
    4046:	f1 06       	cpc	r15, r17
    4048:	b4 f3       	brlt	.-20     	; 0x4036 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x296>
    404a:	0d c1       	rjmp	.+538    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        _dhcpUdpSocket.read();
                    }
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
    404c:	87 2d       	mov	r24, r7
    404e:	96 2d       	mov	r25, r6
    4050:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
    4054:	08 2f       	mov	r16, r24
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
    4056:	87 2d       	mov	r24, r7
    4058:	96 2d       	mov	r25, r6
    405a:	6f a5       	lds	r22, 0x6f
    405c:	78 a9       	sts	0x48, r23
    405e:	44 e0       	ldi	r20, 0x04	; 4
    4060:	50 e0       	ldi	r21, 0x00	; 0
    4062:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
                    for (int i = 0; i < opt_len-4; i++)
    4066:	10 e0       	ldi	r17, 0x00	; 0
    4068:	04 50       	subi	r16, 0x04	; 4
    406a:	10 40       	sbci	r17, 0x00	; 0
    406c:	10 16       	cp	r1, r16
    406e:	11 06       	cpc	r1, r17
    4070:	0c f0       	brlt	.+2      	; 0x4074 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2d4>
    4072:	f9 c0       	rjmp	.+498    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
    4074:	71 01       	movw	r14, r2
                    {
                        _dhcpUdpSocket.read();
    4076:	87 2d       	mov	r24, r7
    4078:	96 2d       	mov	r25, r6
    407a:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
                    for (int i = 0; i < opt_len-4; i++)
    407e:	08 94       	sec
    4080:	e1 1c       	adc	r14, r1
    4082:	f1 1c       	adc	r15, r1
    4084:	e0 16       	cp	r14, r16
    4086:	f1 06       	cpc	r15, r17
    4088:	b4 f3       	brlt	.-20     	; 0x4076 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2d6>
    408a:	ed c0       	rjmp	.+474    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        _dhcpUdpSocket.read();
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
    408c:	87 2d       	mov	r24, r7
    408e:	96 2d       	mov	r25, r6
    4090:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
    4094:	18 2f       	mov	r17, r24
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
    4096:	f2 01       	movw	r30, r4
    4098:	82 8d       	ldd	r24, Z+26	; 0x1a
    409a:	93 8d       	ldd	r25, Z+27	; 0x1b
    409c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    409e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    40a0:	00 97       	sbiw	r24, 0x00	; 0
    40a2:	a1 05       	cpc	r26, r1
    40a4:	b1 05       	cpc	r27, r1
    40a6:	a9 f0       	breq	.+42     	; 0x40d2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x332>
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
    40a8:	ce 01       	movw	r24, r28
    40aa:	01 96       	adiw	r24, 0x01	; 1
    40ac:	69 a9       	sts	0x49, r22
    40ae:	7a a9       	sts	0x4a, r23
    40b0:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN9IPAddressC1EPKh>
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
    40b4:	8b 81       	ldd	r24, Y+3	; 0x03
    40b6:	9c 81       	ldd	r25, Y+4	; 0x04
    40b8:	ad 81       	ldd	r26, Y+5	; 0x05
    40ba:	be 81       	ldd	r27, Y+6	; 0x06
    40bc:	eb a9       	sts	0x4b, r30
    40be:	fc a9       	sts	0x4c, r31
    40c0:	40 81       	ld	r20, Z
    40c2:	51 81       	ldd	r21, Z+1	; 0x01
    40c4:	62 81       	ldd	r22, Z+2	; 0x02
    40c6:	73 81       	ldd	r23, Z+3	; 0x03
    40c8:	84 17       	cp	r24, r20
    40ca:	95 07       	cpc	r25, r21
    40cc:	a6 07       	cpc	r26, r22
    40ce:	b7 07       	cpc	r27, r23
    40d0:	49 f4       	brne	.+18     	; 0x40e4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x344>
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
                    {
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
    40d2:	87 2d       	mov	r24, r7
    40d4:	96 2d       	mov	r25, r6
    40d6:	69 a9       	sts	0x49, r22
    40d8:	7a a9       	sts	0x4a, r23
    40da:	44 e0       	ldi	r20, 0x04	; 4
    40dc:	50 e0       	ldi	r21, 0x00	; 0
    40de:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
    40e2:	c1 c0       	rjmp	.+386    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                    }
                    else
                    {
                        // Skip over the rest of this option
                        while (opt_len--)
    40e4:	11 23       	and	r17, r17
    40e6:	09 f4       	brne	.+2      	; 0x40ea <_ZN9DhcpClass17parseDHCPResponseEmRm+0x34a>
    40e8:	be c0       	rjmp	.+380    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        {
                            _dhcpUdpSocket.read();
    40ea:	87 2d       	mov	r24, r7
    40ec:	96 2d       	mov	r25, r6
    40ee:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
    40f2:	11 50       	subi	r17, 0x01	; 1
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
                    }
                    else
                    {
                        // Skip over the rest of this option
                        while (opt_len--)
    40f4:	d1 f7       	brne	.-12     	; 0x40ea <_ZN9DhcpClass17parseDHCPResponseEmRm+0x34a>
    40f6:	b7 c0       	rjmp	.+366    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        }
                    }
                    break;

                case dhcpT1value : 
                    opt_len = _dhcpUdpSocket.read();
    40f8:	87 2d       	mov	r24, r7
    40fa:	96 2d       	mov	r25, r6
    40fc:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
    4100:	87 2d       	mov	r24, r7
    4102:	96 2d       	mov	r25, r6
    4104:	b5 01       	movw	r22, r10
    4106:	44 e0       	ldi	r20, 0x04	; 4
    4108:	50 e0       	ldi	r21, 0x00	; 0
    410a:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
                    _dhcpT1 = ntohl(_dhcpT1);
    410e:	f2 01       	movw	r30, r4
    4110:	06 a1       	lds	r16, 0x46
    4112:	17 a1       	lds	r17, 0x47
    4114:	20 a5       	lds	r18, 0x60
    4116:	31 a5       	lds	r19, 0x61
    4118:	83 2f       	mov	r24, r19
    411a:	99 27       	eor	r25, r25
    411c:	aa 27       	eor	r26, r26
    411e:	bb 27       	eor	r27, r27
    4120:	70 2f       	mov	r23, r16
    4122:	66 27       	eor	r22, r22
    4124:	55 27       	eor	r21, r21
    4126:	44 27       	eor	r20, r20
    4128:	48 2b       	or	r20, r24
    412a:	59 2b       	or	r21, r25
    412c:	6a 2b       	or	r22, r26
    412e:	7b 2b       	or	r23, r27
    4130:	b2 2f       	mov	r27, r18
    4132:	a1 2f       	mov	r26, r17
    4134:	90 2f       	mov	r25, r16
    4136:	88 27       	eor	r24, r24
    4138:	80 70       	andi	r24, 0x00	; 0
    413a:	90 70       	andi	r25, 0x00	; 0
    413c:	b0 70       	andi	r27, 0x00	; 0
    413e:	48 2b       	or	r20, r24
    4140:	59 2b       	or	r21, r25
    4142:	6a 2b       	or	r22, r26
    4144:	7b 2b       	or	r23, r27
    4146:	bb 27       	eor	r27, r27
    4148:	a3 2f       	mov	r26, r19
    414a:	92 2f       	mov	r25, r18
    414c:	81 2f       	mov	r24, r17
    414e:	80 70       	andi	r24, 0x00	; 0
    4150:	a0 70       	andi	r26, 0x00	; 0
    4152:	b0 70       	andi	r27, 0x00	; 0
    4154:	84 2b       	or	r24, r20
    4156:	95 2b       	or	r25, r21
    4158:	a6 2b       	or	r26, r22
    415a:	b7 2b       	or	r27, r23
    415c:	86 a3       	lds	r24, 0x56
    415e:	97 a3       	lds	r25, 0x57
    4160:	a0 a7       	lds	r26, 0x70
    4162:	b1 a7       	lds	r27, 0x71
                    break;
    4164:	80 c0       	rjmp	.+256    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>

                case dhcpT2value : 
                    opt_len = _dhcpUdpSocket.read();
    4166:	87 2d       	mov	r24, r7
    4168:	96 2d       	mov	r25, r6
    416a:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
    416e:	87 2d       	mov	r24, r7
    4170:	96 2d       	mov	r25, r6
    4172:	69 a5       	lds	r22, 0x69
    4174:	7a a5       	lds	r23, 0x6a
    4176:	44 e0       	ldi	r20, 0x04	; 4
    4178:	50 e0       	ldi	r21, 0x00	; 0
    417a:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
                    _dhcpT2 = ntohl(_dhcpT2);
    417e:	f2 01       	movw	r30, r4
    4180:	02 a5       	lds	r16, 0x62
    4182:	13 a5       	lds	r17, 0x63
    4184:	24 a5       	lds	r18, 0x64
    4186:	35 a5       	lds	r19, 0x65
    4188:	83 2f       	mov	r24, r19
    418a:	99 27       	eor	r25, r25
    418c:	aa 27       	eor	r26, r26
    418e:	bb 27       	eor	r27, r27
    4190:	70 2f       	mov	r23, r16
    4192:	66 27       	eor	r22, r22
    4194:	55 27       	eor	r21, r21
    4196:	44 27       	eor	r20, r20
    4198:	48 2b       	or	r20, r24
    419a:	59 2b       	or	r21, r25
    419c:	6a 2b       	or	r22, r26
    419e:	7b 2b       	or	r23, r27
    41a0:	b2 2f       	mov	r27, r18
    41a2:	a1 2f       	mov	r26, r17
    41a4:	90 2f       	mov	r25, r16
    41a6:	88 27       	eor	r24, r24
    41a8:	80 70       	andi	r24, 0x00	; 0
    41aa:	90 70       	andi	r25, 0x00	; 0
    41ac:	b0 70       	andi	r27, 0x00	; 0
    41ae:	48 2b       	or	r20, r24
    41b0:	59 2b       	or	r21, r25
    41b2:	6a 2b       	or	r22, r26
    41b4:	7b 2b       	or	r23, r27
    41b6:	bb 27       	eor	r27, r27
    41b8:	a3 2f       	mov	r26, r19
    41ba:	92 2f       	mov	r25, r18
    41bc:	81 2f       	mov	r24, r17
    41be:	80 70       	andi	r24, 0x00	; 0
    41c0:	a0 70       	andi	r26, 0x00	; 0
    41c2:	b0 70       	andi	r27, 0x00	; 0
    41c4:	84 2b       	or	r24, r20
    41c6:	95 2b       	or	r25, r21
    41c8:	a6 2b       	or	r26, r22
    41ca:	b7 2b       	or	r27, r23
    41cc:	82 a7       	lds	r24, 0x72
    41ce:	93 a7       	lds	r25, 0x73
    41d0:	a4 a7       	lds	r26, 0x74
    41d2:	b5 a7       	lds	r27, 0x75
                    break;
    41d4:	48 c0       	rjmp	.+144    	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>

                case dhcpIPaddrLeaseTime :
                    opt_len = _dhcpUdpSocket.read();
    41d6:	87 2d       	mov	r24, r7
    41d8:	96 2d       	mov	r25, r6
    41da:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
    41de:	87 2d       	mov	r24, r7
    41e0:	96 2d       	mov	r25, r6
    41e2:	b6 01       	movw	r22, r12
    41e4:	44 e0       	ldi	r20, 0x04	; 4
    41e6:	50 e0       	ldi	r21, 0x00	; 0
    41e8:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
                    _dhcpLeaseTime = ntohl(_dhcpLeaseTime);
    41ec:	f2 01       	movw	r30, r4
    41ee:	02 a1       	lds	r16, 0x42
    41f0:	13 a1       	lds	r17, 0x43
    41f2:	24 a1       	lds	r18, 0x44
    41f4:	35 a1       	lds	r19, 0x45
    41f6:	83 2f       	mov	r24, r19
    41f8:	99 27       	eor	r25, r25
    41fa:	aa 27       	eor	r26, r26
    41fc:	bb 27       	eor	r27, r27
    41fe:	70 2f       	mov	r23, r16
    4200:	66 27       	eor	r22, r22
    4202:	55 27       	eor	r21, r21
    4204:	44 27       	eor	r20, r20
    4206:	48 2b       	or	r20, r24
    4208:	59 2b       	or	r21, r25
    420a:	6a 2b       	or	r22, r26
    420c:	7b 2b       	or	r23, r27
    420e:	b2 2f       	mov	r27, r18
    4210:	a1 2f       	mov	r26, r17
    4212:	90 2f       	mov	r25, r16
    4214:	88 27       	eor	r24, r24
    4216:	80 70       	andi	r24, 0x00	; 0
    4218:	90 70       	andi	r25, 0x00	; 0
    421a:	b0 70       	andi	r27, 0x00	; 0
    421c:	48 2b       	or	r20, r24
    421e:	59 2b       	or	r21, r25
    4220:	6a 2b       	or	r22, r26
    4222:	7b 2b       	or	r23, r27
    4224:	bb 27       	eor	r27, r27
    4226:	a3 2f       	mov	r26, r19
    4228:	92 2f       	mov	r25, r18
    422a:	81 2f       	mov	r24, r17
    422c:	80 70       	andi	r24, 0x00	; 0
    422e:	a0 70       	andi	r26, 0x00	; 0
    4230:	b0 70       	andi	r27, 0x00	; 0
    4232:	84 2b       	or	r24, r20
    4234:	95 2b       	or	r25, r21
    4236:	a6 2b       	or	r26, r22
    4238:	b7 2b       	or	r27, r23
    423a:	82 a3       	lds	r24, 0x52
    423c:	93 a3       	lds	r25, 0x53
    423e:	a4 a3       	lds	r26, 0x54
    4240:	b5 a3       	lds	r27, 0x55
                    _renewInSec = _dhcpLeaseTime;
    4242:	86 a7       	lds	r24, 0x76
    4244:	97 a7       	lds	r25, 0x77
    4246:	a0 ab       	sts	0x50, r26
    4248:	b1 ab       	sts	0x51, r27
                    break;
    424a:	0d c0       	rjmp	.+26     	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>

                default :
                    opt_len = _dhcpUdpSocket.read();
    424c:	87 2d       	mov	r24, r7
    424e:	96 2d       	mov	r25, r6
    4250:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
    4254:	18 2f       	mov	r17, r24
                    // Skip over the rest of this option
                    while (opt_len--)
    4256:	88 23       	and	r24, r24
    4258:	31 f0       	breq	.+12     	; 0x4266 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                    {
                        _dhcpUdpSocket.read();
    425a:	87 2d       	mov	r24, r7
    425c:	96 2d       	mov	r25, r6
    425e:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
    4262:	11 50       	subi	r17, 0x01	; 1
                    break;

                default :
                    opt_len = _dhcpUdpSocket.read();
                    // Skip over the rest of this option
                    while (opt_len--)
    4264:	d1 f7       	brne	.-12     	; 0x425a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ba>
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
        {
            _dhcpUdpSocket.read(); // we don't care about the returned byte
        }

        while (_dhcpUdpSocket.available() > 0) 
    4266:	87 2d       	mov	r24, r7
    4268:	96 2d       	mov	r25, r6
    426a:	0e 94 c3 04 	call	0x986	; 0x986 <_ZN11EthernetUDP9availableEv>
    426e:	18 16       	cp	r1, r24
    4270:	19 06       	cpc	r1, r25
    4272:	0c f4       	brge	.+2      	; 0x4276 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4d6>
    4274:	7f ce       	rjmp	.-770    	; 0x3f74 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1d4>
    4276:	03 c0       	rjmp	.+6      	; 0x427e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4de>
    _dhcpUdpSocket.endPacket();
}

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
    uint8_t type = 0;
    4278:	88 24       	eor	r8, r8
    427a:	01 c0       	rjmp	.+2      	; 0x427e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4de>
    427c:	88 24       	eor	r8, r8
            }
        }
    }

    // Need to skip to end of the packet regardless here
    _dhcpUdpSocket.flush();
    427e:	87 2d       	mov	r24, r7
    4280:	96 2d       	mov	r25, r6
    4282:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11EthernetUDP5flushEv>

    return type;
    4286:	02 c0       	rjmp	.+4      	; 0x428c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ec>

    while(_dhcpUdpSocket.parsePacket() <= 0)
    {
        if((millis() - startTime) > responseTimeout)
        {
            return 255;
    4288:	88 24       	eor	r8, r8
    428a:	8a 94       	dec	r8

    // Need to skip to end of the packet regardless here
    _dhcpUdpSocket.flush();

    return type;
}
    428c:	88 2d       	mov	r24, r8
    428e:	e4 96       	adiw	r28, 0x34	; 52
    4290:	0f b6       	in	r0, 0x3f	; 63
    4292:	f8 94       	cli
    4294:	de bf       	out	0x3e, r29	; 62
    4296:	0f be       	out	0x3f, r0	; 63
    4298:	cd bf       	out	0x3d, r28	; 61
    429a:	df 91       	pop	r29
    429c:	cf 91       	pop	r28
    429e:	1f 91       	pop	r17
    42a0:	0f 91       	pop	r16
    42a2:	ff 90       	pop	r15
    42a4:	ef 90       	pop	r14
    42a6:	df 90       	pop	r13
    42a8:	cf 90       	pop	r12
    42aa:	bf 90       	pop	r11
    42ac:	af 90       	pop	r10
    42ae:	9f 90       	pop	r9
    42b0:	8f 90       	pop	r8
    42b2:	7f 90       	pop	r7
    42b4:	6f 90       	pop	r6
    42b6:	5f 90       	pop	r5
    42b8:	4f 90       	pop	r4
    42ba:	3f 90       	pop	r3
    42bc:	2f 90       	pop	r2
    42be:	08 95       	ret

000042c0 <_ZN9DhcpClass10getLocalIpEv>:
    _lastCheck = now;
    return rc;
}

IPAddress DhcpClass::getLocalIp()
{
    42c0:	cf 93       	push	r28
    42c2:	df 93       	push	r29
    42c4:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpLocalIp);
    42c6:	62 5f       	subi	r22, 0xF2	; 242
    42c8:	7f 4f       	sbci	r23, 0xFF	; 255
    42ca:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN9IPAddressC1EPKh>
}
    42ce:	ce 01       	movw	r24, r28
    42d0:	df 91       	pop	r29
    42d2:	cf 91       	pop	r28
    42d4:	08 95       	ret

000042d6 <_ZN9DhcpClass13getSubnetMaskEv>:

IPAddress DhcpClass::getSubnetMask()
{
    42d6:	cf 93       	push	r28
    42d8:	df 93       	push	r29
    42da:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpSubnetMask);
    42dc:	6e 5e       	subi	r22, 0xEE	; 238
    42de:	7f 4f       	sbci	r23, 0xFF	; 255
    42e0:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN9IPAddressC1EPKh>
}
    42e4:	ce 01       	movw	r24, r28
    42e6:	df 91       	pop	r29
    42e8:	cf 91       	pop	r28
    42ea:	08 95       	ret

000042ec <_ZN9DhcpClass12getGatewayIpEv>:

IPAddress DhcpClass::getGatewayIp()
{
    42ec:	cf 93       	push	r28
    42ee:	df 93       	push	r29
    42f0:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpGatewayIp);
    42f2:	6a 5e       	subi	r22, 0xEA	; 234
    42f4:	7f 4f       	sbci	r23, 0xFF	; 255
    42f6:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN9IPAddressC1EPKh>
}
    42fa:	ce 01       	movw	r24, r28
    42fc:	df 91       	pop	r29
    42fe:	cf 91       	pop	r28
    4300:	08 95       	ret

00004302 <_ZN9DhcpClass15getDhcpServerIpEv>:

IPAddress DhcpClass::getDhcpServerIp()
{
    4302:	cf 93       	push	r28
    4304:	df 93       	push	r29
    4306:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpDhcpServerIp);
    4308:	66 5e       	subi	r22, 0xE6	; 230
    430a:	7f 4f       	sbci	r23, 0xFF	; 255
    430c:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN9IPAddressC1EPKh>
}
    4310:	ce 01       	movw	r24, r28
    4312:	df 91       	pop	r29
    4314:	cf 91       	pop	r28
    4316:	08 95       	ret

00004318 <_ZN9DhcpClass14getDnsServerIpEv>:

IPAddress DhcpClass::getDnsServerIp()
{
    4318:	cf 93       	push	r28
    431a:	df 93       	push	r29
    431c:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpDnsServerIp);
    431e:	62 5e       	subi	r22, 0xE2	; 226
    4320:	7f 4f       	sbci	r23, 0xFF	; 255
    4322:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN9IPAddressC1EPKh>
}
    4326:	ce 01       	movw	r24, r28
    4328:	df 91       	pop	r29
    432a:	cf 91       	pop	r28
    432c:	08 95       	ret

0000432e <_ZN9DhcpClass9printByteEPch>:

void DhcpClass::printByte(char * buf, uint8_t n ) {
  char *str = &buf[1];
  buf[0]='0';
    432e:	80 e3       	ldi	r24, 0x30	; 48
    4330:	fb 01       	movw	r30, r22
    4332:	80 83       	st	Z, r24
IPAddress DhcpClass::getDnsServerIp()
{
    return IPAddress(_dhcpDnsServerIp);
}

void DhcpClass::printByte(char * buf, uint8_t n ) {
    4334:	32 96       	adiw	r30, 0x02	; 2
    4336:	01 c0       	rjmp	.+2      	; 0x433a <_ZN9DhcpClass9printByteEPch+0xc>
  char *str = &buf[1];
  buf[0]='0';
  do {
    unsigned long m = n;
    n /= 16;
    4338:	48 2f       	mov	r20, r24
    char c = m - 16 * n;
    433a:	84 2f       	mov	r24, r20
    433c:	82 95       	swap	r24
    433e:	8f 70       	andi	r24, 0x0F	; 15
    4340:	4f 70       	andi	r20, 0x0F	; 15
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
    4342:	4a 30       	cpi	r20, 0x0A	; 10
    4344:	10 f4       	brcc	.+4      	; 0x434a <_ZN9DhcpClass9printByteEPch+0x1c>
    4346:	40 5d       	subi	r20, 0xD0	; 208
    4348:	01 c0       	rjmp	.+2      	; 0x434c <_ZN9DhcpClass9printByteEPch+0x1e>
    434a:	49 5c       	subi	r20, 0xC9	; 201
    434c:	42 93       	st	-Z, r20
}

void DhcpClass::printByte(char * buf, uint8_t n ) {
  char *str = &buf[1];
  buf[0]='0';
  do {
    434e:	88 23       	and	r24, r24
    4350:	99 f7       	brne	.-26     	; 0x4338 <_ZN9DhcpClass9printByteEPch+0xa>
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    4352:	08 95       	ret

00004354 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>:
void DhcpClass::presend_DHCP()
{
}

void DhcpClass::send_DHCP_MESSAGE(uint8_t messageType, uint16_t secondsElapsed)
{
    4354:	9f 92       	push	r9
    4356:	af 92       	push	r10
    4358:	bf 92       	push	r11
    435a:	cf 92       	push	r12
    435c:	df 92       	push	r13
    435e:	ef 92       	push	r14
    4360:	ff 92       	push	r15
    4362:	0f 93       	push	r16
    4364:	1f 93       	push	r17
    4366:	cf 93       	push	r28
    4368:	df 93       	push	r29
    436a:	cd b7       	in	r28, 0x3d	; 61
    436c:	de b7       	in	r29, 0x3e	; 62
    436e:	ac 97       	sbiw	r28, 0x2c	; 44
    4370:	0f b6       	in	r0, 0x3f	; 63
    4372:	f8 94       	cli
    4374:	de bf       	out	0x3e, r29	; 62
    4376:	0f be       	out	0x3f, r0	; 63
    4378:	cd bf       	out	0x3d, r28	; 61
    437a:	5c 01       	movw	r10, r24
    437c:	96 2e       	mov	r9, r22
    437e:	d4 2e       	mov	r13, r20
    4380:	c5 2e       	mov	r12, r21
    uint8_t buffer[32];
    memset(buffer, 0, 32);
    4382:	80 e2       	ldi	r24, 0x20	; 32
    4384:	fe 01       	movw	r30, r28
    4386:	3d 96       	adiw	r30, 0x0d	; 13
    4388:	df 01       	movw	r26, r30
    438a:	1d 92       	st	X+, r1
    438c:	8a 95       	dec	r24
    438e:	e9 f7       	brne	.-6      	; 0x438a <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x36>
    IPAddress dest_addr( 255, 255, 255, 255 ); // Broadcast address
    4390:	ce 01       	movw	r24, r28
    4392:	07 96       	adiw	r24, 0x07	; 7
    4394:	6f ef       	ldi	r22, 0xFF	; 255
    4396:	4f ef       	ldi	r20, 0xFF	; 255
    4398:	2f ef       	ldi	r18, 0xFF	; 255
    439a:	0f ef       	ldi	r16, 0xFF	; 255
    439c:	0e 94 b2 10 	call	0x2164	; 0x2164 <_ZN9IPAddressC1Ehhhh>

    if (-1 == _dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT))
    43a0:	0f 2e       	mov	r0, r31
    43a2:	f7 e4       	ldi	r31, 0x47	; 71
    43a4:	ef 2e       	mov	r14, r31
    43a6:	ff 24       	eor	r15, r15
    43a8:	f0 2d       	mov	r31, r0
    43aa:	ea 0c       	add	r14, r10
    43ac:	fb 1c       	adc	r15, r11
    43ae:	83 ea       	ldi	r24, 0xA3	; 163
    43b0:	91 e0       	ldi	r25, 0x01	; 1
    43b2:	9a 83       	std	Y+2, r25	; 0x02
    43b4:	89 83       	std	Y+1, r24	; 0x01
    43b6:	89 85       	ldd	r24, Y+9	; 0x09
    43b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ba:	ab 85       	ldd	r26, Y+11	; 0x0b
    43bc:	bc 85       	ldd	r27, Y+12	; 0x0c
    43be:	8b 83       	std	Y+3, r24	; 0x03
    43c0:	9c 83       	std	Y+4, r25	; 0x04
    43c2:	ad 83       	std	Y+5, r26	; 0x05
    43c4:	be 83       	std	Y+6, r27	; 0x06
    43c6:	c7 01       	movw	r24, r14
    43c8:	be 01       	movw	r22, r28
    43ca:	6f 5f       	subi	r22, 0xFF	; 255
    43cc:	7f 4f       	sbci	r23, 0xFF	; 255
    43ce:	43 e4       	ldi	r20, 0x43	; 67
    43d0:	50 e0       	ldi	r21, 0x00	; 0
    43d2:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
    43d6:	bf ef       	ldi	r27, 0xFF	; 255
    43d8:	8f 3f       	cpi	r24, 0xFF	; 255
    43da:	9b 07       	cpc	r25, r27
    43dc:	09 f4       	brne	.+2      	; 0x43e0 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x8c>
    43de:	f3 c0       	rjmp	.+486    	; 0x45c6 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x272>
    {
        // FIXME Need to return errors
        return;
    }

    buffer[0] = DHCP_BOOTREQUEST;   // op
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = DHCP_HTYPE10MB;     // htype
    43e4:	8e 87       	std	Y+14, r24	; 0x0e
    buffer[2] = DHCP_HLENETHERNET;  // hlen
    43e6:	86 e0       	ldi	r24, 0x06	; 6
    43e8:	8f 87       	std	Y+15, r24	; 0x0f
    buffer[3] = DHCP_HOPS;          // hops
    43ea:	18 8a       	std	Y+16, r1	; 0x10

    // xid
    unsigned long xid = htonl(_dhcpTransactionId);
    43ec:	f5 01       	movw	r30, r10
    43ee:	04 81       	ldd	r16, Z+4	; 0x04
    43f0:	15 81       	ldd	r17, Z+5	; 0x05
    43f2:	26 81       	ldd	r18, Z+6	; 0x06
    43f4:	37 81       	ldd	r19, Z+7	; 0x07
    43f6:	43 2f       	mov	r20, r19
    43f8:	55 27       	eor	r21, r21
    43fa:	66 27       	eor	r22, r22
    43fc:	77 27       	eor	r23, r23
    43fe:	b0 2f       	mov	r27, r16
    4400:	aa 27       	eor	r26, r26
    4402:	99 27       	eor	r25, r25
    4404:	88 27       	eor	r24, r24
    4406:	48 2b       	or	r20, r24
    4408:	59 2b       	or	r21, r25
    440a:	6a 2b       	or	r22, r26
    440c:	7b 2b       	or	r23, r27
    440e:	b2 2f       	mov	r27, r18
    4410:	a1 2f       	mov	r26, r17
    4412:	90 2f       	mov	r25, r16
    4414:	88 27       	eor	r24, r24
    4416:	80 70       	andi	r24, 0x00	; 0
    4418:	90 70       	andi	r25, 0x00	; 0
    441a:	b0 70       	andi	r27, 0x00	; 0
    441c:	84 2b       	or	r24, r20
    441e:	95 2b       	or	r25, r21
    4420:	a6 2b       	or	r26, r22
    4422:	b7 2b       	or	r27, r23
    4424:	01 2f       	mov	r16, r17
    4426:	12 2f       	mov	r17, r18
    4428:	23 2f       	mov	r18, r19
    442a:	33 27       	eor	r19, r19
    442c:	00 70       	andi	r16, 0x00	; 0
    442e:	20 70       	andi	r18, 0x00	; 0
    4430:	30 70       	andi	r19, 0x00	; 0
    4432:	80 2b       	or	r24, r16
    4434:	91 2b       	or	r25, r17
    4436:	a2 2b       	or	r26, r18
    4438:	b3 2b       	or	r27, r19
    memcpy(buffer + 4, &(xid), 4);
    443a:	89 8b       	std	Y+17, r24	; 0x11
    443c:	9a 8b       	std	Y+18, r25	; 0x12
    443e:	ab 8b       	std	Y+19, r26	; 0x13
    4440:	bc 8b       	std	Y+20, r27	; 0x14

    // 8, 9 - seconds elapsed
    buffer[8] = ((secondsElapsed & 0xff00) >> 8);
    4442:	cd 8a       	std	Y+21, r12	; 0x15
    buffer[9] = (secondsElapsed & 0x00ff);
    4444:	de 8a       	std	Y+22, r13	; 0x16

    // flags
    unsigned short flags = htons(DHCP_FLAGSBROADCAST);
    memcpy(buffer + 10, &(flags), 2);
    4446:	80 e8       	ldi	r24, 0x80	; 128
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	98 8f       	std	Y+24, r25	; 0x18
    444c:	8f 8b       	std	Y+23, r24	; 0x17
    // yiaddr: already zeroed
    // siaddr: already zeroed
    // giaddr: already zeroed

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 28);
    444e:	8e 01       	movw	r16, r28
    4450:	03 5f       	subi	r16, 0xF3	; 243
    4452:	1f 4f       	sbci	r17, 0xFF	; 255
    4454:	c7 01       	movw	r24, r14
    4456:	b8 01       	movw	r22, r16
    4458:	4c e1       	ldi	r20, 0x1C	; 28
    445a:	50 e0       	ldi	r21, 0x00	; 0
    445c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>

    memset(buffer, 0, 32); // clear local buffer
    4460:	80 e2       	ldi	r24, 0x20	; 32
    4462:	d8 01       	movw	r26, r16
    4464:	1d 92       	st	X+, r1
    4466:	8a 95       	dec	r24
    4468:	e9 f7       	brne	.-6      	; 0x4464 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x110>

    memcpy(buffer, _dhcpMacAddr, 6); // chaddr
    446a:	cc 24       	eor	r12, r12
    446c:	dd 24       	eor	r13, r13
    446e:	68 94       	set
    4470:	c3 f8       	bld	r12, 3
    4472:	ca 0c       	add	r12, r10
    4474:	db 1c       	adc	r13, r11
    4476:	f8 01       	movw	r30, r16
    4478:	d6 01       	movw	r26, r12
    447a:	86 e0       	ldi	r24, 0x06	; 6
    447c:	0d 90       	ld	r0, X+
    447e:	01 92       	st	Z+, r0
    4480:	81 50       	subi	r24, 0x01	; 1
    4482:	e1 f7       	brne	.-8      	; 0x447c <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x128>

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 16);
    4484:	8e 01       	movw	r16, r28
    4486:	03 5f       	subi	r16, 0xF3	; 243
    4488:	1f 4f       	sbci	r17, 0xFF	; 255
    448a:	c7 01       	movw	r24, r14
    448c:	b8 01       	movw	r22, r16
    448e:	40 e1       	ldi	r20, 0x10	; 16
    4490:	50 e0       	ldi	r21, 0x00	; 0
    4492:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>

    memset(buffer, 0, 32); // clear local buffer
    4496:	80 e2       	ldi	r24, 0x20	; 32
    4498:	f8 01       	movw	r30, r16
    449a:	11 92       	st	Z+, r1
    449c:	8a 95       	dec	r24
    449e:	e9 f7       	brne	.-6      	; 0x449a <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x146>
    44a0:	06 e0       	ldi	r16, 0x06	; 6
    44a2:	10 e0       	ldi	r17, 0x00	; 0

    // leave zeroed out for sname && file
    // put in W5100 transmit buffer x 6 (192 bytes)
  
    for(int i = 0; i < 6; i++) {
        _dhcpUdpSocket.write(buffer, 32);
    44a4:	c7 01       	movw	r24, r14
    44a6:	be 01       	movw	r22, r28
    44a8:	63 5f       	subi	r22, 0xF3	; 243
    44aa:	7f 4f       	sbci	r23, 0xFF	; 255
    44ac:	40 e2       	ldi	r20, 0x20	; 32
    44ae:	50 e0       	ldi	r21, 0x00	; 0
    44b0:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>
    44b4:	01 50       	subi	r16, 0x01	; 1
    44b6:	10 40       	sbci	r17, 0x00	; 0
    memset(buffer, 0, 32); // clear local buffer

    // leave zeroed out for sname && file
    // put in W5100 transmit buffer x 6 (192 bytes)
  
    for(int i = 0; i < 6; i++) {
    44b8:	a9 f7       	brne	.-22     	; 0x44a4 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x150>
        _dhcpUdpSocket.write(buffer, 32);
    }
  
    // OPT - Magic Cookie
    buffer[0] = (uint8_t)((MAGIC_COOKIE >> 24)& 0xFF);
    44ba:	83 e6       	ldi	r24, 0x63	; 99
    44bc:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = (uint8_t)((MAGIC_COOKIE >> 16)& 0xFF);
    44be:	92 e8       	ldi	r25, 0x82	; 130
    44c0:	9e 87       	std	Y+14, r25	; 0x0e
    buffer[2] = (uint8_t)((MAGIC_COOKIE >> 8)& 0xFF);
    44c2:	93 e5       	ldi	r25, 0x53	; 83
    44c4:	9f 87       	std	Y+15, r25	; 0x0f
    buffer[3] = (uint8_t)(MAGIC_COOKIE& 0xFF);
    44c6:	88 8b       	std	Y+16, r24	; 0x10

    // OPT - message type
    buffer[4] = dhcpMessageType;
    44c8:	85 e3       	ldi	r24, 0x35	; 53
    44ca:	89 8b       	std	Y+17, r24	; 0x11
    buffer[5] = 0x01;
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	8a 8b       	std	Y+18, r24	; 0x12
    buffer[6] = messageType; //DHCP_REQUEST;
    44d0:	9b 8a       	std	Y+19, r9	; 0x13

    // OPT - client identifier
    buffer[7] = dhcpClientIdentifier;
    44d2:	9d e3       	ldi	r25, 0x3D	; 61
    44d4:	9c 8b       	std	Y+20, r25	; 0x14
    buffer[8] = 0x07;
    44d6:	97 e0       	ldi	r25, 0x07	; 7
    44d8:	9d 8b       	std	Y+21, r25	; 0x15
    buffer[9] = 0x01;
    44da:	8e 8b       	std	Y+22, r24	; 0x16
    memcpy(buffer + 10, _dhcpMacAddr, 6);
    44dc:	fe 01       	movw	r30, r28
    44de:	77 96       	adiw	r30, 0x17	; 23
    44e0:	d6 01       	movw	r26, r12
    44e2:	86 e0       	ldi	r24, 0x06	; 6
    44e4:	0d 90       	ld	r0, X+
    44e6:	01 92       	st	Z+, r0
    44e8:	81 50       	subi	r24, 0x01	; 1
    44ea:	e1 f7       	brne	.-8      	; 0x44e4 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x190>

    // OPT - host name
    buffer[16] = hostName;
    44ec:	8c e0       	ldi	r24, 0x0C	; 12
    44ee:	8d 8f       	std	Y+29, r24	; 0x1d
    buffer[17] = strlen(HOST_NAME) + 6; // length of hostname + last 3 bytes of mac address
    44f0:	8e 8f       	std	Y+30, r24	; 0x1e
    strcpy((char*)&(buffer[18]), HOST_NAME);
    44f2:	fe 01       	movw	r30, r28
    44f4:	7f 96       	adiw	r30, 0x1f	; 31
    44f6:	a6 eb       	ldi	r26, 0xB6	; 182
    44f8:	b1 e0       	ldi	r27, 0x01	; 1
    44fa:	87 e0       	ldi	r24, 0x07	; 7
    44fc:	0d 90       	ld	r0, X+
    44fe:	01 92       	st	Z+, r0
    4500:	81 50       	subi	r24, 0x01	; 1
    4502:	e1 f7       	brne	.-8      	; 0x44fc <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x1a8>

    printByte((char*)&(buffer[24]), _dhcpMacAddr[3]);
    4504:	c5 01       	movw	r24, r10
    4506:	be 01       	movw	r22, r28
    4508:	6b 5d       	subi	r22, 0xDB	; 219
    450a:	7f 4f       	sbci	r23, 0xFF	; 255
    450c:	d5 01       	movw	r26, r10
    450e:	1b 96       	adiw	r26, 0x0b	; 11
    4510:	4c 91       	ld	r20, X
    4512:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN9DhcpClass9printByteEPch>
    printByte((char*)&(buffer[26]), _dhcpMacAddr[4]);
    4516:	c5 01       	movw	r24, r10
    4518:	be 01       	movw	r22, r28
    451a:	69 5d       	subi	r22, 0xD9	; 217
    451c:	7f 4f       	sbci	r23, 0xFF	; 255
    451e:	f5 01       	movw	r30, r10
    4520:	44 85       	ldd	r20, Z+12	; 0x0c
    4522:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN9DhcpClass9printByteEPch>
    printByte((char*)&(buffer[28]), _dhcpMacAddr[5]);
    4526:	c5 01       	movw	r24, r10
    4528:	be 01       	movw	r22, r28
    452a:	67 5d       	subi	r22, 0xD7	; 215
    452c:	7f 4f       	sbci	r23, 0xFF	; 255
    452e:	d5 01       	movw	r26, r10
    4530:	1d 96       	adiw	r26, 0x0d	; 13
    4532:	4c 91       	ld	r20, X
    4534:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN9DhcpClass9printByteEPch>

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 30);
    4538:	c7 01       	movw	r24, r14
    453a:	be 01       	movw	r22, r28
    453c:	63 5f       	subi	r22, 0xF3	; 243
    453e:	7f 4f       	sbci	r23, 0xFF	; 255
    4540:	4e e1       	ldi	r20, 0x1E	; 30
    4542:	50 e0       	ldi	r21, 0x00	; 0
    4544:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>

    if(messageType == DHCP_REQUEST)
    4548:	b3 e0       	ldi	r27, 0x03	; 3
    454a:	9b 16       	cp	r9, r27
    454c:	01 f5       	brne	.+64     	; 0x458e <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x23a>
    {
        buffer[0] = dhcpRequestedIPaddr;
    454e:	82 e3       	ldi	r24, 0x32	; 50
    4550:	8d 87       	std	Y+13, r24	; 0x0d
        buffer[1] = 0x04;
    4552:	84 e0       	ldi	r24, 0x04	; 4
    4554:	8e 87       	std	Y+14, r24	; 0x0e
        buffer[2] = _dhcpLocalIp[0];
    4556:	f5 01       	movw	r30, r10
    4558:	96 85       	ldd	r25, Z+14	; 0x0e
    455a:	9f 87       	std	Y+15, r25	; 0x0f
        buffer[3] = _dhcpLocalIp[1];
    455c:	97 85       	ldd	r25, Z+15	; 0x0f
    455e:	98 8b       	std	Y+16, r25	; 0x10
        buffer[4] = _dhcpLocalIp[2];
    4560:	90 89       	ldd	r25, Z+16	; 0x10
    4562:	99 8b       	std	Y+17, r25	; 0x11
        buffer[5] = _dhcpLocalIp[3];
    4564:	91 89       	ldd	r25, Z+17	; 0x11
    4566:	9a 8b       	std	Y+18, r25	; 0x12

        buffer[6] = dhcpServerIdentifier;
    4568:	96 e3       	ldi	r25, 0x36	; 54
    456a:	9b 8b       	std	Y+19, r25	; 0x13
        buffer[7] = 0x04;
    456c:	8c 8b       	std	Y+20, r24	; 0x14
        buffer[8] = _dhcpDhcpServerIp[0];
    456e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4570:	8d 8b       	std	Y+21, r24	; 0x15
        buffer[9] = _dhcpDhcpServerIp[1];
    4572:	83 8d       	ldd	r24, Z+27	; 0x1b
    4574:	8e 8b       	std	Y+22, r24	; 0x16
        buffer[10] = _dhcpDhcpServerIp[2];
    4576:	84 8d       	ldd	r24, Z+28	; 0x1c
    4578:	8f 8b       	std	Y+23, r24	; 0x17
        buffer[11] = _dhcpDhcpServerIp[3];
    457a:	85 8d       	ldd	r24, Z+29	; 0x1d
    457c:	88 8f       	std	Y+24, r24	; 0x18

        //put data in W5100 transmit buffer
        _dhcpUdpSocket.write(buffer, 12);
    457e:	c7 01       	movw	r24, r14
    4580:	be 01       	movw	r22, r28
    4582:	63 5f       	subi	r22, 0xF3	; 243
    4584:	7f 4f       	sbci	r23, 0xFF	; 255
    4586:	4c e0       	ldi	r20, 0x0C	; 12
    4588:	50 e0       	ldi	r21, 0x00	; 0
    458a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>
    }
    
    buffer[0] = dhcpParamRequest;
    458e:	87 e3       	ldi	r24, 0x37	; 55
    4590:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = 0x06;
    4592:	86 e0       	ldi	r24, 0x06	; 6
    4594:	8e 87       	std	Y+14, r24	; 0x0e
    buffer[2] = subnetMask;
    4596:	91 e0       	ldi	r25, 0x01	; 1
    4598:	9f 87       	std	Y+15, r25	; 0x0f
    buffer[3] = routersOnSubnet;
    459a:	93 e0       	ldi	r25, 0x03	; 3
    459c:	98 8b       	std	Y+16, r25	; 0x10
    buffer[4] = dns;
    459e:	89 8b       	std	Y+17, r24	; 0x11
    buffer[5] = domainName;
    45a0:	8f e0       	ldi	r24, 0x0F	; 15
    45a2:	8a 8b       	std	Y+18, r24	; 0x12
    buffer[6] = dhcpT1value;
    45a4:	8a e3       	ldi	r24, 0x3A	; 58
    45a6:	8b 8b       	std	Y+19, r24	; 0x13
    buffer[7] = dhcpT2value;
    45a8:	8b e3       	ldi	r24, 0x3B	; 59
    45aa:	8c 8b       	std	Y+20, r24	; 0x14
    buffer[8] = endOption;
    45ac:	8f ef       	ldi	r24, 0xFF	; 255
    45ae:	8d 8b       	std	Y+21, r24	; 0x15
    
    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 9);
    45b0:	c7 01       	movw	r24, r14
    45b2:	be 01       	movw	r22, r28
    45b4:	63 5f       	subi	r22, 0xF3	; 243
    45b6:	7f 4f       	sbci	r23, 0xFF	; 255
    45b8:	49 e0       	ldi	r20, 0x09	; 9
    45ba:	50 e0       	ldi	r21, 0x00	; 0
    45bc:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>

    _dhcpUdpSocket.endPacket();
    45c0:	c7 01       	movw	r24, r14
    45c2:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN11EthernetUDP9endPacketEv>
}
    45c6:	ac 96       	adiw	r28, 0x2c	; 44
    45c8:	0f b6       	in	r0, 0x3f	; 63
    45ca:	f8 94       	cli
    45cc:	de bf       	out	0x3e, r29	; 62
    45ce:	0f be       	out	0x3f, r0	; 63
    45d0:	cd bf       	out	0x3d, r28	; 61
    45d2:	df 91       	pop	r29
    45d4:	cf 91       	pop	r28
    45d6:	1f 91       	pop	r17
    45d8:	0f 91       	pop	r16
    45da:	ff 90       	pop	r15
    45dc:	ef 90       	pop	r14
    45de:	df 90       	pop	r13
    45e0:	cf 90       	pop	r12
    45e2:	bf 90       	pop	r11
    45e4:	af 90       	pop	r10
    45e6:	9f 90       	pop	r9
    45e8:	08 95       	ret

000045ea <_ZN9DhcpClass18request_DHCP_leaseEv>:
    // zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
    memset(_dhcpLocalIp, 0, 20);
}

//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease(){
    45ea:	2f 92       	push	r2
    45ec:	3f 92       	push	r3
    45ee:	4f 92       	push	r4
    45f0:	5f 92       	push	r5
    45f2:	6f 92       	push	r6
    45f4:	7f 92       	push	r7
    45f6:	8f 92       	push	r8
    45f8:	9f 92       	push	r9
    45fa:	af 92       	push	r10
    45fc:	bf 92       	push	r11
    45fe:	cf 92       	push	r12
    4600:	df 92       	push	r13
    4602:	ef 92       	push	r14
    4604:	ff 92       	push	r15
    4606:	0f 93       	push	r16
    4608:	1f 93       	push	r17
    460a:	cf 93       	push	r28
    460c:	df 93       	push	r29
    460e:	cd b7       	in	r28, 0x3d	; 61
    4610:	de b7       	in	r29, 0x3e	; 62
    4612:	2a 97       	sbiw	r28, 0x0a	; 10
    4614:	0f b6       	in	r0, 0x3f	; 63
    4616:	f8 94       	cli
    4618:	de bf       	out	0x3e, r29	; 62
    461a:	0f be       	out	0x3f, r0	; 63
    461c:	cd bf       	out	0x3d, r28	; 61
    461e:	8c 01       	movw	r16, r24
    uint8_t messageType = 0;
  
    
  
    // Pick an initial transaction ID
    _dhcpTransactionId = random(1UL, 2000UL);
    4620:	61 e0       	ldi	r22, 0x01	; 1
    4622:	70 e0       	ldi	r23, 0x00	; 0
    4624:	80 e0       	ldi	r24, 0x00	; 0
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	20 ed       	ldi	r18, 0xD0	; 208
    462a:	37 e0       	ldi	r19, 0x07	; 7
    462c:	40 e0       	ldi	r20, 0x00	; 0
    462e:	50 e0       	ldi	r21, 0x00	; 0
    4630:	0e 94 62 29 	call	0x52c4	; 0x52c4 <_Z6randomll>
    4634:	d8 01       	movw	r26, r16
    4636:	14 96       	adiw	r26, 0x04	; 4
    4638:	6c 93       	st	X, r22
    463a:	14 97       	sbiw	r26, 0x04	; 4
    463c:	15 96       	adiw	r26, 0x05	; 5
    463e:	7c 93       	st	X, r23
    4640:	15 97       	sbiw	r26, 0x05	; 5
    4642:	16 96       	adiw	r26, 0x06	; 6
    4644:	8c 93       	st	X, r24
    4646:	16 97       	sbiw	r26, 0x06	; 6
    4648:	17 96       	adiw	r26, 0x07	; 7
    464a:	9c 93       	st	X, r25
    464c:	17 97       	sbiw	r26, 0x07	; 7
    _dhcpInitialTransactionId = _dhcpTransactionId;
    464e:	6c 93       	st	X, r22
    4650:	11 96       	adiw	r26, 0x01	; 1
    4652:	7c 93       	st	X, r23
    4654:	11 97       	sbiw	r26, 0x01	; 1
    4656:	12 96       	adiw	r26, 0x02	; 2
    4658:	8c 93       	st	X, r24
    465a:	12 97       	sbiw	r26, 0x02	; 2
    465c:	13 96       	adiw	r26, 0x03	; 3
    465e:	9c 93       	st	X, r25

    if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0)
    4660:	f8 01       	movw	r30, r16
    4662:	e9 5b       	subi	r30, 0xB9	; 185
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	f8 87       	std	Y+8, r31	; 0x08
    4668:	ef 83       	std	Y+7, r30	; 0x07
    466a:	cf 01       	movw	r24, r30
    466c:	64 e4       	ldi	r22, 0x44	; 68
    466e:	70 e0       	ldi	r23, 0x00	; 0
    4670:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZN11EthernetUDP5beginEj>
    4674:	88 23       	and	r24, r24
    4676:	09 f4       	brne	.+2      	; 0x467a <_ZN9DhcpClass18request_DHCP_leaseEv+0x90>
    4678:	41 c1       	rjmp	.+642    	; 0x48fc <_ZN9DhcpClass18request_DHCP_leaseEv+0x312>
    
    presend_DHCP();
    
    int result = 0;
    
    unsigned long startTime = millis();
    467a:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    467e:	4b 01       	movw	r8, r22
    4680:	5c 01       	movw	r10, r24
      return 0;
    }
    
    presend_DHCP();
    
    int result = 0;
    4682:	cc 24       	eor	r12, r12
    4684:	dd 24       	eor	r13, r13
}

//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease(){
    
    uint8_t messageType = 0;
    4686:	ff 24       	eor	r15, r15
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    4688:	0f 2e       	mov	r0, r31
    468a:	f6 e4       	ldi	r31, 0x46	; 70
    468c:	6f 2e       	mov	r6, r31
    468e:	77 24       	eor	r7, r7
    4690:	f0 2d       	mov	r31, r0
    4692:	60 0e       	add	r6, r16
    4694:	71 1e       	adc	r7, r17
                _dhcp_state = STATE_DHCP_START;
        }
        
        if(messageType == 255)
        {
            messageType = 0;
    4696:	ee 24       	eor	r14, r14
            }
        }
        else if(_dhcp_state == STATE_DHCP_REQUEST)
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    4698:	c8 01       	movw	r24, r16
    469a:	ce 96       	adiw	r24, 0x3e	; 62
    469c:	9a 87       	std	Y+10, r25	; 0x0a
    469e:	89 87       	std	Y+9, r24	; 0x09
            if(messageType == DHCP_OFFER)
            {
                // We'll use the transaction ID that the offer came with,
                // rather than the one we were up to
                _dhcpTransactionId = respId;
                send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime) / 1000));
    46a0:	0f 2e       	mov	r0, r31
    46a2:	f8 ee       	ldi	r31, 0xE8	; 232
    46a4:	2f 2e       	mov	r2, r31
    46a6:	f3 e0       	ldi	r31, 0x03	; 3
    46a8:	3f 2e       	mov	r3, r31
    46aa:	f0 e0       	ldi	r31, 0x00	; 0
    46ac:	4f 2e       	mov	r4, r31
    46ae:	f0 e0       	ldi	r31, 0x00	; 0
    46b0:	5f 2e       	mov	r5, r31
    46b2:	f0 2d       	mov	r31, r0
    46b4:	7e 82       	std	Y+6, r7	; 0x06
    46b6:	6d 82       	std	Y+5, r6	; 0x05
    46b8:	38 01       	movw	r6, r16
    46ba:	0f 2d       	mov	r16, r15
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    46bc:	08 c1       	rjmp	.+528    	; 0x48ce <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e4>
    {
        if(_dhcp_state == STATE_DHCP_START)
    46be:	88 23       	and	r24, r24
    46c0:	21 f5       	brne	.+72     	; 0x470a <_ZN9DhcpClass18request_DHCP_leaseEv+0x120>
        {
            _dhcpTransactionId++;
    46c2:	f3 01       	movw	r30, r6
    46c4:	84 81       	ldd	r24, Z+4	; 0x04
    46c6:	95 81       	ldd	r25, Z+5	; 0x05
    46c8:	a6 81       	ldd	r26, Z+6	; 0x06
    46ca:	b7 81       	ldd	r27, Z+7	; 0x07
    46cc:	01 96       	adiw	r24, 0x01	; 1
    46ce:	a1 1d       	adc	r26, r1
    46d0:	b1 1d       	adc	r27, r1
    46d2:	84 83       	std	Z+4, r24	; 0x04
    46d4:	95 83       	std	Z+5, r25	; 0x05
    46d6:	a6 83       	std	Z+6, r26	; 0x06
    46d8:	b7 83       	std	Z+7, r27	; 0x07
            
            send_DHCP_MESSAGE(DHCP_DISCOVER, ((millis() - startTime) / 1000));
    46da:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    46de:	dc 01       	movw	r26, r24
    46e0:	cb 01       	movw	r24, r22
    46e2:	88 19       	sub	r24, r8
    46e4:	99 09       	sbc	r25, r9
    46e6:	aa 09       	sbc	r26, r10
    46e8:	bb 09       	sbc	r27, r11
    46ea:	bc 01       	movw	r22, r24
    46ec:	cd 01       	movw	r24, r26
    46ee:	a2 01       	movw	r20, r4
    46f0:	91 01       	movw	r18, r2
    46f2:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    46f6:	c3 01       	movw	r24, r6
    46f8:	61 e0       	ldi	r22, 0x01	; 1
    46fa:	a9 01       	movw	r20, r18
    46fc:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
            _dhcp_state = STATE_DHCP_DISCOVER;
    4700:	81 e0       	ldi	r24, 0x01	; 1
    4702:	ad 81       	ldd	r26, Y+5	; 0x05
    4704:	be 81       	ldd	r27, Y+6	; 0x06
    4706:	8c 93       	st	X, r24
    4708:	c6 c0       	rjmp	.+396    	; 0x4896 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
        }
        else if(_dhcp_state == STATE_DHCP_REREQUEST){
    470a:	84 30       	cpi	r24, 0x04	; 4
    470c:	21 f5       	brne	.+72     	; 0x4756 <_ZN9DhcpClass18request_DHCP_leaseEv+0x16c>
            _dhcpTransactionId++;
    470e:	f3 01       	movw	r30, r6
    4710:	84 81       	ldd	r24, Z+4	; 0x04
    4712:	95 81       	ldd	r25, Z+5	; 0x05
    4714:	a6 81       	ldd	r26, Z+6	; 0x06
    4716:	b7 81       	ldd	r27, Z+7	; 0x07
    4718:	01 96       	adiw	r24, 0x01	; 1
    471a:	a1 1d       	adc	r26, r1
    471c:	b1 1d       	adc	r27, r1
    471e:	84 83       	std	Z+4, r24	; 0x04
    4720:	95 83       	std	Z+5, r25	; 0x05
    4722:	a6 83       	std	Z+6, r26	; 0x06
    4724:	b7 83       	std	Z+7, r27	; 0x07
            send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime)/1000));
    4726:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    472a:	dc 01       	movw	r26, r24
    472c:	cb 01       	movw	r24, r22
    472e:	88 19       	sub	r24, r8
    4730:	99 09       	sbc	r25, r9
    4732:	aa 09       	sbc	r26, r10
    4734:	bb 09       	sbc	r27, r11
    4736:	bc 01       	movw	r22, r24
    4738:	cd 01       	movw	r24, r26
    473a:	a2 01       	movw	r20, r4
    473c:	91 01       	movw	r18, r2
    473e:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    4742:	c3 01       	movw	r24, r6
    4744:	63 e0       	ldi	r22, 0x03	; 3
    4746:	a9 01       	movw	r20, r18
    4748:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
            _dhcp_state = STATE_DHCP_REQUEST;
    474c:	e2 e0       	ldi	r30, 0x02	; 2
    474e:	ad 81       	ldd	r26, Y+5	; 0x05
    4750:	be 81       	ldd	r27, Y+6	; 0x06
    4752:	ec 93       	st	X, r30
    4754:	a0 c0       	rjmp	.+320    	; 0x4896 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
        }
        else if(_dhcp_state == STATE_DHCP_DISCOVER)
    4756:	81 30       	cpi	r24, 0x01	; 1
    4758:	89 f5       	brne	.+98     	; 0x47bc <_ZN9DhcpClass18request_DHCP_leaseEv+0x1d2>
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    475a:	a9 85       	ldd	r26, Y+9	; 0x09
    475c:	ba 85       	ldd	r27, Y+10	; 0x0a
    475e:	4d 91       	ld	r20, X+
    4760:	5d 91       	ld	r21, X+
    4762:	6d 91       	ld	r22, X+
    4764:	7c 91       	ld	r23, X
    4766:	c3 01       	movw	r24, r6
    4768:	9e 01       	movw	r18, r28
    476a:	2f 5f       	subi	r18, 0xFF	; 255
    476c:	3f 4f       	sbci	r19, 0xFF	; 255
    476e:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <_ZN9DhcpClass17parseDHCPResponseEmRm>
    4772:	08 2f       	mov	r16, r24
            if(messageType == DHCP_OFFER)
    4774:	82 30       	cpi	r24, 0x02	; 2
    4776:	09 f0       	breq	.+2      	; 0x477a <_ZN9DhcpClass18request_DHCP_leaseEv+0x190>
    4778:	8e c0       	rjmp	.+284    	; 0x4896 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
            {
                // We'll use the transaction ID that the offer came with,
                // rather than the one we were up to
                _dhcpTransactionId = respId;
    477a:	89 81       	ldd	r24, Y+1	; 0x01
    477c:	9a 81       	ldd	r25, Y+2	; 0x02
    477e:	ab 81       	ldd	r26, Y+3	; 0x03
    4780:	bc 81       	ldd	r27, Y+4	; 0x04
    4782:	f3 01       	movw	r30, r6
    4784:	84 83       	std	Z+4, r24	; 0x04
    4786:	95 83       	std	Z+5, r25	; 0x05
    4788:	a6 83       	std	Z+6, r26	; 0x06
    478a:	b7 83       	std	Z+7, r27	; 0x07
                send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime) / 1000));
    478c:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    4790:	dc 01       	movw	r26, r24
    4792:	cb 01       	movw	r24, r22
    4794:	88 19       	sub	r24, r8
    4796:	99 09       	sbc	r25, r9
    4798:	aa 09       	sbc	r26, r10
    479a:	bb 09       	sbc	r27, r11
    479c:	bc 01       	movw	r22, r24
    479e:	cd 01       	movw	r24, r26
    47a0:	a2 01       	movw	r20, r4
    47a2:	91 01       	movw	r18, r2
    47a4:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    47a8:	c3 01       	movw	r24, r6
    47aa:	63 e0       	ldi	r22, 0x03	; 3
    47ac:	a9 01       	movw	r20, r18
    47ae:	0e 94 aa 21 	call	0x4354	; 0x4354 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
                _dhcp_state = STATE_DHCP_REQUEST;
    47b2:	e2 e0       	ldi	r30, 0x02	; 2
    47b4:	ad 81       	ldd	r26, Y+5	; 0x05
    47b6:	be 81       	ldd	r27, Y+6	; 0x06
    47b8:	ec 93       	st	X, r30
    47ba:	73 c0       	rjmp	.+230    	; 0x48a2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2b8>
            }
        }
        else if(_dhcp_state == STATE_DHCP_REQUEST)
    47bc:	82 30       	cpi	r24, 0x02	; 2
    47be:	09 f0       	breq	.+2      	; 0x47c2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x1d8>
    47c0:	6a c0       	rjmp	.+212    	; 0x4896 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    47c2:	a9 85       	ldd	r26, Y+9	; 0x09
    47c4:	ba 85       	ldd	r27, Y+10	; 0x0a
    47c6:	4d 91       	ld	r20, X+
    47c8:	5d 91       	ld	r21, X+
    47ca:	6d 91       	ld	r22, X+
    47cc:	7c 91       	ld	r23, X
    47ce:	c3 01       	movw	r24, r6
    47d0:	9e 01       	movw	r18, r28
    47d2:	2f 5f       	subi	r18, 0xFF	; 255
    47d4:	3f 4f       	sbci	r19, 0xFF	; 255
    47d6:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <_ZN9DhcpClass17parseDHCPResponseEmRm>
    47da:	08 2f       	mov	r16, r24
            if(messageType == DHCP_ACK)
    47dc:	85 30       	cpi	r24, 0x05	; 5
    47de:	09 f0       	breq	.+2      	; 0x47e2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x1f8>
    47e0:	54 c0       	rjmp	.+168    	; 0x488a <_ZN9DhcpClass18request_DHCP_leaseEv+0x2a0>
            {
                _dhcp_state = STATE_DHCP_LEASED;
    47e2:	83 e0       	ldi	r24, 0x03	; 3
    47e4:	ed 81       	ldd	r30, Y+5	; 0x05
    47e6:	fe 81       	ldd	r31, Y+6	; 0x06
    47e8:	80 83       	st	Z, r24
                result = 1;
                //use default lease time if we didn't get it
                if(_dhcpLeaseTime == 0){
    47ea:	f3 01       	movw	r30, r6
    47ec:	82 a1       	lds	r24, 0x42
    47ee:	93 a1       	lds	r25, 0x43
    47f0:	a4 a1       	lds	r26, 0x44
    47f2:	b5 a1       	lds	r27, 0x45
    47f4:	00 97       	sbiw	r24, 0x00	; 0
    47f6:	a1 05       	cpc	r26, r1
    47f8:	b1 05       	cpc	r27, r1
    47fa:	41 f4       	brne	.+16     	; 0x480c <_ZN9DhcpClass18request_DHCP_leaseEv+0x222>
                    _dhcpLeaseTime = DEFAULT_LEASE;
    47fc:	84 e8       	ldi	r24, 0x84	; 132
    47fe:	93 e0       	ldi	r25, 0x03	; 3
    4800:	a0 e0       	ldi	r26, 0x00	; 0
    4802:	b0 e0       	ldi	r27, 0x00	; 0
    4804:	82 a3       	lds	r24, 0x52
    4806:	93 a3       	lds	r25, 0x53
    4808:	a4 a3       	lds	r26, 0x54
    480a:	b5 a3       	lds	r27, 0x55
                }
                //calculate T1 & T2 if we didn't get it
                if(_dhcpT1 == 0){
    480c:	f3 01       	movw	r30, r6
    480e:	86 a1       	lds	r24, 0x46
    4810:	97 a1       	lds	r25, 0x47
    4812:	a0 a5       	lds	r26, 0x60
    4814:	b1 a5       	lds	r27, 0x61
    4816:	00 97       	sbiw	r24, 0x00	; 0
    4818:	a1 05       	cpc	r26, r1
    481a:	b1 05       	cpc	r27, r1
    481c:	61 f4       	brne	.+24     	; 0x4836 <_ZN9DhcpClass18request_DHCP_leaseEv+0x24c>
                    //T1 should be 50% of _dhcpLeaseTime
                    _dhcpT1 = _dhcpLeaseTime >> 1;
    481e:	82 a1       	lds	r24, 0x42
    4820:	93 a1       	lds	r25, 0x43
    4822:	a4 a1       	lds	r26, 0x44
    4824:	b5 a1       	lds	r27, 0x45
    4826:	b6 95       	lsr	r27
    4828:	a7 95       	ror	r26
    482a:	97 95       	ror	r25
    482c:	87 95       	ror	r24
    482e:	86 a3       	lds	r24, 0x56
    4830:	97 a3       	lds	r25, 0x57
    4832:	a0 a7       	lds	r26, 0x70
    4834:	b1 a7       	lds	r27, 0x71
                }
                if(_dhcpT2 == 0){
    4836:	f3 01       	movw	r30, r6
    4838:	82 a5       	lds	r24, 0x62
    483a:	93 a5       	lds	r25, 0x63
    483c:	a4 a5       	lds	r26, 0x64
    483e:	b5 a5       	lds	r27, 0x65
    4840:	00 97       	sbiw	r24, 0x00	; 0
    4842:	a1 05       	cpc	r26, r1
    4844:	b1 05       	cpc	r27, r1
    4846:	61 f4       	brne	.+24     	; 0x4860 <_ZN9DhcpClass18request_DHCP_leaseEv+0x276>
                    //T2 should be 87.5% (7/8ths) of _dhcpLeaseTime
                    _dhcpT2 = _dhcpT1 << 1;
    4848:	86 a1       	lds	r24, 0x46
    484a:	97 a1       	lds	r25, 0x47
    484c:	a0 a5       	lds	r26, 0x60
    484e:	b1 a5       	lds	r27, 0x61
    4850:	88 0f       	add	r24, r24
    4852:	99 1f       	adc	r25, r25
    4854:	aa 1f       	adc	r26, r26
    4856:	bb 1f       	adc	r27, r27
    4858:	82 a7       	lds	r24, 0x72
    485a:	93 a7       	lds	r25, 0x73
    485c:	a4 a7       	lds	r26, 0x74
    485e:	b5 a7       	lds	r27, 0x75
                }
                _renewInSec = _dhcpT1;
    4860:	f3 01       	movw	r30, r6
    4862:	86 a1       	lds	r24, 0x46
    4864:	97 a1       	lds	r25, 0x47
    4866:	a0 a5       	lds	r26, 0x60
    4868:	b1 a5       	lds	r27, 0x61
    486a:	86 a7       	lds	r24, 0x76
    486c:	97 a7       	lds	r25, 0x77
    486e:	a0 ab       	sts	0x50, r26
    4870:	b1 ab       	sts	0x51, r27
                _rebindInSec = _dhcpT2;
    4872:	82 a5       	lds	r24, 0x62
    4874:	93 a5       	lds	r25, 0x63
    4876:	a4 a5       	lds	r26, 0x64
    4878:	b5 a5       	lds	r27, 0x65
    487a:	82 ab       	sts	0x52, r24
    487c:	93 ab       	sts	0x53, r25
    487e:	a4 ab       	sts	0x54, r26
    4880:	b5 ab       	sts	0x55, r27
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
            if(messageType == DHCP_ACK)
            {
                _dhcp_state = STATE_DHCP_LEASED;
                result = 1;
    4882:	cc 24       	eor	r12, r12
    4884:	dd 24       	eor	r13, r13
    4886:	c3 94       	inc	r12
    4888:	06 c0       	rjmp	.+12     	; 0x4896 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
                    _dhcpT2 = _dhcpT1 << 1;
                }
                _renewInSec = _dhcpT1;
                _rebindInSec = _dhcpT2;
            }
            else if(messageType == DHCP_NAK)
    488a:	86 30       	cpi	r24, 0x06	; 6
    488c:	21 f4       	brne	.+8      	; 0x4896 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
                _dhcp_state = STATE_DHCP_START;
    488e:	ad 81       	ldd	r26, Y+5	; 0x05
    4890:	be 81       	ldd	r27, Y+6	; 0x06
    4892:	1c 92       	st	X, r1
    4894:	06 c0       	rjmp	.+12     	; 0x48a2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2b8>
        }
        
        if(messageType == 255)
    4896:	0f 3f       	cpi	r16, 0xFF	; 255
    4898:	21 f4       	brne	.+8      	; 0x48a2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2b8>
        {
            messageType = 0;
            _dhcp_state = STATE_DHCP_START;
    489a:	ed 81       	ldd	r30, Y+5	; 0x05
    489c:	fe 81       	ldd	r31, Y+6	; 0x06
    489e:	10 82       	st	Z, r1
                _dhcp_state = STATE_DHCP_START;
        }
        
        if(messageType == 255)
        {
            messageType = 0;
    48a0:	0e 2d       	mov	r16, r14
            _dhcp_state = STATE_DHCP_START;
        }
        
        if(result != 1 && ((millis() - startTime) > _timeout))
    48a2:	f1 e0       	ldi	r31, 0x01	; 1
    48a4:	cf 16       	cp	r12, r31
    48a6:	d1 04       	cpc	r13, r1
    48a8:	91 f0       	breq	.+36     	; 0x48ce <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e4>
    48aa:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    48ae:	dc 01       	movw	r26, r24
    48b0:	cb 01       	movw	r24, r22
    48b2:	88 19       	sub	r24, r8
    48b4:	99 09       	sbc	r25, r9
    48b6:	aa 09       	sbc	r26, r10
    48b8:	bb 09       	sbc	r27, r11
    48ba:	f3 01       	movw	r30, r6
    48bc:	42 ad       	sts	0x62, r20
    48be:	53 ad       	sts	0x63, r21
    48c0:	64 ad       	sts	0x64, r22
    48c2:	75 ad       	sts	0x65, r23
    48c4:	48 17       	cp	r20, r24
    48c6:	59 07       	cpc	r21, r25
    48c8:	6a 07       	cpc	r22, r26
    48ca:	7b 07       	cpc	r23, r27
    48cc:	30 f0       	brcs	.+12     	; 0x48da <_ZN9DhcpClass18request_DHCP_leaseEv+0x2f0>
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    48ce:	ad 81       	ldd	r26, Y+5	; 0x05
    48d0:	be 81       	ldd	r27, Y+6	; 0x06
    48d2:	8c 91       	ld	r24, X
    48d4:	83 30       	cpi	r24, 0x03	; 3
    48d6:	09 f0       	breq	.+2      	; 0x48da <_ZN9DhcpClass18request_DHCP_leaseEv+0x2f0>
    48d8:	f2 ce       	rjmp	.-540    	; 0x46be <_ZN9DhcpClass18request_DHCP_leaseEv+0xd4>
        if(result != 1 && ((millis() - startTime) > _timeout))
            break;
    }
    
    // We're done with the socket now
    _dhcpUdpSocket.stop();
    48da:	8f 81       	ldd	r24, Y+7	; 0x07
    48dc:	98 85       	ldd	r25, Y+8	; 0x08
    48de:	0e 94 fd 05 	call	0xbfa	; 0xbfa <_ZN11EthernetUDP4stopEv>
    _dhcpTransactionId++;
    48e2:	f3 01       	movw	r30, r6
    48e4:	84 81       	ldd	r24, Z+4	; 0x04
    48e6:	95 81       	ldd	r25, Z+5	; 0x05
    48e8:	a6 81       	ldd	r26, Z+6	; 0x06
    48ea:	b7 81       	ldd	r27, Z+7	; 0x07
    48ec:	01 96       	adiw	r24, 0x01	; 1
    48ee:	a1 1d       	adc	r26, r1
    48f0:	b1 1d       	adc	r27, r1
    48f2:	84 83       	std	Z+4, r24	; 0x04
    48f4:	95 83       	std	Z+5, r25	; 0x05
    48f6:	a6 83       	std	Z+6, r26	; 0x06
    48f8:	b7 83       	std	Z+7, r27	; 0x07

    return result;
    48fa:	02 c0       	rjmp	.+4      	; 0x4900 <_ZN9DhcpClass18request_DHCP_leaseEv+0x316>
    _dhcpInitialTransactionId = _dhcpTransactionId;

    if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0)
    {
      // Couldn't get a socket
      return 0;
    48fc:	cc 24       	eor	r12, r12
    48fe:	dd 24       	eor	r13, r13
    // We're done with the socket now
    _dhcpUdpSocket.stop();
    _dhcpTransactionId++;

    return result;
}
    4900:	8c 2d       	mov	r24, r12
    4902:	9d 2d       	mov	r25, r13
    4904:	2a 96       	adiw	r28, 0x0a	; 10
    4906:	0f b6       	in	r0, 0x3f	; 63
    4908:	f8 94       	cli
    490a:	de bf       	out	0x3e, r29	; 62
    490c:	0f be       	out	0x3f, r0	; 63
    490e:	cd bf       	out	0x3d, r28	; 61
    4910:	df 91       	pop	r29
    4912:	cf 91       	pop	r28
    4914:	1f 91       	pop	r17
    4916:	0f 91       	pop	r16
    4918:	ff 90       	pop	r15
    491a:	ef 90       	pop	r14
    491c:	df 90       	pop	r13
    491e:	cf 90       	pop	r12
    4920:	bf 90       	pop	r11
    4922:	af 90       	pop	r10
    4924:	9f 90       	pop	r9
    4926:	8f 90       	pop	r8
    4928:	7f 90       	pop	r7
    492a:	6f 90       	pop	r6
    492c:	5f 90       	pop	r5
    492e:	4f 90       	pop	r4
    4930:	3f 90       	pop	r3
    4932:	2f 90       	pop	r2
    4934:	08 95       	ret

00004936 <_ZN9DhcpClass10checkLeaseEv>:
    1/DHCP_CHECK_RENEW_FAIL: renew failed
    2/DHCP_CHECK_RENEW_OK: renew success
    3/DHCP_CHECK_REBIND_FAIL: rebind fail
    4/DHCP_CHECK_REBIND_OK: rebind success
*/
int DhcpClass::checkLease(){
    4936:	6f 92       	push	r6
    4938:	7f 92       	push	r7
    493a:	8f 92       	push	r8
    493c:	9f 92       	push	r9
    493e:	af 92       	push	r10
    4940:	bf 92       	push	r11
    4942:	cf 92       	push	r12
    4944:	df 92       	push	r13
    4946:	ef 92       	push	r14
    4948:	ff 92       	push	r15
    494a:	0f 93       	push	r16
    494c:	1f 93       	push	r17
    494e:	cf 93       	push	r28
    4950:	df 93       	push	r29
    4952:	ec 01       	movw	r28, r24
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    4954:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    signed long snow = (long)now;
    4958:	c6 2e       	mov	r12, r22
    495a:	d7 2e       	mov	r13, r23
    495c:	e8 2e       	mov	r14, r24
    495e:	f9 2e       	mov	r15, r25
    int rc=DHCP_CHECK_NONE;
    if (_lastCheck != 0){
    4960:	8e a9       	sts	0x4e, r24
    4962:	9f a9       	sts	0x4f, r25
    4964:	a8 ad       	sts	0x68, r26
    4966:	b9 ad       	sts	0x69, r27
    4968:	00 97       	sbiw	r24, 0x00	; 0
    496a:	a1 05       	cpc	r26, r1
    496c:	b1 05       	cpc	r27, r1
    496e:	09 f4       	brne	.+2      	; 0x4972 <_ZN9DhcpClass10checkLeaseEv+0x3c>
    4970:	a2 c0       	rjmp	.+324    	; 0x4ab6 <_ZN9DhcpClass10checkLeaseEv+0x180>
        signed long factor;
        //calc how many ms past the timeout we are
        factor = snow - (long)_secTimeout;
    4972:	fe 01       	movw	r30, r28
    4974:	ee 5b       	subi	r30, 0xBE	; 190
    4976:	ff 4f       	sbci	r31, 0xFF	; 255
    4978:	80 81       	ld	r24, Z
    497a:	91 81       	ldd	r25, Z+1	; 0x01
    497c:	a2 81       	ldd	r26, Z+2	; 0x02
    497e:	b3 81       	ldd	r27, Z+3	; 0x03
    4980:	a7 01       	movw	r20, r14
    4982:	96 01       	movw	r18, r12
    4984:	28 1b       	sub	r18, r24
    4986:	39 0b       	sbc	r19, r25
    4988:	4a 0b       	sbc	r20, r26
    498a:	5b 0b       	sbc	r21, r27
    498c:	ca 01       	movw	r24, r20
    498e:	b9 01       	movw	r22, r18
        //if on or passed the timeout, reduce the counters
        if ( factor >= 0 ){
    4990:	0a f4       	brpl	.+2      	; 0x4994 <_ZN9DhcpClass10checkLeaseEv+0x5e>
    4992:	5a c0       	rjmp	.+180    	; 0x4a48 <_ZN9DhcpClass10checkLeaseEv+0x112>
            //next timeout should be now plus 1000 ms minus parts of second in factor
            _secTimeout = snow + 1000 - factor % 1000;
    4994:	3f 01       	movw	r6, r30
    4996:	0f 2e       	mov	r0, r31
    4998:	f8 ee       	ldi	r31, 0xE8	; 232
    499a:	8f 2e       	mov	r8, r31
    499c:	f3 e0       	ldi	r31, 0x03	; 3
    499e:	9f 2e       	mov	r9, r31
    49a0:	f0 e0       	ldi	r31, 0x00	; 0
    49a2:	af 2e       	mov	r10, r31
    49a4:	f0 e0       	ldi	r31, 0x00	; 0
    49a6:	bf 2e       	mov	r11, r31
    49a8:	f0 2d       	mov	r31, r0
    49aa:	8c 0c       	add	r8, r12
    49ac:	9d 1c       	adc	r9, r13
    49ae:	ae 1c       	adc	r10, r14
    49b0:	bf 1c       	adc	r11, r15
    49b2:	28 ee       	ldi	r18, 0xE8	; 232
    49b4:	33 e0       	ldi	r19, 0x03	; 3
    49b6:	40 e0       	ldi	r20, 0x00	; 0
    49b8:	50 e0       	ldi	r21, 0x00	; 0
    49ba:	0e 94 25 34 	call	0x684a	; 0x684a <__divmodsi4>
    49be:	89 01       	movw	r16, r18
    49c0:	9a 01       	movw	r18, r20
    49c2:	dc 01       	movw	r26, r24
    49c4:	cb 01       	movw	r24, r22
    49c6:	b5 01       	movw	r22, r10
    49c8:	a4 01       	movw	r20, r8
    49ca:	48 1b       	sub	r20, r24
    49cc:	59 0b       	sbc	r21, r25
    49ce:	6a 0b       	sbc	r22, r26
    49d0:	7b 0b       	sbc	r23, r27
    49d2:	f3 01       	movw	r30, r6
    49d4:	40 83       	st	Z, r20
    49d6:	51 83       	std	Z+1, r21	; 0x01
    49d8:	62 83       	std	Z+2, r22	; 0x02
    49da:	73 83       	std	Z+3, r23	; 0x03
            //how many seconds late are we, minimum 1
            factor = factor / 1000 +1;
    49dc:	0f 5f       	subi	r16, 0xFF	; 255
    49de:	1f 4f       	sbci	r17, 0xFF	; 255
    49e0:	2f 4f       	sbci	r18, 0xFF	; 255
    49e2:	3f 4f       	sbci	r19, 0xFF	; 255
            
            //reduce the counters by that mouch
            //if we can assume that the cycle time (factor) is fairly constant
            //and if the remainder is less than cycle time * 2 
            //do it early instead of late
            if(_renewInSec < factor*2 )
    49e4:	4e a5       	lds	r20, 0x6e
    49e6:	5f a5       	lds	r21, 0x6f
    49e8:	68 a9       	sts	0x48, r22
    49ea:	79 a9       	sts	0x49, r23
    49ec:	d9 01       	movw	r26, r18
    49ee:	c8 01       	movw	r24, r16
    49f0:	88 0f       	add	r24, r24
    49f2:	99 1f       	adc	r25, r25
    49f4:	aa 1f       	adc	r26, r26
    49f6:	bb 1f       	adc	r27, r27
    49f8:	48 17       	cp	r20, r24
    49fa:	59 07       	cpc	r21, r25
    49fc:	6a 07       	cpc	r22, r26
    49fe:	7b 07       	cpc	r23, r27
    4a00:	2c f4       	brge	.+10     	; 0x4a0c <_ZN9DhcpClass10checkLeaseEv+0xd6>
                _renewInSec = 0;
    4a02:	1e a6       	lds	r17, 0xbe
    4a04:	1f a6       	lds	r17, 0xbf
    4a06:	18 aa       	sts	0x98, r17
    4a08:	19 aa       	sts	0x99, r17
    4a0a:	08 c0       	rjmp	.+16     	; 0x4a1c <_ZN9DhcpClass10checkLeaseEv+0xe6>
            else
                _renewInSec -= factor;
    4a0c:	40 1b       	sub	r20, r16
    4a0e:	51 0b       	sbc	r21, r17
    4a10:	62 0b       	sbc	r22, r18
    4a12:	73 0b       	sbc	r23, r19
    4a14:	4e a7       	lds	r20, 0x7e
    4a16:	5f a7       	lds	r21, 0x7f
    4a18:	68 ab       	sts	0x58, r22
    4a1a:	79 ab       	sts	0x59, r23
            
            if(_rebindInSec < factor*2 )
    4a1c:	4a a9       	sts	0x4a, r20
    4a1e:	5b a9       	sts	0x4b, r21
    4a20:	6c a9       	sts	0x4c, r22
    4a22:	7d a9       	sts	0x4d, r23
    4a24:	48 17       	cp	r20, r24
    4a26:	59 07       	cpc	r21, r25
    4a28:	6a 07       	cpc	r22, r26
    4a2a:	7b 07       	cpc	r23, r27
    4a2c:	2c f4       	brge	.+10     	; 0x4a38 <_ZN9DhcpClass10checkLeaseEv+0x102>
                _rebindInSec = 0;
    4a2e:	1a aa       	sts	0x9a, r17
    4a30:	1b aa       	sts	0x9b, r17
    4a32:	1c aa       	sts	0x9c, r17
    4a34:	1d aa       	sts	0x9d, r17
    4a36:	08 c0       	rjmp	.+16     	; 0x4a48 <_ZN9DhcpClass10checkLeaseEv+0x112>
            else
                _rebindInSec -= factor;
    4a38:	40 1b       	sub	r20, r16
    4a3a:	51 0b       	sbc	r21, r17
    4a3c:	62 0b       	sbc	r22, r18
    4a3e:	73 0b       	sbc	r23, r19
    4a40:	4a ab       	sts	0x5a, r20
    4a42:	5b ab       	sts	0x5b, r21
    4a44:	6c ab       	sts	0x5c, r22
    4a46:	7d ab       	sts	0x5d, r23
        }

        //if we have a lease but should renew, do it
        if (_dhcp_state == STATE_DHCP_LEASED && _renewInSec <=0){
    4a48:	fe 01       	movw	r30, r28
    4a4a:	ea 5b       	subi	r30, 0xBA	; 186
    4a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4e:	20 81       	ld	r18, Z
    4a50:	23 30       	cpi	r18, 0x03	; 3
    4a52:	a9 f4       	brne	.+42     	; 0x4a7e <_ZN9DhcpClass10checkLeaseEv+0x148>
    4a54:	8e a5       	lds	r24, 0x6e
    4a56:	9f a5       	lds	r25, 0x6f
    4a58:	a8 a9       	sts	0x48, r26
    4a5a:	b9 a9       	sts	0x49, r27
    4a5c:	18 16       	cp	r1, r24
    4a5e:	19 06       	cpc	r1, r25
    4a60:	1a 06       	cpc	r1, r26
    4a62:	1b 06       	cpc	r1, r27
    4a64:	8c f0       	brlt	.+34     	; 0x4a88 <_ZN9DhcpClass10checkLeaseEv+0x152>
            _dhcp_state = STATE_DHCP_REREQUEST;
    4a66:	8f 01       	movw	r16, r30
    4a68:	84 e0       	ldi	r24, 0x04	; 4
    4a6a:	80 83       	st	Z, r24
            rc = 1 + request_DHCP_lease();
    4a6c:	ce 01       	movw	r24, r28
    4a6e:	0e 94 f5 22 	call	0x45ea	; 0x45ea <_ZN9DhcpClass18request_DHCP_leaseEv>
    4a72:	01 96       	adiw	r24, 0x01	; 1
        }

        //if we have a lease or is renewing but should bind, do it
        if( (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START) && _rebindInSec <=0){
    4a74:	f8 01       	movw	r30, r16
    4a76:	20 81       	ld	r18, Z
    4a78:	23 30       	cpi	r18, 0x03	; 3
    4a7a:	41 f0       	breq	.+16     	; 0x4a8c <_ZN9DhcpClass10checkLeaseEv+0x156>
    4a7c:	02 c0       	rjmp	.+4      	; 0x4a82 <_ZN9DhcpClass10checkLeaseEv+0x14c>
*/
int DhcpClass::checkLease(){
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    signed long snow = (long)now;
    int rc=DHCP_CHECK_NONE;
    4a7e:	80 e0       	ldi	r24, 0x00	; 0
    4a80:	90 e0       	ldi	r25, 0x00	; 0
            _dhcp_state = STATE_DHCP_REREQUEST;
            rc = 1 + request_DHCP_lease();
        }

        //if we have a lease or is renewing but should bind, do it
        if( (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START) && _rebindInSec <=0){
    4a82:	22 23       	and	r18, r18
    4a84:	19 f0       	breq	.+6      	; 0x4a8c <_ZN9DhcpClass10checkLeaseEv+0x156>
    4a86:	26 c0       	rjmp	.+76     	; 0x4ad4 <_ZN9DhcpClass10checkLeaseEv+0x19e>
*/
int DhcpClass::checkLease(){
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    signed long snow = (long)now;
    int rc=DHCP_CHECK_NONE;
    4a88:	80 e0       	ldi	r24, 0x00	; 0
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
            _dhcp_state = STATE_DHCP_REREQUEST;
            rc = 1 + request_DHCP_lease();
        }

        //if we have a lease or is renewing but should bind, do it
        if( (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START) && _rebindInSec <=0){
    4a8c:	4a a9       	sts	0x4a, r20
    4a8e:	5b a9       	sts	0x4b, r21
    4a90:	6c a9       	sts	0x4c, r22
    4a92:	7d a9       	sts	0x4d, r23
    4a94:	14 16       	cp	r1, r20
    4a96:	15 06       	cpc	r1, r21
    4a98:	16 06       	cpc	r1, r22
    4a9a:	17 06       	cpc	r1, r23
    4a9c:	dc f0       	brlt	.+54     	; 0x4ad4 <_ZN9DhcpClass10checkLeaseEv+0x19e>
            //this should basically restart completely
            _dhcp_state = STATE_DHCP_START;
    4a9e:	fe 01       	movw	r30, r28
    4aa0:	ea 5b       	subi	r30, 0xBA	; 186
    4aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa4:	10 82       	st	Z, r1
            reset_DHCP_lease();
    4aa6:	ce 01       	movw	r24, r28
    4aa8:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <_ZN9DhcpClass16reset_DHCP_leaseEv>
            rc = 3 + request_DHCP_lease();
    4aac:	ce 01       	movw	r24, r28
    4aae:	0e 94 f5 22 	call	0x45ea	; 0x45ea <_ZN9DhcpClass18request_DHCP_leaseEv>
    4ab2:	03 96       	adiw	r24, 0x03	; 3
    4ab4:	0f c0       	rjmp	.+30     	; 0x4ad4 <_ZN9DhcpClass10checkLeaseEv+0x19e>
        }
    }
    else{
        _secTimeout = snow + 1000;
    4ab6:	fe 01       	movw	r30, r28
    4ab8:	ee 5b       	subi	r30, 0xBE	; 190
    4aba:	ff 4f       	sbci	r31, 0xFF	; 255
    4abc:	d7 01       	movw	r26, r14
    4abe:	c6 01       	movw	r24, r12
    4ac0:	88 51       	subi	r24, 0x18	; 24
    4ac2:	9c 4f       	sbci	r25, 0xFC	; 252
    4ac4:	af 4f       	sbci	r26, 0xFF	; 255
    4ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ac8:	80 83       	st	Z, r24
    4aca:	91 83       	std	Z+1, r25	; 0x01
    4acc:	a2 83       	std	Z+2, r26	; 0x02
    4ace:	b3 83       	std	Z+3, r27	; 0x03
*/
int DhcpClass::checkLease(){
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    signed long snow = (long)now;
    int rc=DHCP_CHECK_NONE;
    4ad0:	80 e0       	ldi	r24, 0x00	; 0
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    }
    else{
        _secTimeout = snow + 1000;
    }

    _lastCheck = now;
    4ad4:	ce aa       	sts	0x9e, r28
    4ad6:	df aa       	sts	0x9f, r29
    4ad8:	e8 ae       	sts	0xb8, r30
    4ada:	f9 ae       	sts	0xb9, r31
    return rc;
}
    4adc:	df 91       	pop	r29
    4ade:	cf 91       	pop	r28
    4ae0:	1f 91       	pop	r17
    4ae2:	0f 91       	pop	r16
    4ae4:	ff 90       	pop	r15
    4ae6:	ef 90       	pop	r14
    4ae8:	df 90       	pop	r13
    4aea:	cf 90       	pop	r12
    4aec:	bf 90       	pop	r11
    4aee:	af 90       	pop	r10
    4af0:	9f 90       	pop	r9
    4af2:	8f 90       	pop	r8
    4af4:	7f 90       	pop	r7
    4af6:	6f 90       	pop	r6
    4af8:	08 95       	ret

00004afa <_ZN9DhcpClass13beginWithDHCPEPhmm>:
#include "Dhcp.h"
#include "..\Arduino.h"
#include "util.h"

int DhcpClass::beginWithDHCP(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
    4afa:	af 92       	push	r10
    4afc:	bf 92       	push	r11
    4afe:	cf 92       	push	r12
    4b00:	df 92       	push	r13
    4b02:	ef 92       	push	r14
    4b04:	ff 92       	push	r15
    4b06:	0f 93       	push	r16
    4b08:	1f 93       	push	r17
    4b0a:	cf 93       	push	r28
    4b0c:	df 93       	push	r29
    4b0e:	6c 01       	movw	r12, r24
    4b10:	b6 2e       	mov	r11, r22
    4b12:	a7 2e       	mov	r10, r23
    4b14:	da 01       	movw	r26, r20
    4b16:	c9 01       	movw	r24, r18
    _dhcpLeaseTime=0;
    4b18:	f6 01       	movw	r30, r12
    4b1a:	12 a2       	lds	r17, 0x92
    4b1c:	13 a2       	lds	r17, 0x93
    4b1e:	14 a2       	lds	r17, 0x94
    4b20:	15 a2       	lds	r17, 0x95
    _dhcpT1=0;
    4b22:	16 a2       	lds	r17, 0x96
    4b24:	17 a2       	lds	r17, 0x97
    4b26:	10 a6       	lds	r17, 0xb0
    4b28:	11 a6       	lds	r17, 0xb1
    _dhcpT2=0;
    4b2a:	12 a6       	lds	r17, 0xb2
    4b2c:	13 a6       	lds	r17, 0xb3
    4b2e:	14 a6       	lds	r17, 0xb4
    4b30:	15 a6       	lds	r17, 0xb5
    _lastCheck=0;
    4b32:	16 aa       	sts	0x96, r17
    4b34:	17 aa       	sts	0x97, r17
    4b36:	10 ae       	sts	0xb0, r17
    4b38:	11 ae       	sts	0xb1, r17
    _timeout = timeout;
    4b3a:	82 af       	sts	0x72, r24
    4b3c:	93 af       	sts	0x73, r25
    4b3e:	a4 af       	sts	0x74, r26
    4b40:	b5 af       	sts	0x75, r27
    _responseTimeout = responseTimeout;
    4b42:	fe 96       	adiw	r30, 0x3e	; 62
    4b44:	e0 82       	st	Z, r14
    4b46:	f1 82       	std	Z+1, r15	; 0x01
    4b48:	02 83       	std	Z+2, r16	; 0x02
    4b4a:	13 83       	std	Z+3, r17	; 0x03

    // zero out _dhcpMacAddr
    memset(_dhcpMacAddr, 0, 6); 
    4b4c:	e6 01       	movw	r28, r12
    4b4e:	28 96       	adiw	r28, 0x08	; 8
    4b50:	86 e0       	ldi	r24, 0x06	; 6
    4b52:	fe 01       	movw	r30, r28
    4b54:	11 92       	st	Z+, r1
    4b56:	8a 95       	dec	r24
    4b58:	e9 f7       	brne	.-6      	; 0x4b54 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x5a>
    reset_DHCP_lease();
    4b5a:	c6 01       	movw	r24, r12
    4b5c:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <_ZN9DhcpClass16reset_DHCP_leaseEv>

    memcpy((void*)_dhcpMacAddr, (void*)mac, 6);
    4b60:	eb 2d       	mov	r30, r11
    4b62:	fa 2d       	mov	r31, r10
    4b64:	86 e0       	ldi	r24, 0x06	; 6
    4b66:	01 90       	ld	r0, Z+
    4b68:	09 92       	st	Y+, r0
    4b6a:	81 50       	subi	r24, 0x01	; 1
    4b6c:	e1 f7       	brne	.-8      	; 0x4b66 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x6c>
    _dhcp_state = STATE_DHCP_START;
    4b6e:	f6 01       	movw	r30, r12
    4b70:	ea 5b       	subi	r30, 0xBA	; 186
    4b72:	ff 4f       	sbci	r31, 0xFF	; 255
    4b74:	10 82       	st	Z, r1
    return request_DHCP_lease();
    4b76:	c6 01       	movw	r24, r12
    4b78:	0e 94 f5 22 	call	0x45ea	; 0x45ea <_ZN9DhcpClass18request_DHCP_leaseEv>
}
    4b7c:	df 91       	pop	r29
    4b7e:	cf 91       	pop	r28
    4b80:	1f 91       	pop	r17
    4b82:	0f 91       	pop	r16
    4b84:	ff 90       	pop	r15
    4b86:	ef 90       	pop	r14
    4b88:	df 90       	pop	r13
    4b8a:	cf 90       	pop	r12
    4b8c:	bf 90       	pop	r11
    4b8e:	af 90       	pop	r10
    4b90:	08 95       	ret

00004b92 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    4b92:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    4b94:	80 ee       	ldi	r24, 0xE0	; 224
    4b96:	94 e0       	ldi	r25, 0x04	; 4
    4b98:	60 e0       	ldi	r22, 0x00	; 0
    4b9a:	40 e0       	ldi	r20, 0x00	; 0
    4b9c:	20 e0       	ldi	r18, 0x00	; 0
    4b9e:	00 e0       	ldi	r16, 0x00	; 0
    4ba0:	0e 94 b2 10 	call	0x2164	; 0x2164 <_ZN9IPAddressC1Ehhhh>
    4ba4:	0f 91       	pop	r16
    4ba6:	08 95       	ret

00004ba8 <_ZN9DNSClient5beginERK9IPAddress>:
#define INVALID_SERVER   -2
#define TRUNCATED        -3
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    4ba8:	cf 93       	push	r28
    4baa:	df 93       	push	r29
    4bac:	fc 01       	movw	r30, r24

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    4bae:	eb 01       	movw	r28, r22
    4bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    4bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    4bb4:	ac 81       	ldd	r26, Y+4	; 0x04
    4bb6:	bd 81       	ldd	r27, Y+5	; 0x05
    4bb8:	82 83       	std	Z+2, r24	; 0x02
    4bba:	93 83       	std	Z+3, r25	; 0x03
    4bbc:	a4 83       	std	Z+4, r26	; 0x04
    4bbe:	b5 83       	std	Z+5, r27	; 0x05
    iDNSServer = aDNSServer;
    iRequestId = 0;
    4bc0:	17 82       	std	Z+7, r1	; 0x07
    4bc2:	16 82       	std	Z+6, r1	; 0x06
}
    4bc4:	df 91       	pop	r29
    4bc6:	cf 91       	pop	r28
    4bc8:	08 95       	ret

00004bca <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    4bca:	0f 93       	push	r16
    4bcc:	1f 93       	push	r17
    4bce:	cf 93       	push	r28
    4bd0:	df 93       	push	r29
    4bd2:	db 01       	movw	r26, r22
    4bd4:	ea 01       	movw	r28, r20
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    4bd6:	8c 91       	ld	r24, X
    4bd8:	88 23       	and	r24, r24
    4bda:	29 f0       	breq	.+10     	; 0x4be6 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1c>
    iDNSServer = aDNSServer;
    iRequestId = 0;
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
    4bdc:	fb 01       	movw	r30, r22
    4bde:	31 96       	adiw	r30, 0x01	; 1
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    4be0:	81 91       	ld	r24, Z+
    4be2:	88 23       	and	r24, r24
    4be4:	e9 f7       	brne	.-6      	; 0x4be0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
                    segment++;
                    segmentValue = 0;
    4be6:	80 e0       	ldi	r24, 0x00	; 0
    4be8:	90 e0       	ldi	r25, 0x00	; 0
    4bea:	40 e0       	ldi	r20, 0x00	; 0
    4bec:	50 e0       	ldi	r21, 0x00	; 0
    4bee:	00 e0       	ldi	r16, 0x00	; 0
    4bf0:	10 e0       	ldi	r17, 0x00	; 0
    4bf2:	1c c0       	rjmp	.+56     	; 0x4c2c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
        while (*p && (segment < 4))
        {
            if (*p == '.')
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    4bf4:	8f 3f       	cpi	r24, 0xFF	; 255
    4bf6:	91 05       	cpc	r25, r1
    4bf8:	09 f0       	breq	.+2      	; 0x4bfc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    4bfa:	54 f5       	brge	.+84     	; 0x4c50 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x86>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    4bfc:	fe 01       	movw	r30, r28
    4bfe:	e4 0f       	add	r30, r20
    4c00:	f5 1f       	adc	r31, r21
    4c02:	82 83       	std	Z+2, r24	; 0x02
                    segment++;
    4c04:	4f 5f       	subi	r20, 0xFF	; 255
    4c06:	5f 4f       	sbci	r21, 0xFF	; 255
                    segmentValue = 0;
    4c08:	c8 01       	movw	r24, r16
    4c0a:	10 c0       	rjmp	.+32     	; 0x4c2c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    4c0c:	9c 01       	movw	r18, r24
    4c0e:	22 0f       	add	r18, r18
    4c10:	33 1f       	adc	r19, r19
    4c12:	88 0f       	add	r24, r24
    4c14:	99 1f       	adc	r25, r25
    4c16:	88 0f       	add	r24, r24
    4c18:	99 1f       	adc	r25, r25
    4c1a:	88 0f       	add	r24, r24
    4c1c:	99 1f       	adc	r25, r25
    4c1e:	28 0f       	add	r18, r24
    4c20:	39 1f       	adc	r19, r25
    4c22:	86 2f       	mov	r24, r22
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	c0 97       	sbiw	r24, 0x30	; 48
    4c28:	82 0f       	add	r24, r18
    4c2a:	93 1f       	adc	r25, r19
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    4c2c:	6d 91       	ld	r22, X+
    4c2e:	66 23       	and	r22, r22
    4c30:	e1 f0       	breq	.+56     	; 0x4c6a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa0>
    4c32:	44 30       	cpi	r20, 0x04	; 4
    4c34:	51 05       	cpc	r21, r1
    4c36:	cc f4       	brge	.+50     	; 0x4c6a <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa0>
        {
            if (*p == '.')
    4c38:	6e 32       	cpi	r22, 0x2E	; 46
    4c3a:	41 f7       	brne	.-48     	; 0x4c0c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x42>
    4c3c:	db cf       	rjmp	.-74     	; 0x4bf4 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x2a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    4c3e:	44 30       	cpi	r20, 0x04	; 4
    4c40:	51 05       	cpc	r21, r1
    4c42:	4c f4       	brge	.+18     	; 0x4c56 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x8c>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    4c44:	c4 0f       	add	r28, r20
    4c46:	d5 1f       	adc	r29, r21
    4c48:	8a 83       	std	Y+2, r24	; 0x02
            return 1;
    4c4a:	81 e0       	ldi	r24, 0x01	; 1
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	08 c0       	rjmp	.+16     	; 0x4c60 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x96>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
                {
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
    4c50:	80 e0       	ldi	r24, 0x00	; 0
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	05 c0       	rjmp	.+10     	; 0x4c60 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x96>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	02 c0       	rjmp	.+4      	; 0x4c60 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x96>
    4c5c:	80 e0       	ldi	r24, 0x00	; 0
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    4c60:	df 91       	pop	r29
    4c62:	cf 91       	pop	r28
    4c64:	1f 91       	pop	r17
    4c66:	0f 91       	pop	r16
    4c68:	08 95       	ret
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    4c6a:	8f 3f       	cpi	r24, 0xFF	; 255
    4c6c:	91 05       	cpc	r25, r1
    4c6e:	39 f3       	breq	.-50     	; 0x4c3e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x74>
    4c70:	34 f3       	brlt	.-52     	; 0x4c3e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x74>
    4c72:	f4 cf       	rjmp	.-24     	; 0x4c5c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x92>

00004c74 <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    4c74:	af 92       	push	r10
    4c76:	bf 92       	push	r11
    4c78:	cf 92       	push	r12
    4c7a:	df 92       	push	r13
    4c7c:	ef 92       	push	r14
    4c7e:	ff 92       	push	r15
    4c80:	0f 93       	push	r16
    4c82:	1f 93       	push	r17
    4c84:	cf 93       	push	r28
    4c86:	df 93       	push	r29
    4c88:	00 d0       	rcall	.+0      	; 0x4c8a <_ZN9DNSClient12BuildRequestEPKc+0x16>
    4c8a:	0f 92       	push	r0
    4c8c:	cd b7       	in	r28, 0x3d	; 61
    4c8e:	de b7       	in	r29, 0x3e	; 62
    4c90:	8c 01       	movw	r16, r24
    4c92:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    4c94:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    4c98:	dc 01       	movw	r26, r24
    4c9a:	cb 01       	movw	r24, r22
    4c9c:	f8 01       	movw	r30, r16
    4c9e:	97 83       	std	Z+7, r25	; 0x07
    4ca0:	86 83       	std	Z+6, r24	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    4ca2:	aa 24       	eor	r10, r10
    4ca4:	bb 24       	eor	r11, r11
    4ca6:	68 94       	set
    4ca8:	a3 f8       	bld	r10, 3
    4caa:	a0 0e       	add	r10, r16
    4cac:	b1 1e       	adc	r11, r17
    4cae:	b8 01       	movw	r22, r16
    4cb0:	6a 5f       	subi	r22, 0xFA	; 250
    4cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    4cb4:	c5 01       	movw	r24, r10
    4cb6:	42 e0       	ldi	r20, 0x02	; 2
    4cb8:	50 e0       	ldi	r21, 0x00	; 0
    4cba:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    4cbe:	81 e0       	ldi	r24, 0x01	; 1
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	9b 83       	std	Y+3, r25	; 0x03
    4cc4:	8a 83       	std	Y+2, r24	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4cc6:	c5 01       	movw	r24, r10
    4cc8:	be 01       	movw	r22, r28
    4cca:	6e 5f       	subi	r22, 0xFE	; 254
    4ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    4cce:	42 e0       	ldi	r20, 0x02	; 2
    4cd0:	50 e0       	ldi	r21, 0x00	; 0
    4cd2:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    4cd6:	80 e0       	ldi	r24, 0x00	; 0
    4cd8:	91 e0       	ldi	r25, 0x01	; 1
    4cda:	9b 83       	std	Y+3, r25	; 0x03
    4cdc:	8a 83       	std	Y+2, r24	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4cde:	c5 01       	movw	r24, r10
    4ce0:	be 01       	movw	r22, r28
    4ce2:	6e 5f       	subi	r22, 0xFE	; 254
    4ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce6:	42 e0       	ldi	r20, 0x02	; 2
    4ce8:	50 e0       	ldi	r21, 0x00	; 0
    4cea:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    4cee:	1b 82       	std	Y+3, r1	; 0x03
    4cf0:	1a 82       	std	Y+2, r1	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4cf2:	c5 01       	movw	r24, r10
    4cf4:	be 01       	movw	r22, r28
    4cf6:	6e 5f       	subi	r22, 0xFE	; 254
    4cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cfa:	42 e0       	ldi	r20, 0x02	; 2
    4cfc:	50 e0       	ldi	r21, 0x00	; 0
    4cfe:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4d02:	c5 01       	movw	r24, r10
    4d04:	be 01       	movw	r22, r28
    4d06:	6e 5f       	subi	r22, 0xFE	; 254
    4d08:	7f 4f       	sbci	r23, 0xFF	; 255
    4d0a:	42 e0       	ldi	r20, 0x02	; 2
    4d0c:	50 e0       	ldi	r21, 0x00	; 0
    4d0e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4d12:	c5 01       	movw	r24, r10
    4d14:	be 01       	movw	r22, r28
    4d16:	6e 5f       	subi	r22, 0xFE	; 254
    4d18:	7f 4f       	sbci	r23, 0xFF	; 255
    4d1a:	42 e0       	ldi	r20, 0x02	; 2
    4d1c:	50 e0       	ldi	r21, 0x00	; 0
    4d1e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    4d22:	f7 01       	movw	r30, r14
    4d24:	80 81       	ld	r24, Z
    4d26:	88 23       	and	r24, r24
    4d28:	11 f5       	brne	.+68     	; 0x4d6e <_ZN9DNSClient12BuildRequestEPKc+0xfa>
    4d2a:	27 c0       	rjmp	.+78     	; 0x4d7a <_ZN9DNSClient12BuildRequestEPKc+0x106>
    4d2c:	7f 01       	movw	r14, r30
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    4d2e:	81 91       	ld	r24, Z+
    4d30:	88 23       	and	r24, r24
    4d32:	09 f4       	brne	.+2      	; 0x4d36 <_ZN9DNSClient12BuildRequestEPKc+0xc2>
    4d34:	51 c0       	rjmp	.+162    	; 0x4dd8 <_ZN9DNSClient12BuildRequestEPKc+0x164>
    4d36:	8e 32       	cpi	r24, 0x2E	; 46
    4d38:	c9 f7       	brne	.-14     	; 0x4d2c <_ZN9DNSClient12BuildRequestEPKc+0xb8>
    4d3a:	4e c0       	rjmp	.+156    	; 0x4dd8 <_ZN9DNSClient12BuildRequestEPKc+0x164>
        }

        if (end-start > 0)
        {
            // Write out the size of this section
            len = end-start;
    4d3c:	09 83       	std	Y+1, r16	; 0x01
            iUdp.write(&len, sizeof(len));
    4d3e:	c5 01       	movw	r24, r10
    4d40:	be 01       	movw	r22, r28
    4d42:	6f 5f       	subi	r22, 0xFF	; 255
    4d44:	7f 4f       	sbci	r23, 0xFF	; 255
    4d46:	41 e0       	ldi	r20, 0x01	; 1
    4d48:	50 e0       	ldi	r21, 0x00	; 0
    4d4a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    4d4e:	c5 01       	movw	r24, r10
    4d50:	b6 01       	movw	r22, r12
    4d52:	a8 01       	movw	r20, r16
    4d54:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    4d58:	f7 01       	movw	r30, r14
    4d5a:	80 81       	ld	r24, Z
    4d5c:	88 23       	and	r24, r24
    4d5e:	69 f0       	breq	.+26     	; 0x4d7a <_ZN9DNSClient12BuildRequestEPKc+0x106>
            len = end-start;
            iUdp.write(&len, sizeof(len));
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
        }
        start = end+1;
    4d60:	67 01       	movw	r12, r14
    4d62:	08 94       	sec
    4d64:	c1 1c       	adc	r12, r1
    4d66:	d1 1c       	adc	r13, r1
    4d68:	9c 2d       	mov	r25, r12
    4d6a:	8d 2d       	mov	r24, r13
    4d6c:	03 c0       	rjmp	.+6      	; 0x4d74 <_ZN9DNSClient12BuildRequestEPKc+0x100>
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    4d6e:	67 01       	movw	r12, r14
    4d70:	9e 2d       	mov	r25, r14
    4d72:	8f 2d       	mov	r24, r15
            len = end-start;
            iUdp.write(&len, sizeof(len));
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
        }
        start = end+1;
    4d74:	e9 2f       	mov	r30, r25
    4d76:	f8 2f       	mov	r31, r24
    4d78:	d9 cf       	rjmp	.-78     	; 0x4d2c <_ZN9DNSClient12BuildRequestEPKc+0xb8>
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    4d7a:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write(&len, sizeof(len));
    4d7c:	c5 01       	movw	r24, r10
    4d7e:	be 01       	movw	r22, r28
    4d80:	6f 5f       	subi	r22, 0xFF	; 255
    4d82:	7f 4f       	sbci	r23, 0xFF	; 255
    4d84:	41 e0       	ldi	r20, 0x01	; 1
    4d86:	50 e0       	ldi	r21, 0x00	; 0
    4d88:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    4d8c:	00 e0       	ldi	r16, 0x00	; 0
    4d8e:	11 e0       	ldi	r17, 0x01	; 1
    4d90:	1b 83       	std	Y+3, r17	; 0x03
    4d92:	0a 83       	std	Y+2, r16	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4d94:	c5 01       	movw	r24, r10
    4d96:	be 01       	movw	r22, r28
    4d98:	6e 5f       	subi	r22, 0xFE	; 254
    4d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    4d9c:	42 e0       	ldi	r20, 0x02	; 2
    4d9e:	50 e0       	ldi	r21, 0x00	; 0
    4da0:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    4da4:	1b 83       	std	Y+3, r17	; 0x03
    4da6:	0a 83       	std	Y+2, r16	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    4da8:	c5 01       	movw	r24, r10
    4daa:	be 01       	movw	r22, r28
    4dac:	6e 5f       	subi	r22, 0xFE	; 254
    4dae:	7f 4f       	sbci	r23, 0xFF	; 255
    4db0:	42 e0       	ldi	r20, 0x02	; 2
    4db2:	50 e0       	ldi	r21, 0x00	; 0
    4db4:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    4db8:	81 e0       	ldi	r24, 0x01	; 1
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	0f 90       	pop	r0
    4dbe:	0f 90       	pop	r0
    4dc0:	0f 90       	pop	r0
    4dc2:	df 91       	pop	r29
    4dc4:	cf 91       	pop	r28
    4dc6:	1f 91       	pop	r17
    4dc8:	0f 91       	pop	r16
    4dca:	ff 90       	pop	r15
    4dcc:	ef 90       	pop	r14
    4dce:	df 90       	pop	r13
    4dd0:	cf 90       	pop	r12
    4dd2:	bf 90       	pop	r11
    4dd4:	af 90       	pop	r10
    4dd6:	08 95       	ret
        while (*end && (*end != '.') )
        {
            end++;
        }

        if (end-start > 0)
    4dd8:	87 01       	movw	r16, r14
    4dda:	0c 19       	sub	r16, r12
    4ddc:	1d 09       	sbc	r17, r13
    4dde:	10 16       	cp	r1, r16
    4de0:	11 06       	cpc	r1, r17
    4de2:	0c f4       	brge	.+2      	; 0x4de6 <_ZN9DNSClient12BuildRequestEPKc+0x172>
    4de4:	ab cf       	rjmp	.-170    	; 0x4d3c <_ZN9DNSClient12BuildRequestEPKc+0xc8>
    4de6:	b8 cf       	rjmp	.-144    	; 0x4d58 <_ZN9DNSClient12BuildRequestEPKc+0xe4>

00004de8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:
    return 1;
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    4de8:	2f 92       	push	r2
    4dea:	3f 92       	push	r3
    4dec:	4f 92       	push	r4
    4dee:	5f 92       	push	r5
    4df0:	6f 92       	push	r6
    4df2:	7f 92       	push	r7
    4df4:	8f 92       	push	r8
    4df6:	9f 92       	push	r9
    4df8:	af 92       	push	r10
    4dfa:	bf 92       	push	r11
    4dfc:	cf 92       	push	r12
    4dfe:	df 92       	push	r13
    4e00:	ef 92       	push	r14
    4e02:	ff 92       	push	r15
    4e04:	0f 93       	push	r16
    4e06:	1f 93       	push	r17
    4e08:	cf 93       	push	r28
    4e0a:	df 93       	push	r29
    4e0c:	cd b7       	in	r28, 0x3d	; 61
    4e0e:	de b7       	in	r29, 0x3e	; 62
    4e10:	63 97       	sbiw	r28, 0x13	; 19
    4e12:	0f b6       	in	r0, 0x3f	; 63
    4e14:	f8 94       	cli
    4e16:	de bf       	out	0x3e, r29	; 62
    4e18:	0f be       	out	0x3f, r0	; 63
    4e1a:	cd bf       	out	0x3d, r28	; 61
    4e1c:	6c 01       	movw	r12, r24
    4e1e:	8b 01       	movw	r16, r22
    4e20:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    4e22:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    4e26:	2b 01       	movw	r4, r22
    4e28:	3c 01       	movw	r6, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4e2a:	ee 24       	eor	r14, r14
    4e2c:	ff 24       	eor	r15, r15
    4e2e:	68 94       	set
    4e30:	e3 f8       	bld	r14, 3
    4e32:	ec 0c       	add	r14, r12
    4e34:	fd 1c       	adc	r15, r13
    {
        if((millis() - startTime) > aTimeout)
    4e36:	48 01       	movw	r8, r16
    4e38:	aa 24       	eor	r10, r10
    4e3a:	bb 24       	eor	r11, r11
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4e3c:	14 c0       	rjmp	.+40     	; 0x4e66 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x7e>
    {
        if((millis() - startTime) > aTimeout)
    4e3e:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    4e42:	dc 01       	movw	r26, r24
    4e44:	cb 01       	movw	r24, r22
    4e46:	84 19       	sub	r24, r4
    4e48:	95 09       	sbc	r25, r5
    4e4a:	a6 09       	sbc	r26, r6
    4e4c:	b7 09       	sbc	r27, r7
    4e4e:	88 16       	cp	r8, r24
    4e50:	99 06       	cpc	r9, r25
    4e52:	aa 06       	cpc	r10, r26
    4e54:	bb 06       	cpc	r11, r27
    4e56:	08 f4       	brcc	.+2      	; 0x4e5a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x72>
    4e58:	3b c1       	rjmp	.+630    	; 0x50d0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e8>
            return TIMED_OUT;
        delay(50);
    4e5a:	62 e3       	ldi	r22, 0x32	; 50
    4e5c:	70 e0       	ldi	r23, 0x00	; 0
    4e5e:	80 e0       	ldi	r24, 0x00	; 0
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    4e66:	0e 2d       	mov	r16, r14
    4e68:	1f 2d       	mov	r17, r15
    4e6a:	c7 01       	movw	r24, r14
    4e6c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN11EthernetUDP11parsePacketEv>
    4e70:	18 16       	cp	r1, r24
    4e72:	19 06       	cpc	r1, r25
    4e74:	24 f7       	brge	.-56     	; 0x4e3e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x56>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    4e76:	f6 01       	movw	r30, r12
    4e78:	42 81       	ldd	r20, Z+2	; 0x02
    4e7a:	53 81       	ldd	r21, Z+3	; 0x03
    4e7c:	64 81       	ldd	r22, Z+4	; 0x04
    4e7e:	75 81       	ldd	r23, Z+5	; 0x05
    4e80:	81 8d       	ldd	r24, Z+25	; 0x19
    4e82:	92 8d       	ldd	r25, Z+26	; 0x1a
    4e84:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4e86:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4e88:	48 17       	cp	r20, r24
    4e8a:	59 07       	cpc	r21, r25
    4e8c:	6a 07       	cpc	r22, r26
    4e8e:	7b 07       	cpc	r23, r27
    4e90:	09 f0       	breq	.+2      	; 0x4e94 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xac>
    4e92:	21 c1       	rjmp	.+578    	; 0x50d6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ee>
    4e94:	85 8d       	ldd	r24, Z+29	; 0x1d
    4e96:	96 8d       	ldd	r25, Z+30	; 0x1e
    4e98:	85 33       	cpi	r24, 0x35	; 53
    4e9a:	91 05       	cpc	r25, r1
    4e9c:	09 f0       	breq	.+2      	; 0x4ea0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>
    4e9e:	1e c1       	rjmp	.+572    	; 0x50dc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2f4>
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    4ea0:	8e 2d       	mov	r24, r14
    4ea2:	9f 2d       	mov	r25, r15
    4ea4:	0e 94 c3 04 	call	0x986	; 0x986 <_ZN11EthernetUDP9availableEv>
    4ea8:	8c 30       	cpi	r24, 0x0C	; 12
    4eaa:	91 05       	cpc	r25, r1
    4eac:	0c f4       	brge	.+2      	; 0x4eb0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc8>
    4eae:	19 c1       	rjmp	.+562    	; 0x50e2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fa>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    4eb0:	8e 2d       	mov	r24, r14
    4eb2:	9f 2d       	mov	r25, r15
    4eb4:	be 01       	movw	r22, r28
    4eb6:	68 5f       	subi	r22, 0xF8	; 248
    4eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    4eba:	4c e0       	ldi	r20, 0x0C	; 12
    4ebc:	50 e0       	ldi	r21, 0x00	; 0
    4ebe:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    4ec2:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ec4:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ec6:	58 2f       	mov	r21, r24
    4ec8:	49 2f       	mov	r20, r25
    4eca:	5f 83       	std	Y+7, r21	; 0x07
    4ecc:	4e 83       	std	Y+6, r20	; 0x06
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    4ece:	f6 01       	movw	r30, r12
    4ed0:	26 81       	ldd	r18, Z+6	; 0x06
    4ed2:	37 81       	ldd	r19, Z+7	; 0x07
    4ed4:	88 85       	ldd	r24, Y+8	; 0x08
    4ed6:	99 85       	ldd	r25, Y+9	; 0x09
    4ed8:	28 17       	cp	r18, r24
    4eda:	39 07       	cpc	r19, r25
    4edc:	11 f4       	brne	.+4      	; 0x4ee2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xfa>
    4ede:	55 23       	and	r21, r21
    4ee0:	3c f0       	brlt	.+14     	; 0x4ef0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x108>
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    4ee2:	80 2f       	mov	r24, r16
    4ee4:	91 2f       	mov	r25, r17
    4ee6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    4eea:	8c ef       	ldi	r24, 0xFC	; 252
    4eec:	9f ef       	ldi	r25, 0xFF	; 255
    4eee:	fb c0       	rjmp	.+502    	; 0x50e6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    // Success!  Everything buffered okay
    return 1;
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
    4ef0:	4f 70       	andi	r20, 0x0F	; 15
    4ef2:	52 70       	andi	r21, 0x02	; 2
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    4ef4:	41 15       	cp	r20, r1
    4ef6:	51 05       	cpc	r21, r1
    4ef8:	39 f0       	breq	.+14     	; 0x4f08 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x120>
    {
        // Mark the entire packet as read
        iUdp.flush();
    4efa:	8e 2d       	mov	r24, r14
    4efc:	9f 2d       	mov	r25, r15
    4efe:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    4f02:	8b ef       	ldi	r24, 0xFB	; 251
    4f04:	9f ef       	ldi	r25, 0xFF	; 255
    4f06:	ef c0       	rjmp	.+478    	; 0x50e6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    4f08:	8e 84       	ldd	r8, Y+14	; 0x0e
    4f0a:	9f 84       	ldd	r9, Y+15	; 0x0f
    4f0c:	98 24       	eor	r9, r8
    4f0e:	89 24       	eor	r8, r9
    4f10:	98 24       	eor	r9, r8
    if (answerCount == 0 )
    4f12:	81 14       	cp	r8, r1
    4f14:	91 04       	cpc	r9, r1
    4f16:	59 f0       	breq	.+22     	; 0x4f2e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x146>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    4f18:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f1c:	00 97       	sbiw	r24, 0x00	; 0
    4f1e:	71 f4       	brne	.+28     	; 0x4f3c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x154>
    4f20:	cc 24       	eor	r12, r12
    4f22:	dd 24       	eor	r13, r13

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    4f24:	44 24       	eor	r4, r4
    4f26:	55 24       	eor	r5, r5
    4f28:	68 94       	set
    4f2a:	42 f8       	bld	r4, 2
    4f2c:	3e c0       	rjmp	.+124    	; 0x4faa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c2>
    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    {
        // Mark the entire packet as read
        iUdp.flush();
    4f2e:	8e 2d       	mov	r24, r14
    4f30:	9f 2d       	mov	r25, r15
    4f32:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    4f36:	8a ef       	ldi	r24, 0xFA	; 250
    4f38:	9f ef       	ldi	r25, 0xFF	; 255
    4f3a:	d5 c0       	rjmp	.+426    	; 0x50e6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    4f3c:	cc 24       	eor	r12, r12
    4f3e:	dd 24       	eor	r13, r13
    4f40:	44 24       	eor	r4, r4
    4f42:	55 24       	eor	r5, r5
    4f44:	68 94       	set
    4f46:	42 f8       	bld	r4, 2
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4f48:	80 2f       	mov	r24, r16
    4f4a:	91 2f       	mov	r25, r17
    4f4c:	be 01       	movw	r22, r28
    4f4e:	6f 5f       	subi	r22, 0xFF	; 255
    4f50:	7f 4f       	sbci	r23, 0xFF	; 255
    4f52:	41 e0       	ldi	r20, 0x01	; 1
    4f54:	50 e0       	ldi	r21, 0x00	; 0
    4f56:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    4f5a:	89 81       	ldd	r24, Y+1	; 0x01
    4f5c:	88 23       	and	r24, r24
    4f5e:	71 f0       	breq	.+28     	; 0x4f7c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x194>
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4f60:	81 50       	subi	r24, 0x01	; 1
    4f62:	89 83       	std	Y+1, r24	; 0x01
                {
                    iUdp.read(); // we don't care about the returned byte
    4f64:	80 2f       	mov	r24, r16
    4f66:	91 2f       	mov	r25, r17
    4f68:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    4f6c:	89 81       	ldd	r24, Y+1	; 0x01
    4f6e:	98 2f       	mov	r25, r24
    4f70:	91 50       	subi	r25, 0x01	; 1
    4f72:	99 83       	std	Y+1, r25	; 0x01
    4f74:	88 23       	and	r24, r24
    4f76:	b1 f7       	brne	.-20     	; 0x4f64 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    {
        // Skip over the name
        uint8_t len;
        do
    4f78:	99 23       	and	r25, r25
    4f7a:	31 f7       	brne	.-52     	; 0x4f48 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x160>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    4f7c:	72 01       	movw	r14, r4
        } while (len != 0);

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    4f7e:	80 2f       	mov	r24, r16
    4f80:	91 2f       	mov	r25, r17
    4f82:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
    4f86:	08 94       	sec
    4f88:	e1 08       	sbc	r14, r1
    4f8a:	f1 08       	sbc	r15, r1
                }
            }
        } while (len != 0);

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
    4f8c:	e1 14       	cp	r14, r1
    4f8e:	f1 04       	cpc	r15, r1
    4f90:	b1 f7       	brne	.-20     	; 0x4f7e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x196>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    4f92:	08 94       	sec
    4f94:	c1 1c       	adc	r12, r1
    4f96:	d1 1c       	adc	r13, r1
    4f98:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f9c:	98 27       	eor	r25, r24
    4f9e:	89 27       	eor	r24, r25
    4fa0:	98 27       	eor	r25, r24
    4fa2:	c8 16       	cp	r12, r24
    4fa4:	d9 06       	cpc	r13, r25
    4fa6:	80 f2       	brcs	.-96     	; 0x4f48 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x160>
    4fa8:	bb cf       	rjmp	.-138    	; 0x4f20 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x138>
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    4faa:	80 2f       	mov	r24, r16
    4fac:	91 2f       	mov	r25, r17
    4fae:	be 01       	movw	r22, r28
    4fb0:	6f 5f       	subi	r22, 0xFF	; 255
    4fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    4fb4:	41 e0       	ldi	r20, 0x01	; 1
    4fb6:	50 e0       	ldi	r21, 0x00	; 0
    4fb8:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    4fbc:	89 81       	ldd	r24, Y+1	; 0x01
    4fbe:	98 2f       	mov	r25, r24
    4fc0:	90 7c       	andi	r25, 0xC0	; 192
    4fc2:	79 f4       	brne	.+30     	; 0x4fe2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1fa>
            {
                // It's just a normal label
                if (len > 0)
    4fc4:	88 23       	and	r24, r24
    4fc6:	a9 f0       	breq	.+42     	; 0x4ff2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x20a>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    4fc8:	81 50       	subi	r24, 0x01	; 1
    4fca:	89 83       	std	Y+1, r24	; 0x01
                    {
                        iUdp.read(); // we don't care about the returned byte
    4fcc:	80 2f       	mov	r24, r16
    4fce:	91 2f       	mov	r25, r17
    4fd0:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    4fd4:	89 81       	ldd	r24, Y+1	; 0x01
    4fd6:	98 2f       	mov	r25, r24
    4fd8:	91 50       	subi	r25, 0x01	; 1
    4fda:	99 83       	std	Y+1, r25	; 0x01
    4fdc:	88 23       	and	r24, r24
    4fde:	b1 f7       	brne	.-20     	; 0x4fcc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1e4>
    4fe0:	06 c0       	rjmp	.+12     	; 0x4fee <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x206>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    4fe2:	80 2f       	mov	r24, r16
    4fe4:	91 2f       	mov	r25, r17
    4fe6:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
                // And set len so that we drop out of the name loop
                len = 0;
    4fea:	19 82       	std	Y+1, r1	; 0x01
    4fec:	02 c0       	rjmp	.+4      	; 0x4ff2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x20a>

    for (uint16_t i =0; i < answerCount; i++)
    {
        // Skip the name
        uint8_t len;
        do
    4fee:	99 23       	and	r25, r25
    4ff0:	e1 f6       	brne	.-72     	; 0x4faa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c2>
        } while (len != 0);

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    4ff2:	80 2f       	mov	r24, r16
    4ff4:	91 2f       	mov	r25, r17
    4ff6:	be 01       	movw	r22, r28
    4ff8:	6c 5f       	subi	r22, 0xFC	; 252
    4ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    4ffc:	42 e0       	ldi	r20, 0x02	; 2
    4ffe:	50 e0       	ldi	r21, 0x00	; 0
    5000:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    5004:	80 2f       	mov	r24, r16
    5006:	91 2f       	mov	r25, r17
    5008:	be 01       	movw	r22, r28
    500a:	6e 5f       	subi	r22, 0xFE	; 254
    500c:	7f 4f       	sbci	r23, 0xFF	; 255
    500e:	42 e0       	ldi	r20, 0x02	; 2
    5010:	50 e0       	ldi	r21, 0x00	; 0
    5012:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
    5016:	72 01       	movw	r14, r4

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    5018:	80 2f       	mov	r24, r16
    501a:	91 2f       	mov	r25, r17
    501c:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
    5020:	08 94       	sec
    5022:	e1 08       	sbc	r14, r1
    5024:	f1 08       	sbc	r15, r1
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
    5026:	e1 14       	cp	r14, r1
    5028:	f1 04       	cpc	r15, r1
    502a:	b1 f7       	brne	.-20     	; 0x5018 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x230>
            iUdp.read(); // we don't care about the returned byte
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    502c:	80 2f       	mov	r24, r16
    502e:	91 2f       	mov	r25, r17
    5030:	be 01       	movw	r22, r28
    5032:	6a 5f       	subi	r22, 0xFA	; 250
    5034:	7f 4f       	sbci	r23, 0xFF	; 255
    5036:	42 e0       	ldi	r20, 0x02	; 2
    5038:	50 e0       	ldi	r21, 0x00	; 0
    503a:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    503e:	8c 81       	ldd	r24, Y+4	; 0x04
    5040:	9d 81       	ldd	r25, Y+5	; 0x05
    5042:	f1 e0       	ldi	r31, 0x01	; 1
    5044:	80 30       	cpi	r24, 0x00	; 0
    5046:	9f 07       	cpc	r25, r31
    5048:	29 f0       	breq	.+10     	; 0x5054 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26c>
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    504a:	8e 81       	ldd	r24, Y+6	; 0x06
    504c:	9f 81       	ldd	r25, Y+7	; 0x07
    504e:	00 97       	sbiw	r24, 0x00	; 0
    5050:	01 f5       	brne	.+64     	; 0x5092 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2aa>
    5052:	30 c0       	rjmp	.+96     	; 0x50b4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2cc>

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    5054:	8a 81       	ldd	r24, Y+2	; 0x02
    5056:	9b 81       	ldd	r25, Y+3	; 0x03
    5058:	21 e0       	ldi	r18, 0x01	; 1
    505a:	80 30       	cpi	r24, 0x00	; 0
    505c:	92 07       	cpc	r25, r18
    505e:	a9 f7       	brne	.-22     	; 0x504a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x262>
        {
            if (htons(header_flags) != 4)
    5060:	8e 81       	ldd	r24, Y+6	; 0x06
    5062:	9f 81       	ldd	r25, Y+7	; 0x07
    5064:	e4 e0       	ldi	r30, 0x04	; 4
    5066:	80 30       	cpi	r24, 0x00	; 0
    5068:	9e 07       	cpc	r25, r30
    506a:	39 f0       	breq	.+14     	; 0x507a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x292>
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    506c:	80 2f       	mov	r24, r16
    506e:	91 2f       	mov	r25, r17
    5070:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11EthernetUDP5flushEv>
                return -9;//INVALID_RESPONSE;
    5074:	87 ef       	ldi	r24, 0xF7	; 247
    5076:	9f ef       	ldi	r25, 0xFF	; 255
    5078:	36 c0       	rjmp	.+108    	; 0x50e6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
            }
            iUdp.read(aAddress.raw_address(), 4);
    507a:	b1 01       	movw	r22, r2
    507c:	6e 5f       	subi	r22, 0xFE	; 254
    507e:	7f 4f       	sbci	r23, 0xFF	; 255
    5080:	80 2f       	mov	r24, r16
    5082:	91 2f       	mov	r25, r17
    5084:	44 e0       	ldi	r20, 0x04	; 4
    5086:	50 e0       	ldi	r21, 0x00	; 0
    5088:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN11EthernetUDP4readEPhj>
            return SUCCESS;
    508c:	81 e0       	ldi	r24, 0x01	; 1
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	2a c0       	rjmp	.+84     	; 0x50e6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    5092:	ee 24       	eor	r14, r14
    5094:	ff 24       	eor	r15, r15
            {
                iUdp.read(); // we don't care about the returned byte
    5096:	80 2f       	mov	r24, r16
    5098:	91 2f       	mov	r25, r17
    509a:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN11EthernetUDP4readEv>
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    509e:	08 94       	sec
    50a0:	e1 1c       	adc	r14, r1
    50a2:	f1 1c       	adc	r15, r1
    50a4:	8e 81       	ldd	r24, Y+6	; 0x06
    50a6:	9f 81       	ldd	r25, Y+7	; 0x07
    50a8:	98 27       	eor	r25, r24
    50aa:	89 27       	eor	r24, r25
    50ac:	98 27       	eor	r25, r24
    50ae:	e8 16       	cp	r14, r24
    50b0:	f9 06       	cpc	r15, r25
    50b2:	88 f3       	brcs	.-30     	; 0x5096 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ae>
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    50b4:	08 94       	sec
    50b6:	c1 1c       	adc	r12, r1
    50b8:	d1 1c       	adc	r13, r1
    50ba:	c8 14       	cp	r12, r8
    50bc:	d9 04       	cpc	r13, r9
    50be:	09 f0       	breq	.+2      	; 0x50c2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2da>
    50c0:	74 cf       	rjmp	.-280    	; 0x4faa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c2>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    50c2:	80 2f       	mov	r24, r16
    50c4:	91 2f       	mov	r25, r17
    50c6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_ZN11EthernetUDP5flushEv>

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    50ca:	86 ef       	ldi	r24, 0xF6	; 246
    50cc:	9f ef       	ldi	r25, 0xFF	; 255
    50ce:	0b c0       	rjmp	.+22     	; 0x50e6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    50d0:	8f ef       	ldi	r24, 0xFF	; 255
    50d2:	9f ef       	ldi	r25, 0xFF	; 255
    50d4:	08 c0       	rjmp	.+16     	; 0x50e6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    50d6:	8e ef       	ldi	r24, 0xFE	; 254
    50d8:	9f ef       	ldi	r25, 0xFF	; 255
    50da:	05 c0       	rjmp	.+10     	; 0x50e6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    50dc:	8e ef       	ldi	r24, 0xFE	; 254
    50de:	9f ef       	ldi	r25, 0xFF	; 255
    50e0:	02 c0       	rjmp	.+4      	; 0x50e6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    50e2:	8d ef       	ldi	r24, 0xFD	; 253
    50e4:	9f ef       	ldi	r25, 0xFF	; 255
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    50e6:	63 96       	adiw	r28, 0x13	; 19
    50e8:	0f b6       	in	r0, 0x3f	; 63
    50ea:	f8 94       	cli
    50ec:	de bf       	out	0x3e, r29	; 62
    50ee:	0f be       	out	0x3f, r0	; 63
    50f0:	cd bf       	out	0x3d, r28	; 61
    50f2:	df 91       	pop	r29
    50f4:	cf 91       	pop	r28
    50f6:	1f 91       	pop	r17
    50f8:	0f 91       	pop	r16
    50fa:	ff 90       	pop	r15
    50fc:	ef 90       	pop	r14
    50fe:	df 90       	pop	r13
    5100:	cf 90       	pop	r12
    5102:	bf 90       	pop	r11
    5104:	af 90       	pop	r10
    5106:	9f 90       	pop	r9
    5108:	8f 90       	pop	r8
    510a:	7f 90       	pop	r7
    510c:	6f 90       	pop	r6
    510e:	5f 90       	pop	r5
    5110:	4f 90       	pop	r4
    5112:	3f 90       	pop	r3
    5114:	2f 90       	pop	r2
    5116:	08 95       	ret

00005118 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    5118:	8f 92       	push	r8
    511a:	9f 92       	push	r9
    511c:	af 92       	push	r10
    511e:	bf 92       	push	r11
    5120:	cf 92       	push	r12
    5122:	df 92       	push	r13
    5124:	ef 92       	push	r14
    5126:	ff 92       	push	r15
    5128:	0f 93       	push	r16
    512a:	1f 93       	push	r17
    512c:	cf 93       	push	r28
    512e:	df 93       	push	r29
    5130:	00 d0       	rcall	.+0      	; 0x5132 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    5132:	00 d0       	rcall	.+0      	; 0x5134 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    5134:	00 d0       	rcall	.+0      	; 0x5136 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    5136:	cd b7       	in	r28, 0x3d	; 61
    5138:	de b7       	in	r29, 0x3e	; 62
    513a:	7c 01       	movw	r14, r24
    513c:	6b 01       	movw	r12, r22
    513e:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    5140:	0e 94 e5 25 	call	0x4bca	; 0x4bca <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    5144:	00 97       	sbiw	r24, 0x00	; 0
    5146:	09 f0       	breq	.+2      	; 0x514a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    5148:	69 c0       	rjmp	.+210    	; 0x521c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x104>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    514a:	f7 01       	movw	r30, r14
    514c:	82 81       	ldd	r24, Z+2	; 0x02
    514e:	93 81       	ldd	r25, Z+3	; 0x03
    5150:	a4 81       	ldd	r26, Z+4	; 0x04
    5152:	b5 81       	ldd	r27, Z+5	; 0x05
    5154:	40 91 e8 04 	lds	r20, 0x04E8
    5158:	50 91 e9 04 	lds	r21, 0x04E9
    515c:	60 91 ea 04 	lds	r22, 0x04EA
    5160:	70 91 eb 04 	lds	r23, 0x04EB
    5164:	84 17       	cp	r24, r20
    5166:	95 07       	cpc	r25, r21
    5168:	a6 07       	cpc	r26, r22
    516a:	b7 07       	cpc	r27, r23
    516c:	09 f4       	brne	.+2      	; 0x5170 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    516e:	59 c0       	rjmp	.+178    	; 0x5222 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x10a>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    5170:	88 24       	eor	r8, r8
    5172:	99 24       	eor	r9, r9
    5174:	68 94       	set
    5176:	83 f8       	bld	r8, 3
    5178:	8e 0c       	add	r8, r14
    517a:	9f 1c       	adc	r9, r15
    517c:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    5180:	6f 70       	andi	r22, 0x0F	; 15
    5182:	70 70       	andi	r23, 0x00	; 0
    5184:	60 50       	subi	r22, 0x00	; 0
    5186:	7c 4f       	sbci	r23, 0xFC	; 252
    5188:	c4 01       	movw	r24, r8
    518a:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZN11EthernetUDP5beginEj>
    518e:	81 30       	cpi	r24, 0x01	; 1
    5190:	09 f0       	breq	.+2      	; 0x5194 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x7c>
    5192:	4a c0       	rjmp	.+148    	; 0x5228 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x110>
    5194:	83 ea       	ldi	r24, 0xA3	; 163
    5196:	91 e0       	ldi	r25, 0x01	; 1
    5198:	9a 83       	std	Y+2, r25	; 0x02
    519a:	89 83       	std	Y+1, r24	; 0x01
    519c:	f7 01       	movw	r30, r14
    519e:	82 81       	ldd	r24, Z+2	; 0x02
    51a0:	93 81       	ldd	r25, Z+3	; 0x03
    51a2:	a4 81       	ldd	r26, Z+4	; 0x04
    51a4:	b5 81       	ldd	r27, Z+5	; 0x05
    51a6:	8b 83       	std	Y+3, r24	; 0x03
    51a8:	9c 83       	std	Y+4, r25	; 0x04
    51aa:	ad 83       	std	Y+5, r26	; 0x05
    51ac:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    51ae:	c4 01       	movw	r24, r8
    51b0:	be 01       	movw	r22, r28
    51b2:	6f 5f       	subi	r22, 0xFF	; 255
    51b4:	7f 4f       	sbci	r23, 0xFF	; 255
    51b6:	45 e3       	ldi	r20, 0x35	; 53
    51b8:	50 e0       	ldi	r21, 0x00	; 0
    51ba:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
    51be:	8c 01       	movw	r16, r24
            if (ret != 0)
    51c0:	00 97       	sbiw	r24, 0x00	; 0
    51c2:	41 f1       	breq	.+80     	; 0x5214 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfc>
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    51c4:	c7 01       	movw	r24, r14
    51c6:	b6 01       	movw	r22, r12
    51c8:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <_ZN9DNSClient12BuildRequestEPKc>
    51cc:	08 2f       	mov	r16, r24
    51ce:	19 2f       	mov	r17, r25
                if (ret != 0)
    51d0:	01 15       	cp	r16, r1
    51d2:	11 05       	cpc	r17, r1
    51d4:	f9 f0       	breq	.+62     	; 0x5214 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfc>
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    51d6:	c4 01       	movw	r24, r8
    51d8:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZN11EthernetUDP9endPacketEv>
    51dc:	8c 01       	movw	r16, r24
                    if (ret != 0)
    51de:	00 97       	sbiw	r24, 0x00	; 0
    51e0:	31 f4       	brne	.+12     	; 0x51ee <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd6>
    51e2:	18 c0       	rjmp	.+48     	; 0x5214 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfc>
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    51e4:	ff ef       	ldi	r31, 0xFF	; 255
    51e6:	0f 3f       	cpi	r16, 0xFF	; 255
    51e8:	1f 07       	cpc	r17, r31
    51ea:	a1 f4       	brne	.+40     	; 0x5214 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfc>
    51ec:	05 c0       	rjmp	.+10     	; 0x51f8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
                    if (ret != 0)
    51ee:	0f 2e       	mov	r0, r31
    51f0:	f3 e0       	ldi	r31, 0x03	; 3
    51f2:	cf 2e       	mov	r12, r31
    51f4:	dd 24       	eor	r13, r13
    51f6:	f0 2d       	mov	r31, r0
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    51f8:	c7 01       	movw	r24, r14
    51fa:	68 e8       	ldi	r22, 0x88	; 136
    51fc:	73 e1       	ldi	r23, 0x13	; 19
    51fe:	a5 01       	movw	r20, r10
    5200:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    5204:	08 2f       	mov	r16, r24
    5206:	19 2f       	mov	r17, r25
    5208:	08 94       	sec
    520a:	c1 08       	sbc	r12, r1
    520c:	d1 08       	sbc	r13, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    520e:	c1 14       	cp	r12, r1
    5210:	d1 04       	cpc	r13, r1
    5212:	41 f7       	brne	.-48     	; 0x51e4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xcc>
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    5214:	c4 01       	movw	r24, r8
    5216:	0e 94 fd 05 	call	0xbfa	; 0xbfa <_ZN11EthernetUDP4stopEv>
    521a:	08 c0       	rjmp	.+16     	; 0x522c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x114>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    521c:	01 e0       	ldi	r16, 0x01	; 1
    521e:	10 e0       	ldi	r17, 0x00	; 0
    5220:	05 c0       	rjmp	.+10     	; 0x522c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x114>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    5222:	0e ef       	ldi	r16, 0xFE	; 254
    5224:	1f ef       	ldi	r17, 0xFF	; 255
    5226:	02 c0       	rjmp	.+4      	; 0x522c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x114>
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    5228:	00 e0       	ldi	r16, 0x00	; 0
    522a:	10 e0       	ldi	r17, 0x00	; 0
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    522c:	80 2f       	mov	r24, r16
    522e:	91 2f       	mov	r25, r17
    5230:	26 96       	adiw	r28, 0x06	; 6
    5232:	0f b6       	in	r0, 0x3f	; 63
    5234:	f8 94       	cli
    5236:	de bf       	out	0x3e, r29	; 62
    5238:	0f be       	out	0x3f, r0	; 63
    523a:	cd bf       	out	0x3d, r28	; 61
    523c:	df 91       	pop	r29
    523e:	cf 91       	pop	r28
    5240:	1f 91       	pop	r17
    5242:	0f 91       	pop	r16
    5244:	ff 90       	pop	r15
    5246:	ef 90       	pop	r14
    5248:	df 90       	pop	r13
    524a:	cf 90       	pop	r12
    524c:	bf 90       	pop	r11
    524e:	af 90       	pop	r10
    5250:	9f 90       	pop	r9
    5252:	8f 90       	pop	r8
    5254:	08 95       	ret

00005256 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    5256:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    5258:	86 ee       	ldi	r24, 0xE6	; 230
    525a:	94 e0       	ldi	r25, 0x04	; 4
    525c:	60 e0       	ldi	r22, 0x00	; 0
    525e:	40 e0       	ldi	r20, 0x00	; 0
    5260:	20 e0       	ldi	r18, 0x00	; 0
    5262:	00 e0       	ldi	r16, 0x00	; 0
    5264:	0e 94 b2 10 	call	0x2164	; 0x2164 <_ZN9IPAddressC1Ehhhh>
    5268:	0f 91       	pop	r16
    526a:	08 95       	ret

0000526c <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    526c:	00 97       	sbiw	r24, 0x00	; 0
    526e:	29 f0       	breq	.+10     	; 0x527a <_Z10randomSeedj+0xe>
    srandom(seed);
    5270:	bc 01       	movw	r22, r24
    5272:	80 e0       	ldi	r24, 0x00	; 0
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	0e 94 c8 35 	call	0x6b90	; 0x6b90 <srandom>
    527a:	08 95       	ret

0000527c <_Z6randoml>:
  }
}

long random(long howbig)
{
    527c:	cf 92       	push	r12
    527e:	df 92       	push	r13
    5280:	ef 92       	push	r14
    5282:	ff 92       	push	r15
    5284:	0f 93       	push	r16
    5286:	1f 93       	push	r17
    5288:	6b 01       	movw	r12, r22
    528a:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    528c:	61 15       	cp	r22, r1
    528e:	71 05       	cpc	r23, r1
    5290:	81 05       	cpc	r24, r1
    5292:	91 05       	cpc	r25, r1
    5294:	49 f0       	breq	.+18     	; 0x52a8 <_Z6randoml+0x2c>
    return 0;
  }
  return random() % howbig;
    5296:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <random>
    529a:	a7 01       	movw	r20, r14
    529c:	96 01       	movw	r18, r12
    529e:	0e 94 25 34 	call	0x684a	; 0x684a <__divmodsi4>
    52a2:	8b 01       	movw	r16, r22
    52a4:	9c 01       	movw	r18, r24
    52a6:	03 c0       	rjmp	.+6      	; 0x52ae <_Z6randoml+0x32>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    52a8:	00 e0       	ldi	r16, 0x00	; 0
    52aa:	10 e0       	ldi	r17, 0x00	; 0
    52ac:	98 01       	movw	r18, r16
  }
  return random() % howbig;
}
    52ae:	60 2f       	mov	r22, r16
    52b0:	71 2f       	mov	r23, r17
    52b2:	82 2f       	mov	r24, r18
    52b4:	93 2f       	mov	r25, r19
    52b6:	1f 91       	pop	r17
    52b8:	0f 91       	pop	r16
    52ba:	ff 90       	pop	r15
    52bc:	ef 90       	pop	r14
    52be:	df 90       	pop	r13
    52c0:	cf 90       	pop	r12
    52c2:	08 95       	ret

000052c4 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    52c4:	cf 92       	push	r12
    52c6:	df 92       	push	r13
    52c8:	ef 92       	push	r14
    52ca:	ff 92       	push	r15
    52cc:	6b 01       	movw	r12, r22
    52ce:	7c 01       	movw	r14, r24
    52d0:	da 01       	movw	r26, r20
    52d2:	c9 01       	movw	r24, r18
  if (howsmall >= howbig) {
    52d4:	c2 16       	cp	r12, r18
    52d6:	d3 06       	cpc	r13, r19
    52d8:	e4 06       	cpc	r14, r20
    52da:	f5 06       	cpc	r15, r21
    52dc:	74 f4       	brge	.+28     	; 0x52fa <_Z6randomll+0x36>
    return howsmall;
  }
  long diff = howbig - howsmall;
    52de:	8c 19       	sub	r24, r12
    52e0:	9d 09       	sbc	r25, r13
    52e2:	ae 09       	sbc	r26, r14
    52e4:	bf 09       	sbc	r27, r15
  return random(diff) + howsmall;
    52e6:	bc 01       	movw	r22, r24
    52e8:	cd 01       	movw	r24, r26
    52ea:	0e 94 3e 29 	call	0x527c	; 0x527c <_Z6randoml>
    52ee:	dc 01       	movw	r26, r24
    52f0:	cb 01       	movw	r24, r22
    52f2:	c8 0e       	add	r12, r24
    52f4:	d9 1e       	adc	r13, r25
    52f6:	ea 1e       	adc	r14, r26
    52f8:	fb 1e       	adc	r15, r27
}
    52fa:	6c 2d       	mov	r22, r12
    52fc:	7d 2d       	mov	r23, r13
    52fe:	8e 2d       	mov	r24, r14
    5300:	9f 2d       	mov	r25, r15
    5302:	ff 90       	pop	r15
    5304:	ef 90       	pop	r14
    5306:	df 90       	pop	r13
    5308:	cf 90       	pop	r12
    530a:	08 95       	ret

0000530c <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    530c:	4f 92       	push	r4
    530e:	5f 92       	push	r5
    5310:	6f 92       	push	r6
    5312:	7f 92       	push	r7
    5314:	af 92       	push	r10
    5316:	bf 92       	push	r11
    5318:	cf 92       	push	r12
    531a:	df 92       	push	r13
    531c:	ef 92       	push	r14
    531e:	ff 92       	push	r15
    5320:	0f 93       	push	r16
    5322:	1f 93       	push	r17
    5324:	cf 93       	push	r28
    5326:	df 93       	push	r29
    5328:	00 d0       	rcall	.+0      	; 0x532a <_Z3maplllll+0x1e>
    532a:	00 d0       	rcall	.+0      	; 0x532c <_Z3maplllll+0x20>
    532c:	cd b7       	in	r28, 0x3d	; 61
    532e:	de b7       	in	r29, 0x3e	; 62
    5330:	29 01       	movw	r4, r18
    5332:	3a 01       	movw	r6, r20
    5334:	e9 82       	std	Y+1, r14	; 0x01
    5336:	fa 82       	std	Y+2, r15	; 0x02
    5338:	0b 83       	std	Y+3, r16	; 0x03
    533a:	1c 83       	std	Y+4, r17	; 0x04
    533c:	76 01       	movw	r14, r12
    533e:	65 01       	movw	r12, r10
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    5340:	62 1b       	sub	r22, r18
    5342:	73 0b       	sbc	r23, r19
    5344:	84 0b       	sbc	r24, r20
    5346:	95 0b       	sbc	r25, r21
    5348:	2d 89       	ldd	r18, Y+21	; 0x15
    534a:	3e 89       	ldd	r19, Y+22	; 0x16
    534c:	4f 89       	ldd	r20, Y+23	; 0x17
    534e:	58 8d       	ldd	r21, Y+24	; 0x18
    5350:	2c 19       	sub	r18, r12
    5352:	3d 09       	sbc	r19, r13
    5354:	4e 09       	sbc	r20, r14
    5356:	5f 09       	sbc	r21, r15
    5358:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <__mulsi3>
    535c:	29 81       	ldd	r18, Y+1	; 0x01
    535e:	3a 81       	ldd	r19, Y+2	; 0x02
    5360:	4b 81       	ldd	r20, Y+3	; 0x03
    5362:	5c 81       	ldd	r21, Y+4	; 0x04
    5364:	24 19       	sub	r18, r4
    5366:	35 09       	sbc	r19, r5
    5368:	46 09       	sbc	r20, r6
    536a:	57 09       	sbc	r21, r7
    536c:	0e 94 25 34 	call	0x684a	; 0x684a <__divmodsi4>
    5370:	c2 0e       	add	r12, r18
    5372:	d3 1e       	adc	r13, r19
    5374:	e4 1e       	adc	r14, r20
    5376:	f5 1e       	adc	r15, r21
}
    5378:	6c 2d       	mov	r22, r12
    537a:	7d 2d       	mov	r23, r13
    537c:	8e 2d       	mov	r24, r14
    537e:	9f 2d       	mov	r25, r15
    5380:	0f 90       	pop	r0
    5382:	0f 90       	pop	r0
    5384:	0f 90       	pop	r0
    5386:	0f 90       	pop	r0
    5388:	df 91       	pop	r29
    538a:	cf 91       	pop	r28
    538c:	1f 91       	pop	r17
    538e:	0f 91       	pop	r16
    5390:	ff 90       	pop	r15
    5392:	ef 90       	pop	r14
    5394:	df 90       	pop	r13
    5396:	cf 90       	pop	r12
    5398:	bf 90       	pop	r11
    539a:	af 90       	pop	r10
    539c:	7f 90       	pop	r7
    539e:	6f 90       	pop	r6
    53a0:	5f 90       	pop	r5
    53a2:	4f 90       	pop	r4
    53a4:	08 95       	ret

000053a6 <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
    53a6:	08 95       	ret

000053a8 <_Z8makeWordhh>:
    53a8:	70 e0       	ldi	r23, 0x00	; 0
    53aa:	38 2f       	mov	r19, r24
    53ac:	20 e0       	ldi	r18, 0x00	; 0
    53ae:	26 2b       	or	r18, r22
    53b0:	37 2b       	or	r19, r23
    53b2:	82 2f       	mov	r24, r18
    53b4:	93 2f       	mov	r25, r19
    53b6:	08 95       	ret

000053b8 <_ZN10RobotModel4initEv>:
RobotModel::RobotModel() {
	// TODO Auto-generated constructor stub
	init();
}
void RobotModel::init(){
	_sectionCount = 0;
    53b8:	fc 01       	movw	r30, r24
    53ba:	13 8a       	std	Z+19, r1	; 0x13
    53bc:	12 8a       	std	Z+18, r1	; 0x12
}
    53be:	08 95       	ret

000053c0 <_ZN10RobotModelC1Ev>:
#include "..\Utils\ByteReader.h"
#include "..\Utils\ByteWriter.h"

RobotModel::RobotModel() {
	// TODO Auto-generated constructor stub
	init();
    53c0:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <_ZN10RobotModel4initEv>
}
    53c4:	08 95       	ret

000053c6 <_ZN10RobotModel6updateEPhjj>:
void RobotModel::init(){
	_sectionCount = 0;
}

void RobotModel::update(unsigned char data[], unsigned int offset, unsigned int length){
    53c6:	2f 92       	push	r2
    53c8:	3f 92       	push	r3
    53ca:	4f 92       	push	r4
    53cc:	5f 92       	push	r5
    53ce:	6f 92       	push	r6
    53d0:	7f 92       	push	r7
    53d2:	8f 92       	push	r8
    53d4:	9f 92       	push	r9
    53d6:	af 92       	push	r10
    53d8:	bf 92       	push	r11
    53da:	cf 92       	push	r12
    53dc:	df 92       	push	r13
    53de:	ef 92       	push	r14
    53e0:	ff 92       	push	r15
    53e2:	0f 93       	push	r16
    53e4:	1f 93       	push	r17
    53e6:	cf 93       	push	r28
    53e8:	df 93       	push	r29
    53ea:	00 d0       	rcall	.+0      	; 0x53ec <_ZN10RobotModel6updateEPhjj+0x26>
    53ec:	00 d0       	rcall	.+0      	; 0x53ee <_ZN10RobotModel6updateEPhjj+0x28>
    53ee:	0f 92       	push	r0
    53f0:	cd b7       	in	r28, 0x3d	; 61
    53f2:	de b7       	in	r29, 0x3e	; 62
    53f4:	4c 01       	movw	r8, r24
    53f6:	3b 01       	movw	r6, r22
	if (data[offset++] == PACKET_VERSION){
    53f8:	84 2f       	mov	r24, r20
    53fa:	95 2f       	mov	r25, r21
    53fc:	fb 01       	movw	r30, r22
    53fe:	e8 0f       	add	r30, r24
    5400:	f9 1f       	adc	r31, r25
    5402:	20 81       	ld	r18, Z
    5404:	01 96       	adiw	r24, 0x01	; 1
    5406:	9a 83       	std	Y+2, r25	; 0x02
    5408:	89 83       	std	Y+1, r24	; 0x01
    540a:	24 30       	cpi	r18, 0x04	; 4
    540c:	09 f0       	breq	.+2      	; 0x5410 <_ZN10RobotModel6updateEPhjj+0x4a>
    540e:	87 c0       	rjmp	.+270    	; 0x551e <_ZN10RobotModel6updateEPhjj+0x158>
		packetIndex = readUInt16(data, &offset);
    5410:	cb 01       	movw	r24, r22
    5412:	be 01       	movw	r22, r28
    5414:	6f 5f       	subi	r22, 0xFF	; 255
    5416:	7f 4f       	sbci	r23, 0xFF	; 255
    5418:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <_Z10readUInt16PhPj>
    541c:	d4 01       	movw	r26, r8
    541e:	51 96       	adiw	r26, 0x11	; 17
    5420:	9c 93       	st	X, r25
    5422:	8e 93       	st	-X, r24
    5424:	50 97       	sbiw	r26, 0x10	; 16
		uint8_t packetType = data[offset++];
    5426:	29 81       	ldd	r18, Y+1	; 0x01
    5428:	3a 81       	ldd	r19, Y+2	; 0x02
    542a:	f3 01       	movw	r30, r6
    542c:	e2 0f       	add	r30, r18
    542e:	f3 1f       	adc	r31, r19
    5430:	40 81       	ld	r20, Z
		
		offset+=2; //Ignore the content length.
    5432:	c9 01       	movw	r24, r18
    5434:	03 96       	adiw	r24, 0x03	; 3
		if (packetType == 2) {
    5436:	42 30       	cpi	r20, 0x02	; 2
    5438:	09 f0       	breq	.+2      	; 0x543c <_ZN10RobotModel6updateEPhjj+0x76>
    543a:	71 c0       	rjmp	.+226    	; 0x551e <_ZN10RobotModel6updateEPhjj+0x158>
			uint8_t sectionCount = data[offset++];
    543c:	86 0d       	add	r24, r6
    543e:	97 1d       	adc	r25, r7
    5440:	fc 01       	movw	r30, r24
    5442:	80 81       	ld	r24, Z
    5444:	2c 5f       	subi	r18, 0xFC	; 252
    5446:	3f 4f       	sbci	r19, 0xFF	; 255
    5448:	3a 83       	std	Y+2, r19	; 0x02
    544a:	29 83       	std	Y+1, r18	; 0x01
			
			for (int i = 0; i < sectionCount; i++){
    544c:	28 2f       	mov	r18, r24
    544e:	30 e0       	ldi	r19, 0x00	; 0
    5450:	3c 83       	std	Y+4, r19	; 0x04
    5452:	2b 83       	std	Y+3, r18	; 0x03
    5454:	12 16       	cp	r1, r18
    5456:	13 06       	cpc	r1, r19
    5458:	0c f0       	brlt	.+2      	; 0x545c <_ZN10RobotModel6updateEPhjj+0x96>
    545a:	61 c0       	rjmp	.+194    	; 0x551e <_ZN10RobotModel6updateEPhjj+0x158>
    545c:	44 24       	eor	r4, r4
    545e:	55 24       	eor	r5, r5
				unsigned char sectionId = data[offset++];
				
				unsigned short length = readUInt16(data, &offset);
				for (int iSection = 0; iSection < _sectionCount; iSection++){
    5460:	a8 2c       	mov	r10, r8
    5462:	9d 82       	std	Y+5, r9	; 0x05
		offset+=2; //Ignore the content length.
		if (packetType == 2) {
			uint8_t sectionCount = data[offset++];
			
			for (int i = 0; i < sectionCount; i++){
				unsigned char sectionId = data[offset++];
    5464:	89 81       	ldd	r24, Y+1	; 0x01
    5466:	9a 81       	ldd	r25, Y+2	; 0x02
    5468:	f3 01       	movw	r30, r6
    546a:	e8 0f       	add	r30, r24
    546c:	f9 1f       	adc	r31, r25
    546e:	b0 80       	ld	r11, Z
    5470:	01 96       	adiw	r24, 0x01	; 1
    5472:	9a 83       	std	Y+2, r25	; 0x02
    5474:	89 83       	std	Y+1, r24	; 0x01
				
				unsigned short length = readUInt16(data, &offset);
    5476:	c3 01       	movw	r24, r6
    5478:	be 01       	movw	r22, r28
    547a:	6f 5f       	subi	r22, 0xFF	; 255
    547c:	7f 4f       	sbci	r23, 0xFF	; 255
    547e:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <_Z10readUInt16PhPj>
    5482:	1c 01       	movw	r2, r24
				for (int iSection = 0; iSection < _sectionCount; iSection++){
    5484:	d4 01       	movw	r26, r8
    5486:	52 96       	adiw	r26, 0x12	; 18
    5488:	8d 91       	ld	r24, X+
    548a:	9c 91       	ld	r25, X
    548c:	53 97       	sbiw	r26, 0x13	; 19
    548e:	18 16       	cp	r1, r24
    5490:	19 06       	cpc	r1, r25
    5492:	b4 f5       	brge	.+108    	; 0x5500 <_ZN10RobotModel6updateEPhjj+0x13a>
    5494:	0a 2d       	mov	r16, r10
    5496:	1d 81       	ldd	r17, Y+5	; 0x05
    5498:	ee 24       	eor	r14, r14
    549a:	ff 24       	eor	r15, r15
}
void RobotModel::init(){
	_sectionCount = 0;
}

void RobotModel::update(unsigned char data[], unsigned int offset, unsigned int length){
    549c:	68 01       	movw	r12, r16
			for (int i = 0; i < sectionCount; i++){
				unsigned char sectionId = data[offset++];
				
				unsigned short length = readUInt16(data, &offset);
				for (int iSection = 0; iSection < _sectionCount; iSection++){
					if (sections[iSection]->sectionId == sectionId){
    549e:	d8 01       	movw	r26, r16
    54a0:	ed 91       	ld	r30, X+
    54a2:	fc 91       	ld	r31, X
    54a4:	11 97       	sbiw	r26, 0x01	; 1
    54a6:	82 81       	ldd	r24, Z+2	; 0x02
    54a8:	8b 15       	cp	r24, r11
    54aa:	f9 f4       	brne	.+62     	; 0x54ea <_ZN10RobotModel6updateEPhjj+0x124>
						if (!sections[iSection]->isActive){
    54ac:	83 81       	ldd	r24, Z+3	; 0x03
    54ae:	88 23       	and	r24, r24
    54b0:	79 f4       	brne	.+30     	; 0x54d0 <_ZN10RobotModel6updateEPhjj+0x10a>
							sections[iSection]->isActive = true;
    54b2:	b1 e0       	ldi	r27, 0x01	; 1
    54b4:	b3 83       	std	Z+3, r27	; 0x03
							Serial.print("Activated section:");
    54b6:	88 e2       	ldi	r24, 0x28	; 40
    54b8:	94 e0       	ldi	r25, 0x04	; 4
    54ba:	6d eb       	ldi	r22, 0xBD	; 189
    54bc:	71 e0       	ldi	r23, 0x01	; 1
    54be:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN5Print5printEPKc>
							Serial.println(sectionId);
    54c2:	88 e2       	ldi	r24, 0x28	; 40
    54c4:	94 e0       	ldi	r25, 0x04	; 4
    54c6:	6b 2d       	mov	r22, r11
    54c8:	4a e0       	ldi	r20, 0x0A	; 10
    54ca:	50 e0       	ldi	r21, 0x00	; 0
    54cc:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN5Print7printlnEhi>
						}						
						sections[iSection]->update(data, offset);
    54d0:	f6 01       	movw	r30, r12
    54d2:	80 81       	ld	r24, Z
    54d4:	91 81       	ldd	r25, Z+1	; 0x01
    54d6:	dc 01       	movw	r26, r24
    54d8:	ed 91       	ld	r30, X+
    54da:	fc 91       	ld	r31, X
    54dc:	49 81       	ldd	r20, Y+1	; 0x01
    54de:	5a 81       	ldd	r21, Y+2	; 0x02
    54e0:	01 90       	ld	r0, Z+
    54e2:	f0 81       	ld	r31, Z
    54e4:	e0 2d       	mov	r30, r0
    54e6:	b3 01       	movw	r22, r6
    54e8:	09 95       	icall
			
			for (int i = 0; i < sectionCount; i++){
				unsigned char sectionId = data[offset++];
				
				unsigned short length = readUInt16(data, &offset);
				for (int iSection = 0; iSection < _sectionCount; iSection++){
    54ea:	08 94       	sec
    54ec:	e1 1c       	adc	r14, r1
    54ee:	f1 1c       	adc	r15, r1
    54f0:	0e 5f       	subi	r16, 0xFE	; 254
    54f2:	1f 4f       	sbci	r17, 0xFF	; 255
    54f4:	f4 01       	movw	r30, r8
    54f6:	82 89       	ldd	r24, Z+18	; 0x12
    54f8:	93 89       	ldd	r25, Z+19	; 0x13
    54fa:	e8 16       	cp	r14, r24
    54fc:	f9 06       	cpc	r15, r25
    54fe:	74 f2       	brlt	.-100    	; 0x549c <_ZN10RobotModel6updateEPhjj+0xd6>
							Serial.println(sectionId);
						}						
						sections[iSection]->update(data, offset);
					}
				}
				offset += length;
    5500:	89 81       	ldd	r24, Y+1	; 0x01
    5502:	9a 81       	ldd	r25, Y+2	; 0x02
    5504:	82 0d       	add	r24, r2
    5506:	93 1d       	adc	r25, r3
    5508:	9a 83       	std	Y+2, r25	; 0x02
    550a:	89 83       	std	Y+1, r24	; 0x01
		
		offset+=2; //Ignore the content length.
		if (packetType == 2) {
			uint8_t sectionCount = data[offset++];
			
			for (int i = 0; i < sectionCount; i++){
    550c:	08 94       	sec
    550e:	41 1c       	adc	r4, r1
    5510:	51 1c       	adc	r5, r1
    5512:	2b 81       	ldd	r18, Y+3	; 0x03
    5514:	3c 81       	ldd	r19, Y+4	; 0x04
    5516:	42 16       	cp	r4, r18
    5518:	53 06       	cpc	r5, r19
    551a:	0c f4       	brge	.+2      	; 0x551e <_ZN10RobotModel6updateEPhjj+0x158>
    551c:	a3 cf       	rjmp	.-186    	; 0x5464 <_ZN10RobotModel6updateEPhjj+0x9e>
		}
	}
	else{
		//TODO:Invalid packet version. DTC.
	}
}
    551e:	0f 90       	pop	r0
    5520:	0f 90       	pop	r0
    5522:	0f 90       	pop	r0
    5524:	0f 90       	pop	r0
    5526:	0f 90       	pop	r0
    5528:	df 91       	pop	r29
    552a:	cf 91       	pop	r28
    552c:	1f 91       	pop	r17
    552e:	0f 91       	pop	r16
    5530:	ff 90       	pop	r15
    5532:	ef 90       	pop	r14
    5534:	df 90       	pop	r13
    5536:	cf 90       	pop	r12
    5538:	bf 90       	pop	r11
    553a:	af 90       	pop	r10
    553c:	9f 90       	pop	r9
    553e:	8f 90       	pop	r8
    5540:	7f 90       	pop	r7
    5542:	6f 90       	pop	r6
    5544:	5f 90       	pop	r5
    5546:	4f 90       	pop	r4
    5548:	3f 90       	pop	r3
    554a:	2f 90       	pop	r2
    554c:	08 95       	ret

0000554e <_ZN10RobotModel9getStatusEPhPj>:
void RobotModel::getStatus(unsigned char data[], unsigned int *offset){
    554e:	4f 92       	push	r4
    5550:	5f 92       	push	r5
    5552:	6f 92       	push	r6
    5554:	7f 92       	push	r7
    5556:	8f 92       	push	r8
    5558:	9f 92       	push	r9
    555a:	af 92       	push	r10
    555c:	bf 92       	push	r11
    555e:	cf 92       	push	r12
    5560:	df 92       	push	r13
    5562:	ef 92       	push	r14
    5564:	ff 92       	push	r15
    5566:	0f 93       	push	r16
    5568:	1f 93       	push	r17
    556a:	cf 93       	push	r28
    556c:	df 93       	push	r29
    556e:	3c 01       	movw	r6, r24
    5570:	4b 01       	movw	r8, r22
    5572:	5a 01       	movw	r10, r20
	data[(*offset)++] = PACKET_VERSION;
    5574:	da 01       	movw	r26, r20
    5576:	4d 91       	ld	r20, X+
    5578:	5c 91       	ld	r21, X
    557a:	11 97       	sbiw	r26, 0x01	; 1
    557c:	fb 01       	movw	r30, r22
    557e:	e4 0f       	add	r30, r20
    5580:	f5 1f       	adc	r31, r21
    5582:	84 e0       	ldi	r24, 0x04	; 4
    5584:	80 83       	st	Z, r24
    5586:	4f 5f       	subi	r20, 0xFF	; 255
    5588:	5f 4f       	sbci	r21, 0xFF	; 255
    558a:	4d 93       	st	X+, r20
    558c:	5c 93       	st	X, r21
	writeUInt16(data, packetIndex, (*offset)); (*offset) += 2;
    558e:	f3 01       	movw	r30, r6
    5590:	60 89       	ldd	r22, Z+16	; 0x10
    5592:	71 89       	ldd	r23, Z+17	; 0x11
    5594:	c4 01       	movw	r24, r8
    5596:	0e 94 e6 30 	call	0x61cc	; 0x61cc <_Z11writeUInt16Phtj>
    559a:	d5 01       	movw	r26, r10
    559c:	2d 91       	ld	r18, X+
    559e:	3c 91       	ld	r19, X
    55a0:	11 97       	sbiw	r26, 0x01	; 1
	data[(*offset)++] = 3; //Set as status packet
    55a2:	f4 01       	movw	r30, r8
    55a4:	e2 0f       	add	r30, r18
    55a6:	f3 1f       	adc	r31, r19
    55a8:	83 e0       	ldi	r24, 0x03	; 3
    55aa:	82 83       	std	Z+2, r24	; 0x02
    55ac:	0f 2e       	mov	r0, r31
    55ae:	f3 e0       	ldi	r31, 0x03	; 3
    55b0:	4f 2e       	mov	r4, r31
    55b2:	55 24       	eor	r5, r5
    55b4:	f0 2d       	mov	r31, r0
    55b6:	42 0e       	add	r4, r18
    55b8:	53 1e       	adc	r5, r19
	unsigned int contentLengthOffset = *offset;
	(*offset) += 2;
    55ba:	c9 01       	movw	r24, r18
    55bc:	05 96       	adiw	r24, 0x05	; 5
    55be:	8d 93       	st	X+, r24
    55c0:	9c 93       	st	X, r25
	data[(*offset)++] = _sectionCount;
    55c2:	88 0d       	add	r24, r8
    55c4:	99 1d       	adc	r25, r9
    55c6:	f3 01       	movw	r30, r6
    55c8:	42 89       	ldd	r20, Z+18	; 0x12
    55ca:	dc 01       	movw	r26, r24
    55cc:	4c 93       	st	X, r20
    55ce:	c9 01       	movw	r24, r18
    55d0:	06 96       	adiw	r24, 0x06	; 6
    55d2:	f5 01       	movw	r30, r10
    55d4:	91 83       	std	Z+1, r25	; 0x01
    55d6:	80 83       	st	Z, r24
	
	for (int i = 0; i < _sectionCount; i++){
    55d8:	d3 01       	movw	r26, r6
    55da:	52 96       	adiw	r26, 0x12	; 18
    55dc:	8d 91       	ld	r24, X+
    55de:	9c 91       	ld	r25, X
    55e0:	53 97       	sbiw	r26, 0x13	; 19
    55e2:	18 16       	cp	r1, r24
    55e4:	19 06       	cpc	r1, r25
    55e6:	e4 f5       	brge	.+120    	; 0x5660 <_ZN10RobotModel9getStatusEPhPj+0x112>
    55e8:	83 01       	movw	r16, r6
    55ea:	ee 24       	eor	r14, r14
    55ec:	ff 24       	eor	r15, r15
		unsigned short sectionHeaderOffset = *offset;
    55ee:	f5 01       	movw	r30, r10
    55f0:	80 81       	ld	r24, Z
    55f2:	91 81       	ldd	r25, Z+1	; 0x01
		data[(*offset)++] = sections[i]->sectionId;
    55f4:	d8 01       	movw	r26, r16
    55f6:	ed 91       	ld	r30, X+
    55f8:	fc 91       	ld	r31, X
    55fa:	22 81       	ldd	r18, Z+2	; 0x02
    55fc:	f4 01       	movw	r30, r8
    55fe:	e8 0f       	add	r30, r24
    5600:	f9 1f       	adc	r31, r25
    5602:	20 83       	st	Z, r18
    5604:	6c 01       	movw	r12, r24
    5606:	08 94       	sec
    5608:	c1 1c       	adc	r12, r1
    560a:	d1 1c       	adc	r13, r1
		(*offset) += 2;
    560c:	ec 01       	movw	r28, r24
    560e:	23 96       	adiw	r28, 0x03	; 3
    5610:	f5 01       	movw	r30, r10
    5612:	d1 83       	std	Z+1, r29	; 0x01
    5614:	c0 83       	st	Z, r28
		unsigned short contentStartOffset = *offset;

		if (sections[i]->isActive){
    5616:	f8 01       	movw	r30, r16
    5618:	a1 91       	ld	r26, Z+
    561a:	b1 91       	ld	r27, Z+
    561c:	8f 01       	movw	r16, r30
    561e:	13 96       	adiw	r26, 0x03	; 3
    5620:	8c 91       	ld	r24, X
    5622:	13 97       	sbiw	r26, 0x03	; 3
    5624:	88 23       	and	r24, r24
    5626:	51 f0       	breq	.+20     	; 0x563c <_ZN10RobotModel9getStatusEPhPj+0xee>
			sections[i]->getStatus(data, offset);
    5628:	ed 91       	ld	r30, X+
    562a:	fc 91       	ld	r31, X
    562c:	11 97       	sbiw	r26, 0x01	; 1
    562e:	02 80       	ldd	r0, Z+2	; 0x02
    5630:	f3 81       	ldd	r31, Z+3	; 0x03
    5632:	e0 2d       	mov	r30, r0
    5634:	cd 01       	movw	r24, r26
    5636:	b4 01       	movw	r22, r8
    5638:	a5 01       	movw	r20, r10
    563a:	09 95       	icall
		}		
		//Write length to header
		unsigned short length = (*offset) - contentStartOffset;
    563c:	d5 01       	movw	r26, r10
    563e:	6d 91       	ld	r22, X+
    5640:	7c 91       	ld	r23, X
    5642:	6c 1b       	sub	r22, r28
    5644:	7d 0b       	sbc	r23, r29
		writeUInt16(data, length, sectionHeaderOffset + 1);
    5646:	c4 01       	movw	r24, r8
    5648:	a6 01       	movw	r20, r12
    564a:	0e 94 e6 30 	call	0x61cc	; 0x61cc <_Z11writeUInt16Phtj>
	data[(*offset)++] = 3; //Set as status packet
	unsigned int contentLengthOffset = *offset;
	(*offset) += 2;
	data[(*offset)++] = _sectionCount;
	
	for (int i = 0; i < _sectionCount; i++){
    564e:	08 94       	sec
    5650:	e1 1c       	adc	r14, r1
    5652:	f1 1c       	adc	r15, r1
    5654:	f3 01       	movw	r30, r6
    5656:	82 89       	ldd	r24, Z+18	; 0x12
    5658:	93 89       	ldd	r25, Z+19	; 0x13
    565a:	e8 16       	cp	r14, r24
    565c:	f9 06       	cpc	r15, r25
    565e:	3c f2       	brlt	.-114    	; 0x55ee <_ZN10RobotModel9getStatusEPhPj+0xa0>
		}		
		//Write length to header
		unsigned short length = (*offset) - contentStartOffset;
		writeUInt16(data, length, sectionHeaderOffset + 1);
	}
	writeUInt16(data, (*offset) - contentLengthOffset, contentLengthOffset);
    5660:	d5 01       	movw	r26, r10
    5662:	6d 91       	ld	r22, X+
    5664:	7c 91       	ld	r23, X
    5666:	64 19       	sub	r22, r4
    5668:	75 09       	sbc	r23, r5
    566a:	c4 01       	movw	r24, r8
    566c:	a2 01       	movw	r20, r4
    566e:	0e 94 e6 30 	call	0x61cc	; 0x61cc <_Z11writeUInt16Phtj>
}
    5672:	df 91       	pop	r29
    5674:	cf 91       	pop	r28
    5676:	1f 91       	pop	r17
    5678:	0f 91       	pop	r16
    567a:	ff 90       	pop	r15
    567c:	ef 90       	pop	r14
    567e:	df 90       	pop	r13
    5680:	cf 90       	pop	r12
    5682:	bf 90       	pop	r11
    5684:	af 90       	pop	r10
    5686:	9f 90       	pop	r9
    5688:	8f 90       	pop	r8
    568a:	7f 90       	pop	r7
    568c:	6f 90       	pop	r6
    568e:	5f 90       	pop	r5
    5690:	4f 90       	pop	r4
    5692:	08 95       	ret

00005694 <_ZN10RobotModel4loopEb>:

void RobotModel::loop(bool safteyTripped){
    5694:	df 92       	push	r13
    5696:	ef 92       	push	r14
    5698:	ff 92       	push	r15
    569a:	0f 93       	push	r16
    569c:	1f 93       	push	r17
    569e:	cf 93       	push	r28
    56a0:	df 93       	push	r29
    56a2:	7c 01       	movw	r14, r24
    56a4:	d6 2e       	mov	r13, r22
	for (int i = 0; i < _sectionCount; i++){
    56a6:	fc 01       	movw	r30, r24
    56a8:	82 89       	ldd	r24, Z+18	; 0x12
    56aa:	93 89       	ldd	r25, Z+19	; 0x13
    56ac:	18 16       	cp	r1, r24
    56ae:	19 06       	cpc	r1, r25
    56b0:	e4 f4       	brge	.+56     	; 0x56ea <_ZN10RobotModel4loopEb+0x56>
    56b2:	87 01       	movw	r16, r14
    56b4:	c0 e0       	ldi	r28, 0x00	; 0
    56b6:	d0 e0       	ldi	r29, 0x00	; 0
		if (sections[i]->isActive)
    56b8:	f8 01       	movw	r30, r16
    56ba:	a1 91       	ld	r26, Z+
    56bc:	b1 91       	ld	r27, Z+
    56be:	8f 01       	movw	r16, r30
    56c0:	13 96       	adiw	r26, 0x03	; 3
    56c2:	8c 91       	ld	r24, X
    56c4:	13 97       	sbiw	r26, 0x03	; 3
    56c6:	88 23       	and	r24, r24
    56c8:	49 f0       	breq	.+18     	; 0x56dc <_ZN10RobotModel4loopEb+0x48>
		sections[i]->loop(safteyTripped);
    56ca:	ed 91       	ld	r30, X+
    56cc:	fc 91       	ld	r31, X
    56ce:	11 97       	sbiw	r26, 0x01	; 1
    56d0:	04 80       	ldd	r0, Z+4	; 0x04
    56d2:	f5 81       	ldd	r31, Z+5	; 0x05
    56d4:	e0 2d       	mov	r30, r0
    56d6:	cd 01       	movw	r24, r26
    56d8:	6d 2d       	mov	r22, r13
    56da:	09 95       	icall
	}
	writeUInt16(data, (*offset) - contentLengthOffset, contentLengthOffset);
}

void RobotModel::loop(bool safteyTripped){
	for (int i = 0; i < _sectionCount; i++){
    56dc:	21 96       	adiw	r28, 0x01	; 1
    56de:	f7 01       	movw	r30, r14
    56e0:	82 89       	ldd	r24, Z+18	; 0x12
    56e2:	93 89       	ldd	r25, Z+19	; 0x13
    56e4:	c8 17       	cp	r28, r24
    56e6:	d9 07       	cpc	r29, r25
    56e8:	3c f3       	brlt	.-50     	; 0x56b8 <_ZN10RobotModel4loopEb+0x24>
		if (sections[i]->isActive)
		sections[i]->loop(safteyTripped);
	}
}
    56ea:	df 91       	pop	r29
    56ec:	cf 91       	pop	r28
    56ee:	1f 91       	pop	r17
    56f0:	0f 91       	pop	r16
    56f2:	ff 90       	pop	r15
    56f4:	ef 90       	pop	r14
    56f6:	df 90       	pop	r13
    56f8:	08 95       	ret

000056fa <_ZN10RobotModel10addSectionEP17RobotModelSection>:

bool RobotModel::addSection(RobotModelSection *section){
    56fa:	ef 92       	push	r14
    56fc:	ff 92       	push	r15
    56fe:	0f 93       	push	r16
    5700:	1f 93       	push	r17
    5702:	cf 93       	push	r28
    5704:	df 93       	push	r29
    5706:	8c 01       	movw	r16, r24
    5708:	7b 01       	movw	r14, r22
	if (_sectionCount < MAX_MODEL_SECTIONS){
    570a:	fc 01       	movw	r30, r24
    570c:	82 89       	ldd	r24, Z+18	; 0x12
    570e:	93 89       	ldd	r25, Z+19	; 0x13
    5710:	88 30       	cpi	r24, 0x08	; 8
    5712:	91 05       	cpc	r25, r1
    5714:	e4 f4       	brge	.+56     	; 0x574e <_ZN10RobotModel10addSectionEP17RobotModelSection+0x54>
		sections[_sectionCount++] = section;
    5716:	fc 01       	movw	r30, r24
    5718:	ee 0f       	add	r30, r30
    571a:	ff 1f       	adc	r31, r31
    571c:	e0 0f       	add	r30, r16
    571e:	f1 1f       	adc	r31, r17
    5720:	71 83       	std	Z+1, r23	; 0x01
    5722:	60 83       	st	Z, r22
    5724:	01 96       	adiw	r24, 0x01	; 1
    5726:	f8 01       	movw	r30, r16
    5728:	93 8b       	std	Z+19, r25	; 0x13
    572a:	82 8b       	std	Z+18, r24	; 0x12
		Serial.print("Added section:");
    572c:	c8 e2       	ldi	r28, 0x28	; 40
    572e:	d4 e0       	ldi	r29, 0x04	; 4
    5730:	ce 01       	movw	r24, r28
    5732:	60 ed       	ldi	r22, 0xD0	; 208
    5734:	71 e0       	ldi	r23, 0x01	; 1
    5736:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN5Print5printEPKc>
		Serial.println((int)(section->sectionId));
    573a:	f7 01       	movw	r30, r14
    573c:	62 81       	ldd	r22, Z+2	; 0x02
    573e:	ce 01       	movw	r24, r28
    5740:	70 e0       	ldi	r23, 0x00	; 0
    5742:	4a e0       	ldi	r20, 0x0A	; 10
    5744:	50 e0       	ldi	r21, 0x00	; 0
    5746:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN5Print7printlnEii>
		return true;
    574a:	81 e0       	ldi	r24, 0x01	; 1
    574c:	10 c0       	rjmp	.+32     	; 0x576e <_ZN10RobotModel10addSectionEP17RobotModelSection+0x74>
	}
	else
	{
		Serial.print("Too many sections:");
    574e:	c8 e2       	ldi	r28, 0x28	; 40
    5750:	d4 e0       	ldi	r29, 0x04	; 4
    5752:	ce 01       	movw	r24, r28
    5754:	6f ed       	ldi	r22, 0xDF	; 223
    5756:	71 e0       	ldi	r23, 0x01	; 1
    5758:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN5Print5printEPKc>
		Serial.print(_sectionCount);
    575c:	f8 01       	movw	r30, r16
    575e:	62 89       	ldd	r22, Z+18	; 0x12
    5760:	73 89       	ldd	r23, Z+19	; 0x13
    5762:	ce 01       	movw	r24, r28
    5764:	4a e0       	ldi	r20, 0x0A	; 10
    5766:	50 e0       	ldi	r21, 0x00	; 0
    5768:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN5Print5printEii>
		return false;
    576c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    576e:	df 91       	pop	r29
    5770:	cf 91       	pop	r28
    5772:	1f 91       	pop	r17
    5774:	0f 91       	pop	r16
    5776:	ff 90       	pop	r15
    5778:	ef 90       	pop	r14
    577a:	08 95       	ret

0000577c <_ZN15RslModelSection6updateEPhj>:
	state = 0;
	isActive = true;
	pinMode(pin, OUTPUT);
}
void RslModelSection::update(unsigned char data[], unsigned int offset){
	state = data[offset++];
    577c:	64 0f       	add	r22, r20
    577e:	75 1f       	adc	r23, r21
    5780:	fb 01       	movw	r30, r22
    5782:	20 81       	ld	r18, Z
    5784:	fc 01       	movw	r30, r24
    5786:	20 87       	std	Z+8, r18	; 0x08
}
    5788:	08 95       	ret

0000578a <_ZN15RslModelSection9getStatusEPhPj>:
void RslModelSection::getStatus(unsigned char data[], unsigned int *offset){
	//RSL has no status
}
    578a:	08 95       	ret

0000578c <_ZN15RslModelSectionC1Ev>:
 *      Author: EHaskins
 */

#include "RslModelSection.h"

RslModelSection::RslModelSection() {
    578c:	cf 93       	push	r28
    578e:	df 93       	push	r29
    5790:	ec 01       	movw	r28, r24
    5792:	0e 94 4b 31 	call	0x6296	; 0x6296 <_ZN17RobotModelSectionC1Ev>
    5796:	86 ef       	ldi	r24, 0xF6	; 246
    5798:	91 e0       	ldi	r25, 0x01	; 1
    579a:	99 83       	std	Y+1, r25	; 0x01
    579c:	88 83       	st	Y, r24
	sectionId = 0;
    579e:	1a 82       	std	Y+2, r1	; 0x02
	pin = 13;
    57a0:	8d e0       	ldi	r24, 0x0D	; 13
    57a2:	90 e0       	ldi	r25, 0x00	; 0
    57a4:	9f 83       	std	Y+7, r25	; 0x07
    57a6:	8e 83       	std	Y+6, r24	; 0x06
	state = 0;
    57a8:	18 86       	std	Y+8, r1	; 0x08
	isActive = true;
    57aa:	81 e0       	ldi	r24, 0x01	; 1
    57ac:	8b 83       	std	Y+3, r24	; 0x03
	pinMode(pin, OUTPUT);
    57ae:	8d e0       	ldi	r24, 0x0D	; 13
    57b0:	61 e0       	ldi	r22, 0x01	; 1
    57b2:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <pinMode>
}
    57b6:	df 91       	pop	r29
    57b8:	cf 91       	pop	r28
    57ba:	08 95       	ret

000057bc <_ZN15RslModelSection12driveNoStateEv>:
}

void RslModelSection::driveEStopped(){
	driveDisabled();
}
void RslModelSection::driveNoState(){
    57bc:	cf 93       	push	r28
    57be:	df 93       	push	r29
    57c0:	ec 01       	movw	r28, r24
	if (millis() % 400 < 100)
    57c2:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    57c6:	20 e9       	ldi	r18, 0x90	; 144
    57c8:	31 e0       	ldi	r19, 0x01	; 1
    57ca:	40 e0       	ldi	r20, 0x00	; 0
    57cc:	50 e0       	ldi	r21, 0x00	; 0
    57ce:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    57d2:	dc 01       	movw	r26, r24
    57d4:	cb 01       	movw	r24, r22
    57d6:	84 36       	cpi	r24, 0x64	; 100
    57d8:	91 05       	cpc	r25, r1
    57da:	a1 05       	cpc	r26, r1
    57dc:	b1 05       	cpc	r27, r1
    57de:	28 f4       	brcc	.+10     	; 0x57ea <_ZN15RslModelSection12driveNoStateEv+0x2e>
		digitalWrite(pin, HIGH);
    57e0:	8e 81       	ldd	r24, Y+6	; 0x06
    57e2:	61 e0       	ldi	r22, 0x01	; 1
    57e4:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
    57e8:	04 c0       	rjmp	.+8      	; 0x57f2 <_ZN15RslModelSection12driveNoStateEv+0x36>
	else
		digitalWrite(pin, LOW);
    57ea:	8e 81       	ldd	r24, Y+6	; 0x06
    57ec:	60 e0       	ldi	r22, 0x00	; 0
    57ee:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
}
    57f2:	df 91       	pop	r29
    57f4:	cf 91       	pop	r28
    57f6:	08 95       	ret

000057f8 <_ZN15RslModelSection17driveNoBeagleCommEv>:

void RslModelSection::driveNoBeagleComm(){
    57f8:	cf 93       	push	r28
    57fa:	df 93       	push	r29
    57fc:	ec 01       	movw	r28, r24
	if (millis() % 200 < 100)
    57fe:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    5802:	28 ec       	ldi	r18, 0xC8	; 200
    5804:	30 e0       	ldi	r19, 0x00	; 0
    5806:	40 e0       	ldi	r20, 0x00	; 0
    5808:	50 e0       	ldi	r21, 0x00	; 0
    580a:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    580e:	dc 01       	movw	r26, r24
    5810:	cb 01       	movw	r24, r22
    5812:	84 36       	cpi	r24, 0x64	; 100
    5814:	91 05       	cpc	r25, r1
    5816:	a1 05       	cpc	r26, r1
    5818:	b1 05       	cpc	r27, r1
    581a:	28 f4       	brcc	.+10     	; 0x5826 <_ZN15RslModelSection17driveNoBeagleCommEv+0x2e>
		digitalWrite(pin, HIGH);
    581c:	8e 81       	ldd	r24, Y+6	; 0x06
    581e:	61 e0       	ldi	r22, 0x01	; 1
    5820:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
    5824:	04 c0       	rjmp	.+8      	; 0x582e <_ZN15RslModelSection17driveNoBeagleCommEv+0x36>
	else
		digitalWrite(pin, LOW);
    5826:	8e 81       	ldd	r24, Y+6	; 0x06
    5828:	60 e0       	ldi	r22, 0x00	; 0
    582a:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
}
    582e:	df 91       	pop	r29
    5830:	cf 91       	pop	r28
    5832:	08 95       	ret

00005834 <_ZN15RslModelSection14driveNoFrcCommEv>:
void RslModelSection::driveNoFrcComm(){
    5834:	cf 93       	push	r28
    5836:	df 93       	push	r29
    5838:	ec 01       	movw	r28, r24
	if (millis() % 900 < 100)
    583a:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    583e:	24 e8       	ldi	r18, 0x84	; 132
    5840:	33 e0       	ldi	r19, 0x03	; 3
    5842:	40 e0       	ldi	r20, 0x00	; 0
    5844:	50 e0       	ldi	r21, 0x00	; 0
    5846:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    584a:	dc 01       	movw	r26, r24
    584c:	cb 01       	movw	r24, r22
    584e:	84 36       	cpi	r24, 0x64	; 100
    5850:	91 05       	cpc	r25, r1
    5852:	a1 05       	cpc	r26, r1
    5854:	b1 05       	cpc	r27, r1
    5856:	28 f4       	brcc	.+10     	; 0x5862 <_ZN15RslModelSection14driveNoFrcCommEv+0x2e>
		digitalWrite(pin, HIGH);
    5858:	8e 81       	ldd	r24, Y+6	; 0x06
    585a:	61 e0       	ldi	r22, 0x01	; 1
    585c:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
    5860:	04 c0       	rjmp	.+8      	; 0x586a <_ZN15RslModelSection14driveNoFrcCommEv+0x36>
	else
		digitalWrite(pin, LOW);
    5862:	8e 81       	ldd	r24, Y+6	; 0x06
    5864:	60 e0       	ldi	r22, 0x00	; 0
    5866:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
}
    586a:	df 91       	pop	r29
    586c:	cf 91       	pop	r28
    586e:	08 95       	ret

00005870 <_ZN15RslModelSection12driveEnabledEv>:
void RslModelSection::driveEnabled(){
    5870:	cf 93       	push	r28
    5872:	df 93       	push	r29
    5874:	ec 01       	movw	r28, r24
	unsigned long m = millis();
    5876:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
	if (m % 1200 < 50)
    587a:	20 eb       	ldi	r18, 0xB0	; 176
    587c:	34 e0       	ldi	r19, 0x04	; 4
    587e:	40 e0       	ldi	r20, 0x00	; 0
    5880:	50 e0       	ldi	r21, 0x00	; 0
    5882:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    5886:	dc 01       	movw	r26, r24
    5888:	cb 01       	movw	r24, r22
    588a:	82 33       	cpi	r24, 0x32	; 50
    588c:	91 05       	cpc	r25, r1
    588e:	a1 05       	cpc	r26, r1
    5890:	b1 05       	cpc	r27, r1
    5892:	28 f4       	brcc	.+10     	; 0x589e <_ZN15RslModelSection12driveEnabledEv+0x2e>
		digitalWrite(pin, LOW);
    5894:	8e 81       	ldd	r24, Y+6	; 0x06
    5896:	60 e0       	ldi	r22, 0x00	; 0
    5898:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
    589c:	18 c0       	rjmp	.+48     	; 0x58ce <_ZN15RslModelSection12driveEnabledEv+0x5e>
	else if (m % 1200 < 150)
    589e:	86 39       	cpi	r24, 0x96	; 150
    58a0:	91 05       	cpc	r25, r1
    58a2:	a1 05       	cpc	r26, r1
    58a4:	b1 05       	cpc	r27, r1
    58a6:	28 f4       	brcc	.+10     	; 0x58b2 <_ZN15RslModelSection12driveEnabledEv+0x42>
		digitalWrite(pin, HIGH);
    58a8:	8e 81       	ldd	r24, Y+6	; 0x06
    58aa:	61 e0       	ldi	r22, 0x01	; 1
    58ac:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
    58b0:	0e c0       	rjmp	.+28     	; 0x58ce <_ZN15RslModelSection12driveEnabledEv+0x5e>
	else if (m % 1200 < 200)
    58b2:	88 3c       	cpi	r24, 0xC8	; 200
    58b4:	91 05       	cpc	r25, r1
    58b6:	a1 05       	cpc	r26, r1
    58b8:	b1 05       	cpc	r27, r1
    58ba:	28 f4       	brcc	.+10     	; 0x58c6 <_ZN15RslModelSection12driveEnabledEv+0x56>
		digitalWrite(pin, LOW);
    58bc:	8e 81       	ldd	r24, Y+6	; 0x06
    58be:	60 e0       	ldi	r22, 0x00	; 0
    58c0:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
    58c4:	04 c0       	rjmp	.+8      	; 0x58ce <_ZN15RslModelSection12driveEnabledEv+0x5e>
	else
		digitalWrite(pin, HIGH);
    58c6:	8e 81       	ldd	r24, Y+6	; 0x06
    58c8:	61 e0       	ldi	r22, 0x01	; 1
    58ca:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>

}
    58ce:	df 91       	pop	r29
    58d0:	cf 91       	pop	r28
    58d2:	08 95       	ret

000058d4 <_ZN15RslModelSection13driveDisabledEv>:
void RslModelSection::driveDisabled(){
    58d4:	cf 93       	push	r28
    58d6:	df 93       	push	r29
    58d8:	ec 01       	movw	r28, r24
	if (millis() % 2000 < 1000)
    58da:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
    58de:	20 ed       	ldi	r18, 0xD0	; 208
    58e0:	37 e0       	ldi	r19, 0x07	; 7
    58e2:	40 e0       	ldi	r20, 0x00	; 0
    58e4:	50 e0       	ldi	r21, 0x00	; 0
    58e6:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    58ea:	dc 01       	movw	r26, r24
    58ec:	cb 01       	movw	r24, r22
    58ee:	88 3e       	cpi	r24, 0xE8	; 232
    58f0:	23 e0       	ldi	r18, 0x03	; 3
    58f2:	92 07       	cpc	r25, r18
    58f4:	20 e0       	ldi	r18, 0x00	; 0
    58f6:	a2 07       	cpc	r26, r18
    58f8:	20 e0       	ldi	r18, 0x00	; 0
    58fa:	b2 07       	cpc	r27, r18
    58fc:	28 f4       	brcc	.+10     	; 0x5908 <_ZN15RslModelSection13driveDisabledEv+0x34>
		digitalWrite(pin, HIGH);
    58fe:	8e 81       	ldd	r24, Y+6	; 0x06
    5900:	61 e0       	ldi	r22, 0x01	; 1
    5902:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
    5906:	04 c0       	rjmp	.+8      	; 0x5910 <_ZN15RslModelSection13driveDisabledEv+0x3c>
	else
		digitalWrite(pin, LOW);
    5908:	8e 81       	ldd	r24, Y+6	; 0x06
    590a:	60 e0       	ldi	r22, 0x00	; 0
    590c:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
}
    5910:	df 91       	pop	r29
    5912:	cf 91       	pop	r28
    5914:	08 95       	ret

00005916 <_ZN15RslModelSection13driveEStoppedEv>:
		}
	}
}

void RslModelSection::driveEStopped(){
	driveDisabled();
    5916:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <_ZN15RslModelSection13driveDisabledEv>
}
    591a:	08 95       	ret

0000591c <_ZN15RslModelSection15driveAutonomousEv>:
	if (millis() % 2000 < 1000)
		digitalWrite(pin, HIGH);
	else
		digitalWrite(pin, LOW);
}
void RslModelSection::driveAutonomous(){
    591c:	cf 93       	push	r28
    591e:	df 93       	push	r29
    5920:	ec 01       	movw	r28, r24
	unsigned long m = millis();
    5922:	0e 94 02 15 	call	0x2a04	; 0x2a04 <millis>
	if (m % 1200 < 50)
    5926:	20 eb       	ldi	r18, 0xB0	; 176
    5928:	34 e0       	ldi	r19, 0x04	; 4
    592a:	40 e0       	ldi	r20, 0x00	; 0
    592c:	50 e0       	ldi	r21, 0x00	; 0
    592e:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    5932:	dc 01       	movw	r26, r24
    5934:	cb 01       	movw	r24, r22
    5936:	82 33       	cpi	r24, 0x32	; 50
    5938:	91 05       	cpc	r25, r1
    593a:	a1 05       	cpc	r26, r1
    593c:	b1 05       	cpc	r27, r1
    593e:	28 f4       	brcc	.+10     	; 0x594a <_ZN15RslModelSection15driveAutonomousEv+0x2e>
		digitalWrite(pin, LOW);
    5940:	8e 81       	ldd	r24, Y+6	; 0x06
    5942:	60 e0       	ldi	r22, 0x00	; 0
    5944:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
    5948:	32 c0       	rjmp	.+100    	; 0x59ae <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 150)
    594a:	86 39       	cpi	r24, 0x96	; 150
    594c:	91 05       	cpc	r25, r1
    594e:	a1 05       	cpc	r26, r1
    5950:	b1 05       	cpc	r27, r1
    5952:	28 f4       	brcc	.+10     	; 0x595e <_ZN15RslModelSection15driveAutonomousEv+0x42>
		digitalWrite(pin, HIGH);
    5954:	8e 81       	ldd	r24, Y+6	; 0x06
    5956:	61 e0       	ldi	r22, 0x01	; 1
    5958:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
    595c:	28 c0       	rjmp	.+80     	; 0x59ae <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 250)
    595e:	8a 3f       	cpi	r24, 0xFA	; 250
    5960:	91 05       	cpc	r25, r1
    5962:	a1 05       	cpc	r26, r1
    5964:	b1 05       	cpc	r27, r1
    5966:	28 f4       	brcc	.+10     	; 0x5972 <_ZN15RslModelSection15driveAutonomousEv+0x56>
		digitalWrite(pin, LOW);
    5968:	8e 81       	ldd	r24, Y+6	; 0x06
    596a:	60 e0       	ldi	r22, 0x00	; 0
    596c:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
    5970:	1e c0       	rjmp	.+60     	; 0x59ae <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 350)
    5972:	8e 35       	cpi	r24, 0x5E	; 94
    5974:	21 e0       	ldi	r18, 0x01	; 1
    5976:	92 07       	cpc	r25, r18
    5978:	20 e0       	ldi	r18, 0x00	; 0
    597a:	a2 07       	cpc	r26, r18
    597c:	20 e0       	ldi	r18, 0x00	; 0
    597e:	b2 07       	cpc	r27, r18
    5980:	28 f4       	brcc	.+10     	; 0x598c <_ZN15RslModelSection15driveAutonomousEv+0x70>
		digitalWrite(pin, HIGH);
    5982:	8e 81       	ldd	r24, Y+6	; 0x06
    5984:	61 e0       	ldi	r22, 0x01	; 1
    5986:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
    598a:	11 c0       	rjmp	.+34     	; 0x59ae <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 400)
    598c:	80 39       	cpi	r24, 0x90	; 144
    598e:	21 e0       	ldi	r18, 0x01	; 1
    5990:	92 07       	cpc	r25, r18
    5992:	20 e0       	ldi	r18, 0x00	; 0
    5994:	a2 07       	cpc	r26, r18
    5996:	20 e0       	ldi	r18, 0x00	; 0
    5998:	b2 07       	cpc	r27, r18
    599a:	28 f4       	brcc	.+10     	; 0x59a6 <_ZN15RslModelSection15driveAutonomousEv+0x8a>
		digitalWrite(pin, LOW);
    599c:	8e 81       	ldd	r24, Y+6	; 0x06
    599e:	60 e0       	ldi	r22, 0x00	; 0
    59a0:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
    59a4:	04 c0       	rjmp	.+8      	; 0x59ae <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else
		digitalWrite(pin, HIGH);
    59a6:	8e 81       	ldd	r24, Y+6	; 0x06
    59a8:	61 e0       	ldi	r22, 0x01	; 1
    59aa:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <digitalWrite>
}
    59ae:	df 91       	pop	r29
    59b0:	cf 91       	pop	r28
    59b2:	08 95       	ret

000059b4 <_ZN15RslModelSection10driveLightEb>:
}
void RslModelSection::loop(bool safteyTripped){
	RobotModelSection::loop(safteyTripped);
	driveLight(safteyTripped);
}
void RslModelSection::driveLight(bool safteyTripped){
    59b4:	cf 93       	push	r28
    59b6:	df 93       	push	r29
    59b8:	ec 01       	movw	r28, r24
	if (safteyTripped){
    59ba:	66 23       	and	r22, r22
    59bc:	29 f0       	breq	.+10     	; 0x59c8 <_ZN15RslModelSection10driveLightEb+0x14>
		driveNoBeagleComm();
    59be:	0e 94 fc 2b 	call	0x57f8	; 0x57f8 <_ZN15RslModelSection17driveNoBeagleCommEv>
		state = 255;
    59c2:	8f ef       	ldi	r24, 0xFF	; 255
    59c4:	88 87       	std	Y+8, r24	; 0x08
    59c6:	27 c0       	rjmp	.+78     	; 0x5a16 <_ZN15RslModelSection10driveLightEb+0x62>
	}
	else{
		switch (state){
    59c8:	88 85       	ldd	r24, Y+8	; 0x08
    59ca:	82 30       	cpi	r24, 0x02	; 2
    59cc:	c9 f0       	breq	.+50     	; 0x5a00 <_ZN15RslModelSection10driveLightEb+0x4c>
    59ce:	83 30       	cpi	r24, 0x03	; 3
    59d0:	28 f4       	brcc	.+10     	; 0x59dc <_ZN15RslModelSection10driveLightEb+0x28>
    59d2:	88 23       	and	r24, r24
    59d4:	69 f0       	breq	.+26     	; 0x59f0 <_ZN15RslModelSection10driveLightEb+0x3c>
    59d6:	81 30       	cpi	r24, 0x01	; 1
    59d8:	f1 f4       	brne	.+60     	; 0x5a16 <_ZN15RslModelSection10driveLightEb+0x62>
    59da:	0e c0       	rjmp	.+28     	; 0x59f8 <_ZN15RslModelSection10driveLightEb+0x44>
    59dc:	84 30       	cpi	r24, 0x04	; 4
    59de:	c1 f0       	breq	.+48     	; 0x5a10 <_ZN15RslModelSection10driveLightEb+0x5c>
    59e0:	84 30       	cpi	r24, 0x04	; 4
    59e2:	90 f0       	brcs	.+36     	; 0x5a08 <_ZN15RslModelSection10driveLightEb+0x54>
    59e4:	8f 3f       	cpi	r24, 0xFF	; 255
    59e6:	b9 f4       	brne	.+46     	; 0x5a16 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_NOSTATE:
			driveNoState();
    59e8:	ce 01       	movw	r24, r28
    59ea:	0e 94 de 2b 	call	0x57bc	; 0x57bc <_ZN15RslModelSection12driveNoStateEv>
			break;
    59ee:	13 c0       	rjmp	.+38     	; 0x5a16 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_NOFRCCOMM:
			driveNoFrcComm();
    59f0:	ce 01       	movw	r24, r28
    59f2:	0e 94 1a 2c 	call	0x5834	; 0x5834 <_ZN15RslModelSection14driveNoFrcCommEv>
			break;
    59f6:	0f c0       	rjmp	.+30     	; 0x5a16 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_ENABLED:
			driveEnabled();
    59f8:	ce 01       	movw	r24, r28
    59fa:	0e 94 38 2c 	call	0x5870	; 0x5870 <_ZN15RslModelSection12driveEnabledEv>
			break;
    59fe:	0b c0       	rjmp	.+22     	; 0x5a16 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_DISABLED:
			driveDisabled();
    5a00:	ce 01       	movw	r24, r28
    5a02:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <_ZN15RslModelSection13driveDisabledEv>
			break;
    5a06:	07 c0       	rjmp	.+14     	; 0x5a16 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_AUTONOMOUS:
			driveAutonomous();
    5a08:	ce 01       	movw	r24, r28
    5a0a:	0e 94 8e 2c 	call	0x591c	; 0x591c <_ZN15RslModelSection15driveAutonomousEv>
			break;
    5a0e:	03 c0       	rjmp	.+6      	; 0x5a16 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_ESTOPPED:
			driveEStopped();
    5a10:	ce 01       	movw	r24, r28
    5a12:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN15RslModelSection13driveEStoppedEv>
			break;
		}
	}
}
    5a16:	df 91       	pop	r29
    5a18:	cf 91       	pop	r28
    5a1a:	08 95       	ret

00005a1c <_ZN15RslModelSection4loopEb>:
	state = data[offset++];
}
void RslModelSection::getStatus(unsigned char data[], unsigned int *offset){
	//RSL has no status
}
void RslModelSection::loop(bool safteyTripped){
    5a1c:	1f 93       	push	r17
    5a1e:	cf 93       	push	r28
    5a20:	df 93       	push	r29
    5a22:	ec 01       	movw	r28, r24
    5a24:	16 2f       	mov	r17, r22
	RobotModelSection::loop(safteyTripped);
    5a26:	0e 94 1e 31 	call	0x623c	; 0x623c <_ZN17RobotModelSection4loopEb>
	driveLight(safteyTripped);
    5a2a:	ce 01       	movw	r24, r28
    5a2c:	61 2f       	mov	r22, r17
    5a2e:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <_ZN15RslModelSection10driveLightEb>
}
    5a32:	df 91       	pop	r29
    5a34:	cf 91       	pop	r28
    5a36:	1f 91       	pop	r17
    5a38:	08 95       	ret

00005a3a <_Z9readUInt8PhPj>:
	}
	Serial.print("ReadBytes: Offset:");
	Serial.println(*offset);
}*/

unsigned char readUInt8(unsigned char data[], unsigned int *offset){
    5a3a:	fb 01       	movw	r30, r22
	unsigned char out = data[*offset];
    5a3c:	20 81       	ld	r18, Z
    5a3e:	31 81       	ldd	r19, Z+1	; 0x01
    5a40:	dc 01       	movw	r26, r24
    5a42:	a2 0f       	add	r26, r18
    5a44:	b3 1f       	adc	r27, r19
    5a46:	8c 91       	ld	r24, X
	*offset += 1;
    5a48:	2f 5f       	subi	r18, 0xFF	; 255
    5a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a4c:	31 83       	std	Z+1, r19	; 0x01
    5a4e:	20 83       	st	Z, r18
	return out;
}
    5a50:	08 95       	ret

00005a52 <_Z10readUInt16PhPj>:
unsigned short readUInt16(unsigned char data[], unsigned int *offset){
    5a52:	db 01       	movw	r26, r22
	unsigned short out = (data[*offset + 1] << 8) + (data[*offset]);
    5a54:	2d 91       	ld	r18, X+
    5a56:	3c 91       	ld	r19, X
    5a58:	11 97       	sbiw	r26, 0x01	; 1
    5a5a:	fc 01       	movw	r30, r24
    5a5c:	e2 0f       	add	r30, r18
    5a5e:	f3 1f       	adc	r31, r19
    5a60:	91 81       	ldd	r25, Z+1	; 0x01
    5a62:	80 e0       	ldi	r24, 0x00	; 0
    5a64:	40 81       	ld	r20, Z
    5a66:	84 0f       	add	r24, r20
    5a68:	91 1d       	adc	r25, r1
	/*unsigned char byteCount = 2;
	for (int i = 0; i < byteCount; i++){
		out += data[*offset + byteCount - i] << (8 * i);
	}*/
	*offset += 2;
    5a6a:	2e 5f       	subi	r18, 0xFE	; 254
    5a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a6e:	11 96       	adiw	r26, 0x01	; 1
    5a70:	3c 93       	st	X, r19
    5a72:	2e 93       	st	-X, r18
	return out;
}
    5a74:	08 95       	ret

00005a76 <_Z10readUInt32PhPj>:
unsigned long readUInt32(unsigned char data[], unsigned int *offset){
    5a76:	0f 93       	push	r16
    5a78:	1f 93       	push	r17
    5a7a:	cf 93       	push	r28
    5a7c:	df 93       	push	r29
    5a7e:	eb 01       	movw	r28, r22
	unsigned long out =
	((unsigned long)data[*offset + 3] << 24) +
    5a80:	48 81       	ld	r20, Y
    5a82:	59 81       	ldd	r21, Y+1	; 0x01
    5a84:	fc 01       	movw	r30, r24
    5a86:	e4 0f       	add	r30, r20
    5a88:	f5 1f       	adc	r31, r21
	((unsigned long)data[*offset + 2] << 16) +
	((unsigned long)data[*offset + 1] << 8) +
	((unsigned long)data[*offset]);
    5a8a:	83 81       	ldd	r24, Z+3	; 0x03
    5a8c:	90 e0       	ldi	r25, 0x00	; 0
    5a8e:	a0 e0       	ldi	r26, 0x00	; 0
    5a90:	b0 e0       	ldi	r27, 0x00	; 0
    5a92:	b8 2f       	mov	r27, r24
    5a94:	aa 27       	eor	r26, r26
    5a96:	99 27       	eor	r25, r25
    5a98:	88 27       	eor	r24, r24
    5a9a:	02 81       	ldd	r16, Z+2	; 0x02
    5a9c:	10 e0       	ldi	r17, 0x00	; 0
    5a9e:	20 e0       	ldi	r18, 0x00	; 0
    5aa0:	30 e0       	ldi	r19, 0x00	; 0
    5aa2:	98 01       	movw	r18, r16
    5aa4:	11 27       	eor	r17, r17
    5aa6:	00 27       	eor	r16, r16
    5aa8:	08 0f       	add	r16, r24
    5aaa:	19 1f       	adc	r17, r25
    5aac:	2a 1f       	adc	r18, r26
    5aae:	3b 1f       	adc	r19, r27
    5ab0:	80 81       	ld	r24, Z
    5ab2:	08 0f       	add	r16, r24
    5ab4:	11 1d       	adc	r17, r1
    5ab6:	21 1d       	adc	r18, r1
    5ab8:	31 1d       	adc	r19, r1
    5aba:	81 81       	ldd	r24, Z+1	; 0x01
    5abc:	90 e0       	ldi	r25, 0x00	; 0
    5abe:	a0 e0       	ldi	r26, 0x00	; 0
    5ac0:	b0 e0       	ldi	r27, 0x00	; 0
    5ac2:	ba 2f       	mov	r27, r26
    5ac4:	a9 2f       	mov	r26, r25
    5ac6:	98 2f       	mov	r25, r24
    5ac8:	88 27       	eor	r24, r24
    5aca:	08 0f       	add	r16, r24
    5acc:	19 1f       	adc	r17, r25
    5ace:	2a 1f       	adc	r18, r26
    5ad0:	3b 1f       	adc	r19, r27
	/*unsigned char byteCount = 2;
	for (int i = 0; i < byteCount; i++){
		out += data[*offset + byteCount - i] << (8 * i);
	}*/
	*offset += 4;
    5ad2:	4c 5f       	subi	r20, 0xFC	; 252
    5ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    5ad6:	59 83       	std	Y+1, r21	; 0x01
    5ad8:	48 83       	st	Y, r20
	return out;
}
    5ada:	60 2f       	mov	r22, r16
    5adc:	71 2f       	mov	r23, r17
    5ade:	82 2f       	mov	r24, r18
    5ae0:	93 2f       	mov	r25, r19
    5ae2:	df 91       	pop	r29
    5ae4:	cf 91       	pop	r28
    5ae6:	1f 91       	pop	r17
    5ae8:	0f 91       	pop	r16
    5aea:	08 95       	ret

00005aec <_Z10readUInt64PhPj>:
unsigned long long readUInt64(unsigned char data[], unsigned int *offset){
    5aec:	2f 92       	push	r2
    5aee:	3f 92       	push	r3
    5af0:	4f 92       	push	r4
    5af2:	5f 92       	push	r5
    5af4:	6f 92       	push	r6
    5af6:	7f 92       	push	r7
    5af8:	8f 92       	push	r8
    5afa:	9f 92       	push	r9
    5afc:	af 92       	push	r10
    5afe:	bf 92       	push	r11
    5b00:	cf 92       	push	r12
    5b02:	df 92       	push	r13
    5b04:	ef 92       	push	r14
    5b06:	ff 92       	push	r15
    5b08:	0f 93       	push	r16
    5b0a:	1f 93       	push	r17
    5b0c:	cf 93       	push	r28
    5b0e:	df 93       	push	r29
    5b10:	cd b7       	in	r28, 0x3d	; 61
    5b12:	de b7       	in	r29, 0x3e	; 62
    5b14:	2b 97       	sbiw	r28, 0x0b	; 11
    5b16:	0f b6       	in	r0, 0x3f	; 63
    5b18:	f8 94       	cli
    5b1a:	de bf       	out	0x3e, r29	; 62
    5b1c:	0f be       	out	0x3f, r0	; 63
    5b1e:	cd bf       	out	0x3d, r28	; 61
    5b20:	9d 83       	std	Y+5, r25	; 0x05
    5b22:	8c 83       	std	Y+4, r24	; 0x04
    5b24:	79 87       	std	Y+9, r23	; 0x09
    5b26:	68 87       	std	Y+8, r22	; 0x08
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
    5b28:	db 01       	movw	r26, r22
    5b2a:	0d 90       	ld	r0, X+
    5b2c:	bc 91       	ld	r27, X
    5b2e:	a0 2d       	mov	r26, r0
    5b30:	bb 83       	std	Y+3, r27	; 0x03
    5b32:	aa 83       	std	Y+2, r26	; 0x02
    5b34:	6c 01       	movw	r12, r24
    5b36:	ca 0e       	add	r12, r26
    5b38:	db 1e       	adc	r13, r27
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    5b3a:	f6 01       	movw	r30, r12
    5b3c:	27 81       	ldd	r18, Z+7	; 0x07
    5b3e:	30 e0       	ldi	r19, 0x00	; 0
    5b40:	40 e0       	ldi	r20, 0x00	; 0
    5b42:	50 e0       	ldi	r21, 0x00	; 0
    5b44:	60 e0       	ldi	r22, 0x00	; 0
    5b46:	70 e0       	ldi	r23, 0x00	; 0
    5b48:	80 e0       	ldi	r24, 0x00	; 0
    5b4a:	90 e0       	ldi	r25, 0x00	; 0
    5b4c:	08 e3       	ldi	r16, 0x38	; 56
    5b4e:	0e 94 53 31 	call	0x62a6	; 0x62a6 <__ashldi3>
    5b52:	f2 2e       	mov	r15, r18
    5b54:	13 2f       	mov	r17, r19
    5b56:	e4 2e       	mov	r14, r20
    5b58:	b5 2e       	mov	r11, r21
    5b5a:	a6 2e       	mov	r10, r22
    5b5c:	97 2e       	mov	r9, r23
    5b5e:	88 2e       	mov	r8, r24
    5b60:	69 2e       	mov	r6, r25
    5b62:	d6 01       	movw	r26, r12
    5b64:	16 96       	adiw	r26, 0x06	; 6
    5b66:	2c 91       	ld	r18, X
    5b68:	30 e0       	ldi	r19, 0x00	; 0
    5b6a:	40 e0       	ldi	r20, 0x00	; 0
    5b6c:	50 e0       	ldi	r21, 0x00	; 0
    5b6e:	60 e0       	ldi	r22, 0x00	; 0
    5b70:	70 e0       	ldi	r23, 0x00	; 0
    5b72:	80 e0       	ldi	r24, 0x00	; 0
    5b74:	90 e0       	ldi	r25, 0x00	; 0
    5b76:	00 e3       	ldi	r16, 0x30	; 48
    5b78:	0e 94 53 31 	call	0x62a6	; 0x62a6 <__ashldi3>
    5b7c:	2f 0d       	add	r18, r15
    5b7e:	e1 e0       	ldi	r30, 0x01	; 1
    5b80:	2f 15       	cp	r18, r15
    5b82:	08 f0       	brcs	.+2      	; 0x5b86 <_Z10readUInt64PhPj+0x9a>
    5b84:	e0 e0       	ldi	r30, 0x00	; 0
    5b86:	31 0f       	add	r19, r17
    5b88:	f1 e0       	ldi	r31, 0x01	; 1
    5b8a:	31 17       	cp	r19, r17
    5b8c:	08 f0       	brcs	.+2      	; 0x5b90 <_Z10readUInt64PhPj+0xa4>
    5b8e:	f0 e0       	ldi	r31, 0x00	; 0
    5b90:	3e 2e       	mov	r3, r30
    5b92:	33 0e       	add	r3, r19
    5b94:	e1 e0       	ldi	r30, 0x01	; 1
    5b96:	33 16       	cp	r3, r19
    5b98:	08 f0       	brcs	.+2      	; 0x5b9c <_Z10readUInt64PhPj+0xb0>
    5b9a:	e0 e0       	ldi	r30, 0x00	; 0
    5b9c:	fe 2b       	or	r31, r30
    5b9e:	33 2d       	mov	r19, r3
    5ba0:	4e 0d       	add	r20, r14
    5ba2:	e1 e0       	ldi	r30, 0x01	; 1
    5ba4:	4e 15       	cp	r20, r14
    5ba6:	08 f0       	brcs	.+2      	; 0x5baa <_Z10readUInt64PhPj+0xbe>
    5ba8:	e0 e0       	ldi	r30, 0x00	; 0
    5baa:	2f 2e       	mov	r2, r31
    5bac:	24 0e       	add	r2, r20
    5bae:	f1 e0       	ldi	r31, 0x01	; 1
    5bb0:	24 16       	cp	r2, r20
    5bb2:	08 f0       	brcs	.+2      	; 0x5bb6 <_Z10readUInt64PhPj+0xca>
    5bb4:	f0 e0       	ldi	r31, 0x00	; 0
    5bb6:	ef 2b       	or	r30, r31
    5bb8:	42 2d       	mov	r20, r2
    5bba:	5b 0d       	add	r21, r11
    5bbc:	f1 e0       	ldi	r31, 0x01	; 1
    5bbe:	5b 15       	cp	r21, r11
    5bc0:	08 f0       	brcs	.+2      	; 0x5bc4 <_Z10readUInt64PhPj+0xd8>
    5bc2:	f0 e0       	ldi	r31, 0x00	; 0
    5bc4:	fe 2e       	mov	r15, r30
    5bc6:	f5 0e       	add	r15, r21
    5bc8:	e1 e0       	ldi	r30, 0x01	; 1
    5bca:	f5 16       	cp	r15, r21
    5bcc:	08 f0       	brcs	.+2      	; 0x5bd0 <_Z10readUInt64PhPj+0xe4>
    5bce:	e0 e0       	ldi	r30, 0x00	; 0
    5bd0:	fe 2b       	or	r31, r30
    5bd2:	5f 2d       	mov	r21, r15
    5bd4:	6a 0d       	add	r22, r10
    5bd6:	e1 e0       	ldi	r30, 0x01	; 1
    5bd8:	6a 15       	cp	r22, r10
    5bda:	08 f0       	brcs	.+2      	; 0x5bde <_Z10readUInt64PhPj+0xf2>
    5bdc:	e0 e0       	ldi	r30, 0x00	; 0
    5bde:	ef 2e       	mov	r14, r31
    5be0:	e6 0e       	add	r14, r22
    5be2:	f1 e0       	ldi	r31, 0x01	; 1
    5be4:	e6 16       	cp	r14, r22
    5be6:	08 f0       	brcs	.+2      	; 0x5bea <_Z10readUInt64PhPj+0xfe>
    5be8:	f0 e0       	ldi	r31, 0x00	; 0
    5bea:	ef 2b       	or	r30, r31
    5bec:	6e 2d       	mov	r22, r14
    5bee:	79 0d       	add	r23, r9
    5bf0:	f1 e0       	ldi	r31, 0x01	; 1
    5bf2:	79 15       	cp	r23, r9
    5bf4:	08 f0       	brcs	.+2      	; 0x5bf8 <_Z10readUInt64PhPj+0x10c>
    5bf6:	f0 e0       	ldi	r31, 0x00	; 0
    5bf8:	de 2e       	mov	r13, r30
    5bfa:	d7 0e       	add	r13, r23
    5bfc:	e1 e0       	ldi	r30, 0x01	; 1
    5bfe:	d7 16       	cp	r13, r23
    5c00:	08 f0       	brcs	.+2      	; 0x5c04 <_Z10readUInt64PhPj+0x118>
    5c02:	e0 e0       	ldi	r30, 0x00	; 0
    5c04:	fe 2b       	or	r31, r30
    5c06:	7d 2d       	mov	r23, r13
    5c08:	88 0d       	add	r24, r8
    5c0a:	e1 e0       	ldi	r30, 0x01	; 1
    5c0c:	88 15       	cp	r24, r8
    5c0e:	08 f0       	brcs	.+2      	; 0x5c12 <_Z10readUInt64PhPj+0x126>
    5c10:	e0 e0       	ldi	r30, 0x00	; 0
    5c12:	cf 2e       	mov	r12, r31
    5c14:	c8 0e       	add	r12, r24
    5c16:	f1 e0       	ldi	r31, 0x01	; 1
    5c18:	c8 16       	cp	r12, r24
    5c1a:	08 f0       	brcs	.+2      	; 0x5c1e <_Z10readUInt64PhPj+0x132>
    5c1c:	f0 e0       	ldi	r31, 0x00	; 0
    5c1e:	ef 2b       	or	r30, r31
    5c20:	8c 2d       	mov	r24, r12
    5c22:	96 0d       	add	r25, r6
    5c24:	9e 0f       	add	r25, r30
    5c26:	ec 81       	ldd	r30, Y+4	; 0x04
    5c28:	fd 81       	ldd	r31, Y+5	; 0x05
    5c2a:	aa 81       	ldd	r26, Y+2	; 0x02
    5c2c:	bb 81       	ldd	r27, Y+3	; 0x03
    5c2e:	ea 0f       	add	r30, r26
    5c30:	fb 1f       	adc	r31, r27
    5c32:	70 80       	ld	r7, Z
    5c34:	72 0e       	add	r7, r18
    5c36:	f1 e0       	ldi	r31, 0x01	; 1
    5c38:	72 16       	cp	r7, r18
    5c3a:	08 f0       	brcs	.+2      	; 0x5c3e <_Z10readUInt64PhPj+0x152>
    5c3c:	f0 e0       	ldi	r31, 0x00	; 0
    5c3e:	e1 e0       	ldi	r30, 0x01	; 1
    5c40:	33 16       	cp	r3, r19
    5c42:	08 f0       	brcs	.+2      	; 0x5c46 <_Z10readUInt64PhPj+0x15a>
    5c44:	e0 e0       	ldi	r30, 0x00	; 0
    5c46:	bf 2e       	mov	r11, r31
    5c48:	b3 0c       	add	r11, r3
    5c4a:	21 e0       	ldi	r18, 0x01	; 1
    5c4c:	b3 14       	cp	r11, r3
    5c4e:	08 f0       	brcs	.+2      	; 0x5c52 <_Z10readUInt64PhPj+0x166>
    5c50:	20 e0       	ldi	r18, 0x00	; 0
    5c52:	e2 2b       	or	r30, r18
    5c54:	3b 2c       	mov	r3, r11
    5c56:	21 e0       	ldi	r18, 0x01	; 1
    5c58:	24 16       	cp	r2, r20
    5c5a:	08 f0       	brcs	.+2      	; 0x5c5e <_Z10readUInt64PhPj+0x172>
    5c5c:	20 e0       	ldi	r18, 0x00	; 0
    5c5e:	ae 2e       	mov	r10, r30
    5c60:	a2 0c       	add	r10, r2
    5c62:	31 e0       	ldi	r19, 0x01	; 1
    5c64:	a2 14       	cp	r10, r2
    5c66:	08 f0       	brcs	.+2      	; 0x5c6a <_Z10readUInt64PhPj+0x17e>
    5c68:	30 e0       	ldi	r19, 0x00	; 0
    5c6a:	23 2b       	or	r18, r19
    5c6c:	2a 2c       	mov	r2, r10
    5c6e:	31 e0       	ldi	r19, 0x01	; 1
    5c70:	f5 16       	cp	r15, r21
    5c72:	08 f0       	brcs	.+2      	; 0x5c76 <_Z10readUInt64PhPj+0x18a>
    5c74:	30 e0       	ldi	r19, 0x00	; 0
    5c76:	92 2e       	mov	r9, r18
    5c78:	9f 0c       	add	r9, r15
    5c7a:	21 e0       	ldi	r18, 0x01	; 1
    5c7c:	9f 14       	cp	r9, r15
    5c7e:	08 f0       	brcs	.+2      	; 0x5c82 <_Z10readUInt64PhPj+0x196>
    5c80:	20 e0       	ldi	r18, 0x00	; 0
    5c82:	32 2b       	or	r19, r18
    5c84:	f9 2c       	mov	r15, r9
    5c86:	21 e0       	ldi	r18, 0x01	; 1
    5c88:	e6 16       	cp	r14, r22
    5c8a:	08 f0       	brcs	.+2      	; 0x5c8e <_Z10readUInt64PhPj+0x1a2>
    5c8c:	20 e0       	ldi	r18, 0x00	; 0
    5c8e:	83 2e       	mov	r8, r19
    5c90:	8e 0c       	add	r8, r14
    5c92:	31 e0       	ldi	r19, 0x01	; 1
    5c94:	8e 14       	cp	r8, r14
    5c96:	08 f0       	brcs	.+2      	; 0x5c9a <_Z10readUInt64PhPj+0x1ae>
    5c98:	30 e0       	ldi	r19, 0x00	; 0
    5c9a:	23 2b       	or	r18, r19
    5c9c:	e8 2c       	mov	r14, r8
    5c9e:	31 e0       	ldi	r19, 0x01	; 1
    5ca0:	d7 16       	cp	r13, r23
    5ca2:	08 f0       	brcs	.+2      	; 0x5ca6 <_Z10readUInt64PhPj+0x1ba>
    5ca4:	30 e0       	ldi	r19, 0x00	; 0
    5ca6:	52 2e       	mov	r5, r18
    5ca8:	5d 0c       	add	r5, r13
    5caa:	21 e0       	ldi	r18, 0x01	; 1
    5cac:	5d 14       	cp	r5, r13
    5cae:	08 f0       	brcs	.+2      	; 0x5cb2 <_Z10readUInt64PhPj+0x1c6>
    5cb0:	20 e0       	ldi	r18, 0x00	; 0
    5cb2:	32 2b       	or	r19, r18
    5cb4:	d5 2c       	mov	r13, r5
    5cb6:	21 e0       	ldi	r18, 0x01	; 1
    5cb8:	c8 16       	cp	r12, r24
    5cba:	08 f0       	brcs	.+2      	; 0x5cbe <_Z10readUInt64PhPj+0x1d2>
    5cbc:	20 e0       	ldi	r18, 0x00	; 0
    5cbe:	43 2e       	mov	r4, r19
    5cc0:	4c 0c       	add	r4, r12
    5cc2:	81 e0       	ldi	r24, 0x01	; 1
    5cc4:	4c 14       	cp	r4, r12
    5cc6:	08 f0       	brcs	.+2      	; 0x5cca <_Z10readUInt64PhPj+0x1de>
    5cc8:	80 e0       	ldi	r24, 0x00	; 0
    5cca:	28 2b       	or	r18, r24
    5ccc:	c4 2c       	mov	r12, r4
    5cce:	62 2e       	mov	r6, r18
    5cd0:	69 0e       	add	r6, r25
}
unsigned long long readUInt64(unsigned char data[], unsigned int *offset){
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
    5cd2:	ec 81       	ldd	r30, Y+4	; 0x04
    5cd4:	fd 81       	ldd	r31, Y+5	; 0x05
    5cd6:	2a 81       	ldd	r18, Y+2	; 0x02
    5cd8:	3b 81       	ldd	r19, Y+3	; 0x03
    5cda:	e2 0f       	add	r30, r18
    5cdc:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    5cde:	25 81       	ldd	r18, Z+5	; 0x05
    5ce0:	30 e0       	ldi	r19, 0x00	; 0
    5ce2:	40 e0       	ldi	r20, 0x00	; 0
    5ce4:	50 e0       	ldi	r21, 0x00	; 0
    5ce6:	60 e0       	ldi	r22, 0x00	; 0
    5ce8:	70 e0       	ldi	r23, 0x00	; 0
    5cea:	80 e0       	ldi	r24, 0x00	; 0
    5cec:	90 e0       	ldi	r25, 0x00	; 0
    5cee:	08 e2       	ldi	r16, 0x28	; 40
    5cf0:	0e 94 53 31 	call	0x62a6	; 0x62a6 <__ashldi3>
    5cf4:	27 0d       	add	r18, r7
    5cf6:	2e 83       	std	Y+6, r18	; 0x06
    5cf8:	11 e0       	ldi	r17, 0x01	; 1
    5cfa:	27 15       	cp	r18, r7
    5cfc:	08 f0       	brcs	.+2      	; 0x5d00 <_Z10readUInt64PhPj+0x214>
    5cfe:	10 e0       	ldi	r17, 0x00	; 0
    5d00:	b3 0e       	add	r11, r19
    5d02:	21 e0       	ldi	r18, 0x01	; 1
    5d04:	b3 14       	cp	r11, r3
    5d06:	08 f0       	brcs	.+2      	; 0x5d0a <_Z10readUInt64PhPj+0x21e>
    5d08:	20 e0       	ldi	r18, 0x00	; 0
    5d0a:	1b 0d       	add	r17, r11
    5d0c:	31 e0       	ldi	r19, 0x01	; 1
    5d0e:	1b 15       	cp	r17, r11
    5d10:	08 f0       	brcs	.+2      	; 0x5d14 <_Z10readUInt64PhPj+0x228>
    5d12:	30 e0       	ldi	r19, 0x00	; 0
    5d14:	23 2b       	or	r18, r19
    5d16:	b1 2e       	mov	r11, r17
    5d18:	a4 0e       	add	r10, r20
    5d1a:	31 e0       	ldi	r19, 0x01	; 1
    5d1c:	a2 14       	cp	r10, r2
    5d1e:	08 f0       	brcs	.+2      	; 0x5d22 <_Z10readUInt64PhPj+0x236>
    5d20:	30 e0       	ldi	r19, 0x00	; 0
    5d22:	2a 0d       	add	r18, r10
    5d24:	29 83       	std	Y+1, r18	; 0x01
    5d26:	21 e0       	ldi	r18, 0x01	; 1
    5d28:	49 81       	ldd	r20, Y+1	; 0x01
    5d2a:	4a 15       	cp	r20, r10
    5d2c:	08 f0       	brcs	.+2      	; 0x5d30 <_Z10readUInt64PhPj+0x244>
    5d2e:	20 e0       	ldi	r18, 0x00	; 0
    5d30:	32 2b       	or	r19, r18
    5d32:	a9 80       	ldd	r10, Y+1	; 0x01
    5d34:	95 0e       	add	r9, r21
    5d36:	21 e0       	ldi	r18, 0x01	; 1
    5d38:	9f 14       	cp	r9, r15
    5d3a:	08 f0       	brcs	.+2      	; 0x5d3e <_Z10readUInt64PhPj+0x252>
    5d3c:	20 e0       	ldi	r18, 0x00	; 0
    5d3e:	23 2e       	mov	r2, r19
    5d40:	29 0c       	add	r2, r9
    5d42:	31 e0       	ldi	r19, 0x01	; 1
    5d44:	29 14       	cp	r2, r9
    5d46:	08 f0       	brcs	.+2      	; 0x5d4a <_Z10readUInt64PhPj+0x25e>
    5d48:	30 e0       	ldi	r19, 0x00	; 0
    5d4a:	23 2b       	or	r18, r19
    5d4c:	92 2c       	mov	r9, r2
    5d4e:	86 0e       	add	r8, r22
    5d50:	31 e0       	ldi	r19, 0x01	; 1
    5d52:	8e 14       	cp	r8, r14
    5d54:	08 f0       	brcs	.+2      	; 0x5d58 <_Z10readUInt64PhPj+0x26c>
    5d56:	30 e0       	ldi	r19, 0x00	; 0
    5d58:	32 2e       	mov	r3, r18
    5d5a:	38 0c       	add	r3, r8
    5d5c:	21 e0       	ldi	r18, 0x01	; 1
    5d5e:	38 14       	cp	r3, r8
    5d60:	08 f0       	brcs	.+2      	; 0x5d64 <_Z10readUInt64PhPj+0x278>
    5d62:	20 e0       	ldi	r18, 0x00	; 0
    5d64:	32 2b       	or	r19, r18
    5d66:	83 2c       	mov	r8, r3
    5d68:	57 0e       	add	r5, r23
    5d6a:	5a 86       	std	Y+10, r5	; 0x0a
    5d6c:	21 e0       	ldi	r18, 0x01	; 1
    5d6e:	5d 14       	cp	r5, r13
    5d70:	08 f0       	brcs	.+2      	; 0x5d74 <_Z10readUInt64PhPj+0x288>
    5d72:	20 e0       	ldi	r18, 0x00	; 0
    5d74:	7a 84       	ldd	r7, Y+10	; 0x0a
    5d76:	73 0e       	add	r7, r19
    5d78:	31 e0       	ldi	r19, 0x01	; 1
    5d7a:	aa 85       	ldd	r26, Y+10	; 0x0a
    5d7c:	7a 16       	cp	r7, r26
    5d7e:	08 f0       	brcs	.+2      	; 0x5d82 <_Z10readUInt64PhPj+0x296>
    5d80:	30 e0       	ldi	r19, 0x00	; 0
    5d82:	23 2b       	or	r18, r19
    5d84:	7a 86       	std	Y+10, r7	; 0x0a
    5d86:	48 0e       	add	r4, r24
    5d88:	4b 86       	std	Y+11, r4	; 0x0b
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	4c 14       	cp	r4, r12
    5d8e:	08 f0       	brcs	.+2      	; 0x5d92 <_Z10readUInt64PhPj+0x2a6>
    5d90:	80 e0       	ldi	r24, 0x00	; 0
    5d92:	cb 84       	ldd	r12, Y+11	; 0x0b
    5d94:	c2 0e       	add	r12, r18
    5d96:	21 e0       	ldi	r18, 0x01	; 1
    5d98:	bb 85       	ldd	r27, Y+11	; 0x0b
    5d9a:	cb 16       	cp	r12, r27
    5d9c:	08 f0       	brcs	.+2      	; 0x5da0 <_Z10readUInt64PhPj+0x2b4>
    5d9e:	20 e0       	ldi	r18, 0x00	; 0
    5da0:	82 2b       	or	r24, r18
    5da2:	cb 86       	std	Y+11, r12	; 0x0b
    5da4:	69 0e       	add	r6, r25
    5da6:	68 0e       	add	r6, r24
unsigned long long readUInt64(unsigned char data[], unsigned int *offset){
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
    5da8:	ec 81       	ldd	r30, Y+4	; 0x04
    5daa:	fd 81       	ldd	r31, Y+5	; 0x05
    5dac:	2a 81       	ldd	r18, Y+2	; 0x02
    5dae:	3b 81       	ldd	r19, Y+3	; 0x03
    5db0:	e2 0f       	add	r30, r18
    5db2:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    5db4:	24 81       	ldd	r18, Z+4	; 0x04
    5db6:	30 e0       	ldi	r19, 0x00	; 0
    5db8:	40 e0       	ldi	r20, 0x00	; 0
    5dba:	50 e0       	ldi	r21, 0x00	; 0
    5dbc:	60 e0       	ldi	r22, 0x00	; 0
    5dbe:	70 e0       	ldi	r23, 0x00	; 0
    5dc0:	80 e0       	ldi	r24, 0x00	; 0
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	00 e2       	ldi	r16, 0x20	; 32
    5dc6:	0e 94 53 31 	call	0x62a6	; 0x62a6 <__ashldi3>
    5dca:	ae 81       	ldd	r26, Y+6	; 0x06
    5dcc:	a2 0f       	add	r26, r18
    5dce:	af 83       	std	Y+7, r26	; 0x07
    5dd0:	21 e0       	ldi	r18, 0x01	; 1
    5dd2:	be 81       	ldd	r27, Y+6	; 0x06
    5dd4:	ab 17       	cp	r26, r27
    5dd6:	08 f0       	brcs	.+2      	; 0x5dda <_Z10readUInt64PhPj+0x2ee>
    5dd8:	20 e0       	ldi	r18, 0x00	; 0
    5dda:	13 0f       	add	r17, r19
    5ddc:	31 e0       	ldi	r19, 0x01	; 1
    5dde:	1b 15       	cp	r17, r11
    5de0:	08 f0       	brcs	.+2      	; 0x5de4 <_Z10readUInt64PhPj+0x2f8>
    5de2:	30 e0       	ldi	r19, 0x00	; 0
    5de4:	e2 2e       	mov	r14, r18
    5de6:	e1 0e       	add	r14, r17
    5de8:	21 e0       	ldi	r18, 0x01	; 1
    5dea:	e1 16       	cp	r14, r17
    5dec:	08 f0       	brcs	.+2      	; 0x5df0 <_Z10readUInt64PhPj+0x304>
    5dee:	20 e0       	ldi	r18, 0x00	; 0
    5df0:	32 2b       	or	r19, r18
    5df2:	1e 2d       	mov	r17, r14
    5df4:	f9 80       	ldd	r15, Y+1	; 0x01
    5df6:	f4 0e       	add	r15, r20
    5df8:	21 e0       	ldi	r18, 0x01	; 1
    5dfa:	fa 14       	cp	r15, r10
    5dfc:	08 f0       	brcs	.+2      	; 0x5e00 <_Z10readUInt64PhPj+0x314>
    5dfe:	20 e0       	ldi	r18, 0x00	; 0
    5e00:	3f 0d       	add	r19, r15
    5e02:	39 83       	std	Y+1, r19	; 0x01
    5e04:	31 e0       	ldi	r19, 0x01	; 1
    5e06:	e9 81       	ldd	r30, Y+1	; 0x01
    5e08:	ef 15       	cp	r30, r15
    5e0a:	08 f0       	brcs	.+2      	; 0x5e0e <_Z10readUInt64PhPj+0x322>
    5e0c:	30 e0       	ldi	r19, 0x00	; 0
    5e0e:	23 2b       	or	r18, r19
    5e10:	f9 80       	ldd	r15, Y+1	; 0x01
    5e12:	d2 2c       	mov	r13, r2
    5e14:	d5 0e       	add	r13, r21
    5e16:	31 e0       	ldi	r19, 0x01	; 1
    5e18:	d9 14       	cp	r13, r9
    5e1a:	08 f0       	brcs	.+2      	; 0x5e1e <_Z10readUInt64PhPj+0x332>
    5e1c:	30 e0       	ldi	r19, 0x00	; 0
    5e1e:	42 2e       	mov	r4, r18
    5e20:	4d 0c       	add	r4, r13
    5e22:	21 e0       	ldi	r18, 0x01	; 1
    5e24:	4d 14       	cp	r4, r13
    5e26:	08 f0       	brcs	.+2      	; 0x5e2a <_Z10readUInt64PhPj+0x33e>
    5e28:	20 e0       	ldi	r18, 0x00	; 0
    5e2a:	32 2b       	or	r19, r18
    5e2c:	d4 2c       	mov	r13, r4
    5e2e:	b3 2c       	mov	r11, r3
    5e30:	b6 0e       	add	r11, r22
    5e32:	21 e0       	ldi	r18, 0x01	; 1
    5e34:	b8 14       	cp	r11, r8
    5e36:	08 f0       	brcs	.+2      	; 0x5e3a <_Z10readUInt64PhPj+0x34e>
    5e38:	20 e0       	ldi	r18, 0x00	; 0
    5e3a:	53 2e       	mov	r5, r19
    5e3c:	5b 0c       	add	r5, r11
    5e3e:	31 e0       	ldi	r19, 0x01	; 1
    5e40:	5b 14       	cp	r5, r11
    5e42:	08 f0       	brcs	.+2      	; 0x5e46 <_Z10readUInt64PhPj+0x35a>
    5e44:	30 e0       	ldi	r19, 0x00	; 0
    5e46:	23 2b       	or	r18, r19
    5e48:	b5 2c       	mov	r11, r5
    5e4a:	97 2c       	mov	r9, r7
    5e4c:	97 0e       	add	r9, r23
    5e4e:	31 e0       	ldi	r19, 0x01	; 1
    5e50:	fa 85       	ldd	r31, Y+10	; 0x0a
    5e52:	9f 16       	cp	r9, r31
    5e54:	08 f0       	brcs	.+2      	; 0x5e58 <_Z10readUInt64PhPj+0x36c>
    5e56:	30 e0       	ldi	r19, 0x00	; 0
    5e58:	72 2e       	mov	r7, r18
    5e5a:	79 0c       	add	r7, r9
    5e5c:	21 e0       	ldi	r18, 0x01	; 1
    5e5e:	79 14       	cp	r7, r9
    5e60:	08 f0       	brcs	.+2      	; 0x5e64 <_Z10readUInt64PhPj+0x378>
    5e62:	20 e0       	ldi	r18, 0x00	; 0
    5e64:	32 2b       	or	r19, r18
    5e66:	97 2c       	mov	r9, r7
    5e68:	ac 2c       	mov	r10, r12
    5e6a:	a8 0e       	add	r10, r24
    5e6c:	81 e0       	ldi	r24, 0x01	; 1
    5e6e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5e70:	a2 16       	cp	r10, r18
    5e72:	08 f0       	brcs	.+2      	; 0x5e76 <_Z10readUInt64PhPj+0x38a>
    5e74:	80 e0       	ldi	r24, 0x00	; 0
    5e76:	83 2e       	mov	r8, r19
    5e78:	8a 0c       	add	r8, r10
    5e7a:	21 e0       	ldi	r18, 0x01	; 1
    5e7c:	8a 14       	cp	r8, r10
    5e7e:	08 f0       	brcs	.+2      	; 0x5e82 <_Z10readUInt64PhPj+0x396>
    5e80:	20 e0       	ldi	r18, 0x00	; 0
    5e82:	82 2b       	or	r24, r18
    5e84:	a8 2c       	mov	r10, r8
    5e86:	69 0e       	add	r6, r25
    5e88:	68 0e       	add	r6, r24
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
    5e8a:	ec 81       	ldd	r30, Y+4	; 0x04
    5e8c:	fd 81       	ldd	r31, Y+5	; 0x05
    5e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e90:	9b 81       	ldd	r25, Y+3	; 0x03
    5e92:	e8 0f       	add	r30, r24
    5e94:	f9 1f       	adc	r31, r25
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    5e96:	23 81       	ldd	r18, Z+3	; 0x03
    5e98:	30 e0       	ldi	r19, 0x00	; 0
    5e9a:	40 e0       	ldi	r20, 0x00	; 0
    5e9c:	50 e0       	ldi	r21, 0x00	; 0
    5e9e:	60 e0       	ldi	r22, 0x00	; 0
    5ea0:	70 e0       	ldi	r23, 0x00	; 0
    5ea2:	80 e0       	ldi	r24, 0x00	; 0
    5ea4:	90 e0       	ldi	r25, 0x00	; 0
    5ea6:	08 e1       	ldi	r16, 0x18	; 24
    5ea8:	0e 94 53 31 	call	0x62a6	; 0x62a6 <__ashldi3>
    5eac:	2f 80       	ldd	r2, Y+7	; 0x07
    5eae:	22 0e       	add	r2, r18
    5eb0:	21 e0       	ldi	r18, 0x01	; 1
    5eb2:	af 81       	ldd	r26, Y+7	; 0x07
    5eb4:	2a 16       	cp	r2, r26
    5eb6:	08 f0       	brcs	.+2      	; 0x5eba <_Z10readUInt64PhPj+0x3ce>
    5eb8:	20 e0       	ldi	r18, 0x00	; 0
    5eba:	e3 0e       	add	r14, r19
    5ebc:	31 e0       	ldi	r19, 0x01	; 1
    5ebe:	e1 16       	cp	r14, r17
    5ec0:	08 f0       	brcs	.+2      	; 0x5ec4 <_Z10readUInt64PhPj+0x3d8>
    5ec2:	30 e0       	ldi	r19, 0x00	; 0
    5ec4:	32 2e       	mov	r3, r18
    5ec6:	3e 0c       	add	r3, r14
    5ec8:	21 e0       	ldi	r18, 0x01	; 1
    5eca:	3e 14       	cp	r3, r14
    5ecc:	08 f0       	brcs	.+2      	; 0x5ed0 <_Z10readUInt64PhPj+0x3e4>
    5ece:	20 e0       	ldi	r18, 0x00	; 0
    5ed0:	32 2b       	or	r19, r18
    5ed2:	e3 2c       	mov	r14, r3
    5ed4:	b9 81       	ldd	r27, Y+1	; 0x01
    5ed6:	b4 0f       	add	r27, r20
    5ed8:	be 83       	std	Y+6, r27	; 0x06
    5eda:	21 e0       	ldi	r18, 0x01	; 1
    5edc:	bf 15       	cp	r27, r15
    5ede:	08 f0       	brcs	.+2      	; 0x5ee2 <_Z10readUInt64PhPj+0x3f6>
    5ee0:	20 e0       	ldi	r18, 0x00	; 0
    5ee2:	ce 80       	ldd	r12, Y+6	; 0x06
    5ee4:	c3 0e       	add	r12, r19
    5ee6:	31 e0       	ldi	r19, 0x01	; 1
    5ee8:	ee 81       	ldd	r30, Y+6	; 0x06
    5eea:	ce 16       	cp	r12, r30
    5eec:	08 f0       	brcs	.+2      	; 0x5ef0 <_Z10readUInt64PhPj+0x404>
    5eee:	30 e0       	ldi	r19, 0x00	; 0
    5ef0:	23 2b       	or	r18, r19
    5ef2:	ce 82       	std	Y+6, r12	; 0x06
    5ef4:	45 0e       	add	r4, r21
    5ef6:	4f 82       	std	Y+7, r4	; 0x07
    5ef8:	31 e0       	ldi	r19, 0x01	; 1
    5efa:	4d 14       	cp	r4, r13
    5efc:	08 f0       	brcs	.+2      	; 0x5f00 <_Z10readUInt64PhPj+0x414>
    5efe:	30 e0       	ldi	r19, 0x00	; 0
    5f00:	4f 80       	ldd	r4, Y+7	; 0x07
    5f02:	42 0e       	add	r4, r18
    5f04:	21 e0       	ldi	r18, 0x01	; 1
    5f06:	ff 81       	ldd	r31, Y+7	; 0x07
    5f08:	4f 16       	cp	r4, r31
    5f0a:	08 f0       	brcs	.+2      	; 0x5f0e <_Z10readUInt64PhPj+0x422>
    5f0c:	20 e0       	ldi	r18, 0x00	; 0
    5f0e:	32 2b       	or	r19, r18
    5f10:	4f 82       	std	Y+7, r4	; 0x07
    5f12:	f5 2c       	mov	r15, r5
    5f14:	f6 0e       	add	r15, r22
    5f16:	21 e0       	ldi	r18, 0x01	; 1
    5f18:	fb 14       	cp	r15, r11
    5f1a:	08 f0       	brcs	.+2      	; 0x5f1e <_Z10readUInt64PhPj+0x432>
    5f1c:	20 e0       	ldi	r18, 0x00	; 0
    5f1e:	53 2e       	mov	r5, r19
    5f20:	5f 0c       	add	r5, r15
    5f22:	31 e0       	ldi	r19, 0x01	; 1
    5f24:	5f 14       	cp	r5, r15
    5f26:	08 f0       	brcs	.+2      	; 0x5f2a <_Z10readUInt64PhPj+0x43e>
    5f28:	30 e0       	ldi	r19, 0x00	; 0
    5f2a:	23 2b       	or	r18, r19
    5f2c:	f5 2c       	mov	r15, r5
    5f2e:	d7 2c       	mov	r13, r7
    5f30:	d7 0e       	add	r13, r23
    5f32:	11 e0       	ldi	r17, 0x01	; 1
    5f34:	d9 14       	cp	r13, r9
    5f36:	08 f0       	brcs	.+2      	; 0x5f3a <_Z10readUInt64PhPj+0x44e>
    5f38:	10 e0       	ldi	r17, 0x00	; 0
    5f3a:	72 2e       	mov	r7, r18
    5f3c:	7d 0c       	add	r7, r13
    5f3e:	21 e0       	ldi	r18, 0x01	; 1
    5f40:	7d 14       	cp	r7, r13
    5f42:	08 f0       	brcs	.+2      	; 0x5f46 <_Z10readUInt64PhPj+0x45a>
    5f44:	20 e0       	ldi	r18, 0x00	; 0
    5f46:	12 2b       	or	r17, r18
    5f48:	d7 2c       	mov	r13, r7
    5f4a:	98 2c       	mov	r9, r8
    5f4c:	98 0e       	add	r9, r24
    5f4e:	81 e0       	ldi	r24, 0x01	; 1
    5f50:	9a 14       	cp	r9, r10
    5f52:	08 f0       	brcs	.+2      	; 0x5f56 <_Z10readUInt64PhPj+0x46a>
    5f54:	80 e0       	ldi	r24, 0x00	; 0
    5f56:	19 0d       	add	r17, r9
    5f58:	21 e0       	ldi	r18, 0x01	; 1
    5f5a:	19 15       	cp	r17, r9
    5f5c:	08 f0       	brcs	.+2      	; 0x5f60 <_Z10readUInt64PhPj+0x474>
    5f5e:	20 e0       	ldi	r18, 0x00	; 0
    5f60:	82 2b       	or	r24, r18
    5f62:	91 2e       	mov	r9, r17
    5f64:	69 0e       	add	r6, r25
    5f66:	68 0e       	add	r6, r24
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
    5f68:	ec 81       	ldd	r30, Y+4	; 0x04
    5f6a:	fd 81       	ldd	r31, Y+5	; 0x05
    5f6c:	2a 81       	ldd	r18, Y+2	; 0x02
    5f6e:	3b 81       	ldd	r19, Y+3	; 0x03
    5f70:	e2 0f       	add	r30, r18
    5f72:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    5f74:	22 81       	ldd	r18, Z+2	; 0x02
    5f76:	30 e0       	ldi	r19, 0x00	; 0
    5f78:	40 e0       	ldi	r20, 0x00	; 0
    5f7a:	50 e0       	ldi	r21, 0x00	; 0
    5f7c:	60 e0       	ldi	r22, 0x00	; 0
    5f7e:	70 e0       	ldi	r23, 0x00	; 0
    5f80:	80 e0       	ldi	r24, 0x00	; 0
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	00 e1       	ldi	r16, 0x10	; 16
    5f86:	0e 94 53 31 	call	0x62a6	; 0x62a6 <__ashldi3>
    5f8a:	22 0d       	add	r18, r2
    5f8c:	29 83       	std	Y+1, r18	; 0x01
    5f8e:	21 e0       	ldi	r18, 0x01	; 1
    5f90:	a9 81       	ldd	r26, Y+1	; 0x01
    5f92:	a2 15       	cp	r26, r2
    5f94:	08 f0       	brcs	.+2      	; 0x5f98 <_Z10readUInt64PhPj+0x4ac>
    5f96:	20 e0       	ldi	r18, 0x00	; 0
    5f98:	b3 2c       	mov	r11, r3
    5f9a:	b3 0e       	add	r11, r19
    5f9c:	31 e0       	ldi	r19, 0x01	; 1
    5f9e:	be 14       	cp	r11, r14
    5fa0:	08 f0       	brcs	.+2      	; 0x5fa4 <_Z10readUInt64PhPj+0x4b8>
    5fa2:	30 e0       	ldi	r19, 0x00	; 0
    5fa4:	22 2e       	mov	r2, r18
    5fa6:	2b 0c       	add	r2, r11
    5fa8:	21 e0       	ldi	r18, 0x01	; 1
    5faa:	2b 14       	cp	r2, r11
    5fac:	08 f0       	brcs	.+2      	; 0x5fb0 <_Z10readUInt64PhPj+0x4c4>
    5fae:	20 e0       	ldi	r18, 0x00	; 0
    5fb0:	32 2b       	or	r19, r18
    5fb2:	b2 2c       	mov	r11, r2
    5fb4:	c4 0e       	add	r12, r20
    5fb6:	21 e0       	ldi	r18, 0x01	; 1
    5fb8:	be 81       	ldd	r27, Y+6	; 0x06
    5fba:	cb 16       	cp	r12, r27
    5fbc:	08 f0       	brcs	.+2      	; 0x5fc0 <_Z10readUInt64PhPj+0x4d4>
    5fbe:	20 e0       	ldi	r18, 0x00	; 0
    5fc0:	33 2e       	mov	r3, r19
    5fc2:	3c 0c       	add	r3, r12
    5fc4:	31 e0       	ldi	r19, 0x01	; 1
    5fc6:	3c 14       	cp	r3, r12
    5fc8:	08 f0       	brcs	.+2      	; 0x5fcc <_Z10readUInt64PhPj+0x4e0>
    5fca:	30 e0       	ldi	r19, 0x00	; 0
    5fcc:	23 2b       	or	r18, r19
    5fce:	c3 2c       	mov	r12, r3
    5fd0:	e4 2c       	mov	r14, r4
    5fd2:	e5 0e       	add	r14, r21
    5fd4:	31 e0       	ldi	r19, 0x01	; 1
    5fd6:	ef 81       	ldd	r30, Y+7	; 0x07
    5fd8:	ee 16       	cp	r14, r30
    5fda:	08 f0       	brcs	.+2      	; 0x5fde <_Z10readUInt64PhPj+0x4f2>
    5fdc:	30 e0       	ldi	r19, 0x00	; 0
    5fde:	42 2e       	mov	r4, r18
    5fe0:	4e 0c       	add	r4, r14
    5fe2:	21 e0       	ldi	r18, 0x01	; 1
    5fe4:	4e 14       	cp	r4, r14
    5fe6:	08 f0       	brcs	.+2      	; 0x5fea <_Z10readUInt64PhPj+0x4fe>
    5fe8:	20 e0       	ldi	r18, 0x00	; 0
    5fea:	32 2b       	or	r19, r18
    5fec:	e4 2c       	mov	r14, r4
    5fee:	56 0e       	add	r5, r22
    5ff0:	21 e0       	ldi	r18, 0x01	; 1
    5ff2:	5f 14       	cp	r5, r15
    5ff4:	08 f0       	brcs	.+2      	; 0x5ff8 <_Z10readUInt64PhPj+0x50c>
    5ff6:	20 e0       	ldi	r18, 0x00	; 0
    5ff8:	83 2e       	mov	r8, r19
    5ffa:	85 0c       	add	r8, r5
    5ffc:	31 e0       	ldi	r19, 0x01	; 1
    5ffe:	85 14       	cp	r8, r5
    6000:	08 f0       	brcs	.+2      	; 0x6004 <_Z10readUInt64PhPj+0x518>
    6002:	30 e0       	ldi	r19, 0x00	; 0
    6004:	23 2b       	or	r18, r19
    6006:	58 2c       	mov	r5, r8
    6008:	77 0e       	add	r7, r23
    600a:	31 e0       	ldi	r19, 0x01	; 1
    600c:	7d 14       	cp	r7, r13
    600e:	08 f0       	brcs	.+2      	; 0x6012 <_Z10readUInt64PhPj+0x526>
    6010:	30 e0       	ldi	r19, 0x00	; 0
    6012:	a2 2e       	mov	r10, r18
    6014:	a7 0c       	add	r10, r7
    6016:	21 e0       	ldi	r18, 0x01	; 1
    6018:	a7 14       	cp	r10, r7
    601a:	08 f0       	brcs	.+2      	; 0x601e <_Z10readUInt64PhPj+0x532>
    601c:	20 e0       	ldi	r18, 0x00	; 0
    601e:	32 2b       	or	r19, r18
    6020:	7a 2c       	mov	r7, r10
    6022:	18 0f       	add	r17, r24
    6024:	81 e0       	ldi	r24, 0x01	; 1
    6026:	19 15       	cp	r17, r9
    6028:	08 f0       	brcs	.+2      	; 0x602c <_Z10readUInt64PhPj+0x540>
    602a:	80 e0       	ldi	r24, 0x00	; 0
    602c:	f3 2e       	mov	r15, r19
    602e:	f1 0e       	add	r15, r17
    6030:	21 e0       	ldi	r18, 0x01	; 1
    6032:	f1 16       	cp	r15, r17
    6034:	08 f0       	brcs	.+2      	; 0x6038 <_Z10readUInt64PhPj+0x54c>
    6036:	20 e0       	ldi	r18, 0x00	; 0
    6038:	82 2b       	or	r24, r18
    603a:	1f 2d       	mov	r17, r15
    603c:	d6 2c       	mov	r13, r6
    603e:	d9 0e       	add	r13, r25
    6040:	d8 0e       	add	r13, r24
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
    6042:	ec 81       	ldd	r30, Y+4	; 0x04
    6044:	fd 81       	ldd	r31, Y+5	; 0x05
    6046:	2a 81       	ldd	r18, Y+2	; 0x02
    6048:	3b 81       	ldd	r19, Y+3	; 0x03
    604a:	e2 0f       	add	r30, r18
    604c:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 0]);
    604e:	21 81       	ldd	r18, Z+1	; 0x01
    6050:	30 e0       	ldi	r19, 0x00	; 0
    6052:	40 e0       	ldi	r20, 0x00	; 0
    6054:	50 e0       	ldi	r21, 0x00	; 0
    6056:	60 e0       	ldi	r22, 0x00	; 0
    6058:	70 e0       	ldi	r23, 0x00	; 0
    605a:	80 e0       	ldi	r24, 0x00	; 0
    605c:	90 e0       	ldi	r25, 0x00	; 0
    605e:	08 e0       	ldi	r16, 0x08	; 8
    6060:	0e 94 53 31 	call	0x62a6	; 0x62a6 <__ashldi3>
    6064:	a9 81       	ldd	r26, Y+1	; 0x01
    6066:	2a 0f       	add	r18, r26
    6068:	f1 e0       	ldi	r31, 0x01	; 1
    606a:	2a 17       	cp	r18, r26
    606c:	08 f0       	brcs	.+2      	; 0x6070 <_Z10readUInt64PhPj+0x584>
    606e:	f0 e0       	ldi	r31, 0x00	; 0
    6070:	23 0e       	add	r2, r19
    6072:	e1 e0       	ldi	r30, 0x01	; 1
    6074:	2b 14       	cp	r2, r11
    6076:	08 f0       	brcs	.+2      	; 0x607a <_Z10readUInt64PhPj+0x58e>
    6078:	e0 e0       	ldi	r30, 0x00	; 0
    607a:	3f 2f       	mov	r19, r31
    607c:	32 0d       	add	r19, r2
    607e:	f1 e0       	ldi	r31, 0x01	; 1
    6080:	32 15       	cp	r19, r2
    6082:	08 f0       	brcs	.+2      	; 0x6086 <_Z10readUInt64PhPj+0x59a>
    6084:	f0 e0       	ldi	r31, 0x00	; 0
    6086:	ef 2b       	or	r30, r31
    6088:	34 0e       	add	r3, r20
    608a:	f1 e0       	ldi	r31, 0x01	; 1
    608c:	3c 14       	cp	r3, r12
    608e:	08 f0       	brcs	.+2      	; 0x6092 <_Z10readUInt64PhPj+0x5a6>
    6090:	f0 e0       	ldi	r31, 0x00	; 0
    6092:	4e 2f       	mov	r20, r30
    6094:	43 0d       	add	r20, r3
    6096:	e1 e0       	ldi	r30, 0x01	; 1
    6098:	43 15       	cp	r20, r3
    609a:	08 f0       	brcs	.+2      	; 0x609e <_Z10readUInt64PhPj+0x5b2>
    609c:	e0 e0       	ldi	r30, 0x00	; 0
    609e:	fe 2b       	or	r31, r30
    60a0:	45 0e       	add	r4, r21
    60a2:	e1 e0       	ldi	r30, 0x01	; 1
    60a4:	4e 14       	cp	r4, r14
    60a6:	08 f0       	brcs	.+2      	; 0x60aa <_Z10readUInt64PhPj+0x5be>
    60a8:	e0 e0       	ldi	r30, 0x00	; 0
    60aa:	5f 2f       	mov	r21, r31
    60ac:	54 0d       	add	r21, r4
    60ae:	f1 e0       	ldi	r31, 0x01	; 1
    60b0:	54 15       	cp	r21, r4
    60b2:	08 f0       	brcs	.+2      	; 0x60b6 <_Z10readUInt64PhPj+0x5ca>
    60b4:	f0 e0       	ldi	r31, 0x00	; 0
    60b6:	ef 2b       	or	r30, r31
    60b8:	86 0e       	add	r8, r22
    60ba:	f1 e0       	ldi	r31, 0x01	; 1
    60bc:	85 14       	cp	r8, r5
    60be:	08 f0       	brcs	.+2      	; 0x60c2 <_Z10readUInt64PhPj+0x5d6>
    60c0:	f0 e0       	ldi	r31, 0x00	; 0
    60c2:	6e 2f       	mov	r22, r30
    60c4:	68 0d       	add	r22, r8
    60c6:	e1 e0       	ldi	r30, 0x01	; 1
    60c8:	68 15       	cp	r22, r8
    60ca:	08 f0       	brcs	.+2      	; 0x60ce <_Z10readUInt64PhPj+0x5e2>
    60cc:	e0 e0       	ldi	r30, 0x00	; 0
    60ce:	fe 2b       	or	r31, r30
    60d0:	a7 0e       	add	r10, r23
    60d2:	e1 e0       	ldi	r30, 0x01	; 1
    60d4:	a7 14       	cp	r10, r7
    60d6:	08 f0       	brcs	.+2      	; 0x60da <_Z10readUInt64PhPj+0x5ee>
    60d8:	e0 e0       	ldi	r30, 0x00	; 0
    60da:	7f 2f       	mov	r23, r31
    60dc:	7a 0d       	add	r23, r10
    60de:	f1 e0       	ldi	r31, 0x01	; 1
    60e0:	7a 15       	cp	r23, r10
    60e2:	08 f0       	brcs	.+2      	; 0x60e6 <_Z10readUInt64PhPj+0x5fa>
    60e4:	f0 e0       	ldi	r31, 0x00	; 0
    60e6:	ef 2b       	or	r30, r31
    60e8:	f8 0e       	add	r15, r24
    60ea:	a1 e0       	ldi	r26, 0x01	; 1
    60ec:	f1 16       	cp	r15, r17
    60ee:	08 f0       	brcs	.+2      	; 0x60f2 <_Z10readUInt64PhPj+0x606>
    60f0:	a0 e0       	ldi	r26, 0x00	; 0
    60f2:	8e 2f       	mov	r24, r30
    60f4:	8f 0d       	add	r24, r15
    60f6:	e1 e0       	ldi	r30, 0x01	; 1
    60f8:	8f 15       	cp	r24, r15
    60fa:	08 f0       	brcs	.+2      	; 0x60fe <_Z10readUInt64PhPj+0x612>
    60fc:	e0 e0       	ldi	r30, 0x00	; 0
    60fe:	ae 2b       	or	r26, r30
    6100:	9d 0d       	add	r25, r13
	/*unsigned char byteCount = 2;
	for (int i = 0; i < byteCount; i++){
		out += data[*offset + byteCount - i] << (8 * i);
	}*/
	*offset += 8;
    6102:	0a 81       	ldd	r16, Y+2	; 0x02
    6104:	1b 81       	ldd	r17, Y+3	; 0x03
    6106:	08 5f       	subi	r16, 0xF8	; 248
    6108:	1f 4f       	sbci	r17, 0xFF	; 255
    610a:	e8 85       	ldd	r30, Y+8	; 0x08
    610c:	f9 85       	ldd	r31, Y+9	; 0x09
    610e:	11 83       	std	Z+1, r17	; 0x01
    6110:	00 83       	st	Z, r16
	return out;
}
    6112:	9a 0f       	add	r25, r26
    6114:	2b 96       	adiw	r28, 0x0b	; 11
    6116:	0f b6       	in	r0, 0x3f	; 63
    6118:	f8 94       	cli
    611a:	de bf       	out	0x3e, r29	; 62
    611c:	0f be       	out	0x3f, r0	; 63
    611e:	cd bf       	out	0x3d, r28	; 61
    6120:	df 91       	pop	r29
    6122:	cf 91       	pop	r28
    6124:	1f 91       	pop	r17
    6126:	0f 91       	pop	r16
    6128:	ff 90       	pop	r15
    612a:	ef 90       	pop	r14
    612c:	df 90       	pop	r13
    612e:	cf 90       	pop	r12
    6130:	bf 90       	pop	r11
    6132:	af 90       	pop	r10
    6134:	9f 90       	pop	r9
    6136:	8f 90       	pop	r8
    6138:	7f 90       	pop	r7
    613a:	6f 90       	pop	r6
    613c:	5f 90       	pop	r5
    613e:	4f 90       	pop	r4
    6140:	3f 90       	pop	r3
    6142:	2f 90       	pop	r2
    6144:	08 95       	ret

00006146 <_Z9readBytesPhS_iPj>:
void readBytes(unsigned char data[], unsigned char out[], int count, unsigned int *offset){
    6146:	0f 93       	push	r16
    6148:	1f 93       	push	r17
    614a:	cf 93       	push	r28
    614c:	df 93       	push	r29
    614e:	8c 01       	movw	r16, r24
    6150:	e9 01       	movw	r28, r18
	for (int i = 0; i < count; i++){
    6152:	14 16       	cp	r1, r20
    6154:	15 06       	cpc	r1, r21
    6156:	94 f4       	brge	.+36     	; 0x617c <_Z9readBytesPhS_iPj+0x36>
    6158:	a6 2f       	mov	r26, r22
    615a:	b7 2f       	mov	r27, r23
    615c:	20 e0       	ldi	r18, 0x00	; 0
    615e:	30 e0       	ldi	r19, 0x00	; 0
		out[i] = data[i + *offset];
    6160:	f8 01       	movw	r30, r16
    6162:	e2 0f       	add	r30, r18
    6164:	f3 1f       	adc	r31, r19
    6166:	88 81       	ld	r24, Y
    6168:	99 81       	ldd	r25, Y+1	; 0x01
    616a:	e8 0f       	add	r30, r24
    616c:	f9 1f       	adc	r31, r25
    616e:	80 81       	ld	r24, Z
    6170:	8d 93       	st	X+, r24
	}*/
	*offset += 8;
	return out;
}
void readBytes(unsigned char data[], unsigned char out[], int count, unsigned int *offset){
	for (int i = 0; i < count; i++){
    6172:	2f 5f       	subi	r18, 0xFF	; 255
    6174:	3f 4f       	sbci	r19, 0xFF	; 255
    6176:	24 17       	cp	r18, r20
    6178:	35 07       	cpc	r19, r21
    617a:	91 f7       	brne	.-28     	; 0x6160 <_Z9readBytesPhS_iPj+0x1a>
		out[i] = data[i + *offset];
	}
	*offset += count;
    617c:	88 81       	ld	r24, Y
    617e:	99 81       	ldd	r25, Y+1	; 0x01
    6180:	48 0f       	add	r20, r24
    6182:	59 1f       	adc	r21, r25
    6184:	59 83       	std	Y+1, r21	; 0x01
    6186:	48 83       	st	Y, r20
}
    6188:	df 91       	pop	r29
    618a:	cf 91       	pop	r28
    618c:	1f 91       	pop	r17
    618e:	0f 91       	pop	r16
    6190:	08 95       	ret

00006192 <_Z9readFloatPhPj>:

float readFloat(unsigned char data[], unsigned int* offset){
    6192:	fb 01       	movw	r30, r22
	byte *bytes = &data[*offset];
    6194:	20 81       	ld	r18, Z
    6196:	31 81       	ldd	r19, Z+1	; 0x01
	float* val = reinterpret_cast<float*>(bytes);
	*offset += 4;
    6198:	a9 01       	movw	r20, r18
    619a:	4c 5f       	subi	r20, 0xFC	; 252
    619c:	5f 4f       	sbci	r21, 0xFF	; 255
    619e:	51 83       	std	Z+1, r21	; 0x01
    61a0:	40 83       	st	Z, r20
	return *val;
    61a2:	fc 01       	movw	r30, r24
    61a4:	e2 0f       	add	r30, r18
    61a6:	f3 1f       	adc	r31, r19
    61a8:	50 81       	ld	r21, Z
    61aa:	41 81       	ldd	r20, Z+1	; 0x01
    61ac:	32 81       	ldd	r19, Z+2	; 0x02
    61ae:	23 81       	ldd	r18, Z+3	; 0x03
    61b0:	85 2f       	mov	r24, r21
    61b2:	94 2f       	mov	r25, r20
    61b4:	a3 2f       	mov	r26, r19
    61b6:	b2 2f       	mov	r27, r18
    61b8:	bc 01       	movw	r22, r24
    61ba:	cd 01       	movw	r24, r26
    61bc:	08 95       	ret

000061be <_Z9writeBytePhhi>:
 *      Author: EHaskins
 */

#include "ByteWriter.h"
int writeByte(unsigned char data[], unsigned char val, int offset){
	data[offset] = val;
    61be:	fc 01       	movw	r30, r24
    61c0:	e4 0f       	add	r30, r20
    61c2:	f5 1f       	adc	r31, r21
    61c4:	60 83       	st	Z, r22
	return offset + 1;
    61c6:	ca 01       	movw	r24, r20
    61c8:	01 96       	adiw	r24, 0x01	; 1
}
    61ca:	08 95       	ret

000061cc <_Z11writeUInt16Phtj>:
int writeUInt16(unsigned char data[], unsigned short val, unsigned int offset){

	data[offset + 1] = (unsigned char)(val >> 8);
    61cc:	fc 01       	movw	r30, r24
    61ce:	e4 0f       	add	r30, r20
    61d0:	f5 1f       	adc	r31, r21
    61d2:	71 83       	std	Z+1, r23	; 0x01
	data[offset + 0] = (unsigned char)val;
    61d4:	60 83       	st	Z, r22
	return offset + 2;
    61d6:	ca 01       	movw	r24, r20
    61d8:	02 96       	adiw	r24, 0x02	; 2
}
    61da:	08 95       	ret

000061dc <_Z11writeUInt32Phmj>:
int writeUInt32(unsigned char data[], unsigned long val, unsigned int offset){
	data[offset + 3] = (unsigned char)(val >> 24);
    61dc:	fc 01       	movw	r30, r24
    61de:	e2 0f       	add	r30, r18
    61e0:	f3 1f       	adc	r31, r19
    61e2:	73 83       	std	Z+3, r23	; 0x03
	data[offset + 2] = (unsigned char)(val >> 16);
    61e4:	62 83       	std	Z+2, r22	; 0x02
	data[offset + 1] = (unsigned char)(val >> 8);
    61e6:	51 83       	std	Z+1, r21	; 0x01
	data[offset + 0] = (unsigned char)val;
    61e8:	40 83       	st	Z, r20
	return offset + 4;
    61ea:	c9 01       	movw	r24, r18
    61ec:	04 96       	adiw	r24, 0x04	; 4
}
    61ee:	08 95       	ret

000061f0 <_Z17writeUInt32ForCrcPhmj>:

int writeUInt32ForCrc(unsigned char data[], unsigned long val, unsigned int offset){
	data[offset + 3] = (unsigned char)(val >> 24);
    61f0:	fc 01       	movw	r30, r24
    61f2:	e2 0f       	add	r30, r18
    61f4:	f3 1f       	adc	r31, r19
    61f6:	73 83       	std	Z+3, r23	; 0x03
	data[offset + 2] = (unsigned char)(val >> 16);
    61f8:	62 83       	std	Z+2, r22	; 0x02
	data[offset + 1] = (unsigned char)(val >> 8);
    61fa:	51 83       	std	Z+1, r21	; 0x01
	data[offset] = (unsigned char)val;
    61fc:	40 83       	st	Z, r20
	return offset + 4;
    61fe:	c9 01       	movw	r24, r18
    6200:	04 96       	adiw	r24, 0x04	; 4
}
    6202:	08 95       	ret

00006204 <_Z10writeBytesPhjS_ij>:

int writeBytes(unsigned char data[], unsigned int dataOffset, unsigned char val[], int count, unsigned int valOffset){
    6204:	0f 93       	push	r16
    6206:	1f 93       	push	r17
	for (int i = 0; i < count; i++){
    6208:	12 16       	cp	r1, r18
    620a:	13 06       	cpc	r1, r19
    620c:	74 f4       	brge	.+28     	; 0x622a <_Z10writeBytesPhjS_ij+0x26>
	data[offset + 1] = (unsigned char)(val >> 8);
	data[offset] = (unsigned char)val;
	return offset + 4;
}

int writeBytes(unsigned char data[], unsigned int dataOffset, unsigned char val[], int count, unsigned int valOffset){
    620e:	da 01       	movw	r26, r20
    6210:	a0 0f       	add	r26, r16
    6212:	b1 1f       	adc	r27, r17
    6214:	fc 01       	movw	r30, r24
    6216:	e6 0f       	add	r30, r22
    6218:	f7 1f       	adc	r31, r23
	for (int i = 0; i < count; i++){
    621a:	80 e0       	ldi	r24, 0x00	; 0
    621c:	90 e0       	ldi	r25, 0x00	; 0
		data[i + dataOffset] = val[i + valOffset];
    621e:	4d 91       	ld	r20, X+
    6220:	41 93       	st	Z+, r20
	data[offset] = (unsigned char)val;
	return offset + 4;
}

int writeBytes(unsigned char data[], unsigned int dataOffset, unsigned char val[], int count, unsigned int valOffset){
	for (int i = 0; i < count; i++){
    6222:	01 96       	adiw	r24, 0x01	; 1
    6224:	82 17       	cp	r24, r18
    6226:	93 07       	cpc	r25, r19
    6228:	d1 f7       	brne	.-12     	; 0x621e <_Z10writeBytesPhjS_ij+0x1a>
		data[i + dataOffset] = val[i + valOffset];
	}
	return dataOffset + count;
    622a:	26 0f       	add	r18, r22
    622c:	37 1f       	adc	r19, r23
}
    622e:	82 2f       	mov	r24, r18
    6230:	93 2f       	mov	r25, r19
    6232:	1f 91       	pop	r17
    6234:	0f 91       	pop	r16
    6236:	08 95       	ret

00006238 <_ZN17RobotModelSection6updateEPhj>:
	isActive = false;
}

void RobotModelSection::update(unsigned char data[], unsigned int offset){

}
    6238:	08 95       	ret

0000623a <_ZN17RobotModelSection9getStatusEPhPj>:
void RobotModelSection::getStatus(unsigned char data[], unsigned int *offset){

}
    623a:	08 95       	ret

0000623c <_ZN17RobotModelSection4loopEb>:

void RobotModelSection::loop(bool safteyTripped){
    623c:	1f 93       	push	r17
    623e:	cf 93       	push	r28
    6240:	df 93       	push	r29
    6242:	ec 01       	movw	r28, r24
    6244:	16 2f       	mov	r17, r22
	if (safteyTripped && !lastIsSafteyTripped)
    6246:	66 23       	and	r22, r22
    6248:	59 f0       	breq	.+22     	; 0x6260 <_ZN17RobotModelSection4loopEb+0x24>
    624a:	8d 81       	ldd	r24, Y+5	; 0x05
    624c:	88 23       	and	r24, r24
    624e:	59 f4       	brne	.+22     	; 0x6266 <_ZN17RobotModelSection4loopEb+0x2a>
		disableOutputs();
    6250:	e8 81       	ld	r30, Y
    6252:	f9 81       	ldd	r31, Y+1	; 0x01
    6254:	06 80       	ldd	r0, Z+6	; 0x06
    6256:	f7 81       	ldd	r31, Z+7	; 0x07
    6258:	e0 2d       	mov	r30, r0
    625a:	ce 01       	movw	r24, r28
    625c:	09 95       	icall
    625e:	0d c0       	rjmp	.+26     	; 0x627a <_ZN17RobotModelSection4loopEb+0x3e>
	else if ((!safteyTripped && lastIsSafteyTripped) || isFirstLoop){
    6260:	8d 81       	ldd	r24, Y+5	; 0x05
    6262:	88 23       	and	r24, r24
    6264:	19 f4       	brne	.+6      	; 0x626c <_ZN17RobotModelSection4loopEb+0x30>
    6266:	8c 81       	ldd	r24, Y+4	; 0x04
    6268:	88 23       	and	r24, r24
    626a:	39 f0       	breq	.+14     	; 0x627a <_ZN17RobotModelSection4loopEb+0x3e>
		enableOutputs();
    626c:	e8 81       	ld	r30, Y
    626e:	f9 81       	ldd	r31, Y+1	; 0x01
    6270:	00 84       	ldd	r0, Z+8	; 0x08
    6272:	f1 85       	ldd	r31, Z+9	; 0x09
    6274:	e0 2d       	mov	r30, r0
    6276:	ce 01       	movw	r24, r28
    6278:	09 95       	icall
	}
	lastIsSafteyTripped = safteyTripped;
    627a:	1d 83       	std	Y+5, r17	; 0x05
	isFirstLoop = false;
    627c:	1c 82       	std	Y+4, r1	; 0x04
}
    627e:	df 91       	pop	r29
    6280:	cf 91       	pop	r28
    6282:	1f 91       	pop	r17
    6284:	08 95       	ret

00006286 <_ZN17RobotModelSection14disableOutputsEv>:
void RobotModelSection::disableOutputs(){}
    6286:	08 95       	ret

00006288 <_ZN17RobotModelSection13enableOutputsEv>:
void RobotModelSection::enableOutputs(){}
    6288:	08 95       	ret

0000628a <_ZN17RobotModelSection4initEv>:

RobotModelSection::RobotModelSection() {
	init();
}

void RobotModelSection::init(){
    628a:	fc 01       	movw	r30, r24
	lastIsSafteyTripped = false;
    628c:	15 82       	std	Z+5, r1	; 0x05
	isFirstLoop = true;
    628e:	81 e0       	ldi	r24, 0x01	; 1
    6290:	84 83       	std	Z+4, r24	; 0x04
	isActive = false;
    6292:	13 82       	std	Z+3, r1	; 0x03
}
    6294:	08 95       	ret

00006296 <_ZN17RobotModelSectionC1Ev>:
 *      Author: EHaskins
 */

#include "RobotModelSection.h"

RobotModelSection::RobotModelSection() {
    6296:	24 e0       	ldi	r18, 0x04	; 4
    6298:	32 e0       	ldi	r19, 0x02	; 2
    629a:	fc 01       	movw	r30, r24
    629c:	31 83       	std	Z+1, r19	; 0x01
    629e:	20 83       	st	Z, r18
	init();
    62a0:	0e 94 45 31 	call	0x628a	; 0x628a <_ZN17RobotModelSection4initEv>
}
    62a4:	08 95       	ret

000062a6 <__ashldi3>:
    62a6:	cf 92       	push	r12
    62a8:	df 92       	push	r13
    62aa:	ef 92       	push	r14
    62ac:	ff 92       	push	r15
    62ae:	0f 93       	push	r16
    62b0:	cf 93       	push	r28
    62b2:	df 93       	push	r29
    62b4:	cd b7       	in	r28, 0x3d	; 61
    62b6:	de b7       	in	r29, 0x3e	; 62
    62b8:	60 97       	sbiw	r28, 0x10	; 16
    62ba:	0f b6       	in	r0, 0x3f	; 63
    62bc:	f8 94       	cli
    62be:	de bf       	out	0x3e, r29	; 62
    62c0:	0f be       	out	0x3f, r0	; 63
    62c2:	cd bf       	out	0x3d, r28	; 61
    62c4:	00 23       	and	r16, r16
    62c6:	09 f4       	brne	.+2      	; 0x62ca <__ashldi3+0x24>
    62c8:	5a c0       	rjmp	.+180    	; 0x637e <__ashldi3+0xd8>
    62ca:	29 87       	std	Y+9, r18	; 0x09
    62cc:	3a 87       	std	Y+10, r19	; 0x0a
    62ce:	4b 87       	std	Y+11, r20	; 0x0b
    62d0:	5c 87       	std	Y+12, r21	; 0x0c
    62d2:	6d 87       	std	Y+13, r22	; 0x0d
    62d4:	7e 87       	std	Y+14, r23	; 0x0e
    62d6:	8f 87       	std	Y+15, r24	; 0x0f
    62d8:	98 8b       	std	Y+16, r25	; 0x10
    62da:	80 e2       	ldi	r24, 0x20	; 32
    62dc:	80 1b       	sub	r24, r16
    62de:	49 85       	ldd	r20, Y+9	; 0x09
    62e0:	5a 85       	ldd	r21, Y+10	; 0x0a
    62e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    62e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    62e6:	18 16       	cp	r1, r24
    62e8:	b4 f0       	brlt	.+44     	; 0x6316 <__ashldi3+0x70>
    62ea:	19 82       	std	Y+1, r1	; 0x01
    62ec:	1a 82       	std	Y+2, r1	; 0x02
    62ee:	1b 82       	std	Y+3, r1	; 0x03
    62f0:	1c 82       	std	Y+4, r1	; 0x04
    62f2:	99 27       	eor	r25, r25
    62f4:	87 fd       	sbrc	r24, 7
    62f6:	90 95       	com	r25
    62f8:	90 95       	com	r25
    62fa:	81 95       	neg	r24
    62fc:	9f 4f       	sbci	r25, 0xFF	; 255
    62fe:	04 c0       	rjmp	.+8      	; 0x6308 <__ashldi3+0x62>
    6300:	44 0f       	add	r20, r20
    6302:	55 1f       	adc	r21, r21
    6304:	66 1f       	adc	r22, r22
    6306:	77 1f       	adc	r23, r23
    6308:	8a 95       	dec	r24
    630a:	d2 f7       	brpl	.-12     	; 0x6300 <__ashldi3+0x5a>
    630c:	4d 83       	std	Y+5, r20	; 0x05
    630e:	5e 83       	std	Y+6, r21	; 0x06
    6310:	6f 83       	std	Y+7, r22	; 0x07
    6312:	78 87       	std	Y+8, r23	; 0x08
    6314:	2c c0       	rjmp	.+88     	; 0x636e <__ashldi3+0xc8>
    6316:	6a 01       	movw	r12, r20
    6318:	7b 01       	movw	r14, r22
    631a:	00 2e       	mov	r0, r16
    631c:	04 c0       	rjmp	.+8      	; 0x6326 <__ashldi3+0x80>
    631e:	cc 0c       	add	r12, r12
    6320:	dd 1c       	adc	r13, r13
    6322:	ee 1c       	adc	r14, r14
    6324:	ff 1c       	adc	r15, r15
    6326:	0a 94       	dec	r0
    6328:	d2 f7       	brpl	.-12     	; 0x631e <__ashldi3+0x78>
    632a:	c9 82       	std	Y+1, r12	; 0x01
    632c:	da 82       	std	Y+2, r13	; 0x02
    632e:	eb 82       	std	Y+3, r14	; 0x03
    6330:	fc 82       	std	Y+4, r15	; 0x04
    6332:	6a 01       	movw	r12, r20
    6334:	7b 01       	movw	r14, r22
    6336:	04 c0       	rjmp	.+8      	; 0x6340 <__ashldi3+0x9a>
    6338:	f6 94       	lsr	r15
    633a:	e7 94       	ror	r14
    633c:	d7 94       	ror	r13
    633e:	c7 94       	ror	r12
    6340:	8a 95       	dec	r24
    6342:	d2 f7       	brpl	.-12     	; 0x6338 <__ashldi3+0x92>
    6344:	d7 01       	movw	r26, r14
    6346:	c6 01       	movw	r24, r12
    6348:	4d 85       	ldd	r20, Y+13	; 0x0d
    634a:	5e 85       	ldd	r21, Y+14	; 0x0e
    634c:	6f 85       	ldd	r22, Y+15	; 0x0f
    634e:	78 89       	ldd	r23, Y+16	; 0x10
    6350:	04 c0       	rjmp	.+8      	; 0x635a <__ashldi3+0xb4>
    6352:	44 0f       	add	r20, r20
    6354:	55 1f       	adc	r21, r21
    6356:	66 1f       	adc	r22, r22
    6358:	77 1f       	adc	r23, r23
    635a:	0a 95       	dec	r16
    635c:	d2 f7       	brpl	.-12     	; 0x6352 <__ashldi3+0xac>
    635e:	84 2b       	or	r24, r20
    6360:	95 2b       	or	r25, r21
    6362:	a6 2b       	or	r26, r22
    6364:	b7 2b       	or	r27, r23
    6366:	8d 83       	std	Y+5, r24	; 0x05
    6368:	9e 83       	std	Y+6, r25	; 0x06
    636a:	af 83       	std	Y+7, r26	; 0x07
    636c:	b8 87       	std	Y+8, r27	; 0x08
    636e:	29 81       	ldd	r18, Y+1	; 0x01
    6370:	3a 81       	ldd	r19, Y+2	; 0x02
    6372:	4b 81       	ldd	r20, Y+3	; 0x03
    6374:	5c 81       	ldd	r21, Y+4	; 0x04
    6376:	6d 81       	ldd	r22, Y+5	; 0x05
    6378:	7e 81       	ldd	r23, Y+6	; 0x06
    637a:	8f 81       	ldd	r24, Y+7	; 0x07
    637c:	98 85       	ldd	r25, Y+8	; 0x08
    637e:	60 96       	adiw	r28, 0x10	; 16
    6380:	0f b6       	in	r0, 0x3f	; 63
    6382:	f8 94       	cli
    6384:	de bf       	out	0x3e, r29	; 62
    6386:	0f be       	out	0x3f, r0	; 63
    6388:	cd bf       	out	0x3d, r28	; 61
    638a:	df 91       	pop	r29
    638c:	cf 91       	pop	r28
    638e:	0f 91       	pop	r16
    6390:	ff 90       	pop	r15
    6392:	ef 90       	pop	r14
    6394:	df 90       	pop	r13
    6396:	cf 90       	pop	r12
    6398:	08 95       	ret

0000639a <__subsf3>:
    639a:	50 58       	subi	r21, 0x80	; 128

0000639c <__addsf3>:
    639c:	bb 27       	eor	r27, r27
    639e:	aa 27       	eor	r26, r26
    63a0:	0e d0       	rcall	.+28     	; 0x63be <__addsf3x>
    63a2:	75 c1       	rjmp	.+746    	; 0x668e <__fp_round>
    63a4:	66 d1       	rcall	.+716    	; 0x6672 <__fp_pscA>
    63a6:	30 f0       	brcs	.+12     	; 0x63b4 <__addsf3+0x18>
    63a8:	6b d1       	rcall	.+726    	; 0x6680 <__fp_pscB>
    63aa:	20 f0       	brcs	.+8      	; 0x63b4 <__addsf3+0x18>
    63ac:	31 f4       	brne	.+12     	; 0x63ba <__addsf3+0x1e>
    63ae:	9f 3f       	cpi	r25, 0xFF	; 255
    63b0:	11 f4       	brne	.+4      	; 0x63b6 <__addsf3+0x1a>
    63b2:	1e f4       	brtc	.+6      	; 0x63ba <__addsf3+0x1e>
    63b4:	5b c1       	rjmp	.+694    	; 0x666c <__fp_nan>
    63b6:	0e f4       	brtc	.+2      	; 0x63ba <__addsf3+0x1e>
    63b8:	e0 95       	com	r30
    63ba:	e7 fb       	bst	r30, 7
    63bc:	51 c1       	rjmp	.+674    	; 0x6660 <__fp_inf>

000063be <__addsf3x>:
    63be:	e9 2f       	mov	r30, r25
    63c0:	77 d1       	rcall	.+750    	; 0x66b0 <__fp_split3>
    63c2:	80 f3       	brcs	.-32     	; 0x63a4 <__addsf3+0x8>
    63c4:	ba 17       	cp	r27, r26
    63c6:	62 07       	cpc	r22, r18
    63c8:	73 07       	cpc	r23, r19
    63ca:	84 07       	cpc	r24, r20
    63cc:	95 07       	cpc	r25, r21
    63ce:	18 f0       	brcs	.+6      	; 0x63d6 <__addsf3x+0x18>
    63d0:	71 f4       	brne	.+28     	; 0x63ee <__addsf3x+0x30>
    63d2:	9e f5       	brtc	.+102    	; 0x643a <__addsf3x+0x7c>
    63d4:	8f c1       	rjmp	.+798    	; 0x66f4 <__fp_zero>
    63d6:	0e f4       	brtc	.+2      	; 0x63da <__addsf3x+0x1c>
    63d8:	e0 95       	com	r30
    63da:	0b 2e       	mov	r0, r27
    63dc:	ba 2f       	mov	r27, r26
    63de:	a0 2d       	mov	r26, r0
    63e0:	0b 01       	movw	r0, r22
    63e2:	b9 01       	movw	r22, r18
    63e4:	90 01       	movw	r18, r0
    63e6:	0c 01       	movw	r0, r24
    63e8:	ca 01       	movw	r24, r20
    63ea:	a0 01       	movw	r20, r0
    63ec:	11 24       	eor	r1, r1
    63ee:	ff 27       	eor	r31, r31
    63f0:	59 1b       	sub	r21, r25
    63f2:	99 f0       	breq	.+38     	; 0x641a <__addsf3x+0x5c>
    63f4:	59 3f       	cpi	r21, 0xF9	; 249
    63f6:	50 f4       	brcc	.+20     	; 0x640c <__addsf3x+0x4e>
    63f8:	50 3e       	cpi	r21, 0xE0	; 224
    63fa:	68 f1       	brcs	.+90     	; 0x6456 <__addsf3x+0x98>
    63fc:	1a 16       	cp	r1, r26
    63fe:	f0 40       	sbci	r31, 0x00	; 0
    6400:	a2 2f       	mov	r26, r18
    6402:	23 2f       	mov	r18, r19
    6404:	34 2f       	mov	r19, r20
    6406:	44 27       	eor	r20, r20
    6408:	58 5f       	subi	r21, 0xF8	; 248
    640a:	f3 cf       	rjmp	.-26     	; 0x63f2 <__addsf3x+0x34>
    640c:	46 95       	lsr	r20
    640e:	37 95       	ror	r19
    6410:	27 95       	ror	r18
    6412:	a7 95       	ror	r26
    6414:	f0 40       	sbci	r31, 0x00	; 0
    6416:	53 95       	inc	r21
    6418:	c9 f7       	brne	.-14     	; 0x640c <__addsf3x+0x4e>
    641a:	7e f4       	brtc	.+30     	; 0x643a <__addsf3x+0x7c>
    641c:	1f 16       	cp	r1, r31
    641e:	ba 0b       	sbc	r27, r26
    6420:	62 0b       	sbc	r22, r18
    6422:	73 0b       	sbc	r23, r19
    6424:	84 0b       	sbc	r24, r20
    6426:	ba f0       	brmi	.+46     	; 0x6456 <__addsf3x+0x98>
    6428:	91 50       	subi	r25, 0x01	; 1
    642a:	a1 f0       	breq	.+40     	; 0x6454 <__addsf3x+0x96>
    642c:	ff 0f       	add	r31, r31
    642e:	bb 1f       	adc	r27, r27
    6430:	66 1f       	adc	r22, r22
    6432:	77 1f       	adc	r23, r23
    6434:	88 1f       	adc	r24, r24
    6436:	c2 f7       	brpl	.-16     	; 0x6428 <__addsf3x+0x6a>
    6438:	0e c0       	rjmp	.+28     	; 0x6456 <__addsf3x+0x98>
    643a:	ba 0f       	add	r27, r26
    643c:	62 1f       	adc	r22, r18
    643e:	73 1f       	adc	r23, r19
    6440:	84 1f       	adc	r24, r20
    6442:	48 f4       	brcc	.+18     	; 0x6456 <__addsf3x+0x98>
    6444:	87 95       	ror	r24
    6446:	77 95       	ror	r23
    6448:	67 95       	ror	r22
    644a:	b7 95       	ror	r27
    644c:	f7 95       	ror	r31
    644e:	9e 3f       	cpi	r25, 0xFE	; 254
    6450:	08 f0       	brcs	.+2      	; 0x6454 <__addsf3x+0x96>
    6452:	b3 cf       	rjmp	.-154    	; 0x63ba <__addsf3+0x1e>
    6454:	93 95       	inc	r25
    6456:	88 0f       	add	r24, r24
    6458:	08 f0       	brcs	.+2      	; 0x645c <__addsf3x+0x9e>
    645a:	99 27       	eor	r25, r25
    645c:	ee 0f       	add	r30, r30
    645e:	97 95       	ror	r25
    6460:	87 95       	ror	r24
    6462:	08 95       	ret

00006464 <__cmpsf2>:
    6464:	d9 d0       	rcall	.+434    	; 0x6618 <__fp_cmp>
    6466:	08 f4       	brcc	.+2      	; 0x646a <__cmpsf2+0x6>
    6468:	81 e0       	ldi	r24, 0x01	; 1
    646a:	08 95       	ret

0000646c <__divsf3>:
    646c:	0c d0       	rcall	.+24     	; 0x6486 <__divsf3x>
    646e:	0f c1       	rjmp	.+542    	; 0x668e <__fp_round>
    6470:	07 d1       	rcall	.+526    	; 0x6680 <__fp_pscB>
    6472:	40 f0       	brcs	.+16     	; 0x6484 <__divsf3+0x18>
    6474:	fe d0       	rcall	.+508    	; 0x6672 <__fp_pscA>
    6476:	30 f0       	brcs	.+12     	; 0x6484 <__divsf3+0x18>
    6478:	21 f4       	brne	.+8      	; 0x6482 <__divsf3+0x16>
    647a:	5f 3f       	cpi	r21, 0xFF	; 255
    647c:	19 f0       	breq	.+6      	; 0x6484 <__divsf3+0x18>
    647e:	f0 c0       	rjmp	.+480    	; 0x6660 <__fp_inf>
    6480:	51 11       	cpse	r21, r1
    6482:	39 c1       	rjmp	.+626    	; 0x66f6 <__fp_szero>
    6484:	f3 c0       	rjmp	.+486    	; 0x666c <__fp_nan>

00006486 <__divsf3x>:
    6486:	14 d1       	rcall	.+552    	; 0x66b0 <__fp_split3>
    6488:	98 f3       	brcs	.-26     	; 0x6470 <__divsf3+0x4>

0000648a <__divsf3_pse>:
    648a:	99 23       	and	r25, r25
    648c:	c9 f3       	breq	.-14     	; 0x6480 <__divsf3+0x14>
    648e:	55 23       	and	r21, r21
    6490:	b1 f3       	breq	.-20     	; 0x647e <__divsf3+0x12>
    6492:	95 1b       	sub	r25, r21
    6494:	55 0b       	sbc	r21, r21
    6496:	bb 27       	eor	r27, r27
    6498:	aa 27       	eor	r26, r26
    649a:	62 17       	cp	r22, r18
    649c:	73 07       	cpc	r23, r19
    649e:	84 07       	cpc	r24, r20
    64a0:	38 f0       	brcs	.+14     	; 0x64b0 <__divsf3_pse+0x26>
    64a2:	9f 5f       	subi	r25, 0xFF	; 255
    64a4:	5f 4f       	sbci	r21, 0xFF	; 255
    64a6:	22 0f       	add	r18, r18
    64a8:	33 1f       	adc	r19, r19
    64aa:	44 1f       	adc	r20, r20
    64ac:	aa 1f       	adc	r26, r26
    64ae:	a9 f3       	breq	.-22     	; 0x649a <__divsf3_pse+0x10>
    64b0:	33 d0       	rcall	.+102    	; 0x6518 <__divsf3_pse+0x8e>
    64b2:	0e 2e       	mov	r0, r30
    64b4:	3a f0       	brmi	.+14     	; 0x64c4 <__divsf3_pse+0x3a>
    64b6:	e0 e8       	ldi	r30, 0x80	; 128
    64b8:	30 d0       	rcall	.+96     	; 0x651a <__divsf3_pse+0x90>
    64ba:	91 50       	subi	r25, 0x01	; 1
    64bc:	50 40       	sbci	r21, 0x00	; 0
    64be:	e6 95       	lsr	r30
    64c0:	00 1c       	adc	r0, r0
    64c2:	ca f7       	brpl	.-14     	; 0x64b6 <__divsf3_pse+0x2c>
    64c4:	29 d0       	rcall	.+82     	; 0x6518 <__divsf3_pse+0x8e>
    64c6:	fe 2f       	mov	r31, r30
    64c8:	27 d0       	rcall	.+78     	; 0x6518 <__divsf3_pse+0x8e>
    64ca:	66 0f       	add	r22, r22
    64cc:	77 1f       	adc	r23, r23
    64ce:	88 1f       	adc	r24, r24
    64d0:	bb 1f       	adc	r27, r27
    64d2:	26 17       	cp	r18, r22
    64d4:	37 07       	cpc	r19, r23
    64d6:	48 07       	cpc	r20, r24
    64d8:	ab 07       	cpc	r26, r27
    64da:	b0 e8       	ldi	r27, 0x80	; 128
    64dc:	09 f0       	breq	.+2      	; 0x64e0 <__divsf3_pse+0x56>
    64de:	bb 0b       	sbc	r27, r27
    64e0:	80 2d       	mov	r24, r0
    64e2:	bf 01       	movw	r22, r30
    64e4:	ff 27       	eor	r31, r31
    64e6:	93 58       	subi	r25, 0x83	; 131
    64e8:	5f 4f       	sbci	r21, 0xFF	; 255
    64ea:	2a f0       	brmi	.+10     	; 0x64f6 <__divsf3_pse+0x6c>
    64ec:	9e 3f       	cpi	r25, 0xFE	; 254
    64ee:	51 05       	cpc	r21, r1
    64f0:	68 f0       	brcs	.+26     	; 0x650c <__divsf3_pse+0x82>
    64f2:	b6 c0       	rjmp	.+364    	; 0x6660 <__fp_inf>
    64f4:	00 c1       	rjmp	.+512    	; 0x66f6 <__fp_szero>
    64f6:	5f 3f       	cpi	r21, 0xFF	; 255
    64f8:	ec f3       	brlt	.-6      	; 0x64f4 <__divsf3_pse+0x6a>
    64fa:	98 3e       	cpi	r25, 0xE8	; 232
    64fc:	dc f3       	brlt	.-10     	; 0x64f4 <__divsf3_pse+0x6a>
    64fe:	86 95       	lsr	r24
    6500:	77 95       	ror	r23
    6502:	67 95       	ror	r22
    6504:	b7 95       	ror	r27
    6506:	f7 95       	ror	r31
    6508:	9f 5f       	subi	r25, 0xFF	; 255
    650a:	c9 f7       	brne	.-14     	; 0x64fe <__divsf3_pse+0x74>
    650c:	88 0f       	add	r24, r24
    650e:	91 1d       	adc	r25, r1
    6510:	96 95       	lsr	r25
    6512:	87 95       	ror	r24
    6514:	97 f9       	bld	r25, 7
    6516:	08 95       	ret
    6518:	e1 e0       	ldi	r30, 0x01	; 1
    651a:	66 0f       	add	r22, r22
    651c:	77 1f       	adc	r23, r23
    651e:	88 1f       	adc	r24, r24
    6520:	bb 1f       	adc	r27, r27
    6522:	62 17       	cp	r22, r18
    6524:	73 07       	cpc	r23, r19
    6526:	84 07       	cpc	r24, r20
    6528:	ba 07       	cpc	r27, r26
    652a:	20 f0       	brcs	.+8      	; 0x6534 <__divsf3_pse+0xaa>
    652c:	62 1b       	sub	r22, r18
    652e:	73 0b       	sbc	r23, r19
    6530:	84 0b       	sbc	r24, r20
    6532:	ba 0b       	sbc	r27, r26
    6534:	ee 1f       	adc	r30, r30
    6536:	88 f7       	brcc	.-30     	; 0x651a <__divsf3_pse+0x90>
    6538:	e0 95       	com	r30
    653a:	08 95       	ret

0000653c <__fixsfsi>:
    653c:	04 d0       	rcall	.+8      	; 0x6546 <__fixunssfsi>
    653e:	68 94       	set
    6540:	b1 11       	cpse	r27, r1
    6542:	d9 c0       	rjmp	.+434    	; 0x66f6 <__fp_szero>
    6544:	08 95       	ret

00006546 <__fixunssfsi>:
    6546:	bc d0       	rcall	.+376    	; 0x66c0 <__fp_splitA>
    6548:	88 f0       	brcs	.+34     	; 0x656c <__fixunssfsi+0x26>
    654a:	9f 57       	subi	r25, 0x7F	; 127
    654c:	90 f0       	brcs	.+36     	; 0x6572 <__fixunssfsi+0x2c>
    654e:	b9 2f       	mov	r27, r25
    6550:	99 27       	eor	r25, r25
    6552:	b7 51       	subi	r27, 0x17	; 23
    6554:	a0 f0       	brcs	.+40     	; 0x657e <__fixunssfsi+0x38>
    6556:	d1 f0       	breq	.+52     	; 0x658c <__fixunssfsi+0x46>
    6558:	66 0f       	add	r22, r22
    655a:	77 1f       	adc	r23, r23
    655c:	88 1f       	adc	r24, r24
    655e:	99 1f       	adc	r25, r25
    6560:	1a f0       	brmi	.+6      	; 0x6568 <__fixunssfsi+0x22>
    6562:	ba 95       	dec	r27
    6564:	c9 f7       	brne	.-14     	; 0x6558 <__fixunssfsi+0x12>
    6566:	12 c0       	rjmp	.+36     	; 0x658c <__fixunssfsi+0x46>
    6568:	b1 30       	cpi	r27, 0x01	; 1
    656a:	81 f0       	breq	.+32     	; 0x658c <__fixunssfsi+0x46>
    656c:	c3 d0       	rcall	.+390    	; 0x66f4 <__fp_zero>
    656e:	b1 e0       	ldi	r27, 0x01	; 1
    6570:	08 95       	ret
    6572:	c0 c0       	rjmp	.+384    	; 0x66f4 <__fp_zero>
    6574:	67 2f       	mov	r22, r23
    6576:	78 2f       	mov	r23, r24
    6578:	88 27       	eor	r24, r24
    657a:	b8 5f       	subi	r27, 0xF8	; 248
    657c:	39 f0       	breq	.+14     	; 0x658c <__fixunssfsi+0x46>
    657e:	b9 3f       	cpi	r27, 0xF9	; 249
    6580:	cc f3       	brlt	.-14     	; 0x6574 <__fixunssfsi+0x2e>
    6582:	86 95       	lsr	r24
    6584:	77 95       	ror	r23
    6586:	67 95       	ror	r22
    6588:	b3 95       	inc	r27
    658a:	d9 f7       	brne	.-10     	; 0x6582 <__fixunssfsi+0x3c>
    658c:	3e f4       	brtc	.+14     	; 0x659c <__fixunssfsi+0x56>
    658e:	90 95       	com	r25
    6590:	80 95       	com	r24
    6592:	70 95       	com	r23
    6594:	61 95       	neg	r22
    6596:	7f 4f       	sbci	r23, 0xFF	; 255
    6598:	8f 4f       	sbci	r24, 0xFF	; 255
    659a:	9f 4f       	sbci	r25, 0xFF	; 255
    659c:	08 95       	ret

0000659e <__floatunsisf>:
    659e:	e8 94       	clt
    65a0:	09 c0       	rjmp	.+18     	; 0x65b4 <__floatsisf+0x12>

000065a2 <__floatsisf>:
    65a2:	97 fb       	bst	r25, 7
    65a4:	3e f4       	brtc	.+14     	; 0x65b4 <__floatsisf+0x12>
    65a6:	90 95       	com	r25
    65a8:	80 95       	com	r24
    65aa:	70 95       	com	r23
    65ac:	61 95       	neg	r22
    65ae:	7f 4f       	sbci	r23, 0xFF	; 255
    65b0:	8f 4f       	sbci	r24, 0xFF	; 255
    65b2:	9f 4f       	sbci	r25, 0xFF	; 255
    65b4:	99 23       	and	r25, r25
    65b6:	a9 f0       	breq	.+42     	; 0x65e2 <__floatsisf+0x40>
    65b8:	f9 2f       	mov	r31, r25
    65ba:	96 e9       	ldi	r25, 0x96	; 150
    65bc:	bb 27       	eor	r27, r27
    65be:	93 95       	inc	r25
    65c0:	f6 95       	lsr	r31
    65c2:	87 95       	ror	r24
    65c4:	77 95       	ror	r23
    65c6:	67 95       	ror	r22
    65c8:	b7 95       	ror	r27
    65ca:	f1 11       	cpse	r31, r1
    65cc:	f8 cf       	rjmp	.-16     	; 0x65be <__floatsisf+0x1c>
    65ce:	fa f4       	brpl	.+62     	; 0x660e <__floatsisf+0x6c>
    65d0:	bb 0f       	add	r27, r27
    65d2:	11 f4       	brne	.+4      	; 0x65d8 <__floatsisf+0x36>
    65d4:	60 ff       	sbrs	r22, 0
    65d6:	1b c0       	rjmp	.+54     	; 0x660e <__floatsisf+0x6c>
    65d8:	6f 5f       	subi	r22, 0xFF	; 255
    65da:	7f 4f       	sbci	r23, 0xFF	; 255
    65dc:	8f 4f       	sbci	r24, 0xFF	; 255
    65de:	9f 4f       	sbci	r25, 0xFF	; 255
    65e0:	16 c0       	rjmp	.+44     	; 0x660e <__floatsisf+0x6c>
    65e2:	88 23       	and	r24, r24
    65e4:	11 f0       	breq	.+4      	; 0x65ea <__floatsisf+0x48>
    65e6:	96 e9       	ldi	r25, 0x96	; 150
    65e8:	11 c0       	rjmp	.+34     	; 0x660c <__floatsisf+0x6a>
    65ea:	77 23       	and	r23, r23
    65ec:	21 f0       	breq	.+8      	; 0x65f6 <__floatsisf+0x54>
    65ee:	9e e8       	ldi	r25, 0x8E	; 142
    65f0:	87 2f       	mov	r24, r23
    65f2:	76 2f       	mov	r23, r22
    65f4:	05 c0       	rjmp	.+10     	; 0x6600 <__floatsisf+0x5e>
    65f6:	66 23       	and	r22, r22
    65f8:	71 f0       	breq	.+28     	; 0x6616 <__floatsisf+0x74>
    65fa:	96 e8       	ldi	r25, 0x86	; 134
    65fc:	86 2f       	mov	r24, r22
    65fe:	70 e0       	ldi	r23, 0x00	; 0
    6600:	60 e0       	ldi	r22, 0x00	; 0
    6602:	2a f0       	brmi	.+10     	; 0x660e <__floatsisf+0x6c>
    6604:	9a 95       	dec	r25
    6606:	66 0f       	add	r22, r22
    6608:	77 1f       	adc	r23, r23
    660a:	88 1f       	adc	r24, r24
    660c:	da f7       	brpl	.-10     	; 0x6604 <__floatsisf+0x62>
    660e:	88 0f       	add	r24, r24
    6610:	96 95       	lsr	r25
    6612:	87 95       	ror	r24
    6614:	97 f9       	bld	r25, 7
    6616:	08 95       	ret

00006618 <__fp_cmp>:
    6618:	99 0f       	add	r25, r25
    661a:	00 08       	sbc	r0, r0
    661c:	55 0f       	add	r21, r21
    661e:	aa 0b       	sbc	r26, r26
    6620:	e0 e8       	ldi	r30, 0x80	; 128
    6622:	fe ef       	ldi	r31, 0xFE	; 254
    6624:	16 16       	cp	r1, r22
    6626:	17 06       	cpc	r1, r23
    6628:	e8 07       	cpc	r30, r24
    662a:	f9 07       	cpc	r31, r25
    662c:	c0 f0       	brcs	.+48     	; 0x665e <__fp_cmp+0x46>
    662e:	12 16       	cp	r1, r18
    6630:	13 06       	cpc	r1, r19
    6632:	e4 07       	cpc	r30, r20
    6634:	f5 07       	cpc	r31, r21
    6636:	98 f0       	brcs	.+38     	; 0x665e <__fp_cmp+0x46>
    6638:	62 1b       	sub	r22, r18
    663a:	73 0b       	sbc	r23, r19
    663c:	84 0b       	sbc	r24, r20
    663e:	95 0b       	sbc	r25, r21
    6640:	39 f4       	brne	.+14     	; 0x6650 <__fp_cmp+0x38>
    6642:	0a 26       	eor	r0, r26
    6644:	61 f0       	breq	.+24     	; 0x665e <__fp_cmp+0x46>
    6646:	23 2b       	or	r18, r19
    6648:	24 2b       	or	r18, r20
    664a:	25 2b       	or	r18, r21
    664c:	21 f4       	brne	.+8      	; 0x6656 <__fp_cmp+0x3e>
    664e:	08 95       	ret
    6650:	0a 26       	eor	r0, r26
    6652:	09 f4       	brne	.+2      	; 0x6656 <__fp_cmp+0x3e>
    6654:	a1 40       	sbci	r26, 0x01	; 1
    6656:	a6 95       	lsr	r26
    6658:	8f ef       	ldi	r24, 0xFF	; 255
    665a:	81 1d       	adc	r24, r1
    665c:	81 1d       	adc	r24, r1
    665e:	08 95       	ret

00006660 <__fp_inf>:
    6660:	97 f9       	bld	r25, 7
    6662:	9f 67       	ori	r25, 0x7F	; 127
    6664:	80 e8       	ldi	r24, 0x80	; 128
    6666:	70 e0       	ldi	r23, 0x00	; 0
    6668:	60 e0       	ldi	r22, 0x00	; 0
    666a:	08 95       	ret

0000666c <__fp_nan>:
    666c:	9f ef       	ldi	r25, 0xFF	; 255
    666e:	80 ec       	ldi	r24, 0xC0	; 192
    6670:	08 95       	ret

00006672 <__fp_pscA>:
    6672:	00 24       	eor	r0, r0
    6674:	0a 94       	dec	r0
    6676:	16 16       	cp	r1, r22
    6678:	17 06       	cpc	r1, r23
    667a:	18 06       	cpc	r1, r24
    667c:	09 06       	cpc	r0, r25
    667e:	08 95       	ret

00006680 <__fp_pscB>:
    6680:	00 24       	eor	r0, r0
    6682:	0a 94       	dec	r0
    6684:	12 16       	cp	r1, r18
    6686:	13 06       	cpc	r1, r19
    6688:	14 06       	cpc	r1, r20
    668a:	05 06       	cpc	r0, r21
    668c:	08 95       	ret

0000668e <__fp_round>:
    668e:	09 2e       	mov	r0, r25
    6690:	03 94       	inc	r0
    6692:	00 0c       	add	r0, r0
    6694:	11 f4       	brne	.+4      	; 0x669a <__fp_round+0xc>
    6696:	88 23       	and	r24, r24
    6698:	52 f0       	brmi	.+20     	; 0x66ae <__fp_round+0x20>
    669a:	bb 0f       	add	r27, r27
    669c:	40 f4       	brcc	.+16     	; 0x66ae <__fp_round+0x20>
    669e:	bf 2b       	or	r27, r31
    66a0:	11 f4       	brne	.+4      	; 0x66a6 <__fp_round+0x18>
    66a2:	60 ff       	sbrs	r22, 0
    66a4:	04 c0       	rjmp	.+8      	; 0x66ae <__fp_round+0x20>
    66a6:	6f 5f       	subi	r22, 0xFF	; 255
    66a8:	7f 4f       	sbci	r23, 0xFF	; 255
    66aa:	8f 4f       	sbci	r24, 0xFF	; 255
    66ac:	9f 4f       	sbci	r25, 0xFF	; 255
    66ae:	08 95       	ret

000066b0 <__fp_split3>:
    66b0:	57 fd       	sbrc	r21, 7
    66b2:	90 58       	subi	r25, 0x80	; 128
    66b4:	44 0f       	add	r20, r20
    66b6:	55 1f       	adc	r21, r21
    66b8:	59 f0       	breq	.+22     	; 0x66d0 <__fp_splitA+0x10>
    66ba:	5f 3f       	cpi	r21, 0xFF	; 255
    66bc:	71 f0       	breq	.+28     	; 0x66da <__fp_splitA+0x1a>
    66be:	47 95       	ror	r20

000066c0 <__fp_splitA>:
    66c0:	88 0f       	add	r24, r24
    66c2:	97 fb       	bst	r25, 7
    66c4:	99 1f       	adc	r25, r25
    66c6:	61 f0       	breq	.+24     	; 0x66e0 <__fp_splitA+0x20>
    66c8:	9f 3f       	cpi	r25, 0xFF	; 255
    66ca:	79 f0       	breq	.+30     	; 0x66ea <__fp_splitA+0x2a>
    66cc:	87 95       	ror	r24
    66ce:	08 95       	ret
    66d0:	12 16       	cp	r1, r18
    66d2:	13 06       	cpc	r1, r19
    66d4:	14 06       	cpc	r1, r20
    66d6:	55 1f       	adc	r21, r21
    66d8:	f2 cf       	rjmp	.-28     	; 0x66be <__fp_split3+0xe>
    66da:	46 95       	lsr	r20
    66dc:	f1 df       	rcall	.-30     	; 0x66c0 <__fp_splitA>
    66de:	08 c0       	rjmp	.+16     	; 0x66f0 <__fp_splitA+0x30>
    66e0:	16 16       	cp	r1, r22
    66e2:	17 06       	cpc	r1, r23
    66e4:	18 06       	cpc	r1, r24
    66e6:	99 1f       	adc	r25, r25
    66e8:	f1 cf       	rjmp	.-30     	; 0x66cc <__fp_splitA+0xc>
    66ea:	86 95       	lsr	r24
    66ec:	71 05       	cpc	r23, r1
    66ee:	61 05       	cpc	r22, r1
    66f0:	08 94       	sec
    66f2:	08 95       	ret

000066f4 <__fp_zero>:
    66f4:	e8 94       	clt

000066f6 <__fp_szero>:
    66f6:	bb 27       	eor	r27, r27
    66f8:	66 27       	eor	r22, r22
    66fa:	77 27       	eor	r23, r23
    66fc:	cb 01       	movw	r24, r22
    66fe:	97 f9       	bld	r25, 7
    6700:	08 95       	ret

00006702 <__mulsf3>:
    6702:	0b d0       	rcall	.+22     	; 0x671a <__mulsf3x>
    6704:	c4 cf       	rjmp	.-120    	; 0x668e <__fp_round>
    6706:	b5 df       	rcall	.-150    	; 0x6672 <__fp_pscA>
    6708:	28 f0       	brcs	.+10     	; 0x6714 <__mulsf3+0x12>
    670a:	ba df       	rcall	.-140    	; 0x6680 <__fp_pscB>
    670c:	18 f0       	brcs	.+6      	; 0x6714 <__mulsf3+0x12>
    670e:	95 23       	and	r25, r21
    6710:	09 f0       	breq	.+2      	; 0x6714 <__mulsf3+0x12>
    6712:	a6 cf       	rjmp	.-180    	; 0x6660 <__fp_inf>
    6714:	ab cf       	rjmp	.-170    	; 0x666c <__fp_nan>
    6716:	11 24       	eor	r1, r1
    6718:	ee cf       	rjmp	.-36     	; 0x66f6 <__fp_szero>

0000671a <__mulsf3x>:
    671a:	ca df       	rcall	.-108    	; 0x66b0 <__fp_split3>
    671c:	a0 f3       	brcs	.-24     	; 0x6706 <__mulsf3+0x4>

0000671e <__mulsf3_pse>:
    671e:	95 9f       	mul	r25, r21
    6720:	d1 f3       	breq	.-12     	; 0x6716 <__mulsf3+0x14>
    6722:	95 0f       	add	r25, r21
    6724:	50 e0       	ldi	r21, 0x00	; 0
    6726:	55 1f       	adc	r21, r21
    6728:	62 9f       	mul	r22, r18
    672a:	f0 01       	movw	r30, r0
    672c:	72 9f       	mul	r23, r18
    672e:	bb 27       	eor	r27, r27
    6730:	f0 0d       	add	r31, r0
    6732:	b1 1d       	adc	r27, r1
    6734:	63 9f       	mul	r22, r19
    6736:	aa 27       	eor	r26, r26
    6738:	f0 0d       	add	r31, r0
    673a:	b1 1d       	adc	r27, r1
    673c:	aa 1f       	adc	r26, r26
    673e:	64 9f       	mul	r22, r20
    6740:	66 27       	eor	r22, r22
    6742:	b0 0d       	add	r27, r0
    6744:	a1 1d       	adc	r26, r1
    6746:	66 1f       	adc	r22, r22
    6748:	82 9f       	mul	r24, r18
    674a:	22 27       	eor	r18, r18
    674c:	b0 0d       	add	r27, r0
    674e:	a1 1d       	adc	r26, r1
    6750:	62 1f       	adc	r22, r18
    6752:	73 9f       	mul	r23, r19
    6754:	b0 0d       	add	r27, r0
    6756:	a1 1d       	adc	r26, r1
    6758:	62 1f       	adc	r22, r18
    675a:	83 9f       	mul	r24, r19
    675c:	a0 0d       	add	r26, r0
    675e:	61 1d       	adc	r22, r1
    6760:	22 1f       	adc	r18, r18
    6762:	74 9f       	mul	r23, r20
    6764:	33 27       	eor	r19, r19
    6766:	a0 0d       	add	r26, r0
    6768:	61 1d       	adc	r22, r1
    676a:	23 1f       	adc	r18, r19
    676c:	84 9f       	mul	r24, r20
    676e:	60 0d       	add	r22, r0
    6770:	21 1d       	adc	r18, r1
    6772:	82 2f       	mov	r24, r18
    6774:	76 2f       	mov	r23, r22
    6776:	6a 2f       	mov	r22, r26
    6778:	11 24       	eor	r1, r1
    677a:	9f 57       	subi	r25, 0x7F	; 127
    677c:	50 40       	sbci	r21, 0x00	; 0
    677e:	8a f0       	brmi	.+34     	; 0x67a2 <__mulsf3_pse+0x84>
    6780:	e1 f0       	breq	.+56     	; 0x67ba <__mulsf3_pse+0x9c>
    6782:	88 23       	and	r24, r24
    6784:	4a f0       	brmi	.+18     	; 0x6798 <__mulsf3_pse+0x7a>
    6786:	ee 0f       	add	r30, r30
    6788:	ff 1f       	adc	r31, r31
    678a:	bb 1f       	adc	r27, r27
    678c:	66 1f       	adc	r22, r22
    678e:	77 1f       	adc	r23, r23
    6790:	88 1f       	adc	r24, r24
    6792:	91 50       	subi	r25, 0x01	; 1
    6794:	50 40       	sbci	r21, 0x00	; 0
    6796:	a9 f7       	brne	.-22     	; 0x6782 <__mulsf3_pse+0x64>
    6798:	9e 3f       	cpi	r25, 0xFE	; 254
    679a:	51 05       	cpc	r21, r1
    679c:	70 f0       	brcs	.+28     	; 0x67ba <__mulsf3_pse+0x9c>
    679e:	60 cf       	rjmp	.-320    	; 0x6660 <__fp_inf>
    67a0:	aa cf       	rjmp	.-172    	; 0x66f6 <__fp_szero>
    67a2:	5f 3f       	cpi	r21, 0xFF	; 255
    67a4:	ec f3       	brlt	.-6      	; 0x67a0 <__mulsf3_pse+0x82>
    67a6:	98 3e       	cpi	r25, 0xE8	; 232
    67a8:	dc f3       	brlt	.-10     	; 0x67a0 <__mulsf3_pse+0x82>
    67aa:	86 95       	lsr	r24
    67ac:	77 95       	ror	r23
    67ae:	67 95       	ror	r22
    67b0:	b7 95       	ror	r27
    67b2:	f7 95       	ror	r31
    67b4:	e7 95       	ror	r30
    67b6:	9f 5f       	subi	r25, 0xFF	; 255
    67b8:	c1 f7       	brne	.-16     	; 0x67aa <__mulsf3_pse+0x8c>
    67ba:	fe 2b       	or	r31, r30
    67bc:	88 0f       	add	r24, r24
    67be:	91 1d       	adc	r25, r1
    67c0:	96 95       	lsr	r25
    67c2:	87 95       	ror	r24
    67c4:	97 f9       	bld	r25, 7
    67c6:	08 95       	ret

000067c8 <__mulsi3>:
    67c8:	62 9f       	mul	r22, r18
    67ca:	d0 01       	movw	r26, r0
    67cc:	73 9f       	mul	r23, r19
    67ce:	f0 01       	movw	r30, r0
    67d0:	82 9f       	mul	r24, r18
    67d2:	e0 0d       	add	r30, r0
    67d4:	f1 1d       	adc	r31, r1
    67d6:	64 9f       	mul	r22, r20
    67d8:	e0 0d       	add	r30, r0
    67da:	f1 1d       	adc	r31, r1
    67dc:	92 9f       	mul	r25, r18
    67de:	f0 0d       	add	r31, r0
    67e0:	83 9f       	mul	r24, r19
    67e2:	f0 0d       	add	r31, r0
    67e4:	74 9f       	mul	r23, r20
    67e6:	f0 0d       	add	r31, r0
    67e8:	65 9f       	mul	r22, r21
    67ea:	f0 0d       	add	r31, r0
    67ec:	99 27       	eor	r25, r25
    67ee:	72 9f       	mul	r23, r18
    67f0:	b0 0d       	add	r27, r0
    67f2:	e1 1d       	adc	r30, r1
    67f4:	f9 1f       	adc	r31, r25
    67f6:	63 9f       	mul	r22, r19
    67f8:	b0 0d       	add	r27, r0
    67fa:	e1 1d       	adc	r30, r1
    67fc:	f9 1f       	adc	r31, r25
    67fe:	bd 01       	movw	r22, r26
    6800:	cf 01       	movw	r24, r30
    6802:	11 24       	eor	r1, r1
    6804:	08 95       	ret

00006806 <__udivmodsi4>:
    6806:	a1 e2       	ldi	r26, 0x21	; 33
    6808:	1a 2e       	mov	r1, r26
    680a:	aa 1b       	sub	r26, r26
    680c:	bb 1b       	sub	r27, r27
    680e:	fd 01       	movw	r30, r26
    6810:	0d c0       	rjmp	.+26     	; 0x682c <__udivmodsi4_ep>

00006812 <__udivmodsi4_loop>:
    6812:	aa 1f       	adc	r26, r26
    6814:	bb 1f       	adc	r27, r27
    6816:	ee 1f       	adc	r30, r30
    6818:	ff 1f       	adc	r31, r31
    681a:	a2 17       	cp	r26, r18
    681c:	b3 07       	cpc	r27, r19
    681e:	e4 07       	cpc	r30, r20
    6820:	f5 07       	cpc	r31, r21
    6822:	20 f0       	brcs	.+8      	; 0x682c <__udivmodsi4_ep>
    6824:	a2 1b       	sub	r26, r18
    6826:	b3 0b       	sbc	r27, r19
    6828:	e4 0b       	sbc	r30, r20
    682a:	f5 0b       	sbc	r31, r21

0000682c <__udivmodsi4_ep>:
    682c:	66 1f       	adc	r22, r22
    682e:	77 1f       	adc	r23, r23
    6830:	88 1f       	adc	r24, r24
    6832:	99 1f       	adc	r25, r25
    6834:	1a 94       	dec	r1
    6836:	69 f7       	brne	.-38     	; 0x6812 <__udivmodsi4_loop>
    6838:	60 95       	com	r22
    683a:	70 95       	com	r23
    683c:	80 95       	com	r24
    683e:	90 95       	com	r25
    6840:	9b 01       	movw	r18, r22
    6842:	ac 01       	movw	r20, r24
    6844:	bd 01       	movw	r22, r26
    6846:	cf 01       	movw	r24, r30
    6848:	08 95       	ret

0000684a <__divmodsi4>:
    684a:	97 fb       	bst	r25, 7
    684c:	09 2e       	mov	r0, r25
    684e:	05 26       	eor	r0, r21
    6850:	0e d0       	rcall	.+28     	; 0x686e <__divmodsi4_neg1>
    6852:	57 fd       	sbrc	r21, 7
    6854:	04 d0       	rcall	.+8      	; 0x685e <__divmodsi4_neg2>
    6856:	d7 df       	rcall	.-82     	; 0x6806 <__udivmodsi4>
    6858:	0a d0       	rcall	.+20     	; 0x686e <__divmodsi4_neg1>
    685a:	00 1c       	adc	r0, r0
    685c:	38 f4       	brcc	.+14     	; 0x686c <__divmodsi4_exit>

0000685e <__divmodsi4_neg2>:
    685e:	50 95       	com	r21
    6860:	40 95       	com	r20
    6862:	30 95       	com	r19
    6864:	21 95       	neg	r18
    6866:	3f 4f       	sbci	r19, 0xFF	; 255
    6868:	4f 4f       	sbci	r20, 0xFF	; 255
    686a:	5f 4f       	sbci	r21, 0xFF	; 255

0000686c <__divmodsi4_exit>:
    686c:	08 95       	ret

0000686e <__divmodsi4_neg1>:
    686e:	f6 f7       	brtc	.-4      	; 0x686c <__divmodsi4_exit>
    6870:	90 95       	com	r25
    6872:	80 95       	com	r24
    6874:	70 95       	com	r23
    6876:	61 95       	neg	r22
    6878:	7f 4f       	sbci	r23, 0xFF	; 255
    687a:	8f 4f       	sbci	r24, 0xFF	; 255
    687c:	9f 4f       	sbci	r25, 0xFF	; 255
    687e:	08 95       	ret

00006880 <__tablejump2__>:
    6880:	ee 0f       	add	r30, r30
    6882:	ff 1f       	adc	r31, r31

00006884 <__tablejump__>:
    6884:	05 90       	lpm	r0, Z+
    6886:	f4 91       	lpm	r31, Z
    6888:	e0 2d       	mov	r30, r0
    688a:	09 94       	ijmp

0000688c <malloc>:
    688c:	cf 93       	push	r28
    688e:	df 93       	push	r29
    6890:	ac 01       	movw	r20, r24
    6892:	82 30       	cpi	r24, 0x02	; 2
    6894:	91 05       	cpc	r25, r1
    6896:	10 f4       	brcc	.+4      	; 0x689c <malloc+0x10>
    6898:	42 e0       	ldi	r20, 0x02	; 2
    689a:	50 e0       	ldi	r21, 0x00	; 0
    689c:	e0 91 ee 04 	lds	r30, 0x04EE
    68a0:	f0 91 ef 04 	lds	r31, 0x04EF
    68a4:	20 e0       	ldi	r18, 0x00	; 0
    68a6:	30 e0       	ldi	r19, 0x00	; 0
    68a8:	a0 e0       	ldi	r26, 0x00	; 0
    68aa:	b0 e0       	ldi	r27, 0x00	; 0
    68ac:	24 c0       	rjmp	.+72     	; 0x68f6 <malloc+0x6a>
    68ae:	80 81       	ld	r24, Z
    68b0:	91 81       	ldd	r25, Z+1	; 0x01
    68b2:	84 17       	cp	r24, r20
    68b4:	95 07       	cpc	r25, r21
    68b6:	d0 f0       	brcs	.+52     	; 0x68ec <malloc+0x60>
    68b8:	84 17       	cp	r24, r20
    68ba:	95 07       	cpc	r25, r21
    68bc:	71 f4       	brne	.+28     	; 0x68da <malloc+0x4e>
    68be:	82 81       	ldd	r24, Z+2	; 0x02
    68c0:	93 81       	ldd	r25, Z+3	; 0x03
    68c2:	10 97       	sbiw	r26, 0x00	; 0
    68c4:	29 f0       	breq	.+10     	; 0x68d0 <malloc+0x44>
    68c6:	13 96       	adiw	r26, 0x03	; 3
    68c8:	9c 93       	st	X, r25
    68ca:	8e 93       	st	-X, r24
    68cc:	12 97       	sbiw	r26, 0x02	; 2
    68ce:	2c c0       	rjmp	.+88     	; 0x6928 <malloc+0x9c>
    68d0:	90 93 ef 04 	sts	0x04EF, r25
    68d4:	80 93 ee 04 	sts	0x04EE, r24
    68d8:	27 c0       	rjmp	.+78     	; 0x6928 <malloc+0x9c>
    68da:	21 15       	cp	r18, r1
    68dc:	31 05       	cpc	r19, r1
    68de:	19 f0       	breq	.+6      	; 0x68e6 <malloc+0x5a>
    68e0:	82 17       	cp	r24, r18
    68e2:	93 07       	cpc	r25, r19
    68e4:	18 f4       	brcc	.+6      	; 0x68ec <malloc+0x60>
    68e6:	9c 01       	movw	r18, r24
    68e8:	bd 01       	movw	r22, r26
    68ea:	ef 01       	movw	r28, r30
    68ec:	92 81       	ldd	r25, Z+2	; 0x02
    68ee:	83 81       	ldd	r24, Z+3	; 0x03
    68f0:	df 01       	movw	r26, r30
    68f2:	e9 2f       	mov	r30, r25
    68f4:	f8 2f       	mov	r31, r24
    68f6:	30 97       	sbiw	r30, 0x00	; 0
    68f8:	d1 f6       	brne	.-76     	; 0x68ae <malloc+0x22>
    68fa:	21 15       	cp	r18, r1
    68fc:	31 05       	cpc	r19, r1
    68fe:	f9 f0       	breq	.+62     	; 0x693e <malloc+0xb2>
    6900:	c9 01       	movw	r24, r18
    6902:	84 1b       	sub	r24, r20
    6904:	95 0b       	sbc	r25, r21
    6906:	84 30       	cpi	r24, 0x04	; 4
    6908:	91 05       	cpc	r25, r1
    690a:	80 f4       	brcc	.+32     	; 0x692c <malloc+0xa0>
    690c:	8a 81       	ldd	r24, Y+2	; 0x02
    690e:	9b 81       	ldd	r25, Y+3	; 0x03
    6910:	61 15       	cp	r22, r1
    6912:	71 05       	cpc	r23, r1
    6914:	21 f0       	breq	.+8      	; 0x691e <malloc+0x92>
    6916:	fb 01       	movw	r30, r22
    6918:	93 83       	std	Z+3, r25	; 0x03
    691a:	82 83       	std	Z+2, r24	; 0x02
    691c:	04 c0       	rjmp	.+8      	; 0x6926 <malloc+0x9a>
    691e:	90 93 ef 04 	sts	0x04EF, r25
    6922:	80 93 ee 04 	sts	0x04EE, r24
    6926:	fe 01       	movw	r30, r28
    6928:	32 96       	adiw	r30, 0x02	; 2
    692a:	42 c0       	rjmp	.+132    	; 0x69b0 <malloc+0x124>
    692c:	fe 01       	movw	r30, r28
    692e:	e8 0f       	add	r30, r24
    6930:	f9 1f       	adc	r31, r25
    6932:	41 93       	st	Z+, r20
    6934:	51 93       	st	Z+, r21
    6936:	02 97       	sbiw	r24, 0x02	; 2
    6938:	99 83       	std	Y+1, r25	; 0x01
    693a:	88 83       	st	Y, r24
    693c:	39 c0       	rjmp	.+114    	; 0x69b0 <malloc+0x124>
    693e:	80 91 ec 04 	lds	r24, 0x04EC
    6942:	90 91 ed 04 	lds	r25, 0x04ED
    6946:	00 97       	sbiw	r24, 0x00	; 0
    6948:	41 f4       	brne	.+16     	; 0x695a <malloc+0xce>
    694a:	80 91 10 02 	lds	r24, 0x0210
    694e:	90 91 11 02 	lds	r25, 0x0211
    6952:	90 93 ed 04 	sts	0x04ED, r25
    6956:	80 93 ec 04 	sts	0x04EC, r24
    695a:	20 91 0e 02 	lds	r18, 0x020E
    695e:	30 91 0f 02 	lds	r19, 0x020F
    6962:	21 15       	cp	r18, r1
    6964:	31 05       	cpc	r19, r1
    6966:	41 f4       	brne	.+16     	; 0x6978 <malloc+0xec>
    6968:	2d b7       	in	r18, 0x3d	; 61
    696a:	3e b7       	in	r19, 0x3e	; 62
    696c:	80 91 12 02 	lds	r24, 0x0212
    6970:	90 91 13 02 	lds	r25, 0x0213
    6974:	28 1b       	sub	r18, r24
    6976:	39 0b       	sbc	r19, r25
    6978:	e0 91 ec 04 	lds	r30, 0x04EC
    697c:	f0 91 ed 04 	lds	r31, 0x04ED
    6980:	e2 17       	cp	r30, r18
    6982:	f3 07       	cpc	r31, r19
    6984:	98 f4       	brcc	.+38     	; 0x69ac <malloc+0x120>
    6986:	2e 1b       	sub	r18, r30
    6988:	3f 0b       	sbc	r19, r31
    698a:	24 17       	cp	r18, r20
    698c:	35 07       	cpc	r19, r21
    698e:	70 f0       	brcs	.+28     	; 0x69ac <malloc+0x120>
    6990:	ca 01       	movw	r24, r20
    6992:	02 96       	adiw	r24, 0x02	; 2
    6994:	28 17       	cp	r18, r24
    6996:	39 07       	cpc	r19, r25
    6998:	48 f0       	brcs	.+18     	; 0x69ac <malloc+0x120>
    699a:	8e 0f       	add	r24, r30
    699c:	9f 1f       	adc	r25, r31
    699e:	90 93 ed 04 	sts	0x04ED, r25
    69a2:	80 93 ec 04 	sts	0x04EC, r24
    69a6:	41 93       	st	Z+, r20
    69a8:	51 93       	st	Z+, r21
    69aa:	02 c0       	rjmp	.+4      	; 0x69b0 <malloc+0x124>
    69ac:	e0 e0       	ldi	r30, 0x00	; 0
    69ae:	f0 e0       	ldi	r31, 0x00	; 0
    69b0:	cf 01       	movw	r24, r30
    69b2:	df 91       	pop	r29
    69b4:	cf 91       	pop	r28
    69b6:	08 95       	ret

000069b8 <free>:
    69b8:	0f 93       	push	r16
    69ba:	1f 93       	push	r17
    69bc:	cf 93       	push	r28
    69be:	df 93       	push	r29
    69c0:	9c 01       	movw	r18, r24
    69c2:	00 97       	sbiw	r24, 0x00	; 0
    69c4:	09 f4       	brne	.+2      	; 0x69c8 <free+0x10>
    69c6:	8c c0       	rjmp	.+280    	; 0x6ae0 <free+0x128>
    69c8:	dc 01       	movw	r26, r24
    69ca:	12 97       	sbiw	r26, 0x02	; 2
    69cc:	13 96       	adiw	r26, 0x03	; 3
    69ce:	1c 92       	st	X, r1
    69d0:	1e 92       	st	-X, r1
    69d2:	12 97       	sbiw	r26, 0x02	; 2
    69d4:	60 91 ee 04 	lds	r22, 0x04EE
    69d8:	70 91 ef 04 	lds	r23, 0x04EF
    69dc:	61 15       	cp	r22, r1
    69de:	71 05       	cpc	r23, r1
    69e0:	89 f4       	brne	.+34     	; 0x6a04 <free+0x4c>
    69e2:	8d 91       	ld	r24, X+
    69e4:	9c 91       	ld	r25, X
    69e6:	11 97       	sbiw	r26, 0x01	; 1
    69e8:	82 0f       	add	r24, r18
    69ea:	93 1f       	adc	r25, r19
    69ec:	20 91 ec 04 	lds	r18, 0x04EC
    69f0:	30 91 ed 04 	lds	r19, 0x04ED
    69f4:	28 17       	cp	r18, r24
    69f6:	39 07       	cpc	r19, r25
    69f8:	69 f5       	brne	.+90     	; 0x6a54 <free+0x9c>
    69fa:	b0 93 ed 04 	sts	0x04ED, r27
    69fe:	a0 93 ec 04 	sts	0x04EC, r26
    6a02:	6e c0       	rjmp	.+220    	; 0x6ae0 <free+0x128>
    6a04:	fb 01       	movw	r30, r22
    6a06:	40 e0       	ldi	r20, 0x00	; 0
    6a08:	50 e0       	ldi	r21, 0x00	; 0
    6a0a:	01 c0       	rjmp	.+2      	; 0x6a0e <free+0x56>
    6a0c:	fc 01       	movw	r30, r24
    6a0e:	ea 17       	cp	r30, r26
    6a10:	fb 07       	cpc	r31, r27
    6a12:	30 f4       	brcc	.+12     	; 0x6a20 <free+0x68>
    6a14:	82 81       	ldd	r24, Z+2	; 0x02
    6a16:	93 81       	ldd	r25, Z+3	; 0x03
    6a18:	af 01       	movw	r20, r30
    6a1a:	00 97       	sbiw	r24, 0x00	; 0
    6a1c:	b9 f7       	brne	.-18     	; 0x6a0c <free+0x54>
    6a1e:	1f c0       	rjmp	.+62     	; 0x6a5e <free+0xa6>
    6a20:	e9 01       	movw	r28, r18
    6a22:	22 97       	sbiw	r28, 0x02	; 2
    6a24:	fb 83       	std	Y+3, r31	; 0x03
    6a26:	ea 83       	std	Y+2, r30	; 0x02
    6a28:	08 81       	ld	r16, Y
    6a2a:	19 81       	ldd	r17, Y+1	; 0x01
    6a2c:	c9 01       	movw	r24, r18
    6a2e:	80 0f       	add	r24, r16
    6a30:	91 1f       	adc	r25, r17
    6a32:	8e 17       	cp	r24, r30
    6a34:	9f 07       	cpc	r25, r31
    6a36:	59 f4       	brne	.+22     	; 0x6a4e <free+0x96>
    6a38:	80 81       	ld	r24, Z
    6a3a:	91 81       	ldd	r25, Z+1	; 0x01
    6a3c:	80 0f       	add	r24, r16
    6a3e:	91 1f       	adc	r25, r17
    6a40:	02 96       	adiw	r24, 0x02	; 2
    6a42:	99 83       	std	Y+1, r25	; 0x01
    6a44:	88 83       	st	Y, r24
    6a46:	82 81       	ldd	r24, Z+2	; 0x02
    6a48:	93 81       	ldd	r25, Z+3	; 0x03
    6a4a:	9b 83       	std	Y+3, r25	; 0x03
    6a4c:	8a 83       	std	Y+2, r24	; 0x02
    6a4e:	41 15       	cp	r20, r1
    6a50:	51 05       	cpc	r21, r1
    6a52:	29 f4       	brne	.+10     	; 0x6a5e <free+0xa6>
    6a54:	b0 93 ef 04 	sts	0x04EF, r27
    6a58:	a0 93 ee 04 	sts	0x04EE, r26
    6a5c:	41 c0       	rjmp	.+130    	; 0x6ae0 <free+0x128>
    6a5e:	fa 01       	movw	r30, r20
    6a60:	b3 83       	std	Z+3, r27	; 0x03
    6a62:	a2 83       	std	Z+2, r26	; 0x02
    6a64:	c1 91       	ld	r28, Z+
    6a66:	d1 91       	ld	r29, Z+
    6a68:	ec 0f       	add	r30, r28
    6a6a:	fd 1f       	adc	r31, r29
    6a6c:	ae 17       	cp	r26, r30
    6a6e:	bf 07       	cpc	r27, r31
    6a70:	81 f4       	brne	.+32     	; 0x6a92 <free+0xda>
    6a72:	f9 01       	movw	r30, r18
    6a74:	92 91       	ld	r25, -Z
    6a76:	82 91       	ld	r24, -Z
    6a78:	8c 0f       	add	r24, r28
    6a7a:	9d 1f       	adc	r25, r29
    6a7c:	02 96       	adiw	r24, 0x02	; 2
    6a7e:	da 01       	movw	r26, r20
    6a80:	11 96       	adiw	r26, 0x01	; 1
    6a82:	9c 93       	st	X, r25
    6a84:	8e 93       	st	-X, r24
    6a86:	82 81       	ldd	r24, Z+2	; 0x02
    6a88:	93 81       	ldd	r25, Z+3	; 0x03
    6a8a:	13 96       	adiw	r26, 0x03	; 3
    6a8c:	9c 93       	st	X, r25
    6a8e:	8e 93       	st	-X, r24
    6a90:	12 97       	sbiw	r26, 0x02	; 2
    6a92:	e0 e0       	ldi	r30, 0x00	; 0
    6a94:	f0 e0       	ldi	r31, 0x00	; 0
    6a96:	02 c0       	rjmp	.+4      	; 0x6a9c <free+0xe4>
    6a98:	fb 01       	movw	r30, r22
    6a9a:	bc 01       	movw	r22, r24
    6a9c:	db 01       	movw	r26, r22
    6a9e:	12 96       	adiw	r26, 0x02	; 2
    6aa0:	8d 91       	ld	r24, X+
    6aa2:	9c 91       	ld	r25, X
    6aa4:	13 97       	sbiw	r26, 0x03	; 3
    6aa6:	00 97       	sbiw	r24, 0x00	; 0
    6aa8:	b9 f7       	brne	.-18     	; 0x6a98 <free+0xe0>
    6aaa:	cb 01       	movw	r24, r22
    6aac:	02 96       	adiw	r24, 0x02	; 2
    6aae:	2d 91       	ld	r18, X+
    6ab0:	3c 91       	ld	r19, X
    6ab2:	11 97       	sbiw	r26, 0x01	; 1
    6ab4:	82 0f       	add	r24, r18
    6ab6:	93 1f       	adc	r25, r19
    6ab8:	20 91 ec 04 	lds	r18, 0x04EC
    6abc:	30 91 ed 04 	lds	r19, 0x04ED
    6ac0:	28 17       	cp	r18, r24
    6ac2:	39 07       	cpc	r19, r25
    6ac4:	69 f4       	brne	.+26     	; 0x6ae0 <free+0x128>
    6ac6:	30 97       	sbiw	r30, 0x00	; 0
    6ac8:	29 f4       	brne	.+10     	; 0x6ad4 <free+0x11c>
    6aca:	10 92 ef 04 	sts	0x04EF, r1
    6ace:	10 92 ee 04 	sts	0x04EE, r1
    6ad2:	02 c0       	rjmp	.+4      	; 0x6ad8 <free+0x120>
    6ad4:	13 82       	std	Z+3, r1	; 0x03
    6ad6:	12 82       	std	Z+2, r1	; 0x02
    6ad8:	70 93 ed 04 	sts	0x04ED, r23
    6adc:	60 93 ec 04 	sts	0x04EC, r22
    6ae0:	df 91       	pop	r29
    6ae2:	cf 91       	pop	r28
    6ae4:	1f 91       	pop	r17
    6ae6:	0f 91       	pop	r16
    6ae8:	08 95       	ret

00006aea <do_random>:
    6aea:	a0 e0       	ldi	r26, 0x00	; 0
    6aec:	b0 e0       	ldi	r27, 0x00	; 0
    6aee:	eb e7       	ldi	r30, 0x7B	; 123
    6af0:	f5 e3       	ldi	r31, 0x35	; 53
    6af2:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__prologue_saves__+0xc>
    6af6:	ec 01       	movw	r28, r24
    6af8:	88 81       	ld	r24, Y
    6afa:	99 81       	ldd	r25, Y+1	; 0x01
    6afc:	aa 81       	ldd	r26, Y+2	; 0x02
    6afe:	bb 81       	ldd	r27, Y+3	; 0x03
    6b00:	00 97       	sbiw	r24, 0x00	; 0
    6b02:	a1 05       	cpc	r26, r1
    6b04:	b1 05       	cpc	r27, r1
    6b06:	21 f4       	brne	.+8      	; 0x6b10 <do_random+0x26>
    6b08:	84 e2       	ldi	r24, 0x24	; 36
    6b0a:	99 ed       	ldi	r25, 0xD9	; 217
    6b0c:	ab e5       	ldi	r26, 0x5B	; 91
    6b0e:	b7 e0       	ldi	r27, 0x07	; 7
    6b10:	bc 01       	movw	r22, r24
    6b12:	cd 01       	movw	r24, r26
    6b14:	2d e1       	ldi	r18, 0x1D	; 29
    6b16:	33 ef       	ldi	r19, 0xF3	; 243
    6b18:	41 e0       	ldi	r20, 0x01	; 1
    6b1a:	50 e0       	ldi	r21, 0x00	; 0
    6b1c:	0e 94 25 34 	call	0x684a	; 0x684a <__divmodsi4>
    6b20:	49 01       	movw	r8, r18
    6b22:	5a 01       	movw	r10, r20
    6b24:	27 ea       	ldi	r18, 0xA7	; 167
    6b26:	31 e4       	ldi	r19, 0x41	; 65
    6b28:	40 e0       	ldi	r20, 0x00	; 0
    6b2a:	50 e0       	ldi	r21, 0x00	; 0
    6b2c:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <__mulsi3>
    6b30:	6b 01       	movw	r12, r22
    6b32:	7c 01       	movw	r14, r24
    6b34:	c5 01       	movw	r24, r10
    6b36:	b4 01       	movw	r22, r8
    6b38:	2c ee       	ldi	r18, 0xEC	; 236
    6b3a:	34 ef       	ldi	r19, 0xF4	; 244
    6b3c:	4f ef       	ldi	r20, 0xFF	; 255
    6b3e:	5f ef       	ldi	r21, 0xFF	; 255
    6b40:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <__mulsi3>
    6b44:	dc 01       	movw	r26, r24
    6b46:	cb 01       	movw	r24, r22
    6b48:	c8 0e       	add	r12, r24
    6b4a:	d9 1e       	adc	r13, r25
    6b4c:	ea 1e       	adc	r14, r26
    6b4e:	fb 1e       	adc	r15, r27
    6b50:	f7 fe       	sbrs	r15, 7
    6b52:	08 c0       	rjmp	.+16     	; 0x6b64 <do_random+0x7a>
    6b54:	8f ef       	ldi	r24, 0xFF	; 255
    6b56:	9f ef       	ldi	r25, 0xFF	; 255
    6b58:	af ef       	ldi	r26, 0xFF	; 255
    6b5a:	bf e7       	ldi	r27, 0x7F	; 127
    6b5c:	c8 0e       	add	r12, r24
    6b5e:	d9 1e       	adc	r13, r25
    6b60:	ea 1e       	adc	r14, r26
    6b62:	fb 1e       	adc	r15, r27
    6b64:	c8 82       	st	Y, r12
    6b66:	d9 82       	std	Y+1, r13	; 0x01
    6b68:	ea 82       	std	Y+2, r14	; 0x02
    6b6a:	fb 82       	std	Y+3, r15	; 0x03
    6b6c:	97 01       	movw	r18, r14
    6b6e:	86 01       	movw	r16, r12
    6b70:	3f 77       	andi	r19, 0x7F	; 127
    6b72:	b8 01       	movw	r22, r16
    6b74:	c9 01       	movw	r24, r18
    6b76:	cd b7       	in	r28, 0x3d	; 61
    6b78:	de b7       	in	r29, 0x3e	; 62
    6b7a:	ec e0       	ldi	r30, 0x0C	; 12
    6b7c:	0c 94 50 38 	jmp	0x70a0	; 0x70a0 <__epilogue_restores__+0xc>

00006b80 <random_r>:
    6b80:	0e 94 75 35 	call	0x6aea	; 0x6aea <do_random>
    6b84:	08 95       	ret

00006b86 <random>:
    6b86:	84 e1       	ldi	r24, 0x14	; 20
    6b88:	92 e0       	ldi	r25, 0x02	; 2
    6b8a:	0e 94 75 35 	call	0x6aea	; 0x6aea <do_random>
    6b8e:	08 95       	ret

00006b90 <srandom>:
    6b90:	dc 01       	movw	r26, r24
    6b92:	cb 01       	movw	r24, r22
    6b94:	80 93 14 02 	sts	0x0214, r24
    6b98:	90 93 15 02 	sts	0x0215, r25
    6b9c:	a0 93 16 02 	sts	0x0216, r26
    6ba0:	b0 93 17 02 	sts	0x0217, r27
    6ba4:	08 95       	ret

00006ba6 <realloc>:
    6ba6:	a2 e0       	ldi	r26, 0x02	; 2
    6ba8:	b0 e0       	ldi	r27, 0x00	; 0
    6baa:	e9 ed       	ldi	r30, 0xD9	; 217
    6bac:	f5 e3       	ldi	r31, 0x35	; 53
    6bae:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__prologue_saves__+0xc>
    6bb2:	8c 01       	movw	r16, r24
    6bb4:	00 97       	sbiw	r24, 0x00	; 0
    6bb6:	29 f4       	brne	.+10     	; 0x6bc2 <realloc+0x1c>
    6bb8:	cb 01       	movw	r24, r22
    6bba:	0e 94 46 34 	call	0x688c	; 0x688c <malloc>
    6bbe:	8c 01       	movw	r16, r24
    6bc0:	b8 c0       	rjmp	.+368    	; 0x6d32 <realloc+0x18c>
    6bc2:	dc 01       	movw	r26, r24
    6bc4:	a6 0f       	add	r26, r22
    6bc6:	b7 1f       	adc	r27, r23
    6bc8:	fc 01       	movw	r30, r24
    6bca:	32 97       	sbiw	r30, 0x02	; 2
    6bcc:	ae 17       	cp	r26, r30
    6bce:	bf 07       	cpc	r27, r31
    6bd0:	08 f4       	brcc	.+2      	; 0x6bd4 <realloc+0x2e>
    6bd2:	ad c0       	rjmp	.+346    	; 0x6d2e <realloc+0x188>
    6bd4:	20 81       	ld	r18, Z
    6bd6:	31 81       	ldd	r19, Z+1	; 0x01
    6bd8:	26 17       	cp	r18, r22
    6bda:	37 07       	cpc	r19, r23
    6bdc:	b0 f0       	brcs	.+44     	; 0x6c0a <realloc+0x64>
    6bde:	25 30       	cpi	r18, 0x05	; 5
    6be0:	31 05       	cpc	r19, r1
    6be2:	08 f4       	brcc	.+2      	; 0x6be6 <realloc+0x40>
    6be4:	a6 c0       	rjmp	.+332    	; 0x6d32 <realloc+0x18c>
    6be6:	c9 01       	movw	r24, r18
    6be8:	04 97       	sbiw	r24, 0x04	; 4
    6bea:	86 17       	cp	r24, r22
    6bec:	97 07       	cpc	r25, r23
    6bee:	08 f4       	brcc	.+2      	; 0x6bf2 <realloc+0x4c>
    6bf0:	a0 c0       	rjmp	.+320    	; 0x6d32 <realloc+0x18c>
    6bf2:	22 50       	subi	r18, 0x02	; 2
    6bf4:	30 40       	sbci	r19, 0x00	; 0
    6bf6:	26 1b       	sub	r18, r22
    6bf8:	37 0b       	sbc	r19, r23
    6bfa:	2d 93       	st	X+, r18
    6bfc:	3d 93       	st	X+, r19
    6bfe:	cd 01       	movw	r24, r26
    6c00:	71 83       	std	Z+1, r23	; 0x01
    6c02:	60 83       	st	Z, r22
    6c04:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <free>
    6c08:	94 c0       	rjmp	.+296    	; 0x6d32 <realloc+0x18c>
    6c0a:	6b 01       	movw	r12, r22
    6c0c:	c2 1a       	sub	r12, r18
    6c0e:	d3 0a       	sbc	r13, r19
    6c10:	5c 01       	movw	r10, r24
    6c12:	a2 0e       	add	r10, r18
    6c14:	b3 1e       	adc	r11, r19
    6c16:	e0 91 ee 04 	lds	r30, 0x04EE
    6c1a:	f0 91 ef 04 	lds	r31, 0x04EF
    6c1e:	40 e0       	ldi	r20, 0x00	; 0
    6c20:	50 e0       	ldi	r21, 0x00	; 0
    6c22:	88 24       	eor	r8, r8
    6c24:	99 24       	eor	r9, r9
    6c26:	49 c0       	rjmp	.+146    	; 0x6cba <realloc+0x114>
    6c28:	ea 15       	cp	r30, r10
    6c2a:	fb 05       	cpc	r31, r11
    6c2c:	e1 f5       	brne	.+120    	; 0x6ca6 <realloc+0x100>
    6c2e:	e0 80       	ld	r14, Z
    6c30:	f1 80       	ldd	r15, Z+1	; 0x01
    6c32:	c7 01       	movw	r24, r14
    6c34:	02 96       	adiw	r24, 0x02	; 2
    6c36:	8c 15       	cp	r24, r12
    6c38:	9d 05       	cpc	r25, r13
    6c3a:	a8 f1       	brcs	.+106    	; 0x6ca6 <realloc+0x100>
    6c3c:	a7 01       	movw	r20, r14
    6c3e:	4c 19       	sub	r20, r12
    6c40:	5d 09       	sbc	r21, r13
    6c42:	ca 01       	movw	r24, r20
    6c44:	02 96       	adiw	r24, 0x02	; 2
    6c46:	0f 2e       	mov	r0, r31
    6c48:	fe ef       	ldi	r31, 0xFE	; 254
    6c4a:	cf 2e       	mov	r12, r31
    6c4c:	ff ef       	ldi	r31, 0xFF	; 255
    6c4e:	df 2e       	mov	r13, r31
    6c50:	f0 2d       	mov	r31, r0
    6c52:	c0 0e       	add	r12, r16
    6c54:	d1 1e       	adc	r13, r17
    6c56:	85 30       	cpi	r24, 0x05	; 5
    6c58:	91 05       	cpc	r25, r1
    6c5a:	78 f0       	brcs	.+30     	; 0x6c7a <realloc+0xd4>
    6c5c:	82 81       	ldd	r24, Z+2	; 0x02
    6c5e:	93 81       	ldd	r25, Z+3	; 0x03
    6c60:	13 96       	adiw	r26, 0x03	; 3
    6c62:	9c 93       	st	X, r25
    6c64:	8e 93       	st	-X, r24
    6c66:	12 97       	sbiw	r26, 0x02	; 2
    6c68:	11 96       	adiw	r26, 0x01	; 1
    6c6a:	5c 93       	st	X, r21
    6c6c:	4e 93       	st	-X, r20
    6c6e:	f6 01       	movw	r30, r12
    6c70:	71 83       	std	Z+1, r23	; 0x01
    6c72:	60 83       	st	Z, r22
    6c74:	9a 2f       	mov	r25, r26
    6c76:	8b 2f       	mov	r24, r27
    6c78:	0a c0       	rjmp	.+20     	; 0x6c8e <realloc+0xe8>
    6c7a:	c9 01       	movw	r24, r18
    6c7c:	02 96       	adiw	r24, 0x02	; 2
    6c7e:	8e 0d       	add	r24, r14
    6c80:	9f 1d       	adc	r25, r15
    6c82:	d6 01       	movw	r26, r12
    6c84:	11 96       	adiw	r26, 0x01	; 1
    6c86:	9c 93       	st	X, r25
    6c88:	8e 93       	st	-X, r24
    6c8a:	92 81       	ldd	r25, Z+2	; 0x02
    6c8c:	83 81       	ldd	r24, Z+3	; 0x03
    6c8e:	81 14       	cp	r8, r1
    6c90:	91 04       	cpc	r9, r1
    6c92:	21 f0       	breq	.+8      	; 0x6c9c <realloc+0xf6>
    6c94:	f4 01       	movw	r30, r8
    6c96:	92 83       	std	Z+2, r25	; 0x02
    6c98:	83 83       	std	Z+3, r24	; 0x03
    6c9a:	4b c0       	rjmp	.+150    	; 0x6d32 <realloc+0x18c>
    6c9c:	90 93 ee 04 	sts	0x04EE, r25
    6ca0:	80 93 ef 04 	sts	0x04EF, r24
    6ca4:	46 c0       	rjmp	.+140    	; 0x6d32 <realloc+0x18c>
    6ca6:	80 81       	ld	r24, Z
    6ca8:	91 81       	ldd	r25, Z+1	; 0x01
    6caa:	48 17       	cp	r20, r24
    6cac:	59 07       	cpc	r21, r25
    6cae:	08 f4       	brcc	.+2      	; 0x6cb2 <realloc+0x10c>
    6cb0:	ac 01       	movw	r20, r24
    6cb2:	82 81       	ldd	r24, Z+2	; 0x02
    6cb4:	93 81       	ldd	r25, Z+3	; 0x03
    6cb6:	4f 01       	movw	r8, r30
    6cb8:	fc 01       	movw	r30, r24
    6cba:	30 97       	sbiw	r30, 0x00	; 0
    6cbc:	09 f0       	breq	.+2      	; 0x6cc0 <realloc+0x11a>
    6cbe:	b4 cf       	rjmp	.-152    	; 0x6c28 <realloc+0x82>
    6cc0:	80 91 ec 04 	lds	r24, 0x04EC
    6cc4:	90 91 ed 04 	lds	r25, 0x04ED
    6cc8:	8a 15       	cp	r24, r10
    6cca:	9b 05       	cpc	r25, r11
    6ccc:	e9 f4       	brne	.+58     	; 0x6d08 <realloc+0x162>
    6cce:	46 17       	cp	r20, r22
    6cd0:	57 07       	cpc	r21, r23
    6cd2:	d0 f4       	brcc	.+52     	; 0x6d08 <realloc+0x162>
    6cd4:	80 91 0e 02 	lds	r24, 0x020E
    6cd8:	90 91 0f 02 	lds	r25, 0x020F
    6cdc:	00 97       	sbiw	r24, 0x00	; 0
    6cde:	41 f4       	brne	.+16     	; 0x6cf0 <realloc+0x14a>
    6ce0:	8d b7       	in	r24, 0x3d	; 61
    6ce2:	9e b7       	in	r25, 0x3e	; 62
    6ce4:	20 91 12 02 	lds	r18, 0x0212
    6ce8:	30 91 13 02 	lds	r19, 0x0213
    6cec:	82 1b       	sub	r24, r18
    6cee:	93 0b       	sbc	r25, r19
    6cf0:	a8 17       	cp	r26, r24
    6cf2:	b9 07       	cpc	r27, r25
    6cf4:	e0 f4       	brcc	.+56     	; 0x6d2e <realloc+0x188>
    6cf6:	b0 93 ed 04 	sts	0x04ED, r27
    6cfa:	a0 93 ec 04 	sts	0x04EC, r26
    6cfe:	f8 01       	movw	r30, r16
    6d00:	32 97       	sbiw	r30, 0x02	; 2
    6d02:	71 83       	std	Z+1, r23	; 0x01
    6d04:	60 83       	st	Z, r22
    6d06:	15 c0       	rjmp	.+42     	; 0x6d32 <realloc+0x18c>
    6d08:	cb 01       	movw	r24, r22
    6d0a:	29 83       	std	Y+1, r18	; 0x01
    6d0c:	3a 83       	std	Y+2, r19	; 0x02
    6d0e:	0e 94 46 34 	call	0x688c	; 0x688c <malloc>
    6d12:	7c 01       	movw	r14, r24
    6d14:	29 81       	ldd	r18, Y+1	; 0x01
    6d16:	3a 81       	ldd	r19, Y+2	; 0x02
    6d18:	00 97       	sbiw	r24, 0x00	; 0
    6d1a:	49 f0       	breq	.+18     	; 0x6d2e <realloc+0x188>
    6d1c:	b8 01       	movw	r22, r16
    6d1e:	a9 01       	movw	r20, r18
    6d20:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <memcpy>
    6d24:	c8 01       	movw	r24, r16
    6d26:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <free>
    6d2a:	87 01       	movw	r16, r14
    6d2c:	02 c0       	rjmp	.+4      	; 0x6d32 <realloc+0x18c>
    6d2e:	00 e0       	ldi	r16, 0x00	; 0
    6d30:	10 e0       	ldi	r17, 0x00	; 0
    6d32:	c8 01       	movw	r24, r16
    6d34:	22 96       	adiw	r28, 0x02	; 2
    6d36:	ec e0       	ldi	r30, 0x0C	; 12
    6d38:	0c 94 50 38 	jmp	0x70a0	; 0x70a0 <__epilogue_restores__+0xc>

00006d3c <atol>:
    6d3c:	1f 93       	push	r17
    6d3e:	fc 01       	movw	r30, r24
    6d40:	99 27       	eor	r25, r25
    6d42:	88 27       	eor	r24, r24
    6d44:	bc 01       	movw	r22, r24
    6d46:	e8 94       	clt
    6d48:	11 91       	ld	r17, Z+
    6d4a:	10 32       	cpi	r17, 0x20	; 32
    6d4c:	e9 f3       	breq	.-6      	; 0x6d48 <atol+0xc>
    6d4e:	19 30       	cpi	r17, 0x09	; 9
    6d50:	10 f0       	brcs	.+4      	; 0x6d56 <atol+0x1a>
    6d52:	1e 30       	cpi	r17, 0x0E	; 14
    6d54:	c8 f3       	brcs	.-14     	; 0x6d48 <atol+0xc>
    6d56:	1b 32       	cpi	r17, 0x2B	; 43
    6d58:	51 f0       	breq	.+20     	; 0x6d6e <atol+0x32>
    6d5a:	1d 32       	cpi	r17, 0x2D	; 45
    6d5c:	49 f4       	brne	.+18     	; 0x6d70 <atol+0x34>
    6d5e:	68 94       	set
    6d60:	06 c0       	rjmp	.+12     	; 0x6d6e <atol+0x32>
    6d62:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <__mulsi_const_10>
    6d66:	61 0f       	add	r22, r17
    6d68:	71 1d       	adc	r23, r1
    6d6a:	81 1d       	adc	r24, r1
    6d6c:	91 1d       	adc	r25, r1
    6d6e:	11 91       	ld	r17, Z+
    6d70:	10 53       	subi	r17, 0x30	; 48
    6d72:	1a 30       	cpi	r17, 0x0A	; 10
    6d74:	b0 f3       	brcs	.-20     	; 0x6d62 <atol+0x26>
    6d76:	3e f4       	brtc	.+14     	; 0x6d86 <atol+0x4a>
    6d78:	90 95       	com	r25
    6d7a:	80 95       	com	r24
    6d7c:	70 95       	com	r23
    6d7e:	61 95       	neg	r22
    6d80:	7f 4f       	sbci	r23, 0xFF	; 255
    6d82:	8f 4f       	sbci	r24, 0xFF	; 255
    6d84:	9f 4f       	sbci	r25, 0xFF	; 255
    6d86:	1f 91       	pop	r17
    6d88:	08 95       	ret

00006d8a <isspace>:
    6d8a:	91 11       	cpse	r25, r1
    6d8c:	40 c1       	rjmp	.+640    	; 0x700e <__ctype_isfalse>
    6d8e:	80 32       	cpi	r24, 0x20	; 32
    6d90:	19 f0       	breq	.+6      	; 0x6d98 <isspace+0xe>
    6d92:	89 50       	subi	r24, 0x09	; 9
    6d94:	85 50       	subi	r24, 0x05	; 5
    6d96:	d0 f7       	brcc	.-12     	; 0x6d8c <isspace+0x2>
    6d98:	08 95       	ret

00006d9a <tolower>:
    6d9a:	91 11       	cpse	r25, r1
    6d9c:	08 95       	ret
    6d9e:	81 54       	subi	r24, 0x41	; 65
    6da0:	8a 51       	subi	r24, 0x1A	; 26
    6da2:	08 f4       	brcc	.+2      	; 0x6da6 <tolower+0xc>
    6da4:	80 5e       	subi	r24, 0xE0	; 224
    6da6:	85 5a       	subi	r24, 0xA5	; 165
    6da8:	08 95       	ret

00006daa <toupper>:
    6daa:	91 11       	cpse	r25, r1
    6dac:	08 95       	ret
    6dae:	81 56       	subi	r24, 0x61	; 97
    6db0:	8a 51       	subi	r24, 0x1A	; 26
    6db2:	08 f4       	brcc	.+2      	; 0x6db6 <toupper+0xc>
    6db4:	80 52       	subi	r24, 0x20	; 32
    6db6:	85 58       	subi	r24, 0x85	; 133
    6db8:	08 95       	ret

00006dba <memcmp>:
    6dba:	fb 01       	movw	r30, r22
    6dbc:	dc 01       	movw	r26, r24
    6dbe:	04 c0       	rjmp	.+8      	; 0x6dc8 <memcmp+0xe>
    6dc0:	8d 91       	ld	r24, X+
    6dc2:	01 90       	ld	r0, Z+
    6dc4:	80 19       	sub	r24, r0
    6dc6:	21 f4       	brne	.+8      	; 0x6dd0 <memcmp+0x16>
    6dc8:	41 50       	subi	r20, 0x01	; 1
    6dca:	50 40       	sbci	r21, 0x00	; 0
    6dcc:	c8 f7       	brcc	.-14     	; 0x6dc0 <memcmp+0x6>
    6dce:	88 1b       	sub	r24, r24
    6dd0:	99 0b       	sbc	r25, r25
    6dd2:	08 95       	ret

00006dd4 <memcpy>:
    6dd4:	fb 01       	movw	r30, r22
    6dd6:	dc 01       	movw	r26, r24
    6dd8:	02 c0       	rjmp	.+4      	; 0x6dde <memcpy+0xa>
    6dda:	01 90       	ld	r0, Z+
    6ddc:	0d 92       	st	X+, r0
    6dde:	41 50       	subi	r20, 0x01	; 1
    6de0:	50 40       	sbci	r21, 0x00	; 0
    6de2:	d8 f7       	brcc	.-10     	; 0x6dda <memcpy+0x6>
    6de4:	08 95       	ret

00006de6 <memmove>:
    6de6:	68 17       	cp	r22, r24
    6de8:	79 07       	cpc	r23, r25
    6dea:	68 f4       	brcc	.+26     	; 0x6e06 <memmove+0x20>
    6dec:	fb 01       	movw	r30, r22
    6dee:	dc 01       	movw	r26, r24
    6df0:	e4 0f       	add	r30, r20
    6df2:	f5 1f       	adc	r31, r21
    6df4:	a4 0f       	add	r26, r20
    6df6:	b5 1f       	adc	r27, r21
    6df8:	02 c0       	rjmp	.+4      	; 0x6dfe <memmove+0x18>
    6dfa:	02 90       	ld	r0, -Z
    6dfc:	0e 92       	st	-X, r0
    6dfe:	41 50       	subi	r20, 0x01	; 1
    6e00:	50 40       	sbci	r21, 0x00	; 0
    6e02:	d8 f7       	brcc	.-10     	; 0x6dfa <memmove+0x14>
    6e04:	08 95       	ret
    6e06:	0c 94 ea 36 	jmp	0x6dd4	; 0x6dd4 <memcpy>

00006e0a <strchr>:
    6e0a:	fc 01       	movw	r30, r24
    6e0c:	81 91       	ld	r24, Z+
    6e0e:	86 17       	cp	r24, r22
    6e10:	21 f0       	breq	.+8      	; 0x6e1a <strchr+0x10>
    6e12:	88 23       	and	r24, r24
    6e14:	d9 f7       	brne	.-10     	; 0x6e0c <strchr+0x2>
    6e16:	99 27       	eor	r25, r25
    6e18:	08 95       	ret
    6e1a:	31 97       	sbiw	r30, 0x01	; 1
    6e1c:	cf 01       	movw	r24, r30
    6e1e:	08 95       	ret

00006e20 <strcmp>:
    6e20:	fb 01       	movw	r30, r22
    6e22:	dc 01       	movw	r26, r24
    6e24:	8d 91       	ld	r24, X+
    6e26:	01 90       	ld	r0, Z+
    6e28:	80 19       	sub	r24, r0
    6e2a:	01 10       	cpse	r0, r1
    6e2c:	d9 f3       	breq	.-10     	; 0x6e24 <strcmp+0x4>
    6e2e:	99 0b       	sbc	r25, r25
    6e30:	08 95       	ret

00006e32 <strcpy>:
    6e32:	fb 01       	movw	r30, r22
    6e34:	dc 01       	movw	r26, r24
    6e36:	01 90       	ld	r0, Z+
    6e38:	0d 92       	st	X+, r0
    6e3a:	00 20       	and	r0, r0
    6e3c:	e1 f7       	brne	.-8      	; 0x6e36 <strcpy+0x4>
    6e3e:	08 95       	ret

00006e40 <strncmp>:
    6e40:	fb 01       	movw	r30, r22
    6e42:	dc 01       	movw	r26, r24
    6e44:	41 50       	subi	r20, 0x01	; 1
    6e46:	50 40       	sbci	r21, 0x00	; 0
    6e48:	30 f0       	brcs	.+12     	; 0x6e56 <strncmp+0x16>
    6e4a:	8d 91       	ld	r24, X+
    6e4c:	01 90       	ld	r0, Z+
    6e4e:	80 19       	sub	r24, r0
    6e50:	19 f4       	brne	.+6      	; 0x6e58 <strncmp+0x18>
    6e52:	00 20       	and	r0, r0
    6e54:	b9 f7       	brne	.-18     	; 0x6e44 <strncmp+0x4>
    6e56:	88 1b       	sub	r24, r24
    6e58:	99 0b       	sbc	r25, r25
    6e5a:	08 95       	ret

00006e5c <strncpy>:
    6e5c:	fb 01       	movw	r30, r22
    6e5e:	dc 01       	movw	r26, r24
    6e60:	41 50       	subi	r20, 0x01	; 1
    6e62:	50 40       	sbci	r21, 0x00	; 0
    6e64:	48 f0       	brcs	.+18     	; 0x6e78 <strncpy+0x1c>
    6e66:	01 90       	ld	r0, Z+
    6e68:	0d 92       	st	X+, r0
    6e6a:	00 20       	and	r0, r0
    6e6c:	c9 f7       	brne	.-14     	; 0x6e60 <strncpy+0x4>
    6e6e:	01 c0       	rjmp	.+2      	; 0x6e72 <strncpy+0x16>
    6e70:	1d 92       	st	X+, r1
    6e72:	41 50       	subi	r20, 0x01	; 1
    6e74:	50 40       	sbci	r21, 0x00	; 0
    6e76:	e0 f7       	brcc	.-8      	; 0x6e70 <strncpy+0x14>
    6e78:	08 95       	ret

00006e7a <strrchr>:
    6e7a:	fc 01       	movw	r30, r24
    6e7c:	81 e0       	ldi	r24, 0x01	; 1
    6e7e:	90 e0       	ldi	r25, 0x00	; 0
    6e80:	01 90       	ld	r0, Z+
    6e82:	06 16       	cp	r0, r22
    6e84:	09 f4       	brne	.+2      	; 0x6e88 <strrchr+0xe>
    6e86:	cf 01       	movw	r24, r30
    6e88:	00 20       	and	r0, r0
    6e8a:	d1 f7       	brne	.-12     	; 0x6e80 <strrchr+0x6>
    6e8c:	01 97       	sbiw	r24, 0x01	; 1
    6e8e:	08 95       	ret

00006e90 <strstr>:
    6e90:	fb 01       	movw	r30, r22
    6e92:	51 91       	ld	r21, Z+
    6e94:	55 23       	and	r21, r21
    6e96:	a9 f0       	breq	.+42     	; 0x6ec2 <strstr+0x32>
    6e98:	bf 01       	movw	r22, r30
    6e9a:	dc 01       	movw	r26, r24
    6e9c:	4d 91       	ld	r20, X+
    6e9e:	45 17       	cp	r20, r21
    6ea0:	41 11       	cpse	r20, r1
    6ea2:	e1 f7       	brne	.-8      	; 0x6e9c <strstr+0xc>
    6ea4:	59 f4       	brne	.+22     	; 0x6ebc <strstr+0x2c>
    6ea6:	cd 01       	movw	r24, r26
    6ea8:	01 90       	ld	r0, Z+
    6eaa:	00 20       	and	r0, r0
    6eac:	49 f0       	breq	.+18     	; 0x6ec0 <strstr+0x30>
    6eae:	4d 91       	ld	r20, X+
    6eb0:	40 15       	cp	r20, r0
    6eb2:	41 11       	cpse	r20, r1
    6eb4:	c9 f3       	breq	.-14     	; 0x6ea8 <strstr+0x18>
    6eb6:	fb 01       	movw	r30, r22
    6eb8:	41 11       	cpse	r20, r1
    6eba:	ef cf       	rjmp	.-34     	; 0x6e9a <strstr+0xa>
    6ebc:	81 e0       	ldi	r24, 0x01	; 1
    6ebe:	90 e0       	ldi	r25, 0x00	; 0
    6ec0:	01 97       	sbiw	r24, 0x01	; 1
    6ec2:	08 95       	ret

00006ec4 <itoa>:
    6ec4:	fb 01       	movw	r30, r22
    6ec6:	9f 01       	movw	r18, r30
    6ec8:	e8 94       	clt
    6eca:	42 30       	cpi	r20, 0x02	; 2
    6ecc:	c4 f0       	brlt	.+48     	; 0x6efe <itoa+0x3a>
    6ece:	45 32       	cpi	r20, 0x25	; 37
    6ed0:	b4 f4       	brge	.+44     	; 0x6efe <itoa+0x3a>
    6ed2:	4a 30       	cpi	r20, 0x0A	; 10
    6ed4:	29 f4       	brne	.+10     	; 0x6ee0 <itoa+0x1c>
    6ed6:	97 fb       	bst	r25, 7
    6ed8:	1e f4       	brtc	.+6      	; 0x6ee0 <itoa+0x1c>
    6eda:	90 95       	com	r25
    6edc:	81 95       	neg	r24
    6ede:	9f 4f       	sbci	r25, 0xFF	; 255
    6ee0:	64 2f       	mov	r22, r20
    6ee2:	77 27       	eor	r23, r23
    6ee4:	0e 94 1a 38 	call	0x7034	; 0x7034 <__udivmodhi4>
    6ee8:	80 5d       	subi	r24, 0xD0	; 208
    6eea:	8a 33       	cpi	r24, 0x3A	; 58
    6eec:	0c f0       	brlt	.+2      	; 0x6ef0 <itoa+0x2c>
    6eee:	89 5d       	subi	r24, 0xD9	; 217
    6ef0:	81 93       	st	Z+, r24
    6ef2:	cb 01       	movw	r24, r22
    6ef4:	00 97       	sbiw	r24, 0x00	; 0
    6ef6:	a1 f7       	brne	.-24     	; 0x6ee0 <itoa+0x1c>
    6ef8:	16 f4       	brtc	.+4      	; 0x6efe <itoa+0x3a>
    6efa:	5d e2       	ldi	r21, 0x2D	; 45
    6efc:	51 93       	st	Z+, r21
    6efe:	10 82       	st	Z, r1
    6f00:	c9 01       	movw	r24, r18
    6f02:	0c 94 0a 38 	jmp	0x7014	; 0x7014 <strrev>

00006f06 <ltoa>:
    6f06:	fa 01       	movw	r30, r20
    6f08:	cf 93       	push	r28
    6f0a:	ff 93       	push	r31
    6f0c:	ef 93       	push	r30
    6f0e:	22 30       	cpi	r18, 0x02	; 2
    6f10:	44 f1       	brlt	.+80     	; 0x6f62 <ltoa+0x5c>
    6f12:	25 32       	cpi	r18, 0x25	; 37
    6f14:	34 f5       	brge	.+76     	; 0x6f62 <ltoa+0x5c>
    6f16:	c2 2f       	mov	r28, r18
    6f18:	e8 94       	clt
    6f1a:	ca 30       	cpi	r28, 0x0A	; 10
    6f1c:	49 f4       	brne	.+18     	; 0x6f30 <ltoa+0x2a>
    6f1e:	97 fb       	bst	r25, 7
    6f20:	3e f4       	brtc	.+14     	; 0x6f30 <ltoa+0x2a>
    6f22:	90 95       	com	r25
    6f24:	80 95       	com	r24
    6f26:	70 95       	com	r23
    6f28:	61 95       	neg	r22
    6f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    6f2c:	8f 4f       	sbci	r24, 0xFF	; 255
    6f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    6f30:	2c 2f       	mov	r18, r28
    6f32:	33 27       	eor	r19, r19
    6f34:	44 27       	eor	r20, r20
    6f36:	55 27       	eor	r21, r21
    6f38:	ff 93       	push	r31
    6f3a:	ef 93       	push	r30
    6f3c:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    6f40:	ef 91       	pop	r30
    6f42:	ff 91       	pop	r31
    6f44:	60 5d       	subi	r22, 0xD0	; 208
    6f46:	6a 33       	cpi	r22, 0x3A	; 58
    6f48:	0c f0       	brlt	.+2      	; 0x6f4c <ltoa+0x46>
    6f4a:	69 5d       	subi	r22, 0xD9	; 217
    6f4c:	61 93       	st	Z+, r22
    6f4e:	b9 01       	movw	r22, r18
    6f50:	ca 01       	movw	r24, r20
    6f52:	60 50       	subi	r22, 0x00	; 0
    6f54:	70 40       	sbci	r23, 0x00	; 0
    6f56:	80 40       	sbci	r24, 0x00	; 0
    6f58:	90 40       	sbci	r25, 0x00	; 0
    6f5a:	51 f7       	brne	.-44     	; 0x6f30 <ltoa+0x2a>
    6f5c:	16 f4       	brtc	.+4      	; 0x6f62 <ltoa+0x5c>
    6f5e:	cd e2       	ldi	r28, 0x2D	; 45
    6f60:	c1 93       	st	Z+, r28
    6f62:	10 82       	st	Z, r1
    6f64:	8f 91       	pop	r24
    6f66:	9f 91       	pop	r25
    6f68:	cf 91       	pop	r28
    6f6a:	0c 94 0a 38 	jmp	0x7014	; 0x7014 <strrev>

00006f6e <__mulsi_const_10>:
    6f6e:	59 2f       	mov	r21, r25
    6f70:	48 2f       	mov	r20, r24
    6f72:	37 2f       	mov	r19, r23
    6f74:	26 2f       	mov	r18, r22
    6f76:	66 0f       	add	r22, r22
    6f78:	77 1f       	adc	r23, r23
    6f7a:	88 1f       	adc	r24, r24
    6f7c:	99 1f       	adc	r25, r25
    6f7e:	66 0f       	add	r22, r22
    6f80:	77 1f       	adc	r23, r23
    6f82:	88 1f       	adc	r24, r24
    6f84:	99 1f       	adc	r25, r25
    6f86:	62 0f       	add	r22, r18
    6f88:	73 1f       	adc	r23, r19
    6f8a:	84 1f       	adc	r24, r20
    6f8c:	95 1f       	adc	r25, r21
    6f8e:	66 0f       	add	r22, r22
    6f90:	77 1f       	adc	r23, r23
    6f92:	88 1f       	adc	r24, r24
    6f94:	99 1f       	adc	r25, r25
    6f96:	08 95       	ret

00006f98 <ultoa>:
    6f98:	fa 01       	movw	r30, r20
    6f9a:	cf 93       	push	r28
    6f9c:	ff 93       	push	r31
    6f9e:	ef 93       	push	r30
    6fa0:	22 30       	cpi	r18, 0x02	; 2
    6fa2:	cc f0       	brlt	.+50     	; 0x6fd6 <ultoa+0x3e>
    6fa4:	25 32       	cpi	r18, 0x25	; 37
    6fa6:	bc f4       	brge	.+46     	; 0x6fd6 <ultoa+0x3e>
    6fa8:	c2 2f       	mov	r28, r18
    6faa:	2c 2f       	mov	r18, r28
    6fac:	33 27       	eor	r19, r19
    6fae:	44 27       	eor	r20, r20
    6fb0:	55 27       	eor	r21, r21
    6fb2:	ff 93       	push	r31
    6fb4:	ef 93       	push	r30
    6fb6:	0e 94 03 34 	call	0x6806	; 0x6806 <__udivmodsi4>
    6fba:	ef 91       	pop	r30
    6fbc:	ff 91       	pop	r31
    6fbe:	60 5d       	subi	r22, 0xD0	; 208
    6fc0:	6a 33       	cpi	r22, 0x3A	; 58
    6fc2:	0c f0       	brlt	.+2      	; 0x6fc6 <ultoa+0x2e>
    6fc4:	69 5d       	subi	r22, 0xD9	; 217
    6fc6:	61 93       	st	Z+, r22
    6fc8:	b9 01       	movw	r22, r18
    6fca:	ca 01       	movw	r24, r20
    6fcc:	60 50       	subi	r22, 0x00	; 0
    6fce:	70 40       	sbci	r23, 0x00	; 0
    6fd0:	80 40       	sbci	r24, 0x00	; 0
    6fd2:	90 40       	sbci	r25, 0x00	; 0
    6fd4:	51 f7       	brne	.-44     	; 0x6faa <ultoa+0x12>
    6fd6:	10 82       	st	Z, r1
    6fd8:	8f 91       	pop	r24
    6fda:	9f 91       	pop	r25
    6fdc:	cf 91       	pop	r28
    6fde:	0c 94 0a 38 	jmp	0x7014	; 0x7014 <strrev>

00006fe2 <utoa>:
    6fe2:	fb 01       	movw	r30, r22
    6fe4:	9f 01       	movw	r18, r30
    6fe6:	42 30       	cpi	r20, 0x02	; 2
    6fe8:	74 f0       	brlt	.+28     	; 0x7006 <utoa+0x24>
    6fea:	45 32       	cpi	r20, 0x25	; 37
    6fec:	64 f4       	brge	.+24     	; 0x7006 <utoa+0x24>
    6fee:	64 2f       	mov	r22, r20
    6ff0:	77 27       	eor	r23, r23
    6ff2:	0e 94 1a 38 	call	0x7034	; 0x7034 <__udivmodhi4>
    6ff6:	80 5d       	subi	r24, 0xD0	; 208
    6ff8:	8a 33       	cpi	r24, 0x3A	; 58
    6ffa:	0c f0       	brlt	.+2      	; 0x6ffe <utoa+0x1c>
    6ffc:	89 5d       	subi	r24, 0xD9	; 217
    6ffe:	81 93       	st	Z+, r24
    7000:	cb 01       	movw	r24, r22
    7002:	00 97       	sbiw	r24, 0x00	; 0
    7004:	a1 f7       	brne	.-24     	; 0x6fee <utoa+0xc>
    7006:	10 82       	st	Z, r1
    7008:	c9 01       	movw	r24, r18
    700a:	0c 94 0a 38 	jmp	0x7014	; 0x7014 <strrev>

0000700e <__ctype_isfalse>:
    700e:	99 27       	eor	r25, r25
    7010:	88 27       	eor	r24, r24

00007012 <__ctype_istrue>:
    7012:	08 95       	ret

00007014 <strrev>:
    7014:	dc 01       	movw	r26, r24
    7016:	fc 01       	movw	r30, r24
    7018:	67 2f       	mov	r22, r23
    701a:	71 91       	ld	r23, Z+
    701c:	77 23       	and	r23, r23
    701e:	e1 f7       	brne	.-8      	; 0x7018 <strrev+0x4>
    7020:	32 97       	sbiw	r30, 0x02	; 2
    7022:	04 c0       	rjmp	.+8      	; 0x702c <strrev+0x18>
    7024:	7c 91       	ld	r23, X
    7026:	6d 93       	st	X+, r22
    7028:	70 83       	st	Z, r23
    702a:	62 91       	ld	r22, -Z
    702c:	ae 17       	cp	r26, r30
    702e:	bf 07       	cpc	r27, r31
    7030:	c8 f3       	brcs	.-14     	; 0x7024 <strrev+0x10>
    7032:	08 95       	ret

00007034 <__udivmodhi4>:
    7034:	aa 1b       	sub	r26, r26
    7036:	bb 1b       	sub	r27, r27
    7038:	51 e1       	ldi	r21, 0x11	; 17
    703a:	07 c0       	rjmp	.+14     	; 0x704a <__udivmodhi4_ep>

0000703c <__udivmodhi4_loop>:
    703c:	aa 1f       	adc	r26, r26
    703e:	bb 1f       	adc	r27, r27
    7040:	a6 17       	cp	r26, r22
    7042:	b7 07       	cpc	r27, r23
    7044:	10 f0       	brcs	.+4      	; 0x704a <__udivmodhi4_ep>
    7046:	a6 1b       	sub	r26, r22
    7048:	b7 0b       	sbc	r27, r23

0000704a <__udivmodhi4_ep>:
    704a:	88 1f       	adc	r24, r24
    704c:	99 1f       	adc	r25, r25
    704e:	5a 95       	dec	r21
    7050:	a9 f7       	brne	.-22     	; 0x703c <__udivmodhi4_loop>
    7052:	80 95       	com	r24
    7054:	90 95       	com	r25
    7056:	bc 01       	movw	r22, r24
    7058:	cd 01       	movw	r24, r26
    705a:	08 95       	ret

0000705c <__prologue_saves__>:
    705c:	2f 92       	push	r2
    705e:	3f 92       	push	r3
    7060:	4f 92       	push	r4
    7062:	5f 92       	push	r5
    7064:	6f 92       	push	r6
    7066:	7f 92       	push	r7
    7068:	8f 92       	push	r8
    706a:	9f 92       	push	r9
    706c:	af 92       	push	r10
    706e:	bf 92       	push	r11
    7070:	cf 92       	push	r12
    7072:	df 92       	push	r13
    7074:	ef 92       	push	r14
    7076:	ff 92       	push	r15
    7078:	0f 93       	push	r16
    707a:	1f 93       	push	r17
    707c:	cf 93       	push	r28
    707e:	df 93       	push	r29
    7080:	cd b7       	in	r28, 0x3d	; 61
    7082:	de b7       	in	r29, 0x3e	; 62
    7084:	ca 1b       	sub	r28, r26
    7086:	db 0b       	sbc	r29, r27
    7088:	0f b6       	in	r0, 0x3f	; 63
    708a:	f8 94       	cli
    708c:	de bf       	out	0x3e, r29	; 62
    708e:	0f be       	out	0x3f, r0	; 63
    7090:	cd bf       	out	0x3d, r28	; 61
    7092:	09 94       	ijmp

00007094 <__epilogue_restores__>:
    7094:	2a 88       	ldd	r2, Y+18	; 0x12
    7096:	39 88       	ldd	r3, Y+17	; 0x11
    7098:	48 88       	ldd	r4, Y+16	; 0x10
    709a:	5f 84       	ldd	r5, Y+15	; 0x0f
    709c:	6e 84       	ldd	r6, Y+14	; 0x0e
    709e:	7d 84       	ldd	r7, Y+13	; 0x0d
    70a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    70a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    70a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    70a6:	b9 84       	ldd	r11, Y+9	; 0x09
    70a8:	c8 84       	ldd	r12, Y+8	; 0x08
    70aa:	df 80       	ldd	r13, Y+7	; 0x07
    70ac:	ee 80       	ldd	r14, Y+6	; 0x06
    70ae:	fd 80       	ldd	r15, Y+5	; 0x05
    70b0:	0c 81       	ldd	r16, Y+4	; 0x04
    70b2:	1b 81       	ldd	r17, Y+3	; 0x03
    70b4:	aa 81       	ldd	r26, Y+2	; 0x02
    70b6:	b9 81       	ldd	r27, Y+1	; 0x01
    70b8:	ce 0f       	add	r28, r30
    70ba:	d1 1d       	adc	r29, r1
    70bc:	0f b6       	in	r0, 0x3f	; 63
    70be:	f8 94       	cli
    70c0:	de bf       	out	0x3e, r29	; 62
    70c2:	0f be       	out	0x3f, r0	; 63
    70c4:	cd bf       	out	0x3d, r28	; 61
    70c6:	ed 01       	movw	r28, r26
    70c8:	08 95       	ret

000070ca <_exit>:
    70ca:	f8 94       	cli

000070cc <__stop_program>:
    70cc:	ff cf       	rjmp	.-2      	; 0x70cc <__stop_program>
