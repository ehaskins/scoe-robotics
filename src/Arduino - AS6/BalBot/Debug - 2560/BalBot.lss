
BalBot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c2  00800200  00009f26  00009fba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009f26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000631  008003c2  008003c2  0000a17c  2**0
                  ALLOC
  3 .stab         00004098  00000000  00000000  0000a17c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110a  00000000  00000000  0000e214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000560  00000000  00000000  0000f320  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000178dc  00000000  00000000  0000f880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004825  00000000  00000000  0002715c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000455a  00000000  00000000  0002b981  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003350  00000000  00000000  0002fedc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004c0b  00000000  00000000  0003322c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ef90  00000000  00000000  00037e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  00046dc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 20 01 	jmp	0x240	; 0x240 <__ctors_end>
       4:	0c 94 4e 28 	jmp	0x509c	; 0x509c <__vector_1>
       8:	0c 94 7f 28 	jmp	0x50fe	; 0x50fe <__vector_2>
       c:	0c 94 b0 28 	jmp	0x5160	; 0x5160 <__vector_3>
      10:	0c 94 e1 28 	jmp	0x51c2	; 0x51c2 <__vector_4>
      14:	0c 94 12 29 	jmp	0x5224	; 0x5224 <__vector_5>
      18:	0c 94 43 29 	jmp	0x5286	; 0x5286 <__vector_6>
      1c:	0c 94 74 29 	jmp	0x52e8	; 0x52e8 <__vector_7>
      20:	0c 94 a5 29 	jmp	0x534a	; 0x534a <__vector_8>
      24:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      28:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      2c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      30:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      34:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      38:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      3c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      40:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      44:	0c 94 01 22 	jmp	0x4402	; 0x4402 <__vector_17>
      48:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      4c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      50:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      54:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      58:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      5c:	0c 94 d6 29 	jmp	0x53ac	; 0x53ac <__vector_23>
      60:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      64:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__vector_25>
      68:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__vector_26>
      6c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      70:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      74:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      78:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      7c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      80:	0c 94 d6 22 	jmp	0x45ac	; 0x45ac <__vector_32>
      84:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      88:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      8c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      90:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__vector_36>
      94:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__vector_37>
      98:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      9c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      a0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      a4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      a8:	0c 94 ab 23 	jmp	0x4756	; 0x4756 <__vector_42>
      ac:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      b0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      b4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      b8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      bc:	0c 94 80 24 	jmp	0x4900	; 0x4900 <__vector_47>
      c0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      c4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      c8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      cc:	0c 94 01 1a 	jmp	0x3402	; 0x3402 <__vector_51>
      d0:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <__vector_52>
      d4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      d8:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__vector_54>
      dc:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__vector_55>
      e0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	sts	0x9b, r22
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000111 <digital_pin_to_timer_PGM>:
     111:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     13d:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000157 <digital_pin_to_bit_mask_PGM>:
     157:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     167:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     177:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     187:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     197:	04 08 10 20 40 80                                   ... @.

0000019d <digital_pin_to_port_PGM>:
     19d:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1ad:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1bd:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1cd:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1dd:	0b 0b 0b 0b 0b 0b                                   ......

000001e3 <port_to_input_PGM>:
     1e3:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1f3:	00 01 00 00 03 01 06 01 09 01                       ..........

000001fd <port_to_output_PGM>:
     1fd:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     20d:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000217 <port_to_mode_PGM>:
     217:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     227:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000232 <__ctors_start>:
     232:	1e 0a       	sbc	r1, r30
     234:	ee 0f       	add	r30, r30
     236:	15 12       	cpse	r1, r21
     238:	fa 1c       	adc	r15, r10
     23a:	56 1e       	adc	r5, r22
     23c:	12 3d       	cpi	r17, 0xD2	; 210
     23e:	72 40       	sbci	r23, 0x02	; 2

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	d1 e2       	ldi	r29, 0x21	; 33
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	0c bf       	out	0x3c, r16	; 60

00000250 <__do_copy_data>:
     250:	13 e0       	ldi	r17, 0x03	; 3
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b2 e0       	ldi	r27, 0x02	; 2
     256:	e6 e2       	ldi	r30, 0x26	; 38
     258:	ff e9       	ldi	r31, 0x9F	; 159
     25a:	00 e0       	ldi	r16, 0x00	; 0
     25c:	0b bf       	out	0x3b, r16	; 59
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x14>
     260:	07 90       	elpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	a2 3c       	cpi	r26, 0xC2	; 194
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0x10>

0000026a <__do_clear_bss>:
     26a:	19 e0       	ldi	r17, 0x09	; 9
     26c:	a2 ec       	ldi	r26, 0xC2	; 194
     26e:	b3 e0       	ldi	r27, 0x03	; 3
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a3 3f       	cpi	r26, 0xF3	; 243
     276:	b1 07       	cpc	r27, r17
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>

0000027a <__do_global_ctors>:
     27a:	12 e0       	ldi	r17, 0x02	; 2
     27c:	c0 e4       	ldi	r28, 0x40	; 64
     27e:	d2 e0       	ldi	r29, 0x02	; 2
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	06 c0       	rjmp	.+12     	; 0x290 <__do_global_ctors+0x16>
     284:	22 97       	sbiw	r28, 0x02	; 2
     286:	01 09       	sbc	r16, r1
     288:	fe 01       	movw	r30, r28
     28a:	0b bf       	out	0x3b, r16	; 59
     28c:	0e 94 82 4b 	call	0x9704	; 0x9704 <__tablejump_elpm__>
     290:	c2 33       	cpi	r28, 0x32	; 50
     292:	d1 07       	cpc	r29, r17
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	08 07       	cpc	r16, r24
     298:	a9 f7       	brne	.-22     	; 0x284 <__do_global_ctors+0xa>
     29a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <main>
     29e:	0c 94 91 4f 	jmp	0x9f22	; 0x9f22 <_exit>

000002a2 <__bad_interrupt>:
     2a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a6 <_ZN7Encoder4isr0Ev>:
			"st	-X, r25"		"\n\t"
			"st	-X, r24"		"\n\t"
			"st	-X, r23"		"\n\t"
			"st	-X, r22"		"\n\t"
		"L%=end:"				"\n"
		: : "x" (arg) : "r22", "r23", "r24", "r25", "r30", "r31");
     2a6:	a0 91 53 06 	lds	r26, 0x0653
     2aa:	b0 91 54 06 	lds	r27, 0x0654
     2ae:	ed 91       	ld	r30, X+
     2b0:	fd 91       	ld	r31, X+
     2b2:	80 81       	ld	r24, Z
     2b4:	ed 91       	ld	r30, X+
     2b6:	fd 91       	ld	r31, X+
     2b8:	90 81       	ld	r25, Z
     2ba:	ed 91       	ld	r30, X+
     2bc:	fd 91       	ld	r31, X+
     2be:	6c 91       	ld	r22, X
     2c0:	63 70       	andi	r22, 0x03	; 3
     2c2:	8e 23       	and	r24, r30
     2c4:	09 f0       	breq	.+2      	; 0x2c8 <L91>
     2c6:	64 60       	ori	r22, 0x04	; 4

000002c8 <L91>:
     2c8:	9f 23       	and	r25, r31
     2ca:	09 f0       	breq	.+2      	; 0x2ce <L92>
     2cc:	68 60       	ori	r22, 0x08	; 8

000002ce <L92>:
     2ce:	e3 e7       	ldi	r30, 0x73	; 115
     2d0:	f1 e0       	ldi	r31, 0x01	; 1
     2d2:	e6 0f       	add	r30, r22
     2d4:	f1 1d       	adc	r31, r1
     2d6:	65 95       	asr	r22
     2d8:	65 95       	asr	r22
     2da:	6d 93       	st	X+, r22
     2dc:	6d 91       	ld	r22, X+
     2de:	7d 91       	ld	r23, X+
     2e0:	8d 91       	ld	r24, X+
     2e2:	9d 91       	ld	r25, X+
     2e4:	09 94       	ijmp

000002e6 <L9table>:
     2e6:	23 c0       	rjmp	.+70     	; 0x32e <L9end>
     2e8:	1a c0       	rjmp	.+52     	; 0x31e <L9plus1>
     2ea:	12 c0       	rjmp	.+36     	; 0x310 <L9minus1>
     2ec:	16 c0       	rjmp	.+44     	; 0x31a <L9plus2>
     2ee:	10 c0       	rjmp	.+32     	; 0x310 <L9minus1>
     2f0:	1e c0       	rjmp	.+60     	; 0x32e <L9end>
     2f2:	09 c0       	rjmp	.+18     	; 0x306 <L9minus2>
     2f4:	14 c0       	rjmp	.+40     	; 0x31e <L9plus1>
     2f6:	13 c0       	rjmp	.+38     	; 0x31e <L9plus1>
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <L9minus2>
     2fa:	19 c0       	rjmp	.+50     	; 0x32e <L9end>
     2fc:	09 c0       	rjmp	.+18     	; 0x310 <L9minus1>
     2fe:	0d c0       	rjmp	.+26     	; 0x31a <L9plus2>
     300:	07 c0       	rjmp	.+14     	; 0x310 <L9minus1>
     302:	0d c0       	rjmp	.+26     	; 0x31e <L9plus1>
     304:	14 c0       	rjmp	.+40     	; 0x32e <L9end>

00000306 <L9minus2>:
     306:	62 50       	subi	r22, 0x02	; 2
     308:	70 40       	sbci	r23, 0x00	; 0
     30a:	80 40       	sbci	r24, 0x00	; 0
     30c:	90 40       	sbci	r25, 0x00	; 0
     30e:	0b c0       	rjmp	.+22     	; 0x326 <L9store>

00000310 <L9minus1>:
     310:	61 50       	subi	r22, 0x01	; 1
     312:	70 40       	sbci	r23, 0x00	; 0
     314:	80 40       	sbci	r24, 0x00	; 0
     316:	90 40       	sbci	r25, 0x00	; 0
     318:	06 c0       	rjmp	.+12     	; 0x326 <L9store>

0000031a <L9plus2>:
     31a:	6e 5f       	subi	r22, 0xFE	; 254
     31c:	01 c0       	rjmp	.+2      	; 0x320 <L9z>

0000031e <L9plus1>:
     31e:	6f 5f       	subi	r22, 0xFF	; 255

00000320 <L9z>:
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	8f 4f       	sbci	r24, 0xFF	; 255
     324:	9f 4f       	sbci	r25, 0xFF	; 255

00000326 <L9store>:
     326:	9e 93       	st	-X, r25
     328:	8e 93       	st	-X, r24
     32a:	7e 93       	st	-X, r23
     32c:	6e 93       	st	-X, r22

0000032e <L9end>:
#endif
*/

#if defined(ENCODER_USE_INTERRUPTS) && !defined(ENCODER_OPTIMIZE_INTERRUPTS)
	#ifdef CORE_INT0_PIN
	static void isr0(void) { update(interruptArgs[0]); }
     32e:	08 95       	ret

00000330 <_ZN17TuningDataSection9getStatusEPhPj>:
		safteyLimit = readFloat(data, &offset);
		desiredAngle = readFloat(data, &offset);
		spin = readFloat(data, &offset);
		
	}
	virtual void getStatus(unsigned char data[], unsigned int *offset){
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	da 01       	movw	r26, r20
		byte* currentBytes = reinterpret_cast<byte*>(&currentAngle);
     336:	ec 01       	movw	r28, r24
     338:	62 96       	adiw	r28, 0x12	; 18
		for (int i = 0; i < 4; i++){
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
			data[(*offset)++] = currentBytes[i];
     33e:	8d 91       	ld	r24, X+
     340:	9c 91       	ld	r25, X
     342:	11 97       	sbiw	r26, 0x01	; 1
     344:	49 91       	ld	r20, Y+
     346:	fb 01       	movw	r30, r22
     348:	e8 0f       	add	r30, r24
     34a:	f9 1f       	adc	r31, r25
     34c:	40 83       	st	Z, r20
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 93       	st	X, r25
     354:	8e 93       	st	-X, r24
		spin = readFloat(data, &offset);
		
	}
	virtual void getStatus(unsigned char data[], unsigned int *offset){
		byte* currentBytes = reinterpret_cast<byte*>(&currentAngle);
		for (int i = 0; i < 4; i++){
     356:	2f 5f       	subi	r18, 0xFF	; 255
     358:	3f 4f       	sbci	r19, 0xFF	; 255
     35a:	24 30       	cpi	r18, 0x04	; 4
     35c:	31 05       	cpc	r19, r1
     35e:	79 f7       	brne	.-34     	; 0x33e <_ZN17TuningDataSection9getStatusEPhPj+0xe>
			data[(*offset)++] = currentBytes[i];
		}
	}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <_ZN19AnalogAccelerometer6updateEv>:
		AnalogAccelerometer(int pin, int center, boolean invert){
			this->pin = pin;
			init(center, invert);	
		}
		
		void update(){
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	ec 01       	movw	r28, r24
			acceleration = (analogRead(pin) - center) * (invert ? -1 : 1);
     36c:	89 85       	ldd	r24, Y+9	; 0x09
     36e:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <analogRead>
     372:	2b 81       	ldd	r18, Y+3	; 0x03
     374:	3c 81       	ldd	r19, Y+4	; 0x04
     376:	ac 01       	movw	r20, r24
     378:	42 1b       	sub	r20, r18
     37a:	53 0b       	sbc	r21, r19
     37c:	9a 01       	movw	r18, r20
     37e:	8a 81       	ldd	r24, Y+2	; 0x02
     380:	88 23       	and	r24, r24
     382:	19 f0       	breq	.+6      	; 0x38a <_ZN19AnalogAccelerometer6updateEv+0x24>
     384:	8f ef       	ldi	r24, 0xFF	; 255
     386:	9f ef       	ldi	r25, 0xFF	; 255
     388:	02 c0       	rjmp	.+4      	; 0x38e <_ZN19AnalogAccelerometer6updateEv+0x28>
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	28 9f       	mul	r18, r24
     390:	b0 01       	movw	r22, r0
     392:	29 9f       	mul	r18, r25
     394:	70 0d       	add	r23, r0
     396:	38 9f       	mul	r19, r24
     398:	70 0d       	add	r23, r0
     39a:	11 24       	eor	r1, r1
     39c:	88 27       	eor	r24, r24
     39e:	77 fd       	sbrc	r23, 7
     3a0:	80 95       	com	r24
     3a2:	98 2f       	mov	r25, r24
     3a4:	0e 94 d4 49 	call	0x93a8	; 0x93a8 <__floatsisf>
     3a8:	dc 01       	movw	r26, r24
     3aa:	cb 01       	movw	r24, r22
     3ac:	8d 83       	std	Y+5, r24	; 0x05
     3ae:	9e 83       	std	Y+6, r25	; 0x06
     3b0:	af 83       	std	Y+7, r26	; 0x07
     3b2:	b8 87       	std	Y+8, r27	; 0x08
		}
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	08 95       	ret

000003ba <_ZN17TuningDataSection6updateEPhj>:
	float d;
	float currentAngle;
	float desiredAngle;
	float spin;
	float safteyLimit;
	virtual void update(unsigned char data[], unsigned int offset){
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	0f 92       	push	r0
     3c8:	0f 92       	push	r0
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	7c 01       	movw	r14, r24
     3d0:	8b 01       	movw	r16, r22
     3d2:	5a 83       	std	Y+2, r21	; 0x02
     3d4:	49 83       	std	Y+1, r20	; 0x01
	
		p = readFloat(data, &offset);
     3d6:	cb 01       	movw	r24, r22
     3d8:	be 01       	movw	r22, r28
     3da:	6f 5f       	subi	r22, 0xFF	; 255
     3dc:	7f 4f       	sbci	r23, 0xFF	; 255
     3de:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <_Z9readFloatPhPj>
     3e2:	dc 01       	movw	r26, r24
     3e4:	cb 01       	movw	r24, r22
     3e6:	f7 01       	movw	r30, r14
     3e8:	86 83       	std	Z+6, r24	; 0x06
     3ea:	97 83       	std	Z+7, r25	; 0x07
     3ec:	a0 87       	std	Z+8, r26	; 0x08
     3ee:	b1 87       	std	Z+9, r27	; 0x09
		i = readFloat(data, &offset);
     3f0:	c8 01       	movw	r24, r16
     3f2:	be 01       	movw	r22, r28
     3f4:	6f 5f       	subi	r22, 0xFF	; 255
     3f6:	7f 4f       	sbci	r23, 0xFF	; 255
     3f8:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <_Z9readFloatPhPj>
     3fc:	dc 01       	movw	r26, r24
     3fe:	cb 01       	movw	r24, r22
     400:	f7 01       	movw	r30, r14
     402:	82 87       	std	Z+10, r24	; 0x0a
     404:	93 87       	std	Z+11, r25	; 0x0b
     406:	a4 87       	std	Z+12, r26	; 0x0c
     408:	b5 87       	std	Z+13, r27	; 0x0d
		d = readFloat(data, &offset);
     40a:	c8 01       	movw	r24, r16
     40c:	be 01       	movw	r22, r28
     40e:	6f 5f       	subi	r22, 0xFF	; 255
     410:	7f 4f       	sbci	r23, 0xFF	; 255
     412:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <_Z9readFloatPhPj>
     416:	dc 01       	movw	r26, r24
     418:	cb 01       	movw	r24, r22
     41a:	f7 01       	movw	r30, r14
     41c:	86 87       	std	Z+14, r24	; 0x0e
     41e:	97 87       	std	Z+15, r25	; 0x0f
     420:	a0 8b       	std	Z+16, r26	; 0x10
     422:	b1 8b       	std	Z+17, r27	; 0x11
		safteyLimit = readFloat(data, &offset);
     424:	c8 01       	movw	r24, r16
     426:	be 01       	movw	r22, r28
     428:	6f 5f       	subi	r22, 0xFF	; 255
     42a:	7f 4f       	sbci	r23, 0xFF	; 255
     42c:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <_Z9readFloatPhPj>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	f7 01       	movw	r30, r14
     436:	86 8f       	std	Z+30, r24	; 0x1e
     438:	97 8f       	std	Z+31, r25	; 0x1f
     43a:	a0 a3       	lds	r26, 0x50
     43c:	b1 a3       	lds	r27, 0x51
		desiredAngle = readFloat(data, &offset);
     43e:	c8 01       	movw	r24, r16
     440:	be 01       	movw	r22, r28
     442:	6f 5f       	subi	r22, 0xFF	; 255
     444:	7f 4f       	sbci	r23, 0xFF	; 255
     446:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <_Z9readFloatPhPj>
     44a:	dc 01       	movw	r26, r24
     44c:	cb 01       	movw	r24, r22
     44e:	f7 01       	movw	r30, r14
     450:	86 8b       	std	Z+22, r24	; 0x16
     452:	97 8b       	std	Z+23, r25	; 0x17
     454:	a0 8f       	std	Z+24, r26	; 0x18
     456:	b1 8f       	std	Z+25, r27	; 0x19
		spin = readFloat(data, &offset);
     458:	c8 01       	movw	r24, r16
     45a:	be 01       	movw	r22, r28
     45c:	6f 5f       	subi	r22, 0xFF	; 255
     45e:	7f 4f       	sbci	r23, 0xFF	; 255
     460:	0e 94 a1 47 	call	0x8f42	; 0x8f42 <_Z9readFloatPhPj>
     464:	dc 01       	movw	r26, r24
     466:	cb 01       	movw	r24, r22
     468:	f7 01       	movw	r30, r14
     46a:	82 8f       	std	Z+26, r24	; 0x1a
     46c:	93 8f       	std	Z+27, r25	; 0x1b
     46e:	a4 8f       	std	Z+28, r26	; 0x1c
     470:	b5 8f       	std	Z+29, r27	; 0x1d
		
	}
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	08 95       	ret

00000484 <_ZN7Encoder4isr5Ev>:
			"st	-X, r25"		"\n\t"
			"st	-X, r24"		"\n\t"
			"st	-X, r23"		"\n\t"
			"st	-X, r22"		"\n\t"
		"L%=end:"				"\n"
		: : "x" (arg) : "r22", "r23", "r24", "r25", "r30", "r31");
     484:	a0 91 5d 06 	lds	r26, 0x065D
     488:	b0 91 5e 06 	lds	r27, 0x065E
     48c:	ed 91       	ld	r30, X+
     48e:	fd 91       	ld	r31, X+
     490:	80 81       	ld	r24, Z
     492:	ed 91       	ld	r30, X+
     494:	fd 91       	ld	r31, X+
     496:	90 81       	ld	r25, Z
     498:	ed 91       	ld	r30, X+
     49a:	fd 91       	ld	r31, X+
     49c:	6c 91       	ld	r22, X
     49e:	63 70       	andi	r22, 0x03	; 3
     4a0:	8e 23       	and	r24, r30
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <L1871>
     4a4:	64 60       	ori	r22, 0x04	; 4

000004a6 <L1871>:
     4a6:	9f 23       	and	r25, r31
     4a8:	09 f0       	breq	.+2      	; 0x4ac <L1872>
     4aa:	68 60       	ori	r22, 0x08	; 8

000004ac <L1872>:
     4ac:	e2 e6       	ldi	r30, 0x62	; 98
     4ae:	f2 e0       	ldi	r31, 0x02	; 2
     4b0:	e6 0f       	add	r30, r22
     4b2:	f1 1d       	adc	r31, r1
     4b4:	65 95       	asr	r22
     4b6:	65 95       	asr	r22
     4b8:	6d 93       	st	X+, r22
     4ba:	6d 91       	ld	r22, X+
     4bc:	7d 91       	ld	r23, X+
     4be:	8d 91       	ld	r24, X+
     4c0:	9d 91       	ld	r25, X+
     4c2:	09 94       	ijmp

000004c4 <L187table>:
     4c4:	23 c0       	rjmp	.+70     	; 0x50c <L187end>
     4c6:	1a c0       	rjmp	.+52     	; 0x4fc <L187plus1>
     4c8:	12 c0       	rjmp	.+36     	; 0x4ee <L187minus1>
     4ca:	16 c0       	rjmp	.+44     	; 0x4f8 <L187plus2>
     4cc:	10 c0       	rjmp	.+32     	; 0x4ee <L187minus1>
     4ce:	1e c0       	rjmp	.+60     	; 0x50c <L187end>
     4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <L187minus2>
     4d2:	14 c0       	rjmp	.+40     	; 0x4fc <L187plus1>
     4d4:	13 c0       	rjmp	.+38     	; 0x4fc <L187plus1>
     4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <L187minus2>
     4d8:	19 c0       	rjmp	.+50     	; 0x50c <L187end>
     4da:	09 c0       	rjmp	.+18     	; 0x4ee <L187minus1>
     4dc:	0d c0       	rjmp	.+26     	; 0x4f8 <L187plus2>
     4de:	07 c0       	rjmp	.+14     	; 0x4ee <L187minus1>
     4e0:	0d c0       	rjmp	.+26     	; 0x4fc <L187plus1>
     4e2:	14 c0       	rjmp	.+40     	; 0x50c <L187end>

000004e4 <L187minus2>:
     4e4:	62 50       	subi	r22, 0x02	; 2
     4e6:	70 40       	sbci	r23, 0x00	; 0
     4e8:	80 40       	sbci	r24, 0x00	; 0
     4ea:	90 40       	sbci	r25, 0x00	; 0
     4ec:	0b c0       	rjmp	.+22     	; 0x504 <L187store>

000004ee <L187minus1>:
     4ee:	61 50       	subi	r22, 0x01	; 1
     4f0:	70 40       	sbci	r23, 0x00	; 0
     4f2:	80 40       	sbci	r24, 0x00	; 0
     4f4:	90 40       	sbci	r25, 0x00	; 0
     4f6:	06 c0       	rjmp	.+12     	; 0x504 <L187store>

000004f8 <L187plus2>:
     4f8:	6e 5f       	subi	r22, 0xFE	; 254
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <L187z>

000004fc <L187plus1>:
     4fc:	6f 5f       	subi	r22, 0xFF	; 255

000004fe <L187z>:
     4fe:	7f 4f       	sbci	r23, 0xFF	; 255
     500:	8f 4f       	sbci	r24, 0xFF	; 255
     502:	9f 4f       	sbci	r25, 0xFF	; 255

00000504 <L187store>:
     504:	9e 93       	st	-X, r25
     506:	8e 93       	st	-X, r24
     508:	7e 93       	st	-X, r23
     50a:	6e 93       	st	-X, r22

0000050c <L187end>:
	#endif
	#ifdef CORE_INT4_PIN
	static void isr4(void) { update(interruptArgs[4]); }
	#endif
	#ifdef CORE_INT5_PIN
	static void isr5(void) { update(interruptArgs[5]); }
     50c:	08 95       	ret

0000050e <_ZN7Encoder4isr4Ev>:
			"st	-X, r25"		"\n\t"
			"st	-X, r24"		"\n\t"
			"st	-X, r23"		"\n\t"
			"st	-X, r22"		"\n\t"
		"L%=end:"				"\n"
		: : "x" (arg) : "r22", "r23", "r24", "r25", "r30", "r31");
     50e:	a0 91 5b 06 	lds	r26, 0x065B
     512:	b0 91 5c 06 	lds	r27, 0x065C
     516:	ed 91       	ld	r30, X+
     518:	fd 91       	ld	r31, X+
     51a:	80 81       	ld	r24, Z
     51c:	ed 91       	ld	r30, X+
     51e:	fd 91       	ld	r31, X+
     520:	90 81       	ld	r25, Z
     522:	ed 91       	ld	r30, X+
     524:	fd 91       	ld	r31, X+
     526:	6c 91       	ld	r22, X
     528:	63 70       	andi	r22, 0x03	; 3
     52a:	8e 23       	and	r24, r30
     52c:	09 f0       	breq	.+2      	; 0x530 <L2021>
     52e:	64 60       	ori	r22, 0x04	; 4

00000530 <L2021>:
     530:	9f 23       	and	r25, r31
     532:	09 f0       	breq	.+2      	; 0x536 <L2022>
     534:	68 60       	ori	r22, 0x08	; 8

00000536 <L2022>:
     536:	e7 ea       	ldi	r30, 0xA7	; 167
     538:	f2 e0       	ldi	r31, 0x02	; 2
     53a:	e6 0f       	add	r30, r22
     53c:	f1 1d       	adc	r31, r1
     53e:	65 95       	asr	r22
     540:	65 95       	asr	r22
     542:	6d 93       	st	X+, r22
     544:	6d 91       	ld	r22, X+
     546:	7d 91       	ld	r23, X+
     548:	8d 91       	ld	r24, X+
     54a:	9d 91       	ld	r25, X+
     54c:	09 94       	ijmp

0000054e <L202table>:
     54e:	23 c0       	rjmp	.+70     	; 0x596 <L202end>
     550:	1a c0       	rjmp	.+52     	; 0x586 <L202plus1>
     552:	12 c0       	rjmp	.+36     	; 0x578 <L202minus1>
     554:	16 c0       	rjmp	.+44     	; 0x582 <L202plus2>
     556:	10 c0       	rjmp	.+32     	; 0x578 <L202minus1>
     558:	1e c0       	rjmp	.+60     	; 0x596 <L202end>
     55a:	09 c0       	rjmp	.+18     	; 0x56e <L202minus2>
     55c:	14 c0       	rjmp	.+40     	; 0x586 <L202plus1>
     55e:	13 c0       	rjmp	.+38     	; 0x586 <L202plus1>
     560:	06 c0       	rjmp	.+12     	; 0x56e <L202minus2>
     562:	19 c0       	rjmp	.+50     	; 0x596 <L202end>
     564:	09 c0       	rjmp	.+18     	; 0x578 <L202minus1>
     566:	0d c0       	rjmp	.+26     	; 0x582 <L202plus2>
     568:	07 c0       	rjmp	.+14     	; 0x578 <L202minus1>
     56a:	0d c0       	rjmp	.+26     	; 0x586 <L202plus1>
     56c:	14 c0       	rjmp	.+40     	; 0x596 <L202end>

0000056e <L202minus2>:
     56e:	62 50       	subi	r22, 0x02	; 2
     570:	70 40       	sbci	r23, 0x00	; 0
     572:	80 40       	sbci	r24, 0x00	; 0
     574:	90 40       	sbci	r25, 0x00	; 0
     576:	0b c0       	rjmp	.+22     	; 0x58e <L202store>

00000578 <L202minus1>:
     578:	61 50       	subi	r22, 0x01	; 1
     57a:	70 40       	sbci	r23, 0x00	; 0
     57c:	80 40       	sbci	r24, 0x00	; 0
     57e:	90 40       	sbci	r25, 0x00	; 0
     580:	06 c0       	rjmp	.+12     	; 0x58e <L202store>

00000582 <L202plus2>:
     582:	6e 5f       	subi	r22, 0xFE	; 254
     584:	01 c0       	rjmp	.+2      	; 0x588 <L202z>

00000586 <L202plus1>:
     586:	6f 5f       	subi	r22, 0xFF	; 255

00000588 <L202z>:
     588:	7f 4f       	sbci	r23, 0xFF	; 255
     58a:	8f 4f       	sbci	r24, 0xFF	; 255
     58c:	9f 4f       	sbci	r25, 0xFF	; 255

0000058e <L202store>:
     58e:	9e 93       	st	-X, r25
     590:	8e 93       	st	-X, r24
     592:	7e 93       	st	-X, r23
     594:	6e 93       	st	-X, r22

00000596 <L202end>:
	#endif
	#ifdef CORE_INT3_PIN
	static void isr3(void) { update(interruptArgs[3]); }
	#endif
	#ifdef CORE_INT4_PIN
	static void isr4(void) { update(interruptArgs[4]); }
     596:	08 95       	ret

00000598 <_ZN7Encoder4isr3Ev>:
			"st	-X, r25"		"\n\t"
			"st	-X, r24"		"\n\t"
			"st	-X, r23"		"\n\t"
			"st	-X, r22"		"\n\t"
		"L%=end:"				"\n"
		: : "x" (arg) : "r22", "r23", "r24", "r25", "r30", "r31");
     598:	a0 91 59 06 	lds	r26, 0x0659
     59c:	b0 91 5a 06 	lds	r27, 0x065A
     5a0:	ed 91       	ld	r30, X+
     5a2:	fd 91       	ld	r31, X+
     5a4:	80 81       	ld	r24, Z
     5a6:	ed 91       	ld	r30, X+
     5a8:	fd 91       	ld	r31, X+
     5aa:	90 81       	ld	r25, Z
     5ac:	ed 91       	ld	r30, X+
     5ae:	fd 91       	ld	r31, X+
     5b0:	6c 91       	ld	r22, X
     5b2:	63 70       	andi	r22, 0x03	; 3
     5b4:	8e 23       	and	r24, r30
     5b6:	09 f0       	breq	.+2      	; 0x5ba <L2171>
     5b8:	64 60       	ori	r22, 0x04	; 4

000005ba <L2171>:
     5ba:	9f 23       	and	r25, r31
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <L2172>
     5be:	68 60       	ori	r22, 0x08	; 8

000005c0 <L2172>:
     5c0:	ec ee       	ldi	r30, 0xEC	; 236
     5c2:	f2 e0       	ldi	r31, 0x02	; 2
     5c4:	e6 0f       	add	r30, r22
     5c6:	f1 1d       	adc	r31, r1
     5c8:	65 95       	asr	r22
     5ca:	65 95       	asr	r22
     5cc:	6d 93       	st	X+, r22
     5ce:	6d 91       	ld	r22, X+
     5d0:	7d 91       	ld	r23, X+
     5d2:	8d 91       	ld	r24, X+
     5d4:	9d 91       	ld	r25, X+
     5d6:	09 94       	ijmp

000005d8 <L217table>:
     5d8:	23 c0       	rjmp	.+70     	; 0x620 <L217end>
     5da:	1a c0       	rjmp	.+52     	; 0x610 <L217plus1>
     5dc:	12 c0       	rjmp	.+36     	; 0x602 <L217minus1>
     5de:	16 c0       	rjmp	.+44     	; 0x60c <L217plus2>
     5e0:	10 c0       	rjmp	.+32     	; 0x602 <L217minus1>
     5e2:	1e c0       	rjmp	.+60     	; 0x620 <L217end>
     5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <L217minus2>
     5e6:	14 c0       	rjmp	.+40     	; 0x610 <L217plus1>
     5e8:	13 c0       	rjmp	.+38     	; 0x610 <L217plus1>
     5ea:	06 c0       	rjmp	.+12     	; 0x5f8 <L217minus2>
     5ec:	19 c0       	rjmp	.+50     	; 0x620 <L217end>
     5ee:	09 c0       	rjmp	.+18     	; 0x602 <L217minus1>
     5f0:	0d c0       	rjmp	.+26     	; 0x60c <L217plus2>
     5f2:	07 c0       	rjmp	.+14     	; 0x602 <L217minus1>
     5f4:	0d c0       	rjmp	.+26     	; 0x610 <L217plus1>
     5f6:	14 c0       	rjmp	.+40     	; 0x620 <L217end>

000005f8 <L217minus2>:
     5f8:	62 50       	subi	r22, 0x02	; 2
     5fa:	70 40       	sbci	r23, 0x00	; 0
     5fc:	80 40       	sbci	r24, 0x00	; 0
     5fe:	90 40       	sbci	r25, 0x00	; 0
     600:	0b c0       	rjmp	.+22     	; 0x618 <L217store>

00000602 <L217minus1>:
     602:	61 50       	subi	r22, 0x01	; 1
     604:	70 40       	sbci	r23, 0x00	; 0
     606:	80 40       	sbci	r24, 0x00	; 0
     608:	90 40       	sbci	r25, 0x00	; 0
     60a:	06 c0       	rjmp	.+12     	; 0x618 <L217store>

0000060c <L217plus2>:
     60c:	6e 5f       	subi	r22, 0xFE	; 254
     60e:	01 c0       	rjmp	.+2      	; 0x612 <L217z>

00000610 <L217plus1>:
     610:	6f 5f       	subi	r22, 0xFF	; 255

00000612 <L217z>:
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	8f 4f       	sbci	r24, 0xFF	; 255
     616:	9f 4f       	sbci	r25, 0xFF	; 255

00000618 <L217store>:
     618:	9e 93       	st	-X, r25
     61a:	8e 93       	st	-X, r24
     61c:	7e 93       	st	-X, r23
     61e:	6e 93       	st	-X, r22

00000620 <L217end>:
	#endif
	#ifdef CORE_INT2_PIN
	static void isr2(void) { update(interruptArgs[2]); }
	#endif
	#ifdef CORE_INT3_PIN
	static void isr3(void) { update(interruptArgs[3]); }
     620:	08 95       	ret

00000622 <_ZN7Encoder4isr2Ev>:
			"st	-X, r25"		"\n\t"
			"st	-X, r24"		"\n\t"
			"st	-X, r23"		"\n\t"
			"st	-X, r22"		"\n\t"
		"L%=end:"				"\n"
		: : "x" (arg) : "r22", "r23", "r24", "r25", "r30", "r31");
     622:	a0 91 57 06 	lds	r26, 0x0657
     626:	b0 91 58 06 	lds	r27, 0x0658
     62a:	ed 91       	ld	r30, X+
     62c:	fd 91       	ld	r31, X+
     62e:	80 81       	ld	r24, Z
     630:	ed 91       	ld	r30, X+
     632:	fd 91       	ld	r31, X+
     634:	90 81       	ld	r25, Z
     636:	ed 91       	ld	r30, X+
     638:	fd 91       	ld	r31, X+
     63a:	6c 91       	ld	r22, X
     63c:	63 70       	andi	r22, 0x03	; 3
     63e:	8e 23       	and	r24, r30
     640:	09 f0       	breq	.+2      	; 0x644 <L2321>
     642:	64 60       	ori	r22, 0x04	; 4

00000644 <L2321>:
     644:	9f 23       	and	r25, r31
     646:	09 f0       	breq	.+2      	; 0x64a <L2322>
     648:	68 60       	ori	r22, 0x08	; 8

0000064a <L2322>:
     64a:	e1 e3       	ldi	r30, 0x31	; 49
     64c:	f3 e0       	ldi	r31, 0x03	; 3
     64e:	e6 0f       	add	r30, r22
     650:	f1 1d       	adc	r31, r1
     652:	65 95       	asr	r22
     654:	65 95       	asr	r22
     656:	6d 93       	st	X+, r22
     658:	6d 91       	ld	r22, X+
     65a:	7d 91       	ld	r23, X+
     65c:	8d 91       	ld	r24, X+
     65e:	9d 91       	ld	r25, X+
     660:	09 94       	ijmp

00000662 <L232table>:
     662:	23 c0       	rjmp	.+70     	; 0x6aa <L232end>
     664:	1a c0       	rjmp	.+52     	; 0x69a <L232plus1>
     666:	12 c0       	rjmp	.+36     	; 0x68c <L232minus1>
     668:	16 c0       	rjmp	.+44     	; 0x696 <L232plus2>
     66a:	10 c0       	rjmp	.+32     	; 0x68c <L232minus1>
     66c:	1e c0       	rjmp	.+60     	; 0x6aa <L232end>
     66e:	09 c0       	rjmp	.+18     	; 0x682 <L232minus2>
     670:	14 c0       	rjmp	.+40     	; 0x69a <L232plus1>
     672:	13 c0       	rjmp	.+38     	; 0x69a <L232plus1>
     674:	06 c0       	rjmp	.+12     	; 0x682 <L232minus2>
     676:	19 c0       	rjmp	.+50     	; 0x6aa <L232end>
     678:	09 c0       	rjmp	.+18     	; 0x68c <L232minus1>
     67a:	0d c0       	rjmp	.+26     	; 0x696 <L232plus2>
     67c:	07 c0       	rjmp	.+14     	; 0x68c <L232minus1>
     67e:	0d c0       	rjmp	.+26     	; 0x69a <L232plus1>
     680:	14 c0       	rjmp	.+40     	; 0x6aa <L232end>

00000682 <L232minus2>:
     682:	62 50       	subi	r22, 0x02	; 2
     684:	70 40       	sbci	r23, 0x00	; 0
     686:	80 40       	sbci	r24, 0x00	; 0
     688:	90 40       	sbci	r25, 0x00	; 0
     68a:	0b c0       	rjmp	.+22     	; 0x6a2 <L232store>

0000068c <L232minus1>:
     68c:	61 50       	subi	r22, 0x01	; 1
     68e:	70 40       	sbci	r23, 0x00	; 0
     690:	80 40       	sbci	r24, 0x00	; 0
     692:	90 40       	sbci	r25, 0x00	; 0
     694:	06 c0       	rjmp	.+12     	; 0x6a2 <L232store>

00000696 <L232plus2>:
     696:	6e 5f       	subi	r22, 0xFE	; 254
     698:	01 c0       	rjmp	.+2      	; 0x69c <L232z>

0000069a <L232plus1>:
     69a:	6f 5f       	subi	r22, 0xFF	; 255

0000069c <L232z>:
     69c:	7f 4f       	sbci	r23, 0xFF	; 255
     69e:	8f 4f       	sbci	r24, 0xFF	; 255
     6a0:	9f 4f       	sbci	r25, 0xFF	; 255

000006a2 <L232store>:
     6a2:	9e 93       	st	-X, r25
     6a4:	8e 93       	st	-X, r24
     6a6:	7e 93       	st	-X, r23
     6a8:	6e 93       	st	-X, r22

000006aa <L232end>:
	#endif
	#ifdef CORE_INT1_PIN
	static void isr1(void) { update(interruptArgs[1]); }
	#endif
	#ifdef CORE_INT2_PIN
	static void isr2(void) { update(interruptArgs[2]); }
     6aa:	08 95       	ret

000006ac <_ZN7Encoder4isr1Ev>:
			"st	-X, r25"		"\n\t"
			"st	-X, r24"		"\n\t"
			"st	-X, r23"		"\n\t"
			"st	-X, r22"		"\n\t"
		"L%=end:"				"\n"
		: : "x" (arg) : "r22", "r23", "r24", "r25", "r30", "r31");
     6ac:	a0 91 55 06 	lds	r26, 0x0655
     6b0:	b0 91 56 06 	lds	r27, 0x0656
     6b4:	ed 91       	ld	r30, X+
     6b6:	fd 91       	ld	r31, X+
     6b8:	80 81       	ld	r24, Z
     6ba:	ed 91       	ld	r30, X+
     6bc:	fd 91       	ld	r31, X+
     6be:	90 81       	ld	r25, Z
     6c0:	ed 91       	ld	r30, X+
     6c2:	fd 91       	ld	r31, X+
     6c4:	6c 91       	ld	r22, X
     6c6:	63 70       	andi	r22, 0x03	; 3
     6c8:	8e 23       	and	r24, r30
     6ca:	09 f0       	breq	.+2      	; 0x6ce <L2471>
     6cc:	64 60       	ori	r22, 0x04	; 4

000006ce <L2471>:
     6ce:	9f 23       	and	r25, r31
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <L2472>
     6d2:	68 60       	ori	r22, 0x08	; 8

000006d4 <L2472>:
     6d4:	e6 e7       	ldi	r30, 0x76	; 118
     6d6:	f3 e0       	ldi	r31, 0x03	; 3
     6d8:	e6 0f       	add	r30, r22
     6da:	f1 1d       	adc	r31, r1
     6dc:	65 95       	asr	r22
     6de:	65 95       	asr	r22
     6e0:	6d 93       	st	X+, r22
     6e2:	6d 91       	ld	r22, X+
     6e4:	7d 91       	ld	r23, X+
     6e6:	8d 91       	ld	r24, X+
     6e8:	9d 91       	ld	r25, X+
     6ea:	09 94       	ijmp

000006ec <L247table>:
     6ec:	23 c0       	rjmp	.+70     	; 0x734 <L247end>
     6ee:	1a c0       	rjmp	.+52     	; 0x724 <L247plus1>
     6f0:	12 c0       	rjmp	.+36     	; 0x716 <L247minus1>
     6f2:	16 c0       	rjmp	.+44     	; 0x720 <L247plus2>
     6f4:	10 c0       	rjmp	.+32     	; 0x716 <L247minus1>
     6f6:	1e c0       	rjmp	.+60     	; 0x734 <L247end>
     6f8:	09 c0       	rjmp	.+18     	; 0x70c <L247minus2>
     6fa:	14 c0       	rjmp	.+40     	; 0x724 <L247plus1>
     6fc:	13 c0       	rjmp	.+38     	; 0x724 <L247plus1>
     6fe:	06 c0       	rjmp	.+12     	; 0x70c <L247minus2>
     700:	19 c0       	rjmp	.+50     	; 0x734 <L247end>
     702:	09 c0       	rjmp	.+18     	; 0x716 <L247minus1>
     704:	0d c0       	rjmp	.+26     	; 0x720 <L247plus2>
     706:	07 c0       	rjmp	.+14     	; 0x716 <L247minus1>
     708:	0d c0       	rjmp	.+26     	; 0x724 <L247plus1>
     70a:	14 c0       	rjmp	.+40     	; 0x734 <L247end>

0000070c <L247minus2>:
     70c:	62 50       	subi	r22, 0x02	; 2
     70e:	70 40       	sbci	r23, 0x00	; 0
     710:	80 40       	sbci	r24, 0x00	; 0
     712:	90 40       	sbci	r25, 0x00	; 0
     714:	0b c0       	rjmp	.+22     	; 0x72c <L247store>

00000716 <L247minus1>:
     716:	61 50       	subi	r22, 0x01	; 1
     718:	70 40       	sbci	r23, 0x00	; 0
     71a:	80 40       	sbci	r24, 0x00	; 0
     71c:	90 40       	sbci	r25, 0x00	; 0
     71e:	06 c0       	rjmp	.+12     	; 0x72c <L247store>

00000720 <L247plus2>:
     720:	6e 5f       	subi	r22, 0xFE	; 254
     722:	01 c0       	rjmp	.+2      	; 0x726 <L247z>

00000724 <L247plus1>:
     724:	6f 5f       	subi	r22, 0xFF	; 255

00000726 <L247z>:
     726:	7f 4f       	sbci	r23, 0xFF	; 255
     728:	8f 4f       	sbci	r24, 0xFF	; 255
     72a:	9f 4f       	sbci	r25, 0xFF	; 255

0000072c <L247store>:
     72c:	9e 93       	st	-X, r25
     72e:	8e 93       	st	-X, r24
     730:	7e 93       	st	-X, r23
     732:	6e 93       	st	-X, r22

00000734 <L247end>:
#if defined(ENCODER_USE_INTERRUPTS) && !defined(ENCODER_OPTIMIZE_INTERRUPTS)
	#ifdef CORE_INT0_PIN
	static void isr0(void) { update(interruptArgs[0]); }
	#endif
	#ifdef CORE_INT1_PIN
	static void isr1(void) { update(interruptArgs[1]); }
     734:	08 95       	ret

00000736 <_ZN7EncoderC1Ehh>:
} Encoder_internal_state_t;

class Encoder
{
public:
	Encoder(uint8_t pin1, uint8_t pin2) {
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
     740:	16 2f       	mov	r17, r22
     742:	04 2f       	mov	r16, r20
		#ifdef INPUT_PULLUP
		pinMode(pin1, INPUT_PULLUP);
     744:	86 2f       	mov	r24, r22
     746:	62 e0       	ldi	r22, 0x02	; 2
     748:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
     74c:	80 2f       	mov	r24, r16
     74e:	62 e0       	ldi	r22, 0x02	; 2
     750:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <pinMode>
		pinMode(pin1, INPUT);
		digitalWrite(pin1, HIGH);
		pinMode(pin2, INPUT);
		digitalWrite(pin2, HIGH);
		#endif
		encoder.pin1_register = PIN_TO_BASEREG(pin1);
     754:	21 2f       	mov	r18, r17
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	f9 01       	movw	r30, r18
     75a:	e3 56       	subi	r30, 0x63	; 99
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	e4 91       	lpm	r30, Z
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	ee 0f       	add	r30, r30
     764:	ff 1f       	adc	r31, r31
     766:	ed 51       	subi	r30, 0x1D	; 29
     768:	fe 4f       	sbci	r31, 0xFE	; 254
     76a:	85 91       	lpm	r24, Z+
     76c:	94 91       	lpm	r25, Z
     76e:	88 83       	st	Y, r24
     770:	99 83       	std	Y+1, r25	; 0x01
		encoder.pin1_bitmask = PIN_TO_BITMASK(pin1);
     772:	29 5a       	subi	r18, 0xA9	; 169
     774:	3e 4f       	sbci	r19, 0xFE	; 254
     776:	f9 01       	movw	r30, r18
     778:	24 91       	lpm	r18, Z
     77a:	2c 83       	std	Y+4, r18	; 0x04
		encoder.pin2_register = PIN_TO_BASEREG(pin2);
     77c:	20 2f       	mov	r18, r16
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	f9 01       	movw	r30, r18
     782:	e3 56       	subi	r30, 0x63	; 99
     784:	fe 4f       	sbci	r31, 0xFE	; 254
     786:	e4 91       	lpm	r30, Z
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	ed 51       	subi	r30, 0x1D	; 29
     790:	fe 4f       	sbci	r31, 0xFE	; 254
     792:	85 91       	lpm	r24, Z+
     794:	94 91       	lpm	r25, Z
     796:	8a 83       	std	Y+2, r24	; 0x02
     798:	9b 83       	std	Y+3, r25	; 0x03
		encoder.pin2_bitmask = PIN_TO_BITMASK(pin2);
     79a:	29 5a       	subi	r18, 0xA9	; 169
     79c:	3e 4f       	sbci	r19, 0xFE	; 254
     79e:	f9 01       	movw	r30, r18
     7a0:	24 91       	lpm	r18, Z
     7a2:	2d 83       	std	Y+5, r18	; 0x05
		encoder.position = 0;
     7a4:	1f 82       	std	Y+7, r1	; 0x07
     7a6:	18 86       	std	Y+8, r1	; 0x08
     7a8:	19 86       	std	Y+9, r1	; 0x09
     7aa:	1a 86       	std	Y+10, r1	; 0x0a
		// allow time for a passive R-C filter to charge
		// through the pullup resistors, before reading
		// the initial state
		delayMicroseconds(2000);
     7ac:	80 ed       	ldi	r24, 0xD0	; 208
     7ae:	97 e0       	ldi	r25, 0x07	; 7
     7b0:	0e 94 85 2a 	call	0x550a	; 0x550a <delayMicroseconds>
		uint8_t s = 0;
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
     7b4:	e8 81       	ld	r30, Y
     7b6:	f9 81       	ldd	r31, Y+1	; 0x01
     7b8:	90 81       	ld	r25, Z
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	98 23       	and	r25, r24
		encoder.position = 0;
		// allow time for a passive R-C filter to charge
		// through the pullup resistors, before reading
		// the initial state
		delayMicroseconds(2000);
		uint8_t s = 0;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <_ZN7EncoderC1Ehh+0x8e>
     7c2:	80 e0       	ldi	r24, 0x00	; 0
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
     7c4:	ea 81       	ldd	r30, Y+2	; 0x02
     7c6:	fb 81       	ldd	r31, Y+3	; 0x03
     7c8:	20 81       	ld	r18, Z
     7ca:	9d 81       	ldd	r25, Y+5	; 0x05
     7cc:	92 23       	and	r25, r18
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <_ZN7EncoderC1Ehh+0x9c>
     7d0:	82 60       	ori	r24, 0x02	; 2
		encoder.state = s;
     7d2:	8e 83       	std	Y+6, r24	; 0x06
#ifdef ENCODER_USE_INTERRUPTS
		interrupts_in_use = 0;
     7d4:	1b 86       	std	Y+11, r1	; 0x0b
		switch (pin1) {
     7d6:	12 31       	cpi	r17, 0x12	; 18
     7d8:	09 f4       	brne	.+2      	; 0x7dc <_ZN7EncoderC1Ehh+0xa6>
     7da:	4c c0       	rjmp	.+152    	; 0x874 <_ZN7EncoderC1Ehh+0x13e>
     7dc:	13 31       	cpi	r17, 0x13	; 19
     7de:	30 f4       	brcc	.+12     	; 0x7ec <_ZN7EncoderC1Ehh+0xb6>
     7e0:	12 30       	cpi	r17, 0x02	; 2
     7e2:	61 f0       	breq	.+24     	; 0x7fc <_ZN7EncoderC1Ehh+0xc6>
     7e4:	13 30       	cpi	r17, 0x03	; 3
     7e6:	09 f0       	breq	.+2      	; 0x7ea <_ZN7EncoderC1Ehh+0xb4>
     7e8:	b0 c0       	rjmp	.+352    	; 0x94a <_ZN7EncoderC1Ehh+0x214>
     7ea:	14 c0       	rjmp	.+40     	; 0x814 <_ZN7EncoderC1Ehh+0xde>
     7ec:	14 31       	cpi	r17, 0x14	; 20
     7ee:	51 f1       	breq	.+84     	; 0x844 <_ZN7EncoderC1Ehh+0x10e>
     7f0:	14 31       	cpi	r17, 0x14	; 20
     7f2:	a0 f1       	brcs	.+104    	; 0x85c <_ZN7EncoderC1Ehh+0x126>
     7f4:	15 31       	cpi	r17, 0x15	; 21
     7f6:	09 f0       	breq	.+2      	; 0x7fa <_ZN7EncoderC1Ehh+0xc4>
     7f8:	a8 c0       	rjmp	.+336    	; 0x94a <_ZN7EncoderC1Ehh+0x214>
     7fa:	18 c0       	rjmp	.+48     	; 0x82c <_ZN7EncoderC1Ehh+0xf6>
		#ifdef CORE_INT0_PIN
			case CORE_INT0_PIN:
				interruptArgs[0] = &encoder;
     7fc:	d0 93 54 06 	sts	0x0654, r29
     800:	c0 93 53 06 	sts	0x0653, r28
				attachInterrupt(0, isr0, CHANGE);
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	63 e5       	ldi	r22, 0x53	; 83
     808:	71 e0       	ldi	r23, 0x01	; 1
     80a:	41 e0       	ldi	r20, 0x01	; 1
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <attachInterrupt>
				break;
     812:	3b c0       	rjmp	.+118    	; 0x88a <_ZN7EncoderC1Ehh+0x154>
		#endif
		#ifdef CORE_INT1_PIN
			case CORE_INT1_PIN:
				interruptArgs[1] = &encoder;
     814:	d0 93 56 06 	sts	0x0656, r29
     818:	c0 93 55 06 	sts	0x0655, r28
				attachInterrupt(1, isr1, CHANGE);
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	66 e5       	ldi	r22, 0x56	; 86
     820:	73 e0       	ldi	r23, 0x03	; 3
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <attachInterrupt>
				break;
     82a:	2f c0       	rjmp	.+94     	; 0x88a <_ZN7EncoderC1Ehh+0x154>
		#endif
		#ifdef CORE_INT2_PIN
			case CORE_INT2_PIN:
				interruptArgs[2] = &encoder;
     82c:	d0 93 58 06 	sts	0x0658, r29
     830:	c0 93 57 06 	sts	0x0657, r28
				attachInterrupt(2, isr2, CHANGE);
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	61 e1       	ldi	r22, 0x11	; 17
     838:	73 e0       	ldi	r23, 0x03	; 3
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <attachInterrupt>
				break;
     842:	23 c0       	rjmp	.+70     	; 0x88a <_ZN7EncoderC1Ehh+0x154>
		#endif
		#ifdef CORE_INT3_PIN
			case CORE_INT3_PIN:
				interruptArgs[3] = &encoder;
     844:	d0 93 5a 06 	sts	0x065A, r29
     848:	c0 93 59 06 	sts	0x0659, r28
				attachInterrupt(3, isr3, CHANGE);
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	6c ec       	ldi	r22, 0xCC	; 204
     850:	72 e0       	ldi	r23, 0x02	; 2
     852:	41 e0       	ldi	r20, 0x01	; 1
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <attachInterrupt>
				break;
     85a:	17 c0       	rjmp	.+46     	; 0x88a <_ZN7EncoderC1Ehh+0x154>
		#endif
		#ifdef CORE_INT4_PIN
			case CORE_INT4_PIN:
				interruptArgs[4] = &encoder;
     85c:	d0 93 5c 06 	sts	0x065C, r29
     860:	c0 93 5b 06 	sts	0x065B, r28
				attachInterrupt(4, isr4, CHANGE);
     864:	84 e0       	ldi	r24, 0x04	; 4
     866:	67 e8       	ldi	r22, 0x87	; 135
     868:	72 e0       	ldi	r23, 0x02	; 2
     86a:	41 e0       	ldi	r20, 0x01	; 1
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <attachInterrupt>
				break;
     872:	0b c0       	rjmp	.+22     	; 0x88a <_ZN7EncoderC1Ehh+0x154>
		#endif
		#ifdef CORE_INT5_PIN
			case CORE_INT5_PIN:
				interruptArgs[5] = &encoder;
     874:	d0 93 5e 06 	sts	0x065E, r29
     878:	c0 93 5d 06 	sts	0x065D, r28
				attachInterrupt(5, isr5, CHANGE);
     87c:	85 e0       	ldi	r24, 0x05	; 5
     87e:	62 e4       	ldi	r22, 0x42	; 66
     880:	72 e0       	ldi	r23, 0x02	; 2
     882:	41 e0       	ldi	r20, 0x01	; 1
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <attachInterrupt>
				break;
		#endif
			default:
				return;
		}
		interrupts_in_use++;
     88a:	8b 85       	ldd	r24, Y+11	; 0x0b
     88c:	8f 5f       	subi	r24, 0xFF	; 255
     88e:	8b 87       	std	Y+11, r24	; 0x0b

		switch (pin2) {
     890:	02 31       	cpi	r16, 0x12	; 18
     892:	09 f4       	brne	.+2      	; 0x896 <_ZN7EncoderC1Ehh+0x160>
     894:	4c c0       	rjmp	.+152    	; 0x92e <_ZN7EncoderC1Ehh+0x1f8>
     896:	03 31       	cpi	r16, 0x13	; 19
     898:	30 f4       	brcc	.+12     	; 0x8a6 <_ZN7EncoderC1Ehh+0x170>
     89a:	02 30       	cpi	r16, 0x02	; 2
     89c:	61 f0       	breq	.+24     	; 0x8b6 <_ZN7EncoderC1Ehh+0x180>
     89e:	03 30       	cpi	r16, 0x03	; 3
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <_ZN7EncoderC1Ehh+0x16e>
     8a2:	50 c0       	rjmp	.+160    	; 0x944 <_ZN7EncoderC1Ehh+0x20e>
     8a4:	14 c0       	rjmp	.+40     	; 0x8ce <_ZN7EncoderC1Ehh+0x198>
     8a6:	04 31       	cpi	r16, 0x14	; 20
     8a8:	51 f1       	breq	.+84     	; 0x8fe <_ZN7EncoderC1Ehh+0x1c8>
     8aa:	04 31       	cpi	r16, 0x14	; 20
     8ac:	a0 f1       	brcs	.+104    	; 0x916 <_ZN7EncoderC1Ehh+0x1e0>
     8ae:	05 31       	cpi	r16, 0x15	; 21
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <_ZN7EncoderC1Ehh+0x17e>
     8b2:	48 c0       	rjmp	.+144    	; 0x944 <_ZN7EncoderC1Ehh+0x20e>
     8b4:	18 c0       	rjmp	.+48     	; 0x8e6 <_ZN7EncoderC1Ehh+0x1b0>
		#ifdef CORE_INT0_PIN
			case CORE_INT0_PIN:
				interruptArgs[0] = &encoder;
     8b6:	d0 93 54 06 	sts	0x0654, r29
     8ba:	c0 93 53 06 	sts	0x0653, r28
				attachInterrupt(0, isr0, CHANGE);
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	63 e5       	ldi	r22, 0x53	; 83
     8c2:	71 e0       	ldi	r23, 0x01	; 1
     8c4:	41 e0       	ldi	r20, 0x01	; 1
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <attachInterrupt>
				break;
     8cc:	3b c0       	rjmp	.+118    	; 0x944 <_ZN7EncoderC1Ehh+0x20e>
		#endif
		#ifdef CORE_INT1_PIN
			case CORE_INT1_PIN:
				interruptArgs[1] = &encoder;
     8ce:	d0 93 56 06 	sts	0x0656, r29
     8d2:	c0 93 55 06 	sts	0x0655, r28
				attachInterrupt(1, isr1, CHANGE);
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	66 e5       	ldi	r22, 0x56	; 86
     8da:	73 e0       	ldi	r23, 0x03	; 3
     8dc:	41 e0       	ldi	r20, 0x01	; 1
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <attachInterrupt>
				break;
     8e4:	2f c0       	rjmp	.+94     	; 0x944 <_ZN7EncoderC1Ehh+0x20e>
		#endif
		#ifdef CORE_INT2_PIN
			case CORE_INT2_PIN:
				interruptArgs[2] = &encoder;
     8e6:	d0 93 58 06 	sts	0x0658, r29
     8ea:	c0 93 57 06 	sts	0x0657, r28
				attachInterrupt(2, isr2, CHANGE);
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	61 e1       	ldi	r22, 0x11	; 17
     8f2:	73 e0       	ldi	r23, 0x03	; 3
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <attachInterrupt>
				break;
     8fc:	23 c0       	rjmp	.+70     	; 0x944 <_ZN7EncoderC1Ehh+0x20e>
		#endif
		#ifdef CORE_INT3_PIN
			case CORE_INT3_PIN:
				interruptArgs[3] = &encoder;
     8fe:	d0 93 5a 06 	sts	0x065A, r29
     902:	c0 93 59 06 	sts	0x0659, r28
				attachInterrupt(3, isr3, CHANGE);
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	6c ec       	ldi	r22, 0xCC	; 204
     90a:	72 e0       	ldi	r23, 0x02	; 2
     90c:	41 e0       	ldi	r20, 0x01	; 1
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <attachInterrupt>
				break;
     914:	17 c0       	rjmp	.+46     	; 0x944 <_ZN7EncoderC1Ehh+0x20e>
		#endif
		#ifdef CORE_INT4_PIN
			case CORE_INT4_PIN:
				interruptArgs[4] = &encoder;
     916:	d0 93 5c 06 	sts	0x065C, r29
     91a:	c0 93 5b 06 	sts	0x065B, r28
				attachInterrupt(4, isr4, CHANGE);
     91e:	84 e0       	ldi	r24, 0x04	; 4
     920:	67 e8       	ldi	r22, 0x87	; 135
     922:	72 e0       	ldi	r23, 0x02	; 2
     924:	41 e0       	ldi	r20, 0x01	; 1
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <attachInterrupt>
				break;
     92c:	0b c0       	rjmp	.+22     	; 0x944 <_ZN7EncoderC1Ehh+0x20e>
		#endif
		#ifdef CORE_INT5_PIN
			case CORE_INT5_PIN:
				interruptArgs[5] = &encoder;
     92e:	d0 93 5e 06 	sts	0x065E, r29
     932:	c0 93 5d 06 	sts	0x065D, r28
				attachInterrupt(5, isr5, CHANGE);
     936:	85 e0       	ldi	r24, 0x05	; 5
     938:	62 e4       	ldi	r22, 0x42	; 66
     93a:	72 e0       	ldi	r23, 0x02	; 2
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <attachInterrupt>
				break;
			default:
				return;
		#endif
		}
		interrupts_in_use++;
     944:	8b 85       	ldd	r24, Y+11	; 0x0b
     946:	8f 5f       	subi	r24, 0xFF	; 255
     948:	8b 87       	std	Y+11, r24	; 0x0b
#endif
		//update_finishup();  // to force linker to include the code
	}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <_Z10printAnglev>:
		//printImuCsv();
		//testCenter();
	}
}

void printAngle(){
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
	Serial.print("Angle:");
     958:	ce ee       	ldi	r28, 0xEE	; 238
     95a:	d6 e0       	ldi	r29, 0x06	; 6
     95c:	ce 01       	movw	r24, r28
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	72 e0       	ldi	r23, 0x02	; 2
     962:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
	Serial.print(AngleCalc.angle);
     966:	40 91 01 06 	lds	r20, 0x0601
     96a:	50 91 02 06 	lds	r21, 0x0602
     96e:	60 91 03 06 	lds	r22, 0x0603
     972:	70 91 04 06 	lds	r23, 0x0604
     976:	ce 01       	movw	r24, r28
     978:	22 e0       	ldi	r18, 0x02	; 2
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	0e 94 b8 21 	call	0x4370	; 0x4370 <_ZN5Print5printEdi>
	Serial.print(" Accel X:");
     980:	ce 01       	movw	r24, r28
     982:	67 e0       	ldi	r22, 0x07	; 7
     984:	72 e0       	ldi	r23, 0x02	; 2
     986:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
	Serial.print(ForwardAccel.acceleration);
     98a:	40 91 1e 06 	lds	r20, 0x061E
     98e:	50 91 1f 06 	lds	r21, 0x061F
     992:	60 91 20 06 	lds	r22, 0x0620
     996:	70 91 21 06 	lds	r23, 0x0621
     99a:	ce 01       	movw	r24, r28
     99c:	22 e0       	ldi	r18, 0x02	; 2
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	0e 94 b8 21 	call	0x4370	; 0x4370 <_ZN5Print5printEdi>
	Serial.print(" Accel Y:");
     9a4:	ce 01       	movw	r24, r28
     9a6:	61 e1       	ldi	r22, 0x11	; 17
     9a8:	72 e0       	ldi	r23, 0x02	; 2
     9aa:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
	Serial.print(UpAccel.acceleration);
     9ae:	40 91 29 06 	lds	r20, 0x0629
     9b2:	50 91 2a 06 	lds	r21, 0x062A
     9b6:	60 91 2b 06 	lds	r22, 0x062B
     9ba:	70 91 2c 06 	lds	r23, 0x062C
     9be:	ce 01       	movw	r24, r28
     9c0:	22 e0       	ldi	r18, 0x02	; 2
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	0e 94 b8 21 	call	0x4370	; 0x4370 <_ZN5Print5printEdi>
	Serial.print(" Rate:");
     9c8:	ce 01       	movw	r24, r28
     9ca:	6b e1       	ldi	r22, 0x1B	; 27
     9cc:	72 e0       	ldi	r23, 0x02	; 2
     9ce:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
	Serial.println(TiltGyro.rate);
     9d2:	40 91 2f 06 	lds	r20, 0x062F
     9d6:	50 91 30 06 	lds	r21, 0x0630
     9da:	60 91 31 06 	lds	r22, 0x0631
     9de:	70 91 32 06 	lds	r23, 0x0632
     9e2:	ce 01       	movw	r24, r28
     9e4:	22 e0       	ldi	r18, 0x02	; 2
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	0e 94 bb 21 	call	0x4376	; 0x4376 <_ZN5Print7printlnEdi>
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <_Z11printImuCsvv>:
int count = 0;
void printImuCsv(){
     9f2:	af 92       	push	r10
     9f4:	bf 92       	push	r11
     9f6:	cf 92       	push	r12
     9f8:	df 92       	push	r13
     9fa:	ef 92       	push	r14
     9fc:	ff 92       	push	r15
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
     a0a:	2c 97       	sbiw	r28, 0x0c	; 12
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	6e 01       	movw	r12, r28
     a18:	08 94       	sec
     a1a:	c1 1c       	adc	r12, r1
     a1c:	d1 1c       	adc	r13, r1
     a1e:	76 01       	movw	r14, r12
     a20:	08 e0       	ldi	r16, 0x08	; 8
	int anas[6];
	for (int i = 0; i < 6; i++){
		anas[i] = analogRead(i+8);
     a22:	80 2f       	mov	r24, r16
     a24:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <analogRead>
     a28:	f7 01       	movw	r30, r14
     a2a:	81 93       	st	Z+, r24
     a2c:	91 93       	st	Z+, r25
     a2e:	7f 01       	movw	r14, r30
     a30:	0f 5f       	subi	r16, 0xFF	; 255
	Serial.println(TiltGyro.rate);
}
int count = 0;
void printImuCsv(){
	int anas[6];
	for (int i = 0; i < 6; i++){
     a32:	0e 30       	cpi	r16, 0x0E	; 14
     a34:	b1 f7       	brne	.-20     	; 0xa22 <_Z11printImuCsvv+0x30>
		anas[i] = analogRead(i+8);
	}
	
	Serial.print(count);
     a36:	0e ee       	ldi	r16, 0xEE	; 238
     a38:	16 e0       	ldi	r17, 0x06	; 6
     a3a:	60 91 c2 03 	lds	r22, 0x03C2
     a3e:	70 91 c3 03 	lds	r23, 0x03C3
     a42:	c8 01       	movw	r24, r16
     a44:	4a e0       	ldi	r20, 0x0A	; 10
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print5printEii>
	Serial.print(",");
     a4c:	c8 01       	movw	r24, r16
     a4e:	62 e2       	ldi	r22, 0x22	; 34
     a50:	72 e0       	ldi	r23, 0x02	; 2
     a52:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
	Serial.print(UpAccel.acceleration);
	Serial.print(" Rate:");
	Serial.println(TiltGyro.rate);
}
int count = 0;
void printImuCsv(){
     a56:	8e 01       	movw	r16, r28
     a58:	03 5f       	subi	r16, 0xF3	; 243
     a5a:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	
	Serial.print(count);
	Serial.print(",");
	for (int i = 0; i < 6; i++){
		Serial.print(anas[i]);
     a5c:	0f 2e       	mov	r0, r31
     a5e:	fe ee       	ldi	r31, 0xEE	; 238
     a60:	ef 2e       	mov	r14, r31
     a62:	f6 e0       	ldi	r31, 0x06	; 6
     a64:	ff 2e       	mov	r15, r31
     a66:	f0 2d       	mov	r31, r0
		Serial.print(",");
     a68:	0f 2e       	mov	r0, r31
     a6a:	f2 e2       	ldi	r31, 0x22	; 34
     a6c:	af 2e       	mov	r10, r31
     a6e:	f2 e0       	ldi	r31, 0x02	; 2
     a70:	bf 2e       	mov	r11, r31
     a72:	f0 2d       	mov	r31, r0
	}
	
	Serial.print(count);
	Serial.print(",");
	for (int i = 0; i < 6; i++){
		Serial.print(anas[i]);
     a74:	f6 01       	movw	r30, r12
     a76:	61 91       	ld	r22, Z+
     a78:	71 91       	ld	r23, Z+
     a7a:	6f 01       	movw	r12, r30
     a7c:	c7 01       	movw	r24, r14
     a7e:	4a e0       	ldi	r20, 0x0A	; 10
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print5printEii>
		Serial.print(",");
     a86:	c7 01       	movw	r24, r14
     a88:	b5 01       	movw	r22, r10
     a8a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
		anas[i] = analogRead(i+8);
	}
	
	Serial.print(count);
	Serial.print(",");
	for (int i = 0; i < 6; i++){
     a8e:	c0 16       	cp	r12, r16
     a90:	d1 06       	cpc	r13, r17
     a92:	81 f7       	brne	.-32     	; 0xa74 <_Z11printImuCsvv+0x82>
		Serial.print(anas[i]);
		Serial.print(",");
	}
	Serial.print((long)millis());
     a94:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
     a98:	ab 01       	movw	r20, r22
     a9a:	bc 01       	movw	r22, r24
     a9c:	0e ee       	ldi	r16, 0xEE	; 238
     a9e:	16 e0       	ldi	r17, 0x06	; 6
     aa0:	c8 01       	movw	r24, r16
     aa2:	2a e0       	ldi	r18, 0x0A	; 10
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN5Print5printEli>
	
	Serial.println();
     aaa:	c8 01       	movw	r24, r16
     aac:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_ZN5Print7printlnEv>
	//delay(1);
}
     ab0:	2c 96       	adiw	r28, 0x0c	; 12
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	bf 90       	pop	r11
     ace:	af 90       	pop	r10
     ad0:	08 95       	ret

00000ad2 <_Z8writeLedb>:

void writeLed(bool state){
     ad2:	68 2f       	mov	r22, r24
	digitalWrite(13, state ? HIGH : LOW);
     ad4:	8d e0       	ldi	r24, 0x0D	; 13
     ad6:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
}
     ada:	08 95       	ret

00000adc <_Z8setDriveff>:
		output = BalancePID.update(AngleCalc.angle, desiredAngle, AngleCalc.gyro->rate);
	}
	setDrive(output + spin, output - spin);
}

void setDrive(float leftVal, float rightVal){
     adc:	4f 92       	push	r4
     ade:	5f 92       	push	r5
     ae0:	6f 92       	push	r6
     ae2:	7f 92       	push	r7
     ae4:	8f 92       	push	r8
     ae6:	9f 92       	push	r9
     ae8:	af 92       	push	r10
     aea:	bf 92       	push	r11
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	49 01       	movw	r8, r18
     af6:	5a 01       	movw	r10, r20
	leftVal *= LEFT_INVERT;
     af8:	90 58       	subi	r25, 0x80	; 128
	rightVal *= RIGHT_INVERT;
	leftVal = limit(leftVal, -1.0, 1.0);
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e8       	ldi	r20, 0x80	; 128
     b00:	5f eb       	ldi	r21, 0xBF	; 191
     b02:	0f 2e       	mov	r0, r31
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	ef 2e       	mov	r14, r31
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	ff 2e       	mov	r15, r31
     b0c:	f0 e8       	ldi	r31, 0x80	; 128
     b0e:	0f 2f       	mov	r16, r31
     b10:	ff e3       	ldi	r31, 0x3F	; 63
     b12:	1f 2f       	mov	r17, r31
     b14:	f0 2d       	mov	r31, r0
     b16:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_Z5limitfff>
     b1a:	2b 01       	movw	r4, r22
     b1c:	3c 01       	movw	r6, r24
	rightVal = limit(rightVal, -1.0, 1.0);
     b1e:	c5 01       	movw	r24, r10
     b20:	b4 01       	movw	r22, r8
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	40 e8       	ldi	r20, 0x80	; 128
     b28:	5f eb       	ldi	r21, 0xBF	; 191
     b2a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_Z5limitfff>
     b2e:	4b 01       	movw	r8, r22
     b30:	5c 01       	movw	r10, r24
	
	leftVal *= PULSE_RANGE;
     b32:	c3 01       	movw	r24, r6
     b34:	b2 01       	movw	r22, r4
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e8       	ldi	r19, 0x80	; 128
     b3a:	4b e3       	ldi	r20, 0x3B	; 59
     b3c:	54 e4       	ldi	r21, 0x44	; 68
     b3e:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__mulsf3>
	rightVal *= PULSE_RANGE;
	
	left.writeMicroseconds(LEFT_CENTER + removeDeadband(leftVal, PLUSE_DEADBAND, PULSE_RANGE));
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	40 ea       	ldi	r20, 0xA0	; 160
     b48:	52 e4       	ldi	r21, 0x42	; 66
     b4a:	0f 2e       	mov	r0, r31
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	ef 2e       	mov	r14, r31
     b50:	f0 e8       	ldi	r31, 0x80	; 128
     b52:	ff 2e       	mov	r15, r31
     b54:	fb e3       	ldi	r31, 0x3B	; 59
     b56:	0f 2f       	mov	r16, r31
     b58:	f4 e4       	ldi	r31, 0x44	; 68
     b5a:	1f 2f       	mov	r17, r31
     b5c:	f0 2d       	mov	r31, r0
     b5e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_Z14removeDeadbandfff>
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e8       	ldi	r19, 0x80	; 128
     b66:	4b eb       	ldi	r20, 0xBB	; 187
     b68:	54 e4       	ldi	r21, 0x44	; 68
     b6a:	0e 94 6f 48 	call	0x90de	; 0x90de <__addsf3>
     b6e:	0e 94 a1 49 	call	0x9342	; 0x9342 <__fixsfsi>
     b72:	ab 01       	movw	r20, r22
     b74:	bc 01       	movw	r22, r24
     b76:	86 ee       	ldi	r24, 0xE6	; 230
     b78:	95 e0       	ldi	r25, 0x05	; 5
     b7a:	ba 01       	movw	r22, r20
     b7c:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Servo17writeMicrosecondsEi>
	rightVal *= RIGHT_INVERT;
	leftVal = limit(leftVal, -1.0, 1.0);
	rightVal = limit(rightVal, -1.0, 1.0);
	
	leftVal *= PULSE_RANGE;
	rightVal *= PULSE_RANGE;
     b80:	c5 01       	movw	r24, r10
     b82:	b4 01       	movw	r22, r8
     b84:	a8 01       	movw	r20, r16
     b86:	97 01       	movw	r18, r14
     b88:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__mulsf3>
	
	left.writeMicroseconds(LEFT_CENTER + removeDeadband(leftVal, PLUSE_DEADBAND, PULSE_RANGE));
	right.writeMicroseconds(RIGHT_CENTER + removeDeadband(rightVal, PLUSE_DEADBAND, PULSE_RANGE));
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	40 ea       	ldi	r20, 0xA0	; 160
     b92:	52 e4       	ldi	r21, 0x42	; 66
     b94:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_Z14removeDeadbandfff>
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e4       	ldi	r19, 0x40	; 64
     b9c:	4a eb       	ldi	r20, 0xBA	; 186
     b9e:	54 e4       	ldi	r21, 0x44	; 68
     ba0:	0e 94 6f 48 	call	0x90de	; 0x90de <__addsf3>
     ba4:	0e 94 a1 49 	call	0x9342	; 0x9342 <__fixsfsi>
     ba8:	ab 01       	movw	r20, r22
     baa:	bc 01       	movw	r22, r24
     bac:	83 ee       	ldi	r24, 0xE3	; 227
     bae:	95 e0       	ldi	r25, 0x05	; 5
     bb0:	ba 01       	movw	r22, r20
     bb2:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Servo17writeMicrosecondsEi>
}
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	bf 90       	pop	r11
     bc0:	af 90       	pop	r10
     bc2:	9f 90       	pop	r9
     bc4:	8f 90       	pop	r8
     bc6:	7f 90       	pop	r7
     bc8:	6f 90       	pop	r6
     bca:	5f 90       	pop	r5
     bcc:	4f 90       	pop	r4
     bce:	08 95       	ret

00000bd0 <_Z7balanceff>:

void writeLed(bool state){
	digitalWrite(13, state ? HIGH : LOW);
}

void balance(float desiredAngle, float spin){
     bd0:	2f 92       	push	r2
     bd2:	3f 92       	push	r3
     bd4:	4f 92       	push	r4
     bd6:	5f 92       	push	r5
     bd8:	6f 92       	push	r6
     bda:	7f 92       	push	r7
     bdc:	8f 92       	push	r8
     bde:	9f 92       	push	r9
     be0:	af 92       	push	r10
     be2:	bf 92       	push	r11
     be4:	cf 92       	push	r12
     be6:	df 92       	push	r13
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <_Z7balanceff+0x26>
     bf6:	0f 92       	push	r0
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	69 83       	std	Y+1, r22	; 0x01
     bfe:	7a 83       	std	Y+2, r23	; 0x02
     c00:	8b 83       	std	Y+3, r24	; 0x03
     c02:	9c 83       	std	Y+4, r25	; 0x04
     c04:	29 01       	movw	r4, r18
     c06:	3a 01       	movw	r6, r20
		this->updateSensors = updateSensors;
		firstAngleUpdate = true;
	}
	
	void update(){
		if (updateSensors){
     c08:	80 91 13 06 	lds	r24, 0x0613
     c0c:	88 23       	and	r24, r24
     c0e:	e1 f0       	breq	.+56     	; 0xc48 <_Z7balanceff+0x78>
			gyro->update();
     c10:	80 91 05 06 	lds	r24, 0x0605
     c14:	90 91 06 06 	lds	r25, 0x0606
     c18:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN4Gyro6updateEv>
			xAccel->update();
     c1c:	80 91 07 06 	lds	r24, 0x0607
     c20:	90 91 08 06 	lds	r25, 0x0608
     c24:	dc 01       	movw	r26, r24
     c26:	ed 91       	ld	r30, X+
     c28:	fc 91       	ld	r31, X
     c2a:	01 90       	ld	r0, Z+
     c2c:	f0 81       	ld	r31, Z
     c2e:	e0 2d       	mov	r30, r0
     c30:	19 95       	eicall
			yAccel->update();
     c32:	80 91 09 06 	lds	r24, 0x0609
     c36:	90 91 0a 06 	lds	r25, 0x060A
     c3a:	dc 01       	movw	r26, r24
     c3c:	ed 91       	ld	r30, X+
     c3e:	fc 91       	ld	r31, X
     c40:	01 90       	ld	r0, Z+
     c42:	f0 81       	ld	r31, Z
     c44:	e0 2d       	mov	r30, r0
     c46:	19 95       	eicall
		}
		
		double accelRads = atan2(xAccel->acceleration, yAccel->acceleration);
     c48:	e0 91 07 06 	lds	r30, 0x0607
     c4c:	f0 91 08 06 	lds	r31, 0x0608
     c50:	65 81       	ldd	r22, Z+5	; 0x05
     c52:	76 81       	ldd	r23, Z+6	; 0x06
     c54:	87 81       	ldd	r24, Z+7	; 0x07
     c56:	90 85       	ldd	r25, Z+8	; 0x08
     c58:	e0 91 09 06 	lds	r30, 0x0609
     c5c:	f0 91 0a 06 	lds	r31, 0x060A
     c60:	25 81       	ldd	r18, Z+5	; 0x05
     c62:	36 81       	ldd	r19, Z+6	; 0x06
     c64:	47 81       	ldd	r20, Z+7	; 0x07
     c66:	50 85       	ldd	r21, Z+8	; 0x08
     c68:	0e 94 e2 48 	call	0x91c4	; 0x91c4 <atan2>
		double accelAngle = (long) (accelRads * 180 / PI);
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	44 e3       	ldi	r20, 0x34	; 52
     c72:	53 e4       	ldi	r21, 0x43	; 67
     c74:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__mulsf3>
     c78:	2b ed       	ldi	r18, 0xDB	; 219
     c7a:	3f e0       	ldi	r19, 0x0F	; 15
     c7c:	49 e4       	ldi	r20, 0x49	; 73
     c7e:	50 e4       	ldi	r21, 0x40	; 64
     c80:	0e 94 39 49 	call	0x9272	; 0x9272 <__divsf3>
     c84:	0e 94 a1 49 	call	0x9342	; 0x9342 <__fixsfsi>
     c88:	0e 94 d4 49 	call	0x93a8	; 0x93a8 <__floatsisf>
     c8c:	36 2e       	mov	r3, r22
     c8e:	a7 2e       	mov	r10, r23
     c90:	08 2f       	mov	r16, r24
     c92:	b9 2e       	mov	r11, r25

		double gyroDelta = gyro->deltaAngle;
     c94:	80 90 05 06 	lds	r8, 0x0605
     c98:	90 90 06 06 	lds	r9, 0x0606
     c9c:	f4 01       	movw	r30, r8
     c9e:	44 81       	ldd	r20, Z+4	; 0x04
     ca0:	55 81       	ldd	r21, Z+5	; 0x05
     ca2:	66 81       	ldd	r22, Z+6	; 0x06
     ca4:	77 81       	ldd	r23, Z+7	; 0x07

		if (firstAngleUpdate) {
     ca6:	80 91 14 06 	lds	r24, 0x0614
     caa:	88 23       	and	r24, r24
     cac:	71 f0       	breq	.+28     	; 0xcca <_Z7balanceff+0xfa>
			angle = accelAngle;
     cae:	83 2d       	mov	r24, r3
     cb0:	9a 2d       	mov	r25, r10
     cb2:	a0 2f       	mov	r26, r16
     cb4:	bb 2d       	mov	r27, r11
     cb6:	80 93 01 06 	sts	0x0601, r24
     cba:	90 93 02 06 	sts	0x0602, r25
     cbe:	a0 93 03 06 	sts	0x0603, r26
     cc2:	b0 93 04 06 	sts	0x0604, r27
			firstAngleUpdate = false;
     cc6:	10 92 14 06 	sts	0x0614, r1
		}

		angle = (angle + gyroDelta) * gyroWeight + accelAngle * accelWeight;
     cca:	cb 01       	movw	r24, r22
     ccc:	ba 01       	movw	r22, r20
     cce:	20 91 01 06 	lds	r18, 0x0601
     cd2:	30 91 02 06 	lds	r19, 0x0602
     cd6:	40 91 03 06 	lds	r20, 0x0603
     cda:	50 91 04 06 	lds	r21, 0x0604
     cde:	0e 94 6f 48 	call	0x90de	; 0x90de <__addsf3>
     ce2:	20 91 0b 06 	lds	r18, 0x060B
     ce6:	30 91 0c 06 	lds	r19, 0x060C
     cea:	40 91 0d 06 	lds	r20, 0x060D
     cee:	50 91 0e 06 	lds	r21, 0x060E
     cf2:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__mulsf3>
     cf6:	6b 01       	movw	r12, r22
     cf8:	7c 01       	movw	r14, r24
     cfa:	83 2d       	mov	r24, r3
     cfc:	9a 2d       	mov	r25, r10
     cfe:	a0 2f       	mov	r26, r16
     d00:	bb 2d       	mov	r27, r11
     d02:	bc 01       	movw	r22, r24
     d04:	cd 01       	movw	r24, r26
     d06:	20 91 0f 06 	lds	r18, 0x060F
     d0a:	30 91 10 06 	lds	r19, 0x0610
     d0e:	40 91 11 06 	lds	r20, 0x0611
     d12:	50 91 12 06 	lds	r21, 0x0612
     d16:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__mulsf3>
     d1a:	9b 01       	movw	r18, r22
     d1c:	ac 01       	movw	r20, r24
     d1e:	c7 01       	movw	r24, r14
     d20:	b6 01       	movw	r22, r12
     d22:	0e 94 6f 48 	call	0x90de	; 0x90de <__addsf3>
     d26:	36 2e       	mov	r3, r22
     d28:	27 2e       	mov	r2, r23
     d2a:	b8 2e       	mov	r11, r24
     d2c:	a9 2e       	mov	r10, r25
     d2e:	38 2f       	mov	r19, r24
     d30:	86 2f       	mov	r24, r22
     d32:	92 2d       	mov	r25, r2
     d34:	ab 2d       	mov	r26, r11
     d36:	ba 2d       	mov	r27, r10
     d38:	80 93 01 06 	sts	0x0601, r24
     d3c:	90 93 02 06 	sts	0x0602, r25
     d40:	a0 93 03 06 	sts	0x0603, r26
     d44:	b0 93 04 06 	sts	0x0604, r27
	AngleCalc.update();
	float output = 0.0;
	float error = desiredAngle - AngleCalc.angle;
     d48:	69 81       	ldd	r22, Y+1	; 0x01
     d4a:	7a 81       	ldd	r23, Y+2	; 0x02
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	03 2d       	mov	r16, r3
     d52:	12 2d       	mov	r17, r2
     d54:	23 2f       	mov	r18, r19
     d56:	3b 2f       	mov	r19, r27
     d58:	a9 01       	movw	r20, r18
     d5a:	98 01       	movw	r18, r16
     d5c:	0e 94 6e 48 	call	0x90dc	; 0x90dc <__subsf3>
     d60:	c6 2e       	mov	r12, r22
     d62:	d7 2e       	mov	r13, r23
     d64:	e8 2e       	mov	r14, r24
     d66:	f9 2e       	mov	r15, r25
	
	if (abs(error) > tuningData.safteyLimit){
     d68:	46 2f       	mov	r20, r22
     d6a:	57 2f       	mov	r21, r23
     d6c:	68 2f       	mov	r22, r24
     d6e:	79 2f       	mov	r23, r25
     d70:	cb 01       	movw	r24, r22
     d72:	ba 01       	movw	r22, r20
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	a9 01       	movw	r20, r18
     d7a:	0e 94 a9 4a 	call	0x9552	; 0x9552 <__gesf2>
     d7e:	18 16       	cp	r1, r24
     d80:	24 f0       	brlt	.+8      	; 0xd8a <_Z7balanceff+0x1ba>
     d82:	f7 fa       	bst	r15, 7
     d84:	f0 94       	com	r15
     d86:	f7 f8       	bld	r15, 7
     d88:	f0 94       	com	r15
     d8a:	c7 01       	movw	r24, r14
     d8c:	b6 01       	movw	r22, r12
     d8e:	20 91 f3 03 	lds	r18, 0x03F3
     d92:	30 91 f4 03 	lds	r19, 0x03F4
     d96:	40 91 f5 03 	lds	r20, 0x03F5
     d9a:	50 91 f6 03 	lds	r21, 0x03F6
     d9e:	0e 94 a9 4a 	call	0x9552	; 0x9552 <__gesf2>
     da2:	18 16       	cp	r1, r24
     da4:	84 f4       	brge	.+32     	; 0xdc6 <_Z7balanceff+0x1f6>
		output = 0;
		BalancePID.iTotal = 0.0;
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	dc 01       	movw	r26, r24
     dac:	80 93 d7 05 	sts	0x05D7, r24
     db0:	90 93 d8 05 	sts	0x05D8, r25
     db4:	a0 93 d9 05 	sts	0x05D9, r26
     db8:	b0 93 da 05 	sts	0x05DA, r27
	AngleCalc.update();
	float output = 0.0;
	float error = desiredAngle - AngleCalc.angle;
	
	if (abs(error) > tuningData.safteyLimit){
		output = 0;
     dbc:	6c 01       	movw	r12, r24
     dbe:	7d 01       	movw	r14, r26
		BalancePID.iTotal = 0.0;
		spin = 0;
     dc0:	2c 01       	movw	r4, r24
     dc2:	3d 01       	movw	r6, r26
     dc4:	13 c0       	rjmp	.+38     	; 0xdec <_Z7balanceff+0x21c>
	}
	else{
		output = BalancePID.update(AngleCalc.angle, desiredAngle, AngleCalc.gyro->rate);
     dc6:	d4 01       	movw	r26, r8
     dc8:	cd 90       	ld	r12, X+
     dca:	dd 90       	ld	r13, X+
     dcc:	ed 90       	ld	r14, X+
     dce:	fc 90       	ld	r15, X
     dd0:	8b ec       	ldi	r24, 0xCB	; 203
     dd2:	95 e0       	ldi	r25, 0x05	; 5
     dd4:	43 2d       	mov	r20, r3
     dd6:	52 2d       	mov	r21, r2
     dd8:	6b 2d       	mov	r22, r11
     dda:	7a 2d       	mov	r23, r10
     ddc:	09 81       	ldd	r16, Y+1	; 0x01
     dde:	1a 81       	ldd	r17, Y+2	; 0x02
     de0:	2b 81       	ldd	r18, Y+3	; 0x03
     de2:	3c 81       	ldd	r19, Y+4	; 0x04
     de4:	0e 94 ac 0b 	call	0x1758	; 0x1758 <_ZN3PID6updateEddd>
     de8:	6b 01       	movw	r12, r22
     dea:	7c 01       	movw	r14, r24
	}
	setDrive(output + spin, output - spin);
     dec:	c7 01       	movw	r24, r14
     dee:	b6 01       	movw	r22, r12
     df0:	a3 01       	movw	r20, r6
     df2:	92 01       	movw	r18, r4
     df4:	0e 94 6f 48 	call	0x90de	; 0x90de <__addsf3>
     df8:	4b 01       	movw	r8, r22
     dfa:	5c 01       	movw	r10, r24
     dfc:	c7 01       	movw	r24, r14
     dfe:	b6 01       	movw	r22, r12
     e00:	a3 01       	movw	r20, r6
     e02:	92 01       	movw	r18, r4
     e04:	0e 94 6e 48 	call	0x90dc	; 0x90dc <__subsf3>
     e08:	9b 01       	movw	r18, r22
     e0a:	ac 01       	movw	r20, r24
     e0c:	c5 01       	movw	r24, r10
     e0e:	b4 01       	movw	r22, r8
     e10:	0e 94 6e 05 	call	0xadc	; 0xadc <_Z8setDriveff>
}
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	df 90       	pop	r13
     e2a:	cf 90       	pop	r12
     e2c:	bf 90       	pop	r11
     e2e:	af 90       	pop	r10
     e30:	9f 90       	pop	r9
     e32:	8f 90       	pop	r8
     e34:	7f 90       	pop	r7
     e36:	6f 90       	pop	r6
     e38:	5f 90       	pop	r5
     e3a:	4f 90       	pop	r4
     e3c:	3f 90       	pop	r3
     e3e:	2f 90       	pop	r2
     e40:	08 95       	ret

00000e42 <loop>:
	writeLed(false);
}

unsigned long lastLoop = 0;
float elapsedSeconds = 0.0;
void loop() {
     e42:	4f 92       	push	r4
     e44:	5f 92       	push	r5
     e46:	6f 92       	push	r6
     e48:	7f 92       	push	r7
     e4a:	8f 92       	push	r8
     e4c:	9f 92       	push	r9
     e4e:	af 92       	push	r10
     e50:	bf 92       	push	r11
     e52:	cf 92       	push	r12
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	2c 97       	sbiw	r28, 0x0c	; 12
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
	long nowMicros = micros();
     e72:	0e 94 32 2a 	call	0x5464	; 0x5464 <micros>
     e76:	69 87       	std	Y+9, r22	; 0x09
     e78:	7a 87       	std	Y+10, r23	; 0x0a
     e7a:	8b 87       	std	Y+11, r24	; 0x0b
     e7c:	9c 87       	std	Y+12, r25	; 0x0c
	if (lastLoop == 0)
     e7e:	80 91 c8 03 	lds	r24, 0x03C8
     e82:	90 91 c9 03 	lds	r25, 0x03C9
     e86:	a0 91 ca 03 	lds	r26, 0x03CA
     e8a:	b0 91 cb 03 	lds	r27, 0x03CB
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	a1 05       	cpc	r26, r1
     e92:	b1 05       	cpc	r27, r1
     e94:	61 f4       	brne	.+24     	; 0xeae <loop+0x6c>
	lastLoop = nowMicros;
     e96:	29 85       	ldd	r18, Y+9	; 0x09
     e98:	3a 85       	ldd	r19, Y+10	; 0x0a
     e9a:	4b 85       	ldd	r20, Y+11	; 0x0b
     e9c:	5c 85       	ldd	r21, Y+12	; 0x0c
     e9e:	20 93 c8 03 	sts	0x03C8, r18
     ea2:	30 93 c9 03 	sts	0x03C9, r19
     ea6:	40 93 ca 03 	sts	0x03CA, r20
     eaa:	50 93 cb 03 	sts	0x03CB, r21
	elapsedSeconds = (float)(nowMicros - lastLoop) / 1000000;
     eae:	80 91 c8 03 	lds	r24, 0x03C8
     eb2:	90 91 c9 03 	lds	r25, 0x03C9
     eb6:	a0 91 ca 03 	lds	r26, 0x03CA
     eba:	b0 91 cb 03 	lds	r27, 0x03CB
     ebe:	29 85       	ldd	r18, Y+9	; 0x09
     ec0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ec2:	4b 85       	ldd	r20, Y+11	; 0x0b
     ec4:	5c 85       	ldd	r21, Y+12	; 0x0c
     ec6:	28 1b       	sub	r18, r24
     ec8:	39 0b       	sbc	r19, r25
     eca:	4a 0b       	sbc	r20, r26
     ecc:	5b 0b       	sbc	r21, r27
     ece:	ca 01       	movw	r24, r20
     ed0:	b9 01       	movw	r22, r18
     ed2:	0e 94 d2 49 	call	0x93a4	; 0x93a4 <__floatunsisf>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	34 e2       	ldi	r19, 0x24	; 36
     eda:	44 e7       	ldi	r20, 0x74	; 116
     edc:	59 e4       	ldi	r21, 0x49	; 73
     ede:	0e 94 39 49 	call	0x9272	; 0x9272 <__divsf3>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	80 93 c4 03 	sts	0x03C4, r24
     eea:	90 93 c5 03 	sts	0x03C5, r25
     eee:	a0 93 c6 03 	sts	0x03C6, r26
     ef2:	b0 93 c7 03 	sts	0x03C7, r27
	Udp.begin(receivePort);
	initSuccessful = result == 0;
}

void poll(){
	unsigned long now = millis();
     ef6:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
     efa:	2b 01       	movw	r4, r22
     efc:	3c 01       	movw	r6, r24
	//Handle rollover. Vehicle should never be on that long, but...
	if (now < lastDataReceived) {
     efe:	80 91 c7 05 	lds	r24, 0x05C7
     f02:	90 91 c8 05 	lds	r25, 0x05C8
     f06:	a0 91 c9 05 	lds	r26, 0x05C9
     f0a:	b0 91 ca 05 	lds	r27, 0x05CA
     f0e:	48 16       	cp	r4, r24
     f10:	59 06       	cpc	r5, r25
     f12:	6a 06       	cpc	r6, r26
     f14:	7b 06       	cpc	r7, r27
     f16:	40 f4       	brcc	.+16     	; 0xf28 <loop+0xe6>
		lastDataReceived = 0;
     f18:	10 92 c7 05 	sts	0x05C7, r1
     f1c:	10 92 c8 05 	sts	0x05C8, r1
     f20:	10 92 c9 05 	sts	0x05C9, r1
     f24:	10 92 ca 05 	sts	0x05CA, r1
	}
	
	int packetSize = Udp.parsePacket();
     f28:	8c e1       	ldi	r24, 0x1C	; 28
     f2a:	94 e0       	ldi	r25, 0x04	; 4
     f2c:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <_ZN11EthernetUDP11parsePacketEv>
     f30:	8c 01       	movw	r16, r24
	if (packetSize > 0){
     f32:	18 16       	cp	r1, r24
     f34:	19 06       	cpc	r1, r25
     f36:	0c f0       	brlt	.+2      	; 0xf3a <loop+0xf8>
     f38:	6d c0       	rjmp	.+218    	; 0x1014 <loop+0x1d2>
		Serial.print("Received:");
     f3a:	0f 2e       	mov	r0, r31
     f3c:	fe ee       	ldi	r31, 0xEE	; 238
     f3e:	af 2e       	mov	r10, r31
     f40:	f6 e0       	ldi	r31, 0x06	; 6
     f42:	bf 2e       	mov	r11, r31
     f44:	f0 2d       	mov	r31, r0
     f46:	c5 01       	movw	r24, r10
     f48:	64 e2       	ldi	r22, 0x24	; 36
     f4a:	72 e0       	ldi	r23, 0x02	; 2
     f4c:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
		Serial.print(packetSize);
     f50:	c5 01       	movw	r24, r10
     f52:	b8 01       	movw	r22, r16
     f54:	4a e0       	ldi	r20, 0x0A	; 10
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print5printEii>
		Udp.read(receiveBuffer, 200);
     f5c:	0f 2e       	mov	r0, r31
     f5e:	fc e1       	ldi	r31, 0x1C	; 28
     f60:	cf 2e       	mov	r12, r31
     f62:	f4 e0       	ldi	r31, 0x04	; 4
     f64:	df 2e       	mov	r13, r31
     f66:	f0 2d       	mov	r31, r0
     f68:	0f 2e       	mov	r0, r31
     f6a:	fb e1       	ldi	r31, 0x1B	; 27
     f6c:	ef 2e       	mov	r14, r31
     f6e:	ff 24       	eor	r15, r15
     f70:	f0 2d       	mov	r31, r0
     f72:	ec 0c       	add	r14, r12
     f74:	fd 1c       	adc	r15, r13
     f76:	c6 01       	movw	r24, r12
     f78:	b7 01       	movw	r22, r14
     f7a:	48 ec       	ldi	r20, 0xC8	; 200
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
		
		robotModel.update(receiveBuffer, 0, packetSize);
     f82:	0f 2e       	mov	r0, r31
     f84:	fc ee       	ldi	r31, 0xEC	; 236
     f86:	8f 2e       	mov	r8, r31
     f88:	ff ef       	ldi	r31, 0xFF	; 255
     f8a:	9f 2e       	mov	r9, r31
     f8c:	f0 2d       	mov	r31, r0
     f8e:	8c 0c       	add	r8, r12
     f90:	9d 1c       	adc	r9, r13
     f92:	c4 01       	movw	r24, r8
     f94:	b7 01       	movw	r22, r14
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	98 01       	movw	r18, r16
     f9c:	0e 94 84 40 	call	0x8108	; 0x8108 <_ZN10RobotModel6updateEPhjj>
		
		unsigned int transmitLength = 0;
     fa0:	18 86       	std	Y+8, r1	; 0x08
     fa2:	1f 82       	std	Y+7, r1	; 0x07
		robotModel.getStatus(transmitBuffer, &transmitLength);
     fa4:	0f ef       	ldi	r16, 0xFF	; 255
     fa6:	14 e0       	ldi	r17, 0x04	; 4
     fa8:	c4 01       	movw	r24, r8
     faa:	b8 01       	movw	r22, r16
     fac:	ae 01       	movw	r20, r28
     fae:	49 5f       	subi	r20, 0xF9	; 249
     fb0:	5f 4f       	sbci	r21, 0xFF	; 255
     fb2:	0e 94 48 41 	call	0x8290	; 0x8290 <_ZN10RobotModel9getStatusEPhPj>
		
		Serial.print(" Sending:");
     fb6:	c5 01       	movw	r24, r10
     fb8:	6e e2       	ldi	r22, 0x2E	; 46
     fba:	72 e0       	ldi	r23, 0x02	; 2
     fbc:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
		Serial.println(transmitLength);
     fc0:	6f 81       	ldd	r22, Y+7	; 0x07
     fc2:	78 85       	ldd	r23, Y+8	; 0x08
     fc4:	c5 01       	movw	r24, r10
     fc6:	4a e0       	ldi	r20, 0x0A	; 10
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	0e 94 3f 20 	call	0x407e	; 0x407e <_ZN5Print7printlnEji>

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
     fce:	8b e4       	ldi	r24, 0x4B	; 75
     fd0:	93 e0       	ldi	r25, 0x03	; 3
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	80 91 2d 04 	lds	r24, 0x042D
     fda:	90 91 2e 04 	lds	r25, 0x042E
     fde:	a0 91 2f 04 	lds	r26, 0x042F
     fe2:	b0 91 30 04 	lds	r27, 0x0430
     fe6:	8b 83       	std	Y+3, r24	; 0x03
     fe8:	9c 83       	std	Y+4, r25	; 0x04
     fea:	ad 83       	std	Y+5, r26	; 0x05
     fec:	be 83       	std	Y+6, r27	; 0x06
		
		Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
     fee:	40 91 31 04 	lds	r20, 0x0431
     ff2:	50 91 32 04 	lds	r21, 0x0432
     ff6:	c6 01       	movw	r24, r12
     ff8:	be 01       	movw	r22, r28
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	0e 94 4a 11 	call	0x2294	; 0x2294 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
		Udp.write(transmitBuffer, transmitLength);
    1002:	4f 81       	ldd	r20, Y+7	; 0x07
    1004:	58 85       	ldd	r21, Y+8	; 0x08
    1006:	c6 01       	movw	r24, r12
    1008:	b8 01       	movw	r22, r16
    100a:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>
		Udp.endPacket();
    100e:	c6 01       	movw	r24, r12
    1010:	0e 94 45 11 	call	0x228a	; 0x228a <_ZN11EthernetUDP9endPacketEv>
	}
	
	unsigned long safeTime = lastDataReceived + RECEIVE_SAFTEY_DELAY;
    1014:	80 91 c7 05 	lds	r24, 0x05C7
    1018:	90 91 c8 05 	lds	r25, 0x05C8
    101c:	a0 91 c9 05 	lds	r26, 0x05C9
    1020:	b0 91 ca 05 	lds	r27, 0x05CA
    1024:	8c 50       	subi	r24, 0x0C	; 12
    1026:	9e 4f       	sbci	r25, 0xFE	; 254
    1028:	af 4f       	sbci	r26, 0xFF	; 255
    102a:	bf 4f       	sbci	r27, 0xFF	; 255
	isConnected = now > safeTime;
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	84 15       	cp	r24, r4
    1030:	95 05       	cpc	r25, r5
    1032:	a6 05       	cpc	r26, r6
    1034:	b7 05       	cpc	r27, r7
    1036:	08 f0       	brcs	.+2      	; 0x103a <loop+0x1f8>
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	60 93 07 04 	sts	0x0407, r22
	robotModel.loop(isConnected);
    103e:	88 e0       	ldi	r24, 0x08	; 8
    1040:	94 e0       	ldi	r25, 0x04	; 4
    1042:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <_ZN10RobotModel4loopEb>
	
	//beagleComm.poll();
	udpComm.poll();
	
	Serial.print(tuningData.spin);
    1046:	40 91 ef 03 	lds	r20, 0x03EF
    104a:	50 91 f0 03 	lds	r21, 0x03F0
    104e:	60 91 f1 03 	lds	r22, 0x03F1
    1052:	70 91 f2 03 	lds	r23, 0x03F2
    1056:	8e ee       	ldi	r24, 0xEE	; 238
    1058:	96 e0       	ldi	r25, 0x06	; 6
    105a:	22 e0       	ldi	r18, 0x02	; 2
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	0e 94 b8 21 	call	0x4370	; 0x4370 <_ZN5Print5printEdi>
	if (elapsedSeconds >= 0.01){
    1062:	60 91 c4 03 	lds	r22, 0x03C4
    1066:	70 91 c5 03 	lds	r23, 0x03C5
    106a:	80 91 c6 03 	lds	r24, 0x03C6
    106e:	90 91 c7 03 	lds	r25, 0x03C7
    1072:	2a e0       	ldi	r18, 0x0A	; 10
    1074:	37 ed       	ldi	r19, 0xD7	; 215
    1076:	43 e2       	ldi	r20, 0x23	; 35
    1078:	5c e3       	ldi	r21, 0x3C	; 60
    107a:	0e 94 a9 4a 	call	0x9552	; 0x9552 <__gesf2>
    107e:	88 23       	and	r24, r24
    1080:	0c f4       	brge	.+2      	; 0x1084 <loop+0x242>
    1082:	5e c0       	rjmp	.+188    	; 0x1140 <loop+0x2fe>
		BalancePID.P = tuningData.p;
    1084:	80 91 db 03 	lds	r24, 0x03DB
    1088:	90 91 dc 03 	lds	r25, 0x03DC
    108c:	a0 91 dd 03 	lds	r26, 0x03DD
    1090:	b0 91 de 03 	lds	r27, 0x03DE
    1094:	80 93 cb 05 	sts	0x05CB, r24
    1098:	90 93 cc 05 	sts	0x05CC, r25
    109c:	a0 93 cd 05 	sts	0x05CD, r26
    10a0:	b0 93 ce 05 	sts	0x05CE, r27
		BalancePID.I = tuningData.i;
    10a4:	80 91 df 03 	lds	r24, 0x03DF
    10a8:	90 91 e0 03 	lds	r25, 0x03E0
    10ac:	a0 91 e1 03 	lds	r26, 0x03E1
    10b0:	b0 91 e2 03 	lds	r27, 0x03E2
    10b4:	80 93 cf 05 	sts	0x05CF, r24
    10b8:	90 93 d0 05 	sts	0x05D0, r25
    10bc:	a0 93 d1 05 	sts	0x05D1, r26
    10c0:	b0 93 d2 05 	sts	0x05D2, r27
		BalancePID.D = tuningData.d;
    10c4:	80 91 e3 03 	lds	r24, 0x03E3
    10c8:	90 91 e4 03 	lds	r25, 0x03E4
    10cc:	a0 91 e5 03 	lds	r26, 0x03E5
    10d0:	b0 91 e6 03 	lds	r27, 0x03E6
    10d4:	80 93 d3 05 	sts	0x05D3, r24
    10d8:	90 93 d4 05 	sts	0x05D4, r25
    10dc:	a0 93 d5 05 	sts	0x05D5, r26
    10e0:	b0 93 d6 05 	sts	0x05D6, r27
		/*BalancePID.P = -0.08f;
		BalancePID.I = -0.005f;
		BalancePID.D = 0.0005f;
		*/
		
		lastLoop = nowMicros;
    10e4:	89 85       	ldd	r24, Y+9	; 0x09
    10e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e8:	ab 85       	ldd	r26, Y+11	; 0x0b
    10ea:	bc 85       	ldd	r27, Y+12	; 0x0c
    10ec:	80 93 c8 03 	sts	0x03C8, r24
    10f0:	90 93 c9 03 	sts	0x03C9, r25
    10f4:	a0 93 ca 03 	sts	0x03CA, r26
    10f8:	b0 93 cb 03 	sts	0x03CB, r27
		
		balance(tuningData.desiredAngle, tuningData.spin);
    10fc:	60 91 eb 03 	lds	r22, 0x03EB
    1100:	70 91 ec 03 	lds	r23, 0x03EC
    1104:	80 91 ed 03 	lds	r24, 0x03ED
    1108:	90 91 ee 03 	lds	r25, 0x03EE
    110c:	20 91 ef 03 	lds	r18, 0x03EF
    1110:	30 91 f0 03 	lds	r19, 0x03F0
    1114:	40 91 f1 03 	lds	r20, 0x03F1
    1118:	50 91 f2 03 	lds	r21, 0x03F2
    111c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_Z7balanceff>
		tuningData.currentAngle = AngleCalc.angle;
    1120:	80 91 01 06 	lds	r24, 0x0601
    1124:	90 91 02 06 	lds	r25, 0x0602
    1128:	a0 91 03 06 	lds	r26, 0x0603
    112c:	b0 91 04 06 	lds	r27, 0x0604
    1130:	80 93 e7 03 	sts	0x03E7, r24
    1134:	90 93 e8 03 	sts	0x03E8, r25
    1138:	a0 93 e9 03 	sts	0x03E9, r26
    113c:	b0 93 ea 03 	sts	0x03EA, r27
		//printAngle();
		//printImuCsv();
		//testCenter();
	}
}
    1140:	2c 96       	adiw	r28, 0x0c	; 12
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	df 90       	pop	r13
    115a:	cf 90       	pop	r12
    115c:	bf 90       	pop	r11
    115e:	af 90       	pop	r10
    1160:	9f 90       	pop	r9
    1162:	8f 90       	pop	r8
    1164:	7f 90       	pop	r7
    1166:	6f 90       	pop	r6
    1168:	5f 90       	pop	r5
    116a:	4f 90       	pop	r4
    116c:	08 95       	ret

0000116e <_Z9calibrateii>:
	
	left.writeMicroseconds(LEFT_CENTER + removeDeadband(leftVal, PLUSE_DEADBAND, PULSE_RANGE));
	right.writeMicroseconds(RIGHT_CENTER + removeDeadband(rightVal, PLUSE_DEADBAND, PULSE_RANGE));
}

void calibrate(int calibrationDelay, int calibrationLoops) {
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	ec 01       	movw	r28, r24
    117c:	7b 01       	movw	r14, r22
	Serial.println("Waiting to calibrate...");
    117e:	0e ee       	ldi	r16, 0xEE	; 238
    1180:	16 e0       	ldi	r17, 0x06	; 6
    1182:	c8 01       	movw	r24, r16
    1184:	68 e3       	ldi	r22, 0x38	; 56
    1186:	72 e0       	ldi	r23, 0x02	; 2
    1188:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <_ZN5Print7printlnEPKc>
	delay(calibrationDelay);
    118c:	be 01       	movw	r22, r28
    118e:	88 27       	eor	r24, r24
    1190:	77 fd       	sbrc	r23, 7
    1192:	80 95       	com	r24
    1194:	98 2f       	mov	r25, r24
    1196:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <delay>
	Serial.println("Calibrating...");
    119a:	c8 01       	movw	r24, r16
    119c:	60 e5       	ldi	r22, 0x50	; 80
    119e:	72 e0       	ldi	r23, 0x02	; 2
    11a0:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <_ZN5Print7printlnEPKc>

	for (int i = 0; i < calibrationLoops; i++) {
    11a4:	1e 14       	cp	r1, r14
    11a6:	1f 04       	cpc	r1, r15
    11a8:	8c f4       	brge	.+34     	; 0x11cc <_Z9calibrateii+0x5e>
    11aa:	c0 e0       	ldi	r28, 0x00	; 0
    11ac:	d0 e0       	ldi	r29, 0x00	; 0
		TiltGyro.calibrate();
    11ae:	0f e2       	ldi	r16, 0x2F	; 47
    11b0:	16 e0       	ldi	r17, 0x06	; 6
    11b2:	c8 01       	movw	r24, r16
    11b4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN4Gyro9calibrateEv>
		delay(5);
    11b8:	65 e0       	ldi	r22, 0x05	; 5
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <delay>
void calibrate(int calibrationDelay, int calibrationLoops) {
	Serial.println("Waiting to calibrate...");
	delay(calibrationDelay);
	Serial.println("Calibrating...");

	for (int i = 0; i < calibrationLoops; i++) {
    11c4:	21 96       	adiw	r28, 0x01	; 1
    11c6:	ce 15       	cp	r28, r14
    11c8:	df 05       	cpc	r29, r15
    11ca:	99 f7       	brne	.-26     	; 0x11b2 <_Z9calibrateii+0x44>
		TiltGyro.calibrate();
		delay(5);
	}
	
	TiltGyro.endCalibrate();
    11cc:	8f e2       	ldi	r24, 0x2F	; 47
    11ce:	96 e0       	ldi	r25, 0x06	; 6
    11d0:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZN4Gyro12endCalibrateEv>

	Serial.println("Calibration complete!");
    11d4:	ce ee       	ldi	r28, 0xEE	; 238
    11d6:	d6 e0       	ldi	r29, 0x06	; 6
    11d8:	ce 01       	movw	r24, r28
    11da:	6f e5       	ldi	r22, 0x5F	; 95
    11dc:	72 e0       	ldi	r23, 0x02	; 2
    11de:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <_ZN5Print7printlnEPKc>
	Serial.print("GyroCenter:");
    11e2:	ce 01       	movw	r24, r28
    11e4:	65 e7       	ldi	r22, 0x75	; 117
    11e6:	72 e0       	ldi	r23, 0x02	; 2
    11e8:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
	Serial.print(TiltGyro.center);
    11ec:	60 91 3d 06 	lds	r22, 0x063D
    11f0:	70 91 3e 06 	lds	r23, 0x063E
    11f4:	ce 01       	movw	r24, r28
    11f6:	4a e0       	ldi	r20, 0x0A	; 10
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print5printEii>
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	08 95       	ret

0000120c <setup>:
//SerialInterface beagleComm;
UdpComms udpComm;
TuningDataSection tuningData;
RslModelSection rsl;

void setup() {
    120c:	8f 92       	push	r8
    120e:	9f 92       	push	r9
    1210:	af 92       	push	r10
    1212:	bf 92       	push	r11
    1214:	cf 92       	push	r12
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	2c 97       	sbiw	r28, 0x0c	; 12
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
	
	pinMode(13, OUTPUT);
    1234:	8d e0       	ldi	r24, 0x0D	; 13
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <pinMode>
	writeLed(true);
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z8writeLedb>
	Serial.begin(115200);
    1242:	0e ee       	ldi	r16, 0xEE	; 238
    1244:	16 e0       	ldi	r17, 0x06	; 6
    1246:	c8 01       	movw	r24, r16
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	52 ec       	ldi	r21, 0xC2	; 194
    124c:	61 e0       	ldi	r22, 0x01	; 1
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	0e 94 cc 1b 	call	0x3798	; 0x3798 <_ZN14HardwareSerial5beginEm>
	
	Serial.println("Starting up...");
    1254:	c8 01       	movw	r24, r16
    1256:	61 e8       	ldi	r22, 0x81	; 129
    1258:	72 e0       	ldi	r23, 0x02	; 2
    125a:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <_ZN5Print7printlnEPKc>
	
	udpComm.isDhcp = true;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	80 93 fd 03 	sts	0x03FD, r24
	udpComm.receivePort = 8888;
    1264:	88 eb       	ldi	r24, 0xB8	; 184
    1266:	92 e2       	ldi	r25, 0x22	; 34
    1268:	90 93 06 04 	sts	0x0406, r25
    126c:	80 93 05 04 	sts	0x0405, r24
	byte mac[6] = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
    1270:	de 01       	movw	r26, r28
    1272:	17 96       	adiw	r26, 0x07	; 7
    1274:	e9 ea       	ldi	r30, 0xA9	; 169
    1276:	f2 e0       	ldi	r31, 0x02	; 2
    1278:	86 e0       	ldi	r24, 0x06	; 6
    127a:	01 90       	ld	r0, Z+
    127c:	0d 92       	st	X+, r0
    127e:	81 50       	subi	r24, 0x01	; 1
    1280:	e1 f7       	brne	.-8      	; 0x127a <setup+0x6e>
    1282:	fe 01       	movw	r30, r28
    1284:	37 96       	adiw	r30, 0x07	; 7
    1286:	a7 ef       	ldi	r26, 0xF7	; 247
    1288:	b3 e0       	ldi	r27, 0x03	; 3
//SerialInterface beagleComm;
UdpComms udpComm;
TuningDataSection tuningData;
RslModelSection rsl;

void setup() {
    128a:	ce 01       	movw	r24, r28
    128c:	0d 96       	adiw	r24, 0x0d	; 13
	
	udpComm.isDhcp = true;
	udpComm.receivePort = 8888;
	byte mac[6] = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
	for (int i = 0; i< 6; i++){
		udpComm.macAddress[i] = mac[i];
    128e:	21 91       	ld	r18, Z+
    1290:	2d 93       	st	X+, r18
	Serial.println("Starting up...");
	
	udpComm.isDhcp = true;
	udpComm.receivePort = 8888;
	byte mac[6] = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
	for (int i = 0; i< 6; i++){
    1292:	e8 17       	cp	r30, r24
    1294:	f9 07       	cpc	r31, r25
    1296:	d9 f7       	brne	.-10     	; 0x128e <setup+0x82>


void init(){
	int result;
	if (isDhcp){
		result = Ethernet.begin(macAddress);
    1298:	07 ef       	ldi	r16, 0xF7	; 247
    129a:	13 e0       	ldi	r17, 0x03	; 3
    129c:	8f e5       	ldi	r24, 0x5F	; 95
    129e:	96 e0       	ldi	r25, 0x06	; 6
    12a0:	b8 01       	movw	r22, r16
    12a2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN13EthernetClass5beginEPh>
    12a6:	7c 01       	movw	r14, r24
	}
	else{
		result = -1;//Ethernet.begin(macAddress, ipAddress);
	}
	
	Udp.begin(receivePort);
    12a8:	60 91 05 04 	lds	r22, 0x0405
    12ac:	70 91 06 04 	lds	r23, 0x0406
    12b0:	c8 01       	movw	r24, r16
    12b2:	85 96       	adiw	r24, 0x25	; 37
    12b4:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN11EthernetUDP5beginEj>
	initSuccessful = result == 0;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	e1 14       	cp	r14, r1
    12bc:	f1 04       	cpc	r15, r1
    12be:	09 f0       	breq	.+2      	; 0x12c2 <setup+0xb6>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	80 93 04 04 	sts	0x0404, r24
		udpComm.macAddress[i] = mac[i];
	}
	udpComm.init();
	udpComm.robotModel.addSection(&tuningData);
    12c6:	08 e0       	ldi	r16, 0x08	; 8
    12c8:	14 e0       	ldi	r17, 0x04	; 4
    12ca:	c8 01       	movw	r24, r16
    12cc:	65 ed       	ldi	r22, 0xD5	; 213
    12ce:	73 e0       	ldi	r23, 0x03	; 3
    12d0:	0e 94 1e 42 	call	0x843c	; 0x843c <_ZN10RobotModel10addSectionEP17RobotModelSection>
	udpComm.robotModel.addSection(&rsl);
    12d4:	c8 01       	movw	r24, r16
    12d6:	6c ec       	ldi	r22, 0xCC	; 204
    12d8:	73 e0       	ldi	r23, 0x03	; 3
    12da:	0e 94 1e 42 	call	0x843c	; 0x843c <_ZN10RobotModel10addSectionEP17RobotModelSection>
	
	tuningData.p = -0.08f;
    12de:	8a e0       	ldi	r24, 0x0A	; 10
    12e0:	97 ed       	ldi	r25, 0xD7	; 215
    12e2:	a3 ea       	ldi	r26, 0xA3	; 163
    12e4:	bd eb       	ldi	r27, 0xBD	; 189
    12e6:	80 93 db 03 	sts	0x03DB, r24
    12ea:	90 93 dc 03 	sts	0x03DC, r25
    12ee:	a0 93 dd 03 	sts	0x03DD, r26
    12f2:	b0 93 de 03 	sts	0x03DE, r27
	tuningData.i = -0.005f;
    12f6:	8a e0       	ldi	r24, 0x0A	; 10
    12f8:	97 ed       	ldi	r25, 0xD7	; 215
    12fa:	a3 ea       	ldi	r26, 0xA3	; 163
    12fc:	bb eb       	ldi	r27, 0xBB	; 187
    12fe:	80 93 df 03 	sts	0x03DF, r24
    1302:	90 93 e0 03 	sts	0x03E0, r25
    1306:	a0 93 e1 03 	sts	0x03E1, r26
    130a:	b0 93 e2 03 	sts	0x03E2, r27
	tuningData.d = 0.0005f;
    130e:	8f e6       	ldi	r24, 0x6F	; 111
    1310:	92 e1       	ldi	r25, 0x12	; 18
    1312:	a3 e0       	ldi	r26, 0x03	; 3
    1314:	ba e3       	ldi	r27, 0x3A	; 58
    1316:	80 93 e3 03 	sts	0x03E3, r24
    131a:	90 93 e4 03 	sts	0x03E4, r25
    131e:	a0 93 e5 03 	sts	0x03E5, r26
    1322:	b0 93 e6 03 	sts	0x03E6, r27
	tuningData.desiredAngle = -8;
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e0       	ldi	r26, 0x00	; 0
    132c:	b1 ec       	ldi	r27, 0xC1	; 193
    132e:	80 93 eb 03 	sts	0x03EB, r24
    1332:	90 93 ec 03 	sts	0x03EC, r25
    1336:	a0 93 ed 03 	sts	0x03ED, r26
    133a:	b0 93 ee 03 	sts	0x03EE, r27
	tuningData.spin = 0;
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	dc 01       	movw	r26, r24
    1344:	80 93 ef 03 	sts	0x03EF, r24
    1348:	90 93 f0 03 	sts	0x03F0, r25
    134c:	a0 93 f1 03 	sts	0x03F1, r26
    1350:	b0 93 f2 03 	sts	0x03F2, r27
	tuningData.safteyLimit = 3;
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a0 e4       	ldi	r26, 0x40	; 64
    135a:	b0 e4       	ldi	r27, 0x40	; 64
    135c:	80 93 f3 03 	sts	0x03F3, r24
    1360:	90 93 f4 03 	sts	0x03F4, r25
    1364:	a0 93 f5 03 	sts	0x03F5, r26
    1368:	b0 93 f6 03 	sts	0x03F6, r27
	
	// print your local IP address:
	Serial.print("My IP address: ");
    136c:	8e ee       	ldi	r24, 0xEE	; 238
    136e:	96 e0       	ldi	r25, 0x06	; 6
    1370:	60 e9       	ldi	r22, 0x90	; 144
    1372:	72 e0       	ldi	r23, 0x02	; 2
    1374:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
    1378:	8e 01       	movw	r16, r28
    137a:	0d 5f       	subi	r16, 0xFD	; 253
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
//SerialInterface beagleComm;
UdpComms udpComm;
TuningDataSection tuningData;
RslModelSection rsl;

void setup() {
    137e:	0f 2e       	mov	r0, r31
    1380:	f7 e0       	ldi	r31, 0x07	; 7
    1382:	ef 2e       	mov	r14, r31
    1384:	ff 24       	eor	r15, r15
    1386:	f0 2d       	mov	r31, r0
    1388:	ec 0e       	add	r14, r28
    138a:	fd 1e       	adc	r15, r29
	
	// print your local IP address:
	Serial.print("My IP address: ");
	for (byte i = 0; i < 4; i++) {
		// print the value of each byte of the IP address:
		Serial.print(Ethernet.localIP()[i], DEC);
    138c:	0f 2e       	mov	r0, r31
    138e:	ff e5       	ldi	r31, 0x5F	; 95
    1390:	af 2e       	mov	r10, r31
    1392:	f6 e0       	ldi	r31, 0x06	; 6
    1394:	bf 2e       	mov	r11, r31
    1396:	f0 2d       	mov	r31, r0
    1398:	0f 2e       	mov	r0, r31
    139a:	fe ee       	ldi	r31, 0xEE	; 238
    139c:	cf 2e       	mov	r12, r31
    139e:	f6 e0       	ldi	r31, 0x06	; 6
    13a0:	df 2e       	mov	r13, r31
    13a2:	f0 2d       	mov	r31, r0
		Serial.print(".");
    13a4:	0f 2e       	mov	r0, r31
    13a6:	f0 ea       	ldi	r31, 0xA0	; 160
    13a8:	8f 2e       	mov	r8, r31
    13aa:	f2 e0       	ldi	r31, 0x02	; 2
    13ac:	9f 2e       	mov	r9, r31
    13ae:	f0 2d       	mov	r31, r0
	
	// print your local IP address:
	Serial.print("My IP address: ");
	for (byte i = 0; i < 4; i++) {
		// print the value of each byte of the IP address:
		Serial.print(Ethernet.localIP()[i], DEC);
    13b0:	ce 01       	movw	r24, r28
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	b5 01       	movw	r22, r10
    13b6:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN13EthernetClass7localIPEv>
    13ba:	f8 01       	movw	r30, r16
    13bc:	61 91       	ld	r22, Z+
    13be:	8f 01       	movw	r16, r30
    13c0:	c6 01       	movw	r24, r12
    13c2:	4a e0       	ldi	r20, 0x0A	; 10
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	0e 94 51 20 	call	0x40a2	; 0x40a2 <_ZN5Print5printEhi>
		Serial.print(".");
    13ca:	c6 01       	movw	r24, r12
    13cc:	b4 01       	movw	r22, r8
    13ce:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
	tuningData.spin = 0;
	tuningData.safteyLimit = 3;
	
	// print your local IP address:
	Serial.print("My IP address: ");
	for (byte i = 0; i < 4; i++) {
    13d2:	0e 15       	cp	r16, r14
    13d4:	1f 05       	cpc	r17, r15
    13d6:	61 f7       	brne	.-40     	; 0x13b0 <setup+0x1a4>
		// print the value of each byte of the IP address:
		Serial.print(Ethernet.localIP()[i], DEC);
		Serial.print(".");
	}
	Serial.println();
    13d8:	0e ee       	ldi	r16, 0xEE	; 238
    13da:	16 e0       	ldi	r17, 0x06	; 6
    13dc:	c8 01       	movw	r24, r16
    13de:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_ZN5Print7printlnEv>
	
	calibrate(2000, 200);
    13e2:	80 ed       	ldi	r24, 0xD0	; 208
    13e4:	97 e0       	ldi	r25, 0x07	; 7
    13e6:	68 ec       	ldi	r22, 0xC8	; 200
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	0e 94 b7 08 	call	0x116e	; 0x116e <_Z9calibrateii>
	
	right.attach(RIGHT_MOTOR);
    13ee:	83 ee       	ldi	r24, 0xE3	; 227
    13f0:	95 e0       	ldi	r25, 0x05	; 5
    13f2:	62 e0       	ldi	r22, 0x02	; 2
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	0e 94 01 26 	call	0x4c02	; 0x4c02 <_ZN5Servo6attachEi>
	left.attach(LEFT_MOTOR);
    13fa:	86 ee       	ldi	r24, 0xE6	; 230
    13fc:	95 e0       	ldi	r25, 0x05	; 5
    13fe:	63 e0       	ldi	r22, 0x03	; 3
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	0e 94 01 26 	call	0x4c02	; 0x4c02 <_ZN5Servo6attachEi>

	Serial.println("Ready.");
    1406:	c8 01       	movw	r24, r16
    1408:	62 ea       	ldi	r22, 0xA2	; 162
    140a:	72 e0       	ldi	r23, 0x02	; 2
    140c:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <_ZN5Print7printlnEPKc>
	writeLed(false);
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	0e 94 69 05 	call	0xad2	; 0xad2 <_Z8writeLedb>
}
    1416:	2c 96       	adiw	r28, 0x0c	; 12
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	df 90       	pop	r13
    1430:	cf 90       	pop	r12
    1432:	bf 90       	pop	r11
    1434:	af 90       	pop	r10
    1436:	9f 90       	pop	r9
    1438:	8f 90       	pop	r8
    143a:	08 95       	ret

0000143c <_GLOBAL__sub_I_TiltGyro>:
	TiltGyro.endCalibrate();

	Serial.println("Calibration complete!");
	Serial.print("GyroCenter:");
	Serial.print(TiltGyro.center);
    143c:	cf 92       	push	r12
    143e:	df 92       	push	r13
    1440:	ef 92       	push	r14
    1442:	ff 92       	push	r15
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    144c:	8d e4       	ldi	r24, 0x4D	; 77
    144e:	96 e0       	ldi	r25, 0x06	; 6
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	00 e0       	ldi	r16, 0x00	; 0
    1458:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <_ZN9IPAddressC1Ehhhh>
#define RIGHT_MOTOR 2
#define RIGHT_INVERT 1
#define LEFT_INVERT -1


Gyro TiltGyro(9, 1);
    145c:	cf e2       	ldi	r28, 0x2F	; 47
    145e:	d6 e0       	ldi	r29, 0x06	; 6
    1460:	ce 01       	movw	r24, r28
    1462:	69 e0       	ldi	r22, 0x09	; 9
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e8       	ldi	r20, 0x80	; 128
    146c:	5f e3       	ldi	r21, 0x3F	; 63
    146e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN4GyroC1Eid>

#include "Accelerometer.h"

class AnalogAccelerometer : public Accelerometer {
	public:
		AnalogAccelerometer(int pin, int center, boolean invert){
    1472:	23 eb       	ldi	r18, 0xB3	; 179
    1474:	32 e0       	ldi	r19, 0x02	; 2
    1476:	30 93 25 06 	sts	0x0625, r19
    147a:	20 93 24 06 	sts	0x0624, r18
			this->pin = pin;
    147e:	8c e0       	ldi	r24, 0x0C	; 12
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	90 93 2e 06 	sts	0x062E, r25
    1486:	80 93 2d 06 	sts	0x062D, r24
class Accelerometer
{
	public:
		
	void init(int center, bool invert){
		this->center = center;
    148a:	84 ef       	ldi	r24, 0xF4	; 244
    148c:	91 e0       	ldi	r25, 0x01	; 1
    148e:	90 93 28 06 	sts	0x0628, r25
    1492:	80 93 27 06 	sts	0x0627, r24
		this->invert = invert;
    1496:	41 e0       	ldi	r20, 0x01	; 1
    1498:	40 93 26 06 	sts	0x0626, r20

#include "Accelerometer.h"

class AnalogAccelerometer : public Accelerometer {
	public:
		AnalogAccelerometer(int pin, int center, boolean invert){
    149c:	30 93 1a 06 	sts	0x061A, r19
    14a0:	20 93 19 06 	sts	0x0619, r18
			this->pin = pin;
    14a4:	2d e0       	ldi	r18, 0x0D	; 13
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	30 93 23 06 	sts	0x0623, r19
    14ac:	20 93 22 06 	sts	0x0622, r18
class Accelerometer
{
	public:
		
	void init(int center, bool invert){
		this->center = center;
    14b0:	90 93 1d 06 	sts	0x061D, r25
    14b4:	80 93 1c 06 	sts	0x061C, r24
		this->invert = invert;
    14b8:	40 93 1b 06 	sts	0x061B, r20
#define ANGLE_PRINT_INTERVAL 500
class SimpleAngleThing
{
	public:
	SimpleAngleThing(Gyro *gyro, Accelerometer *xAccel, Accelerometer *yAccel, double gyroWeight, bool updateSensors){
		this->gyro = gyro;
    14bc:	d0 93 06 06 	sts	0x0606, r29
    14c0:	c0 93 05 06 	sts	0x0605, r28
		this->xAccel = xAccel;
    14c4:	89 e1       	ldi	r24, 0x19	; 25
    14c6:	96 e0       	ldi	r25, 0x06	; 6
    14c8:	90 93 08 06 	sts	0x0608, r25
    14cc:	80 93 07 06 	sts	0x0607, r24
		this->yAccel = yAccel;
    14d0:	84 e2       	ldi	r24, 0x24	; 36
    14d2:	96 e0       	ldi	r25, 0x06	; 6
    14d4:	90 93 0a 06 	sts	0x060A, r25
    14d8:	80 93 09 06 	sts	0x0609, r24
		this->gyroWeight = gyroWeight;
    14dc:	88 e4       	ldi	r24, 0x48	; 72
    14de:	91 ee       	ldi	r25, 0xE1	; 225
    14e0:	aa e7       	ldi	r26, 0x7A	; 122
    14e2:	bf e3       	ldi	r27, 0x3F	; 63
    14e4:	80 93 0b 06 	sts	0x060B, r24
    14e8:	90 93 0c 06 	sts	0x060C, r25
    14ec:	a0 93 0d 06 	sts	0x060D, r26
    14f0:	b0 93 0e 06 	sts	0x060E, r27
		this->accelWeight = 1 - gyroWeight;
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	97 ed       	ldi	r25, 0xD7	; 215
    14f8:	a3 ea       	ldi	r26, 0xA3	; 163
    14fa:	bc e3       	ldi	r27, 0x3C	; 60
    14fc:	80 93 0f 06 	sts	0x060F, r24
    1500:	90 93 10 06 	sts	0x0610, r25
    1504:	a0 93 11 06 	sts	0x0611, r26
    1508:	b0 93 12 06 	sts	0x0612, r27
		this->updateSensors = updateSensors;
    150c:	40 93 13 06 	sts	0x0613, r20
		firstAngleUpdate = true;
    1510:	40 93 14 06 	sts	0x0614, r20
AnalogAccelerometer UpAccel(12, 500, true);
AnalogAccelerometer ForwardAccel(13, 500, true);
SimpleAngleThing AngleCalc(&TiltGyro, &ForwardAccel, &UpAccel, 0.98, true);

Encoder leftEnc (21, 18);
    1514:	85 ef       	ldi	r24, 0xF5	; 245
    1516:	95 e0       	ldi	r25, 0x05	; 5
    1518:	65 e1       	ldi	r22, 0x15	; 21
    151a:	42 e1       	ldi	r20, 0x12	; 18
    151c:	0e 94 9b 03 	call	0x736	; 0x736 <_ZN7EncoderC1Ehh>
Encoder rightEnc (20,17);
    1520:	89 ee       	ldi	r24, 0xE9	; 233
    1522:	95 e0       	ldi	r25, 0x05	; 5
    1524:	64 e1       	ldi	r22, 0x14	; 20
    1526:	41 e1       	ldi	r20, 0x11	; 17
    1528:	0e 94 9b 03 	call	0x736	; 0x736 <_ZN7EncoderC1Ehh>

Servo left;
    152c:	86 ee       	ldi	r24, 0xE6	; 230
    152e:	95 e0       	ldi	r25, 0x05	; 5
    1530:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <_ZN5ServoC1Ev>
Servo right;
    1534:	83 ee       	ldi	r24, 0xE3	; 227
    1536:	95 e0       	ldi	r25, 0x05	; 5
    1538:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <_ZN5ServoC1Ev>
#define LEFT_CENTER 1500
#define RIGHT_CENTER 1490
#define PLUSE_DEADBAND 80

//PID BalancePID(-40, -2, -25);
PID BalancePID(0, 0, 0);
    153c:	8b ec       	ldi	r24, 0xCB	; 203
    153e:	95 e0       	ldi	r25, 0x05	; 5
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	ba 01       	movw	r22, r20
    1546:	8a 01       	movw	r16, r20
    1548:	9b 01       	movw	r18, r22
    154a:	6a 01       	movw	r12, r20
    154c:	7b 01       	movw	r14, r22
    154e:	0e 94 92 0b 	call	0x1724	; 0x1724 <_ZN3PIDC1Eddd>
#include <Ethernet\EthernetUdp.h>
#include <RobotModel\RobotModel.h>

class UdpComms {
	public:
UdpComms(){}
    1552:	ce ef       	ldi	r28, 0xFE	; 254
    1554:	d3 e0       	ldi	r29, 0x03	; 3
    1556:	ce 01       	movw	r24, r28
    1558:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN9IPAddressC1Ev>
    155c:	ce 01       	movw	r24, r28
    155e:	0a 96       	adiw	r24, 0x0a	; 10
    1560:	0e 94 81 40 	call	0x8102	; 0x8102 <_ZN10RobotModelC1Ev>
    1564:	ce 01       	movw	r24, r28
    1566:	4e 96       	adiw	r24, 0x1e	; 30
    1568:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN11EthernetUDPC1Ev>
#include <Utils\ByteReader.h>
#include <RobotModel\RobotModelSection.h>

class TuningDataSection : public RobotModelSection{
	public:
	TuningDataSection(){
    156c:	85 ed       	ldi	r24, 0xD5	; 213
    156e:	93 e0       	ldi	r25, 0x03	; 3
    1570:	0e 94 8e 42 	call	0x851c	; 0x851c <_ZN17RobotModelSectionC1Ev>
    1574:	89 eb       	ldi	r24, 0xB9	; 185
    1576:	92 e0       	ldi	r25, 0x02	; 2
    1578:	90 93 d6 03 	sts	0x03D6, r25
    157c:	80 93 d5 03 	sts	0x03D5, r24
		this->sectionId = 255;
    1580:	8f ef       	ldi	r24, 0xFF	; 255
    1582:	80 93 d7 03 	sts	0x03D7, r24

//SerialInterface beagleComm;
UdpComms udpComm;
TuningDataSection tuningData;
RslModelSection rsl;
    1586:	8c ec       	ldi	r24, 0xCC	; 204
    1588:	93 e0       	ldi	r25, 0x03	; 3
    158a:	0e 94 9e 42 	call	0x853c	; 0x853c <_ZN15RslModelSectionC1Ev>
	TiltGyro.endCalibrate();

	Serial.println("Calibration complete!");
	Serial.print("GyroCenter:");
	Serial.print(TiltGyro.center);
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	ff 90       	pop	r15
    1598:	ef 90       	pop	r14
    159a:	df 90       	pop	r13
    159c:	cf 90       	pop	r12
    159e:	08 95       	ret

000015a0 <main>:
 */ 
#include "Arduino.h"
#include "BalBot.h"
int main(void)
{
	init();
    15a0:	0e 94 8f 2a 	call	0x551e	; 0x551e <init>

	/*#if defined(USBCON)
	USBDevice.attach();
	#endif*/
	
	setup();
    15a4:	0e 94 06 09 	call	0x120c	; 0x120c <setup>
	
	for (;;) {
		loop();
    15a8:	0e 94 21 07 	call	0xe42	; 0xe42 <loop>
    15ac:	fd cf       	rjmp	.-6      	; 0x15a8 <main+0x8>

000015ae <_ZN4GyroC1Eid>:
*  Author: EHaskins
*/
#include <Arduino.h>
#include "Gyro.h"

Gyro::Gyro(int pin, double degreesPerSecPerInput){
    15ae:	fc 01       	movw	r30, r24
	this->pin = pin;
    15b0:	75 87       	std	Z+13, r23	; 0x0d
    15b2:	64 87       	std	Z+12, r22	; 0x0c
	this->center = center;
	this->degreesPerSecPerInput = degreesPerSecPerInput;
    15b4:	20 8b       	std	Z+16, r18	; 0x10
    15b6:	31 8b       	std	Z+17, r19	; 0x11
    15b8:	42 8b       	std	Z+18, r20	; 0x12
    15ba:	53 8b       	std	Z+19, r21	; 0x13
}
    15bc:	08 95       	ret

000015be <_ZN4Gyro6updateEv>:
double Gyro::update(){
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	ec 01       	movw	r28, r24
	long now = micros();
    15cc:	0e 94 32 2a 	call	0x5464	; 0x5464 <micros>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
	long elasped = now - lastMicros;
    15d4:	4a 8d       	ldd	r20, Y+26	; 0x1a
    15d6:	5b 8d       	ldd	r21, Y+27	; 0x1b
    15d8:	6c 8d       	ldd	r22, Y+28	; 0x1c
    15da:	7d 8d       	ldd	r23, Y+29	; 0x1d
    15dc:	8c 01       	movw	r16, r24
    15de:	9d 01       	movw	r18, r26
    15e0:	04 1b       	sub	r16, r20
    15e2:	15 0b       	sbc	r17, r21
    15e4:	26 0b       	sbc	r18, r22
    15e6:	37 0b       	sbc	r19, r23
	lastMicros = now;
    15e8:	8a 8f       	std	Y+26, r24	; 0x1a
    15ea:	9b 8f       	std	Y+27, r25	; 0x1b
    15ec:	ac 8f       	std	Y+28, r26	; 0x1c
    15ee:	bd 8f       	std	Y+29, r27	; 0x1d
	
	elapsedSeconds = (double)elasped / 1000000;
    15f0:	c9 01       	movw	r24, r18
    15f2:	b8 01       	movw	r22, r16
    15f4:	0e 94 d4 49 	call	0x93a8	; 0x93a8 <__floatsisf>
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	34 e2       	ldi	r19, 0x24	; 36
    15fc:	44 e7       	ldi	r20, 0x74	; 116
    15fe:	59 e4       	ldi	r21, 0x49	; 73
    1600:	0e 94 39 49 	call	0x9272	; 0x9272 <__divsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	88 87       	std	Y+8, r24	; 0x08
    160a:	99 87       	std	Y+9, r25	; 0x09
    160c:	aa 87       	std	Y+10, r26	; 0x0a
    160e:	bb 87       	std	Y+11, r27	; 0x0b
	
	double val = analogRead(pin);
    1610:	8c 85       	ldd	r24, Y+12	; 0x0c
    1612:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <analogRead>
    1616:	9c 01       	movw	r18, r24
    1618:	b9 01       	movw	r22, r18
    161a:	88 27       	eor	r24, r24
    161c:	77 fd       	sbrc	r23, 7
    161e:	80 95       	com	r24
    1620:	98 2f       	mov	r25, r24
    1622:	0e 94 d4 49 	call	0x93a8	; 0x93a8 <__floatsisf>
    1626:	16 2f       	mov	r17, r22
    1628:	07 2f       	mov	r16, r23
    162a:	f8 2e       	mov	r15, r24
    162c:	e9 2e       	mov	r14, r25
	val -= center;
    162e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1630:	7f 85       	ldd	r23, Y+15	; 0x0f
    1632:	88 27       	eor	r24, r24
    1634:	77 fd       	sbrc	r23, 7
    1636:	80 95       	com	r24
    1638:	98 2f       	mov	r25, r24
    163a:	0e 94 d4 49 	call	0x93a8	; 0x93a8 <__floatsisf>
    163e:	9b 01       	movw	r18, r22
    1640:	ac 01       	movw	r20, r24
    1642:	81 2f       	mov	r24, r17
    1644:	90 2f       	mov	r25, r16
    1646:	af 2d       	mov	r26, r15
    1648:	be 2d       	mov	r27, r14
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 6e 48 	call	0x90dc	; 0x90dc <__subsf3>
	
	rate = val * degreesPerSecPerInput;
    1652:	28 89       	ldd	r18, Y+16	; 0x10
    1654:	39 89       	ldd	r19, Y+17	; 0x11
    1656:	4a 89       	ldd	r20, Y+18	; 0x12
    1658:	5b 89       	ldd	r21, Y+19	; 0x13
    165a:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__mulsf3>
    165e:	26 2f       	mov	r18, r22
    1660:	37 2f       	mov	r19, r23
    1662:	f8 2f       	mov	r31, r24
    1664:	e9 2f       	mov	r30, r25
    1666:	46 2f       	mov	r20, r22
    1668:	57 2f       	mov	r21, r23
    166a:	68 2f       	mov	r22, r24
    166c:	79 2f       	mov	r23, r25
    166e:	48 83       	st	Y, r20
    1670:	59 83       	std	Y+1, r21	; 0x01
    1672:	6a 83       	std	Y+2, r22	; 0x02
    1674:	7b 83       	std	Y+3, r23	; 0x03
	deltaAngle = rate * elapsedSeconds;
    1676:	82 2f       	mov	r24, r18
    1678:	93 2f       	mov	r25, r19
    167a:	af 2f       	mov	r26, r31
    167c:	be 2f       	mov	r27, r30
    167e:	bc 01       	movw	r22, r24
    1680:	cd 01       	movw	r24, r26
    1682:	28 85       	ldd	r18, Y+8	; 0x08
    1684:	39 85       	ldd	r19, Y+9	; 0x09
    1686:	4a 85       	ldd	r20, Y+10	; 0x0a
    1688:	5b 85       	ldd	r21, Y+11	; 0x0b
    168a:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	8c 83       	std	Y+4, r24	; 0x04
    1694:	9d 83       	std	Y+5, r25	; 0x05
    1696:	ae 83       	std	Y+6, r26	; 0x06
    1698:	bf 83       	std	Y+7, r27	; 0x07
}
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	08 95       	ret

000016a8 <_ZN4Gyro9calibrateEv>:

void Gyro::calibrate(){
    16a8:	cf 92       	push	r12
    16aa:	df 92       	push	r13
    16ac:	ef 92       	push	r14
    16ae:	ff 92       	push	r15
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	ec 01       	movw	r28, r24
	calTotal += analogRead(pin);
    16b6:	cc 88       	ldd	r12, Y+20	; 0x14
    16b8:	dd 88       	ldd	r13, Y+21	; 0x15
    16ba:	ee 88       	ldd	r14, Y+22	; 0x16
    16bc:	ff 88       	ldd	r15, Y+23	; 0x17
    16be:	8c 85       	ldd	r24, Y+12	; 0x0c
    16c0:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <analogRead>
    16c4:	aa 27       	eor	r26, r26
    16c6:	97 fd       	sbrc	r25, 7
    16c8:	a0 95       	com	r26
    16ca:	ba 2f       	mov	r27, r26
    16cc:	c8 0e       	add	r12, r24
    16ce:	d9 1e       	adc	r13, r25
    16d0:	ea 1e       	adc	r14, r26
    16d2:	fb 1e       	adc	r15, r27
    16d4:	cc 8a       	std	Y+20, r12	; 0x14
    16d6:	dd 8a       	std	Y+21, r13	; 0x15
    16d8:	ee 8a       	std	Y+22, r14	; 0x16
    16da:	ff 8a       	std	Y+23, r15	; 0x17
	calCount++;
    16dc:	88 8d       	ldd	r24, Y+24	; 0x18
    16de:	99 8d       	ldd	r25, Y+25	; 0x19
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	99 8f       	std	Y+25, r25	; 0x19
    16e4:	88 8f       	std	Y+24, r24	; 0x18
}
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	df 90       	pop	r13
    16f0:	cf 90       	pop	r12
    16f2:	08 95       	ret

000016f4 <_ZN4Gyro12endCalibrateEv>:
void Gyro::endCalibrate(){
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ec 01       	movw	r28, r24
	center = calTotal / calCount;
    16fa:	28 8d       	ldd	r18, Y+24	; 0x18
    16fc:	39 8d       	ldd	r19, Y+25	; 0x19
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	6c 89       	ldd	r22, Y+20	; 0x14
    1704:	7d 89       	ldd	r23, Y+21	; 0x15
    1706:	8e 89       	ldd	r24, Y+22	; 0x16
    1708:	9f 89       	ldd	r25, Y+23	; 0x17
    170a:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    170e:	3f 87       	std	Y+15, r19	; 0x0f
    1710:	2e 87       	std	Y+14, r18	; 0x0e
	
	calTotal = 0;
    1712:	1c 8a       	std	Y+20, r1	; 0x14
    1714:	1d 8a       	std	Y+21, r1	; 0x15
    1716:	1e 8a       	std	Y+22, r1	; 0x16
    1718:	1f 8a       	std	Y+23, r1	; 0x17
	calCount = 0;
    171a:	19 8e       	std	Y+25, r1	; 0x19
    171c:	18 8e       	std	Y+24, r1	; 0x18
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	08 95       	ret

00001724 <_ZN3PIDC1Eddd>:
* Created: 10/5/2012 11:59:57 PM
*  Author: EHaskins
*/
#include "PID.h"

PID::PID(double P, double I, double D){
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	fc 01       	movw	r30, r24
	this->P = P;
    1732:	40 83       	st	Z, r20
    1734:	51 83       	std	Z+1, r21	; 0x01
    1736:	62 83       	std	Z+2, r22	; 0x02
    1738:	73 83       	std	Z+3, r23	; 0x03
	this->I = I;
    173a:	04 83       	std	Z+4, r16	; 0x04
    173c:	15 83       	std	Z+5, r17	; 0x05
    173e:	26 83       	std	Z+6, r18	; 0x06
    1740:	37 83       	std	Z+7, r19	; 0x07
	this->D = D;
    1742:	c0 86       	std	Z+8, r12	; 0x08
    1744:	d1 86       	std	Z+9, r13	; 0x09
    1746:	e2 86       	std	Z+10, r14	; 0x0a
    1748:	f3 86       	std	Z+11, r15	; 0x0b
}
    174a:	1f 91       	pop	r17
    174c:	0f 91       	pop	r16
    174e:	ff 90       	pop	r15
    1750:	ef 90       	pop	r14
    1752:	df 90       	pop	r13
    1754:	cf 90       	pop	r12
    1756:	08 95       	ret

00001758 <_ZN3PID6updateEddd>:
double PID::update(double current, double desired, double velocity){
    1758:	4f 92       	push	r4
    175a:	5f 92       	push	r5
    175c:	6f 92       	push	r6
    175e:	7f 92       	push	r7
    1760:	9f 92       	push	r9
    1762:	af 92       	push	r10
    1764:	bf 92       	push	r11
    1766:	cf 92       	push	r12
    1768:	df 92       	push	r13
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	00 d0       	rcall	.+0      	; 0x1778 <_ZN3PID6updateEddd+0x20>
    1778:	0f 92       	push	r0
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	5c 01       	movw	r10, r24
    1780:	2a 01       	movw	r4, r20
    1782:	3b 01       	movw	r6, r22
    1784:	c9 01       	movw	r24, r18
    1786:	b8 01       	movw	r22, r16
    1788:	c9 82       	std	Y+1, r12	; 0x01
    178a:	da 82       	std	Y+2, r13	; 0x02
    178c:	eb 82       	std	Y+3, r14	; 0x03
    178e:	fc 82       	std	Y+4, r15	; 0x04
	double error = desired - current;
    1790:	a3 01       	movw	r20, r6
    1792:	92 01       	movw	r18, r4
    1794:	0e 94 6e 48 	call	0x90dc	; 0x90dc <__subsf3>
    1798:	16 2f       	mov	r17, r22
    179a:	97 2e       	mov	r9, r23
    179c:	c8 2e       	mov	r12, r24
    179e:	09 2f       	mov	r16, r25
	
	double output = 0.0;
	
	output = error * P;
    17a0:	86 2f       	mov	r24, r22
    17a2:	99 2d       	mov	r25, r9
    17a4:	ac 2d       	mov	r26, r12
    17a6:	b0 2f       	mov	r27, r16
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	d5 01       	movw	r26, r10
    17ae:	2d 91       	ld	r18, X+
    17b0:	3d 91       	ld	r19, X+
    17b2:	4d 91       	ld	r20, X+
    17b4:	5c 91       	ld	r21, X
    17b6:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__mulsf3>
    17ba:	46 2e       	mov	r4, r22
    17bc:	f7 2e       	mov	r15, r23
    17be:	e8 2e       	mov	r14, r24
    17c0:	d9 2e       	mov	r13, r25
	iTotal += error * I;
    17c2:	81 2f       	mov	r24, r17
    17c4:	99 2d       	mov	r25, r9
    17c6:	ac 2d       	mov	r26, r12
    17c8:	b0 2f       	mov	r27, r16
    17ca:	bc 01       	movw	r22, r24
    17cc:	cd 01       	movw	r24, r26
    17ce:	f5 01       	movw	r30, r10
    17d0:	24 81       	ldd	r18, Z+4	; 0x04
    17d2:	35 81       	ldd	r19, Z+5	; 0x05
    17d4:	46 81       	ldd	r20, Z+6	; 0x06
    17d6:	57 81       	ldd	r21, Z+7	; 0x07
    17d8:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__mulsf3>
    17dc:	d5 01       	movw	r26, r10
    17de:	1c 96       	adiw	r26, 0x0c	; 12
    17e0:	2d 91       	ld	r18, X+
    17e2:	3d 91       	ld	r19, X+
    17e4:	4d 91       	ld	r20, X+
    17e6:	5c 91       	ld	r21, X
    17e8:	1f 97       	sbiw	r26, 0x0f	; 15
    17ea:	0e 94 6f 48 	call	0x90de	; 0x90de <__addsf3>
    17ee:	f6 2f       	mov	r31, r22
    17f0:	e7 2f       	mov	r30, r23
    17f2:	38 2f       	mov	r19, r24
    17f4:	29 2f       	mov	r18, r25
    17f6:	98 2f       	mov	r25, r24
    17f8:	4f 2f       	mov	r20, r31
    17fa:	5e 2f       	mov	r21, r30
    17fc:	69 2f       	mov	r22, r25
    17fe:	72 2f       	mov	r23, r18
    1800:	d5 01       	movw	r26, r10
    1802:	1c 96       	adiw	r26, 0x0c	; 12
    1804:	4d 93       	st	X+, r20
    1806:	5d 93       	st	X+, r21
    1808:	6d 93       	st	X+, r22
    180a:	7c 93       	st	X, r23
    180c:	1f 97       	sbiw	r26, 0x0f	; 15
	output += iTotal;
    180e:	44 2d       	mov	r20, r4
    1810:	5f 2d       	mov	r21, r15
    1812:	6e 2d       	mov	r22, r14
    1814:	7d 2d       	mov	r23, r13
    1816:	cb 01       	movw	r24, r22
    1818:	ba 01       	movw	r22, r20
    181a:	42 2f       	mov	r20, r18
    181c:	0f 2f       	mov	r16, r31
    181e:	1e 2f       	mov	r17, r30
    1820:	23 2f       	mov	r18, r19
    1822:	34 2f       	mov	r19, r20
    1824:	a9 01       	movw	r20, r18
    1826:	98 01       	movw	r18, r16
    1828:	0e 94 6f 48 	call	0x90de	; 0x90de <__addsf3>
    182c:	e6 2e       	mov	r14, r22
    182e:	f7 2e       	mov	r15, r23
    1830:	18 2f       	mov	r17, r24
    1832:	09 2f       	mov	r16, r25
	output += velocity * D;
    1834:	69 81       	ldd	r22, Y+1	; 0x01
    1836:	7a 81       	ldd	r23, Y+2	; 0x02
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	f5 01       	movw	r30, r10
    183e:	20 85       	ldd	r18, Z+8	; 0x08
    1840:	31 85       	ldd	r19, Z+9	; 0x09
    1842:	42 85       	ldd	r20, Z+10	; 0x0a
    1844:	53 85       	ldd	r21, Z+11	; 0x0b
    1846:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__mulsf3>
    184a:	51 2f       	mov	r21, r17
    184c:	40 2f       	mov	r20, r16
    184e:	0e 2d       	mov	r16, r14
    1850:	1f 2d       	mov	r17, r15
    1852:	25 2f       	mov	r18, r21
    1854:	34 2f       	mov	r19, r20
    1856:	a9 01       	movw	r20, r18
    1858:	98 01       	movw	r18, r16
    185a:	0e 94 6f 48 	call	0x90de	; 0x90de <__addsf3>
	
	return output;
    185e:	46 2f       	mov	r20, r22
    1860:	57 2f       	mov	r21, r23
    1862:	68 2f       	mov	r22, r24
    1864:	79 2f       	mov	r23, r25
    1866:	cb 01       	movw	r24, r22
    1868:	ba 01       	movw	r22, r20
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	ff 90       	pop	r15
    187c:	ef 90       	pop	r14
    187e:	df 90       	pop	r13
    1880:	cf 90       	pop	r12
    1882:	bf 90       	pop	r11
    1884:	af 90       	pop	r10
    1886:	9f 90       	pop	r9
    1888:	7f 90       	pop	r7
    188a:	6f 90       	pop	r6
    188c:	5f 90       	pop	r5
    188e:	4f 90       	pop	r4
    1890:	08 95       	ret

00001892 <_Z8deadbandii>:
 *  Created on: Apr 4, 2011
 *      Author: EHaskins
 */

int deadband(int value, int deadband){
	if (value < 127-deadband && value > -128+deadband){
    1892:	2f e7       	ldi	r18, 0x7F	; 127
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	26 1b       	sub	r18, r22
    1898:	37 0b       	sbc	r19, r23
    189a:	82 17       	cp	r24, r18
    189c:	93 07       	cpc	r25, r19
    189e:	c4 f4       	brge	.+48     	; 0x18d0 <_Z8deadbandii+0x3e>
    18a0:	9b 01       	movw	r18, r22
    18a2:	20 58       	subi	r18, 0x80	; 128
    18a4:	30 40       	sbci	r19, 0x00	; 0
    18a6:	28 17       	cp	r18, r24
    18a8:	39 07       	cpc	r19, r25
    18aa:	94 f4       	brge	.+36     	; 0x18d0 <_Z8deadbandii+0x3e>
		if (value > deadband){
    18ac:	68 17       	cp	r22, r24
    18ae:	79 07       	cpc	r23, r25
    18b0:	1c f4       	brge	.+6      	; 0x18b8 <_Z8deadbandii+0x26>
			value -= deadband;
    18b2:	86 1b       	sub	r24, r22
    18b4:	97 0b       	sbc	r25, r23
    18b6:	08 95       	ret
		}
		else if (value < -deadband){
    18b8:	22 27       	eor	r18, r18
    18ba:	33 27       	eor	r19, r19
    18bc:	26 1b       	sub	r18, r22
    18be:	37 0b       	sbc	r19, r23
    18c0:	82 17       	cp	r24, r18
    18c2:	93 07       	cpc	r25, r19
    18c4:	1c f4       	brge	.+6      	; 0x18cc <_Z8deadbandii+0x3a>
			value += deadband;
    18c6:	86 0f       	add	r24, r22
    18c8:	97 1f       	adc	r25, r23
    18ca:	08 95       	ret
		}
		else{
			value = 0;
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return value;
}
    18d0:	08 95       	ret

000018d2 <_Z5limitiii>:

int limit(int value, int min, int max){
    18d2:	9c 01       	movw	r18, r24
	if (value > max)
    18d4:	48 17       	cp	r20, r24
    18d6:	59 07       	cpc	r21, r25
    18d8:	3c f0       	brlt	.+14     	; 0x18e8 <_Z5limitiii+0x16>
    18da:	86 2f       	mov	r24, r22
    18dc:	97 2f       	mov	r25, r23
    18de:	82 17       	cp	r24, r18
    18e0:	93 07       	cpc	r25, r19
    18e2:	1c f4       	brge	.+6      	; 0x18ea <_Z5limitiii+0x18>
    18e4:	c9 01       	movw	r24, r18
    18e6:	08 95       	ret
		value = max;
    18e8:	ca 01       	movw	r24, r20
	else if (value < min)
		value = min;
	return value;
}
    18ea:	08 95       	ret

000018ec <_Z5limitfff>:

float limit(float value, float min, float max){
    18ec:	4f 92       	push	r4
    18ee:	5f 92       	push	r5
    18f0:	6f 92       	push	r6
    18f2:	7f 92       	push	r7
    18f4:	8f 92       	push	r8
    18f6:	9f 92       	push	r9
    18f8:	af 92       	push	r10
    18fa:	bf 92       	push	r11
    18fc:	cf 92       	push	r12
    18fe:	df 92       	push	r13
    1900:	ef 92       	push	r14
    1902:	ff 92       	push	r15
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	b6 2e       	mov	r11, r22
    190e:	a7 2e       	mov	r10, r23
    1910:	98 2e       	mov	r9, r24
    1912:	89 2e       	mov	r8, r25
    1914:	72 2e       	mov	r7, r18
    1916:	63 2e       	mov	r6, r19
    1918:	54 2e       	mov	r5, r20
    191a:	45 2e       	mov	r4, r21
    191c:	de 2d       	mov	r29, r14
    191e:	cf 2d       	mov	r28, r15
	if (value > max)
    1920:	86 2f       	mov	r24, r22
    1922:	97 2f       	mov	r25, r23
    1924:	a9 2d       	mov	r26, r9
    1926:	b8 2d       	mov	r27, r8
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	cd 2e       	mov	r12, r29
    192e:	dc 2e       	mov	r13, r28
    1930:	e0 2e       	mov	r14, r16
    1932:	f1 2e       	mov	r15, r17
    1934:	a7 01       	movw	r20, r14
    1936:	96 01       	movw	r18, r12
    1938:	0e 94 a9 4a 	call	0x9552	; 0x9552 <__gesf2>
    193c:	18 16       	cp	r1, r24
    193e:	8c f0       	brlt	.+34     	; 0x1962 <_Z5limitfff+0x76>
		value = max;
	else if (value < min)
    1940:	8b 2d       	mov	r24, r11
    1942:	9a 2d       	mov	r25, r10
    1944:	a9 2d       	mov	r26, r9
    1946:	b8 2d       	mov	r27, r8
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	07 2d       	mov	r16, r7
    194e:	16 2d       	mov	r17, r6
    1950:	25 2d       	mov	r18, r5
    1952:	34 2d       	mov	r19, r4
    1954:	a9 01       	movw	r20, r18
    1956:	98 01       	movw	r18, r16
    1958:	0e 94 35 49 	call	0x926a	; 0x926a <__cmpsf2>
    195c:	88 23       	and	r24, r24
    195e:	34 f0       	brlt	.+12     	; 0x196c <_Z5limitfff+0x80>
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <_Z5limitfff+0x88>
	return value;
}

float limit(float value, float min, float max){
	if (value > max)
		value = max;
    1962:	bd 2e       	mov	r11, r29
    1964:	ac 2e       	mov	r10, r28
    1966:	90 2e       	mov	r9, r16
    1968:	81 2e       	mov	r8, r17
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <_Z5limitfff+0x88>
	else if (value < min)
		value = min;
    196c:	b7 2c       	mov	r11, r7
    196e:	a6 2c       	mov	r10, r6
    1970:	95 2c       	mov	r9, r5
    1972:	84 2c       	mov	r8, r4
	return value;
}
    1974:	8b 2d       	mov	r24, r11
    1976:	9a 2d       	mov	r25, r10
    1978:	a9 2d       	mov	r26, r9
    197a:	b8 2d       	mov	r27, r8
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	df 90       	pop	r13
    198e:	cf 90       	pop	r12
    1990:	bf 90       	pop	r11
    1992:	af 90       	pop	r10
    1994:	9f 90       	pop	r9
    1996:	8f 90       	pop	r8
    1998:	7f 90       	pop	r7
    199a:	6f 90       	pop	r6
    199c:	5f 90       	pop	r5
    199e:	4f 90       	pop	r4
    19a0:	08 95       	ret

000019a2 <_Z14removeDeadbandfff>:

float removeDeadband(float value, float deadband, float range){
    19a2:	4f 92       	push	r4
    19a4:	5f 92       	push	r5
    19a6:	6f 92       	push	r6
    19a8:	7f 92       	push	r7
    19aa:	8f 92       	push	r8
    19ac:	9f 92       	push	r9
    19ae:	af 92       	push	r10
    19b0:	bf 92       	push	r11
    19b2:	cf 92       	push	r12
    19b4:	df 92       	push	r13
    19b6:	ef 92       	push	r14
    19b8:	ff 92       	push	r15
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	4b 01       	movw	r8, r22
    19c4:	5c 01       	movw	r10, r24
    19c6:	29 01       	movw	r4, r18
    19c8:	3a 01       	movw	r6, r20
    19ca:	67 01       	movw	r12, r14
    19cc:	78 01       	movw	r14, r16
	double output;
	double scale = (range - deadband) / range;
    19ce:	c7 01       	movw	r24, r14
    19d0:	b6 01       	movw	r22, r12
    19d2:	0e 94 6e 48 	call	0x90dc	; 0x90dc <__subsf3>
    19d6:	a7 01       	movw	r20, r14
    19d8:	96 01       	movw	r18, r12
    19da:	0e 94 39 49 	call	0x9272	; 0x9272 <__divsf3>
    19de:	c6 2e       	mov	r12, r22
    19e0:	c7 2f       	mov	r28, r23
    19e2:	d8 2f       	mov	r29, r24
    19e4:	19 2f       	mov	r17, r25

	if (value < 0)
    19e6:	c5 01       	movw	r24, r10
    19e8:	b4 01       	movw	r22, r8
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	a9 01       	movw	r20, r18
    19f0:	0e 94 35 49 	call	0x926a	; 0x926a <__cmpsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	84 f4       	brge	.+32     	; 0x1a18 <_Z14removeDeadbandfff+0x76>
		output = (value - deadband) * scale;
    19f8:	c5 01       	movw	r24, r10
    19fa:	b4 01       	movw	r22, r8
    19fc:	a3 01       	movw	r20, r6
    19fe:	92 01       	movw	r18, r4
    1a00:	0e 94 6e 48 	call	0x90dc	; 0x90dc <__subsf3>
    1a04:	41 2f       	mov	r20, r17
    1a06:	0c 2d       	mov	r16, r12
    1a08:	1c 2f       	mov	r17, r28
    1a0a:	2d 2f       	mov	r18, r29
    1a0c:	34 2f       	mov	r19, r20
    1a0e:	a9 01       	movw	r20, r18
    1a10:	98 01       	movw	r18, r16
    1a12:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__mulsf3>
    1a16:	1d c0       	rjmp	.+58     	; 0x1a52 <_Z14removeDeadbandfff+0xb0>
	else if (value > 0)
    1a18:	c5 01       	movw	r24, r10
    1a1a:	b4 01       	movw	r22, r8
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	a9 01       	movw	r20, r18
    1a22:	0e 94 a9 4a 	call	0x9552	; 0x9552 <__gesf2>
    1a26:	18 16       	cp	r1, r24
    1a28:	84 f4       	brge	.+32     	; 0x1a4a <_Z14removeDeadbandfff+0xa8>
		output = (value + deadband) * scale;
    1a2a:	c5 01       	movw	r24, r10
    1a2c:	b4 01       	movw	r22, r8
    1a2e:	a3 01       	movw	r20, r6
    1a30:	92 01       	movw	r18, r4
    1a32:	0e 94 6f 48 	call	0x90de	; 0x90de <__addsf3>
    1a36:	41 2f       	mov	r20, r17
    1a38:	0c 2d       	mov	r16, r12
    1a3a:	1c 2f       	mov	r17, r28
    1a3c:	2d 2f       	mov	r18, r29
    1a3e:	34 2f       	mov	r19, r20
    1a40:	a9 01       	movw	r20, r18
    1a42:	98 01       	movw	r18, r16
    1a44:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__mulsf3>
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <_Z14removeDeadbandfff+0xb0>
	else
		output = 0;
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0

	return output;
}
    1a52:	38 2f       	mov	r19, r24
    1a54:	29 2f       	mov	r18, r25
    1a56:	86 2f       	mov	r24, r22
    1a58:	97 2f       	mov	r25, r23
    1a5a:	a3 2f       	mov	r26, r19
    1a5c:	b2 2f       	mov	r27, r18
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	ff 90       	pop	r15
    1a6c:	ef 90       	pop	r14
    1a6e:	df 90       	pop	r13
    1a70:	cf 90       	pop	r12
    1a72:	bf 90       	pop	r11
    1a74:	af 90       	pop	r10
    1a76:	9f 90       	pop	r9
    1a78:	8f 90       	pop	r8
    1a7a:	7f 90       	pop	r7
    1a7c:	6f 90       	pop	r6
    1a7e:	5f 90       	pop	r5
    1a80:	4f 90       	pop	r4
    1a82:	08 95       	ret

00001a84 <_ZN13EthernetClass5beginEPh>:
  0, 0, 0, 0 };
uint16_t EthernetClass::_server_port[MAX_SOCK_NUM] = { 
  0, 0, 0, 0 };

int EthernetClass::begin(uint8_t *mac_address)
{
    1a84:	cf 92       	push	r12
    1a86:	df 92       	push	r13
    1a88:	ef 92       	push	r14
    1a8a:	ff 92       	push	r15
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	6e 97       	sbiw	r28, 0x1e	; 30
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	6c 01       	movw	r12, r24
    1aa6:	7b 01       	movw	r14, r22
  _dhcp = new DhcpClass();
    1aa8:	82 e6       	ldi	r24, 0x62	; 98
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <_Znwj>
    1ab0:	8c 01       	movw	r16, r24
    1ab2:	82 e6       	ldi	r24, 0x62	; 98
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	11 92       	st	Z+, r1
    1ab8:	8a 95       	dec	r24
    1aba:	e9 f7       	brne	.-6      	; 0x1ab6 <_ZN13EthernetClass5beginEPh+0x32>
	uint8_t  siaddr[4];
	uint8_t  giaddr[4];
	uint8_t  chaddr[6];
}RIP_MSG_FIXED;

class DhcpClass {
    1abc:	c8 01       	movw	r24, r16
    1abe:	89 5b       	subi	r24, 0xB9	; 185
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN11EthernetUDPC1Ev>
    1ac6:	f6 01       	movw	r30, r12
    1ac8:	17 83       	std	Z+7, r17	; 0x07
    1aca:	06 83       	std	Z+6, r16	; 0x06


  // Initialise the basic info
  W5100.init();
    1acc:	81 e8       	ldi	r24, 0x81	; 129
    1ace:	96 e0       	ldi	r25, 0x06	; 6
    1ad0:	0e 94 57 16 	call	0x2cae	; 0x2cae <_ZN10W5100Class4initEv>

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
    1ad4:	89 e0       	ldi	r24, 0x09	; 9
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	b7 01       	movw	r22, r14
    1ada:	46 e0       	ldi	r20, 0x06	; 6
    1adc:	50 e0       	ldi	r21, 0x00	; 0
    1ade:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
  W5100.setMACAddress(mac_address);
  W5100.setIPAddress(IPAddress(0,0,0,0).raw_address());
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	49 96       	adiw	r24, 0x19	; 25
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	40 e0       	ldi	r20, 0x00	; 0
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	00 e0       	ldi	r16, 0x00	; 0
    1aee:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <_ZN9IPAddressC1Ehhhh>
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
    1af2:	8f e0       	ldi	r24, 0x0F	; 15
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	be 01       	movw	r22, r28
    1af8:	65 5e       	subi	r22, 0xE5	; 229
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255
    1afc:	44 e0       	ldi	r20, 0x04	; 4
    1afe:	50 e0       	ldi	r21, 0x00	; 0
    1b00:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>

  // Now try to get our config info from a DHCP server
  int ret = _dhcp->beginWithDHCP(mac_address);
    1b04:	f6 01       	movw	r30, r12
    1b06:	86 81       	ldd	r24, Z+6	; 0x06
    1b08:	97 81       	ldd	r25, Z+7	; 0x07
    1b0a:	b7 01       	movw	r22, r14
    1b0c:	20 e6       	ldi	r18, 0x60	; 96
    1b0e:	3a ee       	ldi	r19, 0xEA	; 234
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	0f 2e       	mov	r0, r31
    1b16:	f0 ea       	ldi	r31, 0xA0	; 160
    1b18:	ef 2e       	mov	r14, r31
    1b1a:	ff e0       	ldi	r31, 0x0F	; 15
    1b1c:	ff 2e       	mov	r15, r31
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	0f 2f       	mov	r16, r31
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	1f 2f       	mov	r17, r31
    1b26:	f0 2d       	mov	r31, r0
    1b28:	0e 94 c6 3c 	call	0x798c	; 0x798c <_ZN9DhcpClass13beginWithDHCPEPhmm>
    1b2c:	8c 01       	movw	r16, r24
  if(ret == 1)
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	91 05       	cpc	r25, r1
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <_ZN13EthernetClass5beginEPh+0xb2>
    1b34:	40 c0       	rjmp	.+128    	; 0x1bb6 <_ZN13EthernetClass5beginEPh+0x132>
  {
    // We've successfully found a DHCP server and got our configuration info, so set things
    // accordingly
    W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
    1b36:	f6 01       	movw	r30, r12
    1b38:	66 81       	ldd	r22, Z+6	; 0x06
    1b3a:	77 81       	ldd	r23, Z+7	; 0x07
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	43 96       	adiw	r24, 0x13	; 19
    1b40:	0e 94 a9 38 	call	0x7152	; 0x7152 <_ZN9DhcpClass10getLocalIpEv>
    1b44:	8f e0       	ldi	r24, 0x0F	; 15
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	be 01       	movw	r22, r28
    1b4a:	6b 5e       	subi	r22, 0xEB	; 235
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	44 e0       	ldi	r20, 0x04	; 4
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
    W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
    1b56:	f6 01       	movw	r30, r12
    1b58:	66 81       	ldd	r22, Z+6	; 0x06
    1b5a:	77 81       	ldd	r23, Z+7	; 0x07
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	0d 96       	adiw	r24, 0x0d	; 13
    1b60:	0e 94 bf 38 	call	0x717e	; 0x717e <_ZN9DhcpClass12getGatewayIpEv>
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	be 01       	movw	r22, r28
    1b6a:	61 5f       	subi	r22, 0xF1	; 241
    1b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6e:	44 e0       	ldi	r20, 0x04	; 4
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
    W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
    1b76:	f6 01       	movw	r30, r12
    1b78:	66 81       	ldd	r22, Z+6	; 0x06
    1b7a:	77 81       	ldd	r23, Z+7	; 0x07
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	07 96       	adiw	r24, 0x07	; 7
    1b80:	0e 94 b4 38 	call	0x7168	; 0x7168 <_ZN9DhcpClass13getSubnetMaskEv>
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
    1b84:	85 e0       	ldi	r24, 0x05	; 5
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	be 01       	movw	r22, r28
    1b8a:	67 5f       	subi	r22, 0xF7	; 247
    1b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8e:	44 e0       	ldi	r20, 0x04	; 4
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
    _dnsServerAddress = _dhcp->getDnsServerIp();
    1b96:	f6 01       	movw	r30, r12
    1b98:	66 81       	ldd	r22, Z+6	; 0x06
    1b9a:	77 81       	ldd	r23, Z+7	; 0x07
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	0e 94 d5 38 	call	0x71aa	; 0x71aa <_ZN9DhcpClass14getDnsServerIpEv>

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	ad 81       	ldd	r26, Y+5	; 0x05
    1baa:	be 81       	ldd	r27, Y+6	; 0x06
    1bac:	f6 01       	movw	r30, r12
    1bae:	82 83       	std	Z+2, r24	; 0x02
    1bb0:	93 83       	std	Z+3, r25	; 0x03
    1bb2:	a4 83       	std	Z+4, r26	; 0x04
    1bb4:	b5 83       	std	Z+5, r27	; 0x05
  }

  return ret;
}
    1bb6:	80 2f       	mov	r24, r16
    1bb8:	91 2f       	mov	r25, r17
    1bba:	6e 96       	adiw	r28, 0x1e	; 30
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	08 95       	ret

00001bd8 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
{
    1bd8:	8f 92       	push	r8
    1bda:	9f 92       	push	r9
    1bdc:	af 92       	push	r10
    1bde:	bf 92       	push	r11
    1be0:	cf 92       	push	r12
    1be2:	df 92       	push	r13
    1be4:	ef 92       	push	r14
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	4c 01       	movw	r8, r24
    1bf2:	6b 01       	movw	r12, r22
    1bf4:	ea 01       	movw	r28, r20
    1bf6:	59 01       	movw	r10, r18
  W5100.init();
    1bf8:	81 e8       	ldi	r24, 0x81	; 129
    1bfa:	96 e0       	ldi	r25, 0x06	; 6
    1bfc:	0e 94 57 16 	call	0x2cae	; 0x2cae <_ZN10W5100Class4initEv>
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
    1c00:	89 e0       	ldi	r24, 0x09	; 9
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	b6 01       	movw	r22, r12
    1c06:	46 e0       	ldi	r20, 0x06	; 6
    1c08:	50 e0       	ldi	r21, 0x00	; 0
    1c0a:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
  W5100.setMACAddress(mac);
  W5100.setIPAddress(local_ip._address);
    1c0e:	be 01       	movw	r22, r28
    1c10:	6e 5f       	subi	r22, 0xFE	; 254
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
    1c14:	8f e0       	ldi	r24, 0x0F	; 15
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	44 e0       	ldi	r20, 0x04	; 4
    1c1a:	50 e0       	ldi	r21, 0x00	; 0
    1c1c:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
  W5100.setGatewayIp(gateway._address);
    1c20:	b8 01       	movw	r22, r16
    1c22:	6e 5f       	subi	r22, 0xFE	; 254
    1c24:	7f 4f       	sbci	r23, 0xFF	; 255
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	44 e0       	ldi	r20, 0x04	; 4
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
  W5100.setSubnetMask(subnet._address);
    1c32:	b7 01       	movw	r22, r14
    1c34:	6e 5f       	subi	r22, 0xFE	; 254
    1c36:	7f 4f       	sbci	r23, 0xFF	; 255
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
    1c38:	85 e0       	ldi	r24, 0x05	; 5
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	44 e0       	ldi	r20, 0x04	; 4
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
    1c44:	f5 01       	movw	r30, r10
    1c46:	82 81       	ldd	r24, Z+2	; 0x02
    1c48:	93 81       	ldd	r25, Z+3	; 0x03
    1c4a:	a4 81       	ldd	r26, Z+4	; 0x04
    1c4c:	b5 81       	ldd	r27, Z+5	; 0x05
    1c4e:	f4 01       	movw	r30, r8
    1c50:	82 83       	std	Z+2, r24	; 0x02
    1c52:	93 83       	std	Z+3, r25	; 0x03
    1c54:	a4 83       	std	Z+4, r26	; 0x04
    1c56:	b5 83       	std	Z+5, r27	; 0x05
  _dnsServerAddress = dns_server;
}
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	df 90       	pop	r13
    1c66:	cf 90       	pop	r12
    1c68:	bf 90       	pop	r11
    1c6a:	af 90       	pop	r10
    1c6c:	9f 90       	pop	r9
    1c6e:	8f 90       	pop	r8
    1c70:	08 95       	ret

00001c72 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>:
  gateway[3] = 1;
  begin(mac_address, local_ip, dns_server, gateway);
}

void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip, IPAddress dns_server, IPAddress gateway)
{
    1c72:	6f 92       	push	r6
    1c74:	7f 92       	push	r7
    1c76:	8f 92       	push	r8
    1c78:	9f 92       	push	r9
    1c7a:	af 92       	push	r10
    1c7c:	bf 92       	push	r11
    1c7e:	cf 92       	push	r12
    1c80:	df 92       	push	r13
    1c82:	ef 92       	push	r14
    1c84:	ff 92       	push	r15
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	6e 97       	sbiw	r28, 0x1e	; 30
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	4c 01       	movw	r8, r24
    1ca0:	3b 01       	movw	r6, r22
    1ca2:	7a 01       	movw	r14, r20
    1ca4:	69 01       	movw	r12, r18
    1ca6:	58 01       	movw	r10, r16
  IPAddress subnet(255, 255, 255, 0);
    1ca8:	ce 01       	movw	r24, r28
    1caa:	49 96       	adiw	r24, 0x19	; 25
    1cac:	6f ef       	ldi	r22, 0xFF	; 255
    1cae:	4f ef       	ldi	r20, 0xFF	; 255
    1cb0:	2f ef       	ldi	r18, 0xFF	; 255
    1cb2:	00 e0       	ldi	r16, 0x00	; 0
    1cb4:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <_ZN9IPAddressC1Ehhhh>
    1cb8:	2b e4       	ldi	r18, 0x4B	; 75
    1cba:	33 e0       	ldi	r19, 0x03	; 3
    1cbc:	3c 8b       	std	Y+20, r19	; 0x14
    1cbe:	2b 8b       	std	Y+19, r18	; 0x13
    1cc0:	f7 01       	movw	r30, r14
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	a4 81       	ldd	r26, Z+4	; 0x04
    1cc8:	b5 81       	ldd	r27, Z+5	; 0x05
    1cca:	8d 8b       	std	Y+21, r24	; 0x15
    1ccc:	9e 8b       	std	Y+22, r25	; 0x16
    1cce:	af 8b       	std	Y+23, r26	; 0x17
    1cd0:	b8 8f       	std	Y+24, r27	; 0x18
    1cd2:	3e 87       	std	Y+14, r19	; 0x0e
    1cd4:	2d 87       	std	Y+13, r18	; 0x0d
    1cd6:	f6 01       	movw	r30, r12
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	a4 81       	ldd	r26, Z+4	; 0x04
    1cde:	b5 81       	ldd	r27, Z+5	; 0x05
    1ce0:	8f 87       	std	Y+15, r24	; 0x0f
    1ce2:	98 8b       	std	Y+16, r25	; 0x10
    1ce4:	a9 8b       	std	Y+17, r26	; 0x11
    1ce6:	ba 8b       	std	Y+18, r27	; 0x12
    1ce8:	38 87       	std	Y+8, r19	; 0x08
    1cea:	2f 83       	std	Y+7, r18	; 0x07
    1cec:	f5 01       	movw	r30, r10
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	a4 81       	ldd	r26, Z+4	; 0x04
    1cf4:	b5 81       	ldd	r27, Z+5	; 0x05
    1cf6:	89 87       	std	Y+9, r24	; 0x09
    1cf8:	9a 87       	std	Y+10, r25	; 0x0a
    1cfa:	ab 87       	std	Y+11, r26	; 0x0b
    1cfc:	bc 87       	std	Y+12, r27	; 0x0c
    1cfe:	3a 83       	std	Y+2, r19	; 0x02
    1d00:	29 83       	std	Y+1, r18	; 0x01
    1d02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d06:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1d08:	be 8d       	ldd	r27, Y+30	; 0x1e
    1d0a:	8b 83       	std	Y+3, r24	; 0x03
    1d0c:	9c 83       	std	Y+4, r25	; 0x04
    1d0e:	ad 83       	std	Y+5, r26	; 0x05
    1d10:	be 83       	std	Y+6, r27	; 0x06
  begin(mac_address, local_ip, dns_server, gateway, subnet);
    1d12:	c4 01       	movw	r24, r8
    1d14:	b3 01       	movw	r22, r6
    1d16:	ae 01       	movw	r20, r28
    1d18:	4d 5e       	subi	r20, 0xED	; 237
    1d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1c:	9e 01       	movw	r18, r28
    1d1e:	23 5f       	subi	r18, 0xF3	; 243
    1d20:	3f 4f       	sbci	r19, 0xFF	; 255
    1d22:	8e 01       	movw	r16, r28
    1d24:	09 5f       	subi	r16, 0xF9	; 249
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	7e 01       	movw	r14, r28
    1d2a:	08 94       	sec
    1d2c:	e1 1c       	adc	r14, r1
    1d2e:	f1 1c       	adc	r15, r1
    1d30:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
}
    1d34:	6e 96       	adiw	r28, 0x1e	; 30
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	ff 90       	pop	r15
    1d4a:	ef 90       	pop	r14
    1d4c:	df 90       	pop	r13
    1d4e:	cf 90       	pop	r12
    1d50:	bf 90       	pop	r11
    1d52:	af 90       	pop	r10
    1d54:	9f 90       	pop	r9
    1d56:	8f 90       	pop	r8
    1d58:	7f 90       	pop	r7
    1d5a:	6f 90       	pop	r6
    1d5c:	08 95       	ret

00001d5e <_ZN13EthernetClass5beginEPh9IPAddressS1_>:
  dns_server[3] = 1;
  begin(mac_address, local_ip, dns_server);
}

void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip, IPAddress dns_server)
{
    1d5e:	ef 92       	push	r14
    1d60:	ff 92       	push	r15
    1d62:	0f 93       	push	r16
    1d64:	1f 93       	push	r17
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	68 97       	sbiw	r28, 0x18	; 24
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	7b 01       	movw	r14, r22
    1d7c:	da 01       	movw	r26, r20
    1d7e:	12 96       	adiw	r26, 0x02	; 2
    1d80:	4d 91       	ld	r20, X+
    1d82:	5d 91       	ld	r21, X+
    1d84:	6d 91       	ld	r22, X+
    1d86:	7c 91       	ld	r23, X
    1d88:	15 97       	sbiw	r26, 0x05	; 5
    1d8a:	4d 8b       	std	Y+21, r20	; 0x15
    1d8c:	5e 8b       	std	Y+22, r21	; 0x16
    1d8e:	6f 8b       	std	Y+23, r22	; 0x17
    1d90:	78 8f       	std	Y+24, r23	; 0x18
    1d92:	eb e4       	ldi	r30, 0x4B	; 75
    1d94:	f3 e0       	ldi	r31, 0x03	; 3
    1d96:	fe 87       	std	Y+14, r31	; 0x0e
    1d98:	ed 87       	std	Y+13, r30	; 0x0d
    1d9a:	4f 87       	std	Y+15, r20	; 0x0f
    1d9c:	58 8b       	std	Y+16, r21	; 0x10
    1d9e:	69 8b       	std	Y+17, r22	; 0x11
    1da0:	7a 8b       	std	Y+18, r23	; 0x12
    1da2:	f8 87       	std	Y+8, r31	; 0x08
    1da4:	ef 83       	std	Y+7, r30	; 0x07
    1da6:	d9 01       	movw	r26, r18
    1da8:	12 96       	adiw	r26, 0x02	; 2
    1daa:	0d 91       	ld	r16, X+
    1dac:	1d 91       	ld	r17, X+
    1dae:	2d 91       	ld	r18, X+
    1db0:	3c 91       	ld	r19, X
    1db2:	15 97       	sbiw	r26, 0x05	; 5
    1db4:	09 87       	std	Y+9, r16	; 0x09
    1db6:	1a 87       	std	Y+10, r17	; 0x0a
    1db8:	2b 87       	std	Y+11, r18	; 0x0b
    1dba:	3c 87       	std	Y+12, r19	; 0x0c
    1dbc:	fa 83       	std	Y+2, r31	; 0x02
    1dbe:	e9 83       	std	Y+1, r30	; 0x01
    1dc0:	4b 83       	std	Y+3, r20	; 0x03
    1dc2:	5c 83       	std	Y+4, r21	; 0x04
    1dc4:	6d 83       	std	Y+5, r22	; 0x05
    1dc6:	7e 83       	std	Y+6, r23	; 0x06
    1dc8:	21 e0       	ldi	r18, 0x01	; 1
    1dca:	2e 83       	std	Y+6, r18	; 0x06
  // Assume the gateway will be the machine on the same network as the local IP
  // but with last octet being '1'
  IPAddress gateway = local_ip;
  gateway[3] = 1;
  begin(mac_address, local_ip, dns_server, gateway);
    1dcc:	b7 01       	movw	r22, r14
    1dce:	ae 01       	movw	r20, r28
    1dd0:	43 5f       	subi	r20, 0xF3	; 243
    1dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd4:	9e 01       	movw	r18, r28
    1dd6:	29 5f       	subi	r18, 0xF9	; 249
    1dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dda:	8e 01       	movw	r16, r28
    1ddc:	0f 5f       	subi	r16, 0xFF	; 255
    1dde:	1f 4f       	sbci	r17, 0xFF	; 255
    1de0:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>
}
    1de4:	68 96       	adiw	r28, 0x18	; 24
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	08 95       	ret

00001dfe <_ZN13EthernetClass5beginEPh9IPAddress>:

  return ret;
}

void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip)
{
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	62 97       	sbiw	r28, 0x12	; 18
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	fb 01       	movw	r30, r22
    1e14:	da 01       	movw	r26, r20
    1e16:	12 96       	adiw	r26, 0x02	; 2
    1e18:	4d 91       	ld	r20, X+
    1e1a:	5d 91       	ld	r21, X+
    1e1c:	6d 91       	ld	r22, X+
    1e1e:	7c 91       	ld	r23, X
    1e20:	15 97       	sbiw	r26, 0x05	; 5
    1e22:	4f 87       	std	Y+15, r20	; 0x0f
    1e24:	58 8b       	std	Y+16, r21	; 0x10
    1e26:	69 8b       	std	Y+17, r22	; 0x11
    1e28:	7a 8b       	std	Y+18, r23	; 0x12
    1e2a:	2b e4       	ldi	r18, 0x4B	; 75
    1e2c:	33 e0       	ldi	r19, 0x03	; 3
    1e2e:	38 87       	std	Y+8, r19	; 0x08
    1e30:	2f 83       	std	Y+7, r18	; 0x07
    1e32:	49 87       	std	Y+9, r20	; 0x09
    1e34:	5a 87       	std	Y+10, r21	; 0x0a
    1e36:	6b 87       	std	Y+11, r22	; 0x0b
    1e38:	7c 87       	std	Y+12, r23	; 0x0c
    1e3a:	3a 83       	std	Y+2, r19	; 0x02
    1e3c:	29 83       	std	Y+1, r18	; 0x01
    1e3e:	4b 83       	std	Y+3, r20	; 0x03
    1e40:	5c 83       	std	Y+4, r21	; 0x04
    1e42:	6d 83       	std	Y+5, r22	; 0x05
    1e44:	7e 83       	std	Y+6, r23	; 0x06
    1e46:	21 e0       	ldi	r18, 0x01	; 1
    1e48:	2e 83       	std	Y+6, r18	; 0x06
  // Assume the DNS server will be the machine on the same network as the local IP
  // but with last octet being '1'
  IPAddress dns_server = local_ip;
  dns_server[3] = 1;
  begin(mac_address, local_ip, dns_server);
    1e4a:	bf 01       	movw	r22, r30
    1e4c:	ae 01       	movw	r20, r28
    1e4e:	49 5f       	subi	r20, 0xF9	; 249
    1e50:	5f 4f       	sbci	r21, 0xFF	; 255
    1e52:	9e 01       	movw	r18, r28
    1e54:	2f 5f       	subi	r18, 0xFF	; 255
    1e56:	3f 4f       	sbci	r19, 0xFF	; 255
    1e58:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <_ZN13EthernetClass5beginEPh9IPAddressS1_>
}
    1e5c:	62 96       	adiw	r28, 0x12	; 18
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <_ZN13EthernetClass8maintainEv>:
  W5100.setGatewayIp(gateway._address);
  W5100.setSubnetMask(subnet._address);
  _dnsServerAddress = dns_server;
}

int EthernetClass::maintain(){
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	68 97       	sbiw	r28, 0x18	; 24
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	cd bf       	out	0x3d, r28	; 61
    1e8a:	7c 01       	movw	r14, r24
  int rc = DHCP_CHECK_NONE;
  if(_dhcp != NULL){
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	86 81       	ldd	r24, Z+6	; 0x06
    1e90:	97 81       	ldd	r25, Z+7	; 0x07
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <_ZN13EthernetClass8maintainEv+0x2a>
    1e96:	4b c0       	rjmp	.+150    	; 0x1f2e <_ZN13EthernetClass8maintainEv+0xc0>
    //we have a pointer to dhcp, use it
    rc = _dhcp->checkLease();
    1e98:	0e 94 e4 3b 	call	0x77c8	; 0x77c8 <_ZN9DhcpClass10checkLeaseEv>
    1e9c:	8c 01       	movw	r16, r24
    switch ( rc ){
    1e9e:	82 30       	cpi	r24, 0x02	; 2
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	21 f0       	breq	.+8      	; 0x1eac <_ZN13EthernetClass8maintainEv+0x3e>
    1ea4:	84 30       	cpi	r24, 0x04	; 4
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <_ZN13EthernetClass8maintainEv+0x3e>
    1eaa:	43 c0       	rjmp	.+134    	; 0x1f32 <_ZN13EthernetClass8maintainEv+0xc4>
        //nothing done
        break;
      case DHCP_CHECK_RENEW_OK:
      case DHCP_CHECK_REBIND_OK:
        //we might have got a new IP.
        W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
    1eac:	f7 01       	movw	r30, r14
    1eae:	66 81       	ldd	r22, Z+6	; 0x06
    1eb0:	77 81       	ldd	r23, Z+7	; 0x07
    1eb2:	ce 01       	movw	r24, r28
    1eb4:	43 96       	adiw	r24, 0x13	; 19
    1eb6:	0e 94 a9 38 	call	0x7152	; 0x7152 <_ZN9DhcpClass10getLocalIpEv>
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
    1eba:	8f e0       	ldi	r24, 0x0F	; 15
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	be 01       	movw	r22, r28
    1ec0:	6b 5e       	subi	r22, 0xEB	; 235
    1ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec4:	44 e0       	ldi	r20, 0x04	; 4
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
        W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
    1ecc:	f7 01       	movw	r30, r14
    1ece:	66 81       	ldd	r22, Z+6	; 0x06
    1ed0:	77 81       	ldd	r23, Z+7	; 0x07
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	0d 96       	adiw	r24, 0x0d	; 13
    1ed6:	0e 94 bf 38 	call	0x717e	; 0x717e <_ZN9DhcpClass12getGatewayIpEv>
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	be 01       	movw	r22, r28
    1ee0:	61 5f       	subi	r22, 0xF1	; 241
    1ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee4:	44 e0       	ldi	r20, 0x04	; 4
    1ee6:	50 e0       	ldi	r21, 0x00	; 0
    1ee8:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
        W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
    1eec:	f7 01       	movw	r30, r14
    1eee:	66 81       	ldd	r22, Z+6	; 0x06
    1ef0:	77 81       	ldd	r23, Z+7	; 0x07
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	07 96       	adiw	r24, 0x07	; 7
    1ef6:	0e 94 b4 38 	call	0x7168	; 0x7168 <_ZN9DhcpClass13getSubnetMaskEv>
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
    1efa:	85 e0       	ldi	r24, 0x05	; 5
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	be 01       	movw	r22, r28
    1f00:	67 5f       	subi	r22, 0xF7	; 247
    1f02:	7f 4f       	sbci	r23, 0xFF	; 255
    1f04:	44 e0       	ldi	r20, 0x04	; 4
    1f06:	50 e0       	ldi	r21, 0x00	; 0
    1f08:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
        _dnsServerAddress = _dhcp->getDnsServerIp();
    1f0c:	f7 01       	movw	r30, r14
    1f0e:	66 81       	ldd	r22, Z+6	; 0x06
    1f10:	77 81       	ldd	r23, Z+7	; 0x07
    1f12:	ce 01       	movw	r24, r28
    1f14:	01 96       	adiw	r24, 0x01	; 1
    1f16:	0e 94 d5 38 	call	0x71aa	; 0x71aa <_ZN9DhcpClass14getDnsServerIpEv>
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	ad 81       	ldd	r26, Y+5	; 0x05
    1f20:	be 81       	ldd	r27, Y+6	; 0x06
    1f22:	f7 01       	movw	r30, r14
    1f24:	82 83       	std	Z+2, r24	; 0x02
    1f26:	93 83       	std	Z+3, r25	; 0x03
    1f28:	a4 83       	std	Z+4, r26	; 0x04
    1f2a:	b5 83       	std	Z+5, r27	; 0x05
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <_ZN13EthernetClass8maintainEv+0xc4>
  W5100.setSubnetMask(subnet._address);
  _dnsServerAddress = dns_server;
}

int EthernetClass::maintain(){
  int rc = DHCP_CHECK_NONE;
    1f2e:	00 e0       	ldi	r16, 0x00	; 0
    1f30:	10 e0       	ldi	r17, 0x00	; 0
        //this is actually a error, it will retry though
        break;
    }
  }
  return rc;
}
    1f32:	80 2f       	mov	r24, r16
    1f34:	91 2f       	mov	r25, r17
    1f36:	68 96       	adiw	r28, 0x18	; 24
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	1f 91       	pop	r17
    1f48:	0f 91       	pop	r16
    1f4a:	ff 90       	pop	r15
    1f4c:	ef 90       	pop	r14
    1f4e:	08 95       	ret

00001f50 <_ZN13EthernetClass7localIPEv>:

IPAddress EthernetClass::localIP()
{
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	ec 01       	movw	r28, r24
  IPAddress ret;
    1f56:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN9IPAddressC1Ev>
  W5100.getIPAddress(ret.raw_address());
    1f5a:	be 01       	movw	r22, r28
    1f5c:	6e 5f       	subi	r22, 0xFE	; 254
    1f5e:	7f 4f       	sbci	r23, 0xFF	; 255
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
    1f60:	8f e0       	ldi	r24, 0x0F	; 15
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	44 e0       	ldi	r20, 0x04	; 4
    1f66:	50 e0       	ldi	r21, 0x00	; 0
    1f68:	0e 94 08 18 	call	0x3010	; 0x3010 <_ZN10W5100Class4readEjPhj>
  return ret;
}
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	08 95       	ret

00001f74 <_ZN13EthernetClass10subnetMaskEv>:

IPAddress EthernetClass::subnetMask()
{
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	ec 01       	movw	r28, r24
  IPAddress ret;
    1f7a:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN9IPAddressC1Ev>
  W5100.getSubnetMask(ret.raw_address());
    1f7e:	be 01       	movw	r22, r28
    1f80:	6e 5f       	subi	r22, 0xFE	; 254
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
    1f84:	85 e0       	ldi	r24, 0x05	; 5
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	44 e0       	ldi	r20, 0x04	; 4
    1f8a:	50 e0       	ldi	r21, 0x00	; 0
    1f8c:	0e 94 08 18 	call	0x3010	; 0x3010 <_ZN10W5100Class4readEjPhj>
  return ret;
}
    1f90:	ce 01       	movw	r24, r28
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	08 95       	ret

00001f98 <_ZN13EthernetClass9gatewayIPEv>:

IPAddress EthernetClass::gatewayIP()
{
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	ec 01       	movw	r28, r24
  IPAddress ret;
    1f9e:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN9IPAddressC1Ev>
  W5100.getGatewayIp(ret.raw_address());
    1fa2:	be 01       	movw	r22, r28
    1fa4:	6e 5f       	subi	r22, 0xFE	; 254
    1fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	44 e0       	ldi	r20, 0x04	; 4
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	0e 94 08 18 	call	0x3010	; 0x3010 <_ZN10W5100Class4readEjPhj>
  return ret;
}
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	08 95       	ret

00001fbc <_ZN13EthernetClass11dnsServerIPEv>:
    1fbc:	2b e4       	ldi	r18, 0x4B	; 75
    1fbe:	33 e0       	ldi	r19, 0x03	; 3
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	31 83       	std	Z+1, r19	; 0x01
    1fc4:	20 83       	st	Z, r18
    1fc6:	fb 01       	movw	r30, r22
    1fc8:	42 81       	ldd	r20, Z+2	; 0x02
    1fca:	53 81       	ldd	r21, Z+3	; 0x03
    1fcc:	64 81       	ldd	r22, Z+4	; 0x04
    1fce:	75 81       	ldd	r23, Z+5	; 0x05
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	42 83       	std	Z+2, r20	; 0x02
    1fd4:	53 83       	std	Z+3, r21	; 0x03
    1fd6:	64 83       	std	Z+4, r22	; 0x04
    1fd8:	75 83       	std	Z+5, r23	; 0x05

IPAddress EthernetClass::dnsServerIP()
{
  return _dnsServerAddress;
}
    1fda:	08 95       	ret

00001fdc <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    1fdc:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    1fde:	83 e7       	ldi	r24, 0x73	; 115
    1fe0:	96 e0       	ldi	r25, 0x06	; 6
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	00 e0       	ldi	r16, 0x00	; 0
    1fea:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <_ZN9IPAddressC1Ehhhh>
#include "EthernetServer.h"
#include "Dhcp.h"

#define MAX_SOCK_NUM 4

class EthernetClass {
    1fee:	8f e5       	ldi	r24, 0x5F	; 95
    1ff0:	96 e0       	ldi	r25, 0x06	; 6
    1ff2:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN9IPAddressC1Ev>
    1ff6:	0f 91       	pop	r16
    1ff8:	08 95       	ret

00001ffa <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	ed 91       	ld	r30, X+
    1ffe:	fc 91       	ld	r31, X
    2000:	00 8c       	ldd	r0, Z+24	; 0x18
    2002:	f1 8d       	ldd	r31, Z+25	; 0x19
    2004:	e0 2d       	mov	r30, r0
    2006:	19 95       	eicall
    2008:	08 95       	ret

0000200a <_ZN11EthernetUDP8remoteIPEv>:

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    200a:	2b e4       	ldi	r18, 0x4B	; 75
    200c:	33 e0       	ldi	r19, 0x03	; 3
    200e:	fc 01       	movw	r30, r24
    2010:	31 83       	std	Z+1, r19	; 0x01
    2012:	20 83       	st	Z, r18
    2014:	fb 01       	movw	r30, r22
    2016:	41 89       	ldd	r20, Z+17	; 0x11
    2018:	52 89       	ldd	r21, Z+18	; 0x12
    201a:	63 89       	ldd	r22, Z+19	; 0x13
    201c:	74 89       	ldd	r23, Z+20	; 0x14
    201e:	fc 01       	movw	r30, r24
    2020:	42 83       	std	Z+2, r20	; 0x02
    2022:	53 83       	std	Z+3, r21	; 0x03
    2024:	64 83       	std	Z+4, r22	; 0x04
    2026:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    2028:	08 95       	ret

0000202a <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    202a:	fc 01       	movw	r30, r24
    202c:	85 89       	ldd	r24, Z+21	; 0x15
    202e:	96 89       	ldd	r25, Z+22	; 0x16
    2030:	08 95       	ret

00002032 <_ZN11EthernetUDP9availableEv>:
  return 1;
}

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
    2032:	fc 01       	movw	r30, r24
  return _remaining;
}
    2034:	81 8d       	ldd	r24, Z+25	; 0x19
    2036:	92 8d       	ldd	r25, Z+26	; 0x1a
    2038:	08 95       	ret

0000203a <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	0f 92       	push	r0
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    2046:	dc 01       	movw	r26, r24
    2048:	ed 91       	ld	r30, X+
    204a:	fc 91       	ld	r31, X
    204c:	02 80       	ldd	r0, Z+2	; 0x02
    204e:	f3 81       	ldd	r31, Z+3	; 0x03
    2050:	e0 2d       	mov	r30, r0
    2052:	be 01       	movw	r22, r28
    2054:	6f 5f       	subi	r22, 0xFF	; 255
    2056:	7f 4f       	sbci	r23, 0xFF	; 255
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	50 e0       	ldi	r21, 0x00	; 0
    205c:	19 95       	eicall
}
    205e:	0f 90       	pop	r0
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	08 95       	ret

00002066 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    2066:	cf 92       	push	r12
    2068:	df 92       	push	r13
    206a:	ef 92       	push	r14
    206c:	ff 92       	push	r15
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	8c 01       	movw	r16, r24
  while (_remaining)
  {
	byte garbage[_remaining];
	read(garbage, _remaining);
  }
}
    207c:	cd b6       	in	r12, 0x3d	; 61
    207e:	de b6       	in	r13, 0x3e	; 62
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5100 always behaves :)

  while (_remaining)
    2080:	dc 01       	movw	r26, r24
    2082:	59 96       	adiw	r26, 0x19	; 25
    2084:	8d 91       	ld	r24, X+
    2086:	9c 91       	ld	r25, X
    2088:	5a 97       	sbiw	r26, 0x1a	; 26
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	19 f1       	breq	.+70     	; 0x20d4 <_ZN11EthernetUDP5flushEv+0x6e>
    208e:	fd b6       	in	r15, 0x3d	; 61
    2090:	ee b6       	in	r14, 0x3e	; 62
  {
	byte garbage[_remaining];
    2092:	f8 01       	movw	r30, r16
    2094:	41 8d       	ldd	r20, Z+25	; 0x19
    2096:	52 8d       	ldd	r21, Z+26	; 0x1a
    2098:	8d b7       	in	r24, 0x3d	; 61
    209a:	9e b7       	in	r25, 0x3e	; 62
    209c:	84 1b       	sub	r24, r20
    209e:	95 0b       	sbc	r25, r21
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	9e bf       	out	0x3e, r25	; 62
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	8d bf       	out	0x3d, r24	; 61
    20aa:	6d b7       	in	r22, 0x3d	; 61
    20ac:	7e b7       	in	r23, 0x3e	; 62
    20ae:	6f 5f       	subi	r22, 0xFF	; 255
    20b0:	7f 4f       	sbci	r23, 0xFF	; 255
	read(garbage, _remaining);
    20b2:	01 90       	ld	r0, Z+
    20b4:	f0 81       	ld	r31, Z
    20b6:	e0 2d       	mov	r30, r0
    20b8:	00 8c       	ldd	r0, Z+24	; 0x18
    20ba:	f1 8d       	ldd	r31, Z+25	; 0x19
    20bc:	e0 2d       	mov	r30, r0
    20be:	c8 01       	movw	r24, r16
    20c0:	19 95       	eicall
    20c2:	fd be       	out	0x3d, r15	; 61
    20c4:	ee be       	out	0x3e, r14	; 62
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5100 always behaves :)

  while (_remaining)
    20c6:	d8 01       	movw	r26, r16
    20c8:	59 96       	adiw	r26, 0x19	; 25
    20ca:	8d 91       	ld	r24, X+
    20cc:	9c 91       	ld	r25, X
    20ce:	5a 97       	sbiw	r26, 0x1a	; 26
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	e9 f6       	brne	.-70     	; 0x208e <_ZN11EthernetUDP5flushEv+0x28>
  {
	byte garbage[_remaining];
	read(garbage, _remaining);
  }
}
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de be       	out	0x3e, r13	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd be       	out	0x3d, r12	; 61
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	08 95       	ret

000020f0 <_ZN11EthernetUDP4peekEv>:
  return -1;

}

int EthernetUDP::peek()
{
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	0f 92       	push	r0
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	fc 01       	movw	r30, r24
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    20fc:	81 8d       	ldd	r24, Z+25	; 0x19
    20fe:	92 8d       	ldd	r25, Z+26	; 0x1a
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	49 f0       	breq	.+18     	; 0x2116 <_ZN11EthernetUDP4peekEv+0x26>
    return -1;
  ::peek(_sock, &b);
    2104:	84 85       	ldd	r24, Z+12	; 0x0c
    2106:	be 01       	movw	r22, r28
    2108:	6f 5f       	subi	r22, 0xFF	; 255
    210a:	7f 4f       	sbci	r23, 0xFF	; 255
    210c:	0e 94 aa 13 	call	0x2754	; 0x2754 <_Z4peekhPh>
  return b;
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 c0       	rjmp	.+4      	; 0x211a <_ZN11EthernetUDP4peekEv+0x2a>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    2116:	8f ef       	ldi	r24, 0xFF	; 255
    2118:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    211a:	0f 90       	pop	r0
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	08 95       	ret

00002122 <_ZN11EthernetUDP4readEPhj>:
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	ec 01       	movw	r28, r24
    2128:	9a 01       	movw	r18, r20

  if (_remaining > 0)
    212a:	49 8d       	ldd	r20, Y+25	; 0x19
    212c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    212e:	41 15       	cp	r20, r1
    2130:	51 05       	cpc	r21, r1
    2132:	a9 f0       	breq	.+42     	; 0x215e <_ZN11EthernetUDP4readEPhj+0x3c>
  {

    int got;

    if (_remaining <= len)
    2134:	24 17       	cp	r18, r20
    2136:	35 07       	cpc	r19, r21
    2138:	20 f0       	brcs	.+8      	; 0x2142 <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    213a:	8c 85       	ldd	r24, Y+12	; 0x0c
    213c:	0e 94 5f 13 	call	0x26be	; 0x26be <_Z4recvhPhi>
    2140:	04 c0       	rjmp	.+8      	; 0x214a <_ZN11EthernetUDP4readEPhj+0x28>
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    2142:	8c 85       	ldd	r24, Y+12	; 0x0c
    2144:	a9 01       	movw	r20, r18
    2146:	0e 94 5f 13 	call	0x26be	; 0x26be <_Z4recvhPhi>
    }

    if (got > 0)
    214a:	18 16       	cp	r1, r24
    214c:	19 06       	cpc	r1, r25
    214e:	54 f4       	brge	.+20     	; 0x2164 <_ZN11EthernetUDP4readEPhj+0x42>
    {
      _remaining -= got;
    2150:	29 8d       	ldd	r18, Y+25	; 0x19
    2152:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2154:	28 1b       	sub	r18, r24
    2156:	39 0b       	sbc	r19, r25
    2158:	3a 8f       	std	Y+26, r19	; 0x1a
    215a:	29 8f       	std	Y+25, r18	; 0x19
      return got;
    215c:	05 c0       	rjmp	.+10     	; 0x2168 <_ZN11EthernetUDP4readEPhj+0x46>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    215e:	8f ef       	ldi	r24, 0xFF	; 255
    2160:	9f ef       	ldi	r25, 0xFF	; 255
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <_ZN11EthernetUDP4readEPhj+0x46>
    2164:	8f ef       	ldi	r24, 0xFF	; 255
    2166:	9f ef       	ldi	r25, 0xFF	; 255

}
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	08 95       	ret

0000216e <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	0f 92       	push	r0
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	8c 01       	movw	r16, r24
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    217e:	fc 01       	movw	r30, r24
    2180:	81 8d       	ldd	r24, Z+25	; 0x19
    2182:	92 8d       	ldd	r25, Z+26	; 0x1a
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	a1 f0       	breq	.+40     	; 0x21b0 <_ZN11EthernetUDP4readEv+0x42>
    2188:	84 85       	ldd	r24, Z+12	; 0x0c
    218a:	be 01       	movw	r22, r28
    218c:	6f 5f       	subi	r22, 0xFF	; 255
    218e:	7f 4f       	sbci	r23, 0xFF	; 255
    2190:	41 e0       	ldi	r20, 0x01	; 1
    2192:	50 e0       	ldi	r21, 0x00	; 0
    2194:	0e 94 5f 13 	call	0x26be	; 0x26be <_Z4recvhPhi>
    2198:	18 16       	cp	r1, r24
    219a:	19 06       	cpc	r1, r25
    219c:	64 f4       	brge	.+24     	; 0x21b6 <_ZN11EthernetUDP4readEv+0x48>
  {
    // We read things without any problems
    _remaining--;
    219e:	f8 01       	movw	r30, r16
    21a0:	81 8d       	ldd	r24, Z+25	; 0x19
    21a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	92 8f       	std	Z+26, r25	; 0x1a
    21a8:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	05 c0       	rjmp	.+10     	; 0x21ba <_ZN11EthernetUDP4readEv+0x4c>
  }

  // If we get here, there's no data available
  return -1;
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	9f ef       	ldi	r25, 0xFF	; 255
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <_ZN11EthernetUDP4readEv+0x4c>
    21b6:	8f ef       	ldi	r24, 0xFF	; 255
    21b8:	9f ef       	ldi	r25, 0xFF	; 255
}
    21ba:	0f 90       	pop	r0
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	1f 91       	pop	r17
    21c2:	0f 91       	pop	r16
    21c4:	08 95       	ret

000021c6 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	28 97       	sbiw	r28, 0x08	; 8
    21d4:	0f b6       	in	r0, 0x3f	; 63
    21d6:	f8 94       	cli
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	cd bf       	out	0x3d, r28	; 61
    21de:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    21e0:	dc 01       	movw	r26, r24
    21e2:	ed 91       	ld	r30, X+
    21e4:	fc 91       	ld	r31, X
    21e6:	02 84       	ldd	r0, Z+10	; 0x0a
    21e8:	f3 85       	ldd	r31, Z+11	; 0x0b
    21ea:	e0 2d       	mov	r30, r0
    21ec:	19 95       	eicall

  if (W5100.getRXReceivedSize(_sock) > 0)
    21ee:	81 e8       	ldi	r24, 0x81	; 129
    21f0:	96 e0       	ldi	r25, 0x06	; 6
    21f2:	f8 01       	movw	r30, r16
    21f4:	64 85       	ldd	r22, Z+12	; 0x0c
    21f6:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN10W5100Class17getRXReceivedSizeEh>
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	21 f1       	breq	.+72     	; 0x2246 <__stack+0x47>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    21fe:	d8 01       	movw	r26, r16
    2200:	1c 96       	adiw	r26, 0x0c	; 12
    2202:	8c 91       	ld	r24, X
    2204:	be 01       	movw	r22, r28
    2206:	6f 5f       	subi	r22, 0xFF	; 255
    2208:	7f 4f       	sbci	r23, 0xFF	; 255
    220a:	48 e0       	ldi	r20, 0x08	; 8
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	0e 94 5f 13 	call	0x26be	; 0x26be <_Z4recvhPhi>
    if (ret > 0)
    2212:	18 16       	cp	r1, r24
    2214:	19 06       	cpc	r1, r25
    2216:	cc f4       	brge	.+50     	; 0x224a <__stack+0x4b>
    {
      _remoteIP = tmpBuf;
    2218:	c8 01       	movw	r24, r16
    221a:	0f 96       	adiw	r24, 0x0f	; 15
    221c:	be 01       	movw	r22, r28
    221e:	6f 5f       	subi	r22, 0xFF	; 255
    2220:	7f 4f       	sbci	r23, 0xFF	; 255
    2222:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    2226:	9d 81       	ldd	r25, Y+5	; 0x05
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	2e 81       	ldd	r18, Y+6	; 0x06
    222c:	82 0f       	add	r24, r18
    222e:	91 1d       	adc	r25, r1
    2230:	f8 01       	movw	r30, r16
    2232:	96 8b       	std	Z+22, r25	; 0x16
    2234:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    2236:	9f 81       	ldd	r25, Y+7	; 0x07
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	28 85       	ldd	r18, Y+8	; 0x08
    223c:	82 0f       	add	r24, r18
    223e:	91 1d       	adc	r25, r1
    2240:	92 8f       	std	Z+26, r25	; 0x1a
    2242:	81 8f       	std	Z+25, r24	; 0x19
    2244:	02 c0       	rjmp	.+4      	; 0x224a <__stack+0x4b>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	90 e0       	ldi	r25, 0x00	; 0
}
    224a:	28 96       	adiw	r28, 0x08	; 8
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	de bf       	out	0x3e, r29	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	cd bf       	out	0x3d, r28	; 61
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	1f 91       	pop	r17
    225c:	0f 91       	pop	r16
    225e:	08 95       	ret

00002260 <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	ec 01       	movw	r28, r24
    2266:	9b 01       	movw	r18, r22
    2268:	fa 01       	movw	r30, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    226a:	6f 89       	ldd	r22, Y+23	; 0x17
    226c:	78 8d       	ldd	r23, Y+24	; 0x18
    226e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2270:	a9 01       	movw	r20, r18
    2272:	9f 01       	movw	r18, r30
    2274:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    2278:	2f 89       	ldd	r18, Y+23	; 0x17
    227a:	38 8d       	ldd	r19, Y+24	; 0x18
    227c:	28 0f       	add	r18, r24
    227e:	39 1f       	adc	r19, r25
    2280:	38 8f       	std	Y+24, r19	; 0x18
    2282:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	08 95       	ret

0000228a <_ZN11EthernetUDP9endPacketEv>:
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    228a:	fc 01       	movw	r30, r24
    228c:	84 85       	ldd	r24, Z+12	; 0x0c
    228e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <_Z7sendUDPh>
}
    2292:	08 95       	ret

00002294 <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
    2294:	fc 01       	movw	r30, r24
  _offset = 0;
    2296:	10 8e       	std	Z+24, r1	; 0x18
    2298:	17 8a       	std	Z+23, r1	; 0x17
  return startUDP(_sock, rawIPAddress(ip), port);
    229a:	6e 5f       	subi	r22, 0xFE	; 254
    229c:	7f 4f       	sbci	r23, 0xFF	; 255
    229e:	84 85       	ldd	r24, Z+12	; 0x0c
    22a0:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <_Z8startUDPhPhj>
}
    22a4:	08 95       	ret

000022a6 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    22ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    22ae:	84 30       	cpi	r24, 0x04	; 4
    22b0:	61 f0       	breq	.+24     	; 0x22ca <_ZN11EthernetUDP4stopEv+0x24>
    return;

  close(_sock);
    22b2:	0e 94 20 12 	call	0x2440	; 0x2440 <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    22b6:	ec 85       	ldd	r30, Y+12	; 0x0c
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	ee 0f       	add	r30, r30
    22bc:	ff 1f       	adc	r31, r31
    22be:	e9 59       	subi	r30, 0x99	; 153
    22c0:	f9 4f       	sbci	r31, 0xF9	; 249
    22c2:	11 82       	std	Z+1, r1	; 0x01
    22c4:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    22c6:	84 e0       	ldi	r24, 0x04	; 4
    22c8:	8c 87       	std	Y+12, r24	; 0x0c
}
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	08 95       	ret

000022d0 <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    22d0:	cf 92       	push	r12
    22d2:	df 92       	push	r13
    22d4:	ef 92       	push	r14
    22d6:	ff 92       	push	r15
    22d8:	1f 93       	push	r17
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	7c 01       	movw	r14, r24
    22e0:	6b 01       	movw	r12, r22
  if (_sock != MAX_SOCK_NUM)
    22e2:	fc 01       	movw	r30, r24
    22e4:	84 85       	ldd	r24, Z+12	; 0x0c
    22e6:	84 30       	cpi	r24, 0x04	; 4
    22e8:	09 f5       	brne	.+66     	; 0x232c <_ZN11EthernetUDP5beginEj+0x5c>
    22ea:	c3 e0       	ldi	r28, 0x03	; 3
    22ec:	d4 e0       	ldi	r29, 0x04	; 4
    22ee:	10 e0       	ldi	r17, 0x00	; 0
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    22f0:	ce 01       	movw	r24, r28
    22f2:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = W5100.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    22f6:	88 23       	and	r24, r24
    22f8:	11 f0       	breq	.+4      	; 0x22fe <_ZN11EthernetUDP5beginEj+0x2e>
    22fa:	88 31       	cpi	r24, 0x18	; 24
    22fc:	19 f4       	brne	.+6      	; 0x2304 <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    22fe:	f7 01       	movw	r30, r14
    2300:	14 87       	std	Z+12, r17	; 0x0c
      break;
    2302:	05 c0       	rjmp	.+10     	; 0x230e <_ZN11EthernetUDP5beginEj+0x3e>
    2304:	1f 5f       	subi	r17, 0xFF	; 255
    2306:	c0 50       	subi	r28, 0x00	; 0
    2308:	df 4f       	sbci	r29, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    230a:	14 30       	cpi	r17, 0x04	; 4
    230c:	89 f7       	brne	.-30     	; 0x22f0 <_ZN11EthernetUDP5beginEj+0x20>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    230e:	f7 01       	movw	r30, r14
    2310:	84 85       	ldd	r24, Z+12	; 0x0c
    2312:	84 30       	cpi	r24, 0x04	; 4
    2314:	69 f0       	breq	.+26     	; 0x2330 <_ZN11EthernetUDP5beginEj+0x60>
    return 0;

  _port = port;
    2316:	d6 86       	std	Z+14, r13	; 0x0e
    2318:	c5 86       	std	Z+13, r12	; 0x0d
  _remaining = 0;
    231a:	12 8e       	std	Z+26, r1	; 0x1a
    231c:	11 8e       	std	Z+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    231e:	62 e0       	ldi	r22, 0x02	; 2
    2320:	a6 01       	movw	r20, r12
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	0e 94 37 12 	call	0x246e	; 0x246e <_Z6sockethhjh>

  return 1;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	03 c0       	rjmp	.+6      	; 0x2332 <_ZN11EthernetUDP5beginEj+0x62>
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	01 c0       	rjmp	.+2      	; 0x2332 <_ZN11EthernetUDP5beginEj+0x62>
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    return 0;
    2330:	80 e0       	ldi	r24, 0x00	; 0
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	1f 91       	pop	r17
    2338:	ff 90       	pop	r15
    233a:	ef 90       	pop	r14
    233c:	df 90       	pop	r13
    233e:	cf 90       	pop	r12
    2340:	08 95       	ret

00002342 <_ZN11EthernetUDPC1Ev>:
#include "Ethernet.h"
#include "..\Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    2342:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2344:	13 82       	std	Z+3, r1	; 0x03
    2346:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2348:	48 ee       	ldi	r20, 0xE8	; 232
    234a:	53 e0       	ldi	r21, 0x03	; 3
    234c:	60 e0       	ldi	r22, 0x00	; 0
    234e:	70 e0       	ldi	r23, 0x00	; 0
    2350:	44 83       	std	Z+4, r20	; 0x04
    2352:	55 83       	std	Z+5, r21	; 0x05
    2354:	66 83       	std	Z+6, r22	; 0x06
    2356:	77 83       	std	Z+7, r23	; 0x07
    2358:	8d ec       	ldi	r24, 0xCD	; 205
    235a:	92 e0       	ldi	r25, 0x02	; 2
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
    2360:	84 e0       	ldi	r24, 0x04	; 4
    2362:	84 87       	std	Z+12, r24	; 0x0c
    2364:	cf 01       	movw	r24, r30
    2366:	0f 96       	adiw	r24, 0x0f	; 15
    2368:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN9IPAddressC1Ev>
    236c:	08 95       	ret

0000236e <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    236e:	cf 92       	push	r12
    2370:	df 92       	push	r13
    2372:	ef 92       	push	r14
    2374:	ff 92       	push	r15
    2376:	0f 93       	push	r16
    2378:	1f 93       	push	r17
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	e5 97       	sbiw	r28, 0x35	; 53
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	de bf       	out	0x3e, r29	; 62
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	cd bf       	out	0x3d, r28	; 61
    238e:	7c 01       	movw	r14, r24
    2390:	8b 01       	movw	r16, r22
    2392:	6a 01       	movw	r12, r20
#ifndef DNSClient_h
#define DNSClient_h

#include "EthernetUdp.h"

class DNSClient
    2394:	ce 01       	movw	r24, r28
    2396:	43 96       	adiw	r24, 0x13	; 19
    2398:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN9IPAddressC1Ev>
    239c:	ce 01       	movw	r24, r28
    239e:	4b 96       	adiw	r24, 0x1b	; 27
    23a0:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    23a4:	ce 01       	movw	r24, r28
    23a6:	0d 96       	adiw	r24, 0x0d	; 13
    23a8:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    23ac:	ce 01       	movw	r24, r28
    23ae:	07 96       	adiw	r24, 0x07	; 7
    23b0:	6f e5       	ldi	r22, 0x5F	; 95
    23b2:	76 e0       	ldi	r23, 0x06	; 6
    23b4:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <_ZN13EthernetClass11dnsServerIPEv>
    23b8:	ce 01       	movw	r24, r28
    23ba:	43 96       	adiw	r24, 0x13	; 19
    23bc:	be 01       	movw	r22, r28
    23be:	69 5f       	subi	r22, 0xF9	; 249
    23c0:	7f 4f       	sbci	r23, 0xFF	; 255
    23c2:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    23c6:	ce 01       	movw	r24, r28
    23c8:	43 96       	adiw	r24, 0x13	; 19
    23ca:	b8 01       	movw	r22, r16
    23cc:	ae 01       	movw	r20, r28
    23ce:	43 5f       	subi	r20, 0xF3	; 243
    23d0:	5f 4f       	sbci	r21, 0xFF	; 255
    23d2:	0e 94 d4 3f 	call	0x7fa8	; 0x7fa8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	91 05       	cpc	r25, r1
    23da:	c1 f4       	brne	.+48     	; 0x240c <_ZN11EthernetUDP11beginPacketEPKcj+0x9e>
    return beginPacket(remote_addr, port);
    23dc:	d7 01       	movw	r26, r14
    23de:	ed 91       	ld	r30, X+
    23e0:	fc 91       	ld	r31, X
    23e2:	00 88       	ldd	r0, Z+16	; 0x10
    23e4:	f1 89       	ldd	r31, Z+17	; 0x11
    23e6:	e0 2d       	mov	r30, r0
    23e8:	8b e4       	ldi	r24, 0x4B	; 75
    23ea:	93 e0       	ldi	r25, 0x03	; 3
    23ec:	9a 83       	std	Y+2, r25	; 0x02
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f2:	98 89       	ldd	r25, Y+16	; 0x10
    23f4:	a9 89       	ldd	r26, Y+17	; 0x11
    23f6:	ba 89       	ldd	r27, Y+18	; 0x12
    23f8:	8b 83       	std	Y+3, r24	; 0x03
    23fa:	9c 83       	std	Y+4, r25	; 0x04
    23fc:	ad 83       	std	Y+5, r26	; 0x05
    23fe:	be 83       	std	Y+6, r27	; 0x06
    2400:	c7 01       	movw	r24, r14
    2402:	be 01       	movw	r22, r28
    2404:	6f 5f       	subi	r22, 0xFF	; 255
    2406:	7f 4f       	sbci	r23, 0xFF	; 255
    2408:	a6 01       	movw	r20, r12
    240a:	19 95       	eicall
  } else {
    return ret;
  }
}
    240c:	e5 96       	adiw	r28, 0x35	; 53
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	1f 91       	pop	r17
    241e:	0f 91       	pop	r16
    2420:	ff 90       	pop	r15
    2422:	ef 90       	pop	r14
    2424:	df 90       	pop	r13
    2426:	cf 90       	pop	r12
    2428:	08 95       	ret

0000242a <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:
  while (_remaining)
  {
	byte garbage[_remaining];
	read(garbage, _remaining);
  }
}
    242a:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    242c:	89 e7       	ldi	r24, 0x79	; 121
    242e:	96 e0       	ldi	r25, 0x06	; 6
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	00 e0       	ldi	r16, 0x00	; 0
    2438:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <_ZN9IPAddressC1Ehhhh>
    243c:	0f 91       	pop	r16
    243e:	08 95       	ret

00002440 <_Z5closeh>:

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
    2440:	1f 93       	push	r17
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	18 2f       	mov	r17, r24
  W5100.execCmdSn(s, Sock_CLOSE);
    2448:	81 e8       	ldi	r24, 0x81	; 129
    244a:	96 e0       	ldi	r25, 0x06	; 6
    244c:	61 2f       	mov	r22, r17
    244e:	40 e1       	ldi	r20, 0x10	; 16
    2450:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN10W5100Class9execCmdSnEh7SockCMD>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2454:	d1 2f       	mov	r29, r17
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	c8 2f       	mov	r28, r24
    245a:	ce 01       	movw	r24, r28
    245c:	8e 5f       	subi	r24, 0xFE	; 254
    245e:	9b 4f       	sbci	r25, 0xFB	; 251
    2460:	6f ef       	ldi	r22, 0xFF	; 255
    2462:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
  W5100.writeSnIR(s, 0xFF);
}
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	08 95       	ret

0000246e <_Z6sockethhjh>:
/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for W5100 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
{
    246e:	cf 92       	push	r12
    2470:	df 92       	push	r13
    2472:	ef 92       	push	r14
    2474:	ff 92       	push	r15
    2476:	1f 93       	push	r17
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	18 2f       	mov	r17, r24
    247e:	c6 2f       	mov	r28, r22
    2480:	7a 01       	movw	r14, r20
    2482:	d2 2f       	mov	r29, r18
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
    2484:	86 2f       	mov	r24, r22
    2486:	81 50       	subi	r24, 0x01	; 1
    2488:	85 30       	cpi	r24, 0x05	; 5
    248a:	b0 f5       	brcc	.+108    	; 0x24f8 <_Z6sockethhjh+0x8a>
  {
    close(s);
    248c:	81 2f       	mov	r24, r17
    248e:	0e 94 20 12 	call	0x2440	; 0x2440 <_Z5closeh>
    2492:	81 2f       	mov	r24, r17
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	04 96       	adiw	r24, 0x04	; 4
    2498:	d8 2e       	mov	r13, r24
    249a:	cc 24       	eor	r12, r12
    W5100.writeSnMR(s, protocol | flag);
    249c:	6d 2f       	mov	r22, r29
    249e:	6c 2b       	or	r22, r28
    24a0:	c6 01       	movw	r24, r12
    24a2:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    if (port != 0) {
    24a6:	e1 14       	cp	r14, r1
    24a8:	f1 04       	cpc	r15, r1
    24aa:	59 f0       	breq	.+22     	; 0x24c2 <_Z6sockethhjh+0x54>
    24ac:	c6 01       	movw	r24, r12
    24ae:	04 96       	adiw	r24, 0x04	; 4
    24b0:	6f 2d       	mov	r22, r15
    24b2:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    24b6:	c6 01       	movw	r24, r12
    24b8:	05 96       	adiw	r24, 0x05	; 5
    24ba:	6e 2d       	mov	r22, r14
    24bc:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    24c0:	13 c0       	rjmp	.+38     	; 0x24e8 <_Z6sockethhjh+0x7a>
      W5100.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
    24c2:	c0 91 7f 06 	lds	r28, 0x067F
    24c6:	d0 91 80 06 	lds	r29, 0x0680
    24ca:	21 96       	adiw	r28, 0x01	; 1
    24cc:	d0 93 80 06 	sts	0x0680, r29
    24d0:	c0 93 7f 06 	sts	0x067F, r28
    24d4:	c6 01       	movw	r24, r12
    24d6:	04 96       	adiw	r24, 0x04	; 4
    24d8:	6d 2f       	mov	r22, r29
    24da:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    24de:	c6 01       	movw	r24, r12
    24e0:	05 96       	adiw	r24, 0x05	; 5
    24e2:	6c 2f       	mov	r22, r28
    24e4:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
      W5100.writeSnPORT(s, local_port);
    }

    W5100.execCmdSn(s, Sock_OPEN);
    24e8:	81 e8       	ldi	r24, 0x81	; 129
    24ea:	96 e0       	ldi	r25, 0x06	; 6
    24ec:	61 2f       	mov	r22, r17
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN10W5100Class9execCmdSnEh7SockCMD>
    
    return 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <_Z6sockethhjh+0x8c>
  }

  return 0;
    24f8:	80 e0       	ldi	r24, 0x00	; 0
}
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	1f 91       	pop	r17
    2500:	ff 90       	pop	r15
    2502:	ef 90       	pop	r14
    2504:	df 90       	pop	r13
    2506:	cf 90       	pop	r12
    2508:	08 95       	ret

0000250a <_Z6listenh>:
/**
 * @brief	This function established  the connection for the channel in passive (server) mode. This function waits for the request from the peer.
 * @return	1 for success else 0.
 */
uint8_t listen(SOCKET s)
{
    250a:	cf 93       	push	r28
    250c:	c8 2f       	mov	r28, r24
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    250e:	38 2f       	mov	r19, r24
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	c9 01       	movw	r24, r18
    2514:	8d 5f       	subi	r24, 0xFD	; 253
    2516:	9b 4f       	sbci	r25, 0xFB	; 251
    2518:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  if (W5100.readSnSR(s) != SnSR::INIT)
    251c:	83 31       	cpi	r24, 0x13	; 19
    251e:	41 f4       	brne	.+16     	; 0x2530 <_Z6listenh+0x26>
    return 0;
  W5100.execCmdSn(s, Sock_LISTEN);
    2520:	81 e8       	ldi	r24, 0x81	; 129
    2522:	96 e0       	ldi	r25, 0x06	; 6
    2524:	6c 2f       	mov	r22, r28
    2526:	42 e0       	ldi	r20, 0x02	; 2
    2528:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN10W5100Class9execCmdSnEh7SockCMD>
  return 1;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	01 c0       	rjmp	.+2      	; 0x2532 <_Z6listenh+0x28>
 * @return	1 for success else 0.
 */
uint8_t listen(SOCKET s)
{
  if (W5100.readSnSR(s) != SnSR::INIT)
    return 0;
    2530:	80 e0       	ldi	r24, 0x00	; 0
  W5100.execCmdSn(s, Sock_LISTEN);
  return 1;
}
    2532:	cf 91       	pop	r28
    2534:	08 95       	ret

00002536 <_Z7connecthPhj>:
 * 		This function waits for the untill the connection is established.
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
    2536:	ef 92       	push	r14
    2538:	ff 92       	push	r15
    253a:	1f 93       	push	r17
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	18 2f       	mov	r17, r24
    2542:	fb 01       	movw	r30, r22
    2544:	7a 01       	movw	r14, r20
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    2546:	80 81       	ld	r24, Z
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    2548:	8f 3f       	cpi	r24, 0xFF	; 255
    254a:	51 f4       	brne	.+20     	; 0x2560 <_Z7connecthPhj+0x2a>
    254c:	81 81       	ldd	r24, Z+1	; 0x01
    254e:	8f 3f       	cpi	r24, 0xFF	; 255
    2550:	91 f4       	brne	.+36     	; 0x2576 <_Z7connecthPhj+0x40>
    2552:	82 81       	ldd	r24, Z+2	; 0x02
    2554:	8f 3f       	cpi	r24, 0xFF	; 255
    2556:	79 f4       	brne	.+30     	; 0x2576 <_Z7connecthPhj+0x40>
    2558:	83 81       	ldd	r24, Z+3	; 0x03
    255a:	8f 3f       	cpi	r24, 0xFF	; 255
    255c:	61 f4       	brne	.+24     	; 0x2576 <_Z7connecthPhj+0x40>
    255e:	2c c0       	rjmp	.+88     	; 0x25b8 <_Z7connecthPhj+0x82>
    2560:	88 23       	and	r24, r24
    2562:	49 f4       	brne	.+18     	; 0x2576 <_Z7connecthPhj+0x40>
    2564:	81 81       	ldd	r24, Z+1	; 0x01
    2566:	88 23       	and	r24, r24
    2568:	31 f4       	brne	.+12     	; 0x2576 <_Z7connecthPhj+0x40>
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	88 23       	and	r24, r24
    256e:	19 f4       	brne	.+6      	; 0x2576 <_Z7connecthPhj+0x40>
    2570:	83 81       	ldd	r24, Z+3	; 0x03
    2572:	88 23       	and	r24, r24
    2574:	19 f1       	breq	.+70     	; 0x25bc <_Z7connecthPhj+0x86>
    2576:	e1 14       	cp	r14, r1
    2578:	f1 04       	cpc	r15, r1
    257a:	11 f1       	breq	.+68     	; 0x25c0 <_Z7connecthPhj+0x8a>
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    257c:	c1 2f       	mov	r28, r17
    257e:	d0 e0       	ldi	r29, 0x00	; 0
    2580:	24 96       	adiw	r28, 0x04	; 4
    2582:	dc 2f       	mov	r29, r28
    2584:	cc 27       	eor	r28, r28
    2586:	ce 01       	movw	r24, r28
    2588:	0c 96       	adiw	r24, 0x0c	; 12
    258a:	bf 01       	movw	r22, r30
    258c:	44 e0       	ldi	r20, 0x04	; 4
    258e:	50 e0       	ldi	r21, 0x00	; 0
    2590:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2594:	ce 01       	movw	r24, r28
    2596:	40 96       	adiw	r24, 0x10	; 16
    2598:	6f 2d       	mov	r22, r15
    259a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    259e:	ce 01       	movw	r24, r28
    25a0:	41 96       	adiw	r24, 0x11	; 17
    25a2:	6e 2d       	mov	r22, r14
    25a4:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    return 0;

  // set destination IP
  W5100.writeSnDIPR(s, addr);
  W5100.writeSnDPORT(s, port);
  W5100.execCmdSn(s, Sock_CONNECT);
    25a8:	81 e8       	ldi	r24, 0x81	; 129
    25aa:	96 e0       	ldi	r25, 0x06	; 6
    25ac:	61 2f       	mov	r22, r17
    25ae:	44 e0       	ldi	r20, 0x04	; 4
    25b0:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN10W5100Class9execCmdSnEh7SockCMD>

  return 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	05 c0       	rjmp	.+10     	; 0x25c2 <_Z7connecthPhj+0x8c>
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    (port == 0x00) 
    ) 
    return 0;
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	03 c0       	rjmp	.+6      	; 0x25c2 <_Z7connecthPhj+0x8c>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	01 c0       	rjmp	.+2      	; 0x25c2 <_Z7connecthPhj+0x8c>
    25c0:	80 e0       	ldi	r24, 0x00	; 0
  W5100.writeSnDIPR(s, addr);
  W5100.writeSnDPORT(s, port);
  W5100.execCmdSn(s, Sock_CONNECT);

  return 1;
}
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	1f 91       	pop	r17
    25c8:	ff 90       	pop	r15
    25ca:	ef 90       	pop	r14
    25cc:	08 95       	ret

000025ce <_Z10disconnecth>:
/**
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
    25ce:	68 2f       	mov	r22, r24
  W5100.execCmdSn(s, Sock_DISCON);
    25d0:	81 e8       	ldi	r24, 0x81	; 129
    25d2:	96 e0       	ldi	r25, 0x06	; 6
    25d4:	48 e0       	ldi	r20, 0x08	; 8
    25d6:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
    25da:	08 95       	ret

000025dc <_Z4sendhPKhj>:
/**
 * @brief	This function used to send the data in TCP mode
 * @return	1 for success else 0.
 */
uint16_t send(SOCKET s, const uint8_t * buf, uint16_t len)
{
    25dc:	6f 92       	push	r6
    25de:	7f 92       	push	r7
    25e0:	8f 92       	push	r8
    25e2:	9f 92       	push	r9
    25e4:	af 92       	push	r10
    25e6:	bf 92       	push	r11
    25e8:	cf 92       	push	r12
    25ea:	df 92       	push	r13
    25ec:	ef 92       	push	r14
    25ee:	ff 92       	push	r15
    25f0:	0f 93       	push	r16
    25f2:	1f 93       	push	r17
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
    25f8:	f8 2e       	mov	r15, r24
    25fa:	3b 01       	movw	r6, r22
  {
    /* m2008.01 [bj] : reduce code */
    if ( W5100.readSnSR(s) == SnSR::CLOSED )
    {
      close(s);
      return 0;
    25fc:	a4 2e       	mov	r10, r20
    25fe:	b5 2e       	mov	r11, r21
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	a8 16       	cp	r10, r24
    2604:	88 e0       	ldi	r24, 0x08	; 8
    2606:	b8 06       	cpc	r11, r24
    2608:	20 f0       	brcs	.+8      	; 0x2612 <_Z4sendhPKhj+0x36>
    260a:	aa 24       	eor	r10, r10
    260c:	bb 24       	eor	r11, r11
    260e:	68 94       	set
    2610:	b3 f8       	bld	r11, 3
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2612:	cf 2d       	mov	r28, r15
    2614:	d0 e0       	ldi	r29, 0x00	; 0
    2616:	24 96       	adiw	r28, 0x04	; 4
    2618:	9c 2e       	mov	r9, r28
    261a:	88 24       	eor	r8, r8
    261c:	84 01       	movw	r16, r8
    261e:	0d 5f       	subi	r16, 0xFD	; 253
    2620:	1f 4f       	sbci	r17, 0xFF	; 255
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = W5100.getTXFreeSize(s);
    2622:	0f 2e       	mov	r0, r31
    2624:	f1 e8       	ldi	r31, 0x81	; 129
    2626:	cf 2e       	mov	r12, r31
    2628:	f6 e0       	ldi	r31, 0x06	; 6
    262a:	df 2e       	mov	r13, r31
    262c:	f0 2d       	mov	r31, r0
    262e:	c6 01       	movw	r24, r12
    2630:	6f 2d       	mov	r22, r15
    2632:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <_ZN10W5100Class13getTXFreeSizeEh>
    2636:	ec 01       	movw	r28, r24
    2638:	c8 01       	movw	r24, r16
    263a:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
    status = W5100.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    263e:	87 31       	cpi	r24, 0x17	; 23
    2640:	11 f0       	breq	.+4      	; 0x2646 <_Z4sendhPKhj+0x6a>
    2642:	8c 31       	cpi	r24, 0x1C	; 28
    2644:	21 f4       	brne	.+8      	; 0x264e <_Z4sendhPKhj+0x72>
    ret = W5100.SSIZE; // check size not to exceed MAX size.
  else 
    ret = len;

  // if freebuf is available, start.
  do 
    2646:	ca 15       	cp	r28, r10
    2648:	db 05       	cpc	r29, r11
    264a:	88 f3       	brcs	.-30     	; 0x262e <_Z4sendhPKhj+0x52>
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <_Z4sendhPKhj+0x76>
  {
    freesize = W5100.getTXFreeSize(s);
    status = W5100.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    264e:	aa 24       	eor	r10, r10
    2650:	bb 24       	eor	r11, r11
    }
  } 
  while (freesize < ret);

  // copy data
  W5100.send_data_processing(s, (uint8_t *)buf, ret);
    2652:	c1 e8       	ldi	r28, 0x81	; 129
    2654:	d6 e0       	ldi	r29, 0x06	; 6
    2656:	ce 01       	movw	r24, r28
    2658:	6f 2d       	mov	r22, r15
    265a:	a3 01       	movw	r20, r6
    265c:	95 01       	movw	r18, r10
    265e:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <_ZN10W5100Class20send_data_processingEhPKhj>
  W5100.execCmdSn(s, Sock_SEND);
    2662:	ce 01       	movw	r24, r28
    2664:	6f 2d       	mov	r22, r15
    2666:	40 e2       	ldi	r20, 0x20	; 32
    2668:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN10W5100Class9execCmdSnEh7SockCMD>
    266c:	e4 01       	movw	r28, r8
    266e:	22 96       	adiw	r28, 0x02	; 2

  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    2670:	0b c0       	rjmp	.+22     	; 0x2688 <_Z4sendhPKhj+0xac>
    2672:	c8 01       	movw	r24, r16
    2674:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  {
    /* m2008.01 [bj] : reduce code */
    if ( W5100.readSnSR(s) == SnSR::CLOSED )
    2678:	88 23       	and	r24, r24
    267a:	31 f4       	brne	.+12     	; 0x2688 <_Z4sendhPKhj+0xac>
    {
      close(s);
    267c:	8f 2d       	mov	r24, r15
    267e:	0e 94 20 12 	call	0x2440	; 0x2440 <_Z5closeh>
      return 0;
    2682:	aa 24       	eor	r10, r10
    2684:	bb 24       	eor	r11, r11
    2686:	0a c0       	rjmp	.+20     	; 0x269c <_Z4sendhPKhj+0xc0>
    2688:	ce 01       	movw	r24, r28
    268a:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  // copy data
  W5100.send_data_processing(s, (uint8_t *)buf, ret);
  W5100.execCmdSn(s, Sock_SEND);

  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    268e:	84 ff       	sbrs	r24, 4
    2690:	f0 cf       	rjmp	.-32     	; 0x2672 <_Z4sendhPKhj+0x96>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2692:	8c 2f       	mov	r24, r28
    2694:	9d 2f       	mov	r25, r29
    2696:	60 e1       	ldi	r22, 0x10	; 16
    2698:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    }
  }
  /* +2008.01 bj */
  W5100.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    269c:	8a 2d       	mov	r24, r10
    269e:	9b 2d       	mov	r25, r11
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	1f 91       	pop	r17
    26a6:	0f 91       	pop	r16
    26a8:	ff 90       	pop	r15
    26aa:	ef 90       	pop	r14
    26ac:	df 90       	pop	r13
    26ae:	cf 90       	pop	r12
    26b0:	bf 90       	pop	r11
    26b2:	af 90       	pop	r10
    26b4:	9f 90       	pop	r9
    26b6:	8f 90       	pop	r8
    26b8:	7f 90       	pop	r7
    26ba:	6f 90       	pop	r6
    26bc:	08 95       	ret

000026be <_Z4recvhPhi>:
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
    26be:	af 92       	push	r10
    26c0:	bf 92       	push	r11
    26c2:	cf 92       	push	r12
    26c4:	df 92       	push	r13
    26c6:	ef 92       	push	r14
    26c8:	ff 92       	push	r15
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	18 2f       	mov	r17, r24
    26d4:	6b 01       	movw	r12, r22
    26d6:	ea 01       	movw	r28, r20
  // Check how much data is available
  int16_t ret = W5100.getRXReceivedSize(s);
    26d8:	81 e8       	ldi	r24, 0x81	; 129
    26da:	96 e0       	ldi	r25, 0x06	; 6
    26dc:	61 2f       	mov	r22, r17
    26de:	0e 94 22 17 	call	0x2e44	; 0x2e44 <_ZN10W5100Class17getRXReceivedSizeEh>
    26e2:	e8 2e       	mov	r14, r24
    26e4:	f9 2e       	mov	r15, r25
  if ( ret == 0 )
    26e6:	e1 14       	cp	r14, r1
    26e8:	f1 04       	cpc	r15, r1
    26ea:	71 f4       	brne	.+28     	; 0x2708 <_Z4recvhPhi+0x4a>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    26ec:	b1 2e       	mov	r11, r17
    26ee:	aa 24       	eor	r10, r10
    26f0:	c5 01       	movw	r24, r10
    26f2:	8d 5f       	subi	r24, 0xFD	; 253
    26f4:	9b 4f       	sbci	r25, 0xFB	; 251
    26f6:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  {
    // No data available.
    uint8_t status = W5100.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
    26fa:	84 31       	cpi	r24, 0x14	; 20
    26fc:	d1 f0       	breq	.+52     	; 0x2732 <_Z4recvhPhi+0x74>
    26fe:	88 23       	and	r24, r24
    2700:	c1 f0       	breq	.+48     	; 0x2732 <_Z4recvhPhi+0x74>
    2702:	8c 31       	cpi	r24, 0x1C	; 28
    2704:	b1 f0       	breq	.+44     	; 0x2732 <_Z4recvhPhi+0x74>
    2706:	22 c0       	rjmp	.+68     	; 0x274c <_Z4recvhPhi+0x8e>
    2708:	ce 15       	cp	r28, r14
    270a:	df 05       	cpc	r29, r15
    270c:	0c f4       	brge	.+2      	; 0x2710 <_Z4recvhPhi+0x52>
    270e:	7e 01       	movw	r14, r28
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
    2710:	1e 14       	cp	r1, r14
    2712:	1f 04       	cpc	r1, r15
    2714:	74 f4       	brge	.+28     	; 0x2732 <_Z4recvhPhi+0x74>
  {
    W5100.recv_data_processing(s, buf, ret);
    2716:	c1 e8       	ldi	r28, 0x81	; 129
    2718:	d6 e0       	ldi	r29, 0x06	; 6
    271a:	ce 01       	movw	r24, r28
    271c:	61 2f       	mov	r22, r17
    271e:	a6 01       	movw	r20, r12
    2720:	97 01       	movw	r18, r14
    2722:	00 e0       	ldi	r16, 0x00	; 0
    2724:	0e 94 7d 18 	call	0x30fa	; 0x30fa <_ZN10W5100Class20recv_data_processingEhPhjh>
    W5100.execCmdSn(s, Sock_RECV);
    2728:	ce 01       	movw	r24, r28
    272a:	61 2f       	mov	r22, r17
    272c:	40 e4       	ldi	r20, 0x40	; 64
    272e:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN10W5100Class9execCmdSnEh7SockCMD>
  }
  return ret;
}
    2732:	8e 2d       	mov	r24, r14
    2734:	9f 2d       	mov	r25, r15
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	1f 91       	pop	r17
    273c:	0f 91       	pop	r16
    273e:	ff 90       	pop	r15
    2740:	ef 90       	pop	r14
    2742:	df 90       	pop	r13
    2744:	cf 90       	pop	r12
    2746:	bf 90       	pop	r11
    2748:	af 90       	pop	r10
    274a:	08 95       	ret
      ret = 0;
    }
    else
    {
      // The connection is still up, but there's no data waiting to be read
      ret = -1;
    274c:	ee 24       	eor	r14, r14
    274e:	ea 94       	dec	r14
    2750:	fe 2c       	mov	r15, r14
    2752:	ef cf       	rjmp	.-34     	; 0x2732 <_Z4recvhPhi+0x74>

00002754 <_Z4peekhPh>:
 * @brief	Returns the first byte in the receive queue (no checking)
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
    2754:	0f 93       	push	r16
    2756:	28 2f       	mov	r18, r24
    2758:	ab 01       	movw	r20, r22
  W5100.recv_data_processing(s, buf, 1, 1);
    275a:	81 e8       	ldi	r24, 0x81	; 129
    275c:	96 e0       	ldi	r25, 0x06	; 6
    275e:	62 2f       	mov	r22, r18
    2760:	21 e0       	ldi	r18, 0x01	; 1
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	01 e0       	ldi	r16, 0x01	; 1
    2766:	0e 94 7d 18 	call	0x30fa	; 0x30fa <_ZN10W5100Class20recv_data_processingEhPhjh>

  return 1;
}
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	0f 91       	pop	r16
    2770:	08 95       	ret

00002772 <_Z6sendtohPKhjPhj>:
 * 		Unlike TCP transmission, The peer's destination address and the port is needed.
 * 		
 * @return	This function return send data size for success else -1.
 */
uint16_t sendto(SOCKET s, const uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t port)
{
    2772:	af 92       	push	r10
    2774:	bf 92       	push	r11
    2776:	cf 92       	push	r12
    2778:	df 92       	push	r13
    277a:	ff 92       	push	r15
    277c:	0f 93       	push	r16
    277e:	1f 93       	push	r17
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	f8 2e       	mov	r15, r24
    2786:	5b 01       	movw	r10, r22
    2788:	f9 01       	movw	r30, r18
    278a:	68 01       	movw	r12, r16
  uint16_t ret=0;

  if (len > W5100.SSIZE) ret = W5100.SSIZE; // check size not to exceed MAX size.
  else ret = len;

  if
    278c:	80 81       	ld	r24, Z
    278e:	88 23       	and	r24, r24
    2790:	51 f4       	brne	.+20     	; 0x27a6 <_Z6sendtohPKhjPhj+0x34>
    2792:	81 81       	ldd	r24, Z+1	; 0x01
    2794:	88 23       	and	r24, r24
    2796:	39 f4       	brne	.+14     	; 0x27a6 <_Z6sendtohPKhjPhj+0x34>
    2798:	82 81       	ldd	r24, Z+2	; 0x02
    279a:	88 23       	and	r24, r24
    279c:	21 f4       	brne	.+8      	; 0x27a6 <_Z6sendtohPKhjPhj+0x34>
    279e:	83 81       	ldd	r24, Z+3	; 0x03
    27a0:	88 23       	and	r24, r24
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <_Z6sendtohPKhjPhj+0x34>
    27a4:	53 c0       	rjmp	.+166    	; 0x284c <_Z6sendtohPKhjPhj+0xda>
    27a6:	c1 14       	cp	r12, r1
    27a8:	d1 04       	cpc	r13, r1
    27aa:	09 f4       	brne	.+2      	; 0x27ae <_Z6sendtohPKhjPhj+0x3c>
    27ac:	52 c0       	rjmp	.+164    	; 0x2852 <_Z6sendtohPKhjPhj+0xe0>
    27ae:	04 2f       	mov	r16, r20
    27b0:	15 2f       	mov	r17, r21
    27b2:	88 e0       	ldi	r24, 0x08	; 8
    27b4:	01 30       	cpi	r16, 0x01	; 1
    27b6:	18 07       	cpc	r17, r24
    27b8:	10 f0       	brcs	.+4      	; 0x27be <_Z6sendtohPKhjPhj+0x4c>
    27ba:	00 e0       	ldi	r16, 0x00	; 0
    27bc:	18 e0       	ldi	r17, 0x08	; 8
    27be:	01 15       	cp	r16, r1
    27c0:	11 05       	cpc	r17, r1
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <_Z6sendtohPKhjPhj+0x54>
    27c4:	48 c0       	rjmp	.+144    	; 0x2856 <_Z6sendtohPKhjPhj+0xe4>
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    27c6:	cf 2d       	mov	r28, r15
    27c8:	d0 e0       	ldi	r29, 0x00	; 0
    27ca:	24 96       	adiw	r28, 0x04	; 4
    27cc:	dc 2f       	mov	r29, r28
    27ce:	cc 27       	eor	r28, r28
    27d0:	ce 01       	movw	r24, r28
    27d2:	0c 96       	adiw	r24, 0x0c	; 12
    27d4:	bf 01       	movw	r22, r30
    27d6:	44 e0       	ldi	r20, 0x04	; 4
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    27de:	ce 01       	movw	r24, r28
    27e0:	40 96       	adiw	r24, 0x10	; 16
    27e2:	6d 2d       	mov	r22, r13
    27e4:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    27e8:	ce 01       	movw	r24, r28
    27ea:	41 96       	adiw	r24, 0x11	; 17
    27ec:	6c 2d       	mov	r22, r12
    27ee:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
  {
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);

    // copy data
    W5100.send_data_processing(s, (uint8_t *)buf, ret);
    27f2:	0f 2e       	mov	r0, r31
    27f4:	f1 e8       	ldi	r31, 0x81	; 129
    27f6:	cf 2e       	mov	r12, r31
    27f8:	f6 e0       	ldi	r31, 0x06	; 6
    27fa:	df 2e       	mov	r13, r31
    27fc:	f0 2d       	mov	r31, r0
    27fe:	c6 01       	movw	r24, r12
    2800:	6f 2d       	mov	r22, r15
    2802:	a5 01       	movw	r20, r10
    2804:	98 01       	movw	r18, r16
    2806:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <_ZN10W5100Class20send_data_processingEhPKhj>
    W5100.execCmdSn(s, Sock_SEND);
    280a:	c6 01       	movw	r24, r12
    280c:	6f 2d       	mov	r22, r15
    280e:	40 e2       	ldi	r20, 0x20	; 32
    2810:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN10W5100Class9execCmdSnEh7SockCMD>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2814:	22 96       	adiw	r28, 0x02	; 2

    /* +2008.01 bj */
    while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    2816:	0d c0       	rjmp	.+26     	; 0x2832 <_Z6sendtohPKhjPhj+0xc0>
    2818:	ce 01       	movw	r24, r28
    281a:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
    {
      if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    281e:	83 ff       	sbrs	r24, 3
    2820:	08 c0       	rjmp	.+16     	; 0x2832 <_Z6sendtohPKhjPhj+0xc0>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2822:	8f 2d       	mov	r24, r15
    2824:	9c 2d       	mov	r25, r12
    2826:	68 e1       	ldi	r22, 0x18	; 24
    2828:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
      {
        /* +2008.01 [bj]: clear interrupt */
        W5100.writeSnIR(s, (SnIR::SEND_OK | SnIR::TIMEOUT)); /* clear SEND_OK & TIMEOUT */
        return 0;
    282c:	00 e0       	ldi	r16, 0x00	; 0
    282e:	10 e0       	ldi	r17, 0x00	; 0
    2830:	12 c0       	rjmp	.+36     	; 0x2856 <_Z6sendtohPKhjPhj+0xe4>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2832:	fc 2e       	mov	r15, r28
    2834:	cd 2e       	mov	r12, r29
    2836:	ce 01       	movw	r24, r28
    2838:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
    // copy data
    W5100.send_data_processing(s, (uint8_t *)buf, ret);
    W5100.execCmdSn(s, Sock_SEND);

    /* +2008.01 bj */
    while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    283c:	84 ff       	sbrs	r24, 4
    283e:	ec cf       	rjmp	.-40     	; 0x2818 <_Z6sendtohPKhjPhj+0xa6>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2840:	8c 2f       	mov	r24, r28
    2842:	9d 2f       	mov	r25, r29
    2844:	60 e1       	ldi	r22, 0x10	; 16
    2846:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    284a:	05 c0       	rjmp	.+10     	; 0x2856 <_Z6sendtohPKhjPhj+0xe4>
  ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    ((port == 0x00)) ||(ret == 0)
    ) 
  {
    /* +2008.01 [bj] : added return value */
    ret = 0;
    284c:	00 e0       	ldi	r16, 0x00	; 0
    284e:	10 e0       	ldi	r17, 0x00	; 0
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <_Z6sendtohPKhjPhj+0xe4>
    2852:	00 e0       	ldi	r16, 0x00	; 0
    2854:	10 e0       	ldi	r17, 0x00	; 0

    /* +2008.01 bj */
    W5100.writeSnIR(s, SnIR::SEND_OK);
  }
  return ret;
}
    2856:	80 2f       	mov	r24, r16
    2858:	91 2f       	mov	r25, r17
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	1f 91       	pop	r17
    2860:	0f 91       	pop	r16
    2862:	ff 90       	pop	r15
    2864:	df 90       	pop	r13
    2866:	cf 90       	pop	r12
    2868:	bf 90       	pop	r11
    286a:	af 90       	pop	r10
    286c:	08 95       	ret

0000286e <_Z8recvfromhPhjS_Pj>:
 * 	TCP mode. This function is used to receive UDP, IP_RAW and MAC_RAW mode, and handle the header as well. 
 * 	
 * @return	This function return received data size for success else -1.
 */
uint16_t recvfrom(SOCKET s, uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t *port)
{
    286e:	2f 92       	push	r2
    2870:	3f 92       	push	r3
    2872:	4f 92       	push	r4
    2874:	5f 92       	push	r5
    2876:	6f 92       	push	r6
    2878:	7f 92       	push	r7
    287a:	8f 92       	push	r8
    287c:	9f 92       	push	r9
    287e:	af 92       	push	r10
    2880:	bf 92       	push	r11
    2882:	df 92       	push	r13
    2884:	ef 92       	push	r14
    2886:	ff 92       	push	r15
    2888:	0f 93       	push	r16
    288a:	1f 93       	push	r17
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	2a 97       	sbiw	r28, 0x0a	; 10
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	d8 2e       	mov	r13, r24
    28a2:	3b 01       	movw	r6, r22
    28a4:	59 01       	movw	r10, r18
    28a6:	48 01       	movw	r8, r16
  uint8_t head[8];
  uint16_t data_len=0;
  uint16_t ptr=0;

  if ( len > 0 )
    28a8:	41 15       	cp	r20, r1
    28aa:	51 05       	cpc	r21, r1
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <_Z8recvfromhPhjS_Pj+0x42>
    28ae:	e2 c0       	rjmp	.+452    	; 0x2a74 <_Z8recvfromhPhjS_Pj+0x206>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    28b0:	08 2f       	mov	r16, r24
    28b2:	10 e0       	ldi	r17, 0x00	; 0
    28b4:	0c 5f       	subi	r16, 0xFC	; 252
    28b6:	1f 4f       	sbci	r17, 0xFF	; 255
    28b8:	10 2f       	mov	r17, r16
    28ba:	00 27       	eor	r16, r16
    28bc:	0f 2e       	mov	r0, r31
    28be:	f8 e2       	ldi	r31, 0x28	; 40
    28c0:	4f 2e       	mov	r4, r31
    28c2:	55 24       	eor	r5, r5
    28c4:	f0 2d       	mov	r31, r0
    28c6:	40 0e       	add	r4, r16
    28c8:	51 1e       	adc	r5, r17
    28ca:	c2 01       	movw	r24, r4
    28cc:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
    28d0:	e8 2e       	mov	r14, r24
    28d2:	0f 2e       	mov	r0, r31
    28d4:	f9 e2       	ldi	r31, 0x29	; 41
    28d6:	2f 2e       	mov	r2, r31
    28d8:	33 24       	eor	r3, r3
    28da:	f0 2d       	mov	r31, r0
    28dc:	20 0e       	add	r2, r16
    28de:	31 1e       	adc	r3, r17
    28e0:	c1 01       	movw	r24, r2
    28e2:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
    28e6:	28 2f       	mov	r18, r24
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	9e 2d       	mov	r25, r14
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	79 01       	movw	r14, r18
    28f0:	e8 2a       	or	r14, r24
    28f2:	f9 2a       	or	r15, r25
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    28f4:	c8 01       	movw	r24, r16
    28f6:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  {
    ptr = W5100.readSnRX_RD(s);
    switch (W5100.readSnMR(s) & 0x07)
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	87 70       	andi	r24, 0x07	; 7
    28fe:	90 70       	andi	r25, 0x00	; 0
    2900:	83 30       	cpi	r24, 0x03	; 3
    2902:	91 05       	cpc	r25, r1
    2904:	09 f4       	brne	.+2      	; 0x2908 <_Z8recvfromhPhjS_Pj+0x9a>
    2906:	44 c0       	rjmp	.+136    	; 0x2990 <_Z8recvfromhPhjS_Pj+0x122>
    2908:	84 30       	cpi	r24, 0x04	; 4
    290a:	91 05       	cpc	r25, r1
    290c:	09 f4       	brne	.+2      	; 0x2910 <_Z8recvfromhPhjS_Pj+0xa2>
    290e:	78 c0       	rjmp	.+240    	; 0x2a00 <_Z8recvfromhPhjS_Pj+0x192>
    2910:	82 30       	cpi	r24, 0x02	; 2
    2912:	91 05       	cpc	r25, r1
    2914:	09 f0       	breq	.+2      	; 0x2918 <_Z8recvfromhPhjS_Pj+0xaa>
    2916:	a5 c0       	rjmp	.+330    	; 0x2a62 <_Z8recvfromhPhjS_Pj+0x1f4>
    {
    case SnMR::UDP :
      W5100.read_data(s, (uint8_t *)ptr, head, 0x08);
    2918:	81 e8       	ldi	r24, 0x81	; 129
    291a:	96 e0       	ldi	r25, 0x06	; 6
    291c:	6d 2d       	mov	r22, r13
    291e:	a7 01       	movw	r20, r14
    2920:	9e 01       	movw	r18, r28
    2922:	2f 5f       	subi	r18, 0xFF	; 255
    2924:	3f 4f       	sbci	r19, 0xFF	; 255
    2926:	08 e0       	ldi	r16, 0x08	; 8
    2928:	10 e0       	ldi	r17, 0x00	; 0
    292a:	0e 94 2f 18 	call	0x305e	; 0x305e <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += 8;
    292e:	c7 01       	movw	r24, r14
    2930:	08 96       	adiw	r24, 0x08	; 8
    2932:	9a 87       	std	Y+10, r25	; 0x0a
    2934:	89 87       	std	Y+9, r24	; 0x09
      // read peer's IP address, port number.
      addr[0] = head[0];
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	f5 01       	movw	r30, r10
    293a:	80 83       	st	Z, r24
      addr[1] = head[1];
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	81 83       	std	Z+1, r24	; 0x01
      addr[2] = head[2];
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	82 83       	std	Z+2, r24	; 0x02
      addr[3] = head[3];
    2944:	8c 81       	ldd	r24, Y+4	; 0x04
    2946:	83 83       	std	Z+3, r24	; 0x03
      *port = head[4];
      *port = (*port << 8) + head[5];
    2948:	9d 81       	ldd	r25, Y+5	; 0x05
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	2e 81       	ldd	r18, Y+6	; 0x06
    294e:	82 0f       	add	r24, r18
    2950:	91 1d       	adc	r25, r1
    2952:	f4 01       	movw	r30, r8
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	80 83       	st	Z, r24
      data_len = head[6];
      data_len = (data_len << 8) + head[7];
    2958:	9f 81       	ldd	r25, Y+7	; 0x07
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	28 85       	ldd	r18, Y+8	; 0x08
    295e:	7c 01       	movw	r14, r24
    2960:	e2 0e       	add	r14, r18
    2962:	f1 1c       	adc	r15, r1

      W5100.read_data(s, (uint8_t *)ptr, buf, data_len); // data copy.
    2964:	81 e8       	ldi	r24, 0x81	; 129
    2966:	96 e0       	ldi	r25, 0x06	; 6
    2968:	6d 2d       	mov	r22, r13
    296a:	49 85       	ldd	r20, Y+9	; 0x09
    296c:	5a 85       	ldd	r21, Y+10	; 0x0a
    296e:	93 01       	movw	r18, r6
    2970:	87 01       	movw	r16, r14
    2972:	0e 94 2f 18 	call	0x305e	; 0x305e <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += data_len;
    2976:	09 85       	ldd	r16, Y+9	; 0x09
    2978:	1a 85       	ldd	r17, Y+10	; 0x0a
    297a:	0e 0d       	add	r16, r14
    297c:	1f 1d       	adc	r17, r15
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    297e:	c2 01       	movw	r24, r4
    2980:	61 2f       	mov	r22, r17
    2982:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    2986:	c1 01       	movw	r24, r2
    2988:	60 2f       	mov	r22, r16
    298a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    298e:	6b c0       	rjmp	.+214    	; 0x2a66 <_Z8recvfromhPhjS_Pj+0x1f8>

      W5100.writeSnRX_RD(s, ptr);
      break;

    case SnMR::IPRAW :
      W5100.read_data(s, (uint8_t *)ptr, head, 0x06);
    2990:	0f 2e       	mov	r0, r31
    2992:	f1 e8       	ldi	r31, 0x81	; 129
    2994:	8f 2e       	mov	r8, r31
    2996:	f6 e0       	ldi	r31, 0x06	; 6
    2998:	9f 2e       	mov	r9, r31
    299a:	f0 2d       	mov	r31, r0
    299c:	c4 01       	movw	r24, r8
    299e:	6d 2d       	mov	r22, r13
    29a0:	a7 01       	movw	r20, r14
    29a2:	9e 01       	movw	r18, r28
    29a4:	2f 5f       	subi	r18, 0xFF	; 255
    29a6:	3f 4f       	sbci	r19, 0xFF	; 255
    29a8:	06 e0       	ldi	r16, 0x06	; 6
    29aa:	10 e0       	ldi	r17, 0x00	; 0
    29ac:	0e 94 2f 18 	call	0x305e	; 0x305e <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += 6;
    29b0:	c7 01       	movw	r24, r14
    29b2:	06 96       	adiw	r24, 0x06	; 6
    29b4:	9a 87       	std	Y+10, r25	; 0x0a
    29b6:	89 87       	std	Y+9, r24	; 0x09

      addr[0] = head[0];
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	f5 01       	movw	r30, r10
    29bc:	80 83       	st	Z, r24
      addr[1] = head[1];
    29be:	8a 81       	ldd	r24, Y+2	; 0x02
    29c0:	81 83       	std	Z+1, r24	; 0x01
      addr[2] = head[2];
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	82 83       	std	Z+2, r24	; 0x02
      addr[3] = head[3];
    29c6:	8c 81       	ldd	r24, Y+4	; 0x04
    29c8:	83 83       	std	Z+3, r24	; 0x03
      data_len = head[4];
      data_len = (data_len << 8) + head[5];
    29ca:	9d 81       	ldd	r25, Y+5	; 0x05
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	2e 81       	ldd	r18, Y+6	; 0x06
    29d0:	7c 01       	movw	r14, r24
    29d2:	e2 0e       	add	r14, r18
    29d4:	f1 1c       	adc	r15, r1

      W5100.read_data(s, (uint8_t *)ptr, buf, data_len); // data copy.
    29d6:	c4 01       	movw	r24, r8
    29d8:	6d 2d       	mov	r22, r13
    29da:	49 85       	ldd	r20, Y+9	; 0x09
    29dc:	5a 85       	ldd	r21, Y+10	; 0x0a
    29de:	93 01       	movw	r18, r6
    29e0:	87 01       	movw	r16, r14
    29e2:	0e 94 2f 18 	call	0x305e	; 0x305e <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += data_len;
    29e6:	09 85       	ldd	r16, Y+9	; 0x09
    29e8:	1a 85       	ldd	r17, Y+10	; 0x0a
    29ea:	0e 0d       	add	r16, r14
    29ec:	1f 1d       	adc	r17, r15
    29ee:	c2 01       	movw	r24, r4
    29f0:	61 2f       	mov	r22, r17
    29f2:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    29f6:	c1 01       	movw	r24, r2
    29f8:	60 2f       	mov	r22, r16
    29fa:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    29fe:	33 c0       	rjmp	.+102    	; 0x2a66 <_Z8recvfromhPhjS_Pj+0x1f8>

      W5100.writeSnRX_RD(s, ptr);
      break;

    case SnMR::MACRAW:
      W5100.read_data(s,(uint8_t*)ptr,head,2);
    2a00:	0f 2e       	mov	r0, r31
    2a02:	f1 e8       	ldi	r31, 0x81	; 129
    2a04:	8f 2e       	mov	r8, r31
    2a06:	f6 e0       	ldi	r31, 0x06	; 6
    2a08:	9f 2e       	mov	r9, r31
    2a0a:	f0 2d       	mov	r31, r0
    2a0c:	c4 01       	movw	r24, r8
    2a0e:	6d 2d       	mov	r22, r13
    2a10:	a7 01       	movw	r20, r14
    2a12:	9e 01       	movw	r18, r28
    2a14:	2f 5f       	subi	r18, 0xFF	; 255
    2a16:	3f 4f       	sbci	r19, 0xFF	; 255
    2a18:	02 e0       	ldi	r16, 0x02	; 2
    2a1a:	10 e0       	ldi	r17, 0x00	; 0
    2a1c:	0e 94 2f 18 	call	0x305e	; 0x305e <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr+=2;
    2a20:	aa 24       	eor	r10, r10
    2a22:	bb 24       	eor	r11, r11
    2a24:	68 94       	set
    2a26:	a1 f8       	bld	r10, 1
    2a28:	ae 0c       	add	r10, r14
    2a2a:	bf 1c       	adc	r11, r15
      data_len = head[0];
      data_len = (data_len<<8) + head[1] - 2;
    2a2c:	39 81       	ldd	r19, Y+1	; 0x01
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	02 97       	sbiw	r24, 0x02	; 2
    2a36:	7c 01       	movw	r14, r24
    2a38:	e2 0e       	add	r14, r18
    2a3a:	f3 1e       	adc	r15, r19

      W5100.read_data(s,(uint8_t*) ptr,buf,data_len);
    2a3c:	c4 01       	movw	r24, r8
    2a3e:	6d 2d       	mov	r22, r13
    2a40:	a5 01       	movw	r20, r10
    2a42:	93 01       	movw	r18, r6
    2a44:	87 01       	movw	r16, r14
    2a46:	0e 94 2f 18 	call	0x305e	; 0x305e <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += data_len;
    2a4a:	85 01       	movw	r16, r10
    2a4c:	0e 0d       	add	r16, r14
    2a4e:	1f 1d       	adc	r17, r15
    2a50:	c2 01       	movw	r24, r4
    2a52:	61 2f       	mov	r22, r17
    2a54:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    2a58:	c1 01       	movw	r24, r2
    2a5a:	60 2f       	mov	r22, r16
    2a5c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <_Z8recvfromhPhjS_Pj+0x1f8>
 * @return	This function return received data size for success else -1.
 */
uint16_t recvfrom(SOCKET s, uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t *port)
{
  uint8_t head[8];
  uint16_t data_len=0;
    2a62:	ee 24       	eor	r14, r14
    2a64:	ff 24       	eor	r15, r15
      break;

    default :
      break;
    }
    W5100.execCmdSn(s, Sock_RECV);
    2a66:	81 e8       	ldi	r24, 0x81	; 129
    2a68:	96 e0       	ldi	r25, 0x06	; 6
    2a6a:	6d 2d       	mov	r22, r13
    2a6c:	40 e4       	ldi	r20, 0x40	; 64
    2a6e:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN10W5100Class9execCmdSnEh7SockCMD>
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <_Z8recvfromhPhjS_Pj+0x20a>
 * @return	This function return received data size for success else -1.
 */
uint16_t recvfrom(SOCKET s, uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t *port)
{
  uint8_t head[8];
  uint16_t data_len=0;
    2a74:	ee 24       	eor	r14, r14
    2a76:	ff 24       	eor	r15, r15
      break;
    }
    W5100.execCmdSn(s, Sock_RECV);
  }
  return data_len;
}
    2a78:	8e 2d       	mov	r24, r14
    2a7a:	9f 2d       	mov	r25, r15
    2a7c:	2a 96       	adiw	r28, 0x0a	; 10
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	ff 90       	pop	r15
    2a92:	ef 90       	pop	r14
    2a94:	df 90       	pop	r13
    2a96:	bf 90       	pop	r11
    2a98:	af 90       	pop	r10
    2a9a:	9f 90       	pop	r9
    2a9c:	8f 90       	pop	r8
    2a9e:	7f 90       	pop	r7
    2aa0:	6f 90       	pop	r6
    2aa2:	5f 90       	pop	r5
    2aa4:	4f 90       	pop	r4
    2aa6:	3f 90       	pop	r3
    2aa8:	2f 90       	pop	r2
    2aaa:	08 95       	ret

00002aac <_Z8igmpsendhPKhj>:


uint16_t igmpsend(SOCKET s, const uint8_t * buf, uint16_t len)
{
    2aac:	df 92       	push	r13
    2aae:	ef 92       	push	r14
    2ab0:	ff 92       	push	r15
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	cf 93       	push	r28
    2ab8:	df 93       	push	r29
    2aba:	d8 2e       	mov	r13, r24
    2abc:	9b 01       	movw	r18, r22
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    {
      /* in case of igmp, if send fails, then socket closed */
      /* if you want change, remove this code. */
      close(s);
      return 0;
    2abe:	04 2f       	mov	r16, r20
    2ac0:	15 2f       	mov	r17, r21
    2ac2:	88 e0       	ldi	r24, 0x08	; 8
    2ac4:	01 30       	cpi	r16, 0x01	; 1
    2ac6:	18 07       	cpc	r17, r24
    2ac8:	10 f0       	brcs	.+4      	; 0x2ace <_Z8igmpsendhPKhj+0x22>
    2aca:	00 e0       	ldi	r16, 0x00	; 0
    2acc:	18 e0       	ldi	r17, 0x08	; 8
  if (len > W5100.SSIZE) 
    ret = W5100.SSIZE; // check size not to exceed MAX size.
  else 
    ret = len;

  if (ret == 0)
    2ace:	01 15       	cp	r16, r1
    2ad0:	11 05       	cpc	r17, r1
    2ad2:	99 f1       	breq	.+102    	; 0x2b3a <_Z8igmpsendhPKhj+0x8e>
    return 0;

  W5100.send_data_processing(s, (uint8_t *)buf, ret);
    2ad4:	c1 e8       	ldi	r28, 0x81	; 129
    2ad6:	d6 e0       	ldi	r29, 0x06	; 6
    2ad8:	ce 01       	movw	r24, r28
    2ada:	6d 2d       	mov	r22, r13
    2adc:	a9 01       	movw	r20, r18
    2ade:	98 01       	movw	r18, r16
    2ae0:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <_ZN10W5100Class20send_data_processingEhPKhj>
  W5100.execCmdSn(s, Sock_SEND);
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	6d 2d       	mov	r22, r13
    2ae8:	40 e2       	ldi	r20, 0x20	; 32
    2aea:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN10W5100Class9execCmdSnEh7SockCMD>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2aee:	8d 2d       	mov	r24, r13
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	04 96       	adiw	r24, 0x04	; 4
    2af4:	98 2f       	mov	r25, r24
    2af6:	88 27       	eor	r24, r24
    2af8:	ec 01       	movw	r28, r24
    2afa:	22 96       	adiw	r28, 0x02	; 2
    2afc:	0f 2e       	mov	r0, r31
    2afe:	f3 e0       	ldi	r31, 0x03	; 3
    2b00:	ef 2e       	mov	r14, r31
    2b02:	ff 24       	eor	r15, r15
    2b04:	f0 2d       	mov	r31, r0
    2b06:	e8 0e       	add	r14, r24
    2b08:	f9 1e       	adc	r15, r25

  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    2b0a:	0e c0       	rjmp	.+28     	; 0x2b28 <_Z8igmpsendhPKhj+0x7c>
    2b0c:	c7 01       	movw	r24, r14
    2b0e:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
    2b12:	ce 01       	movw	r24, r28
    2b14:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  {
    status = W5100.readSnSR(s);
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    2b18:	83 ff       	sbrs	r24, 3
    2b1a:	06 c0       	rjmp	.+12     	; 0x2b28 <_Z8igmpsendhPKhj+0x7c>
    {
      /* in case of igmp, if send fails, then socket closed */
      /* if you want change, remove this code. */
      close(s);
    2b1c:	8d 2d       	mov	r24, r13
    2b1e:	0e 94 20 12 	call	0x2440	; 0x2440 <_Z5closeh>
      return 0;
    2b22:	00 e0       	ldi	r16, 0x00	; 0
    2b24:	10 e0       	ldi	r17, 0x00	; 0
    2b26:	09 c0       	rjmp	.+18     	; 0x2b3a <_Z8igmpsendhPKhj+0x8e>
    2b28:	ce 01       	movw	r24, r28
    2b2a:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
    return 0;

  W5100.send_data_processing(s, (uint8_t *)buf, ret);
  W5100.execCmdSn(s, Sock_SEND);

  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    2b2e:	84 ff       	sbrs	r24, 4
    2b30:	ed cf       	rjmp	.-38     	; 0x2b0c <_Z8igmpsendhPKhj+0x60>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2b32:	ce 01       	movw	r24, r28
    2b34:	60 e1       	ldi	r22, 0x10	; 16
    2b36:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    }
  }

  W5100.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    2b3a:	80 2f       	mov	r24, r16
    2b3c:	91 2f       	mov	r25, r17
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	1f 91       	pop	r17
    2b44:	0f 91       	pop	r16
    2b46:	ff 90       	pop	r15
    2b48:	ef 90       	pop	r14
    2b4a:	df 90       	pop	r13
    2b4c:	08 95       	ret

00002b4e <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    2b4e:	af 92       	push	r10
    2b50:	bf 92       	push	r11
    2b52:	cf 92       	push	r12
    2b54:	df 92       	push	r13
    2b56:	ff 92       	push	r15
    2b58:	0f 93       	push	r16
    2b5a:	1f 93       	push	r17
    2b5c:	cf 93       	push	r28
    2b5e:	df 93       	push	r29
    2b60:	c8 2f       	mov	r28, r24
    2b62:	6b 01       	movw	r12, r22
    2b64:	5a 01       	movw	r10, r20
    2b66:	89 01       	movw	r16, r18
  uint16_t ret =0;
  if (len > W5100.getTXFreeSize(s))
    2b68:	81 e8       	ldi	r24, 0x81	; 129
    2b6a:	96 e0       	ldi	r25, 0x06	; 6
    2b6c:	6c 2f       	mov	r22, r28
    2b6e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <_ZN10W5100Class13getTXFreeSizeEh>
    2b72:	80 17       	cp	r24, r16
    2b74:	91 07       	cpc	r25, r17
    2b76:	40 f4       	brcc	.+16     	; 0x2b88 <_Z10bufferDatahjPKhj+0x3a>
  {
    ret = W5100.getTXFreeSize(s); // check size not to exceed MAX size.
    2b78:	81 e8       	ldi	r24, 0x81	; 129
    2b7a:	96 e0       	ldi	r25, 0x06	; 6
    2b7c:	6c 2f       	mov	r22, r28
    2b7e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <_ZN10W5100Class13getTXFreeSizeEh>
    2b82:	f8 2e       	mov	r15, r24
    2b84:	d9 2f       	mov	r29, r25
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <_Z10bufferDatahjPKhj+0x3e>
  }
  else
  {
    ret = len;
    2b88:	f0 2e       	mov	r15, r16
    2b8a:	d1 2f       	mov	r29, r17
  }
  W5100.send_data_processing_offset(s, offset, buf, ret);
    2b8c:	81 e8       	ldi	r24, 0x81	; 129
    2b8e:	96 e0       	ldi	r25, 0x06	; 6
    2b90:	6c 2f       	mov	r22, r28
    2b92:	a6 01       	movw	r20, r12
    2b94:	95 01       	movw	r18, r10
    2b96:	0f 2d       	mov	r16, r15
    2b98:	1d 2f       	mov	r17, r29
    2b9a:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    2b9e:	8f 2d       	mov	r24, r15
    2ba0:	9d 2f       	mov	r25, r29
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28
    2ba6:	1f 91       	pop	r17
    2ba8:	0f 91       	pop	r16
    2baa:	ff 90       	pop	r15
    2bac:	df 90       	pop	r13
    2bae:	cf 90       	pop	r12
    2bb0:	bf 90       	pop	r11
    2bb2:	af 90       	pop	r10
    2bb4:	08 95       	ret

00002bb6 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    2bb6:	0f 93       	push	r16
    2bb8:	1f 93       	push	r17
    2bba:	cf 93       	push	r28
    2bbc:	df 93       	push	r29
    2bbe:	fb 01       	movw	r30, r22
    2bc0:	8a 01       	movw	r16, r20
  if
    2bc2:	90 81       	ld	r25, Z
    2bc4:	99 23       	and	r25, r25
    2bc6:	49 f4       	brne	.+18     	; 0x2bda <_Z8startUDPhPhj+0x24>
    2bc8:	91 81       	ldd	r25, Z+1	; 0x01
    2bca:	99 23       	and	r25, r25
    2bcc:	31 f4       	brne	.+12     	; 0x2bda <_Z8startUDPhPhj+0x24>
    2bce:	92 81       	ldd	r25, Z+2	; 0x02
    2bd0:	99 23       	and	r25, r25
    2bd2:	19 f4       	brne	.+6      	; 0x2bda <_Z8startUDPhPhj+0x24>
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	99 23       	and	r25, r25
    2bd8:	e1 f0       	breq	.+56     	; 0x2c12 <_Z8startUDPhPhj+0x5c>
    2bda:	01 15       	cp	r16, r1
    2bdc:	11 05       	cpc	r17, r1
    2bde:	e1 f0       	breq	.+56     	; 0x2c18 <_Z8startUDPhPhj+0x62>
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    2be0:	c8 2f       	mov	r28, r24
    2be2:	d0 e0       	ldi	r29, 0x00	; 0
    2be4:	24 96       	adiw	r28, 0x04	; 4
    2be6:	dc 2f       	mov	r29, r28
    2be8:	cc 27       	eor	r28, r28
    2bea:	ce 01       	movw	r24, r28
    2bec:	0c 96       	adiw	r24, 0x0c	; 12
    2bee:	bf 01       	movw	r22, r30
    2bf0:	44 e0       	ldi	r20, 0x04	; 4
    2bf2:	50 e0       	ldi	r21, 0x00	; 0
    2bf4:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	40 96       	adiw	r24, 0x10	; 16
    2bfc:	61 2f       	mov	r22, r17
    2bfe:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    2c02:	ce 01       	movw	r24, r28
    2c04:	41 96       	adiw	r24, 0x11	; 17
    2c06:	60 2f       	mov	r22, r16
    2c08:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
  }
  else
  {
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);
    return 1;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	05 c0       	rjmp	.+10     	; 0x2c1c <_Z8startUDPhPhj+0x66>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <_Z8startUDPhPhj+0x66>
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
  {
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);
    return 1;
  }
}
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	1f 91       	pop	r17
    2c22:	0f 91       	pop	r16
    2c24:	08 95       	ret

00002c26 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    2c26:	1f 93       	push	r17
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
    2c2c:	18 2f       	mov	r17, r24
  W5100.execCmdSn(s, Sock_SEND);
    2c2e:	81 e8       	ldi	r24, 0x81	; 129
    2c30:	96 e0       	ldi	r25, 0x06	; 6
    2c32:	61 2f       	mov	r22, r17
    2c34:	40 e2       	ldi	r20, 0x20	; 32
    2c36:	0e 94 d5 18 	call	0x31aa	; 0x31aa <_ZN10W5100Class9execCmdSnEh7SockCMD>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2c3a:	d1 2f       	mov	r29, r17
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	c8 2f       	mov	r28, r24
    2c40:	ce 5f       	subi	r28, 0xFE	; 254
    2c42:	db 4f       	sbci	r29, 0xFB	; 251
		
  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    2c44:	0c c0       	rjmp	.+24     	; 0x2c5e <_Z7sendUDPh+0x38>
    2c46:	ce 01       	movw	r24, r28
    2c48:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  {
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    2c4c:	83 ff       	sbrs	r24, 3
    2c4e:	07 c0       	rjmp	.+14     	; 0x2c5e <_Z7sendUDPh+0x38>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2c50:	ce 01       	movw	r24, r28
    2c52:	68 e1       	ldi	r22, 0x18	; 24
    2c54:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    {
      /* +2008.01 [bj]: clear interrupt */
      W5100.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	0b c0       	rjmp	.+22     	; 0x2c74 <_Z7sendUDPh+0x4e>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2c5e:	ce 01       	movw	r24, r28
    2c60:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
int sendUDP(SOCKET s)
{
  W5100.execCmdSn(s, Sock_SEND);
		
  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    2c64:	84 ff       	sbrs	r24, 4
    2c66:	ef cf       	rjmp	.-34     	; 0x2c46 <_Z7sendUDPh+0x20>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2c68:	ce 01       	movw	r24, r28
    2c6a:	60 e1       	ldi	r22, 0x10	; 16
    2c6c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>

  /* +2008.01 bj */	
  W5100.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
}
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	1f 91       	pop	r17
    2c7a:	08 95       	ret

00002c7c <_ZN10W5100Class5writeEjh>:
  uint16_t RBASE[SOCKETS]; // Rx buffer base address

private:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  inline static void initSS()    { DDRB  |=  _BV(4); };
  inline static void setSS()     { PORTB &= ~_BV(4); };
    2c7c:	2c 98       	cbi	0x05, 4	; 5
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2c7e:	20 ef       	ldi	r18, 0xF0	; 240
    2c80:	2e bd       	out	0x2e, r18	; 46
  while (!(SPSR & _BV(SPIF)))
    2c82:	0d b4       	in	r0, 0x2d	; 45
    2c84:	07 fe       	sbrs	r0, 7
    2c86:	fd cf       	rjmp	.-6      	; 0x2c82 <_ZN10W5100Class5writeEjh+0x6>
    ;
  return SPDR;
    2c88:	2e b5       	in	r18, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2c8a:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    2c8c:	0d b4       	in	r0, 0x2d	; 45
    2c8e:	07 fe       	sbrs	r0, 7
    2c90:	fd cf       	rjmp	.-6      	; 0x2c8c <_ZN10W5100Class5writeEjh+0x10>
    ;
  return SPDR;
    2c92:	9e b5       	in	r25, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2c94:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    2c96:	0d b4       	in	r0, 0x2d	; 45
    2c98:	07 fe       	sbrs	r0, 7
    2c9a:	fd cf       	rjmp	.-6      	; 0x2c96 <_ZN10W5100Class5writeEjh+0x1a>
    ;
  return SPDR;
    2c9c:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2c9e:	6e bd       	out	0x2e, r22	; 46
  while (!(SPSR & _BV(SPIF)))
    2ca0:	0d b4       	in	r0, 0x2d	; 45
    2ca2:	07 fe       	sbrs	r0, 7
    2ca4:	fd cf       	rjmp	.-6      	; 0x2ca0 <_ZN10W5100Class5writeEjh+0x24>
    ;
  return SPDR;
    2ca6:	8e b5       	in	r24, 0x2e	; 46
  inline static void resetSS()   { PORTB |=  _BV(4); };
    2ca8:	2c 9a       	sbi	0x05, 4	; 5
  SPI.transfer(_addr >> 8);
  SPI.transfer(_addr & 0xFF);
  SPI.transfer(_data);
  resetSS();
  return 1;
}
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	08 95       	ret

00002cae <_ZN10W5100Class4initEv>:

#define TXBUF_BASE 0x4000
#define RXBUF_BASE 0x6000

void W5100Class::init(void)
{
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	ec 01       	movw	r28, r24
  delay(300);
    2cb4:	6c e2       	ldi	r22, 0x2C	; 44
    2cb6:	71 e0       	ldi	r23, 0x01	; 1
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <delay>

  SPI.begin();
    2cc0:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <_ZN8SPIClass5beginEv>
  uint16_t SBASE[SOCKETS]; // Tx buffer base address
  uint16_t RBASE[SOCKETS]; // Rx buffer base address

private:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  inline static void initSS()    { DDRB  |=  _BV(4); };
    2cc4:	24 9a       	sbi	0x04, 4	; 4
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	60 e8       	ldi	r22, 0x80	; 128
    2ccc:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
  __GP_REGISTER8 (TMSR,   0x001B);    // Transmit memory size
    2cd0:	8b e1       	ldi	r24, 0x1B	; 27
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	65 e5       	ldi	r22, 0x55	; 85
    2cd6:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
    2cda:	8a e1       	ldi	r24, 0x1A	; 26
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	65 e5       	ldi	r22, 0x55	; 85
    2ce0:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	90 e4       	ldi	r25, 0x40	; 64
    2ce8:	99 83       	std	Y+1, r25	; 0x01
    2cea:	88 83       	st	Y, r24
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e6       	ldi	r25, 0x60	; 96
    2cf0:	99 87       	std	Y+9, r25	; 0x09
    2cf2:	88 87       	std	Y+8, r24	; 0x08
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	98 e4       	ldi	r25, 0x48	; 72
    2cf8:	9b 83       	std	Y+3, r25	; 0x03
    2cfa:	8a 83       	std	Y+2, r24	; 0x02
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	98 e6       	ldi	r25, 0x68	; 104
    2d00:	9b 87       	std	Y+11, r25	; 0x0b
    2d02:	8a 87       	std	Y+10, r24	; 0x0a
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	90 e5       	ldi	r25, 0x50	; 80
    2d08:	9d 83       	std	Y+5, r25	; 0x05
    2d0a:	8c 83       	std	Y+4, r24	; 0x04
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	90 e7       	ldi	r25, 0x70	; 112
    2d10:	9d 87       	std	Y+13, r25	; 0x0d
    2d12:	8c 87       	std	Y+12, r24	; 0x0c
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	98 e5       	ldi	r25, 0x58	; 88
    2d18:	9f 83       	std	Y+7, r25	; 0x07
    2d1a:	8e 83       	std	Y+6, r24	; 0x06
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	98 e7       	ldi	r25, 0x78	; 120
    2d20:	9f 87       	std	Y+15, r25	; 0x0f
    2d22:	8e 87       	std	Y+14, r24	; 0x0e
  }
}
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	08 95       	ret

00002d2a <_ZN10W5100Class5writeEjPKhj>:
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    2d2a:	41 15       	cp	r20, r1
    2d2c:	51 05       	cpc	r21, r1
    2d2e:	09 f1       	breq	.+66     	; 0x2d72 <_ZN10W5100Class5writeEjPKhj+0x48>
    2d30:	e6 2f       	mov	r30, r22
    2d32:	f7 2f       	mov	r31, r23
  SPI.transfer(_data);
  resetSS();
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
    2d34:	9a 01       	movw	r18, r20
    2d36:	28 0f       	add	r18, r24
    2d38:	39 1f       	adc	r19, r25
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2d3a:	70 ef       	ldi	r23, 0xF0	; 240
  uint16_t RBASE[SOCKETS]; // Rx buffer base address

private:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  inline static void initSS()    { DDRB  |=  _BV(4); };
  inline static void setSS()     { PORTB &= ~_BV(4); };
    2d3c:	2c 98       	cbi	0x05, 4	; 5
    2d3e:	7e bd       	out	0x2e, r23	; 46
  while (!(SPSR & _BV(SPIF)))
    2d40:	0d b4       	in	r0, 0x2d	; 45
    2d42:	07 fe       	sbrs	r0, 7
    2d44:	fd cf       	rjmp	.-6      	; 0x2d40 <_ZN10W5100Class5writeEjPKhj+0x16>
    ;
  return SPDR;
    2d46:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2d48:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    2d4a:	0d b4       	in	r0, 0x2d	; 45
    2d4c:	07 fe       	sbrs	r0, 7
    2d4e:	fd cf       	rjmp	.-6      	; 0x2d4a <_ZN10W5100Class5writeEjPKhj+0x20>
    ;
  return SPDR;
    2d50:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2d52:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    2d54:	0d b4       	in	r0, 0x2d	; 45
    2d56:	07 fe       	sbrs	r0, 7
    2d58:	fd cf       	rjmp	.-6      	; 0x2d54 <_ZN10W5100Class5writeEjPKhj+0x2a>
    ;
  return SPDR;
    2d5a:	6e b5       	in	r22, 0x2e	; 46
  {
    setSS();    
    SPI.transfer(0xF0);
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    _addr++;
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    SPI.transfer(_buf[i]);
    2d5e:	61 91       	ld	r22, Z+
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2d60:	6e bd       	out	0x2e, r22	; 46
  while (!(SPSR & _BV(SPIF)))
    2d62:	0d b4       	in	r0, 0x2d	; 45
    2d64:	07 fe       	sbrs	r0, 7
    2d66:	fd cf       	rjmp	.-6      	; 0x2d62 <_ZN10W5100Class5writeEjPKhj+0x38>
    ;
  return SPDR;
    2d68:	6e b5       	in	r22, 0x2e	; 46
  inline static void resetSS()   { PORTB |=  _BV(4); };
    2d6a:	2c 9a       	sbi	0x05, 4	; 5
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    2d6c:	82 17       	cp	r24, r18
    2d6e:	93 07       	cpc	r25, r19
    2d70:	29 f7       	brne	.-54     	; 0x2d3c <_ZN10W5100Class5writeEjPKhj+0x12>
    _addr++;
    SPI.transfer(_buf[i]);
    resetSS();
  }
  return _len;
}
    2d72:	84 2f       	mov	r24, r20
    2d74:	95 2f       	mov	r25, r21
    2d76:	08 95       	ret

00002d78 <_ZN10W5100Class4readEj>:
  uint16_t RBASE[SOCKETS]; // Rx buffer base address

private:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  inline static void initSS()    { DDRB  |=  _BV(4); };
  inline static void setSS()     { PORTB &= ~_BV(4); };
    2d78:	2c 98       	cbi	0x05, 4	; 5
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2d7a:	2f e0       	ldi	r18, 0x0F	; 15
    2d7c:	2e bd       	out	0x2e, r18	; 46
  while (!(SPSR & _BV(SPIF)))
    2d7e:	0d b4       	in	r0, 0x2d	; 45
    2d80:	07 fe       	sbrs	r0, 7
    2d82:	fd cf       	rjmp	.-6      	; 0x2d7e <_ZN10W5100Class4readEj+0x6>
    ;
  return SPDR;
    2d84:	2e b5       	in	r18, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2d86:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    2d88:	0d b4       	in	r0, 0x2d	; 45
    2d8a:	07 fe       	sbrs	r0, 7
    2d8c:	fd cf       	rjmp	.-6      	; 0x2d88 <_ZN10W5100Class4readEj+0x10>
    ;
  return SPDR;
    2d8e:	9e b5       	in	r25, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2d90:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    2d92:	0d b4       	in	r0, 0x2d	; 45
    2d94:	07 fe       	sbrs	r0, 7
    2d96:	fd cf       	rjmp	.-6      	; 0x2d92 <_ZN10W5100Class4readEj+0x1a>
    ;
  return SPDR;
    2d98:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2d9a:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & _BV(SPIF)))
    2d9c:	0d b4       	in	r0, 0x2d	; 45
    2d9e:	07 fe       	sbrs	r0, 7
    2da0:	fd cf       	rjmp	.-6      	; 0x2d9c <_ZN10W5100Class4readEj+0x24>
    ;
  return SPDR;
    2da2:	8e b5       	in	r24, 0x2e	; 46
  inline static void resetSS()   { PORTB |=  _BV(4); };
    2da4:	2c 9a       	sbi	0x05, 4	; 5
  SPI.transfer(_addr >> 8);
  SPI.transfer(_addr & 0xFF);
  uint8_t _data = SPI.transfer(0);
  resetSS();
  return _data;
}
    2da6:	08 95       	ret

00002da8 <_ZN10W5100Class13getTXFreeSizeEh>:
    RBASE[i] = RXBUF_BASE + RSIZE * i;
  }
}

uint16_t W5100Class::getTXFreeSize(SOCKET s)
{
    2da8:	8f 92       	push	r8
    2daa:	9f 92       	push	r9
    2dac:	af 92       	push	r10
    2dae:	bf 92       	push	r11
    2db0:	cf 92       	push	r12
    2db2:	df 92       	push	r13
    2db4:	ef 92       	push	r14
    2db6:	ff 92       	push	r15
    2db8:	0f 93       	push	r16
    2dba:	1f 93       	push	r17
    2dbc:	cf 93       	push	r28
    2dbe:	df 93       	push	r29
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2dc0:	86 2f       	mov	r24, r22
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	04 96       	adiw	r24, 0x04	; 4
    2dc6:	98 2f       	mov	r25, r24
    2dc8:	88 27       	eor	r24, r24
    2dca:	aa 24       	eor	r10, r10
    2dcc:	bb 24       	eor	r11, r11
    2dce:	68 94       	set
    2dd0:	a5 f8       	bld	r10, 5
    2dd2:	a8 0e       	add	r10, r24
    2dd4:	b9 1e       	adc	r11, r25
    2dd6:	0f 2e       	mov	r0, r31
    2dd8:	f1 e2       	ldi	r31, 0x21	; 33
    2dda:	cf 2e       	mov	r12, r31
    2ddc:	dd 24       	eor	r13, r13
    2dde:	f0 2d       	mov	r31, r0
    2de0:	c8 0e       	add	r12, r24
    2de2:	d9 1e       	adc	r13, r25
  uint16_t val=0, val1=0;
    2de4:	00 e0       	ldi	r16, 0x00	; 0
    2de6:	10 e0       	ldi	r17, 0x00	; 0
    2de8:	c5 01       	movw	r24, r10
    2dea:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
    2dee:	c8 2f       	mov	r28, r24
    2df0:	c6 01       	movw	r24, r12
    2df2:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	fc 2e       	mov	r15, r28
    2dfa:	ee 24       	eor	r14, r14
    2dfc:	ec 01       	movw	r28, r24
    2dfe:	ce 29       	or	r28, r14
    2e00:	df 29       	or	r29, r15
  do {
    val1 = readSnTX_FSR(s);
    if (val1 != 0)
    2e02:	20 97       	sbiw	r28, 0x00	; 0
    2e04:	69 f0       	breq	.+26     	; 0x2e20 <_ZN10W5100Class13getTXFreeSizeEh+0x78>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2e06:	c5 01       	movw	r24, r10
    2e08:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
    2e0c:	08 2f       	mov	r16, r24
    2e0e:	c6 01       	movw	r24, r12
    2e10:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	90 2e       	mov	r9, r16
    2e18:	88 24       	eor	r8, r8
    2e1a:	8c 01       	movw	r16, r24
    2e1c:	08 29       	or	r16, r8
    2e1e:	19 29       	or	r17, r9
}

uint16_t W5100Class::getTXFreeSize(SOCKET s)
{
  uint16_t val=0, val1=0;
  do {
    2e20:	0c 17       	cp	r16, r28
    2e22:	1d 07       	cpc	r17, r29
    2e24:	09 f7       	brne	.-62     	; 0x2de8 <_ZN10W5100Class13getTXFreeSizeEh+0x40>
    if (val1 != 0)
      val = readSnTX_FSR(s);
  } 
  while (val != val1);
  return val;
}
    2e26:	80 2f       	mov	r24, r16
    2e28:	91 2f       	mov	r25, r17
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	ff 90       	pop	r15
    2e34:	ef 90       	pop	r14
    2e36:	df 90       	pop	r13
    2e38:	cf 90       	pop	r12
    2e3a:	bf 90       	pop	r11
    2e3c:	af 90       	pop	r10
    2e3e:	9f 90       	pop	r9
    2e40:	8f 90       	pop	r8
    2e42:	08 95       	ret

00002e44 <_ZN10W5100Class17getRXReceivedSizeEh>:

uint16_t W5100Class::getRXReceivedSize(SOCKET s)
{
    2e44:	8f 92       	push	r8
    2e46:	9f 92       	push	r9
    2e48:	af 92       	push	r10
    2e4a:	bf 92       	push	r11
    2e4c:	cf 92       	push	r12
    2e4e:	df 92       	push	r13
    2e50:	ef 92       	push	r14
    2e52:	ff 92       	push	r15
    2e54:	0f 93       	push	r16
    2e56:	1f 93       	push	r17
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2e5c:	86 2f       	mov	r24, r22
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	04 96       	adiw	r24, 0x04	; 4
    2e62:	98 2f       	mov	r25, r24
    2e64:	88 27       	eor	r24, r24
    2e66:	0f 2e       	mov	r0, r31
    2e68:	f6 e2       	ldi	r31, 0x26	; 38
    2e6a:	af 2e       	mov	r10, r31
    2e6c:	bb 24       	eor	r11, r11
    2e6e:	f0 2d       	mov	r31, r0
    2e70:	a8 0e       	add	r10, r24
    2e72:	b9 1e       	adc	r11, r25
    2e74:	0f 2e       	mov	r0, r31
    2e76:	f7 e2       	ldi	r31, 0x27	; 39
    2e78:	cf 2e       	mov	r12, r31
    2e7a:	dd 24       	eor	r13, r13
    2e7c:	f0 2d       	mov	r31, r0
    2e7e:	c8 0e       	add	r12, r24
    2e80:	d9 1e       	adc	r13, r25
  uint16_t val=0,val1=0;
    2e82:	00 e0       	ldi	r16, 0x00	; 0
    2e84:	10 e0       	ldi	r17, 0x00	; 0
    2e86:	c5 01       	movw	r24, r10
    2e88:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
    2e8c:	c8 2f       	mov	r28, r24
    2e8e:	c6 01       	movw	r24, r12
    2e90:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	fc 2e       	mov	r15, r28
    2e98:	ee 24       	eor	r14, r14
    2e9a:	ec 01       	movw	r28, r24
    2e9c:	ce 29       	or	r28, r14
    2e9e:	df 29       	or	r29, r15
  do {
    val1 = readSnRX_RSR(s);
    if (val1 != 0)
    2ea0:	20 97       	sbiw	r28, 0x00	; 0
    2ea2:	69 f0       	breq	.+26     	; 0x2ebe <_ZN10W5100Class17getRXReceivedSizeEh+0x7a>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2ea4:	c5 01       	movw	r24, r10
    2ea6:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
    2eaa:	08 2f       	mov	r16, r24
    2eac:	c6 01       	movw	r24, r12
    2eae:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	90 2e       	mov	r9, r16
    2eb6:	88 24       	eor	r8, r8
    2eb8:	8c 01       	movw	r16, r24
    2eba:	08 29       	or	r16, r8
    2ebc:	19 29       	or	r17, r9
}

uint16_t W5100Class::getRXReceivedSize(SOCKET s)
{
  uint16_t val=0,val1=0;
  do {
    2ebe:	0c 17       	cp	r16, r28
    2ec0:	1d 07       	cpc	r17, r29
    2ec2:	09 f7       	brne	.-62     	; 0x2e86 <_ZN10W5100Class17getRXReceivedSizeEh+0x42>
    if (val1 != 0)
      val = readSnRX_RSR(s);
  } 
  while (val != val1);
  return val;
}
    2ec4:	80 2f       	mov	r24, r16
    2ec6:	91 2f       	mov	r25, r17
    2ec8:	df 91       	pop	r29
    2eca:	cf 91       	pop	r28
    2ecc:	1f 91       	pop	r17
    2ece:	0f 91       	pop	r16
    2ed0:	ff 90       	pop	r15
    2ed2:	ef 90       	pop	r14
    2ed4:	df 90       	pop	r13
    2ed6:	cf 90       	pop	r12
    2ed8:	bf 90       	pop	r11
    2eda:	af 90       	pop	r10
    2edc:	9f 90       	pop	r9
    2ede:	8f 90       	pop	r8
    2ee0:	08 95       	ret

00002ee2 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>:
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
}

void W5100Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    2ee2:	2f 92       	push	r2
    2ee4:	3f 92       	push	r3
    2ee6:	4f 92       	push	r4
    2ee8:	5f 92       	push	r5
    2eea:	6f 92       	push	r6
    2eec:	7f 92       	push	r7
    2eee:	8f 92       	push	r8
    2ef0:	9f 92       	push	r9
    2ef2:	af 92       	push	r10
    2ef4:	bf 92       	push	r11
    2ef6:	cf 92       	push	r12
    2ef8:	df 92       	push	r13
    2efa:	ef 92       	push	r14
    2efc:	ff 92       	push	r15
    2efe:	0f 93       	push	r16
    2f00:	1f 93       	push	r17
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	2c 01       	movw	r4, r24
    2f08:	5a 01       	movw	r10, r20
    2f0a:	19 01       	movw	r2, r18
    2f0c:	78 01       	movw	r14, r16
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2f0e:	c6 2e       	mov	r12, r22
    2f10:	dd 24       	eor	r13, r13
    2f12:	c6 01       	movw	r24, r12
    2f14:	04 96       	adiw	r24, 0x04	; 4
    2f16:	d8 2f       	mov	r29, r24
    2f18:	cc 27       	eor	r28, r28
    2f1a:	0f 2e       	mov	r0, r31
    2f1c:	f4 e2       	ldi	r31, 0x24	; 36
    2f1e:	6f 2e       	mov	r6, r31
    2f20:	77 24       	eor	r7, r7
    2f22:	f0 2d       	mov	r31, r0
    2f24:	6c 0e       	add	r6, r28
    2f26:	7d 1e       	adc	r7, r29
    2f28:	c3 01       	movw	r24, r6
    2f2a:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
    2f2e:	18 2f       	mov	r17, r24
    2f30:	0f 2e       	mov	r0, r31
    2f32:	f5 e2       	ldi	r31, 0x25	; 37
    2f34:	8f 2e       	mov	r8, r31
    2f36:	99 24       	eor	r9, r9
    2f38:	f0 2d       	mov	r31, r0
    2f3a:	8c 0e       	add	r8, r28
    2f3c:	9d 1e       	adc	r9, r29
    2f3e:	c4 01       	movw	r24, r8
    2f40:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
    2f44:	c8 2f       	mov	r28, r24
    2f46:	d0 e0       	ldi	r29, 0x00	; 0
    2f48:	91 2f       	mov	r25, r17
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	8c 2b       	or	r24, r28
    2f4e:	9d 2b       	or	r25, r29
  uint16_t ptr = readSnTX_WR(s);
  ptr += data_offset;
    2f50:	ec 01       	movw	r28, r24
    2f52:	ca 0d       	add	r28, r10
    2f54:	db 1d       	adc	r29, r11
  uint16_t offset = ptr & SMASK;
    2f56:	ae 01       	movw	r20, r28
    2f58:	57 70       	andi	r21, 0x07	; 7
  uint16_t dstAddr = offset + SBASE[s];
    2f5a:	c6 01       	movw	r24, r12
    2f5c:	88 0f       	add	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	84 0d       	add	r24, r4
    2f62:	95 1d       	adc	r25, r5
    2f64:	fc 01       	movw	r30, r24
    2f66:	80 81       	ld	r24, Z
    2f68:	91 81       	ldd	r25, Z+1	; 0x01
    2f6a:	9a 01       	movw	r18, r20
    2f6c:	28 0f       	add	r18, r24
    2f6e:	39 1f       	adc	r19, r25

  if (offset + len > SSIZE) 
    2f70:	ca 01       	movw	r24, r20
    2f72:	8e 0d       	add	r24, r14
    2f74:	9f 1d       	adc	r25, r15
    2f76:	f8 e0       	ldi	r31, 0x08	; 8
    2f78:	81 30       	cpi	r24, 0x01	; 1
    2f7a:	9f 07       	cpc	r25, r31
    2f7c:	d8 f0       	brcs	.+54     	; 0x2fb4 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0xd2>
  {
    // Wrap around circular buffer
    uint16_t size = SSIZE - offset;
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	98 e0       	ldi	r25, 0x08	; 8
    2f82:	5c 01       	movw	r10, r24
    2f84:	a4 1a       	sub	r10, r20
    2f86:	b5 0a       	sbc	r11, r21
    write(dstAddr, data, size);
    2f88:	c9 01       	movw	r24, r18
    2f8a:	b1 01       	movw	r22, r2
    2f8c:	a5 01       	movw	r20, r10
    2f8e:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
    write(SBASE[s], data + size, len - size);
    2f92:	c6 01       	movw	r24, r12
    2f94:	88 0f       	add	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	84 0d       	add	r24, r4
    2f9a:	95 1d       	adc	r25, r5
    2f9c:	b1 01       	movw	r22, r2
    2f9e:	6a 0d       	add	r22, r10
    2fa0:	7b 1d       	adc	r23, r11
    2fa2:	a7 01       	movw	r20, r14
    2fa4:	4a 19       	sub	r20, r10
    2fa6:	5b 09       	sbc	r21, r11
    2fa8:	fc 01       	movw	r30, r24
    2faa:	80 81       	ld	r24, Z
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
    2fb2:	05 c0       	rjmp	.+10     	; 0x2fbe <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0xdc>
  } 
  else {
    write(dstAddr, data, len);
    2fb4:	c9 01       	movw	r24, r18
    2fb6:	b1 01       	movw	r22, r2
    2fb8:	a7 01       	movw	r20, r14
    2fba:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <_ZN10W5100Class5writeEjPKhj>
  }

  ptr += len;
    2fbe:	ce 0d       	add	r28, r14
    2fc0:	df 1d       	adc	r29, r15
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2fc2:	c3 01       	movw	r24, r6
    2fc4:	6d 2f       	mov	r22, r29
    2fc6:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    2fca:	c4 01       	movw	r24, r8
    2fcc:	6c 2f       	mov	r22, r28
    2fce:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
  writeSnTX_WR(s, ptr);
}
    2fd2:	df 91       	pop	r29
    2fd4:	cf 91       	pop	r28
    2fd6:	1f 91       	pop	r17
    2fd8:	0f 91       	pop	r16
    2fda:	ff 90       	pop	r15
    2fdc:	ef 90       	pop	r14
    2fde:	df 90       	pop	r13
    2fe0:	cf 90       	pop	r12
    2fe2:	bf 90       	pop	r11
    2fe4:	af 90       	pop	r10
    2fe6:	9f 90       	pop	r9
    2fe8:	8f 90       	pop	r8
    2fea:	7f 90       	pop	r7
    2fec:	6f 90       	pop	r6
    2fee:	5f 90       	pop	r5
    2ff0:	4f 90       	pop	r4
    2ff2:	3f 90       	pop	r3
    2ff4:	2f 90       	pop	r2
    2ff6:	08 95       	ret

00002ff8 <_ZN10W5100Class20send_data_processingEhPKhj>:
  return val;
}


void W5100Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
    2ff8:	0f 93       	push	r16
    2ffa:	1f 93       	push	r17
    2ffc:	fa 01       	movw	r30, r20
    2ffe:	89 01       	movw	r16, r18
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    3000:	40 e0       	ldi	r20, 0x00	; 0
    3002:	50 e0       	ldi	r21, 0x00	; 0
    3004:	9f 01       	movw	r18, r30
    3006:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
}
    300a:	1f 91       	pop	r17
    300c:	0f 91       	pop	r16
    300e:	08 95       	ret

00003010 <_ZN10W5100Class4readEjPhj>:
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    3010:	41 15       	cp	r20, r1
    3012:	51 05       	cpc	r21, r1
    3014:	09 f1       	breq	.+66     	; 0x3058 <_ZN10W5100Class4readEjPhj+0x48>
    3016:	e6 2f       	mov	r30, r22
    3018:	f7 2f       	mov	r31, r23
  uint8_t _data = SPI.transfer(0);
  resetSS();
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
    301a:	9a 01       	movw	r18, r20
    301c:	28 0f       	add	r18, r24
    301e:	39 1f       	adc	r19, r25
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    3020:	7f e0       	ldi	r23, 0x0F	; 15
  uint16_t RBASE[SOCKETS]; // Rx buffer base address

private:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  inline static void initSS()    { DDRB  |=  _BV(4); };
  inline static void setSS()     { PORTB &= ~_BV(4); };
    3022:	2c 98       	cbi	0x05, 4	; 5
    3024:	7e bd       	out	0x2e, r23	; 46
  while (!(SPSR & _BV(SPIF)))
    3026:	0d b4       	in	r0, 0x2d	; 45
    3028:	07 fe       	sbrs	r0, 7
    302a:	fd cf       	rjmp	.-6      	; 0x3026 <_ZN10W5100Class4readEjPhj+0x16>
    ;
  return SPDR;
    302c:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    302e:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    3030:	0d b4       	in	r0, 0x2d	; 45
    3032:	07 fe       	sbrs	r0, 7
    3034:	fd cf       	rjmp	.-6      	; 0x3030 <_ZN10W5100Class4readEjPhj+0x20>
    ;
  return SPDR;
    3036:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    3038:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    303a:	0d b4       	in	r0, 0x2d	; 45
    303c:	07 fe       	sbrs	r0, 7
    303e:	fd cf       	rjmp	.-6      	; 0x303a <_ZN10W5100Class4readEjPhj+0x2a>
    ;
  return SPDR;
    3040:	6e b5       	in	r22, 0x2e	; 46
  {
    setSS();
    SPI.transfer(0x0F);
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    _addr++;
    3042:	01 96       	adiw	r24, 0x01	; 1
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    3044:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & _BV(SPIF)))
    3046:	0d b4       	in	r0, 0x2d	; 45
    3048:	07 fe       	sbrs	r0, 7
    304a:	fd cf       	rjmp	.-6      	; 0x3046 <_ZN10W5100Class4readEjPhj+0x36>
    ;
  return SPDR;
    304c:	6e b5       	in	r22, 0x2e	; 46
    _buf[i] = SPI.transfer(0);
    304e:	61 93       	st	Z+, r22
  inline static void resetSS()   { PORTB |=  _BV(4); };
    3050:	2c 9a       	sbi	0x05, 4	; 5
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    3052:	82 17       	cp	r24, r18
    3054:	93 07       	cpc	r25, r19
    3056:	29 f7       	brne	.-54     	; 0x3022 <_ZN10W5100Class4readEjPhj+0x12>
    _addr++;
    _buf[i] = SPI.transfer(0);
    resetSS();
  }
  return _len;
}
    3058:	84 2f       	mov	r24, r20
    305a:	95 2f       	mov	r25, r21
    305c:	08 95       	ret

0000305e <_ZN10W5100Class9read_dataEhPVhS1_j>:
    writeSnRX_RD(s, ptr);
  }
}

void W5100Class::read_data(SOCKET s, volatile uint8_t *src, volatile uint8_t *dst, uint16_t len)
{
    305e:	af 92       	push	r10
    3060:	bf 92       	push	r11
    3062:	cf 92       	push	r12
    3064:	df 92       	push	r13
    3066:	ef 92       	push	r14
    3068:	ff 92       	push	r15
    306a:	0f 93       	push	r16
    306c:	1f 93       	push	r17
    306e:	cf 93       	push	r28
    3070:	df 93       	push	r29
    3072:	6c 01       	movw	r12, r24
    3074:	59 01       	movw	r10, r18
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  src_mask = (uint16_t)src & RMASK;
    3076:	57 70       	andi	r21, 0x07	; 7
  src_ptr = RBASE[s] + src_mask;
    3078:	c6 2f       	mov	r28, r22
    307a:	d0 e0       	ldi	r29, 0x00	; 0
    307c:	ce 01       	movw	r24, r28
    307e:	04 96       	adiw	r24, 0x04	; 4
    3080:	88 0f       	add	r24, r24
    3082:	99 1f       	adc	r25, r25
    3084:	8c 0d       	add	r24, r12
    3086:	9d 1d       	adc	r25, r13
    3088:	fc 01       	movw	r30, r24
    308a:	80 81       	ld	r24, Z
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	9a 01       	movw	r18, r20
    3090:	28 0f       	add	r18, r24
    3092:	39 1f       	adc	r19, r25

  if( (src_mask + len) > RSIZE ) 
    3094:	c8 01       	movw	r24, r16
    3096:	84 0f       	add	r24, r20
    3098:	95 1f       	adc	r25, r21
    309a:	f8 e0       	ldi	r31, 0x08	; 8
    309c:	81 30       	cpi	r24, 0x01	; 1
    309e:	9f 07       	cpc	r25, r31
    30a0:	e0 f0       	brcs	.+56     	; 0x30da <_ZN10W5100Class9read_dataEhPVhS1_j+0x7c>
  {
    size = RSIZE - src_mask;
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	98 e0       	ldi	r25, 0x08	; 8
    30a6:	7c 01       	movw	r14, r24
    30a8:	e4 1a       	sub	r14, r20
    30aa:	f5 0a       	sbc	r15, r21
    read(src_ptr, (uint8_t *)dst, size);
    30ac:	c9 01       	movw	r24, r18
    30ae:	b5 01       	movw	r22, r10
    30b0:	a7 01       	movw	r20, r14
    30b2:	0e 94 08 18 	call	0x3010	; 0x3010 <_ZN10W5100Class4readEjPhj>
    dst += size;
    read(RBASE[s], (uint8_t *) dst, len - size);
    30b6:	ce 01       	movw	r24, r28
    30b8:	04 96       	adiw	r24, 0x04	; 4
    30ba:	88 0f       	add	r24, r24
    30bc:	99 1f       	adc	r25, r25
    30be:	8c 0d       	add	r24, r12
    30c0:	9d 1d       	adc	r25, r13

  if( (src_mask + len) > RSIZE ) 
  {
    size = RSIZE - src_mask;
    read(src_ptr, (uint8_t *)dst, size);
    dst += size;
    30c2:	b5 01       	movw	r22, r10
    30c4:	6e 0d       	add	r22, r14
    30c6:	7f 1d       	adc	r23, r15
    read(RBASE[s], (uint8_t *) dst, len - size);
    30c8:	a8 01       	movw	r20, r16
    30ca:	4e 19       	sub	r20, r14
    30cc:	5f 09       	sbc	r21, r15
    30ce:	fc 01       	movw	r30, r24
    30d0:	80 81       	ld	r24, Z
    30d2:	91 81       	ldd	r25, Z+1	; 0x01
    30d4:	0e 94 08 18 	call	0x3010	; 0x3010 <_ZN10W5100Class4readEjPhj>
    30d8:	05 c0       	rjmp	.+10     	; 0x30e4 <_ZN10W5100Class9read_dataEhPVhS1_j+0x86>
  } 
  else
    read(src_ptr, (uint8_t *) dst, len);
    30da:	c9 01       	movw	r24, r18
    30dc:	b5 01       	movw	r22, r10
    30de:	a8 01       	movw	r20, r16
    30e0:	0e 94 08 18 	call	0x3010	; 0x3010 <_ZN10W5100Class4readEjPhj>
}
    30e4:	df 91       	pop	r29
    30e6:	cf 91       	pop	r28
    30e8:	1f 91       	pop	r17
    30ea:	0f 91       	pop	r16
    30ec:	ff 90       	pop	r15
    30ee:	ef 90       	pop	r14
    30f0:	df 90       	pop	r13
    30f2:	cf 90       	pop	r12
    30f4:	bf 90       	pop	r11
    30f6:	af 90       	pop	r10
    30f8:	08 95       	ret

000030fa <_ZN10W5100Class20recv_data_processingEhPhjh>:
  writeSnTX_WR(s, ptr);
}


void W5100Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
{
    30fa:	4f 92       	push	r4
    30fc:	5f 92       	push	r5
    30fe:	6f 92       	push	r6
    3100:	7f 92       	push	r7
    3102:	8f 92       	push	r8
    3104:	9f 92       	push	r9
    3106:	af 92       	push	r10
    3108:	bf 92       	push	r11
    310a:	cf 92       	push	r12
    310c:	df 92       	push	r13
    310e:	ff 92       	push	r15
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	3c 01       	movw	r6, r24
    311a:	16 2f       	mov	r17, r22
    311c:	2a 01       	movw	r4, r20
    311e:	69 01       	movw	r12, r18
    3120:	f0 2e       	mov	r15, r16
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    3122:	c6 2f       	mov	r28, r22
    3124:	d0 e0       	ldi	r29, 0x00	; 0
    3126:	24 96       	adiw	r28, 0x04	; 4
    3128:	dc 2f       	mov	r29, r28
    312a:	cc 27       	eor	r28, r28
    312c:	0f 2e       	mov	r0, r31
    312e:	f8 e2       	ldi	r31, 0x28	; 40
    3130:	8f 2e       	mov	r8, r31
    3132:	99 24       	eor	r9, r9
    3134:	f0 2d       	mov	r31, r0
    3136:	8c 0e       	add	r8, r28
    3138:	9d 1e       	adc	r9, r29
    313a:	c4 01       	movw	r24, r8
    313c:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
    3140:	08 2f       	mov	r16, r24
    3142:	0f 2e       	mov	r0, r31
    3144:	f9 e2       	ldi	r31, 0x29	; 41
    3146:	af 2e       	mov	r10, r31
    3148:	bb 24       	eor	r11, r11
    314a:	f0 2d       	mov	r31, r0
    314c:	ac 0e       	add	r10, r28
    314e:	bd 1e       	adc	r11, r29
    3150:	c5 01       	movw	r24, r10
    3152:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
    3156:	28 2f       	mov	r18, r24
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	90 2f       	mov	r25, r16
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	e9 01       	movw	r28, r18
    3160:	c8 2b       	or	r28, r24
    3162:	d9 2b       	or	r29, r25
  uint16_t ptr;
  ptr = readSnRX_RD(s);
  read_data(s, (uint8_t *)ptr, data, len);
    3164:	c3 01       	movw	r24, r6
    3166:	61 2f       	mov	r22, r17
    3168:	ae 01       	movw	r20, r28
    316a:	92 01       	movw	r18, r4
    316c:	86 01       	movw	r16, r12
    316e:	0e 94 2f 18 	call	0x305e	; 0x305e <_ZN10W5100Class9read_dataEhPVhS1_j>
  if (!peek)
    3172:	ff 20       	and	r15, r15
    3174:	51 f4       	brne	.+20     	; 0x318a <_ZN10W5100Class20recv_data_processingEhPhjh+0x90>
  {
    ptr += len;
    3176:	cc 0d       	add	r28, r12
    3178:	dd 1d       	adc	r29, r13
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    317a:	c4 01       	movw	r24, r8
    317c:	6d 2f       	mov	r22, r29
    317e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    3182:	c5 01       	movw	r24, r10
    3184:	6c 2f       	mov	r22, r28
    3186:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
    writeSnRX_RD(s, ptr);
  }
}
    318a:	df 91       	pop	r29
    318c:	cf 91       	pop	r28
    318e:	1f 91       	pop	r17
    3190:	0f 91       	pop	r16
    3192:	ff 90       	pop	r15
    3194:	df 90       	pop	r13
    3196:	cf 90       	pop	r12
    3198:	bf 90       	pop	r11
    319a:	af 90       	pop	r10
    319c:	9f 90       	pop	r9
    319e:	8f 90       	pop	r8
    31a0:	7f 90       	pop	r7
    31a2:	6f 90       	pop	r6
    31a4:	5f 90       	pop	r5
    31a6:	4f 90       	pop	r4
    31a8:	08 95       	ret

000031aa <_ZN10W5100Class9execCmdSnEh7SockCMD>:
    resetSS();
  }
  return _len;
}

void W5100Class::execCmdSn(SOCKET s, SockCMD _cmd) {
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
    31ae:	d6 2f       	mov	r29, r22
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	c8 2f       	mov	r28, r24
    31b4:	cf 5f       	subi	r28, 0xFF	; 255
    31b6:	db 4f       	sbci	r29, 0xFB	; 251
    31b8:	ce 01       	movw	r24, r28
    31ba:	64 2f       	mov	r22, r20
    31bc:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN10W5100Class5writeEjh>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    31c0:	ce 01       	movw	r24, r28
    31c2:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <_ZN10W5100Class4readEj>
  // Send command to socket
  writeSnCR(s, _cmd);
  // Wait for command to complete
  while (readSnCR(s))
    31c6:	88 23       	and	r24, r24
    31c8:	d9 f7       	brne	.-10     	; 0x31c0 <_ZN10W5100Class9execCmdSnEh7SockCMD+0x16>
    ;
}
    31ca:	df 91       	pop	r29
    31cc:	cf 91       	pop	r28
    31ce:	08 95       	ret

000031d0 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    31d0:	fc 01       	movw	r30, r24
    31d2:	24 85       	ldd	r18, Z+12	; 0x0c
    31d4:	35 85       	ldd	r19, Z+13	; 0x0d
    31d6:	f9 01       	movw	r30, r18
    31d8:	e0 5c       	subi	r30, 0xC0	; 192
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 81       	ld	r24, Z
    31de:	91 81       	ldd	r25, Z+1	; 0x01
    31e0:	2e 5b       	subi	r18, 0xBE	; 190
    31e2:	3f 4f       	sbci	r19, 0xFF	; 255
    31e4:	f9 01       	movw	r30, r18
    31e6:	20 81       	ld	r18, Z
    31e8:	31 81       	ldd	r19, Z+1	; 0x01
    31ea:	82 1b       	sub	r24, r18
    31ec:	93 0b       	sbc	r25, r19
    31ee:	8f 73       	andi	r24, 0x3F	; 63
    31f0:	90 70       	andi	r25, 0x00	; 0
}
    31f2:	08 95       	ret

000031f4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    31f4:	fc 01       	movw	r30, r24
    31f6:	84 85       	ldd	r24, Z+12	; 0x0c
    31f8:	95 85       	ldd	r25, Z+13	; 0x0d
    31fa:	fc 01       	movw	r30, r24
    31fc:	e0 5c       	subi	r30, 0xC0	; 192
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	20 81       	ld	r18, Z
    3202:	31 81       	ldd	r19, Z+1	; 0x01
    3204:	fc 01       	movw	r30, r24
    3206:	ee 5b       	subi	r30, 0xBE	; 190
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	40 81       	ld	r20, Z
    320c:	51 81       	ldd	r21, Z+1	; 0x01
    320e:	24 17       	cp	r18, r20
    3210:	35 07       	cpc	r19, r21
    3212:	59 f0       	breq	.+22     	; 0x322a <_ZN14HardwareSerial4peekEv+0x36>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    3214:	fc 01       	movw	r30, r24
    3216:	ee 5b       	subi	r30, 0xBE	; 190
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	20 81       	ld	r18, Z
    321c:	31 81       	ldd	r19, Z+1	; 0x01
    321e:	82 0f       	add	r24, r18
    3220:	93 1f       	adc	r25, r19
    3222:	fc 01       	movw	r30, r24
    3224:	80 81       	ld	r24, Z
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    322a:	8f ef       	ldi	r24, 0xFF	; 255
    322c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    322e:	08 95       	ret

00003230 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    3230:	dc 01       	movw	r26, r24
    3232:	1c 96       	adiw	r26, 0x0c	; 12
    3234:	8d 91       	ld	r24, X+
    3236:	9c 91       	ld	r25, X
    3238:	1d 97       	sbiw	r26, 0x0d	; 13
    323a:	fc 01       	movw	r30, r24
    323c:	e0 5c       	subi	r30, 0xC0	; 192
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	20 81       	ld	r18, Z
    3242:	31 81       	ldd	r19, Z+1	; 0x01
    3244:	fc 01       	movw	r30, r24
    3246:	ee 5b       	subi	r30, 0xBE	; 190
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	40 81       	ld	r20, Z
    324c:	51 81       	ldd	r21, Z+1	; 0x01
    324e:	24 17       	cp	r18, r20
    3250:	35 07       	cpc	r19, r21
    3252:	99 f0       	breq	.+38     	; 0x327a <_ZN14HardwareSerial4readEv+0x4a>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    3254:	fc 01       	movw	r30, r24
    3256:	ee 5b       	subi	r30, 0xBE	; 190
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	20 81       	ld	r18, Z
    325c:	31 81       	ldd	r19, Z+1	; 0x01
    325e:	82 0f       	add	r24, r18
    3260:	93 1f       	adc	r25, r19
    3262:	dc 01       	movw	r26, r24
    3264:	8c 91       	ld	r24, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    3266:	20 81       	ld	r18, Z
    3268:	31 81       	ldd	r19, Z+1	; 0x01
    326a:	2f 5f       	subi	r18, 0xFF	; 255
    326c:	3f 4f       	sbci	r19, 0xFF	; 255
    326e:	2f 73       	andi	r18, 0x3F	; 63
    3270:	30 70       	andi	r19, 0x00	; 0
    3272:	31 83       	std	Z+1, r19	; 0x01
    3274:	20 83       	st	Z, r18
    return c;
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    327a:	8f ef       	ldi	r24, 0xFF	; 255
    327c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    327e:	08 95       	ret

00003280 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    3280:	dc 01       	movw	r26, r24
    3282:	1e 96       	adiw	r26, 0x0e	; 14
    3284:	ed 91       	ld	r30, X+
    3286:	fc 91       	ld	r31, X
    3288:	1f 97       	sbiw	r26, 0x0f	; 15
    328a:	df 01       	movw	r26, r30
    328c:	a0 5c       	subi	r26, 0xC0	; 192
    328e:	bf 4f       	sbci	r27, 0xFF	; 255
    3290:	ee 5b       	subi	r30, 0xBE	; 190
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	2d 91       	ld	r18, X+
    3296:	3c 91       	ld	r19, X
    3298:	11 97       	sbiw	r26, 0x01	; 1
    329a:	80 81       	ld	r24, Z
    329c:	91 81       	ldd	r25, Z+1	; 0x01
    329e:	28 17       	cp	r18, r24
    32a0:	39 07       	cpc	r19, r25
    32a2:	c1 f7       	brne	.-16     	; 0x3294 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    32a4:	08 95       	ret

000032a6 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    32a6:	1f 93       	push	r17
    32a8:	cf 93       	push	r28
    32aa:	df 93       	push	r29
    32ac:	ec 01       	movw	r28, r24
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    32ae:	ae 85       	ldd	r26, Y+14	; 0x0e
    32b0:	bf 85       	ldd	r27, Y+15	; 0x0f
    32b2:	fd 01       	movw	r30, r26
    32b4:	e0 5c       	subi	r30, 0xC0	; 192
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	20 81       	ld	r18, Z
    32ba:	31 81       	ldd	r19, Z+1	; 0x01
    32bc:	2f 5f       	subi	r18, 0xFF	; 255
    32be:	3f 4f       	sbci	r19, 0xFF	; 255
    32c0:	2f 73       	andi	r18, 0x3F	; 63
    32c2:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    32c4:	12 2f       	mov	r17, r18
    32c6:	73 2f       	mov	r23, r19
    32c8:	fd 01       	movw	r30, r26
    32ca:	ee 5b       	subi	r30, 0xBE	; 190
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	41 2f       	mov	r20, r17
    32d0:	57 2f       	mov	r21, r23
    32d2:	80 81       	ld	r24, Z
    32d4:	91 81       	ldd	r25, Z+1	; 0x01
    32d6:	28 17       	cp	r18, r24
    32d8:	39 07       	cpc	r19, r25
    32da:	c9 f3       	breq	.-14     	; 0x32ce <_ZN14HardwareSerial5writeEh+0x28>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    32dc:	fd 01       	movw	r30, r26
    32de:	e0 5c       	subi	r30, 0xC0	; 192
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	80 81       	ld	r24, Z
    32e4:	91 81       	ldd	r25, Z+1	; 0x01
    32e6:	a8 0f       	add	r26, r24
    32e8:	b9 1f       	adc	r27, r25
    32ea:	6c 93       	st	X, r22
  _tx_buffer->head = i;
    32ec:	ee 85       	ldd	r30, Y+14	; 0x0e
    32ee:	ff 85       	ldd	r31, Y+15	; 0x0f
    32f0:	e0 5c       	subi	r30, 0xC0	; 192
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	51 83       	std	Z+1, r21	; 0x01
    32f6:	40 83       	st	Z, r20
	
  sbi(*_ucsrb, _udrie);
    32f8:	ee 89       	ldd	r30, Y+22	; 0x16
    32fa:	ff 89       	ldd	r31, Y+23	; 0x17
    32fc:	40 81       	ld	r20, Z
    32fe:	21 e0       	ldi	r18, 0x01	; 1
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	c9 01       	movw	r24, r18
    3304:	0d 8c       	ldd	r0, Y+29	; 0x1d
    3306:	02 c0       	rjmp	.+4      	; 0x330c <_ZN14HardwareSerial5writeEh+0x66>
    3308:	88 0f       	add	r24, r24
    330a:	99 1f       	adc	r25, r25
    330c:	0a 94       	dec	r0
    330e:	e2 f7       	brpl	.-8      	; 0x3308 <_ZN14HardwareSerial5writeEh+0x62>
    3310:	84 2b       	or	r24, r20
    3312:	80 83       	st	Z, r24
  
  return 1;
}
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	1f 91       	pop	r17
    331e:	08 95       	ret

00003320 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    3320:	08 95       	ret

00003322 <__vector_25>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    3322:	1f 92       	push	r1
    3324:	0f 92       	push	r0
    3326:	0f b6       	in	r0, 0x3f	; 63
    3328:	0f 92       	push	r0
    332a:	0b b6       	in	r0, 0x3b	; 59
    332c:	0f 92       	push	r0
    332e:	11 24       	eor	r1, r1
    3330:	2f 93       	push	r18
    3332:	3f 93       	push	r19
    3334:	4f 93       	push	r20
    3336:	8f 93       	push	r24
    3338:	9f 93       	push	r25
    333a:	ef 93       	push	r30
    333c:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    333e:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    3342:	80 91 29 09 	lds	r24, 0x0929
    3346:	90 91 2a 09 	lds	r25, 0x092A
    334a:	01 96       	adiw	r24, 0x01	; 1
    334c:	8f 73       	andi	r24, 0x3F	; 63
    334e:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    3350:	20 91 2b 09 	lds	r18, 0x092B
    3354:	30 91 2c 09 	lds	r19, 0x092C
    3358:	82 17       	cp	r24, r18
    335a:	93 07       	cpc	r25, r19
    335c:	59 f0       	breq	.+22     	; 0x3374 <__vector_25+0x52>
    buffer->buffer[buffer->head] = c;
    335e:	e0 91 29 09 	lds	r30, 0x0929
    3362:	f0 91 2a 09 	lds	r31, 0x092A
    3366:	e7 51       	subi	r30, 0x17	; 23
    3368:	f7 4f       	sbci	r31, 0xF7	; 247
    336a:	40 83       	st	Z, r20
    buffer->head = i;
    336c:	90 93 2a 09 	sts	0x092A, r25
    3370:	80 93 29 09 	sts	0x0929, r24
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    3374:	ff 91       	pop	r31
    3376:	ef 91       	pop	r30
    3378:	9f 91       	pop	r25
    337a:	8f 91       	pop	r24
    337c:	4f 91       	pop	r20
    337e:	3f 91       	pop	r19
    3380:	2f 91       	pop	r18
    3382:	0f 90       	pop	r0
    3384:	0b be       	out	0x3b, r0	; 59
    3386:	0f 90       	pop	r0
    3388:	0f be       	out	0x3f, r0	; 63
    338a:	0f 90       	pop	r0
    338c:	1f 90       	pop	r1
    338e:	18 95       	reti

00003390 <_Z12serialEvent1v>:
#endif
#endif

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
    3390:	08 95       	ret

00003392 <__vector_36>:
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
  {
    3392:	1f 92       	push	r1
    3394:	0f 92       	push	r0
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	0f 92       	push	r0
    339a:	0b b6       	in	r0, 0x3b	; 59
    339c:	0f 92       	push	r0
    339e:	11 24       	eor	r1, r1
    33a0:	2f 93       	push	r18
    33a2:	3f 93       	push	r19
    33a4:	4f 93       	push	r20
    33a6:	8f 93       	push	r24
    33a8:	9f 93       	push	r25
    33aa:	ef 93       	push	r30
    33ac:	ff 93       	push	r31
    unsigned char c = UDR1;
    33ae:	40 91 ce 00 	lds	r20, 0x00CE
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    33b2:	80 91 a1 08 	lds	r24, 0x08A1
    33b6:	90 91 a2 08 	lds	r25, 0x08A2
    33ba:	01 96       	adiw	r24, 0x01	; 1
    33bc:	8f 73       	andi	r24, 0x3F	; 63
    33be:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    33c0:	20 91 a3 08 	lds	r18, 0x08A3
    33c4:	30 91 a4 08 	lds	r19, 0x08A4
    33c8:	82 17       	cp	r24, r18
    33ca:	93 07       	cpc	r25, r19
    33cc:	59 f0       	breq	.+22     	; 0x33e4 <__vector_36+0x52>
    buffer->buffer[buffer->head] = c;
    33ce:	e0 91 a1 08 	lds	r30, 0x08A1
    33d2:	f0 91 a2 08 	lds	r31, 0x08A2
    33d6:	ef 59       	subi	r30, 0x9F	; 159
    33d8:	f7 4f       	sbci	r31, 0xF7	; 247
    33da:	40 83       	st	Z, r20
    buffer->head = i;
    33dc:	90 93 a2 08 	sts	0x08A2, r25
    33e0:	80 93 a1 08 	sts	0x08A1, r24
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
  {
    unsigned char c = UDR1;
    store_char(c, &rx_buffer1);
  }
    33e4:	ff 91       	pop	r31
    33e6:	ef 91       	pop	r30
    33e8:	9f 91       	pop	r25
    33ea:	8f 91       	pop	r24
    33ec:	4f 91       	pop	r20
    33ee:	3f 91       	pop	r19
    33f0:	2f 91       	pop	r18
    33f2:	0f 90       	pop	r0
    33f4:	0b be       	out	0x3b, r0	; 59
    33f6:	0f 90       	pop	r0
    33f8:	0f be       	out	0x3f, r0	; 63
    33fa:	0f 90       	pop	r0
    33fc:	1f 90       	pop	r1
    33fe:	18 95       	reti

00003400 <_Z12serialEvent2v>:
  #error SIG_USART1_RECV
#endif

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
    3400:	08 95       	ret

00003402 <__vector_51>:
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
  {
    3402:	1f 92       	push	r1
    3404:	0f 92       	push	r0
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	0f 92       	push	r0
    340a:	0b b6       	in	r0, 0x3b	; 59
    340c:	0f 92       	push	r0
    340e:	11 24       	eor	r1, r1
    3410:	2f 93       	push	r18
    3412:	3f 93       	push	r19
    3414:	4f 93       	push	r20
    3416:	8f 93       	push	r24
    3418:	9f 93       	push	r25
    341a:	ef 93       	push	r30
    341c:	ff 93       	push	r31
    unsigned char c = UDR2;
    341e:	40 91 d6 00 	lds	r20, 0x00D6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    3422:	80 91 19 08 	lds	r24, 0x0819
    3426:	90 91 1a 08 	lds	r25, 0x081A
    342a:	01 96       	adiw	r24, 0x01	; 1
    342c:	8f 73       	andi	r24, 0x3F	; 63
    342e:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    3430:	20 91 1b 08 	lds	r18, 0x081B
    3434:	30 91 1c 08 	lds	r19, 0x081C
    3438:	82 17       	cp	r24, r18
    343a:	93 07       	cpc	r25, r19
    343c:	59 f0       	breq	.+22     	; 0x3454 <__vector_51+0x52>
    buffer->buffer[buffer->head] = c;
    343e:	e0 91 19 08 	lds	r30, 0x0819
    3442:	f0 91 1a 08 	lds	r31, 0x081A
    3446:	e7 52       	subi	r30, 0x27	; 39
    3448:	f8 4f       	sbci	r31, 0xF8	; 248
    344a:	40 83       	st	Z, r20
    buffer->head = i;
    344c:	90 93 1a 08 	sts	0x081A, r25
    3450:	80 93 19 08 	sts	0x0819, r24
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
  {
    unsigned char c = UDR2;
    store_char(c, &rx_buffer2);
  }
    3454:	ff 91       	pop	r31
    3456:	ef 91       	pop	r30
    3458:	9f 91       	pop	r25
    345a:	8f 91       	pop	r24
    345c:	4f 91       	pop	r20
    345e:	3f 91       	pop	r19
    3460:	2f 91       	pop	r18
    3462:	0f 90       	pop	r0
    3464:	0b be       	out	0x3b, r0	; 59
    3466:	0f 90       	pop	r0
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	0f 90       	pop	r0
    346c:	1f 90       	pop	r1
    346e:	18 95       	reti

00003470 <_Z12serialEvent3v>:
  #error SIG_USART2_RECV
#endif

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
    3470:	08 95       	ret

00003472 <__vector_54>:
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
  {
    3472:	1f 92       	push	r1
    3474:	0f 92       	push	r0
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	0f 92       	push	r0
    347a:	0b b6       	in	r0, 0x3b	; 59
    347c:	0f 92       	push	r0
    347e:	11 24       	eor	r1, r1
    3480:	2f 93       	push	r18
    3482:	3f 93       	push	r19
    3484:	4f 93       	push	r20
    3486:	8f 93       	push	r24
    3488:	9f 93       	push	r25
    348a:	ef 93       	push	r30
    348c:	ff 93       	push	r31
    unsigned char c = UDR3;
    348e:	40 91 36 01 	lds	r20, 0x0136
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    3492:	80 91 91 07 	lds	r24, 0x0791
    3496:	90 91 92 07 	lds	r25, 0x0792
    349a:	01 96       	adiw	r24, 0x01	; 1
    349c:	8f 73       	andi	r24, 0x3F	; 63
    349e:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    34a0:	20 91 93 07 	lds	r18, 0x0793
    34a4:	30 91 94 07 	lds	r19, 0x0794
    34a8:	82 17       	cp	r24, r18
    34aa:	93 07       	cpc	r25, r19
    34ac:	59 f0       	breq	.+22     	; 0x34c4 <__vector_54+0x52>
    buffer->buffer[buffer->head] = c;
    34ae:	e0 91 91 07 	lds	r30, 0x0791
    34b2:	f0 91 92 07 	lds	r31, 0x0792
    34b6:	ef 5a       	subi	r30, 0xAF	; 175
    34b8:	f8 4f       	sbci	r31, 0xF8	; 248
    34ba:	40 83       	st	Z, r20
    buffer->head = i;
    34bc:	90 93 92 07 	sts	0x0792, r25
    34c0:	80 93 91 07 	sts	0x0791, r24
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
  {
    unsigned char c = UDR3;
    store_char(c, &rx_buffer3);
  }
    34c4:	ff 91       	pop	r31
    34c6:	ef 91       	pop	r30
    34c8:	9f 91       	pop	r25
    34ca:	8f 91       	pop	r24
    34cc:	4f 91       	pop	r20
    34ce:	3f 91       	pop	r19
    34d0:	2f 91       	pop	r18
    34d2:	0f 90       	pop	r0
    34d4:	0b be       	out	0x3b, r0	; 59
    34d6:	0f 90       	pop	r0
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	0f 90       	pop	r0
    34dc:	1f 90       	pop	r1
    34de:	18 95       	reti

000034e0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    34e0:	8e ee       	ldi	r24, 0xEE	; 238
    34e2:	96 e0       	ldi	r25, 0x06	; 6
    34e4:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <_ZN14HardwareSerial9availableEv>
    34e8:	00 97       	sbiw	r24, 0x00	; 0
    34ea:	11 f0       	breq	.+4      	; 0x34f0 <_Z14serialEventRunv+0x10>
    34ec:	0e 94 90 19 	call	0x3320	; 0x3320 <_Z11serialEventv>
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
    34f0:	8f ec       	ldi	r24, 0xCF	; 207
    34f2:	96 e0       	ldi	r25, 0x06	; 6
    34f4:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <_ZN14HardwareSerial9availableEv>
    34f8:	00 97       	sbiw	r24, 0x00	; 0
    34fa:	11 f0       	breq	.+4      	; 0x3500 <_Z14serialEventRunv+0x20>
    34fc:	0e 94 c8 19 	call	0x3390	; 0x3390 <_Z12serialEvent1v>
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
    3500:	80 eb       	ldi	r24, 0xB0	; 176
    3502:	96 e0       	ldi	r25, 0x06	; 6
    3504:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <_ZN14HardwareSerial9availableEv>
    3508:	00 97       	sbiw	r24, 0x00	; 0
    350a:	11 f0       	breq	.+4      	; 0x3510 <_Z14serialEventRunv+0x30>
    350c:	0e 94 00 1a 	call	0x3400	; 0x3400 <_Z12serialEvent2v>
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
    3510:	81 e9       	ldi	r24, 0x91	; 145
    3512:	96 e0       	ldi	r25, 0x06	; 6
    3514:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <_ZN14HardwareSerial9availableEv>
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	11 f0       	breq	.+4      	; 0x3520 <_Z14serialEventRunv+0x40>
    351c:	0e 94 38 1a 	call	0x3470	; 0x3470 <_Z12serialEvent3v>
    3520:	08 95       	ret

00003522 <__vector_26>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    3522:	1f 92       	push	r1
    3524:	0f 92       	push	r0
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	0f 92       	push	r0
    352a:	0b b6       	in	r0, 0x3b	; 59
    352c:	0f 92       	push	r0
    352e:	11 24       	eor	r1, r1
    3530:	2f 93       	push	r18
    3532:	3f 93       	push	r19
    3534:	8f 93       	push	r24
    3536:	9f 93       	push	r25
    3538:	ef 93       	push	r30
    353a:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    353c:	20 91 e5 08 	lds	r18, 0x08E5
    3540:	30 91 e6 08 	lds	r19, 0x08E6
    3544:	80 91 e7 08 	lds	r24, 0x08E7
    3548:	90 91 e8 08 	lds	r25, 0x08E8
    354c:	28 17       	cp	r18, r24
    354e:	39 07       	cpc	r19, r25
    3550:	31 f4       	brne	.+12     	; 0x355e <__vector_26+0x3c>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    3552:	e1 ec       	ldi	r30, 0xC1	; 193
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	80 81       	ld	r24, Z
    3558:	8f 7d       	andi	r24, 0xDF	; 223
    355a:	80 83       	st	Z, r24
    355c:	14 c0       	rjmp	.+40     	; 0x3586 <__vector_26+0x64>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    355e:	e0 91 e7 08 	lds	r30, 0x08E7
    3562:	f0 91 e8 08 	lds	r31, 0x08E8
    3566:	eb 55       	subi	r30, 0x5B	; 91
    3568:	f7 4f       	sbci	r31, 0xF7	; 247
    356a:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    356c:	80 91 e7 08 	lds	r24, 0x08E7
    3570:	90 91 e8 08 	lds	r25, 0x08E8
    3574:	01 96       	adiw	r24, 0x01	; 1
    3576:	8f 73       	andi	r24, 0x3F	; 63
    3578:	90 70       	andi	r25, 0x00	; 0
    357a:	90 93 e8 08 	sts	0x08E8, r25
    357e:	80 93 e7 08 	sts	0x08E7, r24
	
  #if defined(UDR0)
    UDR0 = c;
    3582:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    3586:	ff 91       	pop	r31
    3588:	ef 91       	pop	r30
    358a:	9f 91       	pop	r25
    358c:	8f 91       	pop	r24
    358e:	3f 91       	pop	r19
    3590:	2f 91       	pop	r18
    3592:	0f 90       	pop	r0
    3594:	0b be       	out	0x3b, r0	; 59
    3596:	0f 90       	pop	r0
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	0f 90       	pop	r0
    359c:	1f 90       	pop	r1
    359e:	18 95       	reti

000035a0 <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
{
    35a0:	1f 92       	push	r1
    35a2:	0f 92       	push	r0
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	0f 92       	push	r0
    35a8:	0b b6       	in	r0, 0x3b	; 59
    35aa:	0f 92       	push	r0
    35ac:	11 24       	eor	r1, r1
    35ae:	2f 93       	push	r18
    35b0:	3f 93       	push	r19
    35b2:	8f 93       	push	r24
    35b4:	9f 93       	push	r25
    35b6:	ef 93       	push	r30
    35b8:	ff 93       	push	r31
  if (tx_buffer1.head == tx_buffer1.tail) {
    35ba:	20 91 5d 08 	lds	r18, 0x085D
    35be:	30 91 5e 08 	lds	r19, 0x085E
    35c2:	80 91 5f 08 	lds	r24, 0x085F
    35c6:	90 91 60 08 	lds	r25, 0x0860
    35ca:	28 17       	cp	r18, r24
    35cc:	39 07       	cpc	r19, r25
    35ce:	31 f4       	brne	.+12     	; 0x35dc <__vector_37+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
    35d0:	e9 ec       	ldi	r30, 0xC9	; 201
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	80 81       	ld	r24, Z
    35d6:	8f 7d       	andi	r24, 0xDF	; 223
    35d8:	80 83       	st	Z, r24
    35da:	14 c0       	rjmp	.+40     	; 0x3604 <__vector_37+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
    35dc:	e0 91 5f 08 	lds	r30, 0x085F
    35e0:	f0 91 60 08 	lds	r31, 0x0860
    35e4:	e3 5e       	subi	r30, 0xE3	; 227
    35e6:	f7 4f       	sbci	r31, 0xF7	; 247
    35e8:	20 81       	ld	r18, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
    35ea:	80 91 5f 08 	lds	r24, 0x085F
    35ee:	90 91 60 08 	lds	r25, 0x0860
    35f2:	01 96       	adiw	r24, 0x01	; 1
    35f4:	8f 73       	andi	r24, 0x3F	; 63
    35f6:	90 70       	andi	r25, 0x00	; 0
    35f8:	90 93 60 08 	sts	0x0860, r25
    35fc:	80 93 5f 08 	sts	0x085F, r24
	
    UDR1 = c;
    3600:	20 93 ce 00 	sts	0x00CE, r18
  }
}
    3604:	ff 91       	pop	r31
    3606:	ef 91       	pop	r30
    3608:	9f 91       	pop	r25
    360a:	8f 91       	pop	r24
    360c:	3f 91       	pop	r19
    360e:	2f 91       	pop	r18
    3610:	0f 90       	pop	r0
    3612:	0b be       	out	0x3b, r0	; 59
    3614:	0f 90       	pop	r0
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	0f 90       	pop	r0
    361a:	1f 90       	pop	r1
    361c:	18 95       	reti

0000361e <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
{
    361e:	1f 92       	push	r1
    3620:	0f 92       	push	r0
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	0f 92       	push	r0
    3626:	0b b6       	in	r0, 0x3b	; 59
    3628:	0f 92       	push	r0
    362a:	11 24       	eor	r1, r1
    362c:	2f 93       	push	r18
    362e:	3f 93       	push	r19
    3630:	8f 93       	push	r24
    3632:	9f 93       	push	r25
    3634:	ef 93       	push	r30
    3636:	ff 93       	push	r31
  if (tx_buffer2.head == tx_buffer2.tail) {
    3638:	20 91 d5 07 	lds	r18, 0x07D5
    363c:	30 91 d6 07 	lds	r19, 0x07D6
    3640:	80 91 d7 07 	lds	r24, 0x07D7
    3644:	90 91 d8 07 	lds	r25, 0x07D8
    3648:	28 17       	cp	r18, r24
    364a:	39 07       	cpc	r19, r25
    364c:	31 f4       	brne	.+12     	; 0x365a <__vector_52+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
    364e:	e1 ed       	ldi	r30, 0xD1	; 209
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	80 81       	ld	r24, Z
    3654:	8f 7d       	andi	r24, 0xDF	; 223
    3656:	80 83       	st	Z, r24
    3658:	14 c0       	rjmp	.+40     	; 0x3682 <__vector_52+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
    365a:	e0 91 d7 07 	lds	r30, 0x07D7
    365e:	f0 91 d8 07 	lds	r31, 0x07D8
    3662:	eb 56       	subi	r30, 0x6B	; 107
    3664:	f8 4f       	sbci	r31, 0xF8	; 248
    3666:	20 81       	ld	r18, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
    3668:	80 91 d7 07 	lds	r24, 0x07D7
    366c:	90 91 d8 07 	lds	r25, 0x07D8
    3670:	01 96       	adiw	r24, 0x01	; 1
    3672:	8f 73       	andi	r24, 0x3F	; 63
    3674:	90 70       	andi	r25, 0x00	; 0
    3676:	90 93 d8 07 	sts	0x07D8, r25
    367a:	80 93 d7 07 	sts	0x07D7, r24
	
    UDR2 = c;
    367e:	20 93 d6 00 	sts	0x00D6, r18
  }
}
    3682:	ff 91       	pop	r31
    3684:	ef 91       	pop	r30
    3686:	9f 91       	pop	r25
    3688:	8f 91       	pop	r24
    368a:	3f 91       	pop	r19
    368c:	2f 91       	pop	r18
    368e:	0f 90       	pop	r0
    3690:	0b be       	out	0x3b, r0	; 59
    3692:	0f 90       	pop	r0
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	0f 90       	pop	r0
    3698:	1f 90       	pop	r1
    369a:	18 95       	reti

0000369c <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
{
    369c:	1f 92       	push	r1
    369e:	0f 92       	push	r0
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	0f 92       	push	r0
    36a4:	0b b6       	in	r0, 0x3b	; 59
    36a6:	0f 92       	push	r0
    36a8:	11 24       	eor	r1, r1
    36aa:	2f 93       	push	r18
    36ac:	3f 93       	push	r19
    36ae:	8f 93       	push	r24
    36b0:	9f 93       	push	r25
    36b2:	ef 93       	push	r30
    36b4:	ff 93       	push	r31
  if (tx_buffer3.head == tx_buffer3.tail) {
    36b6:	20 91 4d 07 	lds	r18, 0x074D
    36ba:	30 91 4e 07 	lds	r19, 0x074E
    36be:	80 91 4f 07 	lds	r24, 0x074F
    36c2:	90 91 50 07 	lds	r25, 0x0750
    36c6:	28 17       	cp	r18, r24
    36c8:	39 07       	cpc	r19, r25
    36ca:	31 f4       	brne	.+12     	; 0x36d8 <__vector_55+0x3c>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
    36cc:	e1 e3       	ldi	r30, 0x31	; 49
    36ce:	f1 e0       	ldi	r31, 0x01	; 1
    36d0:	80 81       	ld	r24, Z
    36d2:	8f 7d       	andi	r24, 0xDF	; 223
    36d4:	80 83       	st	Z, r24
    36d6:	14 c0       	rjmp	.+40     	; 0x3700 <__vector_55+0x64>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
    36d8:	e0 91 4f 07 	lds	r30, 0x074F
    36dc:	f0 91 50 07 	lds	r31, 0x0750
    36e0:	e3 5f       	subi	r30, 0xF3	; 243
    36e2:	f8 4f       	sbci	r31, 0xF8	; 248
    36e4:	20 81       	ld	r18, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
    36e6:	80 91 4f 07 	lds	r24, 0x074F
    36ea:	90 91 50 07 	lds	r25, 0x0750
    36ee:	01 96       	adiw	r24, 0x01	; 1
    36f0:	8f 73       	andi	r24, 0x3F	; 63
    36f2:	90 70       	andi	r25, 0x00	; 0
    36f4:	90 93 50 07 	sts	0x0750, r25
    36f8:	80 93 4f 07 	sts	0x074F, r24
	
    UDR3 = c;
    36fc:	20 93 36 01 	sts	0x0136, r18
  }
}
    3700:	ff 91       	pop	r31
    3702:	ef 91       	pop	r30
    3704:	9f 91       	pop	r25
    3706:	8f 91       	pop	r24
    3708:	3f 91       	pop	r19
    370a:	2f 91       	pop	r18
    370c:	0f 90       	pop	r0
    370e:	0b be       	out	0x3b, r0	; 59
    3710:	0f 90       	pop	r0
    3712:	0f be       	out	0x3f, r0	; 63
    3714:	0f 90       	pop	r0
    3716:	1f 90       	pop	r1
    3718:	18 95       	reti

0000371a <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
    371a:	8f 92       	push	r8
    371c:	af 92       	push	r10
    371e:	bf 92       	push	r11
    3720:	cf 92       	push	r12
    3722:	df 92       	push	r13
    3724:	ef 92       	push	r14
    3726:	ff 92       	push	r15
    3728:	0f 93       	push	r16
    372a:	1f 93       	push	r17
    372c:	cf 93       	push	r28
    372e:	df 93       	push	r29
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
    3734:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3736:	13 82       	std	Z+3, r1	; 0x03
    3738:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    373a:	88 ee       	ldi	r24, 0xE8	; 232
    373c:	93 e0       	ldi	r25, 0x03	; 3
    373e:	a0 e0       	ldi	r26, 0x00	; 0
    3740:	b0 e0       	ldi	r27, 0x00	; 0
    3742:	84 83       	std	Z+4, r24	; 0x04
    3744:	95 83       	std	Z+5, r25	; 0x05
    3746:	a6 83       	std	Z+6, r26	; 0x06
    3748:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    374a:	8b e2       	ldi	r24, 0x2B	; 43
    374c:	93 e0       	ldi	r25, 0x03	; 3
    374e:	91 83       	std	Z+1, r25	; 0x01
    3750:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    3752:	75 87       	std	Z+13, r23	; 0x0d
    3754:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
    3756:	57 87       	std	Z+15, r21	; 0x0f
    3758:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    375a:	31 8b       	std	Z+17, r19	; 0x11
    375c:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    375e:	13 8b       	std	Z+19, r17	; 0x13
    3760:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
    3762:	f5 8a       	std	Z+21, r15	; 0x15
    3764:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
    3766:	d7 8a       	std	Z+23, r13	; 0x17
    3768:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
    376a:	b1 8e       	std	Z+25, r11	; 0x19
    376c:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
    376e:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
    3770:	8f 85       	ldd	r24, Y+15	; 0x0f
    3772:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    3774:	88 89       	ldd	r24, Y+16	; 0x10
    3776:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    3778:	89 89       	ldd	r24, Y+17	; 0x11
    377a:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    377c:	8a 89       	ldd	r24, Y+18	; 0x12
    377e:	86 8f       	std	Z+30, r24	; 0x1e
}
    3780:	df 91       	pop	r29
    3782:	cf 91       	pop	r28
    3784:	1f 91       	pop	r17
    3786:	0f 91       	pop	r16
    3788:	ff 90       	pop	r15
    378a:	ef 90       	pop	r14
    378c:	df 90       	pop	r13
    378e:	cf 90       	pop	r12
    3790:	bf 90       	pop	r11
    3792:	af 90       	pop	r10
    3794:	8f 90       	pop	r8
    3796:	08 95       	ret

00003798 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    3798:	2f 92       	push	r2
    379a:	3f 92       	push	r3
    379c:	4f 92       	push	r4
    379e:	5f 92       	push	r5
    37a0:	6f 92       	push	r6
    37a2:	7f 92       	push	r7
    37a4:	8f 92       	push	r8
    37a6:	9f 92       	push	r9
    37a8:	af 92       	push	r10
    37aa:	bf 92       	push	r11
    37ac:	cf 92       	push	r12
    37ae:	df 92       	push	r13
    37b0:	ef 92       	push	r14
    37b2:	ff 92       	push	r15
    37b4:	0f 93       	push	r16
    37b6:	1f 93       	push	r17
    37b8:	cf 93       	push	r28
    37ba:	df 93       	push	r29
    37bc:	8c 01       	movw	r16, r24
    37be:	6a 01       	movw	r12, r20
    37c0:	7b 01       	movw	r14, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    37c2:	c1 e0       	ldi	r28, 0x01	; 1
    37c4:	40 30       	cpi	r20, 0x00	; 0
    37c6:	21 ee       	ldi	r18, 0xE1	; 225
    37c8:	52 07       	cpc	r21, r18
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	62 07       	cpc	r22, r18
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	72 07       	cpc	r23, r18
    37d2:	21 f4       	brne	.+8      	; 0x37dc <_ZN14HardwareSerial5beginEm+0x44>
    37d4:	c0 e0       	ldi	r28, 0x00	; 0
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <_ZN14HardwareSerial5beginEm+0x44>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    37d8:	cd 2f       	mov	r28, r29
    37da:	18 c0       	rjmp	.+48     	; 0x380c <_ZN14HardwareSerial5beginEm+0x74>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    37dc:	22 24       	eor	r2, r2
    37de:	33 24       	eor	r3, r3
    37e0:	23 94       	inc	r2
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    37e2:	0f 2e       	mov	r0, r31
    37e4:	f0 e0       	ldi	r31, 0x00	; 0
    37e6:	8f 2e       	mov	r8, r31
    37e8:	f9 e0       	ldi	r31, 0x09	; 9
    37ea:	9f 2e       	mov	r9, r31
    37ec:	fd e3       	ldi	r31, 0x3D	; 61
    37ee:	af 2e       	mov	r10, r31
    37f0:	f0 e0       	ldi	r31, 0x00	; 0
    37f2:	bf 2e       	mov	r11, r31
    37f4:	f0 2d       	mov	r31, r0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    37f6:	0f 2e       	mov	r0, r31
    37f8:	f0 e8       	ldi	r31, 0x80	; 128
    37fa:	4f 2e       	mov	r4, r31
    37fc:	f4 e8       	ldi	r31, 0x84	; 132
    37fe:	5f 2e       	mov	r5, r31
    3800:	fe e1       	ldi	r31, 0x1E	; 30
    3802:	6f 2e       	mov	r6, r31
    3804:	f0 e0       	ldi	r31, 0x00	; 0
    3806:	7f 2e       	mov	r7, r31
    3808:	f0 2d       	mov	r31, r0
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    380a:	d0 e0       	ldi	r29, 0x00	; 0
  }
#endif

try_again:
  
  if (use_u2x) {
    380c:	cc 23       	and	r28, r28
    380e:	f1 f0       	breq	.+60     	; 0x384c <_ZN14HardwareSerial5beginEm+0xb4>
    *_ucsra = 1 << _u2x;
    3810:	d8 01       	movw	r26, r16
    3812:	54 96       	adiw	r26, 0x14	; 20
    3814:	ed 91       	ld	r30, X+
    3816:	fc 91       	ld	r31, X
    3818:	55 97       	sbiw	r26, 0x15	; 21
    381a:	c1 01       	movw	r24, r2
    381c:	5e 96       	adiw	r26, 0x1e	; 30
    381e:	0c 90       	ld	r0, X
    3820:	02 c0       	rjmp	.+4      	; 0x3826 <_ZN14HardwareSerial5beginEm+0x8e>
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	0a 94       	dec	r0
    3828:	e2 f7       	brpl	.-8      	; 0x3822 <_ZN14HardwareSerial5beginEm+0x8a>
    382a:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    382c:	c5 01       	movw	r24, r10
    382e:	b4 01       	movw	r22, r8
    3830:	a7 01       	movw	r20, r14
    3832:	96 01       	movw	r18, r12
    3834:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    3838:	da 01       	movw	r26, r20
    383a:	c9 01       	movw	r24, r18
    383c:	01 97       	sbiw	r24, 0x01	; 1
    383e:	a1 09       	sbc	r26, r1
    3840:	b1 09       	sbc	r27, r1
    3842:	b6 95       	lsr	r27
    3844:	a7 95       	ror	r26
    3846:	97 95       	ror	r25
    3848:	87 95       	ror	r24
    384a:	15 c0       	rjmp	.+42     	; 0x3876 <_ZN14HardwareSerial5beginEm+0xde>
  } else {
    *_ucsra = 0;
    384c:	d8 01       	movw	r26, r16
    384e:	54 96       	adiw	r26, 0x14	; 20
    3850:	ed 91       	ld	r30, X+
    3852:	fc 91       	ld	r31, X
    3854:	55 97       	sbiw	r26, 0x15	; 21
    3856:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3858:	c3 01       	movw	r24, r6
    385a:	b2 01       	movw	r22, r4
    385c:	a7 01       	movw	r20, r14
    385e:	96 01       	movw	r18, r12
    3860:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    3864:	da 01       	movw	r26, r20
    3866:	c9 01       	movw	r24, r18
    3868:	01 97       	sbiw	r24, 0x01	; 1
    386a:	a1 09       	sbc	r26, r1
    386c:	b1 09       	sbc	r27, r1
    386e:	b6 95       	lsr	r27
    3870:	a7 95       	ror	r26
    3872:	97 95       	ror	r25
    3874:	87 95       	ror	r24
  }
  
  if ((baud_setting > 4095) && use_u2x)
    3876:	b0 e1       	ldi	r27, 0x10	; 16
    3878:	80 30       	cpi	r24, 0x00	; 0
    387a:	9b 07       	cpc	r25, r27
    387c:	18 f0       	brcs	.+6      	; 0x3884 <_ZN14HardwareSerial5beginEm+0xec>
    387e:	cc 23       	and	r28, r28
    3880:	09 f0       	breq	.+2      	; 0x3884 <_ZN14HardwareSerial5beginEm+0xec>
    3882:	aa cf       	rjmp	.-172    	; 0x37d8 <_ZN14HardwareSerial5beginEm+0x40>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3884:	d8 01       	movw	r26, r16
    3886:	50 96       	adiw	r26, 0x10	; 16
    3888:	ed 91       	ld	r30, X+
    388a:	fc 91       	ld	r31, X
    388c:	51 97       	sbiw	r26, 0x11	; 17
    388e:	90 83       	st	Z, r25
  *_ubrrl = baud_setting;
    3890:	52 96       	adiw	r26, 0x12	; 18
    3892:	ed 91       	ld	r30, X+
    3894:	fc 91       	ld	r31, X
    3896:	53 97       	sbiw	r26, 0x13	; 19
    3898:	80 83       	st	Z, r24

  sbi(*_ucsrb, _rxen);
    389a:	56 96       	adiw	r26, 0x16	; 22
    389c:	ed 91       	ld	r30, X+
    389e:	fc 91       	ld	r31, X
    38a0:	57 97       	sbiw	r26, 0x17	; 23
    38a2:	40 81       	ld	r20, Z
    38a4:	21 e0       	ldi	r18, 0x01	; 1
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	c9 01       	movw	r24, r18
    38aa:	5a 96       	adiw	r26, 0x1a	; 26
    38ac:	0c 90       	ld	r0, X
    38ae:	5a 97       	sbiw	r26, 0x1a	; 26
    38b0:	02 c0       	rjmp	.+4      	; 0x38b6 <_ZN14HardwareSerial5beginEm+0x11e>
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	0a 94       	dec	r0
    38b8:	e2 f7       	brpl	.-8      	; 0x38b2 <_ZN14HardwareSerial5beginEm+0x11a>
    38ba:	84 2b       	or	r24, r20
    38bc:	80 83       	st	Z, r24
  sbi(*_ucsrb, _txen);
    38be:	56 96       	adiw	r26, 0x16	; 22
    38c0:	ed 91       	ld	r30, X+
    38c2:	fc 91       	ld	r31, X
    38c4:	57 97       	sbiw	r26, 0x17	; 23
    38c6:	40 81       	ld	r20, Z
    38c8:	c9 01       	movw	r24, r18
    38ca:	5b 96       	adiw	r26, 0x1b	; 27
    38cc:	0c 90       	ld	r0, X
    38ce:	5b 97       	sbiw	r26, 0x1b	; 27
    38d0:	02 c0       	rjmp	.+4      	; 0x38d6 <_ZN14HardwareSerial5beginEm+0x13e>
    38d2:	88 0f       	add	r24, r24
    38d4:	99 1f       	adc	r25, r25
    38d6:	0a 94       	dec	r0
    38d8:	e2 f7       	brpl	.-8      	; 0x38d2 <_ZN14HardwareSerial5beginEm+0x13a>
    38da:	84 2b       	or	r24, r20
    38dc:	80 83       	st	Z, r24
  sbi(*_ucsrb, _rxcie);
    38de:	56 96       	adiw	r26, 0x16	; 22
    38e0:	ed 91       	ld	r30, X+
    38e2:	fc 91       	ld	r31, X
    38e4:	57 97       	sbiw	r26, 0x17	; 23
    38e6:	40 81       	ld	r20, Z
    38e8:	c9 01       	movw	r24, r18
    38ea:	5c 96       	adiw	r26, 0x1c	; 28
    38ec:	0c 90       	ld	r0, X
    38ee:	5c 97       	sbiw	r26, 0x1c	; 28
    38f0:	02 c0       	rjmp	.+4      	; 0x38f6 <_ZN14HardwareSerial5beginEm+0x15e>
    38f2:	88 0f       	add	r24, r24
    38f4:	99 1f       	adc	r25, r25
    38f6:	0a 94       	dec	r0
    38f8:	e2 f7       	brpl	.-8      	; 0x38f2 <_ZN14HardwareSerial5beginEm+0x15a>
    38fa:	84 2b       	or	r24, r20
    38fc:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    38fe:	56 96       	adiw	r26, 0x16	; 22
    3900:	ed 91       	ld	r30, X+
    3902:	fc 91       	ld	r31, X
    3904:	57 97       	sbiw	r26, 0x17	; 23
    3906:	80 81       	ld	r24, Z
    3908:	5d 96       	adiw	r26, 0x1d	; 29
    390a:	0c 90       	ld	r0, X
    390c:	5d 97       	sbiw	r26, 0x1d	; 29
    390e:	02 c0       	rjmp	.+4      	; 0x3914 <_ZN14HardwareSerial5beginEm+0x17c>
    3910:	22 0f       	add	r18, r18
    3912:	33 1f       	adc	r19, r19
    3914:	0a 94       	dec	r0
    3916:	e2 f7       	brpl	.-8      	; 0x3910 <_ZN14HardwareSerial5beginEm+0x178>
    3918:	20 95       	com	r18
    391a:	28 23       	and	r18, r24
    391c:	20 83       	st	Z, r18
}
    391e:	df 91       	pop	r29
    3920:	cf 91       	pop	r28
    3922:	1f 91       	pop	r17
    3924:	0f 91       	pop	r16
    3926:	ff 90       	pop	r15
    3928:	ef 90       	pop	r14
    392a:	df 90       	pop	r13
    392c:	cf 90       	pop	r12
    392e:	bf 90       	pop	r11
    3930:	af 90       	pop	r10
    3932:	9f 90       	pop	r9
    3934:	8f 90       	pop	r8
    3936:	7f 90       	pop	r7
    3938:	6f 90       	pop	r6
    393a:	5f 90       	pop	r5
    393c:	4f 90       	pop	r4
    393e:	3f 90       	pop	r3
    3940:	2f 90       	pop	r2
    3942:	08 95       	ret

00003944 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    3944:	cf 93       	push	r28
    3946:	df 93       	push	r29
    3948:	ec 01       	movw	r28, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    394a:	ee 85       	ldd	r30, Y+14	; 0x0e
    394c:	ff 85       	ldd	r31, Y+15	; 0x0f
    394e:	df 01       	movw	r26, r30
    3950:	a0 5c       	subi	r26, 0xC0	; 192
    3952:	bf 4f       	sbci	r27, 0xFF	; 255
    3954:	ee 5b       	subi	r30, 0xBE	; 190
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	8d 91       	ld	r24, X+
    395a:	9c 91       	ld	r25, X
    395c:	11 97       	sbiw	r26, 0x01	; 1
    395e:	20 81       	ld	r18, Z
    3960:	31 81       	ldd	r19, Z+1	; 0x01
    3962:	82 17       	cp	r24, r18
    3964:	93 07       	cpc	r25, r19
    3966:	c1 f7       	brne	.-16     	; 0x3958 <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
    3968:	ee 89       	ldd	r30, Y+22	; 0x16
    396a:	ff 89       	ldd	r31, Y+23	; 0x17
    396c:	40 81       	ld	r20, Z
    396e:	21 e0       	ldi	r18, 0x01	; 1
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	c9 01       	movw	r24, r18
    3974:	0a 8c       	ldd	r0, Y+26	; 0x1a
    3976:	02 c0       	rjmp	.+4      	; 0x397c <_ZN14HardwareSerial3endEv+0x38>
    3978:	88 0f       	add	r24, r24
    397a:	99 1f       	adc	r25, r25
    397c:	0a 94       	dec	r0
    397e:	e2 f7       	brpl	.-8      	; 0x3978 <_ZN14HardwareSerial3endEv+0x34>
    3980:	80 95       	com	r24
    3982:	84 23       	and	r24, r20
    3984:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    3986:	ee 89       	ldd	r30, Y+22	; 0x16
    3988:	ff 89       	ldd	r31, Y+23	; 0x17
    398a:	40 81       	ld	r20, Z
    398c:	c9 01       	movw	r24, r18
    398e:	0b 8c       	ldd	r0, Y+27	; 0x1b
    3990:	02 c0       	rjmp	.+4      	; 0x3996 <_ZN14HardwareSerial3endEv+0x52>
    3992:	88 0f       	add	r24, r24
    3994:	99 1f       	adc	r25, r25
    3996:	0a 94       	dec	r0
    3998:	e2 f7       	brpl	.-8      	; 0x3992 <_ZN14HardwareSerial3endEv+0x4e>
    399a:	80 95       	com	r24
    399c:	84 23       	and	r24, r20
    399e:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    39a0:	ee 89       	ldd	r30, Y+22	; 0x16
    39a2:	ff 89       	ldd	r31, Y+23	; 0x17
    39a4:	40 81       	ld	r20, Z
    39a6:	c9 01       	movw	r24, r18
    39a8:	0c 8c       	ldd	r0, Y+28	; 0x1c
    39aa:	02 c0       	rjmp	.+4      	; 0x39b0 <_ZN14HardwareSerial3endEv+0x6c>
    39ac:	88 0f       	add	r24, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	0a 94       	dec	r0
    39b2:	e2 f7       	brpl	.-8      	; 0x39ac <_ZN14HardwareSerial3endEv+0x68>
    39b4:	80 95       	com	r24
    39b6:	84 23       	and	r24, r20
    39b8:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    39ba:	ee 89       	ldd	r30, Y+22	; 0x16
    39bc:	ff 89       	ldd	r31, Y+23	; 0x17
    39be:	80 81       	ld	r24, Z
    39c0:	0d 8c       	ldd	r0, Y+29	; 0x1d
    39c2:	02 c0       	rjmp	.+4      	; 0x39c8 <_ZN14HardwareSerial3endEv+0x84>
    39c4:	22 0f       	add	r18, r18
    39c6:	33 1f       	adc	r19, r19
    39c8:	0a 94       	dec	r0
    39ca:	e2 f7       	brpl	.-8      	; 0x39c4 <_ZN14HardwareSerial3endEv+0x80>
    39cc:	20 95       	com	r18
    39ce:	28 23       	and	r18, r24
    39d0:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    39d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    39d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    39d6:	fc 01       	movw	r30, r24
    39d8:	ee 5b       	subi	r30, 0xBE	; 190
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	20 81       	ld	r18, Z
    39de:	31 81       	ldd	r19, Z+1	; 0x01
    39e0:	80 5c       	subi	r24, 0xC0	; 192
    39e2:	9f 4f       	sbci	r25, 0xFF	; 255
    39e4:	fc 01       	movw	r30, r24
    39e6:	31 83       	std	Z+1, r19	; 0x01
    39e8:	20 83       	st	Z, r18
}
    39ea:	df 91       	pop	r29
    39ec:	cf 91       	pop	r28
    39ee:	08 95       	ret

000039f0 <_ZN14HardwareSerialcvbEv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	08 95       	ret

000039f4 <_GLOBAL__sub_I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    39f4:	7f 92       	push	r7
    39f6:	8f 92       	push	r8
    39f8:	9f 92       	push	r9
    39fa:	af 92       	push	r10
    39fc:	bf 92       	push	r11
    39fe:	cf 92       	push	r12
    3a00:	df 92       	push	r13
    3a02:	ef 92       	push	r14
    3a04:	ff 92       	push	r15
    3a06:	0f 93       	push	r16
    3a08:	1f 93       	push	r17
    3a0a:	cf 93       	push	r28
    3a0c:	df 93       	push	r29
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    3a0e:	00 d0       	rcall	.+0      	; 0x3a10 <_GLOBAL__sub_I_rx_buffer+0x1c>
    3a10:	0f 92       	push	r0
    3a12:	ed b7       	in	r30, 0x3d	; 61
    3a14:	fe b7       	in	r31, 0x3e	; 62
    3a16:	31 96       	adiw	r30, 0x01	; 1
    3a18:	c3 e0       	ldi	r28, 0x03	; 3
    3a1a:	ad b7       	in	r26, 0x3d	; 61
    3a1c:	be b7       	in	r27, 0x3e	; 62
    3a1e:	11 96       	adiw	r26, 0x01	; 1
    3a20:	cc 93       	st	X, r28
    3a22:	d7 e0       	ldi	r29, 0x07	; 7
    3a24:	d1 83       	std	Z+1, r29	; 0x01
    3a26:	0f 2e       	mov	r0, r31
    3a28:	f5 e0       	ldi	r31, 0x05	; 5
    3a2a:	9f 2e       	mov	r9, r31
    3a2c:	f0 2d       	mov	r31, r0
    3a2e:	92 82       	std	Z+2, r9	; 0x02
    3a30:	77 24       	eor	r7, r7
    3a32:	73 94       	inc	r7
    3a34:	73 82       	std	Z+3, r7	; 0x03
    3a36:	8e ee       	ldi	r24, 0xEE	; 238
    3a38:	96 e0       	ldi	r25, 0x06	; 6
    3a3a:	69 ee       	ldi	r22, 0xE9	; 233
    3a3c:	78 e0       	ldi	r23, 0x08	; 8
    3a3e:	45 ea       	ldi	r20, 0xA5	; 165
    3a40:	58 e0       	ldi	r21, 0x08	; 8
    3a42:	25 ec       	ldi	r18, 0xC5	; 197
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	04 ec       	ldi	r16, 0xC4	; 196
    3a48:	10 e0       	ldi	r17, 0x00	; 0
    3a4a:	0f 2e       	mov	r0, r31
    3a4c:	f0 ec       	ldi	r31, 0xC0	; 192
    3a4e:	ef 2e       	mov	r14, r31
    3a50:	ff 24       	eor	r15, r15
    3a52:	f0 2d       	mov	r31, r0
    3a54:	0f 2e       	mov	r0, r31
    3a56:	f1 ec       	ldi	r31, 0xC1	; 193
    3a58:	cf 2e       	mov	r12, r31
    3a5a:	dd 24       	eor	r13, r13
    3a5c:	f0 2d       	mov	r31, r0
    3a5e:	0f 2e       	mov	r0, r31
    3a60:	f6 ec       	ldi	r31, 0xC6	; 198
    3a62:	af 2e       	mov	r10, r31
    3a64:	bb 24       	eor	r11, r11
    3a66:	f0 2d       	mov	r31, r0
    3a68:	88 24       	eor	r8, r8
    3a6a:	68 94       	set
    3a6c:	82 f8       	bld	r8, 2
    3a6e:	0e 94 8d 1b 	call	0x371a	; 0x371a <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>
#else
  #error no serial port defined  (port 0)
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &tx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UDR1, RXEN1, TXEN1, RXCIE1, UDRIE1, U2X1);
    3a72:	ed b7       	in	r30, 0x3d	; 61
    3a74:	fe b7       	in	r31, 0x3e	; 62
    3a76:	31 96       	adiw	r30, 0x01	; 1
    3a78:	ad b7       	in	r26, 0x3d	; 61
    3a7a:	be b7       	in	r27, 0x3e	; 62
    3a7c:	11 96       	adiw	r26, 0x01	; 1
    3a7e:	cc 93       	st	X, r28
    3a80:	d1 83       	std	Z+1, r29	; 0x01
    3a82:	92 82       	std	Z+2, r9	; 0x02
    3a84:	73 82       	std	Z+3, r7	; 0x03
    3a86:	8f ec       	ldi	r24, 0xCF	; 207
    3a88:	96 e0       	ldi	r25, 0x06	; 6
    3a8a:	61 e6       	ldi	r22, 0x61	; 97
    3a8c:	78 e0       	ldi	r23, 0x08	; 8
    3a8e:	4d e1       	ldi	r20, 0x1D	; 29
    3a90:	58 e0       	ldi	r21, 0x08	; 8
    3a92:	2d ec       	ldi	r18, 0xCD	; 205
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	0c ec       	ldi	r16, 0xCC	; 204
    3a98:	10 e0       	ldi	r17, 0x00	; 0
    3a9a:	0f 2e       	mov	r0, r31
    3a9c:	f8 ec       	ldi	r31, 0xC8	; 200
    3a9e:	ef 2e       	mov	r14, r31
    3aa0:	ff 24       	eor	r15, r15
    3aa2:	f0 2d       	mov	r31, r0
    3aa4:	0f 2e       	mov	r0, r31
    3aa6:	f9 ec       	ldi	r31, 0xC9	; 201
    3aa8:	cf 2e       	mov	r12, r31
    3aaa:	dd 24       	eor	r13, r13
    3aac:	f0 2d       	mov	r31, r0
    3aae:	0f 2e       	mov	r0, r31
    3ab0:	fe ec       	ldi	r31, 0xCE	; 206
    3ab2:	af 2e       	mov	r10, r31
    3ab4:	bb 24       	eor	r11, r11
    3ab6:	f0 2d       	mov	r31, r0
    3ab8:	0e 94 8d 1b 	call	0x371a	; 0x371a <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
    3abc:	ed b7       	in	r30, 0x3d	; 61
    3abe:	fe b7       	in	r31, 0x3e	; 62
    3ac0:	31 96       	adiw	r30, 0x01	; 1
    3ac2:	ad b7       	in	r26, 0x3d	; 61
    3ac4:	be b7       	in	r27, 0x3e	; 62
    3ac6:	11 96       	adiw	r26, 0x01	; 1
    3ac8:	cc 93       	st	X, r28
    3aca:	d1 83       	std	Z+1, r29	; 0x01
    3acc:	92 82       	std	Z+2, r9	; 0x02
    3ace:	73 82       	std	Z+3, r7	; 0x03
    3ad0:	80 eb       	ldi	r24, 0xB0	; 176
    3ad2:	96 e0       	ldi	r25, 0x06	; 6
    3ad4:	69 ed       	ldi	r22, 0xD9	; 217
    3ad6:	77 e0       	ldi	r23, 0x07	; 7
    3ad8:	45 e9       	ldi	r20, 0x95	; 149
    3ada:	57 e0       	ldi	r21, 0x07	; 7
    3adc:	25 ed       	ldi	r18, 0xD5	; 213
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	04 ed       	ldi	r16, 0xD4	; 212
    3ae2:	10 e0       	ldi	r17, 0x00	; 0
    3ae4:	0f 2e       	mov	r0, r31
    3ae6:	f0 ed       	ldi	r31, 0xD0	; 208
    3ae8:	ef 2e       	mov	r14, r31
    3aea:	ff 24       	eor	r15, r15
    3aec:	f0 2d       	mov	r31, r0
    3aee:	0f 2e       	mov	r0, r31
    3af0:	f1 ed       	ldi	r31, 0xD1	; 209
    3af2:	cf 2e       	mov	r12, r31
    3af4:	dd 24       	eor	r13, r13
    3af6:	f0 2d       	mov	r31, r0
    3af8:	0f 2e       	mov	r0, r31
    3afa:	f6 ed       	ldi	r31, 0xD6	; 214
    3afc:	af 2e       	mov	r10, r31
    3afe:	bb 24       	eor	r11, r11
    3b00:	f0 2d       	mov	r31, r0
    3b02:	0e 94 8d 1b 	call	0x371a	; 0x371a <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    3b06:	ed b7       	in	r30, 0x3d	; 61
    3b08:	fe b7       	in	r31, 0x3e	; 62
    3b0a:	31 96       	adiw	r30, 0x01	; 1
    3b0c:	ad b7       	in	r26, 0x3d	; 61
    3b0e:	be b7       	in	r27, 0x3e	; 62
    3b10:	11 96       	adiw	r26, 0x01	; 1
    3b12:	cc 93       	st	X, r28
    3b14:	d1 83       	std	Z+1, r29	; 0x01
    3b16:	92 82       	std	Z+2, r9	; 0x02
    3b18:	73 82       	std	Z+3, r7	; 0x03
    3b1a:	81 e9       	ldi	r24, 0x91	; 145
    3b1c:	96 e0       	ldi	r25, 0x06	; 6
    3b1e:	61 e5       	ldi	r22, 0x51	; 81
    3b20:	77 e0       	ldi	r23, 0x07	; 7
    3b22:	4d e0       	ldi	r20, 0x0D	; 13
    3b24:	57 e0       	ldi	r21, 0x07	; 7
    3b26:	25 e3       	ldi	r18, 0x35	; 53
    3b28:	31 e0       	ldi	r19, 0x01	; 1
    3b2a:	04 e3       	ldi	r16, 0x34	; 52
    3b2c:	11 e0       	ldi	r17, 0x01	; 1
    3b2e:	0f 2e       	mov	r0, r31
    3b30:	f0 e3       	ldi	r31, 0x30	; 48
    3b32:	ef 2e       	mov	r14, r31
    3b34:	f1 e0       	ldi	r31, 0x01	; 1
    3b36:	ff 2e       	mov	r15, r31
    3b38:	f0 2d       	mov	r31, r0
    3b3a:	0f 2e       	mov	r0, r31
    3b3c:	f1 e3       	ldi	r31, 0x31	; 49
    3b3e:	cf 2e       	mov	r12, r31
    3b40:	f1 e0       	ldi	r31, 0x01	; 1
    3b42:	df 2e       	mov	r13, r31
    3b44:	f0 2d       	mov	r31, r0
    3b46:	0f 2e       	mov	r0, r31
    3b48:	f6 e3       	ldi	r31, 0x36	; 54
    3b4a:	af 2e       	mov	r10, r31
    3b4c:	f1 e0       	ldi	r31, 0x01	; 1
    3b4e:	bf 2e       	mov	r11, r31
    3b50:	f0 2d       	mov	r31, r0
    3b52:	0e 94 8d 1b 	call	0x371a	; 0x371a <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>
    3b56:	0f 90       	pop	r0
    3b58:	0f 90       	pop	r0
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	ff 90       	pop	r15
    3b68:	ef 90       	pop	r14
    3b6a:	df 90       	pop	r13
    3b6c:	cf 90       	pop	r12
    3b6e:	bf 90       	pop	r11
    3b70:	af 90       	pop	r10
    3b72:	9f 90       	pop	r9
    3b74:	8f 90       	pop	r8
    3b76:	7f 90       	pop	r7
    3b78:	08 95       	ret

00003b7a <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    3b7a:	8f 92       	push	r8
    3b7c:	9f 92       	push	r9
    3b7e:	af 92       	push	r10
    3b80:	bf 92       	push	r11
    3b82:	cf 92       	push	r12
    3b84:	df 92       	push	r13
    3b86:	ef 92       	push	r14
    3b88:	ff 92       	push	r15
    3b8a:	0f 93       	push	r16
    3b8c:	1f 93       	push	r17
    3b8e:	cf 93       	push	r28
    3b90:	df 93       	push	r29
    3b92:	4c 01       	movw	r8, r24
    3b94:	7b 01       	movw	r14, r22
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    3b96:	aa 24       	eor	r10, r10
    3b98:	bb 24       	eor	r11, r11
    3b9a:	68 94       	set
    3b9c:	a1 f8       	bld	r10, 1
    3b9e:	a8 0e       	add	r10, r24
    3ba0:	b9 1e       	adc	r11, r25
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    3ba2:	00 e0       	ldi	r16, 0x00	; 0
    3ba4:	10 e0       	ldi	r17, 0x00	; 0
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    3ba6:	cc 24       	eor	r12, r12
    3ba8:	dd 24       	eor	r13, r13
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    3baa:	f5 01       	movw	r30, r10
    3bac:	61 91       	ld	r22, Z+
    3bae:	5f 01       	movw	r10, r30
    3bb0:	c7 01       	movw	r24, r14
    3bb2:	4a e0       	ldi	r20, 0x0A	; 10
    3bb4:	50 e0       	ldi	r21, 0x00	; 0
    3bb6:	0e 94 51 20 	call	0x40a2	; 0x40a2 <_ZN5Print5printEhi>
    3bba:	ec 01       	movw	r28, r24
        n += p.print('.');
    3bbc:	c7 01       	movw	r24, r14
    3bbe:	6e e2       	ldi	r22, 0x2E	; 46
    3bc0:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    3bc4:	8c 0f       	add	r24, r28
    3bc6:	9d 1f       	adc	r25, r29
        n += p.print('.');
    3bc8:	c8 0e       	add	r12, r24
    3bca:	d9 1e       	adc	r13, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    3bcc:	0f 5f       	subi	r16, 0xFF	; 255
    3bce:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd0:	03 30       	cpi	r16, 0x03	; 3
    3bd2:	11 05       	cpc	r17, r1
    3bd4:	51 f7       	brne	.-44     	; 0x3baa <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    3bd6:	c7 01       	movw	r24, r14
    3bd8:	f4 01       	movw	r30, r8
    3bda:	65 81       	ldd	r22, Z+5	; 0x05
    3bdc:	4a e0       	ldi	r20, 0x0A	; 10
    3bde:	50 e0       	ldi	r21, 0x00	; 0
    3be0:	0e 94 51 20 	call	0x40a2	; 0x40a2 <_ZN5Print5printEhi>
    3be4:	8c 0d       	add	r24, r12
    3be6:	9d 1d       	adc	r25, r13
    return n;
}
    3be8:	df 91       	pop	r29
    3bea:	cf 91       	pop	r28
    3bec:	1f 91       	pop	r17
    3bee:	0f 91       	pop	r16
    3bf0:	ff 90       	pop	r15
    3bf2:	ef 90       	pop	r14
    3bf4:	df 90       	pop	r13
    3bf6:	cf 90       	pop	r12
    3bf8:	bf 90       	pop	r11
    3bfa:	af 90       	pop	r10
    3bfc:	9f 90       	pop	r9
    3bfe:	8f 90       	pop	r8
    3c00:	08 95       	ret

00003c02 <_ZN9IPAddressC1Ev>:

#include "Arduino.h"
#include "IPAddress.h"

IPAddress::IPAddress()
    3c02:	fc 01       	movw	r30, r24
    3c04:	8b e4       	ldi	r24, 0x4B	; 75
    3c06:	93 e0       	ldi	r25, 0x03	; 3
    3c08:	91 83       	std	Z+1, r25	; 0x01
    3c0a:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
    3c0c:	12 82       	std	Z+2, r1	; 0x02
    3c0e:	13 82       	std	Z+3, r1	; 0x03
    3c10:	14 82       	std	Z+4, r1	; 0x04
    3c12:	15 82       	std	Z+5, r1	; 0x05
}
    3c14:	08 95       	ret

00003c16 <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    3c16:	0f 93       	push	r16
    3c18:	fc 01       	movw	r30, r24
    3c1a:	8b e4       	ldi	r24, 0x4B	; 75
    3c1c:	93 e0       	ldi	r25, 0x03	; 3
    3c1e:	91 83       	std	Z+1, r25	; 0x01
    3c20:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    3c22:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
    3c24:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
    3c26:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
    3c28:	05 83       	std	Z+5, r16	; 0x05
}
    3c2a:	0f 91       	pop	r16
    3c2c:	08 95       	ret

00003c2e <_ZN9IPAddressC1Em>:

IPAddress::IPAddress(uint32_t address)
    3c2e:	fc 01       	movw	r30, r24
    3c30:	8b e4       	ldi	r24, 0x4B	; 75
    3c32:	93 e0       	ldi	r25, 0x03	; 3
    3c34:	91 83       	std	Z+1, r25	; 0x01
    3c36:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    3c38:	42 83       	std	Z+2, r20	; 0x02
    3c3a:	53 83       	std	Z+3, r21	; 0x03
    3c3c:	64 83       	std	Z+4, r22	; 0x04
    3c3e:	75 83       	std	Z+5, r23	; 0x05
}
    3c40:	08 95       	ret

00003c42 <_ZN9IPAddressC1EPKh>:

IPAddress::IPAddress(const uint8_t *address)
    3c42:	cf 93       	push	r28
    3c44:	df 93       	push	r29
    3c46:	fc 01       	movw	r30, r24
    3c48:	8b e4       	ldi	r24, 0x4B	; 75
    3c4a:	93 e0       	ldi	r25, 0x03	; 3
    3c4c:	91 83       	std	Z+1, r25	; 0x01
    3c4e:	80 83       	st	Z, r24
{
    memcpy(_address, address, sizeof(_address));
    3c50:	eb 01       	movw	r28, r22
    3c52:	88 81       	ld	r24, Y
    3c54:	99 81       	ldd	r25, Y+1	; 0x01
    3c56:	aa 81       	ldd	r26, Y+2	; 0x02
    3c58:	bb 81       	ldd	r27, Y+3	; 0x03
    3c5a:	82 83       	std	Z+2, r24	; 0x02
    3c5c:	93 83       	std	Z+3, r25	; 0x03
    3c5e:	a4 83       	std	Z+4, r26	; 0x04
    3c60:	b5 83       	std	Z+5, r27	; 0x05
}
    3c62:	df 91       	pop	r29
    3c64:	cf 91       	pop	r28
    3c66:	08 95       	ret

00003c68 <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address, address, sizeof(_address));
    3c68:	fb 01       	movw	r30, r22
    3c6a:	40 81       	ld	r20, Z
    3c6c:	51 81       	ldd	r21, Z+1	; 0x01
    3c6e:	62 81       	ldd	r22, Z+2	; 0x02
    3c70:	73 81       	ldd	r23, Z+3	; 0x03
    3c72:	fc 01       	movw	r30, r24
    3c74:	42 83       	std	Z+2, r20	; 0x02
    3c76:	53 83       	std	Z+3, r21	; 0x03
    3c78:	64 83       	std	Z+4, r22	; 0x04
    3c7a:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
    3c7c:	08 95       	ret

00003c7e <_ZN9IPAddressaSEm>:

IPAddress& IPAddress::operator=(uint32_t address)
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
    3c7e:	fc 01       	movw	r30, r24
    3c80:	42 83       	std	Z+2, r20	; 0x02
    3c82:	53 83       	std	Z+3, r21	; 0x03
    3c84:	64 83       	std	Z+4, r22	; 0x04
    3c86:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
    3c88:	08 95       	ret

00003c8a <_ZN9IPAddresseqEPKh>:

bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
    3c8a:	9c 01       	movw	r18, r24
    3c8c:	2e 5f       	subi	r18, 0xFE	; 254
    3c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c90:	cb 01       	movw	r24, r22
    3c92:	b9 01       	movw	r22, r18
    3c94:	44 e0       	ldi	r20, 0x04	; 4
    3c96:	50 e0       	ldi	r21, 0x00	; 0
    3c98:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <memcmp>
    3c9c:	28 2f       	mov	r18, r24
    3c9e:	39 2f       	mov	r19, r25
    3ca0:	81 e0       	ldi	r24, 0x01	; 1
    3ca2:	21 15       	cp	r18, r1
    3ca4:	31 05       	cpc	r19, r1
    3ca6:	09 f0       	breq	.+2      	; 0x3caa <_ZN9IPAddresseqEPKh+0x20>
    3ca8:	80 e0       	ldi	r24, 0x00	; 0
}
    3caa:	08 95       	ret

00003cac <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    3cac:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3cae:	8d e2       	ldi	r24, 0x2D	; 45
    3cb0:	99 e0       	ldi	r25, 0x09	; 9
    3cb2:	60 e0       	ldi	r22, 0x00	; 0
    3cb4:	40 e0       	ldi	r20, 0x00	; 0
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	00 e0       	ldi	r16, 0x00	; 0
    3cba:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <_ZN9IPAddressC1Ehhhh>
    3cbe:	0f 91       	pop	r16
    3cc0:	08 95       	ret

00003cc2 <_Znwj>:
#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    3cc2:	0e 94 86 4b 	call	0x970c	; 0x970c <malloc>
}
    3cc6:	08 95       	ret

00003cc8 <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    3cc8:	0e 94 1c 4c 	call	0x9838	; 0x9838 <free>
} 
    3ccc:	08 95       	ret

00003cce <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    3cce:	21 e0       	ldi	r18, 0x01	; 1
    3cd0:	30 e0       	ldi	r19, 0x00	; 0
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	80 81       	ld	r24, Z
    3cd6:	88 23       	and	r24, r24
    3cd8:	11 f0       	breq	.+4      	; 0x3cde <__cxa_guard_acquire+0x10>
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	82 2f       	mov	r24, r18
    3ce0:	93 2f       	mov	r25, r19
    3ce2:	08 95       	ret

00003ce4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    3ce4:	21 e0       	ldi	r18, 0x01	; 1
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	20 83       	st	Z, r18
    3cea:	08 95       	ret

00003cec <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    3cec:	08 95       	ret

00003cee <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    3cee:	08 95       	ret

00003cf0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    3cf0:	cf 92       	push	r12
    3cf2:	df 92       	push	r13
    3cf4:	ef 92       	push	r14
    3cf6:	ff 92       	push	r15
    3cf8:	0f 93       	push	r16
    3cfa:	1f 93       	push	r17
    3cfc:	cf 93       	push	r28
    3cfe:	df 93       	push	r29
    3d00:	6c 01       	movw	r12, r24
    3d02:	7b 01       	movw	r14, r22
    3d04:	ea 01       	movw	r28, r20
  size_t n = 0;
  while (size--) {
    3d06:	20 97       	sbiw	r28, 0x00	; 0
    3d08:	91 f0       	breq	.+36     	; 0x3d2e <_ZN5Print5writeEPKhj+0x3e>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    3d0a:	00 e0       	ldi	r16, 0x00	; 0
    3d0c:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    n += write(*buffer++);
    3d0e:	d7 01       	movw	r26, r14
    3d10:	6d 91       	ld	r22, X+
    3d12:	7d 01       	movw	r14, r26
    3d14:	d6 01       	movw	r26, r12
    3d16:	ed 91       	ld	r30, X+
    3d18:	fc 91       	ld	r31, X
    3d1a:	01 90       	ld	r0, Z+
    3d1c:	f0 81       	ld	r31, Z
    3d1e:	e0 2d       	mov	r30, r0
    3d20:	c6 01       	movw	r24, r12
    3d22:	19 95       	eicall
    3d24:	08 0f       	add	r16, r24
    3d26:	19 1f       	adc	r17, r25
    3d28:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    3d2a:	89 f7       	brne	.-30     	; 0x3d0e <_ZN5Print5writeEPKhj+0x1e>
    3d2c:	02 c0       	rjmp	.+4      	; 0x3d32 <_ZN5Print5writeEPKhj+0x42>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    3d2e:	00 e0       	ldi	r16, 0x00	; 0
    3d30:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    3d32:	80 2f       	mov	r24, r16
    3d34:	91 2f       	mov	r25, r17
    3d36:	df 91       	pop	r29
    3d38:	cf 91       	pop	r28
    3d3a:	1f 91       	pop	r17
    3d3c:	0f 91       	pop	r16
    3d3e:	ff 90       	pop	r15
    3d40:	ef 90       	pop	r14
    3d42:	df 90       	pop	r13
    3d44:	cf 90       	pop	r12
    3d46:	08 95       	ret

00003d48 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    3d48:	ef 92       	push	r14
    3d4a:	ff 92       	push	r15
    3d4c:	0f 93       	push	r16
    3d4e:	1f 93       	push	r17
    3d50:	cf 93       	push	r28
    3d52:	df 93       	push	r29
    3d54:	7c 01       	movw	r14, r24
    3d56:	eb 01       	movw	r28, r22
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    3d58:	fb 01       	movw	r30, r22
    3d5a:	64 91       	lpm	r22, Z
    if (c == 0) break;
    3d5c:	66 23       	and	r22, r22
    3d5e:	91 f0       	breq	.+36     	; 0x3d84 <_ZN5Print5printEPK19__FlashStringHelper+0x3c>
size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    3d60:	21 96       	adiw	r28, 0x01	; 1
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
    3d62:	00 e0       	ldi	r16, 0x00	; 0
    3d64:	10 e0       	ldi	r17, 0x00	; 0
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
    3d66:	f7 01       	movw	r30, r14
    3d68:	a0 81       	ld	r26, Z
    3d6a:	b1 81       	ldd	r27, Z+1	; 0x01
    3d6c:	ed 91       	ld	r30, X+
    3d6e:	fc 91       	ld	r31, X
    3d70:	c7 01       	movw	r24, r14
    3d72:	19 95       	eicall
    3d74:	08 0f       	add	r16, r24
    3d76:	19 1f       	adc	r17, r25
size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    3d78:	fe 01       	movw	r30, r28
    3d7a:	21 96       	adiw	r28, 0x01	; 1
    3d7c:	64 91       	lpm	r22, Z
    if (c == 0) break;
    3d7e:	66 23       	and	r22, r22
    3d80:	91 f7       	brne	.-28     	; 0x3d66 <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
    3d82:	02 c0       	rjmp	.+4      	; 0x3d88 <_ZN5Print5printEPK19__FlashStringHelper+0x40>
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
    3d84:	00 e0       	ldi	r16, 0x00	; 0
    3d86:	10 e0       	ldi	r17, 0x00	; 0
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    3d88:	80 2f       	mov	r24, r16
    3d8a:	91 2f       	mov	r25, r17
    3d8c:	df 91       	pop	r29
    3d8e:	cf 91       	pop	r28
    3d90:	1f 91       	pop	r17
    3d92:	0f 91       	pop	r16
    3d94:	ff 90       	pop	r15
    3d96:	ef 90       	pop	r14
    3d98:	08 95       	ret

00003d9a <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    3d9a:	af 92       	push	r10
    3d9c:	bf 92       	push	r11
    3d9e:	cf 92       	push	r12
    3da0:	df 92       	push	r13
    3da2:	ef 92       	push	r14
    3da4:	ff 92       	push	r15
    3da6:	0f 93       	push	r16
    3da8:	1f 93       	push	r17
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	5c 01       	movw	r10, r24
    3db0:	6b 01       	movw	r12, r22
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    3db2:	db 01       	movw	r26, r22
    3db4:	14 96       	adiw	r26, 0x04	; 4
    3db6:	8d 91       	ld	r24, X+
    3db8:	9c 91       	ld	r25, X
    3dba:	15 97       	sbiw	r26, 0x05	; 5
    3dbc:	00 97       	sbiw	r24, 0x00	; 0
    3dbe:	e1 f0       	breq	.+56     	; 0x3df8 <_ZN5Print5printERK6String+0x5e>
    3dc0:	00 e0       	ldi	r16, 0x00	; 0
    3dc2:	10 e0       	ldi	r17, 0x00	; 0
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    3dc4:	ee 24       	eor	r14, r14
    3dc6:	ff 24       	eor	r15, r15
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    3dc8:	d5 01       	movw	r26, r10
    3dca:	ed 91       	ld	r30, X+
    3dcc:	fc 91       	ld	r31, X
    3dce:	c0 81       	ld	r28, Z
    3dd0:	d1 81       	ldd	r29, Z+1	; 0x01
    3dd2:	c6 01       	movw	r24, r12
    3dd4:	b8 01       	movw	r22, r16
    3dd6:	0e 94 d6 32 	call	0x65ac	; 0x65ac <_ZNK6StringixEj>
    3dda:	68 2f       	mov	r22, r24
    3ddc:	c5 01       	movw	r24, r10
    3dde:	fe 01       	movw	r30, r28
    3de0:	19 95       	eicall
    3de2:	e8 0e       	add	r14, r24
    3de4:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    3de6:	0f 5f       	subi	r16, 0xFF	; 255
    3de8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dea:	f6 01       	movw	r30, r12
    3dec:	84 81       	ldd	r24, Z+4	; 0x04
    3dee:	95 81       	ldd	r25, Z+5	; 0x05
    3df0:	08 17       	cp	r16, r24
    3df2:	19 07       	cpc	r17, r25
    3df4:	48 f3       	brcs	.-46     	; 0x3dc8 <_ZN5Print5printERK6String+0x2e>
    3df6:	02 c0       	rjmp	.+4      	; 0x3dfc <_ZN5Print5printERK6String+0x62>
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    3df8:	ee 24       	eor	r14, r14
    3dfa:	ff 24       	eor	r15, r15
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
  }
  return n;
}
    3dfc:	8e 2d       	mov	r24, r14
    3dfe:	9f 2d       	mov	r25, r15
    3e00:	df 91       	pop	r29
    3e02:	cf 91       	pop	r28
    3e04:	1f 91       	pop	r17
    3e06:	0f 91       	pop	r16
    3e08:	ff 90       	pop	r15
    3e0a:	ef 90       	pop	r14
    3e0c:	df 90       	pop	r13
    3e0e:	cf 90       	pop	r12
    3e10:	bf 90       	pop	r11
    3e12:	af 90       	pop	r10
    3e14:	08 95       	ret

00003e16 <_ZN5Print5printEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    3e16:	e6 2f       	mov	r30, r22
    3e18:	f7 2f       	mov	r31, r23
    3e1a:	df 01       	movw	r26, r30
    3e1c:	0d 90       	ld	r0, X+
    3e1e:	00 20       	and	r0, r0
    3e20:	e9 f7       	brne	.-6      	; 0x3e1c <_ZN5Print5printEPKc+0x6>
    3e22:	ad 01       	movw	r20, r26
    3e24:	41 50       	subi	r20, 0x01	; 1
    3e26:	50 40       	sbci	r21, 0x00	; 0
    3e28:	4e 1b       	sub	r20, r30
    3e2a:	5f 0b       	sbc	r21, r31
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	ed 91       	ld	r30, X+
    3e30:	fc 91       	ld	r31, X
    3e32:	02 80       	ldd	r0, Z+2	; 0x02
    3e34:	f3 81       	ldd	r31, Z+3	; 0x03
    3e36:	e0 2d       	mov	r30, r0
    3e38:	19 95       	eicall

size_t Print::print(const char str[])
{
  return write(str);
}
    3e3a:	08 95       	ret

00003e3c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	ed 91       	ld	r30, X+
    3e40:	fc 91       	ld	r31, X
    3e42:	01 90       	ld	r0, Z+
    3e44:	f0 81       	ld	r31, Z
    3e46:	e0 2d       	mov	r30, r0
    3e48:	19 95       	eicall
}
    3e4a:	08 95       	ret

00003e4c <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    3e4c:	9c 01       	movw	r18, r24
    3e4e:	cb 01       	movw	r24, r22
  return x.printTo(*this);
    3e50:	db 01       	movw	r26, r22
    3e52:	ed 91       	ld	r30, X+
    3e54:	fc 91       	ld	r31, X
    3e56:	01 90       	ld	r0, Z+
    3e58:	f0 81       	ld	r31, Z
    3e5a:	e0 2d       	mov	r30, r0
    3e5c:	b9 01       	movw	r22, r18
    3e5e:	19 95       	eicall
}
    3e60:	08 95       	ret

00003e62 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    3e62:	0f 93       	push	r16
    3e64:	1f 93       	push	r17
    3e66:	cf 93       	push	r28
    3e68:	df 93       	push	r29
    3e6a:	8c 01       	movw	r16, r24
  size_t n = print('\r');
    3e6c:	6d e0       	ldi	r22, 0x0D	; 13
    3e6e:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <_ZN5Print5printEc>
    3e72:	ec 01       	movw	r28, r24
  n += print('\n');
    3e74:	c8 01       	movw	r24, r16
    3e76:	6a e0       	ldi	r22, 0x0A	; 10
    3e78:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <_ZN5Print5printEc>
    3e7c:	8c 0f       	add	r24, r28
    3e7e:	9d 1f       	adc	r25, r29
  return n;
}
    3e80:	df 91       	pop	r29
    3e82:	cf 91       	pop	r28
    3e84:	1f 91       	pop	r17
    3e86:	0f 91       	pop	r16
    3e88:	08 95       	ret

00003e8a <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    3e8a:	0f 93       	push	r16
    3e8c:	1f 93       	push	r17
    3e8e:	cf 93       	push	r28
    3e90:	df 93       	push	r29
    3e92:	8c 01       	movw	r16, r24
  size_t n = print(ifsh);
    3e94:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <_ZN5Print5printEPK19__FlashStringHelper>
    3e98:	ec 01       	movw	r28, r24
  n += println();
    3e9a:	c8 01       	movw	r24, r16
    3e9c:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_ZN5Print7printlnEv>
    3ea0:	8c 0f       	add	r24, r28
    3ea2:	9d 1f       	adc	r25, r29
  return n;
}
    3ea4:	df 91       	pop	r29
    3ea6:	cf 91       	pop	r28
    3ea8:	1f 91       	pop	r17
    3eaa:	0f 91       	pop	r16
    3eac:	08 95       	ret

00003eae <_ZN5Print7printlnERK6String>:
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    3eae:	0f 93       	push	r16
    3eb0:	1f 93       	push	r17
    3eb2:	cf 93       	push	r28
    3eb4:	df 93       	push	r29
    3eb6:	8c 01       	movw	r16, r24
  size_t n = print(s);
    3eb8:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <_ZN5Print5printERK6String>
    3ebc:	ec 01       	movw	r28, r24
  n += println();
    3ebe:	c8 01       	movw	r24, r16
    3ec0:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_ZN5Print7printlnEv>
    3ec4:	8c 0f       	add	r24, r28
    3ec6:	9d 1f       	adc	r25, r29
  return n;
}
    3ec8:	df 91       	pop	r29
    3eca:	cf 91       	pop	r28
    3ecc:	1f 91       	pop	r17
    3ece:	0f 91       	pop	r16
    3ed0:	08 95       	ret

00003ed2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    3ed2:	0f 93       	push	r16
    3ed4:	1f 93       	push	r17
    3ed6:	cf 93       	push	r28
    3ed8:	df 93       	push	r29
    3eda:	8c 01       	movw	r16, r24
  size_t n = print(c);
    3edc:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
    3ee0:	ec 01       	movw	r28, r24
  n += println();
    3ee2:	c8 01       	movw	r24, r16
    3ee4:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_ZN5Print7printlnEv>
    3ee8:	8c 0f       	add	r24, r28
    3eea:	9d 1f       	adc	r25, r29
  return n;
}
    3eec:	df 91       	pop	r29
    3eee:	cf 91       	pop	r28
    3ef0:	1f 91       	pop	r17
    3ef2:	0f 91       	pop	r16
    3ef4:	08 95       	ret

00003ef6 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    3ef6:	0f 93       	push	r16
    3ef8:	1f 93       	push	r17
    3efa:	cf 93       	push	r28
    3efc:	df 93       	push	r29
    3efe:	8c 01       	movw	r16, r24
  size_t n = print(c);
    3f00:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <_ZN5Print5printEc>
    3f04:	ec 01       	movw	r28, r24
  n += println();
    3f06:	c8 01       	movw	r24, r16
    3f08:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_ZN5Print7printlnEv>
    3f0c:	8c 0f       	add	r24, r28
    3f0e:	9d 1f       	adc	r25, r29
  return n;
}
    3f10:	df 91       	pop	r29
    3f12:	cf 91       	pop	r28
    3f14:	1f 91       	pop	r17
    3f16:	0f 91       	pop	r16
    3f18:	08 95       	ret

00003f1a <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    3f1a:	0f 93       	push	r16
    3f1c:	1f 93       	push	r17
    3f1e:	cf 93       	push	r28
    3f20:	df 93       	push	r29
    3f22:	8c 01       	movw	r16, r24
  size_t n = print(x);
    3f24:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <_ZN5Print5printERK9Printable>
    3f28:	ec 01       	movw	r28, r24
  n += println();
    3f2a:	c8 01       	movw	r24, r16
    3f2c:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_ZN5Print7printlnEv>
    3f30:	8c 0f       	add	r24, r28
    3f32:	9d 1f       	adc	r25, r29
  return n;
}
    3f34:	df 91       	pop	r29
    3f36:	cf 91       	pop	r28
    3f38:	1f 91       	pop	r17
    3f3a:	0f 91       	pop	r16
    3f3c:	08 95       	ret

00003f3e <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    3f3e:	4f 92       	push	r4
    3f40:	5f 92       	push	r5
    3f42:	6f 92       	push	r6
    3f44:	7f 92       	push	r7
    3f46:	8f 92       	push	r8
    3f48:	9f 92       	push	r9
    3f4a:	af 92       	push	r10
    3f4c:	bf 92       	push	r11
    3f4e:	cf 92       	push	r12
    3f50:	df 92       	push	r13
    3f52:	ef 92       	push	r14
    3f54:	ff 92       	push	r15
    3f56:	0f 93       	push	r16
    3f58:	1f 93       	push	r17
    3f5a:	cf 93       	push	r28
    3f5c:	df 93       	push	r29
    3f5e:	cd b7       	in	r28, 0x3d	; 61
    3f60:	de b7       	in	r29, 0x3e	; 62
    3f62:	a1 97       	sbiw	r28, 0x21	; 33
    3f64:	0f b6       	in	r0, 0x3f	; 63
    3f66:	f8 94       	cli
    3f68:	de bf       	out	0x3e, r29	; 62
    3f6a:	0f be       	out	0x3f, r0	; 63
    3f6c:	cd bf       	out	0x3d, r28	; 61
    3f6e:	4c 01       	movw	r8, r24
    3f70:	14 2f       	mov	r17, r20
    3f72:	35 2f       	mov	r19, r21
    3f74:	86 2f       	mov	r24, r22
    3f76:	97 2f       	mov	r25, r23
    3f78:	02 2f       	mov	r16, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3f7a:	19 a2       	lds	r17, 0x99

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3f7c:	22 30       	cpi	r18, 0x02	; 2
    3f7e:	08 f4       	brcc	.+2      	; 0x3f82 <_ZN5Print11printNumberEmh+0x44>
    3f80:	0a e0       	ldi	r16, 0x0A	; 10
    3f82:	0f 2e       	mov	r0, r31
    3f84:	f1 e2       	ldi	r31, 0x21	; 33
    3f86:	af 2e       	mov	r10, r31
    3f88:	bb 24       	eor	r11, r11
    3f8a:	f0 2d       	mov	r31, r0
    3f8c:	ac 0e       	add	r10, r28
    3f8e:	bd 1e       	adc	r11, r29

  do {
    unsigned long m = n;
    n /= base;
    3f90:	40 2e       	mov	r4, r16
    3f92:	55 24       	eor	r5, r5
    3f94:	66 24       	eor	r6, r6
    3f96:	77 24       	eor	r7, r7
    3f98:	03 c0       	rjmp	.+6      	; 0x3fa0 <_ZN5Print11printNumberEmh+0x62>
    3f9a:	12 2f       	mov	r17, r18
    3f9c:	84 2f       	mov	r24, r20
    3f9e:	95 2f       	mov	r25, r21
    3fa0:	61 2f       	mov	r22, r17
    3fa2:	73 2f       	mov	r23, r19
    3fa4:	a3 01       	movw	r20, r6
    3fa6:	92 01       	movw	r18, r4
    3fa8:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    3fac:	c2 2e       	mov	r12, r18
    3fae:	d3 2e       	mov	r13, r19
    3fb0:	e4 2e       	mov	r14, r20
    3fb2:	f5 2e       	mov	r15, r21
    char c = m - base * n;
    3fb4:	02 9f       	mul	r16, r18
    3fb6:	80 2d       	mov	r24, r0
    3fb8:	11 24       	eor	r1, r1
    3fba:	18 1b       	sub	r17, r24
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3fbc:	08 94       	sec
    3fbe:	a1 08       	sbc	r10, r1
    3fc0:	b1 08       	sbc	r11, r1
    3fc2:	1a 30       	cpi	r17, 0x0A	; 10
    3fc4:	10 f4       	brcc	.+4      	; 0x3fca <_ZN5Print11printNumberEmh+0x8c>
    3fc6:	10 5d       	subi	r17, 0xD0	; 208
    3fc8:	01 c0       	rjmp	.+2      	; 0x3fcc <_ZN5Print11printNumberEmh+0x8e>
    3fca:	19 5c       	subi	r17, 0xC9	; 201
    3fcc:	d5 01       	movw	r26, r10
    3fce:	1c 93       	st	X, r17
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    3fd0:	c1 14       	cp	r12, r1
    3fd2:	d1 04       	cpc	r13, r1
    3fd4:	e1 04       	cpc	r14, r1
    3fd6:	f1 04       	cpc	r15, r1
    3fd8:	01 f7       	brne	.-64     	; 0x3f9a <_ZN5Print11printNumberEmh+0x5c>
    3fda:	ea 2d       	mov	r30, r10
    3fdc:	fb 2d       	mov	r31, r11
    3fde:	df 01       	movw	r26, r30
    3fe0:	0d 90       	ld	r0, X+
    3fe2:	00 20       	and	r0, r0
    3fe4:	e9 f7       	brne	.-6      	; 0x3fe0 <_ZN5Print11printNumberEmh+0xa2>
    3fe6:	11 97       	sbiw	r26, 0x01	; 1
    3fe8:	ad 01       	movw	r20, r26
    3fea:	4e 1b       	sub	r20, r30
    3fec:	5f 0b       	sbc	r21, r31
    3fee:	d4 01       	movw	r26, r8
    3ff0:	ed 91       	ld	r30, X+
    3ff2:	fc 91       	ld	r31, X
    3ff4:	02 80       	ldd	r0, Z+2	; 0x02
    3ff6:	f3 81       	ldd	r31, Z+3	; 0x03
    3ff8:	e0 2d       	mov	r30, r0
    3ffa:	c4 01       	movw	r24, r8
    3ffc:	b5 01       	movw	r22, r10
    3ffe:	19 95       	eicall
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    4000:	a1 96       	adiw	r28, 0x21	; 33
    4002:	0f b6       	in	r0, 0x3f	; 63
    4004:	f8 94       	cli
    4006:	de bf       	out	0x3e, r29	; 62
    4008:	0f be       	out	0x3f, r0	; 63
    400a:	cd bf       	out	0x3d, r28	; 61
    400c:	df 91       	pop	r29
    400e:	cf 91       	pop	r28
    4010:	1f 91       	pop	r17
    4012:	0f 91       	pop	r16
    4014:	ff 90       	pop	r15
    4016:	ef 90       	pop	r14
    4018:	df 90       	pop	r13
    401a:	cf 90       	pop	r12
    401c:	bf 90       	pop	r11
    401e:	af 90       	pop	r10
    4020:	9f 90       	pop	r9
    4022:	8f 90       	pop	r8
    4024:	7f 90       	pop	r7
    4026:	6f 90       	pop	r6
    4028:	5f 90       	pop	r5
    402a:	4f 90       	pop	r4
    402c:	08 95       	ret

0000402e <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    402e:	21 15       	cp	r18, r1
    4030:	31 05       	cpc	r19, r1
    4032:	49 f4       	brne	.+18     	; 0x4046 <_ZN5Print5printEmi+0x18>
    4034:	dc 01       	movw	r26, r24
    4036:	ed 91       	ld	r30, X+
    4038:	fc 91       	ld	r31, X
    403a:	01 90       	ld	r0, Z+
    403c:	f0 81       	ld	r31, Z
    403e:	e0 2d       	mov	r30, r0
    4040:	64 2f       	mov	r22, r20
    4042:	19 95       	eicall
    4044:	08 95       	ret
  else return printNumber(n, base);
    4046:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <_ZN5Print11printNumberEmh>
}
    404a:	08 95       	ret

0000404c <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    404c:	0f 93       	push	r16
    404e:	1f 93       	push	r17
    4050:	cf 93       	push	r28
    4052:	df 93       	push	r29
    4054:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    4056:	0e 94 17 20 	call	0x402e	; 0x402e <_ZN5Print5printEmi>
    405a:	ec 01       	movw	r28, r24
  n += println();
    405c:	c8 01       	movw	r24, r16
    405e:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_ZN5Print7printlnEv>
    4062:	8c 0f       	add	r24, r28
    4064:	9d 1f       	adc	r25, r29
  return n;
}
    4066:	df 91       	pop	r29
    4068:	cf 91       	pop	r28
    406a:	1f 91       	pop	r17
    406c:	0f 91       	pop	r16
    406e:	08 95       	ret

00004070 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    4070:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    4072:	ab 01       	movw	r20, r22
    4074:	60 e0       	ldi	r22, 0x00	; 0
    4076:	70 e0       	ldi	r23, 0x00	; 0
    4078:	0e 94 17 20 	call	0x402e	; 0x402e <_ZN5Print5printEmi>
}
    407c:	08 95       	ret

0000407e <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    407e:	0f 93       	push	r16
    4080:	1f 93       	push	r17
    4082:	cf 93       	push	r28
    4084:	df 93       	push	r29
    4086:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    4088:	0e 94 38 20 	call	0x4070	; 0x4070 <_ZN5Print5printEji>
    408c:	ec 01       	movw	r28, r24
  n += println();
    408e:	c8 01       	movw	r24, r16
    4090:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_ZN5Print7printlnEv>
    4094:	8c 0f       	add	r24, r28
    4096:	9d 1f       	adc	r25, r29
  return n;
}
    4098:	df 91       	pop	r29
    409a:	cf 91       	pop	r28
    409c:	1f 91       	pop	r17
    409e:	0f 91       	pop	r16
    40a0:	08 95       	ret

000040a2 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    40a2:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    40a4:	46 2f       	mov	r20, r22
    40a6:	50 e0       	ldi	r21, 0x00	; 0
    40a8:	60 e0       	ldi	r22, 0x00	; 0
    40aa:	70 e0       	ldi	r23, 0x00	; 0
    40ac:	0e 94 17 20 	call	0x402e	; 0x402e <_ZN5Print5printEmi>
}
    40b0:	08 95       	ret

000040b2 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    40b2:	0f 93       	push	r16
    40b4:	1f 93       	push	r17
    40b6:	cf 93       	push	r28
    40b8:	df 93       	push	r29
    40ba:	8c 01       	movw	r16, r24
  size_t n = print(b, base);
    40bc:	0e 94 51 20 	call	0x40a2	; 0x40a2 <_ZN5Print5printEhi>
    40c0:	ec 01       	movw	r28, r24
  n += println();
    40c2:	c8 01       	movw	r24, r16
    40c4:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_ZN5Print7printlnEv>
    40c8:	8c 0f       	add	r24, r28
    40ca:	9d 1f       	adc	r25, r29
  return n;
}
    40cc:	df 91       	pop	r29
    40ce:	cf 91       	pop	r28
    40d0:	1f 91       	pop	r17
    40d2:	0f 91       	pop	r16
    40d4:	08 95       	ret

000040d6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    40d6:	cf 92       	push	r12
    40d8:	df 92       	push	r13
    40da:	ef 92       	push	r14
    40dc:	ff 92       	push	r15
    40de:	0f 93       	push	r16
    40e0:	1f 93       	push	r17
    40e2:	cf 93       	push	r28
    40e4:	df 93       	push	r29
    40e6:	ec 01       	movw	r28, r24
    40e8:	6a 01       	movw	r12, r20
    40ea:	7b 01       	movw	r14, r22
  if (base == 0) {
    40ec:	21 15       	cp	r18, r1
    40ee:	31 05       	cpc	r19, r1
    40f0:	41 f4       	brne	.+16     	; 0x4102 <_ZN5Print5printEli+0x2c>
    return write(n);
    40f2:	e8 81       	ld	r30, Y
    40f4:	f9 81       	ldd	r31, Y+1	; 0x01
    40f6:	01 90       	ld	r0, Z+
    40f8:	f0 81       	ld	r31, Z
    40fa:	e0 2d       	mov	r30, r0
    40fc:	64 2f       	mov	r22, r20
    40fe:	19 95       	eicall
    4100:	1d c0       	rjmp	.+58     	; 0x413c <_ZN5Print5printEli+0x66>
  } else if (base == 10) {
    4102:	2a 30       	cpi	r18, 0x0A	; 10
    4104:	31 05       	cpc	r19, r1
    4106:	c1 f4       	brne	.+48     	; 0x4138 <_ZN5Print5printEli+0x62>
    if (n < 0) {
    4108:	77 23       	and	r23, r23
    410a:	94 f4       	brge	.+36     	; 0x4130 <_ZN5Print5printEli+0x5a>
      int t = print('-');
    410c:	6d e2       	ldi	r22, 0x2D	; 45
    410e:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <_ZN5Print5printEc>
    4112:	8c 01       	movw	r16, r24
      n = -n;
    4114:	44 27       	eor	r20, r20
    4116:	55 27       	eor	r21, r21
    4118:	ba 01       	movw	r22, r20
    411a:	4c 19       	sub	r20, r12
    411c:	5d 09       	sbc	r21, r13
    411e:	6e 09       	sbc	r22, r14
    4120:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    4122:	ce 01       	movw	r24, r28
    4124:	2a e0       	ldi	r18, 0x0A	; 10
    4126:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <_ZN5Print11printNumberEmh>
    412a:	80 0f       	add	r24, r16
    412c:	91 1f       	adc	r25, r17
    412e:	06 c0       	rjmp	.+12     	; 0x413c <_ZN5Print5printEli+0x66>
    }
    return printNumber(n, 10);
    4130:	2a e0       	ldi	r18, 0x0A	; 10
    4132:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <_ZN5Print11printNumberEmh>
    4136:	02 c0       	rjmp	.+4      	; 0x413c <_ZN5Print5printEli+0x66>
  } else {
    return printNumber(n, base);
    4138:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <_ZN5Print11printNumberEmh>
  }
}
    413c:	df 91       	pop	r29
    413e:	cf 91       	pop	r28
    4140:	1f 91       	pop	r17
    4142:	0f 91       	pop	r16
    4144:	ff 90       	pop	r15
    4146:	ef 90       	pop	r14
    4148:	df 90       	pop	r13
    414a:	cf 90       	pop	r12
    414c:	08 95       	ret

0000414e <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    414e:	0f 93       	push	r16
    4150:	1f 93       	push	r17
    4152:	cf 93       	push	r28
    4154:	df 93       	push	r29
    4156:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    4158:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN5Print5printEli>
    415c:	ec 01       	movw	r28, r24
  n += println();
    415e:	c8 01       	movw	r24, r16
    4160:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_ZN5Print7printlnEv>
    4164:	8c 0f       	add	r24, r28
    4166:	9d 1f       	adc	r25, r29
  return n;
}
    4168:	df 91       	pop	r29
    416a:	cf 91       	pop	r28
    416c:	1f 91       	pop	r17
    416e:	0f 91       	pop	r16
    4170:	08 95       	ret

00004172 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    4172:	9a 01       	movw	r18, r20
  return print((long) n, base);
    4174:	fb 01       	movw	r30, r22
    4176:	af 01       	movw	r20, r30
    4178:	66 27       	eor	r22, r22
    417a:	57 fd       	sbrc	r21, 7
    417c:	60 95       	com	r22
    417e:	76 2f       	mov	r23, r22
    4180:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <_ZN5Print5printEli>
}
    4184:	08 95       	ret

00004186 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    4186:	0f 93       	push	r16
    4188:	1f 93       	push	r17
    418a:	cf 93       	push	r28
    418c:	df 93       	push	r29
    418e:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    4190:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print5printEii>
    4194:	ec 01       	movw	r28, r24
  n += println();
    4196:	c8 01       	movw	r24, r16
    4198:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_ZN5Print7printlnEv>
    419c:	8c 0f       	add	r24, r28
    419e:	9d 1f       	adc	r25, r29
  return n;
}
    41a0:	df 91       	pop	r29
    41a2:	cf 91       	pop	r28
    41a4:	1f 91       	pop	r17
    41a6:	0f 91       	pop	r16
    41a8:	08 95       	ret

000041aa <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    41aa:	4f 92       	push	r4
    41ac:	5f 92       	push	r5
    41ae:	6f 92       	push	r6
    41b0:	7f 92       	push	r7
    41b2:	8f 92       	push	r8
    41b4:	9f 92       	push	r9
    41b6:	af 92       	push	r10
    41b8:	bf 92       	push	r11
    41ba:	df 92       	push	r13
    41bc:	ef 92       	push	r14
    41be:	ff 92       	push	r15
    41c0:	0f 93       	push	r16
    41c2:	1f 93       	push	r17
    41c4:	cf 93       	push	r28
    41c6:	df 93       	push	r29
    41c8:	3c 01       	movw	r6, r24
    41ca:	4a 01       	movw	r8, r20
    41cc:	5b 01       	movw	r10, r22
    41ce:	e2 2e       	mov	r14, r18
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    41d0:	cb 01       	movw	r24, r22
    41d2:	ba 01       	movw	r22, r20
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	a9 01       	movw	r20, r18
    41da:	0e 94 35 49 	call	0x926a	; 0x926a <__cmpsf2>
    41de:	88 23       	and	r24, r24
    41e0:	54 f4       	brge	.+20     	; 0x41f6 <_ZN5Print10printFloatEdh+0x4c>
  {
     n += print('-');
    41e2:	c3 01       	movw	r24, r6
    41e4:	6d e2       	ldi	r22, 0x2D	; 45
    41e6:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <_ZN5Print5printEc>
    41ea:	2c 01       	movw	r4, r24
     number = -number;
    41ec:	b7 fa       	bst	r11, 7
    41ee:	b0 94       	com	r11
    41f0:	b7 f8       	bld	r11, 7
    41f2:	b0 94       	com	r11
    41f4:	02 c0       	rjmp	.+4      	; 0x41fa <_ZN5Print10printFloatEdh+0x50>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    41f6:	44 24       	eor	r4, r4
    41f8:	55 24       	eor	r5, r5
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    41fa:	ee 20       	and	r14, r14
    41fc:	09 f4       	brne	.+2      	; 0x4200 <_ZN5Print10printFloatEdh+0x56>
    41fe:	a3 c0       	rjmp	.+326    	; 0x4346 <_ZN5Print10printFloatEdh+0x19c>
    4200:	c0 e0       	ldi	r28, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    4202:	50 e0       	ldi	r21, 0x00	; 0
    4204:	40 e0       	ldi	r20, 0x00	; 0
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    420a:	85 2f       	mov	r24, r21
    420c:	94 2f       	mov	r25, r20
    420e:	a3 2f       	mov	r26, r19
    4210:	b2 2f       	mov	r27, r18
    4212:	bc 01       	movw	r22, r24
    4214:	cd 01       	movw	r24, r26
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	40 e2       	ldi	r20, 0x20	; 32
    421c:	51 e4       	ldi	r21, 0x41	; 65
    421e:	0e 94 39 49 	call	0x9272	; 0x9272 <__divsf3>
    4222:	56 2f       	mov	r21, r22
    4224:	47 2f       	mov	r20, r23
    4226:	38 2f       	mov	r19, r24
    4228:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    422a:	cf 5f       	subi	r28, 0xFF	; 255
    422c:	ce 15       	cp	r28, r14
    422e:	69 f7       	brne	.-38     	; 0x420a <_ZN5Print10printFloatEdh+0x60>
    rounding /= 10.0;
  
  number += rounding;
    4230:	c5 01       	movw	r24, r10
    4232:	b4 01       	movw	r22, r8
    4234:	e2 2f       	mov	r30, r18
    4236:	05 2f       	mov	r16, r21
    4238:	14 2f       	mov	r17, r20
    423a:	23 2f       	mov	r18, r19
    423c:	3e 2f       	mov	r19, r30
    423e:	a9 01       	movw	r20, r18
    4240:	98 01       	movw	r18, r16
    4242:	0e 94 6f 48 	call	0x90de	; 0x90de <__addsf3>
    4246:	16 2f       	mov	r17, r22
    4248:	07 2f       	mov	r16, r23
    424a:	f8 2e       	mov	r15, r24
    424c:	d9 2e       	mov	r13, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    424e:	86 2f       	mov	r24, r22
    4250:	90 2f       	mov	r25, r16
    4252:	af 2d       	mov	r26, r15
    4254:	bd 2d       	mov	r27, r13
    4256:	bc 01       	movw	r22, r24
    4258:	cd 01       	movw	r24, r26
    425a:	0e 94 a6 49 	call	0x934c	; 0x934c <__fixunssfsi>
    425e:	c6 2f       	mov	r28, r22
    4260:	a7 2e       	mov	r10, r23
    4262:	88 2e       	mov	r8, r24
    4264:	d9 2f       	mov	r29, r25
  double remainder = number - (double)int_part;
    4266:	0e 94 d2 49 	call	0x93a4	; 0x93a4 <__floatunsisf>
    426a:	9b 01       	movw	r18, r22
    426c:	ac 01       	movw	r20, r24
    426e:	81 2f       	mov	r24, r17
    4270:	90 2f       	mov	r25, r16
    4272:	af 2d       	mov	r26, r15
    4274:	bd 2d       	mov	r27, r13
    4276:	bc 01       	movw	r22, r24
    4278:	cd 01       	movw	r24, r26
    427a:	0e 94 6e 48 	call	0x90dc	; 0x90dc <__subsf3>
    427e:	f6 2e       	mov	r15, r22
    4280:	d7 2e       	mov	r13, r23
    4282:	18 2f       	mov	r17, r24
    4284:	09 2f       	mov	r16, r25
  n += print(int_part);
    4286:	c3 01       	movw	r24, r6
    4288:	4c 2f       	mov	r20, r28
    428a:	5a 2d       	mov	r21, r10
    428c:	68 2d       	mov	r22, r8
    428e:	7d 2f       	mov	r23, r29
    4290:	2a e0       	ldi	r18, 0x0A	; 10
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	0e 94 17 20 	call	0x402e	; 0x402e <_ZN5Print5printEmi>
    4298:	ec 01       	movw	r28, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    429a:	c3 01       	movw	r24, r6
    429c:	63 e5       	ldi	r22, 0x53	; 83
    429e:	73 e0       	ldi	r23, 0x03	; 3
    42a0:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    42a4:	c8 0f       	add	r28, r24
    42a6:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    42a8:	5e 01       	movw	r10, r28
    42aa:	a4 0c       	add	r10, r4
    42ac:	b5 1c       	adc	r11, r5
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    42ae:	8f 2d       	mov	r24, r15
    42b0:	9d 2d       	mov	r25, r13
    42b2:	a1 2f       	mov	r26, r17
    42b4:	b0 2f       	mov	r27, r16
    42b6:	bc 01       	movw	r22, r24
    42b8:	cd 01       	movw	r24, r26
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	40 e2       	ldi	r20, 0x20	; 32
    42c0:	51 e4       	ldi	r21, 0x41	; 65
    42c2:	0e 94 b4 4a 	call	0x9568	; 0x9568 <__mulsf3>
    42c6:	16 2f       	mov	r17, r22
    42c8:	07 2f       	mov	r16, r23
    42ca:	f8 2e       	mov	r15, r24
    42cc:	d9 2e       	mov	r13, r25
    int toPrint = int(remainder);
    42ce:	86 2f       	mov	r24, r22
    42d0:	90 2f       	mov	r25, r16
    42d2:	af 2d       	mov	r26, r15
    42d4:	bd 2d       	mov	r27, r13
    42d6:	bc 01       	movw	r22, r24
    42d8:	cd 01       	movw	r24, r26
    42da:	0e 94 a1 49 	call	0x9342	; 0x9342 <__fixsfsi>
    42de:	ab 01       	movw	r20, r22
    42e0:	bc 01       	movw	r22, r24
    42e2:	ea 01       	movw	r28, r20
    n += print(toPrint);
    42e4:	c3 01       	movw	r24, r6
    42e6:	ba 01       	movw	r22, r20
    42e8:	4a e0       	ldi	r20, 0x0A	; 10
    42ea:	50 e0       	ldi	r21, 0x00	; 0
    42ec:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print5printEii>
    42f0:	a8 0e       	add	r10, r24
    42f2:	b9 1e       	adc	r11, r25
    remainder -= toPrint; 
    42f4:	be 01       	movw	r22, r28
    42f6:	88 27       	eor	r24, r24
    42f8:	77 fd       	sbrc	r23, 7
    42fa:	80 95       	com	r24
    42fc:	98 2f       	mov	r25, r24
    42fe:	0e 94 d4 49 	call	0x93a8	; 0x93a8 <__floatsisf>
    4302:	9b 01       	movw	r18, r22
    4304:	ac 01       	movw	r20, r24
    4306:	81 2f       	mov	r24, r17
    4308:	90 2f       	mov	r25, r16
    430a:	af 2d       	mov	r26, r15
    430c:	bd 2d       	mov	r27, r13
    430e:	bc 01       	movw	r22, r24
    4310:	cd 01       	movw	r24, r26
    4312:	0e 94 6e 48 	call	0x90dc	; 0x90dc <__subsf3>
    4316:	f6 2e       	mov	r15, r22
    4318:	d7 2e       	mov	r13, r23
    431a:	18 2f       	mov	r17, r24
    431c:	09 2f       	mov	r16, r25
    431e:	ea 94       	dec	r14
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    4320:	31 f6       	brne	.-116    	; 0x42ae <_ZN5Print10printFloatEdh+0x104>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4322:	8a 2d       	mov	r24, r10
    4324:	9b 2d       	mov	r25, r11
    4326:	df 91       	pop	r29
    4328:	cf 91       	pop	r28
    432a:	1f 91       	pop	r17
    432c:	0f 91       	pop	r16
    432e:	ff 90       	pop	r15
    4330:	ef 90       	pop	r14
    4332:	df 90       	pop	r13
    4334:	bf 90       	pop	r11
    4336:	af 90       	pop	r10
    4338:	9f 90       	pop	r9
    433a:	8f 90       	pop	r8
    433c:	7f 90       	pop	r7
    433e:	6f 90       	pop	r6
    4340:	5f 90       	pop	r5
    4342:	4f 90       	pop	r4
    4344:	08 95       	ret
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    4346:	c5 01       	movw	r24, r10
    4348:	b4 01       	movw	r22, r8
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	40 e0       	ldi	r20, 0x00	; 0
    4350:	5f e3       	ldi	r21, 0x3F	; 63
    4352:	0e 94 6f 48 	call	0x90de	; 0x90de <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4356:	0e 94 a6 49 	call	0x934c	; 0x934c <__fixunssfsi>
    435a:	ab 01       	movw	r20, r22
    435c:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    435e:	c3 01       	movw	r24, r6
    4360:	2a e0       	ldi	r18, 0x0A	; 10
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	0e 94 17 20 	call	0x402e	; 0x402e <_ZN5Print5printEmi>
    4368:	5c 01       	movw	r10, r24
    436a:	a4 0c       	add	r10, r4
    436c:	b5 1c       	adc	r11, r5
    436e:	d9 cf       	rjmp	.-78     	; 0x4322 <_ZN5Print10printFloatEdh+0x178>

00004370 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4370:	0e 94 d5 20 	call	0x41aa	; 0x41aa <_ZN5Print10printFloatEdh>
}
    4374:	08 95       	ret

00004376 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    4376:	0f 93       	push	r16
    4378:	1f 93       	push	r17
    437a:	cf 93       	push	r28
    437c:	df 93       	push	r29
    437e:	8c 01       	movw	r16, r24
  size_t n = print(num, digits);
    4380:	0e 94 b8 21 	call	0x4370	; 0x4370 <_ZN5Print5printEdi>
    4384:	ec 01       	movw	r28, r24
  n += println();
    4386:	c8 01       	movw	r24, r16
    4388:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_ZN5Print7printlnEv>
    438c:	8c 0f       	add	r24, r28
    438e:	9d 1f       	adc	r25, r29
  return n;
}
    4390:	df 91       	pop	r29
    4392:	cf 91       	pop	r28
    4394:	1f 91       	pop	r17
    4396:	0f 91       	pop	r16
    4398:	08 95       	ret

0000439a <_ZL13isTimerActive18timer16_Sequence_t>:

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
    439a:	28 2f       	mov	r18, r24
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	c9 01       	movw	r24, r18
    43a0:	88 0f       	add	r24, r24
    43a2:	99 1f       	adc	r25, r25
    43a4:	28 0f       	add	r18, r24
    43a6:	39 1f       	adc	r19, r25
    43a8:	c9 01       	movw	r24, r18
    43aa:	88 0f       	add	r24, r24
    43ac:	99 1f       	adc	r25, r25
    43ae:	88 0f       	add	r24, r24
    43b0:	99 1f       	adc	r25, r25
    43b2:	bc 01       	movw	r22, r24
    43b4:	fc 01       	movw	r30, r24
    43b6:	ee 0f       	add	r30, r30
    43b8:	ff 1f       	adc	r31, r31
    43ba:	8e 0f       	add	r24, r30
    43bc:	9f 1f       	adc	r25, r31
    43be:	fc 01       	movw	r30, r24
    43c0:	e8 5c       	subi	r30, 0xC8	; 200
    43c2:	f6 4f       	sbci	r31, 0xF6	; 246
    43c4:	80 81       	ld	r24, Z
    43c6:	86 fd       	sbrc	r24, 6
    43c8:	18 c0       	rjmp	.+48     	; 0x43fa <_ZL13isTimerActive18timer16_Sequence_t+0x60>
    43ca:	40 e0       	ldi	r20, 0x00	; 0
    43cc:	50 e0       	ldi	r21, 0x00	; 0
    43ce:	ca 01       	movw	r24, r20
    43d0:	86 0f       	add	r24, r22
    43d2:	97 1f       	adc	r25, r23
    43d4:	01 96       	adiw	r24, 0x01	; 1
    43d6:	9c 01       	movw	r18, r24
    43d8:	22 0f       	add	r18, r18
    43da:	33 1f       	adc	r19, r19
    43dc:	82 0f       	add	r24, r18
    43de:	93 1f       	adc	r25, r19
    43e0:	fc 01       	movw	r30, r24
    43e2:	e8 5c       	subi	r30, 0xC8	; 200
    43e4:	f6 4f       	sbci	r31, 0xF6	; 246
    43e6:	80 81       	ld	r24, Z
    43e8:	86 fd       	sbrc	r24, 6
    43ea:	09 c0       	rjmp	.+18     	; 0x43fe <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    43ec:	4f 5f       	subi	r20, 0xFF	; 255
    43ee:	5f 4f       	sbci	r21, 0xFF	; 255
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    43f0:	4b 30       	cpi	r20, 0x0B	; 11
    43f2:	51 05       	cpc	r21, r1
    43f4:	61 f7       	brne	.-40     	; 0x43ce <_ZL13isTimerActive18timer16_Sequence_t+0x34>
    if(SERVO(timer,channel).Pin.isActive == true)
      return true;
  }
  return false;
    43f6:	80 e0       	ldi	r24, 0x00	; 0
    43f8:	08 95       	ret
static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
      return true;
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	08 95       	ret
    43fe:	81 e0       	ldi	r24, 0x01	; 1
  }
  return false;
}
    4400:	08 95       	ret

00004402 <__vector_17>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
{ 
    4402:	1f 92       	push	r1
    4404:	0f 92       	push	r0
    4406:	0f b6       	in	r0, 0x3f	; 63
    4408:	0f 92       	push	r0
    440a:	0b b6       	in	r0, 0x3b	; 59
    440c:	0f 92       	push	r0
    440e:	11 24       	eor	r1, r1
    4410:	2f 93       	push	r18
    4412:	3f 93       	push	r19
    4414:	4f 93       	push	r20
    4416:	5f 93       	push	r21
    4418:	6f 93       	push	r22
    441a:	7f 93       	push	r23
    441c:	8f 93       	push	r24
    441e:	9f 93       	push	r25
    4420:	af 93       	push	r26
    4422:	bf 93       	push	r27
    4424:	ef 93       	push	r30
    4426:	ff 93       	push	r31

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    4428:	80 91 35 09 	lds	r24, 0x0935
    442c:	88 23       	and	r24, r24
    442e:	2c f4       	brge	.+10     	; 0x443a <__vector_17+0x38>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
    4430:	10 92 85 00 	sts	0x0085, r1
    4434:	10 92 84 00 	sts	0x0084, r1
    4438:	31 c0       	rjmp	.+98     	; 0x449c <__vector_17+0x9a>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
    443a:	20 91 35 09 	lds	r18, 0x0935
    443e:	33 27       	eor	r19, r19
    4440:	27 fd       	sbrc	r18, 7
    4442:	30 95       	com	r19
    4444:	24 5f       	subi	r18, 0xF4	; 244
    4446:	3f 4f       	sbci	r19, 0xFF	; 255
    4448:	80 91 33 09 	lds	r24, 0x0933
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	28 17       	cp	r18, r24
    4450:	39 07       	cpc	r19, r25
    4452:	24 f5       	brge	.+72     	; 0x449c <__vector_17+0x9a>
    4454:	80 91 35 09 	lds	r24, 0x0935
    4458:	99 27       	eor	r25, r25
    445a:	87 fd       	sbrc	r24, 7
    445c:	90 95       	com	r25
    445e:	0c 96       	adiw	r24, 0x0c	; 12
    4460:	fc 01       	movw	r30, r24
    4462:	ee 0f       	add	r30, r30
    4464:	ff 1f       	adc	r31, r31
    4466:	8e 0f       	add	r24, r30
    4468:	9f 1f       	adc	r25, r31
    446a:	fc 01       	movw	r30, r24
    446c:	e8 5c       	subi	r30, 0xC8	; 200
    446e:	f6 4f       	sbci	r31, 0xF6	; 246
    4470:	80 81       	ld	r24, Z
    4472:	86 ff       	sbrs	r24, 6
    4474:	13 c0       	rjmp	.+38     	; 0x449c <__vector_17+0x9a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
    4476:	80 91 35 09 	lds	r24, 0x0935
    447a:	99 27       	eor	r25, r25
    447c:	87 fd       	sbrc	r24, 7
    447e:	90 95       	com	r25
    4480:	0c 96       	adiw	r24, 0x0c	; 12
    4482:	fc 01       	movw	r30, r24
    4484:	ee 0f       	add	r30, r30
    4486:	ff 1f       	adc	r31, r31
    4488:	8e 0f       	add	r24, r30
    448a:	9f 1f       	adc	r25, r31
    448c:	fc 01       	movw	r30, r24
    448e:	e8 5c       	subi	r30, 0xC8	; 200
    4490:	f6 4f       	sbci	r31, 0xF6	; 246
    4492:	80 81       	ld	r24, Z
    4494:	8f 73       	andi	r24, 0x3F	; 63
    4496:	60 e0       	ldi	r22, 0x00	; 0
    4498:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
    449c:	80 91 35 09 	lds	r24, 0x0935
    44a0:	8f 5f       	subi	r24, 0xFF	; 255
    44a2:	80 93 35 09 	sts	0x0935, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    44a6:	20 91 35 09 	lds	r18, 0x0935
    44aa:	33 27       	eor	r19, r19
    44ac:	27 fd       	sbrc	r18, 7
    44ae:	30 95       	com	r19
    44b0:	24 5f       	subi	r18, 0xF4	; 244
    44b2:	3f 4f       	sbci	r19, 0xFF	; 255
    44b4:	80 91 33 09 	lds	r24, 0x0933
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	28 17       	cp	r18, r24
    44bc:	39 07       	cpc	r19, r25
    44be:	0c f0       	brlt	.+2      	; 0x44c2 <__vector_17+0xc0>
    44c0:	59 c0       	rjmp	.+178    	; 0x4574 <__vector_17+0x172>
    44c2:	80 91 35 09 	lds	r24, 0x0935
    44c6:	8c 30       	cpi	r24, 0x0C	; 12
    44c8:	0c f0       	brlt	.+2      	; 0x44cc <__vector_17+0xca>
    44ca:	54 c0       	rjmp	.+168    	; 0x4574 <__vector_17+0x172>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    44cc:	80 91 84 00 	lds	r24, 0x0084
    44d0:	90 91 85 00 	lds	r25, 0x0085
    44d4:	20 91 35 09 	lds	r18, 0x0935
    44d8:	33 27       	eor	r19, r19
    44da:	27 fd       	sbrc	r18, 7
    44dc:	30 95       	com	r19
    44de:	24 5f       	subi	r18, 0xF4	; 244
    44e0:	3f 4f       	sbci	r19, 0xFF	; 255
    44e2:	f9 01       	movw	r30, r18
    44e4:	ee 0f       	add	r30, r30
    44e6:	ff 1f       	adc	r31, r31
    44e8:	2e 0f       	add	r18, r30
    44ea:	3f 1f       	adc	r19, r31
    44ec:	f9 01       	movw	r30, r18
    44ee:	e8 5c       	subi	r30, 0xC8	; 200
    44f0:	f6 4f       	sbci	r31, 0xF6	; 246
    44f2:	21 81       	ldd	r18, Z+1	; 0x01
    44f4:	32 81       	ldd	r19, Z+2	; 0x02
    44f6:	82 0f       	add	r24, r18
    44f8:	93 1f       	adc	r25, r19
    44fa:	90 93 89 00 	sts	0x0089, r25
    44fe:	80 93 88 00 	sts	0x0088, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
    4502:	80 91 35 09 	lds	r24, 0x0935
    4506:	99 27       	eor	r25, r25
    4508:	87 fd       	sbrc	r24, 7
    450a:	90 95       	com	r25
    450c:	0c 96       	adiw	r24, 0x0c	; 12
    450e:	fc 01       	movw	r30, r24
    4510:	ee 0f       	add	r30, r30
    4512:	ff 1f       	adc	r31, r31
    4514:	8e 0f       	add	r24, r30
    4516:	9f 1f       	adc	r25, r31
    4518:	fc 01       	movw	r30, r24
    451a:	e8 5c       	subi	r30, 0xC8	; 200
    451c:	f6 4f       	sbci	r31, 0xF6	; 246
    451e:	80 81       	ld	r24, Z
    4520:	86 ff       	sbrs	r24, 6
    4522:	31 c0       	rjmp	.+98     	; 0x4586 <__vector_17+0x184>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
    4524:	80 91 35 09 	lds	r24, 0x0935
    4528:	99 27       	eor	r25, r25
    452a:	87 fd       	sbrc	r24, 7
    452c:	90 95       	com	r25
    452e:	0c 96       	adiw	r24, 0x0c	; 12
    4530:	fc 01       	movw	r30, r24
    4532:	ee 0f       	add	r30, r30
    4534:	ff 1f       	adc	r31, r31
    4536:	8e 0f       	add	r24, r30
    4538:	9f 1f       	adc	r25, r31
    453a:	fc 01       	movw	r30, r24
    453c:	e8 5c       	subi	r30, 0xC8	; 200
    453e:	f6 4f       	sbci	r31, 0xF6	; 246
    4540:	80 81       	ld	r24, Z
    4542:	8f 73       	andi	r24, 0x3F	; 63
    4544:	61 e0       	ldi	r22, 0x01	; 1
    4546:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    454a:	1d c0       	rjmp	.+58     	; 0x4586 <__vector_17+0x184>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
    454c:	80 e4       	ldi	r24, 0x40	; 64
    454e:	9c e9       	ldi	r25, 0x9C	; 156
    4550:	90 93 89 00 	sts	0x0089, r25
    4554:	80 93 88 00 	sts	0x0088, r24
    4558:	09 c0       	rjmp	.+18     	; 0x456c <__vector_17+0x16a>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    455a:	80 91 84 00 	lds	r24, 0x0084
    455e:	90 91 85 00 	lds	r25, 0x0085
    4562:	04 96       	adiw	r24, 0x04	; 4
    4564:	90 93 89 00 	sts	0x0089, r25
    4568:	80 93 88 00 	sts	0x0088, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
    456c:	8f ef       	ldi	r24, 0xFF	; 255
    456e:	80 93 35 09 	sts	0x0935, r24
    4572:	09 c0       	rjmp	.+18     	; 0x4586 <__vector_17+0x184>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
    4574:	80 91 84 00 	lds	r24, 0x0084
    4578:	90 91 85 00 	lds	r25, 0x0085
    457c:	2c e9       	ldi	r18, 0x9C	; 156
    457e:	84 34       	cpi	r24, 0x44	; 68
    4580:	92 07       	cpc	r25, r18
    4582:	20 f3       	brcs	.-56     	; 0x454c <__vector_17+0x14a>
    4584:	ea cf       	rjmp	.-44     	; 0x455a <__vector_17+0x158>
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
}
    4586:	ff 91       	pop	r31
    4588:	ef 91       	pop	r30
    458a:	bf 91       	pop	r27
    458c:	af 91       	pop	r26
    458e:	9f 91       	pop	r25
    4590:	8f 91       	pop	r24
    4592:	7f 91       	pop	r23
    4594:	6f 91       	pop	r22
    4596:	5f 91       	pop	r21
    4598:	4f 91       	pop	r20
    459a:	3f 91       	pop	r19
    459c:	2f 91       	pop	r18
    459e:	0f 90       	pop	r0
    45a0:	0b be       	out	0x3b, r0	; 59
    45a2:	0f 90       	pop	r0
    45a4:	0f be       	out	0x3f, r0	; 63
    45a6:	0f 90       	pop	r0
    45a8:	1f 90       	pop	r1
    45aa:	18 95       	reti

000045ac <__vector_32>:
#endif

#if defined(_useTimer3)
SIGNAL (TIMER3_COMPA_vect) 
{ 
    45ac:	1f 92       	push	r1
    45ae:	0f 92       	push	r0
    45b0:	0f b6       	in	r0, 0x3f	; 63
    45b2:	0f 92       	push	r0
    45b4:	0b b6       	in	r0, 0x3b	; 59
    45b6:	0f 92       	push	r0
    45b8:	11 24       	eor	r1, r1
    45ba:	2f 93       	push	r18
    45bc:	3f 93       	push	r19
    45be:	4f 93       	push	r20
    45c0:	5f 93       	push	r21
    45c2:	6f 93       	push	r22
    45c4:	7f 93       	push	r23
    45c6:	8f 93       	push	r24
    45c8:	9f 93       	push	r25
    45ca:	af 93       	push	r26
    45cc:	bf 93       	push	r27
    45ce:	ef 93       	push	r30
    45d0:	ff 93       	push	r31

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    45d2:	80 91 36 09 	lds	r24, 0x0936
    45d6:	88 23       	and	r24, r24
    45d8:	2c f4       	brge	.+10     	; 0x45e4 <__vector_32+0x38>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
    45da:	10 92 95 00 	sts	0x0095, r1
    45de:	10 92 94 00 	sts	0x0094, r1
    45e2:	31 c0       	rjmp	.+98     	; 0x4646 <__vector_32+0x9a>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
    45e4:	20 91 36 09 	lds	r18, 0x0936
    45e8:	33 27       	eor	r19, r19
    45ea:	27 fd       	sbrc	r18, 7
    45ec:	30 95       	com	r19
    45ee:	28 5e       	subi	r18, 0xE8	; 232
    45f0:	3f 4f       	sbci	r19, 0xFF	; 255
    45f2:	80 91 33 09 	lds	r24, 0x0933
    45f6:	90 e0       	ldi	r25, 0x00	; 0
    45f8:	28 17       	cp	r18, r24
    45fa:	39 07       	cpc	r19, r25
    45fc:	24 f5       	brge	.+72     	; 0x4646 <__vector_32+0x9a>
    45fe:	80 91 36 09 	lds	r24, 0x0936
    4602:	99 27       	eor	r25, r25
    4604:	87 fd       	sbrc	r24, 7
    4606:	90 95       	com	r25
    4608:	48 96       	adiw	r24, 0x18	; 24
    460a:	fc 01       	movw	r30, r24
    460c:	ee 0f       	add	r30, r30
    460e:	ff 1f       	adc	r31, r31
    4610:	8e 0f       	add	r24, r30
    4612:	9f 1f       	adc	r25, r31
    4614:	fc 01       	movw	r30, r24
    4616:	e8 5c       	subi	r30, 0xC8	; 200
    4618:	f6 4f       	sbci	r31, 0xF6	; 246
    461a:	80 81       	ld	r24, Z
    461c:	86 ff       	sbrs	r24, 6
    461e:	13 c0       	rjmp	.+38     	; 0x4646 <__vector_32+0x9a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
    4620:	80 91 36 09 	lds	r24, 0x0936
    4624:	99 27       	eor	r25, r25
    4626:	87 fd       	sbrc	r24, 7
    4628:	90 95       	com	r25
    462a:	48 96       	adiw	r24, 0x18	; 24
    462c:	fc 01       	movw	r30, r24
    462e:	ee 0f       	add	r30, r30
    4630:	ff 1f       	adc	r31, r31
    4632:	8e 0f       	add	r24, r30
    4634:	9f 1f       	adc	r25, r31
    4636:	fc 01       	movw	r30, r24
    4638:	e8 5c       	subi	r30, 0xC8	; 200
    463a:	f6 4f       	sbci	r31, 0xF6	; 246
    463c:	80 81       	ld	r24, Z
    463e:	8f 73       	andi	r24, 0x3F	; 63
    4640:	60 e0       	ldi	r22, 0x00	; 0
    4642:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
    4646:	80 91 36 09 	lds	r24, 0x0936
    464a:	8f 5f       	subi	r24, 0xFF	; 255
    464c:	80 93 36 09 	sts	0x0936, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    4650:	20 91 36 09 	lds	r18, 0x0936
    4654:	33 27       	eor	r19, r19
    4656:	27 fd       	sbrc	r18, 7
    4658:	30 95       	com	r19
    465a:	28 5e       	subi	r18, 0xE8	; 232
    465c:	3f 4f       	sbci	r19, 0xFF	; 255
    465e:	80 91 33 09 	lds	r24, 0x0933
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	28 17       	cp	r18, r24
    4666:	39 07       	cpc	r19, r25
    4668:	0c f0       	brlt	.+2      	; 0x466c <__vector_32+0xc0>
    466a:	59 c0       	rjmp	.+178    	; 0x471e <__vector_32+0x172>
    466c:	80 91 36 09 	lds	r24, 0x0936
    4670:	8c 30       	cpi	r24, 0x0C	; 12
    4672:	0c f0       	brlt	.+2      	; 0x4676 <__vector_32+0xca>
    4674:	54 c0       	rjmp	.+168    	; 0x471e <__vector_32+0x172>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    4676:	80 91 94 00 	lds	r24, 0x0094
    467a:	90 91 95 00 	lds	r25, 0x0095
    467e:	20 91 36 09 	lds	r18, 0x0936
    4682:	33 27       	eor	r19, r19
    4684:	27 fd       	sbrc	r18, 7
    4686:	30 95       	com	r19
    4688:	28 5e       	subi	r18, 0xE8	; 232
    468a:	3f 4f       	sbci	r19, 0xFF	; 255
    468c:	f9 01       	movw	r30, r18
    468e:	ee 0f       	add	r30, r30
    4690:	ff 1f       	adc	r31, r31
    4692:	2e 0f       	add	r18, r30
    4694:	3f 1f       	adc	r19, r31
    4696:	f9 01       	movw	r30, r18
    4698:	e8 5c       	subi	r30, 0xC8	; 200
    469a:	f6 4f       	sbci	r31, 0xF6	; 246
    469c:	21 81       	ldd	r18, Z+1	; 0x01
    469e:	32 81       	ldd	r19, Z+2	; 0x02
    46a0:	82 0f       	add	r24, r18
    46a2:	93 1f       	adc	r25, r19
    46a4:	90 93 99 00 	sts	0x0099, r25
    46a8:	80 93 98 00 	sts	0x0098, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
    46ac:	80 91 36 09 	lds	r24, 0x0936
    46b0:	99 27       	eor	r25, r25
    46b2:	87 fd       	sbrc	r24, 7
    46b4:	90 95       	com	r25
    46b6:	48 96       	adiw	r24, 0x18	; 24
    46b8:	fc 01       	movw	r30, r24
    46ba:	ee 0f       	add	r30, r30
    46bc:	ff 1f       	adc	r31, r31
    46be:	8e 0f       	add	r24, r30
    46c0:	9f 1f       	adc	r25, r31
    46c2:	fc 01       	movw	r30, r24
    46c4:	e8 5c       	subi	r30, 0xC8	; 200
    46c6:	f6 4f       	sbci	r31, 0xF6	; 246
    46c8:	80 81       	ld	r24, Z
    46ca:	86 ff       	sbrs	r24, 6
    46cc:	31 c0       	rjmp	.+98     	; 0x4730 <__vector_32+0x184>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
    46ce:	80 91 36 09 	lds	r24, 0x0936
    46d2:	99 27       	eor	r25, r25
    46d4:	87 fd       	sbrc	r24, 7
    46d6:	90 95       	com	r25
    46d8:	48 96       	adiw	r24, 0x18	; 24
    46da:	fc 01       	movw	r30, r24
    46dc:	ee 0f       	add	r30, r30
    46de:	ff 1f       	adc	r31, r31
    46e0:	8e 0f       	add	r24, r30
    46e2:	9f 1f       	adc	r25, r31
    46e4:	fc 01       	movw	r30, r24
    46e6:	e8 5c       	subi	r30, 0xC8	; 200
    46e8:	f6 4f       	sbci	r31, 0xF6	; 246
    46ea:	80 81       	ld	r24, Z
    46ec:	8f 73       	andi	r24, 0x3F	; 63
    46ee:	61 e0       	ldi	r22, 0x01	; 1
    46f0:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    46f4:	1d c0       	rjmp	.+58     	; 0x4730 <__vector_32+0x184>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
    46f6:	80 e4       	ldi	r24, 0x40	; 64
    46f8:	9c e9       	ldi	r25, 0x9C	; 156
    46fa:	90 93 99 00 	sts	0x0099, r25
    46fe:	80 93 98 00 	sts	0x0098, r24
    4702:	09 c0       	rjmp	.+18     	; 0x4716 <__vector_32+0x16a>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    4704:	80 91 94 00 	lds	r24, 0x0094
    4708:	90 91 95 00 	lds	r25, 0x0095
    470c:	04 96       	adiw	r24, 0x04	; 4
    470e:	90 93 99 00 	sts	0x0099, r25
    4712:	80 93 98 00 	sts	0x0098, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
    4716:	8f ef       	ldi	r24, 0xFF	; 255
    4718:	80 93 36 09 	sts	0x0936, r24
    471c:	09 c0       	rjmp	.+18     	; 0x4730 <__vector_32+0x184>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
    471e:	80 91 94 00 	lds	r24, 0x0094
    4722:	90 91 95 00 	lds	r25, 0x0095
    4726:	2c e9       	ldi	r18, 0x9C	; 156
    4728:	84 34       	cpi	r24, 0x44	; 68
    472a:	92 07       	cpc	r25, r18
    472c:	20 f3       	brcs	.-56     	; 0x46f6 <__vector_32+0x14a>
    472e:	ea cf       	rjmp	.-44     	; 0x4704 <__vector_32+0x158>

#if defined(_useTimer3)
SIGNAL (TIMER3_COMPA_vect) 
{ 
  handle_interrupts(_timer3, &TCNT3, &OCR3A); 
}
    4730:	ff 91       	pop	r31
    4732:	ef 91       	pop	r30
    4734:	bf 91       	pop	r27
    4736:	af 91       	pop	r26
    4738:	9f 91       	pop	r25
    473a:	8f 91       	pop	r24
    473c:	7f 91       	pop	r23
    473e:	6f 91       	pop	r22
    4740:	5f 91       	pop	r21
    4742:	4f 91       	pop	r20
    4744:	3f 91       	pop	r19
    4746:	2f 91       	pop	r18
    4748:	0f 90       	pop	r0
    474a:	0b be       	out	0x3b, r0	; 59
    474c:	0f 90       	pop	r0
    474e:	0f be       	out	0x3f, r0	; 63
    4750:	0f 90       	pop	r0
    4752:	1f 90       	pop	r1
    4754:	18 95       	reti

00004756 <__vector_42>:
#endif

#if defined(_useTimer4)
SIGNAL (TIMER4_COMPA_vect) 
{
    4756:	1f 92       	push	r1
    4758:	0f 92       	push	r0
    475a:	0f b6       	in	r0, 0x3f	; 63
    475c:	0f 92       	push	r0
    475e:	0b b6       	in	r0, 0x3b	; 59
    4760:	0f 92       	push	r0
    4762:	11 24       	eor	r1, r1
    4764:	2f 93       	push	r18
    4766:	3f 93       	push	r19
    4768:	4f 93       	push	r20
    476a:	5f 93       	push	r21
    476c:	6f 93       	push	r22
    476e:	7f 93       	push	r23
    4770:	8f 93       	push	r24
    4772:	9f 93       	push	r25
    4774:	af 93       	push	r26
    4776:	bf 93       	push	r27
    4778:	ef 93       	push	r30
    477a:	ff 93       	push	r31

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    477c:	80 91 37 09 	lds	r24, 0x0937
    4780:	88 23       	and	r24, r24
    4782:	2c f4       	brge	.+10     	; 0x478e <__vector_42+0x38>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
    4784:	10 92 a5 00 	sts	0x00A5, r1
    4788:	10 92 a4 00 	sts	0x00A4, r1
    478c:	31 c0       	rjmp	.+98     	; 0x47f0 <__vector_42+0x9a>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
    478e:	20 91 37 09 	lds	r18, 0x0937
    4792:	33 27       	eor	r19, r19
    4794:	27 fd       	sbrc	r18, 7
    4796:	30 95       	com	r19
    4798:	2c 5d       	subi	r18, 0xDC	; 220
    479a:	3f 4f       	sbci	r19, 0xFF	; 255
    479c:	80 91 33 09 	lds	r24, 0x0933
    47a0:	90 e0       	ldi	r25, 0x00	; 0
    47a2:	28 17       	cp	r18, r24
    47a4:	39 07       	cpc	r19, r25
    47a6:	24 f5       	brge	.+72     	; 0x47f0 <__vector_42+0x9a>
    47a8:	80 91 37 09 	lds	r24, 0x0937
    47ac:	99 27       	eor	r25, r25
    47ae:	87 fd       	sbrc	r24, 7
    47b0:	90 95       	com	r25
    47b2:	84 96       	adiw	r24, 0x24	; 36
    47b4:	fc 01       	movw	r30, r24
    47b6:	ee 0f       	add	r30, r30
    47b8:	ff 1f       	adc	r31, r31
    47ba:	8e 0f       	add	r24, r30
    47bc:	9f 1f       	adc	r25, r31
    47be:	fc 01       	movw	r30, r24
    47c0:	e8 5c       	subi	r30, 0xC8	; 200
    47c2:	f6 4f       	sbci	r31, 0xF6	; 246
    47c4:	80 81       	ld	r24, Z
    47c6:	86 ff       	sbrs	r24, 6
    47c8:	13 c0       	rjmp	.+38     	; 0x47f0 <__vector_42+0x9a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
    47ca:	80 91 37 09 	lds	r24, 0x0937
    47ce:	99 27       	eor	r25, r25
    47d0:	87 fd       	sbrc	r24, 7
    47d2:	90 95       	com	r25
    47d4:	84 96       	adiw	r24, 0x24	; 36
    47d6:	fc 01       	movw	r30, r24
    47d8:	ee 0f       	add	r30, r30
    47da:	ff 1f       	adc	r31, r31
    47dc:	8e 0f       	add	r24, r30
    47de:	9f 1f       	adc	r25, r31
    47e0:	fc 01       	movw	r30, r24
    47e2:	e8 5c       	subi	r30, 0xC8	; 200
    47e4:	f6 4f       	sbci	r31, 0xF6	; 246
    47e6:	80 81       	ld	r24, Z
    47e8:	8f 73       	andi	r24, 0x3F	; 63
    47ea:	60 e0       	ldi	r22, 0x00	; 0
    47ec:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
    47f0:	80 91 37 09 	lds	r24, 0x0937
    47f4:	8f 5f       	subi	r24, 0xFF	; 255
    47f6:	80 93 37 09 	sts	0x0937, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    47fa:	20 91 37 09 	lds	r18, 0x0937
    47fe:	33 27       	eor	r19, r19
    4800:	27 fd       	sbrc	r18, 7
    4802:	30 95       	com	r19
    4804:	2c 5d       	subi	r18, 0xDC	; 220
    4806:	3f 4f       	sbci	r19, 0xFF	; 255
    4808:	80 91 33 09 	lds	r24, 0x0933
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	28 17       	cp	r18, r24
    4810:	39 07       	cpc	r19, r25
    4812:	0c f0       	brlt	.+2      	; 0x4816 <__vector_42+0xc0>
    4814:	59 c0       	rjmp	.+178    	; 0x48c8 <__vector_42+0x172>
    4816:	80 91 37 09 	lds	r24, 0x0937
    481a:	8c 30       	cpi	r24, 0x0C	; 12
    481c:	0c f0       	brlt	.+2      	; 0x4820 <__vector_42+0xca>
    481e:	54 c0       	rjmp	.+168    	; 0x48c8 <__vector_42+0x172>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    4820:	80 91 a4 00 	lds	r24, 0x00A4
    4824:	90 91 a5 00 	lds	r25, 0x00A5
    4828:	20 91 37 09 	lds	r18, 0x0937
    482c:	33 27       	eor	r19, r19
    482e:	27 fd       	sbrc	r18, 7
    4830:	30 95       	com	r19
    4832:	2c 5d       	subi	r18, 0xDC	; 220
    4834:	3f 4f       	sbci	r19, 0xFF	; 255
    4836:	f9 01       	movw	r30, r18
    4838:	ee 0f       	add	r30, r30
    483a:	ff 1f       	adc	r31, r31
    483c:	2e 0f       	add	r18, r30
    483e:	3f 1f       	adc	r19, r31
    4840:	f9 01       	movw	r30, r18
    4842:	e8 5c       	subi	r30, 0xC8	; 200
    4844:	f6 4f       	sbci	r31, 0xF6	; 246
    4846:	21 81       	ldd	r18, Z+1	; 0x01
    4848:	32 81       	ldd	r19, Z+2	; 0x02
    484a:	82 0f       	add	r24, r18
    484c:	93 1f       	adc	r25, r19
    484e:	90 93 a9 00 	sts	0x00A9, r25
    4852:	80 93 a8 00 	sts	0x00A8, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
    4856:	80 91 37 09 	lds	r24, 0x0937
    485a:	99 27       	eor	r25, r25
    485c:	87 fd       	sbrc	r24, 7
    485e:	90 95       	com	r25
    4860:	84 96       	adiw	r24, 0x24	; 36
    4862:	fc 01       	movw	r30, r24
    4864:	ee 0f       	add	r30, r30
    4866:	ff 1f       	adc	r31, r31
    4868:	8e 0f       	add	r24, r30
    486a:	9f 1f       	adc	r25, r31
    486c:	fc 01       	movw	r30, r24
    486e:	e8 5c       	subi	r30, 0xC8	; 200
    4870:	f6 4f       	sbci	r31, 0xF6	; 246
    4872:	80 81       	ld	r24, Z
    4874:	86 ff       	sbrs	r24, 6
    4876:	31 c0       	rjmp	.+98     	; 0x48da <__vector_42+0x184>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
    4878:	80 91 37 09 	lds	r24, 0x0937
    487c:	99 27       	eor	r25, r25
    487e:	87 fd       	sbrc	r24, 7
    4880:	90 95       	com	r25
    4882:	84 96       	adiw	r24, 0x24	; 36
    4884:	fc 01       	movw	r30, r24
    4886:	ee 0f       	add	r30, r30
    4888:	ff 1f       	adc	r31, r31
    488a:	8e 0f       	add	r24, r30
    488c:	9f 1f       	adc	r25, r31
    488e:	fc 01       	movw	r30, r24
    4890:	e8 5c       	subi	r30, 0xC8	; 200
    4892:	f6 4f       	sbci	r31, 0xF6	; 246
    4894:	80 81       	ld	r24, Z
    4896:	8f 73       	andi	r24, 0x3F	; 63
    4898:	61 e0       	ldi	r22, 0x01	; 1
    489a:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    489e:	1d c0       	rjmp	.+58     	; 0x48da <__vector_42+0x184>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
    48a0:	80 e4       	ldi	r24, 0x40	; 64
    48a2:	9c e9       	ldi	r25, 0x9C	; 156
    48a4:	90 93 a9 00 	sts	0x00A9, r25
    48a8:	80 93 a8 00 	sts	0x00A8, r24
    48ac:	09 c0       	rjmp	.+18     	; 0x48c0 <__vector_42+0x16a>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    48ae:	80 91 a4 00 	lds	r24, 0x00A4
    48b2:	90 91 a5 00 	lds	r25, 0x00A5
    48b6:	04 96       	adiw	r24, 0x04	; 4
    48b8:	90 93 a9 00 	sts	0x00A9, r25
    48bc:	80 93 a8 00 	sts	0x00A8, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
    48c0:	8f ef       	ldi	r24, 0xFF	; 255
    48c2:	80 93 37 09 	sts	0x0937, r24
    48c6:	09 c0       	rjmp	.+18     	; 0x48da <__vector_42+0x184>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
    48c8:	80 91 a4 00 	lds	r24, 0x00A4
    48cc:	90 91 a5 00 	lds	r25, 0x00A5
    48d0:	2c e9       	ldi	r18, 0x9C	; 156
    48d2:	84 34       	cpi	r24, 0x44	; 68
    48d4:	92 07       	cpc	r25, r18
    48d6:	20 f3       	brcs	.-56     	; 0x48a0 <__vector_42+0x14a>
    48d8:	ea cf       	rjmp	.-44     	; 0x48ae <__vector_42+0x158>

#if defined(_useTimer4)
SIGNAL (TIMER4_COMPA_vect) 
{
  handle_interrupts(_timer4, &TCNT4, &OCR4A); 
}
    48da:	ff 91       	pop	r31
    48dc:	ef 91       	pop	r30
    48de:	bf 91       	pop	r27
    48e0:	af 91       	pop	r26
    48e2:	9f 91       	pop	r25
    48e4:	8f 91       	pop	r24
    48e6:	7f 91       	pop	r23
    48e8:	6f 91       	pop	r22
    48ea:	5f 91       	pop	r21
    48ec:	4f 91       	pop	r20
    48ee:	3f 91       	pop	r19
    48f0:	2f 91       	pop	r18
    48f2:	0f 90       	pop	r0
    48f4:	0b be       	out	0x3b, r0	; 59
    48f6:	0f 90       	pop	r0
    48f8:	0f be       	out	0x3f, r0	; 63
    48fa:	0f 90       	pop	r0
    48fc:	1f 90       	pop	r1
    48fe:	18 95       	reti

00004900 <__vector_47>:
#endif

#if defined(_useTimer5)
SIGNAL (TIMER5_COMPA_vect) 
{
    4900:	1f 92       	push	r1
    4902:	0f 92       	push	r0
    4904:	0f b6       	in	r0, 0x3f	; 63
    4906:	0f 92       	push	r0
    4908:	0b b6       	in	r0, 0x3b	; 59
    490a:	0f 92       	push	r0
    490c:	11 24       	eor	r1, r1
    490e:	2f 93       	push	r18
    4910:	3f 93       	push	r19
    4912:	4f 93       	push	r20
    4914:	5f 93       	push	r21
    4916:	6f 93       	push	r22
    4918:	7f 93       	push	r23
    491a:	8f 93       	push	r24
    491c:	9f 93       	push	r25
    491e:	af 93       	push	r26
    4920:	bf 93       	push	r27
    4922:	ef 93       	push	r30
    4924:	ff 93       	push	r31

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    4926:	80 91 34 09 	lds	r24, 0x0934
    492a:	88 23       	and	r24, r24
    492c:	2c f4       	brge	.+10     	; 0x4938 <__vector_47+0x38>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
    492e:	10 92 25 01 	sts	0x0125, r1
    4932:	10 92 24 01 	sts	0x0124, r1
    4936:	2d c0       	rjmp	.+90     	; 0x4992 <__vector_47+0x92>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
    4938:	20 91 34 09 	lds	r18, 0x0934
    493c:	33 27       	eor	r19, r19
    493e:	27 fd       	sbrc	r18, 7
    4940:	30 95       	com	r19
    4942:	80 91 33 09 	lds	r24, 0x0933
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	28 17       	cp	r18, r24
    494a:	39 07       	cpc	r19, r25
    494c:	14 f5       	brge	.+68     	; 0x4992 <__vector_47+0x92>
    494e:	80 91 34 09 	lds	r24, 0x0934
    4952:	99 27       	eor	r25, r25
    4954:	87 fd       	sbrc	r24, 7
    4956:	90 95       	com	r25
    4958:	fc 01       	movw	r30, r24
    495a:	ee 0f       	add	r30, r30
    495c:	ff 1f       	adc	r31, r31
    495e:	8e 0f       	add	r24, r30
    4960:	9f 1f       	adc	r25, r31
    4962:	fc 01       	movw	r30, r24
    4964:	e8 5c       	subi	r30, 0xC8	; 200
    4966:	f6 4f       	sbci	r31, 0xF6	; 246
    4968:	80 81       	ld	r24, Z
    496a:	86 ff       	sbrs	r24, 6
    496c:	12 c0       	rjmp	.+36     	; 0x4992 <__vector_47+0x92>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
    496e:	80 91 34 09 	lds	r24, 0x0934
    4972:	99 27       	eor	r25, r25
    4974:	87 fd       	sbrc	r24, 7
    4976:	90 95       	com	r25
    4978:	fc 01       	movw	r30, r24
    497a:	ee 0f       	add	r30, r30
    497c:	ff 1f       	adc	r31, r31
    497e:	8e 0f       	add	r24, r30
    4980:	9f 1f       	adc	r25, r31
    4982:	fc 01       	movw	r30, r24
    4984:	e8 5c       	subi	r30, 0xC8	; 200
    4986:	f6 4f       	sbci	r31, 0xF6	; 246
    4988:	80 81       	ld	r24, Z
    498a:	8f 73       	andi	r24, 0x3F	; 63
    498c:	60 e0       	ldi	r22, 0x00	; 0
    498e:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
    4992:	80 91 34 09 	lds	r24, 0x0934
    4996:	8f 5f       	subi	r24, 0xFF	; 255
    4998:	80 93 34 09 	sts	0x0934, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    499c:	20 91 34 09 	lds	r18, 0x0934
    49a0:	33 27       	eor	r19, r19
    49a2:	27 fd       	sbrc	r18, 7
    49a4:	30 95       	com	r19
    49a6:	80 91 33 09 	lds	r24, 0x0933
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	28 17       	cp	r18, r24
    49ae:	39 07       	cpc	r19, r25
    49b0:	0c f0       	brlt	.+2      	; 0x49b4 <__vector_47+0xb4>
    49b2:	55 c0       	rjmp	.+170    	; 0x4a5e <__vector_47+0x15e>
    49b4:	80 91 34 09 	lds	r24, 0x0934
    49b8:	8c 30       	cpi	r24, 0x0C	; 12
    49ba:	0c f0       	brlt	.+2      	; 0x49be <__vector_47+0xbe>
    49bc:	50 c0       	rjmp	.+160    	; 0x4a5e <__vector_47+0x15e>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    49be:	80 91 24 01 	lds	r24, 0x0124
    49c2:	90 91 25 01 	lds	r25, 0x0125
    49c6:	20 91 34 09 	lds	r18, 0x0934
    49ca:	33 27       	eor	r19, r19
    49cc:	27 fd       	sbrc	r18, 7
    49ce:	30 95       	com	r19
    49d0:	f9 01       	movw	r30, r18
    49d2:	ee 0f       	add	r30, r30
    49d4:	ff 1f       	adc	r31, r31
    49d6:	2e 0f       	add	r18, r30
    49d8:	3f 1f       	adc	r19, r31
    49da:	f9 01       	movw	r30, r18
    49dc:	e8 5c       	subi	r30, 0xC8	; 200
    49de:	f6 4f       	sbci	r31, 0xF6	; 246
    49e0:	21 81       	ldd	r18, Z+1	; 0x01
    49e2:	32 81       	ldd	r19, Z+2	; 0x02
    49e4:	82 0f       	add	r24, r18
    49e6:	93 1f       	adc	r25, r19
    49e8:	90 93 29 01 	sts	0x0129, r25
    49ec:	80 93 28 01 	sts	0x0128, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
    49f0:	80 91 34 09 	lds	r24, 0x0934
    49f4:	99 27       	eor	r25, r25
    49f6:	87 fd       	sbrc	r24, 7
    49f8:	90 95       	com	r25
    49fa:	fc 01       	movw	r30, r24
    49fc:	ee 0f       	add	r30, r30
    49fe:	ff 1f       	adc	r31, r31
    4a00:	8e 0f       	add	r24, r30
    4a02:	9f 1f       	adc	r25, r31
    4a04:	fc 01       	movw	r30, r24
    4a06:	e8 5c       	subi	r30, 0xC8	; 200
    4a08:	f6 4f       	sbci	r31, 0xF6	; 246
    4a0a:	80 81       	ld	r24, Z
    4a0c:	86 ff       	sbrs	r24, 6
    4a0e:	30 c0       	rjmp	.+96     	; 0x4a70 <__vector_47+0x170>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
    4a10:	80 91 34 09 	lds	r24, 0x0934
    4a14:	99 27       	eor	r25, r25
    4a16:	87 fd       	sbrc	r24, 7
    4a18:	90 95       	com	r25
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	ee 0f       	add	r30, r30
    4a1e:	ff 1f       	adc	r31, r31
    4a20:	8e 0f       	add	r24, r30
    4a22:	9f 1f       	adc	r25, r31
    4a24:	fc 01       	movw	r30, r24
    4a26:	e8 5c       	subi	r30, 0xC8	; 200
    4a28:	f6 4f       	sbci	r31, 0xF6	; 246
    4a2a:	80 81       	ld	r24, Z
    4a2c:	8f 73       	andi	r24, 0x3F	; 63
    4a2e:	61 e0       	ldi	r22, 0x01	; 1
    4a30:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    4a34:	1d c0       	rjmp	.+58     	; 0x4a70 <__vector_47+0x170>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
    4a36:	80 e4       	ldi	r24, 0x40	; 64
    4a38:	9c e9       	ldi	r25, 0x9C	; 156
    4a3a:	90 93 29 01 	sts	0x0129, r25
    4a3e:	80 93 28 01 	sts	0x0128, r24
    4a42:	09 c0       	rjmp	.+18     	; 0x4a56 <__vector_47+0x156>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    4a44:	80 91 24 01 	lds	r24, 0x0124
    4a48:	90 91 25 01 	lds	r25, 0x0125
    4a4c:	04 96       	adiw	r24, 0x04	; 4
    4a4e:	90 93 29 01 	sts	0x0129, r25
    4a52:	80 93 28 01 	sts	0x0128, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
    4a56:	8f ef       	ldi	r24, 0xFF	; 255
    4a58:	80 93 34 09 	sts	0x0934, r24
    4a5c:	09 c0       	rjmp	.+18     	; 0x4a70 <__vector_47+0x170>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
    4a5e:	80 91 24 01 	lds	r24, 0x0124
    4a62:	90 91 25 01 	lds	r25, 0x0125
    4a66:	2c e9       	ldi	r18, 0x9C	; 156
    4a68:	84 34       	cpi	r24, 0x44	; 68
    4a6a:	92 07       	cpc	r25, r18
    4a6c:	20 f3       	brcs	.-56     	; 0x4a36 <__vector_47+0x136>
    4a6e:	ea cf       	rjmp	.-44     	; 0x4a44 <__vector_47+0x144>

#if defined(_useTimer5)
SIGNAL (TIMER5_COMPA_vect) 
{
  handle_interrupts(_timer5, &TCNT5, &OCR5A); 
}
    4a70:	ff 91       	pop	r31
    4a72:	ef 91       	pop	r30
    4a74:	bf 91       	pop	r27
    4a76:	af 91       	pop	r26
    4a78:	9f 91       	pop	r25
    4a7a:	8f 91       	pop	r24
    4a7c:	7f 91       	pop	r23
    4a7e:	6f 91       	pop	r22
    4a80:	5f 91       	pop	r21
    4a82:	4f 91       	pop	r20
    4a84:	3f 91       	pop	r19
    4a86:	2f 91       	pop	r18
    4a88:	0f 90       	pop	r0
    4a8a:	0b be       	out	0x3b, r0	; 59
    4a8c:	0f 90       	pop	r0
    4a8e:	0f be       	out	0x3f, r0	; 63
    4a90:	0f 90       	pop	r0
    4a92:	1f 90       	pop	r1
    4a94:	18 95       	reti

00004a96 <_ZN5ServoC1Ev>:
}


/****************** end of static functions ******************************/

Servo::Servo()
    4a96:	fc 01       	movw	r30, r24
{
  if( ServoCount < MAX_SERVOS) {
    4a98:	80 91 33 09 	lds	r24, 0x0933
    4a9c:	80 33       	cpi	r24, 0x30	; 48
    4a9e:	98 f4       	brcc	.+38     	; 0x4ac6 <_ZN5ServoC1Ev+0x30>
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
    4aa0:	80 83       	st	Z, r24
    4aa2:	8f 5f       	subi	r24, 0xFF	; 255
    4aa4:	80 93 33 09 	sts	0x0933, r24
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
    4aa8:	80 81       	ld	r24, Z
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	fc 01       	movw	r30, r24
    4aae:	ee 0f       	add	r30, r30
    4ab0:	ff 1f       	adc	r31, r31
    4ab2:	8e 0f       	add	r24, r30
    4ab4:	9f 1f       	adc	r25, r31
    4ab6:	fc 01       	movw	r30, r24
    4ab8:	e8 5c       	subi	r30, 0xC8	; 200
    4aba:	f6 4f       	sbci	r31, 0xF6	; 246
    4abc:	88 eb       	ldi	r24, 0xB8	; 184
    4abe:	9b e0       	ldi	r25, 0x0B	; 11
    4ac0:	92 83       	std	Z+2, r25	; 0x02
    4ac2:	81 83       	std	Z+1, r24	; 0x01
    4ac4:	08 95       	ret
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
    4ac6:	8f ef       	ldi	r24, 0xFF	; 255
    4ac8:	80 83       	st	Z, r24
    4aca:	08 95       	ret

00004acc <_ZN5Servo6attachEiii>:
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
{
    4acc:	cf 92       	push	r12
    4ace:	df 92       	push	r13
    4ad0:	ef 92       	push	r14
    4ad2:	ff 92       	push	r15
    4ad4:	0f 93       	push	r16
    4ad6:	1f 93       	push	r17
    4ad8:	cf 93       	push	r28
    4ada:	8c 01       	movw	r16, r24
    4adc:	c6 2f       	mov	r28, r22
    4ade:	7a 01       	movw	r14, r20
    4ae0:	69 01       	movw	r12, r18
  if(this->servoIndex < MAX_SERVOS ) {
    4ae2:	fc 01       	movw	r30, r24
    4ae4:	80 81       	ld	r24, Z
    4ae6:	80 33       	cpi	r24, 0x30	; 48
    4ae8:	08 f0       	brcs	.+2      	; 0x4aec <_ZN5Servo6attachEiii+0x20>
    4aea:	81 c0       	rjmp	.+258    	; 0x4bee <_ZN5Servo6attachEiii+0x122>
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
    4aec:	86 2f       	mov	r24, r22
    4aee:	61 e0       	ldi	r22, 0x01	; 1
    4af0:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <pinMode>
    servos[this->servoIndex].Pin.nbr = pin;  
    4af4:	f8 01       	movw	r30, r16
    4af6:	40 81       	ld	r20, Z
    4af8:	84 2f       	mov	r24, r20
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	9c 01       	movw	r18, r24
    4afe:	22 0f       	add	r18, r18
    4b00:	33 1f       	adc	r19, r19
    4b02:	82 0f       	add	r24, r18
    4b04:	93 1f       	adc	r25, r19
    4b06:	fc 01       	movw	r30, r24
    4b08:	e8 5c       	subi	r30, 0xC8	; 200
    4b0a:	f6 4f       	sbci	r31, 0xF6	; 246
    4b0c:	cf 73       	andi	r28, 0x3F	; 63
    4b0e:	80 81       	ld	r24, Z
    4b10:	80 7c       	andi	r24, 0xC0	; 192
    4b12:	c8 2b       	or	r28, r24
    4b14:	c0 83       	st	Z, r28
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128 
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS
    4b16:	80 e2       	ldi	r24, 0x20	; 32
    4b18:	92 e0       	ldi	r25, 0x02	; 2
    4b1a:	8e 19       	sub	r24, r14
    4b1c:	9f 09       	sbc	r25, r15
    4b1e:	0a f4       	brpl	.+2      	; 0x4b22 <_ZN5Servo6attachEiii+0x56>
    4b20:	03 96       	adiw	r24, 0x03	; 3
    4b22:	95 95       	asr	r25
    4b24:	87 95       	ror	r24
    4b26:	95 95       	asr	r25
    4b28:	87 95       	ror	r24
    4b2a:	f8 01       	movw	r30, r16
    4b2c:	81 83       	std	Z+1, r24	; 0x01
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
    4b2e:	80 e6       	ldi	r24, 0x60	; 96
    4b30:	99 e0       	ldi	r25, 0x09	; 9
    4b32:	8c 19       	sub	r24, r12
    4b34:	9d 09       	sbc	r25, r13
    4b36:	0a f4       	brpl	.+2      	; 0x4b3a <_ZN5Servo6attachEiii+0x6e>
    4b38:	03 96       	adiw	r24, 0x03	; 3
    4b3a:	95 95       	asr	r25
    4b3c:	87 95       	ror	r24
    4b3e:	95 95       	asr	r25
    4b40:	87 95       	ror	r24
    4b42:	f8 01       	movw	r30, r16
    4b44:	82 83       	std	Z+2, r24	; 0x02
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    4b46:	84 2f       	mov	r24, r20
    4b48:	6c e0       	ldi	r22, 0x0C	; 12
    4b4a:	0e 94 39 4b 	call	0x9672	; 0x9672 <__udivmodqi4>
    4b4e:	c8 2f       	mov	r28, r24
    if(isTimerActive(timer) == false)
    4b50:	0e 94 cd 21 	call	0x439a	; 0x439a <_ZL13isTimerActive18timer16_Sequence_t>
    4b54:	88 23       	and	r24, r24
    4b56:	f1 f5       	brne	.+124    	; 0x4bd4 <_ZN5Servo6attachEiii+0x108>


static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
    4b58:	c1 30       	cpi	r28, 0x01	; 1
    4b5a:	81 f4       	brne	.+32     	; 0x4b7c <_ZN5Servo6attachEiii+0xb0>
    TCCR1A = 0;             // normal counting mode 
    4b5c:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = _BV(CS11);     // set prescaler of 8 
    4b60:	82 e0       	ldi	r24, 0x02	; 2
    4b62:	80 93 81 00 	sts	0x0081, r24
    TCNT1 = 0;              // clear the timer count 
    4b66:	10 92 85 00 	sts	0x0085, r1
    4b6a:	10 92 84 00 	sts	0x0084, r1
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts; 
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt  
#else
    // here if not ATmega8 or ATmega128
    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts; 
    4b6e:	b1 9a       	sbi	0x16, 1	; 22
    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt 
    4b70:	ef e6       	ldi	r30, 0x6F	; 111
    4b72:	f0 e0       	ldi	r31, 0x00	; 0
    4b74:	80 81       	ld	r24, Z
    4b76:	82 60       	ori	r24, 0x02	; 2
    4b78:	80 83       	st	Z, r24
    4b7a:	1e c0       	rjmp	.+60     	; 0x4bb8 <_ZN5Servo6attachEiii+0xec>
#endif	
  } 
#endif  

#if defined (_useTimer3)
  if(timer == _timer3) {
    4b7c:	c2 30       	cpi	r28, 0x02	; 2
    4b7e:	69 f4       	brne	.+26     	; 0x4b9a <_ZN5Servo6attachEiii+0xce>
    TCCR3A = 0;             // normal counting mode 
    4b80:	10 92 90 00 	sts	0x0090, r1
    TCCR3B = _BV(CS31);     // set prescaler of 8  
    4b84:	82 e0       	ldi	r24, 0x02	; 2
    4b86:	80 93 91 00 	sts	0x0091, r24
    TCNT3 = 0;              // clear the timer count 
    4b8a:	10 92 95 00 	sts	0x0095, r1
    4b8e:	10 92 94 00 	sts	0x0094, r1
#if defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF3A);     // clear any pending interrupts;   
	ETIMSK |= _BV(OCIE3A);  // enable the output compare interrupt     
#else  
    TIFR3 = _BV(OCF3A);     // clear any pending interrupts; 
    4b92:	88 bb       	out	0x18, r24	; 24
    TIMSK3 =  _BV(OCIE3A) ; // enable the output compare interrupt      
    4b94:	80 93 71 00 	sts	0x0071, r24
    4b98:	1d c0       	rjmp	.+58     	; 0x4bd4 <_ZN5Servo6attachEiii+0x108>
#endif  
  }
#endif

#if defined (_useTimer4)
  if(timer == _timer4) {
    4b9a:	c3 30       	cpi	r28, 0x03	; 3
    4b9c:	69 f4       	brne	.+26     	; 0x4bb8 <_ZN5Servo6attachEiii+0xec>
    TCCR4A = 0;             // normal counting mode 
    4b9e:	10 92 a0 00 	sts	0x00A0, r1
    TCCR4B = _BV(CS41);     // set prescaler of 8  
    4ba2:	82 e0       	ldi	r24, 0x02	; 2
    4ba4:	80 93 a1 00 	sts	0x00A1, r24
    TCNT4 = 0;              // clear the timer count 
    4ba8:	10 92 a5 00 	sts	0x00A5, r1
    4bac:	10 92 a4 00 	sts	0x00A4, r1
    TIFR4 = _BV(OCF4A);     // clear any pending interrupts; 
    4bb0:	89 bb       	out	0x19, r24	; 25
    TIMSK4 =  _BV(OCIE4A) ; // enable the output compare interrupt
    4bb2:	80 93 72 00 	sts	0x0072, r24
    4bb6:	0e c0       	rjmp	.+28     	; 0x4bd4 <_ZN5Servo6attachEiii+0x108>
  }    
#endif

#if defined (_useTimer5)
  if(timer == _timer5) {
    4bb8:	cc 23       	and	r28, r28
    4bba:	61 f4       	brne	.+24     	; 0x4bd4 <_ZN5Servo6attachEiii+0x108>
    TCCR5A = 0;             // normal counting mode 
    4bbc:	10 92 20 01 	sts	0x0120, r1
    TCCR5B = _BV(CS51);     // set prescaler of 8  
    4bc0:	82 e0       	ldi	r24, 0x02	; 2
    4bc2:	80 93 21 01 	sts	0x0121, r24
    TCNT5 = 0;              // clear the timer count 
    4bc6:	10 92 25 01 	sts	0x0125, r1
    4bca:	10 92 24 01 	sts	0x0124, r1
    TIFR5 = _BV(OCF5A);     // clear any pending interrupts; 
    4bce:	8a bb       	out	0x1a, r24	; 26
    TIMSK5 =  _BV(OCIE5A) ; // enable the output compare interrupt      
    4bd0:	80 93 73 00 	sts	0x0073, r24
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);    
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
    4bd4:	f8 01       	movw	r30, r16
    4bd6:	80 81       	ld	r24, Z
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	fc 01       	movw	r30, r24
    4bdc:	ee 0f       	add	r30, r30
    4bde:	ff 1f       	adc	r31, r31
    4be0:	e8 0f       	add	r30, r24
    4be2:	f9 1f       	adc	r31, r25
    4be4:	e8 5c       	subi	r30, 0xC8	; 200
    4be6:	f6 4f       	sbci	r31, 0xF6	; 246
    4be8:	80 81       	ld	r24, Z
    4bea:	80 64       	ori	r24, 0x40	; 64
    4bec:	80 83       	st	Z, r24
  } 
  return this->servoIndex ;
}
    4bee:	f8 01       	movw	r30, r16
    4bf0:	80 81       	ld	r24, Z
    4bf2:	cf 91       	pop	r28
    4bf4:	1f 91       	pop	r17
    4bf6:	0f 91       	pop	r16
    4bf8:	ff 90       	pop	r15
    4bfa:	ef 90       	pop	r14
    4bfc:	df 90       	pop	r13
    4bfe:	cf 90       	pop	r12
    4c00:	08 95       	ret

00004c02 <_ZN5Servo6attachEi>:
    this->servoIndex = INVALID_SERVO ;  // too many servos 
}

uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
    4c02:	40 e2       	ldi	r20, 0x20	; 32
    4c04:	52 e0       	ldi	r21, 0x02	; 2
    4c06:	20 e6       	ldi	r18, 0x60	; 96
    4c08:	39 e0       	ldi	r19, 0x09	; 9
    4c0a:	0e 94 66 25 	call	0x4acc	; 0x4acc <_ZN5Servo6attachEiii>
}
    4c0e:	08 95       	ret

00004c10 <_ZN5Servo6detachEv>:
  return this->servoIndex ;
}

void Servo::detach()  
{
  servos[this->servoIndex].Pin.isActive = false;  
    4c10:	fc 01       	movw	r30, r24
    4c12:	80 81       	ld	r24, Z
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	fc 01       	movw	r30, r24
    4c18:	ee 0f       	add	r30, r30
    4c1a:	ff 1f       	adc	r31, r31
    4c1c:	e8 0f       	add	r30, r24
    4c1e:	f9 1f       	adc	r31, r25
    4c20:	e8 5c       	subi	r30, 0xC8	; 200
    4c22:	f6 4f       	sbci	r31, 0xF6	; 246
    4c24:	80 81       	ld	r24, Z
    4c26:	8f 7b       	andi	r24, 0xBF	; 191
    4c28:	80 83       	st	Z, r24
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    4c2a:	08 95       	ret

00004c2c <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
    4c2c:	cf 92       	push	r12
    4c2e:	df 92       	push	r13
    4c30:	ef 92       	push	r14
    4c32:	ff 92       	push	r15
    4c34:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    4c36:	40 81       	ld	r20, Z
  if( (channel >= 0) && (channel < MAX_SERVOS) )   // ensure channel is valid
    4c38:	40 33       	cpi	r20, 0x30	; 48
    4c3a:	08 f0       	brcs	.+2      	; 0x4c3e <_ZN5Servo17writeMicrosecondsEi+0x12>
    4c3c:	41 c0       	rjmp	.+130    	; 0x4cc0 <_ZN5Servo17writeMicrosecondsEi+0x94>
  {  
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    4c3e:	81 81       	ldd	r24, Z+1	; 0x01
    4c40:	99 27       	eor	r25, r25
    4c42:	87 fd       	sbrc	r24, 7
    4c44:	90 95       	com	r25
    4c46:	28 e8       	ldi	r18, 0x88	; 136
    4c48:	30 e0       	ldi	r19, 0x00	; 0
    4c4a:	28 1b       	sub	r18, r24
    4c4c:	39 0b       	sbc	r19, r25
    4c4e:	22 0f       	add	r18, r18
    4c50:	33 1f       	adc	r19, r19
    4c52:	22 0f       	add	r18, r18
    4c54:	33 1f       	adc	r19, r19
    4c56:	62 17       	cp	r22, r18
    4c58:	73 07       	cpc	r23, r19
    4c5a:	84 f0       	brlt	.+32     	; 0x4c7c <_ZN5Servo17writeMicrosecondsEi+0x50>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
    4c5c:	82 81       	ldd	r24, Z+2	; 0x02
    4c5e:	99 27       	eor	r25, r25
    4c60:	87 fd       	sbrc	r24, 7
    4c62:	90 95       	com	r25
    4c64:	28 e5       	ldi	r18, 0x58	; 88
    4c66:	32 e0       	ldi	r19, 0x02	; 2
    4c68:	28 1b       	sub	r18, r24
    4c6a:	39 0b       	sbc	r19, r25
    4c6c:	22 0f       	add	r18, r18
    4c6e:	33 1f       	adc	r19, r19
    4c70:	22 0f       	add	r18, r18
    4c72:	33 1f       	adc	r19, r19
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
  if( (channel >= 0) && (channel < MAX_SERVOS) )   // ensure channel is valid
  {  
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    4c74:	62 17       	cp	r22, r18
    4c76:	73 07       	cpc	r23, r19
    4c78:	0c f4       	brge	.+2      	; 0x4c7c <_ZN5Servo17writeMicrosecondsEi+0x50>
    4c7a:	9b 01       	movw	r18, r22
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();   
    
  	value = value - TRIM_DURATION;
    4c7c:	22 50       	subi	r18, 0x02	; 2
    4c7e:	30 40       	sbci	r19, 0x00	; 0
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    4c80:	69 01       	movw	r12, r18
    4c82:	ee 24       	eor	r14, r14
    4c84:	d7 fc       	sbrc	r13, 7
    4c86:	e0 94       	com	r14
    4c88:	fe 2c       	mov	r15, r14
    4c8a:	cc 0c       	add	r12, r12
    4c8c:	dd 1c       	adc	r13, r13
    4c8e:	ee 1c       	adc	r14, r14
    4c90:	ff 1c       	adc	r15, r15
    4c92:	8e ef       	ldi	r24, 0xFE	; 254
    4c94:	9f ef       	ldi	r25, 0xFF	; 255
    4c96:	af ef       	ldi	r26, 0xFF	; 255
    4c98:	bf e1       	ldi	r27, 0x1F	; 31
    4c9a:	c8 22       	and	r12, r24
    4c9c:	d9 22       	and	r13, r25
    4c9e:	ea 22       	and	r14, r26
    4ca0:	fb 22       	and	r15, r27

    uint8_t oldSREG = SREG;
    4ca2:	5f b7       	in	r21, 0x3f	; 63
    cli();
    4ca4:	f8 94       	cli
    servos[channel].ticks = value;  
    4ca6:	84 2f       	mov	r24, r20
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	9c 01       	movw	r18, r24
    4cac:	22 0f       	add	r18, r18
    4cae:	33 1f       	adc	r19, r19
    4cb0:	82 0f       	add	r24, r18
    4cb2:	93 1f       	adc	r25, r19
    4cb4:	fc 01       	movw	r30, r24
    4cb6:	e8 5c       	subi	r30, 0xC8	; 200
    4cb8:	f6 4f       	sbci	r31, 0xF6	; 246
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();   
    
  	value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    4cba:	d2 82       	std	Z+2, r13	; 0x02
    4cbc:	c1 82       	std	Z+1, r12	; 0x01

    uint8_t oldSREG = SREG;
    cli();
    servos[channel].ticks = value;  
    SREG = oldSREG;   
    4cbe:	5f bf       	out	0x3f, r21	; 63
  } 
}
    4cc0:	ff 90       	pop	r15
    4cc2:	ef 90       	pop	r14
    4cc4:	df 90       	pop	r13
    4cc6:	cf 90       	pop	r12
    4cc8:	08 95       	ret

00004cca <_ZN5Servo5writeEi>:
    finISR(timer);
  }
}

void Servo::write(int value)
{  
    4cca:	af 92       	push	r10
    4ccc:	bf 92       	push	r11
    4cce:	cf 92       	push	r12
    4cd0:	df 92       	push	r13
    4cd2:	ef 92       	push	r14
    4cd4:	ff 92       	push	r15
    4cd6:	0f 93       	push	r16
    4cd8:	1f 93       	push	r17
    4cda:	cf 93       	push	r28
    4cdc:	df 93       	push	r29
    4cde:	ec 01       	movw	r28, r24
  if(value < MIN_PULSE_WIDTH)
    4ce0:	82 e0       	ldi	r24, 0x02	; 2
    4ce2:	60 32       	cpi	r22, 0x20	; 32
    4ce4:	78 07       	cpc	r23, r24
    4ce6:	0c f0       	brlt	.+2      	; 0x4cea <_ZN5Servo5writeEi+0x20>
    4ce8:	4f c0       	rjmp	.+158    	; 0x4d88 <_ZN5Servo5writeEi+0xbe>
    4cea:	77 23       	and	r23, r23
    4cec:	14 f4       	brge	.+4      	; 0x4cf2 <_ZN5Servo5writeEi+0x28>
    4cee:	60 e0       	ldi	r22, 0x00	; 0
    4cf0:	70 e0       	ldi	r23, 0x00	; 0
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
    4cf2:	00 d0       	rcall	.+0      	; 0x4cf4 <_ZN5Servo5writeEi+0x2a>
    4cf4:	0f 92       	push	r0
    4cf6:	ed b7       	in	r30, 0x3d	; 61
    4cf8:	fe b7       	in	r31, 0x3e	; 62
    4cfa:	31 96       	adiw	r30, 0x01	; 1
    4cfc:	65 3b       	cpi	r22, 0xB5	; 181
    4cfe:	71 05       	cpc	r23, r1
    4d00:	14 f0       	brlt	.+4      	; 0x4d06 <_ZN5Servo5writeEi+0x3c>
    4d02:	64 eb       	ldi	r22, 0xB4	; 180
    4d04:	70 e0       	ldi	r23, 0x00	; 0
    4d06:	cb 01       	movw	r24, r22
    4d08:	ac 01       	movw	r20, r24
    4d0a:	66 27       	eor	r22, r22
    4d0c:	57 fd       	sbrc	r21, 7
    4d0e:	60 95       	com	r22
    4d10:	76 2f       	mov	r23, r22
    4d12:	89 81       	ldd	r24, Y+1	; 0x01
    4d14:	99 27       	eor	r25, r25
    4d16:	87 fd       	sbrc	r24, 7
    4d18:	90 95       	com	r25
    4d1a:	28 e8       	ldi	r18, 0x88	; 136
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
    4d1e:	28 1b       	sub	r18, r24
    4d20:	39 0b       	sbc	r19, r25
    4d22:	59 01       	movw	r10, r18
    4d24:	aa 0c       	add	r10, r10
    4d26:	bb 1c       	adc	r11, r11
    4d28:	aa 0c       	add	r10, r10
    4d2a:	bb 1c       	adc	r11, r11
    4d2c:	cc 24       	eor	r12, r12
    4d2e:	b7 fc       	sbrc	r11, 7
    4d30:	c0 94       	com	r12
    4d32:	dc 2c       	mov	r13, r12
    4d34:	8a 81       	ldd	r24, Y+2	; 0x02
    4d36:	99 27       	eor	r25, r25
    4d38:	87 fd       	sbrc	r24, 7
    4d3a:	90 95       	com	r25
    4d3c:	28 e5       	ldi	r18, 0x58	; 88
    4d3e:	32 e0       	ldi	r19, 0x02	; 2
    4d40:	28 1b       	sub	r18, r24
    4d42:	39 0b       	sbc	r19, r25
    4d44:	c9 01       	movw	r24, r18
    4d46:	88 0f       	add	r24, r24
    4d48:	99 1f       	adc	r25, r25
    4d4a:	88 0f       	add	r24, r24
    4d4c:	99 1f       	adc	r25, r25
    4d4e:	aa 27       	eor	r26, r26
    4d50:	97 fd       	sbrc	r25, 7
    4d52:	a0 95       	com	r26
    4d54:	ba 2f       	mov	r27, r26
    4d56:	80 83       	st	Z, r24
    4d58:	91 83       	std	Z+1, r25	; 0x01
    4d5a:	a2 83       	std	Z+2, r26	; 0x02
    4d5c:	b3 83       	std	Z+3, r27	; 0x03
    4d5e:	cb 01       	movw	r24, r22
    4d60:	ba 01       	movw	r22, r20
    4d62:	20 e0       	ldi	r18, 0x00	; 0
    4d64:	30 e0       	ldi	r19, 0x00	; 0
    4d66:	a9 01       	movw	r20, r18
    4d68:	0f 2e       	mov	r0, r31
    4d6a:	f4 eb       	ldi	r31, 0xB4	; 180
    4d6c:	ef 2e       	mov	r14, r31
    4d6e:	f0 e0       	ldi	r31, 0x00	; 0
    4d70:	ff 2e       	mov	r15, r31
    4d72:	f0 e0       	ldi	r31, 0x00	; 0
    4d74:	0f 2f       	mov	r16, r31
    4d76:	f0 e0       	ldi	r31, 0x00	; 0
    4d78:	1f 2f       	mov	r17, r31
    4d7a:	f0 2d       	mov	r31, r0
    4d7c:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_Z3maplllll>
    4d80:	0f 90       	pop	r0
    4d82:	0f 90       	pop	r0
    4d84:	0f 90       	pop	r0
    4d86:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
    4d88:	ce 01       	movw	r24, r28
    4d8a:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <_ZN5Servo17writeMicrosecondsEi>
}
    4d8e:	df 91       	pop	r29
    4d90:	cf 91       	pop	r28
    4d92:	1f 91       	pop	r17
    4d94:	0f 91       	pop	r16
    4d96:	ff 90       	pop	r15
    4d98:	ef 90       	pop	r14
    4d9a:	df 90       	pop	r13
    4d9c:	cf 90       	pop	r12
    4d9e:	bf 90       	pop	r11
    4da0:	af 90       	pop	r10
    4da2:	08 95       	ret

00004da4 <_ZN5Servo16readMicrosecondsEv>:
}

int Servo::readMicroseconds()
{
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    4da4:	fc 01       	movw	r30, r24
    4da6:	80 81       	ld	r24, Z
    4da8:	8f 3f       	cpi	r24, 0xFF	; 255
    4daa:	c9 f0       	breq	.+50     	; 0x4dde <_ZN5Servo16readMicrosecondsEv+0x3a>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	fc 01       	movw	r30, r24
    4db0:	ee 0f       	add	r30, r30
    4db2:	ff 1f       	adc	r31, r31
    4db4:	8e 0f       	add	r24, r30
    4db6:	9f 1f       	adc	r25, r31
    4db8:	fc 01       	movw	r30, r24
    4dba:	e8 5c       	subi	r30, 0xC8	; 200
    4dbc:	f6 4f       	sbci	r31, 0xF6	; 246
    4dbe:	81 81       	ldd	r24, Z+1	; 0x01
    4dc0:	92 81       	ldd	r25, Z+2	; 0x02
    4dc2:	88 0f       	add	r24, r24
    4dc4:	99 1f       	adc	r25, r25
    4dc6:	88 0f       	add	r24, r24
    4dc8:	99 1f       	adc	r25, r25
    4dca:	88 0f       	add	r24, r24
    4dcc:	99 1f       	adc	r25, r25
    4dce:	92 95       	swap	r25
    4dd0:	82 95       	swap	r24
    4dd2:	8f 70       	andi	r24, 0x0F	; 15
    4dd4:	89 27       	eor	r24, r25
    4dd6:	9f 70       	andi	r25, 0x0F	; 15
    4dd8:	89 27       	eor	r24, r25
    4dda:	02 96       	adiw	r24, 0x02	; 2
    4ddc:	08 95       	ret
  else 
    pulsewidth  = 0;
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	90 e0       	ldi	r25, 0x00	; 0

  return pulsewidth;   
}
    4de2:	08 95       	ret

00004de4 <_ZN5Servo4readEv>:
    SREG = oldSREG;   
  } 
}

int Servo::read() // return the value as degrees
{
    4de4:	8f 92       	push	r8
    4de6:	9f 92       	push	r9
    4de8:	af 92       	push	r10
    4dea:	bf 92       	push	r11
    4dec:	cf 92       	push	r12
    4dee:	df 92       	push	r13
    4df0:	ef 92       	push	r14
    4df2:	ff 92       	push	r15
    4df4:	0f 93       	push	r16
    4df6:	1f 93       	push	r17
    4df8:	cf 93       	push	r28
    4dfa:	df 93       	push	r29
    4dfc:	ec 01       	movw	r28, r24
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);     
    4dfe:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <_ZN5Servo16readMicrosecondsEv>
    4e02:	00 d0       	rcall	.+0      	; 0x4e04 <_ZN5Servo4readEv+0x20>
    4e04:	0f 92       	push	r0
    4e06:	ac 01       	movw	r20, r24
    4e08:	4f 5f       	subi	r20, 0xFF	; 255
    4e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    4e0c:	66 27       	eor	r22, r22
    4e0e:	57 fd       	sbrc	r21, 7
    4e10:	60 95       	com	r22
    4e12:	76 2f       	mov	r23, r22
    4e14:	89 81       	ldd	r24, Y+1	; 0x01
    4e16:	99 27       	eor	r25, r25
    4e18:	87 fd       	sbrc	r24, 7
    4e1a:	90 95       	com	r25
    4e1c:	0f 2e       	mov	r0, r31
    4e1e:	f8 e8       	ldi	r31, 0x88	; 136
    4e20:	8f 2e       	mov	r8, r31
    4e22:	99 24       	eor	r9, r9
    4e24:	f0 2d       	mov	r31, r0
    4e26:	88 1a       	sub	r8, r24
    4e28:	99 0a       	sbc	r9, r25
    4e2a:	88 0c       	add	r8, r8
    4e2c:	99 1c       	adc	r9, r9
    4e2e:	88 0c       	add	r8, r8
    4e30:	99 1c       	adc	r9, r9
    4e32:	aa 24       	eor	r10, r10
    4e34:	97 fc       	sbrc	r9, 7
    4e36:	a0 94       	com	r10
    4e38:	ba 2c       	mov	r11, r10
    4e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e3c:	99 27       	eor	r25, r25
    4e3e:	87 fd       	sbrc	r24, 7
    4e40:	90 95       	com	r25
    4e42:	28 e5       	ldi	r18, 0x58	; 88
    4e44:	32 e0       	ldi	r19, 0x02	; 2
    4e46:	28 1b       	sub	r18, r24
    4e48:	39 0b       	sbc	r19, r25
    4e4a:	79 01       	movw	r14, r18
    4e4c:	ee 0c       	add	r14, r14
    4e4e:	ff 1c       	adc	r15, r15
    4e50:	ee 0c       	add	r14, r14
    4e52:	ff 1c       	adc	r15, r15
    4e54:	00 27       	eor	r16, r16
    4e56:	f7 fc       	sbrc	r15, 7
    4e58:	00 95       	com	r16
    4e5a:	10 2f       	mov	r17, r16
    4e5c:	84 eb       	ldi	r24, 0xB4	; 180
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	a0 e0       	ldi	r26, 0x00	; 0
    4e62:	b0 e0       	ldi	r27, 0x00	; 0
    4e64:	ed b7       	in	r30, 0x3d	; 61
    4e66:	fe b7       	in	r31, 0x3e	; 62
    4e68:	81 83       	std	Z+1, r24	; 0x01
    4e6a:	92 83       	std	Z+2, r25	; 0x02
    4e6c:	a3 83       	std	Z+3, r26	; 0x03
    4e6e:	b4 83       	std	Z+4, r27	; 0x04
    4e70:	cb 01       	movw	r24, r22
    4e72:	ba 01       	movw	r22, r20
    4e74:	a5 01       	movw	r20, r10
    4e76:	94 01       	movw	r18, r8
    4e78:	aa 24       	eor	r10, r10
    4e7a:	bb 24       	eor	r11, r11
    4e7c:	65 01       	movw	r12, r10
    4e7e:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_Z3maplllll>
    4e82:	0f 90       	pop	r0
    4e84:	0f 90       	pop	r0
    4e86:	0f 90       	pop	r0
    4e88:	0f 90       	pop	r0
}
    4e8a:	86 2f       	mov	r24, r22
    4e8c:	97 2f       	mov	r25, r23
    4e8e:	df 91       	pop	r29
    4e90:	cf 91       	pop	r28
    4e92:	1f 91       	pop	r17
    4e94:	0f 91       	pop	r16
    4e96:	ff 90       	pop	r15
    4e98:	ef 90       	pop	r14
    4e9a:	df 90       	pop	r13
    4e9c:	cf 90       	pop	r12
    4e9e:	bf 90       	pop	r11
    4ea0:	af 90       	pop	r10
    4ea2:	9f 90       	pop	r9
    4ea4:	8f 90       	pop	r8
    4ea6:	08 95       	ret

00004ea8 <_ZN5Servo8attachedEv>:
  return pulsewidth;   
}

bool Servo::attached()
{
  return servos[this->servoIndex].Pin.isActive ;
    4ea8:	fc 01       	movw	r30, r24
    4eaa:	80 81       	ld	r24, Z
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	fc 01       	movw	r30, r24
    4eb0:	ee 0f       	add	r30, r30
    4eb2:	ff 1f       	adc	r31, r31
    4eb4:	8e 0f       	add	r24, r30
    4eb6:	9f 1f       	adc	r25, r31
    4eb8:	fc 01       	movw	r30, r24
    4eba:	e8 5c       	subi	r30, 0xC8	; 200
    4ebc:	f6 4f       	sbci	r31, 0xF6	; 246
    4ebe:	90 81       	ld	r25, Z
    4ec0:	81 e0       	ldi	r24, 0x01	; 1
    4ec2:	96 ff       	sbrs	r25, 6
    4ec4:	80 e0       	ldi	r24, 0x00	; 0
}
    4ec6:	08 95       	ret

00004ec8 <_ZN8SPIClass5beginEv>:
  // MISO pin automatically overrides to INPUT.
  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).

  pinMode(SCK, OUTPUT);
    4ec8:	84 e3       	ldi	r24, 0x34	; 52
    4eca:	61 e0       	ldi	r22, 0x01	; 1
    4ecc:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <pinMode>
  pinMode(MOSI, OUTPUT);
    4ed0:	83 e3       	ldi	r24, 0x33	; 51
    4ed2:	61 e0       	ldi	r22, 0x01	; 1
    4ed4:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <pinMode>
  pinMode(SS, OUTPUT);
    4ed8:	85 e3       	ldi	r24, 0x35	; 53
    4eda:	61 e0       	ldi	r22, 0x01	; 1
    4edc:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <pinMode>
  
  digitalWrite(SCK, LOW);
    4ee0:	84 e3       	ldi	r24, 0x34	; 52
    4ee2:	60 e0       	ldi	r22, 0x00	; 0
    4ee4:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
  digitalWrite(MOSI, LOW);
    4ee8:	83 e3       	ldi	r24, 0x33	; 51
    4eea:	60 e0       	ldi	r22, 0x00	; 0
    4eec:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
  digitalWrite(SS, HIGH);
    4ef0:	85 e3       	ldi	r24, 0x35	; 53
    4ef2:	61 e0       	ldi	r22, 0x01	; 1
    4ef4:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
    4ef8:	8c b5       	in	r24, 0x2c	; 44
    4efa:	80 61       	ori	r24, 0x10	; 16
    4efc:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
    4efe:	8c b5       	in	r24, 0x2c	; 44
    4f00:	80 64       	ori	r24, 0x40	; 64
    4f02:	8c bd       	out	0x2c, r24	; 44
}
    4f04:	08 95       	ret

00004f06 <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  SPCR &= ~_BV(SPE);
    4f06:	8c b5       	in	r24, 0x2c	; 44
    4f08:	8f 7b       	andi	r24, 0xBF	; 191
    4f0a:	8c bd       	out	0x2c, r24	; 44
}
    4f0c:	08 95       	ret

00004f0e <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    4f0e:	88 23       	and	r24, r24
    4f10:	21 f4       	brne	.+8      	; 0x4f1a <_ZN8SPIClass11setBitOrderEh+0xc>
    SPCR |= _BV(DORD);
    4f12:	8c b5       	in	r24, 0x2c	; 44
    4f14:	80 62       	ori	r24, 0x20	; 32
    4f16:	8c bd       	out	0x2c, r24	; 44
    4f18:	08 95       	ret
  } else {
    SPCR &= ~(_BV(DORD));
    4f1a:	8c b5       	in	r24, 0x2c	; 44
    4f1c:	8f 7d       	andi	r24, 0xDF	; 223
    4f1e:	8c bd       	out	0x2c, r24	; 44
    4f20:	08 95       	ret

00004f22 <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    4f22:	9c b5       	in	r25, 0x2c	; 44
    4f24:	93 7f       	andi	r25, 0xF3	; 243
    4f26:	89 2b       	or	r24, r25
    4f28:	8c bd       	out	0x2c, r24	; 44
}
    4f2a:	08 95       	ret

00004f2c <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    4f2c:	9c b5       	in	r25, 0x2c	; 44
    4f2e:	28 2f       	mov	r18, r24
    4f30:	23 70       	andi	r18, 0x03	; 3
    4f32:	9c 7f       	andi	r25, 0xFC	; 252
    4f34:	92 2b       	or	r25, r18
    4f36:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    4f38:	2d b5       	in	r18, 0x2d	; 45
    4f3a:	90 e0       	ldi	r25, 0x00	; 0
    4f3c:	95 95       	asr	r25
    4f3e:	87 95       	ror	r24
    4f40:	95 95       	asr	r25
    4f42:	87 95       	ror	r24
    4f44:	81 70       	andi	r24, 0x01	; 1
    4f46:	92 2f       	mov	r25, r18
    4f48:	9e 7f       	andi	r25, 0xFE	; 254
    4f4a:	89 2b       	or	r24, r25
    4f4c:	8d bd       	out	0x2d, r24	; 45
}
    4f4e:	08 95       	ret

00004f50 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    4f50:	88 30       	cpi	r24, 0x08	; 8
    4f52:	08 f0       	brcs	.+2      	; 0x4f56 <attachInterrupt+0x6>
    4f54:	76 c0       	rjmp	.+236    	; 0x5042 <attachInterrupt+0xf2>
    intFunc[interruptNum] = userFunc;
    4f56:	e8 2f       	mov	r30, r24
    4f58:	f0 e0       	ldi	r31, 0x00	; 0
    4f5a:	ee 0f       	add	r30, r30
    4f5c:	ff 1f       	adc	r31, r31
    4f5e:	e7 53       	subi	r30, 0x37	; 55
    4f60:	f6 4f       	sbci	r31, 0xF6	; 246
    4f62:	71 83       	std	Z+1, r23	; 0x01
    4f64:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    4f66:	84 30       	cpi	r24, 0x04	; 4
    4f68:	29 f1       	breq	.+74     	; 0x4fb4 <attachInterrupt+0x64>
    4f6a:	85 30       	cpi	r24, 0x05	; 5
    4f6c:	38 f4       	brcc	.+14     	; 0x4f7c <attachInterrupt+0x2c>
    4f6e:	82 30       	cpi	r24, 0x02	; 2
    4f70:	69 f0       	breq	.+26     	; 0x4f8c <attachInterrupt+0x3c>
    4f72:	83 30       	cpi	r24, 0x03	; 3
    4f74:	98 f4       	brcc	.+38     	; 0x4f9c <attachInterrupt+0x4c>
    4f76:	81 30       	cpi	r24, 0x01	; 1
    4f78:	b9 f5       	brne	.+110    	; 0x4fe8 <attachInterrupt+0x98>
    4f7a:	3e c0       	rjmp	.+124    	; 0x4ff8 <attachInterrupt+0xa8>
    4f7c:	86 30       	cpi	r24, 0x06	; 6
    4f7e:	09 f4       	brne	.+2      	; 0x4f82 <attachInterrupt+0x32>
    4f80:	47 c0       	rjmp	.+142    	; 0x5010 <attachInterrupt+0xc0>
    4f82:	86 30       	cpi	r24, 0x06	; 6
    4f84:	20 f1       	brcs	.+72     	; 0x4fce <attachInterrupt+0x7e>
    4f86:	87 30       	cpi	r24, 0x07	; 7
    4f88:	79 f5       	brne	.+94     	; 0x4fe8 <attachInterrupt+0x98>
    4f8a:	4f c0       	rjmp	.+158    	; 0x502a <attachInterrupt+0xda>
		EICRA = (EICRA & ~((1<<ISC10) | (1<<ISC11))) | (mode << ISC10);
		EIMSK |= (1<<INT1);
		break;	
#elif defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    4f8c:	80 91 69 00 	lds	r24, 0x0069
    4f90:	8c 7f       	andi	r24, 0xFC	; 252
    4f92:	84 2b       	or	r24, r20
    4f94:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    4f98:	e8 9a       	sbi	0x1d, 0	; 29
      break;
    4f9a:	08 95       	ret
    case 3:
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    4f9c:	80 91 69 00 	lds	r24, 0x0069
    4fa0:	44 0f       	add	r20, r20
    4fa2:	55 1f       	adc	r21, r21
    4fa4:	44 0f       	add	r20, r20
    4fa6:	55 1f       	adc	r21, r21
    4fa8:	83 7f       	andi	r24, 0xF3	; 243
    4faa:	84 2b       	or	r24, r20
    4fac:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    4fb0:	e9 9a       	sbi	0x1d, 1	; 29
      break;
    4fb2:	08 95       	ret
    case 4:
      EICRA = (EICRA & ~((1 << ISC20) | (1 << ISC21))) | (mode << ISC20);
    4fb4:	80 91 69 00 	lds	r24, 0x0069
    4fb8:	74 e0       	ldi	r23, 0x04	; 4
    4fba:	44 0f       	add	r20, r20
    4fbc:	55 1f       	adc	r21, r21
    4fbe:	7a 95       	dec	r23
    4fc0:	e1 f7       	brne	.-8      	; 0x4fba <attachInterrupt+0x6a>
    4fc2:	8f 7c       	andi	r24, 0xCF	; 207
    4fc4:	84 2b       	or	r24, r20
    4fc6:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT2);
    4fca:	ea 9a       	sbi	0x1d, 2	; 29
      break;
    4fcc:	08 95       	ret
    case 5:
      EICRA = (EICRA & ~((1 << ISC30) | (1 << ISC31))) | (mode << ISC30);
    4fce:	80 91 69 00 	lds	r24, 0x0069
    4fd2:	66 e0       	ldi	r22, 0x06	; 6
    4fd4:	44 0f       	add	r20, r20
    4fd6:	55 1f       	adc	r21, r21
    4fd8:	6a 95       	dec	r22
    4fda:	e1 f7       	brne	.-8      	; 0x4fd4 <attachInterrupt+0x84>
    4fdc:	8f 73       	andi	r24, 0x3F	; 63
    4fde:	84 2b       	or	r24, r20
    4fe0:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT3);
    4fe4:	eb 9a       	sbi	0x1d, 3	; 29
      break;
    4fe6:	08 95       	ret
    case 0:
      EICRB = (EICRB & ~((1 << ISC40) | (1 << ISC41))) | (mode << ISC40);
    4fe8:	80 91 6a 00 	lds	r24, 0x006A
    4fec:	8c 7f       	andi	r24, 0xFC	; 252
    4fee:	84 2b       	or	r24, r20
    4ff0:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT4);
    4ff4:	ec 9a       	sbi	0x1d, 4	; 29
      break;
    4ff6:	08 95       	ret
    case 1:
      EICRB = (EICRB & ~((1 << ISC50) | (1 << ISC51))) | (mode << ISC50);
    4ff8:	80 91 6a 00 	lds	r24, 0x006A
    4ffc:	44 0f       	add	r20, r20
    4ffe:	55 1f       	adc	r21, r21
    5000:	44 0f       	add	r20, r20
    5002:	55 1f       	adc	r21, r21
    5004:	83 7f       	andi	r24, 0xF3	; 243
    5006:	84 2b       	or	r24, r20
    5008:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT5);
    500c:	ed 9a       	sbi	0x1d, 5	; 29
      break;
    500e:	08 95       	ret
    case 6:
      EICRB = (EICRB & ~((1 << ISC60) | (1 << ISC61))) | (mode << ISC60);
    5010:	80 91 6a 00 	lds	r24, 0x006A
    5014:	24 e0       	ldi	r18, 0x04	; 4
    5016:	44 0f       	add	r20, r20
    5018:	55 1f       	adc	r21, r21
    501a:	2a 95       	dec	r18
    501c:	e1 f7       	brne	.-8      	; 0x5016 <attachInterrupt+0xc6>
    501e:	8f 7c       	andi	r24, 0xCF	; 207
    5020:	84 2b       	or	r24, r20
    5022:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT6);
    5026:	ee 9a       	sbi	0x1d, 6	; 29
      break;
    5028:	08 95       	ret
    case 7:
      EICRB = (EICRB & ~((1 << ISC70) | (1 << ISC71))) | (mode << ISC70);
    502a:	80 91 6a 00 	lds	r24, 0x006A
    502e:	96 e0       	ldi	r25, 0x06	; 6
    5030:	44 0f       	add	r20, r20
    5032:	55 1f       	adc	r21, r21
    5034:	9a 95       	dec	r25
    5036:	e1 f7       	brne	.-8      	; 0x5030 <attachInterrupt+0xe0>
    5038:	8f 73       	andi	r24, 0x3F	; 63
    503a:	84 2b       	or	r24, r20
    503c:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT7);
    5040:	ef 9a       	sbi	0x1d, 7	; 29
    5042:	08 95       	ret

00005044 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    5044:	88 30       	cpi	r24, 0x08	; 8
    5046:	48 f5       	brcc	.+82     	; 0x509a <detachInterrupt+0x56>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    5048:	84 30       	cpi	r24, 0x04	; 4
    504a:	a1 f0       	breq	.+40     	; 0x5074 <detachInterrupt+0x30>
    504c:	85 30       	cpi	r24, 0x05	; 5
    504e:	38 f4       	brcc	.+14     	; 0x505e <detachInterrupt+0x1a>
    5050:	82 30       	cpi	r24, 0x02	; 2
    5052:	61 f0       	breq	.+24     	; 0x506c <detachInterrupt+0x28>
    5054:	83 30       	cpi	r24, 0x03	; 3
    5056:	60 f4       	brcc	.+24     	; 0x5070 <detachInterrupt+0x2c>
    5058:	81 30       	cpi	r24, 0x01	; 1
    505a:	81 f4       	brne	.+32     	; 0x507c <detachInterrupt+0x38>
    505c:	11 c0       	rjmp	.+34     	; 0x5080 <detachInterrupt+0x3c>
    505e:	86 30       	cpi	r24, 0x06	; 6
    5060:	89 f0       	breq	.+34     	; 0x5084 <detachInterrupt+0x40>
    5062:	86 30       	cpi	r24, 0x06	; 6
    5064:	48 f0       	brcs	.+18     	; 0x5078 <detachInterrupt+0x34>
    5066:	87 30       	cpi	r24, 0x07	; 7
    5068:	49 f4       	brne	.+18     	; 0x507c <detachInterrupt+0x38>
    506a:	0e c0       	rjmp	.+28     	; 0x5088 <detachInterrupt+0x44>
	case 1:
		EIMSK &= ~(1<<INT1);
		break;		
#elif defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EIMSK &= ~(1 << INT0);
    506c:	e8 98       	cbi	0x1d, 0	; 29
      break;
    506e:	0d c0       	rjmp	.+26     	; 0x508a <detachInterrupt+0x46>
    case 3:
      EIMSK &= ~(1 << INT1);
    5070:	e9 98       	cbi	0x1d, 1	; 29
      break;
    5072:	0b c0       	rjmp	.+22     	; 0x508a <detachInterrupt+0x46>
    case 4:
      EIMSK &= ~(1 << INT2);
    5074:	ea 98       	cbi	0x1d, 2	; 29
      break;
    5076:	09 c0       	rjmp	.+18     	; 0x508a <detachInterrupt+0x46>
    case 5:
      EIMSK &= ~(1 << INT3);
    5078:	eb 98       	cbi	0x1d, 3	; 29
      break;
    507a:	07 c0       	rjmp	.+14     	; 0x508a <detachInterrupt+0x46>
    case 0:
      EIMSK &= ~(1 << INT4);
    507c:	ec 98       	cbi	0x1d, 4	; 29
      break;
    507e:	05 c0       	rjmp	.+10     	; 0x508a <detachInterrupt+0x46>
    case 1:
      EIMSK &= ~(1 << INT5);
    5080:	ed 98       	cbi	0x1d, 5	; 29
      break;
    5082:	03 c0       	rjmp	.+6      	; 0x508a <detachInterrupt+0x46>
    case 6:
      EIMSK &= ~(1 << INT6);
    5084:	ee 98       	cbi	0x1d, 6	; 29
      break;
    5086:	01 c0       	rjmp	.+2      	; 0x508a <detachInterrupt+0x46>
    case 7:
      EIMSK &= ~(1 << INT7);
    5088:	ef 98       	cbi	0x1d, 7	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    508a:	e8 2f       	mov	r30, r24
    508c:	f0 e0       	ldi	r31, 0x00	; 0
    508e:	ee 0f       	add	r30, r30
    5090:	ff 1f       	adc	r31, r31
    5092:	e7 53       	subi	r30, 0x37	; 55
    5094:	f6 4f       	sbci	r31, 0xF6	; 246
    5096:	11 82       	std	Z+1, r1	; 0x01
    5098:	10 82       	st	Z, r1
    509a:	08 95       	ret

0000509c <__vector_1>:
		intFunc[EXTERNAL_INT_1]();
}

#elif defined(EICRA) && defined(EICRB)

SIGNAL(INT0_vect) {
    509c:	1f 92       	push	r1
    509e:	0f 92       	push	r0
    50a0:	0f b6       	in	r0, 0x3f	; 63
    50a2:	0f 92       	push	r0
    50a4:	0b b6       	in	r0, 0x3b	; 59
    50a6:	0f 92       	push	r0
    50a8:	11 24       	eor	r1, r1
    50aa:	2f 93       	push	r18
    50ac:	3f 93       	push	r19
    50ae:	4f 93       	push	r20
    50b0:	5f 93       	push	r21
    50b2:	6f 93       	push	r22
    50b4:	7f 93       	push	r23
    50b6:	8f 93       	push	r24
    50b8:	9f 93       	push	r25
    50ba:	af 93       	push	r26
    50bc:	bf 93       	push	r27
    50be:	ef 93       	push	r30
    50c0:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    50c2:	80 91 cd 09 	lds	r24, 0x09CD
    50c6:	90 91 ce 09 	lds	r25, 0x09CE
    50ca:	00 97       	sbiw	r24, 0x00	; 0
    50cc:	29 f0       	breq	.+10     	; 0x50d8 <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    50ce:	e0 91 cd 09 	lds	r30, 0x09CD
    50d2:	f0 91 ce 09 	lds	r31, 0x09CE
    50d6:	19 95       	eicall
}
    50d8:	ff 91       	pop	r31
    50da:	ef 91       	pop	r30
    50dc:	bf 91       	pop	r27
    50de:	af 91       	pop	r26
    50e0:	9f 91       	pop	r25
    50e2:	8f 91       	pop	r24
    50e4:	7f 91       	pop	r23
    50e6:	6f 91       	pop	r22
    50e8:	5f 91       	pop	r21
    50ea:	4f 91       	pop	r20
    50ec:	3f 91       	pop	r19
    50ee:	2f 91       	pop	r18
    50f0:	0f 90       	pop	r0
    50f2:	0b be       	out	0x3b, r0	; 59
    50f4:	0f 90       	pop	r0
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	0f 90       	pop	r0
    50fa:	1f 90       	pop	r1
    50fc:	18 95       	reti

000050fe <__vector_2>:

SIGNAL(INT1_vect) {
    50fe:	1f 92       	push	r1
    5100:	0f 92       	push	r0
    5102:	0f b6       	in	r0, 0x3f	; 63
    5104:	0f 92       	push	r0
    5106:	0b b6       	in	r0, 0x3b	; 59
    5108:	0f 92       	push	r0
    510a:	11 24       	eor	r1, r1
    510c:	2f 93       	push	r18
    510e:	3f 93       	push	r19
    5110:	4f 93       	push	r20
    5112:	5f 93       	push	r21
    5114:	6f 93       	push	r22
    5116:	7f 93       	push	r23
    5118:	8f 93       	push	r24
    511a:	9f 93       	push	r25
    511c:	af 93       	push	r26
    511e:	bf 93       	push	r27
    5120:	ef 93       	push	r30
    5122:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    5124:	80 91 cf 09 	lds	r24, 0x09CF
    5128:	90 91 d0 09 	lds	r25, 0x09D0
    512c:	00 97       	sbiw	r24, 0x00	; 0
    512e:	29 f0       	breq	.+10     	; 0x513a <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    5130:	e0 91 cf 09 	lds	r30, 0x09CF
    5134:	f0 91 d0 09 	lds	r31, 0x09D0
    5138:	19 95       	eicall
}
    513a:	ff 91       	pop	r31
    513c:	ef 91       	pop	r30
    513e:	bf 91       	pop	r27
    5140:	af 91       	pop	r26
    5142:	9f 91       	pop	r25
    5144:	8f 91       	pop	r24
    5146:	7f 91       	pop	r23
    5148:	6f 91       	pop	r22
    514a:	5f 91       	pop	r21
    514c:	4f 91       	pop	r20
    514e:	3f 91       	pop	r19
    5150:	2f 91       	pop	r18
    5152:	0f 90       	pop	r0
    5154:	0b be       	out	0x3b, r0	; 59
    5156:	0f 90       	pop	r0
    5158:	0f be       	out	0x3f, r0	; 63
    515a:	0f 90       	pop	r0
    515c:	1f 90       	pop	r1
    515e:	18 95       	reti

00005160 <__vector_3>:

SIGNAL(INT2_vect) {
    5160:	1f 92       	push	r1
    5162:	0f 92       	push	r0
    5164:	0f b6       	in	r0, 0x3f	; 63
    5166:	0f 92       	push	r0
    5168:	0b b6       	in	r0, 0x3b	; 59
    516a:	0f 92       	push	r0
    516c:	11 24       	eor	r1, r1
    516e:	2f 93       	push	r18
    5170:	3f 93       	push	r19
    5172:	4f 93       	push	r20
    5174:	5f 93       	push	r21
    5176:	6f 93       	push	r22
    5178:	7f 93       	push	r23
    517a:	8f 93       	push	r24
    517c:	9f 93       	push	r25
    517e:	af 93       	push	r26
    5180:	bf 93       	push	r27
    5182:	ef 93       	push	r30
    5184:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    5186:	80 91 d1 09 	lds	r24, 0x09D1
    518a:	90 91 d2 09 	lds	r25, 0x09D2
    518e:	00 97       	sbiw	r24, 0x00	; 0
    5190:	29 f0       	breq	.+10     	; 0x519c <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    5192:	e0 91 d1 09 	lds	r30, 0x09D1
    5196:	f0 91 d2 09 	lds	r31, 0x09D2
    519a:	19 95       	eicall
}
    519c:	ff 91       	pop	r31
    519e:	ef 91       	pop	r30
    51a0:	bf 91       	pop	r27
    51a2:	af 91       	pop	r26
    51a4:	9f 91       	pop	r25
    51a6:	8f 91       	pop	r24
    51a8:	7f 91       	pop	r23
    51aa:	6f 91       	pop	r22
    51ac:	5f 91       	pop	r21
    51ae:	4f 91       	pop	r20
    51b0:	3f 91       	pop	r19
    51b2:	2f 91       	pop	r18
    51b4:	0f 90       	pop	r0
    51b6:	0b be       	out	0x3b, r0	; 59
    51b8:	0f 90       	pop	r0
    51ba:	0f be       	out	0x3f, r0	; 63
    51bc:	0f 90       	pop	r0
    51be:	1f 90       	pop	r1
    51c0:	18 95       	reti

000051c2 <__vector_4>:

SIGNAL(INT3_vect) {
    51c2:	1f 92       	push	r1
    51c4:	0f 92       	push	r0
    51c6:	0f b6       	in	r0, 0x3f	; 63
    51c8:	0f 92       	push	r0
    51ca:	0b b6       	in	r0, 0x3b	; 59
    51cc:	0f 92       	push	r0
    51ce:	11 24       	eor	r1, r1
    51d0:	2f 93       	push	r18
    51d2:	3f 93       	push	r19
    51d4:	4f 93       	push	r20
    51d6:	5f 93       	push	r21
    51d8:	6f 93       	push	r22
    51da:	7f 93       	push	r23
    51dc:	8f 93       	push	r24
    51de:	9f 93       	push	r25
    51e0:	af 93       	push	r26
    51e2:	bf 93       	push	r27
    51e4:	ef 93       	push	r30
    51e6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    51e8:	80 91 d3 09 	lds	r24, 0x09D3
    51ec:	90 91 d4 09 	lds	r25, 0x09D4
    51f0:	00 97       	sbiw	r24, 0x00	; 0
    51f2:	29 f0       	breq	.+10     	; 0x51fe <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    51f4:	e0 91 d3 09 	lds	r30, 0x09D3
    51f8:	f0 91 d4 09 	lds	r31, 0x09D4
    51fc:	19 95       	eicall
}
    51fe:	ff 91       	pop	r31
    5200:	ef 91       	pop	r30
    5202:	bf 91       	pop	r27
    5204:	af 91       	pop	r26
    5206:	9f 91       	pop	r25
    5208:	8f 91       	pop	r24
    520a:	7f 91       	pop	r23
    520c:	6f 91       	pop	r22
    520e:	5f 91       	pop	r21
    5210:	4f 91       	pop	r20
    5212:	3f 91       	pop	r19
    5214:	2f 91       	pop	r18
    5216:	0f 90       	pop	r0
    5218:	0b be       	out	0x3b, r0	; 59
    521a:	0f 90       	pop	r0
    521c:	0f be       	out	0x3f, r0	; 63
    521e:	0f 90       	pop	r0
    5220:	1f 90       	pop	r1
    5222:	18 95       	reti

00005224 <__vector_5>:

SIGNAL(INT4_vect) {
    5224:	1f 92       	push	r1
    5226:	0f 92       	push	r0
    5228:	0f b6       	in	r0, 0x3f	; 63
    522a:	0f 92       	push	r0
    522c:	0b b6       	in	r0, 0x3b	; 59
    522e:	0f 92       	push	r0
    5230:	11 24       	eor	r1, r1
    5232:	2f 93       	push	r18
    5234:	3f 93       	push	r19
    5236:	4f 93       	push	r20
    5238:	5f 93       	push	r21
    523a:	6f 93       	push	r22
    523c:	7f 93       	push	r23
    523e:	8f 93       	push	r24
    5240:	9f 93       	push	r25
    5242:	af 93       	push	r26
    5244:	bf 93       	push	r27
    5246:	ef 93       	push	r30
    5248:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    524a:	80 91 c9 09 	lds	r24, 0x09C9
    524e:	90 91 ca 09 	lds	r25, 0x09CA
    5252:	00 97       	sbiw	r24, 0x00	; 0
    5254:	29 f0       	breq	.+10     	; 0x5260 <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    5256:	e0 91 c9 09 	lds	r30, 0x09C9
    525a:	f0 91 ca 09 	lds	r31, 0x09CA
    525e:	19 95       	eicall
}
    5260:	ff 91       	pop	r31
    5262:	ef 91       	pop	r30
    5264:	bf 91       	pop	r27
    5266:	af 91       	pop	r26
    5268:	9f 91       	pop	r25
    526a:	8f 91       	pop	r24
    526c:	7f 91       	pop	r23
    526e:	6f 91       	pop	r22
    5270:	5f 91       	pop	r21
    5272:	4f 91       	pop	r20
    5274:	3f 91       	pop	r19
    5276:	2f 91       	pop	r18
    5278:	0f 90       	pop	r0
    527a:	0b be       	out	0x3b, r0	; 59
    527c:	0f 90       	pop	r0
    527e:	0f be       	out	0x3f, r0	; 63
    5280:	0f 90       	pop	r0
    5282:	1f 90       	pop	r1
    5284:	18 95       	reti

00005286 <__vector_6>:

SIGNAL(INT5_vect) {
    5286:	1f 92       	push	r1
    5288:	0f 92       	push	r0
    528a:	0f b6       	in	r0, 0x3f	; 63
    528c:	0f 92       	push	r0
    528e:	0b b6       	in	r0, 0x3b	; 59
    5290:	0f 92       	push	r0
    5292:	11 24       	eor	r1, r1
    5294:	2f 93       	push	r18
    5296:	3f 93       	push	r19
    5298:	4f 93       	push	r20
    529a:	5f 93       	push	r21
    529c:	6f 93       	push	r22
    529e:	7f 93       	push	r23
    52a0:	8f 93       	push	r24
    52a2:	9f 93       	push	r25
    52a4:	af 93       	push	r26
    52a6:	bf 93       	push	r27
    52a8:	ef 93       	push	r30
    52aa:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    52ac:	80 91 cb 09 	lds	r24, 0x09CB
    52b0:	90 91 cc 09 	lds	r25, 0x09CC
    52b4:	00 97       	sbiw	r24, 0x00	; 0
    52b6:	29 f0       	breq	.+10     	; 0x52c2 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    52b8:	e0 91 cb 09 	lds	r30, 0x09CB
    52bc:	f0 91 cc 09 	lds	r31, 0x09CC
    52c0:	19 95       	eicall
}
    52c2:	ff 91       	pop	r31
    52c4:	ef 91       	pop	r30
    52c6:	bf 91       	pop	r27
    52c8:	af 91       	pop	r26
    52ca:	9f 91       	pop	r25
    52cc:	8f 91       	pop	r24
    52ce:	7f 91       	pop	r23
    52d0:	6f 91       	pop	r22
    52d2:	5f 91       	pop	r21
    52d4:	4f 91       	pop	r20
    52d6:	3f 91       	pop	r19
    52d8:	2f 91       	pop	r18
    52da:	0f 90       	pop	r0
    52dc:	0b be       	out	0x3b, r0	; 59
    52de:	0f 90       	pop	r0
    52e0:	0f be       	out	0x3f, r0	; 63
    52e2:	0f 90       	pop	r0
    52e4:	1f 90       	pop	r1
    52e6:	18 95       	reti

000052e8 <__vector_7>:

SIGNAL(INT6_vect) {
    52e8:	1f 92       	push	r1
    52ea:	0f 92       	push	r0
    52ec:	0f b6       	in	r0, 0x3f	; 63
    52ee:	0f 92       	push	r0
    52f0:	0b b6       	in	r0, 0x3b	; 59
    52f2:	0f 92       	push	r0
    52f4:	11 24       	eor	r1, r1
    52f6:	2f 93       	push	r18
    52f8:	3f 93       	push	r19
    52fa:	4f 93       	push	r20
    52fc:	5f 93       	push	r21
    52fe:	6f 93       	push	r22
    5300:	7f 93       	push	r23
    5302:	8f 93       	push	r24
    5304:	9f 93       	push	r25
    5306:	af 93       	push	r26
    5308:	bf 93       	push	r27
    530a:	ef 93       	push	r30
    530c:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    530e:	80 91 d5 09 	lds	r24, 0x09D5
    5312:	90 91 d6 09 	lds	r25, 0x09D6
    5316:	00 97       	sbiw	r24, 0x00	; 0
    5318:	29 f0       	breq	.+10     	; 0x5324 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    531a:	e0 91 d5 09 	lds	r30, 0x09D5
    531e:	f0 91 d6 09 	lds	r31, 0x09D6
    5322:	19 95       	eicall
}
    5324:	ff 91       	pop	r31
    5326:	ef 91       	pop	r30
    5328:	bf 91       	pop	r27
    532a:	af 91       	pop	r26
    532c:	9f 91       	pop	r25
    532e:	8f 91       	pop	r24
    5330:	7f 91       	pop	r23
    5332:	6f 91       	pop	r22
    5334:	5f 91       	pop	r21
    5336:	4f 91       	pop	r20
    5338:	3f 91       	pop	r19
    533a:	2f 91       	pop	r18
    533c:	0f 90       	pop	r0
    533e:	0b be       	out	0x3b, r0	; 59
    5340:	0f 90       	pop	r0
    5342:	0f be       	out	0x3f, r0	; 63
    5344:	0f 90       	pop	r0
    5346:	1f 90       	pop	r1
    5348:	18 95       	reti

0000534a <__vector_8>:

SIGNAL(INT7_vect) {
    534a:	1f 92       	push	r1
    534c:	0f 92       	push	r0
    534e:	0f b6       	in	r0, 0x3f	; 63
    5350:	0f 92       	push	r0
    5352:	0b b6       	in	r0, 0x3b	; 59
    5354:	0f 92       	push	r0
    5356:	11 24       	eor	r1, r1
    5358:	2f 93       	push	r18
    535a:	3f 93       	push	r19
    535c:	4f 93       	push	r20
    535e:	5f 93       	push	r21
    5360:	6f 93       	push	r22
    5362:	7f 93       	push	r23
    5364:	8f 93       	push	r24
    5366:	9f 93       	push	r25
    5368:	af 93       	push	r26
    536a:	bf 93       	push	r27
    536c:	ef 93       	push	r30
    536e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    5370:	80 91 d7 09 	lds	r24, 0x09D7
    5374:	90 91 d8 09 	lds	r25, 0x09D8
    5378:	00 97       	sbiw	r24, 0x00	; 0
    537a:	29 f0       	breq	.+10     	; 0x5386 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    537c:	e0 91 d7 09 	lds	r30, 0x09D7
    5380:	f0 91 d8 09 	lds	r31, 0x09D8
    5384:	19 95       	eicall
}
    5386:	ff 91       	pop	r31
    5388:	ef 91       	pop	r30
    538a:	bf 91       	pop	r27
    538c:	af 91       	pop	r26
    538e:	9f 91       	pop	r25
    5390:	8f 91       	pop	r24
    5392:	7f 91       	pop	r23
    5394:	6f 91       	pop	r22
    5396:	5f 91       	pop	r21
    5398:	4f 91       	pop	r20
    539a:	3f 91       	pop	r19
    539c:	2f 91       	pop	r18
    539e:	0f 90       	pop	r0
    53a0:	0b be       	out	0x3b, r0	; 59
    53a2:	0f 90       	pop	r0
    53a4:	0f be       	out	0x3f, r0	; 63
    53a6:	0f 90       	pop	r0
    53a8:	1f 90       	pop	r1
    53aa:	18 95       	reti

000053ac <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    53ac:	1f 92       	push	r1
    53ae:	0f 92       	push	r0
    53b0:	0f b6       	in	r0, 0x3f	; 63
    53b2:	0f 92       	push	r0
    53b4:	11 24       	eor	r1, r1
    53b6:	2f 93       	push	r18
    53b8:	3f 93       	push	r19
    53ba:	8f 93       	push	r24
    53bc:	9f 93       	push	r25
    53be:	af 93       	push	r26
    53c0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    53c2:	80 91 d9 09 	lds	r24, 0x09D9
    53c6:	90 91 da 09 	lds	r25, 0x09DA
    53ca:	a0 91 db 09 	lds	r26, 0x09DB
    53ce:	b0 91 dc 09 	lds	r27, 0x09DC
	unsigned char f = timer0_fract;
    53d2:	30 91 e1 09 	lds	r19, 0x09E1

	m += MILLIS_INC;
	f += FRACT_INC;
    53d6:	23 2f       	mov	r18, r19
    53d8:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    53da:	2d 37       	cpi	r18, 0x7D	; 125
    53dc:	20 f4       	brcc	.+8      	; 0x53e6 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    53de:	01 96       	adiw	r24, 0x01	; 1
    53e0:	a1 1d       	adc	r26, r1
    53e2:	b1 1d       	adc	r27, r1
    53e4:	05 c0       	rjmp	.+10     	; 0x53f0 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    53e6:	23 2f       	mov	r18, r19
    53e8:	2a 57       	subi	r18, 0x7A	; 122
		m += 1;
    53ea:	02 96       	adiw	r24, 0x02	; 2
    53ec:	a1 1d       	adc	r26, r1
    53ee:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    53f0:	20 93 e1 09 	sts	0x09E1, r18
	timer0_millis = m;
    53f4:	80 93 d9 09 	sts	0x09D9, r24
    53f8:	90 93 da 09 	sts	0x09DA, r25
    53fc:	a0 93 db 09 	sts	0x09DB, r26
    5400:	b0 93 dc 09 	sts	0x09DC, r27
	timer0_overflow_count++;
    5404:	80 91 dd 09 	lds	r24, 0x09DD
    5408:	90 91 de 09 	lds	r25, 0x09DE
    540c:	a0 91 df 09 	lds	r26, 0x09DF
    5410:	b0 91 e0 09 	lds	r27, 0x09E0
    5414:	01 96       	adiw	r24, 0x01	; 1
    5416:	a1 1d       	adc	r26, r1
    5418:	b1 1d       	adc	r27, r1
    541a:	80 93 dd 09 	sts	0x09DD, r24
    541e:	90 93 de 09 	sts	0x09DE, r25
    5422:	a0 93 df 09 	sts	0x09DF, r26
    5426:	b0 93 e0 09 	sts	0x09E0, r27
}
    542a:	bf 91       	pop	r27
    542c:	af 91       	pop	r26
    542e:	9f 91       	pop	r25
    5430:	8f 91       	pop	r24
    5432:	3f 91       	pop	r19
    5434:	2f 91       	pop	r18
    5436:	0f 90       	pop	r0
    5438:	0f be       	out	0x3f, r0	; 63
    543a:	0f 90       	pop	r0
    543c:	1f 90       	pop	r1
    543e:	18 95       	reti

00005440 <millis>:

unsigned long millis()
{
    5440:	0f 93       	push	r16
    5442:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG;
    5444:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5446:	f8 94       	cli
	m = timer0_millis;
    5448:	00 91 d9 09 	lds	r16, 0x09D9
    544c:	10 91 da 09 	lds	r17, 0x09DA
    5450:	20 91 db 09 	lds	r18, 0x09DB
    5454:	30 91 dc 09 	lds	r19, 0x09DC
	SREG = oldSREG;
    5458:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    545a:	b8 01       	movw	r22, r16
    545c:	c9 01       	movw	r24, r18
    545e:	1f 91       	pop	r17
    5460:	0f 91       	pop	r16
    5462:	08 95       	ret

00005464 <micros>:

unsigned long micros() {
    5464:	0f 93       	push	r16
    5466:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5468:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    546a:	f8 94       	cli
	m = timer0_overflow_count;
    546c:	00 91 dd 09 	lds	r16, 0x09DD
    5470:	10 91 de 09 	lds	r17, 0x09DE
    5474:	20 91 df 09 	lds	r18, 0x09DF
    5478:	30 91 e0 09 	lds	r19, 0x09E0
#if defined(TCNT0)
	t = TCNT0;
    547c:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    547e:	a8 9b       	sbis	0x15, 0	; 21
    5480:	06 c0       	rjmp	.+12     	; 0x548e <micros+0x2a>
    5482:	8f 3f       	cpi	r24, 0xFF	; 255
    5484:	21 f0       	breq	.+8      	; 0x548e <micros+0x2a>
		m++;
    5486:	0f 5f       	subi	r16, 0xFF	; 255
    5488:	1f 4f       	sbci	r17, 0xFF	; 255
    548a:	2f 4f       	sbci	r18, 0xFF	; 255
    548c:	3f 4f       	sbci	r19, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    548e:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5490:	32 2f       	mov	r19, r18
    5492:	21 2f       	mov	r18, r17
    5494:	10 2f       	mov	r17, r16
    5496:	00 27       	eor	r16, r16
    5498:	08 0f       	add	r16, r24
    549a:	11 1d       	adc	r17, r1
    549c:	21 1d       	adc	r18, r1
    549e:	31 1d       	adc	r19, r1
    54a0:	42 e0       	ldi	r20, 0x02	; 2
    54a2:	00 0f       	add	r16, r16
    54a4:	11 1f       	adc	r17, r17
    54a6:	22 1f       	adc	r18, r18
    54a8:	33 1f       	adc	r19, r19
    54aa:	4a 95       	dec	r20
    54ac:	d1 f7       	brne	.-12     	; 0x54a2 <micros+0x3e>
}
    54ae:	b8 01       	movw	r22, r16
    54b0:	c9 01       	movw	r24, r18
    54b2:	1f 91       	pop	r17
    54b4:	0f 91       	pop	r16
    54b6:	08 95       	ret

000054b8 <delay>:

void delay(unsigned long ms)
{
    54b8:	cf 92       	push	r12
    54ba:	df 92       	push	r13
    54bc:	ef 92       	push	r14
    54be:	ff 92       	push	r15
    54c0:	cf 93       	push	r28
    54c2:	df 93       	push	r29
    54c4:	6b 01       	movw	r12, r22
    54c6:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    54c8:	0e 94 32 2a 	call	0x5464	; 0x5464 <micros>
    54cc:	dc 01       	movw	r26, r24
    54ce:	cb 01       	movw	r24, r22
    54d0:	ec 01       	movw	r28, r24

	while (ms > 0) {
    54d2:	0f c0       	rjmp	.+30     	; 0x54f2 <delay+0x3a>
		if (((uint16_t)micros() - start) >= 1000) {
    54d4:	0e 94 32 2a 	call	0x5464	; 0x5464 <micros>
    54d8:	6c 1b       	sub	r22, r28
    54da:	7d 0b       	sbc	r23, r29
    54dc:	83 e0       	ldi	r24, 0x03	; 3
    54de:	68 3e       	cpi	r22, 0xE8	; 232
    54e0:	78 07       	cpc	r23, r24
    54e2:	38 f0       	brcs	.+14     	; 0x54f2 <delay+0x3a>
			ms--;
    54e4:	08 94       	sec
    54e6:	c1 08       	sbc	r12, r1
    54e8:	d1 08       	sbc	r13, r1
    54ea:	e1 08       	sbc	r14, r1
    54ec:	f1 08       	sbc	r15, r1
			start += 1000;
    54ee:	c8 51       	subi	r28, 0x18	; 24
    54f0:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    54f2:	c1 14       	cp	r12, r1
    54f4:	d1 04       	cpc	r13, r1
    54f6:	e1 04       	cpc	r14, r1
    54f8:	f1 04       	cpc	r15, r1
    54fa:	61 f7       	brne	.-40     	; 0x54d4 <delay+0x1c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    54fc:	df 91       	pop	r29
    54fe:	cf 91       	pop	r28
    5500:	ff 90       	pop	r15
    5502:	ef 90       	pop	r14
    5504:	df 90       	pop	r13
    5506:	cf 90       	pop	r12
    5508:	08 95       	ret

0000550a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    550a:	01 97       	sbiw	r24, 0x01	; 1
    550c:	39 f0       	breq	.+14     	; 0x551c <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    550e:	88 0f       	add	r24, r24
    5510:	99 1f       	adc	r25, r25
    5512:	88 0f       	add	r24, r24
    5514:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    5516:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    5518:	01 97       	sbiw	r24, 0x01	; 1
    551a:	f1 f7       	brne	.-4      	; 0x5518 <delayMicroseconds+0xe>
    551c:	08 95       	ret

0000551e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    551e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5520:	84 b5       	in	r24, 0x24	; 36
    5522:	82 60       	ori	r24, 0x02	; 2
    5524:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5526:	84 b5       	in	r24, 0x24	; 36
    5528:	81 60       	ori	r24, 0x01	; 1
    552a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    552c:	85 b5       	in	r24, 0x25	; 37
    552e:	82 60       	ori	r24, 0x02	; 2
    5530:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5532:	85 b5       	in	r24, 0x25	; 37
    5534:	81 60       	ori	r24, 0x01	; 1
    5536:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5538:	ee e6       	ldi	r30, 0x6E	; 110
    553a:	f0 e0       	ldi	r31, 0x00	; 0
    553c:	80 81       	ld	r24, Z
    553e:	81 60       	ori	r24, 0x01	; 1
    5540:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5542:	e1 e8       	ldi	r30, 0x81	; 129
    5544:	f0 e0       	ldi	r31, 0x00	; 0
    5546:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5548:	80 81       	ld	r24, Z
    554a:	82 60       	ori	r24, 0x02	; 2
    554c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    554e:	80 81       	ld	r24, Z
    5550:	81 60       	ori	r24, 0x01	; 1
    5552:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5554:	e0 e8       	ldi	r30, 0x80	; 128
    5556:	f0 e0       	ldi	r31, 0x00	; 0
    5558:	80 81       	ld	r24, Z
    555a:	81 60       	ori	r24, 0x01	; 1
    555c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    555e:	e1 eb       	ldi	r30, 0xB1	; 177
    5560:	f0 e0       	ldi	r31, 0x00	; 0
    5562:	80 81       	ld	r24, Z
    5564:	84 60       	ori	r24, 0x04	; 4
    5566:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5568:	e0 eb       	ldi	r30, 0xB0	; 176
    556a:	f0 e0       	ldi	r31, 0x00	; 0
    556c:	80 81       	ld	r24, Z
    556e:	81 60       	ori	r24, 0x01	; 1
    5570:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    5572:	e1 e9       	ldi	r30, 0x91	; 145
    5574:	f0 e0       	ldi	r31, 0x00	; 0
    5576:	80 81       	ld	r24, Z
    5578:	82 60       	ori	r24, 0x02	; 2
    557a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    557c:	80 81       	ld	r24, Z
    557e:	81 60       	ori	r24, 0x01	; 1
    5580:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    5582:	e0 e9       	ldi	r30, 0x90	; 144
    5584:	f0 e0       	ldi	r31, 0x00	; 0
    5586:	80 81       	ld	r24, Z
    5588:	81 60       	ori	r24, 0x01	; 1
    558a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    558c:	e1 ea       	ldi	r30, 0xA1	; 161
    558e:	f0 e0       	ldi	r31, 0x00	; 0
    5590:	80 81       	ld	r24, Z
    5592:	82 60       	ori	r24, 0x02	; 2
    5594:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    5596:	80 81       	ld	r24, Z
    5598:	81 60       	ori	r24, 0x01	; 1
    559a:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    559c:	e0 ea       	ldi	r30, 0xA0	; 160
    559e:	f0 e0       	ldi	r31, 0x00	; 0
    55a0:	80 81       	ld	r24, Z
    55a2:	81 60       	ori	r24, 0x01	; 1
    55a4:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    55a6:	e1 e2       	ldi	r30, 0x21	; 33
    55a8:	f1 e0       	ldi	r31, 0x01	; 1
    55aa:	80 81       	ld	r24, Z
    55ac:	82 60       	ori	r24, 0x02	; 2
    55ae:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    55b0:	80 81       	ld	r24, Z
    55b2:	81 60       	ori	r24, 0x01	; 1
    55b4:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    55b6:	e0 e2       	ldi	r30, 0x20	; 32
    55b8:	f1 e0       	ldi	r31, 0x01	; 1
    55ba:	80 81       	ld	r24, Z
    55bc:	81 60       	ori	r24, 0x01	; 1
    55be:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    55c0:	ea e7       	ldi	r30, 0x7A	; 122
    55c2:	f0 e0       	ldi	r31, 0x00	; 0
    55c4:	80 81       	ld	r24, Z
    55c6:	84 60       	ori	r24, 0x04	; 4
    55c8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    55ca:	80 81       	ld	r24, Z
    55cc:	82 60       	ori	r24, 0x02	; 2
    55ce:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    55d0:	80 81       	ld	r24, Z
    55d2:	81 60       	ori	r24, 0x01	; 1
    55d4:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    55d6:	80 81       	ld	r24, Z
    55d8:	80 68       	ori	r24, 0x80	; 128
    55da:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    55dc:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    55e0:	08 95       	ret

000055e2 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    55e2:	80 93 5d 03 	sts	0x035D, r24
}
    55e6:	08 95       	ret

000055e8 <analogRead>:
int analogRead(uint8_t pin)
{
	uint8_t low, high;

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    55e8:	86 33       	cpi	r24, 0x36	; 54
    55ea:	08 f0       	brcs	.+2      	; 0x55ee <analogRead+0x6>
    55ec:	86 53       	subi	r24, 0x36	; 54
	pin = analogPinToChannel(pin);
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
#elif defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    55ee:	90 91 7b 00 	lds	r25, 0x007B
    55f2:	28 2f       	mov	r18, r24
    55f4:	26 95       	lsr	r18
    55f6:	26 95       	lsr	r18
    55f8:	26 95       	lsr	r18
    55fa:	30 e0       	ldi	r19, 0x00	; 0
    55fc:	21 70       	andi	r18, 0x01	; 1
    55fe:	30 70       	andi	r19, 0x00	; 0
    5600:	43 e0       	ldi	r20, 0x03	; 3
    5602:	22 0f       	add	r18, r18
    5604:	33 1f       	adc	r19, r19
    5606:	4a 95       	dec	r20
    5608:	e1 f7       	brne	.-8      	; 0x5602 <analogRead+0x1a>
    560a:	97 7f       	andi	r25, 0xF7	; 247
    560c:	92 2b       	or	r25, r18
    560e:	90 93 7b 00 	sts	0x007B, r25
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    5612:	87 70       	andi	r24, 0x07	; 7
    5614:	90 91 5d 03 	lds	r25, 0x035D
    5618:	92 95       	swap	r25
    561a:	99 0f       	add	r25, r25
    561c:	99 0f       	add	r25, r25
    561e:	90 7c       	andi	r25, 0xC0	; 192
    5620:	98 2b       	or	r25, r24
    5622:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    5626:	80 91 7a 00 	lds	r24, 0x007A
    562a:	80 64       	ori	r24, 0x40	; 64
    562c:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    5630:	80 91 7a 00 	lds	r24, 0x007A
    5634:	86 fd       	sbrc	r24, 6
    5636:	fc cf       	rjmp	.-8      	; 0x5630 <analogRead+0x48>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    5638:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    563c:	90 91 79 00 	lds	r25, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    5640:	39 2f       	mov	r19, r25
    5642:	20 e0       	ldi	r18, 0x00	; 0
    5644:	90 e0       	ldi	r25, 0x00	; 0
    5646:	82 2b       	or	r24, r18
    5648:	93 2b       	or	r25, r19
}
    564a:	08 95       	ret

0000564c <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    564c:	1f 93       	push	r17
    564e:	cf 93       	push	r28
    5650:	df 93       	push	r29
    5652:	18 2f       	mov	r17, r24
    5654:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    5656:	61 e0       	ldi	r22, 0x01	; 1
    5658:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <pinMode>
	if (val == 0)
    565c:	20 97       	sbiw	r28, 0x00	; 0
    565e:	11 f4       	brne	.+4      	; 0x5664 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    5660:	81 2f       	mov	r24, r17
    5662:	cc c0       	rjmp	.+408    	; 0x57fc <analogWrite+0x1b0>
	}
	else if (val == 255)
    5664:	cf 3f       	cpi	r28, 0xFF	; 255
    5666:	d1 05       	cpc	r29, r1
    5668:	11 f4       	brne	.+4      	; 0x566e <analogWrite+0x22>
	{
		digitalWrite(pin, HIGH);
    566a:	81 2f       	mov	r24, r17
    566c:	c9 c0       	rjmp	.+402    	; 0x5800 <analogWrite+0x1b4>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    566e:	e1 2f       	mov	r30, r17
    5670:	f0 e0       	ldi	r31, 0x00	; 0
    5672:	ef 5e       	subi	r30, 0xEF	; 239
    5674:	fe 4f       	sbci	r31, 0xFE	; 254
    5676:	e4 91       	lpm	r30, Z
    5678:	e9 30       	cpi	r30, 0x09	; 9
    567a:	09 f4       	brne	.+2      	; 0x567e <analogWrite+0x32>
    567c:	66 c0       	rjmp	.+204    	; 0x574a <analogWrite+0xfe>
    567e:	ea 30       	cpi	r30, 0x0A	; 10
    5680:	b0 f4       	brcc	.+44     	; 0x56ae <analogWrite+0x62>
    5682:	e4 30       	cpi	r30, 0x04	; 4
    5684:	f1 f1       	breq	.+124    	; 0x5702 <analogWrite+0xb6>
    5686:	e5 30       	cpi	r30, 0x05	; 5
    5688:	40 f4       	brcc	.+16     	; 0x569a <analogWrite+0x4e>
    568a:	e2 30       	cpi	r30, 0x02	; 2
    568c:	59 f1       	breq	.+86     	; 0x56e4 <analogWrite+0x98>
    568e:	e3 30       	cpi	r30, 0x03	; 3
    5690:	70 f5       	brcc	.+92     	; 0x56ee <analogWrite+0xa2>
    5692:	e1 30       	cpi	r30, 0x01	; 1
    5694:	09 f0       	breq	.+2      	; 0x5698 <analogWrite+0x4c>
    5696:	ae c0       	rjmp	.+348    	; 0x57f4 <analogWrite+0x1a8>
    5698:	20 c0       	rjmp	.+64     	; 0x56da <analogWrite+0x8e>
    569a:	e7 30       	cpi	r30, 0x07	; 7
    569c:	09 f4       	brne	.+2      	; 0x56a0 <analogWrite+0x54>
    569e:	43 c0       	rjmp	.+134    	; 0x5726 <analogWrite+0xda>
    56a0:	e8 30       	cpi	r30, 0x08	; 8
    56a2:	08 f0       	brcs	.+2      	; 0x56a6 <analogWrite+0x5a>
    56a4:	48 c0       	rjmp	.+144    	; 0x5736 <analogWrite+0xea>
    56a6:	e6 30       	cpi	r30, 0x06	; 6
    56a8:	09 f0       	breq	.+2      	; 0x56ac <analogWrite+0x60>
    56aa:	a4 c0       	rjmp	.+328    	; 0x57f4 <analogWrite+0x1a8>
    56ac:	34 c0       	rjmp	.+104    	; 0x5716 <analogWrite+0xca>
    56ae:	ed 30       	cpi	r30, 0x0D	; 13
    56b0:	09 f4       	brne	.+2      	; 0x56b4 <analogWrite+0x68>
    56b2:	78 c0       	rjmp	.+240    	; 0x57a4 <analogWrite+0x158>
    56b4:	ee 30       	cpi	r30, 0x0E	; 14
    56b6:	38 f4       	brcc	.+14     	; 0x56c6 <analogWrite+0x7a>
    56b8:	eb 30       	cpi	r30, 0x0B	; 11
    56ba:	09 f4       	brne	.+2      	; 0x56be <analogWrite+0x72>
    56bc:	5a c0       	rjmp	.+180    	; 0x5772 <analogWrite+0x126>
    56be:	ec 30       	cpi	r30, 0x0C	; 12
    56c0:	08 f0       	brcs	.+2      	; 0x56c4 <analogWrite+0x78>
    56c2:	66 c0       	rjmp	.+204    	; 0x5790 <analogWrite+0x144>
    56c4:	4c c0       	rjmp	.+152    	; 0x575e <analogWrite+0x112>
    56c6:	e0 31       	cpi	r30, 0x10	; 16
    56c8:	09 f4       	brne	.+2      	; 0x56cc <analogWrite+0x80>
    56ca:	80 c0       	rjmp	.+256    	; 0x57cc <analogWrite+0x180>
    56cc:	e1 31       	cpi	r30, 0x11	; 17
    56ce:	09 f4       	brne	.+2      	; 0x56d2 <analogWrite+0x86>
    56d0:	87 c0       	rjmp	.+270    	; 0x57e0 <analogWrite+0x194>
    56d2:	ef 30       	cpi	r30, 0x0F	; 15
    56d4:	09 f0       	breq	.+2      	; 0x56d8 <analogWrite+0x8c>
    56d6:	8e c0       	rjmp	.+284    	; 0x57f4 <analogWrite+0x1a8>
    56d8:	6f c0       	rjmp	.+222    	; 0x57b8 <analogWrite+0x16c>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    56da:	84 b5       	in	r24, 0x24	; 36
    56dc:	80 68       	ori	r24, 0x80	; 128
    56de:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    56e0:	c7 bd       	out	0x27, r28	; 39
				break;
    56e2:	91 c0       	rjmp	.+290    	; 0x5806 <analogWrite+0x1ba>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    56e4:	84 b5       	in	r24, 0x24	; 36
    56e6:	80 62       	ori	r24, 0x20	; 32
    56e8:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    56ea:	c8 bd       	out	0x28, r28	; 40
				break;
    56ec:	8c c0       	rjmp	.+280    	; 0x5806 <analogWrite+0x1ba>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    56ee:	80 91 80 00 	lds	r24, 0x0080
    56f2:	80 68       	ori	r24, 0x80	; 128
    56f4:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    56f8:	d0 93 89 00 	sts	0x0089, r29
    56fc:	c0 93 88 00 	sts	0x0088, r28
				break;
    5700:	82 c0       	rjmp	.+260    	; 0x5806 <analogWrite+0x1ba>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    5702:	80 91 80 00 	lds	r24, 0x0080
    5706:	80 62       	ori	r24, 0x20	; 32
    5708:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    570c:	d0 93 8b 00 	sts	0x008B, r29
    5710:	c0 93 8a 00 	sts	0x008A, r28
				break;
    5714:	78 c0       	rjmp	.+240    	; 0x5806 <analogWrite+0x1ba>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    5716:	80 91 b0 00 	lds	r24, 0x00B0
    571a:	80 68       	ori	r24, 0x80	; 128
    571c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    5720:	c0 93 b3 00 	sts	0x00B3, r28
				break;
    5724:	70 c0       	rjmp	.+224    	; 0x5806 <analogWrite+0x1ba>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    5726:	80 91 b0 00 	lds	r24, 0x00B0
    572a:	80 62       	ori	r24, 0x20	; 32
    572c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    5730:	c0 93 b4 00 	sts	0x00B4, r28
				break;
    5734:	68 c0       	rjmp	.+208    	; 0x5806 <analogWrite+0x1ba>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    5736:	80 91 90 00 	lds	r24, 0x0090
    573a:	80 68       	ori	r24, 0x80	; 128
    573c:	80 93 90 00 	sts	0x0090, r24
				OCR3A = val; // set pwm duty
    5740:	d0 93 99 00 	sts	0x0099, r29
    5744:	c0 93 98 00 	sts	0x0098, r28
				break;
    5748:	5e c0       	rjmp	.+188    	; 0x5806 <analogWrite+0x1ba>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    574a:	80 91 90 00 	lds	r24, 0x0090
    574e:	80 62       	ori	r24, 0x20	; 32
    5750:	80 93 90 00 	sts	0x0090, r24
				OCR3B = val; // set pwm duty
    5754:	d0 93 9b 00 	sts	0x009B, r29
    5758:	c0 93 9a 00 	sts	0x009A, r28
				break;
    575c:	54 c0       	rjmp	.+168    	; 0x5806 <analogWrite+0x1ba>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    575e:	80 91 90 00 	lds	r24, 0x0090
    5762:	88 60       	ori	r24, 0x08	; 8
    5764:	80 93 90 00 	sts	0x0090, r24
				OCR3C = val; // set pwm duty
    5768:	d0 93 9d 00 	sts	0x009D, r29
    576c:	c0 93 9c 00 	sts	0x009C, r28
				break;
    5770:	4a c0       	rjmp	.+148    	; 0x5806 <analogWrite+0x1ba>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    5772:	80 91 a0 00 	lds	r24, 0x00A0
    5776:	80 68       	ori	r24, 0x80	; 128
    5778:	80 93 a0 00 	sts	0x00A0, r24
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    577c:	80 91 a0 00 	lds	r24, 0x00A0
    5780:	8f 7b       	andi	r24, 0xBF	; 191
    5782:	80 93 a0 00 	sts	0x00A0, r24
				#endif
				OCR4A = val;	// set pwm duty
    5786:	d0 93 a9 00 	sts	0x00A9, r29
    578a:	c0 93 a8 00 	sts	0x00A8, r28
				break;
    578e:	3b c0       	rjmp	.+118    	; 0x5806 <analogWrite+0x1ba>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    5790:	80 91 a0 00 	lds	r24, 0x00A0
    5794:	80 62       	ori	r24, 0x20	; 32
    5796:	80 93 a0 00 	sts	0x00A0, r24
				OCR4B = val; // set pwm duty
    579a:	d0 93 ab 00 	sts	0x00AB, r29
    579e:	c0 93 aa 00 	sts	0x00AA, r28
				break;
    57a2:	31 c0       	rjmp	.+98     	; 0x5806 <analogWrite+0x1ba>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
    57a4:	80 91 a0 00 	lds	r24, 0x00A0
    57a8:	88 60       	ori	r24, 0x08	; 8
    57aa:	80 93 a0 00 	sts	0x00A0, r24
				OCR4C = val; // set pwm duty
    57ae:	d0 93 ad 00 	sts	0x00AD, r29
    57b2:	c0 93 ac 00 	sts	0x00AC, r28
				break;
    57b6:	27 c0       	rjmp	.+78     	; 0x5806 <analogWrite+0x1ba>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
    57b8:	80 91 20 01 	lds	r24, 0x0120
    57bc:	80 68       	ori	r24, 0x80	; 128
    57be:	80 93 20 01 	sts	0x0120, r24
				OCR5A = val; // set pwm duty
    57c2:	d0 93 29 01 	sts	0x0129, r29
    57c6:	c0 93 28 01 	sts	0x0128, r28
				break;
    57ca:	1d c0       	rjmp	.+58     	; 0x5806 <analogWrite+0x1ba>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
    57cc:	80 91 20 01 	lds	r24, 0x0120
    57d0:	80 62       	ori	r24, 0x20	; 32
    57d2:	80 93 20 01 	sts	0x0120, r24
				OCR5B = val; // set pwm duty
    57d6:	d0 93 2b 01 	sts	0x012B, r29
    57da:	c0 93 2a 01 	sts	0x012A, r28
				break;
    57de:	13 c0       	rjmp	.+38     	; 0x5806 <analogWrite+0x1ba>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
    57e0:	80 91 20 01 	lds	r24, 0x0120
    57e4:	88 60       	ori	r24, 0x08	; 8
    57e6:	80 93 20 01 	sts	0x0120, r24
				OCR5C = val; // set pwm duty
    57ea:	d0 93 2d 01 	sts	0x012D, r29
    57ee:	c0 93 2c 01 	sts	0x012C, r28
				break;
    57f2:	09 c0       	rjmp	.+18     	; 0x5806 <analogWrite+0x1ba>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
					digitalWrite(pin, LOW);
    57f4:	81 2f       	mov	r24, r17
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    57f6:	c0 38       	cpi	r28, 0x80	; 128
    57f8:	d1 05       	cpc	r29, r1
    57fa:	14 f4       	brge	.+4      	; 0x5800 <analogWrite+0x1b4>
					digitalWrite(pin, LOW);
    57fc:	60 e0       	ldi	r22, 0x00	; 0
    57fe:	01 c0       	rjmp	.+2      	; 0x5802 <analogWrite+0x1b6>
				} else {
					digitalWrite(pin, HIGH);
    5800:	61 e0       	ldi	r22, 0x01	; 1
    5802:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
				}
		}
	}
}
    5806:	df 91       	pop	r29
    5808:	cf 91       	pop	r28
    580a:	1f 91       	pop	r17
    580c:	08 95       	ret

0000580e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    580e:	89 30       	cpi	r24, 0x09	; 9
    5810:	09 f4       	brne	.+2      	; 0x5814 <turnOffPWM+0x6>
    5812:	49 c0       	rjmp	.+146    	; 0x58a6 <turnOffPWM+0x98>
    5814:	8a 30       	cpi	r24, 0x0A	; 10
    5816:	a0 f4       	brcc	.+40     	; 0x5840 <turnOffPWM+0x32>
    5818:	84 30       	cpi	r24, 0x04	; 4
    581a:	51 f1       	breq	.+84     	; 0x5870 <turnOffPWM+0x62>
    581c:	85 30       	cpi	r24, 0x05	; 5
    581e:	40 f4       	brcc	.+16     	; 0x5830 <turnOffPWM+0x22>
    5820:	82 30       	cpi	r24, 0x02	; 2
    5822:	79 f1       	breq	.+94     	; 0x5882 <turnOffPWM+0x74>
    5824:	83 30       	cpi	r24, 0x03	; 3
    5826:	00 f5       	brcc	.+64     	; 0x5868 <turnOffPWM+0x5a>
    5828:	81 30       	cpi	r24, 0x01	; 1
    582a:	09 f0       	breq	.+2      	; 0x582e <turnOffPWM+0x20>
    582c:	63 c0       	rjmp	.+198    	; 0x58f4 <turnOffPWM+0xe6>
    582e:	26 c0       	rjmp	.+76     	; 0x587c <turnOffPWM+0x6e>
    5830:	87 30       	cpi	r24, 0x07	; 7
    5832:	79 f1       	breq	.+94     	; 0x5892 <turnOffPWM+0x84>
    5834:	88 30       	cpi	r24, 0x08	; 8
    5836:	98 f5       	brcc	.+102    	; 0x589e <turnOffPWM+0x90>
    5838:	86 30       	cpi	r24, 0x06	; 6
    583a:	09 f0       	breq	.+2      	; 0x583e <turnOffPWM+0x30>
    583c:	5b c0       	rjmp	.+182    	; 0x58f4 <turnOffPWM+0xe6>
    583e:	25 c0       	rjmp	.+74     	; 0x588a <turnOffPWM+0x7c>
    5840:	8d 30       	cpi	r24, 0x0D	; 13
    5842:	09 f4       	brne	.+2      	; 0x5846 <turnOffPWM+0x38>
    5844:	42 c0       	rjmp	.+132    	; 0x58ca <turnOffPWM+0xbc>
    5846:	8e 30       	cpi	r24, 0x0E	; 14
    5848:	28 f4       	brcc	.+10     	; 0x5854 <turnOffPWM+0x46>
    584a:	8b 30       	cpi	r24, 0x0B	; 11
    584c:	b1 f1       	breq	.+108    	; 0x58ba <turnOffPWM+0xac>
    584e:	8c 30       	cpi	r24, 0x0C	; 12
    5850:	c0 f5       	brcc	.+112    	; 0x58c2 <turnOffPWM+0xb4>
    5852:	2d c0       	rjmp	.+90     	; 0x58ae <turnOffPWM+0xa0>
    5854:	80 31       	cpi	r24, 0x10	; 16
    5856:	09 f4       	brne	.+2      	; 0x585a <turnOffPWM+0x4c>
    5858:	42 c0       	rjmp	.+132    	; 0x58de <turnOffPWM+0xd0>
    585a:	81 31       	cpi	r24, 0x11	; 17
    585c:	09 f4       	brne	.+2      	; 0x5860 <turnOffPWM+0x52>
    585e:	45 c0       	rjmp	.+138    	; 0x58ea <turnOffPWM+0xdc>
    5860:	8f 30       	cpi	r24, 0x0F	; 15
    5862:	09 f0       	breq	.+2      	; 0x5866 <turnOffPWM+0x58>
    5864:	47 c0       	rjmp	.+142    	; 0x58f4 <turnOffPWM+0xe6>
    5866:	37 c0       	rjmp	.+110    	; 0x58d6 <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5868:	80 91 80 00 	lds	r24, 0x0080
    586c:	8f 77       	andi	r24, 0x7F	; 127
    586e:	03 c0       	rjmp	.+6      	; 0x5876 <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5870:	80 91 80 00 	lds	r24, 0x0080
    5874:	8f 7d       	andi	r24, 0xDF	; 223
    5876:	80 93 80 00 	sts	0x0080, r24
    587a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    587c:	84 b5       	in	r24, 0x24	; 36
    587e:	8f 77       	andi	r24, 0x7F	; 127
    5880:	02 c0       	rjmp	.+4      	; 0x5886 <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5882:	84 b5       	in	r24, 0x24	; 36
    5884:	8f 7d       	andi	r24, 0xDF	; 223
    5886:	84 bd       	out	0x24, r24	; 36
    5888:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    588a:	80 91 b0 00 	lds	r24, 0x00B0
    588e:	8f 77       	andi	r24, 0x7F	; 127
    5890:	03 c0       	rjmp	.+6      	; 0x5898 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5892:	80 91 b0 00 	lds	r24, 0x00B0
    5896:	8f 7d       	andi	r24, 0xDF	; 223
    5898:	80 93 b0 00 	sts	0x00B0, r24
    589c:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    589e:	80 91 90 00 	lds	r24, 0x0090
    58a2:	8f 77       	andi	r24, 0x7F	; 127
    58a4:	07 c0       	rjmp	.+14     	; 0x58b4 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    58a6:	80 91 90 00 	lds	r24, 0x0090
    58aa:	8f 7d       	andi	r24, 0xDF	; 223
    58ac:	03 c0       	rjmp	.+6      	; 0x58b4 <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    58ae:	80 91 90 00 	lds	r24, 0x0090
    58b2:	87 7f       	andi	r24, 0xF7	; 247
    58b4:	80 93 90 00 	sts	0x0090, r24
    58b8:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    58ba:	80 91 a0 00 	lds	r24, 0x00A0
    58be:	8f 77       	andi	r24, 0x7F	; 127
    58c0:	07 c0       	rjmp	.+14     	; 0x58d0 <turnOffPWM+0xc2>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    58c2:	80 91 a0 00 	lds	r24, 0x00A0
    58c6:	8f 7d       	andi	r24, 0xDF	; 223
    58c8:	03 c0       	rjmp	.+6      	; 0x58d0 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    58ca:	80 91 a0 00 	lds	r24, 0x00A0
    58ce:	87 7f       	andi	r24, 0xF7	; 247
    58d0:	80 93 a0 00 	sts	0x00A0, r24
    58d4:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    58d6:	80 91 20 01 	lds	r24, 0x0120
    58da:	8f 77       	andi	r24, 0x7F	; 127
    58dc:	03 c0       	rjmp	.+6      	; 0x58e4 <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    58de:	80 91 20 01 	lds	r24, 0x0120
    58e2:	8f 7d       	andi	r24, 0xDF	; 223
    58e4:	80 93 20 01 	sts	0x0120, r24
    58e8:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    58ea:	80 91 20 01 	lds	r24, 0x0120
    58ee:	87 7f       	andi	r24, 0xF7	; 247
    58f0:	80 93 20 01 	sts	0x0120, r24
    58f4:	08 95       	ret

000058f6 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	fc 01       	movw	r30, r24
    58fa:	e9 5a       	subi	r30, 0xA9	; 169
    58fc:	fe 4f       	sbci	r31, 0xFE	; 254
    58fe:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5900:	83 56       	subi	r24, 0x63	; 99
    5902:	9e 4f       	sbci	r25, 0xFE	; 254
    5904:	fc 01       	movw	r30, r24
    5906:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5908:	88 23       	and	r24, r24
    590a:	41 f1       	breq	.+80     	; 0x595c <pinMode+0x66>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    590c:	90 e0       	ldi	r25, 0x00	; 0
    590e:	88 0f       	add	r24, r24
    5910:	99 1f       	adc	r25, r25
    5912:	fc 01       	movw	r30, r24
    5914:	e9 5e       	subi	r30, 0xE9	; 233
    5916:	fd 4f       	sbci	r31, 0xFD	; 253
    5918:	45 91       	lpm	r20, Z+
    591a:	54 91       	lpm	r21, Z
    591c:	da 01       	movw	r26, r20
	out = portOutputRegister(port);
    591e:	83 50       	subi	r24, 0x03	; 3
    5920:	9e 4f       	sbci	r25, 0xFE	; 254
    5922:	fc 01       	movw	r30, r24
    5924:	85 91       	lpm	r24, Z+
    5926:	94 91       	lpm	r25, Z
    5928:	fc 01       	movw	r30, r24

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    592a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    592c:	f8 94       	cli
		*reg &= ~bit;
    592e:	8c 91       	ld	r24, X

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
    5930:	66 23       	and	r22, r22
    5932:	31 f4       	brne	.+12     	; 0x5940 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    5934:	20 95       	com	r18
    5936:	82 23       	and	r24, r18
    5938:	8c 93       	st	X, r24
		*out &= ~bit;
    593a:	80 81       	ld	r24, Z
    593c:	82 23       	and	r24, r18
    593e:	08 c0       	rjmp	.+16     	; 0x5950 <pinMode+0x5a>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5940:	62 30       	cpi	r22, 0x02	; 2
    5942:	49 f4       	brne	.+18     	; 0x5956 <pinMode+0x60>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    5944:	32 2f       	mov	r19, r18
    5946:	30 95       	com	r19
    5948:	83 23       	and	r24, r19
    594a:	8c 93       	st	X, r24
		*out |= bit;
    594c:	80 81       	ld	r24, Z
    594e:	82 2b       	or	r24, r18
    5950:	80 83       	st	Z, r24
		SREG = oldSREG;
    5952:	9f bf       	out	0x3f, r25	; 63
    5954:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
    5956:	82 2b       	or	r24, r18
    5958:	8c 93       	st	X, r24
		SREG = oldSREG;
    595a:	9f bf       	out	0x3f, r25	; 63
    595c:	08 95       	ret

0000595e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    595e:	0f 93       	push	r16
    5960:	1f 93       	push	r17
    5962:	cf 93       	push	r28
    5964:	df 93       	push	r29
    5966:	0f 92       	push	r0
    5968:	cd b7       	in	r28, 0x3d	; 61
    596a:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    596c:	28 2f       	mov	r18, r24
    596e:	30 e0       	ldi	r19, 0x00	; 0
    5970:	f9 01       	movw	r30, r18
    5972:	ef 5e       	subi	r30, 0xEF	; 239
    5974:	fe 4f       	sbci	r31, 0xFE	; 254
    5976:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5978:	f9 01       	movw	r30, r18
    597a:	e9 5a       	subi	r30, 0xA9	; 169
    597c:	fe 4f       	sbci	r31, 0xFE	; 254
    597e:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    5980:	f9 01       	movw	r30, r18
    5982:	e3 56       	subi	r30, 0x63	; 99
    5984:	fe 4f       	sbci	r31, 0xFE	; 254
    5986:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5988:	00 23       	and	r16, r16
    598a:	d1 f0       	breq	.+52     	; 0x59c0 <digitalWrite+0x62>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    598c:	88 23       	and	r24, r24
    598e:	21 f0       	breq	.+8      	; 0x5998 <digitalWrite+0x3a>
    5990:	69 83       	std	Y+1, r22	; 0x01
    5992:	0e 94 07 2c 	call	0x580e	; 0x580e <turnOffPWM>
    5996:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    5998:	e0 2f       	mov	r30, r16
    599a:	f0 e0       	ldi	r31, 0x00	; 0
    599c:	ee 0f       	add	r30, r30
    599e:	ff 1f       	adc	r31, r31
    59a0:	e3 50       	subi	r30, 0x03	; 3
    59a2:	fe 4f       	sbci	r31, 0xFE	; 254
    59a4:	85 91       	lpm	r24, Z+
    59a6:	94 91       	lpm	r25, Z
    59a8:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    59aa:	9f b7       	in	r25, 0x3f	; 63
	cli();
    59ac:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    59ae:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    59b0:	66 23       	and	r22, r22
    59b2:	19 f4       	brne	.+6      	; 0x59ba <digitalWrite+0x5c>
		*out &= ~bit;
    59b4:	10 95       	com	r17
    59b6:	81 23       	and	r24, r17
    59b8:	01 c0       	rjmp	.+2      	; 0x59bc <digitalWrite+0x5e>
	} else {
		*out |= bit;
    59ba:	81 2b       	or	r24, r17
    59bc:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    59be:	9f bf       	out	0x3f, r25	; 63
}
    59c0:	0f 90       	pop	r0
    59c2:	df 91       	pop	r29
    59c4:	cf 91       	pop	r28
    59c6:	1f 91       	pop	r17
    59c8:	0f 91       	pop	r16
    59ca:	08 95       	ret

000059cc <digitalRead>:

int digitalRead(uint8_t pin)
{
    59cc:	cf 93       	push	r28
    59ce:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    59d0:	28 2f       	mov	r18, r24
    59d2:	30 e0       	ldi	r19, 0x00	; 0
    59d4:	f9 01       	movw	r30, r18
    59d6:	ef 5e       	subi	r30, 0xEF	; 239
    59d8:	fe 4f       	sbci	r31, 0xFE	; 254
    59da:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    59dc:	f9 01       	movw	r30, r18
    59de:	e9 5a       	subi	r30, 0xA9	; 169
    59e0:	fe 4f       	sbci	r31, 0xFE	; 254
    59e2:	c4 91       	lpm	r28, Z
	uint8_t port = digitalPinToPort(pin);
    59e4:	f9 01       	movw	r30, r18
    59e6:	e3 56       	subi	r30, 0x63	; 99
    59e8:	fe 4f       	sbci	r31, 0xFE	; 254
    59ea:	d4 91       	lpm	r29, Z

	if (port == NOT_A_PIN) return LOW;
    59ec:	dd 23       	and	r29, r29
    59ee:	91 f0       	breq	.+36     	; 0x5a14 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    59f0:	88 23       	and	r24, r24
    59f2:	11 f0       	breq	.+4      	; 0x59f8 <digitalRead+0x2c>
    59f4:	0e 94 07 2c 	call	0x580e	; 0x580e <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    59f8:	ed 2f       	mov	r30, r29
    59fa:	f0 e0       	ldi	r31, 0x00	; 0
    59fc:	ee 0f       	add	r30, r30
    59fe:	ff 1f       	adc	r31, r31
    5a00:	ed 51       	subi	r30, 0x1D	; 29
    5a02:	fe 4f       	sbci	r31, 0xFE	; 254
    5a04:	85 91       	lpm	r24, Z+
    5a06:	94 91       	lpm	r25, Z
    5a08:	fc 01       	movw	r30, r24
    5a0a:	20 81       	ld	r18, Z
    5a0c:	2c 23       	and	r18, r28
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    5a0e:	81 e0       	ldi	r24, 0x01	; 1
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	11 f4       	brne	.+4      	; 0x5a18 <digitalRead+0x4c>
    5a14:	80 e0       	ldi	r24, 0x00	; 0
    5a16:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    5a18:	df 91       	pop	r29
    5a1a:	cf 91       	pop	r28
    5a1c:	08 95       	ret

00005a1e <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    5a1e:	00 97       	sbiw	r24, 0x00	; 0
    5a20:	29 f0       	breq	.+10     	; 0x5a2c <_Z10randomSeedj+0xe>
    srandom(seed);
    5a22:	bc 01       	movw	r22, r24
    5a24:	80 e0       	ldi	r24, 0x00	; 0
    5a26:	90 e0       	ldi	r25, 0x00	; 0
    5a28:	0e 94 16 4d 	call	0x9a2c	; 0x9a2c <srandom>
    5a2c:	08 95       	ret

00005a2e <_Z6randoml>:
  }
}

long random(long howbig)
{
    5a2e:	cf 92       	push	r12
    5a30:	df 92       	push	r13
    5a32:	ef 92       	push	r14
    5a34:	ff 92       	push	r15
    5a36:	0f 93       	push	r16
    5a38:	1f 93       	push	r17
    5a3a:	6b 01       	movw	r12, r22
    5a3c:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    5a3e:	61 15       	cp	r22, r1
    5a40:	71 05       	cpc	r23, r1
    5a42:	81 05       	cpc	r24, r1
    5a44:	91 05       	cpc	r25, r1
    5a46:	49 f0       	breq	.+18     	; 0x5a5a <_Z6randoml+0x2c>
    return 0;
  }
  return random() % howbig;
    5a48:	0e 94 11 4d 	call	0x9a22	; 0x9a22 <random>
    5a4c:	a7 01       	movw	r20, r14
    5a4e:	96 01       	movw	r18, r12
    5a50:	0e 94 67 4b 	call	0x96ce	; 0x96ce <__divmodsi4>
    5a54:	8b 01       	movw	r16, r22
    5a56:	9c 01       	movw	r18, r24
    5a58:	03 c0       	rjmp	.+6      	; 0x5a60 <_Z6randoml+0x32>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    5a5a:	00 e0       	ldi	r16, 0x00	; 0
    5a5c:	10 e0       	ldi	r17, 0x00	; 0
    5a5e:	98 01       	movw	r18, r16
  }
  return random() % howbig;
}
    5a60:	60 2f       	mov	r22, r16
    5a62:	71 2f       	mov	r23, r17
    5a64:	82 2f       	mov	r24, r18
    5a66:	93 2f       	mov	r25, r19
    5a68:	1f 91       	pop	r17
    5a6a:	0f 91       	pop	r16
    5a6c:	ff 90       	pop	r15
    5a6e:	ef 90       	pop	r14
    5a70:	df 90       	pop	r13
    5a72:	cf 90       	pop	r12
    5a74:	08 95       	ret

00005a76 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    5a76:	cf 92       	push	r12
    5a78:	df 92       	push	r13
    5a7a:	ef 92       	push	r14
    5a7c:	ff 92       	push	r15
    5a7e:	6b 01       	movw	r12, r22
    5a80:	7c 01       	movw	r14, r24
    5a82:	da 01       	movw	r26, r20
    5a84:	c9 01       	movw	r24, r18
  if (howsmall >= howbig) {
    5a86:	c2 16       	cp	r12, r18
    5a88:	d3 06       	cpc	r13, r19
    5a8a:	e4 06       	cpc	r14, r20
    5a8c:	f5 06       	cpc	r15, r21
    5a8e:	74 f4       	brge	.+28     	; 0x5aac <_Z6randomll+0x36>
    return howsmall;
  }
  long diff = howbig - howsmall;
    5a90:	8c 19       	sub	r24, r12
    5a92:	9d 09       	sbc	r25, r13
    5a94:	ae 09       	sbc	r26, r14
    5a96:	bf 09       	sbc	r27, r15
  return random(diff) + howsmall;
    5a98:	bc 01       	movw	r22, r24
    5a9a:	cd 01       	movw	r24, r26
    5a9c:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <_Z6randoml>
    5aa0:	dc 01       	movw	r26, r24
    5aa2:	cb 01       	movw	r24, r22
    5aa4:	c8 0e       	add	r12, r24
    5aa6:	d9 1e       	adc	r13, r25
    5aa8:	ea 1e       	adc	r14, r26
    5aaa:	fb 1e       	adc	r15, r27
}
    5aac:	6c 2d       	mov	r22, r12
    5aae:	7d 2d       	mov	r23, r13
    5ab0:	8e 2d       	mov	r24, r14
    5ab2:	9f 2d       	mov	r25, r15
    5ab4:	ff 90       	pop	r15
    5ab6:	ef 90       	pop	r14
    5ab8:	df 90       	pop	r13
    5aba:	cf 90       	pop	r12
    5abc:	08 95       	ret

00005abe <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    5abe:	4f 92       	push	r4
    5ac0:	5f 92       	push	r5
    5ac2:	6f 92       	push	r6
    5ac4:	7f 92       	push	r7
    5ac6:	af 92       	push	r10
    5ac8:	bf 92       	push	r11
    5aca:	cf 92       	push	r12
    5acc:	df 92       	push	r13
    5ace:	ef 92       	push	r14
    5ad0:	ff 92       	push	r15
    5ad2:	0f 93       	push	r16
    5ad4:	1f 93       	push	r17
    5ad6:	cf 93       	push	r28
    5ad8:	df 93       	push	r29
    5ada:	00 d0       	rcall	.+0      	; 0x5adc <_Z3maplllll+0x1e>
    5adc:	0f 92       	push	r0
    5ade:	cd b7       	in	r28, 0x3d	; 61
    5ae0:	de b7       	in	r29, 0x3e	; 62
    5ae2:	29 01       	movw	r4, r18
    5ae4:	3a 01       	movw	r6, r20
    5ae6:	e9 82       	std	Y+1, r14	; 0x01
    5ae8:	fa 82       	std	Y+2, r15	; 0x02
    5aea:	0b 83       	std	Y+3, r16	; 0x03
    5aec:	1c 83       	std	Y+4, r17	; 0x04
    5aee:	76 01       	movw	r14, r12
    5af0:	65 01       	movw	r12, r10
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    5af2:	62 1b       	sub	r22, r18
    5af4:	73 0b       	sbc	r23, r19
    5af6:	84 0b       	sbc	r24, r20
    5af8:	95 0b       	sbc	r25, r21
    5afa:	2e 89       	ldd	r18, Y+22	; 0x16
    5afc:	3f 89       	ldd	r19, Y+23	; 0x17
    5afe:	48 8d       	ldd	r20, Y+24	; 0x18
    5b00:	59 8d       	ldd	r21, Y+25	; 0x19
    5b02:	2c 19       	sub	r18, r12
    5b04:	3d 09       	sbc	r19, r13
    5b06:	4e 09       	sbc	r20, r14
    5b08:	5f 09       	sbc	r21, r15
    5b0a:	0e 94 1a 4b 	call	0x9634	; 0x9634 <__mulsi3>
    5b0e:	29 81       	ldd	r18, Y+1	; 0x01
    5b10:	3a 81       	ldd	r19, Y+2	; 0x02
    5b12:	4b 81       	ldd	r20, Y+3	; 0x03
    5b14:	5c 81       	ldd	r21, Y+4	; 0x04
    5b16:	24 19       	sub	r18, r4
    5b18:	35 09       	sbc	r19, r5
    5b1a:	46 09       	sbc	r20, r6
    5b1c:	57 09       	sbc	r21, r7
    5b1e:	0e 94 67 4b 	call	0x96ce	; 0x96ce <__divmodsi4>
    5b22:	c2 0e       	add	r12, r18
    5b24:	d3 1e       	adc	r13, r19
    5b26:	e4 1e       	adc	r14, r20
    5b28:	f5 1e       	adc	r15, r21
}
    5b2a:	6c 2d       	mov	r22, r12
    5b2c:	7d 2d       	mov	r23, r13
    5b2e:	8e 2d       	mov	r24, r14
    5b30:	9f 2d       	mov	r25, r15
    5b32:	0f 90       	pop	r0
    5b34:	0f 90       	pop	r0
    5b36:	0f 90       	pop	r0
    5b38:	0f 90       	pop	r0
    5b3a:	df 91       	pop	r29
    5b3c:	cf 91       	pop	r28
    5b3e:	1f 91       	pop	r17
    5b40:	0f 91       	pop	r16
    5b42:	ff 90       	pop	r15
    5b44:	ef 90       	pop	r14
    5b46:	df 90       	pop	r13
    5b48:	cf 90       	pop	r12
    5b4a:	bf 90       	pop	r11
    5b4c:	af 90       	pop	r10
    5b4e:	7f 90       	pop	r7
    5b50:	6f 90       	pop	r6
    5b52:	5f 90       	pop	r5
    5b54:	4f 90       	pop	r4
    5b56:	08 95       	ret

00005b58 <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
    5b58:	08 95       	ret

00005b5a <_Z8makeWordhh>:
    5b5a:	70 e0       	ldi	r23, 0x00	; 0
    5b5c:	38 2f       	mov	r19, r24
    5b5e:	20 e0       	ldi	r18, 0x00	; 0
    5b60:	26 2b       	or	r18, r22
    5b62:	37 2b       	or	r19, r23
    5b64:	82 2f       	mov	r24, r18
    5b66:	93 2f       	mov	r25, r19
    5b68:	08 95       	ret

00005b6a <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
    5b6a:	fc 01       	movw	r30, r24
    5b6c:	80 81       	ld	r24, Z
    5b6e:	91 81       	ldd	r25, Z+1	; 0x01
    5b70:	0e 94 1c 4c 	call	0x9838	; 0x9838 <free>
}
    5b74:	08 95       	ret

00005b76 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
    5b76:	cf 93       	push	r28
    5b78:	df 93       	push	r29
    5b7a:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    5b7c:	88 81       	ld	r24, Y
    5b7e:	99 81       	ldd	r25, Y+1	; 0x01
    5b80:	00 97       	sbiw	r24, 0x00	; 0
    5b82:	11 f0       	breq	.+4      	; 0x5b88 <_ZN6String10invalidateEv+0x12>
    5b84:	0e 94 1c 4c 	call	0x9838	; 0x9838 <free>
	buffer = NULL;
    5b88:	19 82       	std	Y+1, r1	; 0x01
    5b8a:	18 82       	st	Y, r1
	capacity = len = 0;
    5b8c:	1d 82       	std	Y+5, r1	; 0x05
    5b8e:	1c 82       	std	Y+4, r1	; 0x04
    5b90:	1b 82       	std	Y+3, r1	; 0x03
    5b92:	1a 82       	std	Y+2, r1	; 0x02
}
    5b94:	df 91       	pop	r29
    5b96:	cf 91       	pop	r28
    5b98:	08 95       	ret

00005b9a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    5b9a:	0f 93       	push	r16
    5b9c:	1f 93       	push	r17
    5b9e:	cf 93       	push	r28
    5ba0:	df 93       	push	r29
    5ba2:	ec 01       	movw	r28, r24
    5ba4:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    5ba6:	6f 5f       	subi	r22, 0xFF	; 255
    5ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    5baa:	88 81       	ld	r24, Y
    5bac:	99 81       	ldd	r25, Y+1	; 0x01
    5bae:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <realloc>
    5bb2:	28 2f       	mov	r18, r24
    5bb4:	39 2f       	mov	r19, r25
	if (newbuffer) {
    5bb6:	21 15       	cp	r18, r1
    5bb8:	31 05       	cpc	r19, r1
    5bba:	31 f0       	breq	.+12     	; 0x5bc8 <_ZN6String12changeBufferEj+0x2e>
		buffer = newbuffer;
    5bbc:	39 83       	std	Y+1, r19	; 0x01
    5bbe:	28 83       	st	Y, r18
		capacity = maxStrLen;
    5bc0:	1b 83       	std	Y+3, r17	; 0x03
    5bc2:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    5bc4:	81 e0       	ldi	r24, 0x01	; 1
    5bc6:	01 c0       	rjmp	.+2      	; 0x5bca <_ZN6String12changeBufferEj+0x30>
	}
	return 0;
    5bc8:	80 e0       	ldi	r24, 0x00	; 0
}
    5bca:	df 91       	pop	r29
    5bcc:	cf 91       	pop	r28
    5bce:	1f 91       	pop	r17
    5bd0:	0f 91       	pop	r16
    5bd2:	08 95       	ret

00005bd4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    5bd4:	cf 93       	push	r28
    5bd6:	df 93       	push	r29
    5bd8:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    5bda:	88 81       	ld	r24, Y
    5bdc:	99 81       	ldd	r25, Y+1	; 0x01
    5bde:	00 97       	sbiw	r24, 0x00	; 0
    5be0:	29 f0       	breq	.+10     	; 0x5bec <_ZN6String7reserveEj+0x18>
    5be2:	8a 81       	ldd	r24, Y+2	; 0x02
    5be4:	9b 81       	ldd	r25, Y+3	; 0x03
    5be6:	86 17       	cp	r24, r22
    5be8:	97 07       	cpc	r25, r23
    5bea:	70 f4       	brcc	.+28     	; 0x5c08 <_ZN6String7reserveEj+0x34>
	if (changeBuffer(size)) {
    5bec:	ce 01       	movw	r24, r28
    5bee:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <_ZN6String12changeBufferEj>
    5bf2:	88 23       	and	r24, r24
    5bf4:	59 f0       	breq	.+22     	; 0x5c0c <_ZN6String7reserveEj+0x38>
		if (len == 0) buffer[0] = 0;
    5bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    5bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    5bfa:	00 97       	sbiw	r24, 0x00	; 0
    5bfc:	49 f4       	brne	.+18     	; 0x5c10 <_ZN6String7reserveEj+0x3c>
    5bfe:	e8 81       	ld	r30, Y
    5c00:	f9 81       	ldd	r31, Y+1	; 0x01
    5c02:	10 82       	st	Z, r1
		return 1;
    5c04:	81 e0       	ldi	r24, 0x01	; 1
    5c06:	05 c0       	rjmp	.+10     	; 0x5c12 <_ZN6String7reserveEj+0x3e>
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
    5c08:	81 e0       	ldi	r24, 0x01	; 1
    5c0a:	03 c0       	rjmp	.+6      	; 0x5c12 <_ZN6String7reserveEj+0x3e>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
	}
	return 0;
    5c0c:	80 e0       	ldi	r24, 0x00	; 0
    5c0e:	01 c0       	rjmp	.+2      	; 0x5c12 <_ZN6String7reserveEj+0x3e>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    5c10:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    5c12:	df 91       	pop	r29
    5c14:	cf 91       	pop	r28
    5c16:	08 95       	ret

00005c18 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    5c18:	ef 92       	push	r14
    5c1a:	ff 92       	push	r15
    5c1c:	0f 93       	push	r16
    5c1e:	1f 93       	push	r17
    5c20:	cf 93       	push	r28
    5c22:	df 93       	push	r29
    5c24:	ec 01       	movw	r28, r24
    5c26:	7b 01       	movw	r14, r22
    5c28:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    5c2a:	ba 01       	movw	r22, r20
    5c2c:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN6String7reserveEj>
    5c30:	88 23       	and	r24, r24
    5c32:	21 f4       	brne	.+8      	; 0x5c3c <_ZN6String4copyEPKcj+0x24>
		invalidate();
    5c34:	ce 01       	movw	r24, r28
    5c36:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_ZN6String10invalidateEv>
		return *this;
    5c3a:	07 c0       	rjmp	.+14     	; 0x5c4a <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    5c3c:	1d 83       	std	Y+5, r17	; 0x05
    5c3e:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    5c40:	88 81       	ld	r24, Y
    5c42:	99 81       	ldd	r25, Y+1	; 0x01
    5c44:	b7 01       	movw	r22, r14
    5c46:	0e 94 7c 4e 	call	0x9cf8	; 0x9cf8 <strcpy>
	return *this;
}
    5c4a:	8c 2f       	mov	r24, r28
    5c4c:	9d 2f       	mov	r25, r29
    5c4e:	df 91       	pop	r29
    5c50:	cf 91       	pop	r28
    5c52:	1f 91       	pop	r17
    5c54:	0f 91       	pop	r16
    5c56:	ff 90       	pop	r15
    5c58:	ef 90       	pop	r14
    5c5a:	08 95       	ret

00005c5c <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    5c5c:	cf 93       	push	r28
    5c5e:	df 93       	push	r29
    5c60:	dc 01       	movw	r26, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5c62:	11 96       	adiw	r26, 0x01	; 1
    5c64:	1c 92       	st	X, r1
    5c66:	1e 92       	st	-X, r1
	capacity = 0;
    5c68:	13 96       	adiw	r26, 0x03	; 3
    5c6a:	1c 92       	st	X, r1
    5c6c:	1e 92       	st	-X, r1
    5c6e:	12 97       	sbiw	r26, 0x02	; 2
	len = 0;
    5c70:	15 96       	adiw	r26, 0x05	; 5
    5c72:	1c 92       	st	X, r1
    5c74:	1e 92       	st	-X, r1
    5c76:	14 97       	sbiw	r26, 0x04	; 4
	flags = 0;
    5c78:	16 96       	adiw	r26, 0x06	; 6
    5c7a:	1c 92       	st	X, r1
    5c7c:	16 97       	sbiw	r26, 0x06	; 6
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    5c7e:	61 15       	cp	r22, r1
    5c80:	71 05       	cpc	r23, r1
    5c82:	69 f0       	breq	.+26     	; 0x5c9e <_ZN6StringC1EPKc+0x42>
    5c84:	e6 2f       	mov	r30, r22
    5c86:	f7 2f       	mov	r31, r23
    5c88:	ef 01       	movw	r28, r30
    5c8a:	09 90       	ld	r0, Y+
    5c8c:	00 20       	and	r0, r0
    5c8e:	e9 f7       	brne	.-6      	; 0x5c8a <_ZN6StringC1EPKc+0x2e>
    5c90:	ae 01       	movw	r20, r28
    5c92:	41 50       	subi	r20, 0x01	; 1
    5c94:	50 40       	sbci	r21, 0x00	; 0
    5c96:	4e 1b       	sub	r20, r30
    5c98:	5f 0b       	sbc	r21, r31
    5c9a:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <_ZN6String4copyEPKcj>
}
    5c9e:	df 91       	pop	r29
    5ca0:	cf 91       	pop	r28
    5ca2:	08 95       	ret

00005ca4 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    5ca4:	cf 93       	push	r28
    5ca6:	df 93       	push	r29
    5ca8:	ec 01       	movw	r28, r24
    5caa:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    5cac:	86 17       	cp	r24, r22
    5cae:	97 07       	cpc	r25, r23
    5cb0:	69 f0       	breq	.+26     	; 0x5ccc <_ZN6StringaSERKS_+0x28>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    5cb2:	20 81       	ld	r18, Z
    5cb4:	31 81       	ldd	r19, Z+1	; 0x01
    5cb6:	21 15       	cp	r18, r1
    5cb8:	31 05       	cpc	r19, r1
    5cba:	31 f0       	breq	.+12     	; 0x5cc8 <_ZN6StringaSERKS_+0x24>
    5cbc:	44 81       	ldd	r20, Z+4	; 0x04
    5cbe:	55 81       	ldd	r21, Z+5	; 0x05
    5cc0:	b9 01       	movw	r22, r18
    5cc2:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <_ZN6String4copyEPKcj>
    5cc6:	02 c0       	rjmp	.+4      	; 0x5ccc <_ZN6StringaSERKS_+0x28>
	else invalidate();
    5cc8:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_ZN6String10invalidateEv>
	
	return *this;
}
    5ccc:	8c 2f       	mov	r24, r28
    5cce:	9d 2f       	mov	r25, r29
    5cd0:	df 91       	pop	r29
    5cd2:	cf 91       	pop	r28
    5cd4:	08 95       	ret

00005cd6 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    5cd6:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5cd8:	11 82       	std	Z+1, r1	; 0x01
    5cda:	10 82       	st	Z, r1
	capacity = 0;
    5cdc:	13 82       	std	Z+3, r1	; 0x03
    5cde:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5ce0:	15 82       	std	Z+5, r1	; 0x05
    5ce2:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    5ce4:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    5ce6:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <_ZN6StringaSERKS_>
}
    5cea:	08 95       	ret

00005cec <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    5cec:	cf 93       	push	r28
    5cee:	df 93       	push	r29
    5cf0:	c8 2f       	mov	r28, r24
    5cf2:	d9 2f       	mov	r29, r25
	if (cstr) copy(cstr, strlen(cstr));
    5cf4:	61 15       	cp	r22, r1
    5cf6:	71 05       	cpc	r23, r1
    5cf8:	71 f0       	breq	.+28     	; 0x5d16 <_ZN6StringaSEPKc+0x2a>
    5cfa:	e6 2f       	mov	r30, r22
    5cfc:	f7 2f       	mov	r31, r23
    5cfe:	df 01       	movw	r26, r30
    5d00:	0d 90       	ld	r0, X+
    5d02:	00 20       	and	r0, r0
    5d04:	e9 f7       	brne	.-6      	; 0x5d00 <_ZN6StringaSEPKc+0x14>
    5d06:	ad 01       	movw	r20, r26
    5d08:	41 50       	subi	r20, 0x01	; 1
    5d0a:	50 40       	sbci	r21, 0x00	; 0
    5d0c:	4e 1b       	sub	r20, r30
    5d0e:	5f 0b       	sbc	r21, r31
    5d10:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <_ZN6String4copyEPKcj>
    5d14:	02 c0       	rjmp	.+4      	; 0x5d1a <_ZN6StringaSEPKc+0x2e>
	else invalidate();
    5d16:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_ZN6String10invalidateEv>
	
	return *this;
}
    5d1a:	8c 2f       	mov	r24, r28
    5d1c:	9d 2f       	mov	r25, r29
    5d1e:	df 91       	pop	r29
    5d20:	cf 91       	pop	r28
    5d22:	08 95       	ret

00005d24 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    5d24:	0f 93       	push	r16
    5d26:	1f 93       	push	r17
    5d28:	cf 93       	push	r28
    5d2a:	df 93       	push	r29
    5d2c:	cd b7       	in	r28, 0x3d	; 61
    5d2e:	de b7       	in	r29, 0x3e	; 62
    5d30:	a1 97       	sbiw	r28, 0x21	; 33
    5d32:	0f b6       	in	r0, 0x3f	; 63
    5d34:	f8 94       	cli
    5d36:	de bf       	out	0x3e, r29	; 62
    5d38:	0f be       	out	0x3f, r0	; 63
    5d3a:	cd bf       	out	0x3d, r28	; 61
    5d3c:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5d3e:	fc 01       	movw	r30, r24
    5d40:	11 82       	std	Z+1, r1	; 0x01
    5d42:	10 82       	st	Z, r1
	capacity = 0;
    5d44:	13 82       	std	Z+3, r1	; 0x03
    5d46:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5d48:	15 82       	std	Z+5, r1	; 0x05
    5d4a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    5d4c:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    5d4e:	cb 01       	movw	r24, r22
    5d50:	ba 01       	movw	r22, r20
    5d52:	ae 01       	movw	r20, r28
    5d54:	4f 5f       	subi	r20, 0xFF	; 255
    5d56:	5f 4f       	sbci	r21, 0xFF	; 255
    5d58:	30 e0       	ldi	r19, 0x00	; 0
    5d5a:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ultoa>
	*this = buf;
    5d5e:	c8 01       	movw	r24, r16
    5d60:	be 01       	movw	r22, r28
    5d62:	6f 5f       	subi	r22, 0xFF	; 255
    5d64:	7f 4f       	sbci	r23, 0xFF	; 255
    5d66:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_ZN6StringaSEPKc>
}
    5d6a:	a1 96       	adiw	r28, 0x21	; 33
    5d6c:	0f b6       	in	r0, 0x3f	; 63
    5d6e:	f8 94       	cli
    5d70:	de bf       	out	0x3e, r29	; 62
    5d72:	0f be       	out	0x3f, r0	; 63
    5d74:	cd bf       	out	0x3d, r28	; 61
    5d76:	df 91       	pop	r29
    5d78:	cf 91       	pop	r28
    5d7a:	1f 91       	pop	r17
    5d7c:	0f 91       	pop	r16
    5d7e:	08 95       	ret

00005d80 <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    5d80:	0f 93       	push	r16
    5d82:	1f 93       	push	r17
    5d84:	cf 93       	push	r28
    5d86:	df 93       	push	r29
    5d88:	cd b7       	in	r28, 0x3d	; 61
    5d8a:	de b7       	in	r29, 0x3e	; 62
    5d8c:	a2 97       	sbiw	r28, 0x22	; 34
    5d8e:	0f b6       	in	r0, 0x3f	; 63
    5d90:	f8 94       	cli
    5d92:	de bf       	out	0x3e, r29	; 62
    5d94:	0f be       	out	0x3f, r0	; 63
    5d96:	cd bf       	out	0x3d, r28	; 61
    5d98:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5d9a:	fc 01       	movw	r30, r24
    5d9c:	11 82       	std	Z+1, r1	; 0x01
    5d9e:	10 82       	st	Z, r1
	capacity = 0;
    5da0:	13 82       	std	Z+3, r1	; 0x03
    5da2:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5da4:	15 82       	std	Z+5, r1	; 0x05
    5da6:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    5da8:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    5daa:	cb 01       	movw	r24, r22
    5dac:	ba 01       	movw	r22, r20
    5dae:	ae 01       	movw	r20, r28
    5db0:	4f 5f       	subi	r20, 0xFF	; 255
    5db2:	5f 4f       	sbci	r21, 0xFF	; 255
    5db4:	30 e0       	ldi	r19, 0x00	; 0
    5db6:	0e 94 e6 4e 	call	0x9dcc	; 0x9dcc <ltoa>
	*this = buf;
    5dba:	c8 01       	movw	r24, r16
    5dbc:	be 01       	movw	r22, r28
    5dbe:	6f 5f       	subi	r22, 0xFF	; 255
    5dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    5dc2:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_ZN6StringaSEPKc>
}
    5dc6:	a2 96       	adiw	r28, 0x22	; 34
    5dc8:	0f b6       	in	r0, 0x3f	; 63
    5dca:	f8 94       	cli
    5dcc:	de bf       	out	0x3e, r29	; 62
    5dce:	0f be       	out	0x3f, r0	; 63
    5dd0:	cd bf       	out	0x3d, r28	; 61
    5dd2:	df 91       	pop	r29
    5dd4:	cf 91       	pop	r28
    5dd6:	1f 91       	pop	r17
    5dd8:	0f 91       	pop	r16
    5dda:	08 95       	ret

00005ddc <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    5ddc:	0f 93       	push	r16
    5dde:	1f 93       	push	r17
    5de0:	cf 93       	push	r28
    5de2:	df 93       	push	r29
    5de4:	cd b7       	in	r28, 0x3d	; 61
    5de6:	de b7       	in	r29, 0x3e	; 62
    5de8:	61 97       	sbiw	r28, 0x11	; 17
    5dea:	0f b6       	in	r0, 0x3f	; 63
    5dec:	f8 94       	cli
    5dee:	de bf       	out	0x3e, r29	; 62
    5df0:	0f be       	out	0x3f, r0	; 63
    5df2:	cd bf       	out	0x3d, r28	; 61
    5df4:	8c 01       	movw	r16, r24
    5df6:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5df8:	f8 01       	movw	r30, r16
    5dfa:	11 82       	std	Z+1, r1	; 0x01
    5dfc:	10 82       	st	Z, r1
	capacity = 0;
    5dfe:	13 82       	std	Z+3, r1	; 0x03
    5e00:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5e02:	15 82       	std	Z+5, r1	; 0x05
    5e04:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    5e06:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    5e08:	be 01       	movw	r22, r28
    5e0a:	6f 5f       	subi	r22, 0xFF	; 255
    5e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e0e:	50 e0       	ldi	r21, 0x00	; 0
    5e10:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <utoa>
	*this = buf;
    5e14:	c8 01       	movw	r24, r16
    5e16:	be 01       	movw	r22, r28
    5e18:	6f 5f       	subi	r22, 0xFF	; 255
    5e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    5e1c:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_ZN6StringaSEPKc>
}
    5e20:	61 96       	adiw	r28, 0x11	; 17
    5e22:	0f b6       	in	r0, 0x3f	; 63
    5e24:	f8 94       	cli
    5e26:	de bf       	out	0x3e, r29	; 62
    5e28:	0f be       	out	0x3f, r0	; 63
    5e2a:	cd bf       	out	0x3d, r28	; 61
    5e2c:	df 91       	pop	r29
    5e2e:	cf 91       	pop	r28
    5e30:	1f 91       	pop	r17
    5e32:	0f 91       	pop	r16
    5e34:	08 95       	ret

00005e36 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    5e36:	0f 93       	push	r16
    5e38:	1f 93       	push	r17
    5e3a:	cf 93       	push	r28
    5e3c:	df 93       	push	r29
    5e3e:	cd b7       	in	r28, 0x3d	; 61
    5e40:	de b7       	in	r29, 0x3e	; 62
    5e42:	62 97       	sbiw	r28, 0x12	; 18
    5e44:	0f b6       	in	r0, 0x3f	; 63
    5e46:	f8 94       	cli
    5e48:	de bf       	out	0x3e, r29	; 62
    5e4a:	0f be       	out	0x3f, r0	; 63
    5e4c:	cd bf       	out	0x3d, r28	; 61
    5e4e:	8c 01       	movw	r16, r24
    5e50:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5e52:	f8 01       	movw	r30, r16
    5e54:	11 82       	std	Z+1, r1	; 0x01
    5e56:	10 82       	st	Z, r1
	capacity = 0;
    5e58:	13 82       	std	Z+3, r1	; 0x03
    5e5a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5e5c:	15 82       	std	Z+5, r1	; 0x05
    5e5e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    5e60:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    5e62:	be 01       	movw	r22, r28
    5e64:	6f 5f       	subi	r22, 0xFF	; 255
    5e66:	7f 4f       	sbci	r23, 0xFF	; 255
    5e68:	50 e0       	ldi	r21, 0x00	; 0
    5e6a:	0e 94 c5 4e 	call	0x9d8a	; 0x9d8a <itoa>
	*this = buf;
    5e6e:	c8 01       	movw	r24, r16
    5e70:	be 01       	movw	r22, r28
    5e72:	6f 5f       	subi	r22, 0xFF	; 255
    5e74:	7f 4f       	sbci	r23, 0xFF	; 255
    5e76:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_ZN6StringaSEPKc>
}
    5e7a:	62 96       	adiw	r28, 0x12	; 18
    5e7c:	0f b6       	in	r0, 0x3f	; 63
    5e7e:	f8 94       	cli
    5e80:	de bf       	out	0x3e, r29	; 62
    5e82:	0f be       	out	0x3f, r0	; 63
    5e84:	cd bf       	out	0x3d, r28	; 61
    5e86:	df 91       	pop	r29
    5e88:	cf 91       	pop	r28
    5e8a:	1f 91       	pop	r17
    5e8c:	0f 91       	pop	r16
    5e8e:	08 95       	ret

00005e90 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    5e90:	0f 93       	push	r16
    5e92:	1f 93       	push	r17
    5e94:	cf 93       	push	r28
    5e96:	df 93       	push	r29
    5e98:	cd b7       	in	r28, 0x3d	; 61
    5e9a:	de b7       	in	r29, 0x3e	; 62
    5e9c:	29 97       	sbiw	r28, 0x09	; 9
    5e9e:	0f b6       	in	r0, 0x3f	; 63
    5ea0:	f8 94       	cli
    5ea2:	de bf       	out	0x3e, r29	; 62
    5ea4:	0f be       	out	0x3f, r0	; 63
    5ea6:	cd bf       	out	0x3d, r28	; 61
    5ea8:	8c 01       	movw	r16, r24
    5eaa:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5eac:	f8 01       	movw	r30, r16
    5eae:	11 82       	std	Z+1, r1	; 0x01
    5eb0:	10 82       	st	Z, r1
	capacity = 0;
    5eb2:	13 82       	std	Z+3, r1	; 0x03
    5eb4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5eb6:	15 82       	std	Z+5, r1	; 0x05
    5eb8:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    5eba:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	be 01       	movw	r22, r28
    5ec0:	6f 5f       	subi	r22, 0xFF	; 255
    5ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ec4:	50 e0       	ldi	r21, 0x00	; 0
    5ec6:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <utoa>
	*this = buf;
    5eca:	c8 01       	movw	r24, r16
    5ecc:	be 01       	movw	r22, r28
    5ece:	6f 5f       	subi	r22, 0xFF	; 255
    5ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ed2:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_ZN6StringaSEPKc>
}
    5ed6:	29 96       	adiw	r28, 0x09	; 9
    5ed8:	0f b6       	in	r0, 0x3f	; 63
    5eda:	f8 94       	cli
    5edc:	de bf       	out	0x3e, r29	; 62
    5ede:	0f be       	out	0x3f, r0	; 63
    5ee0:	cd bf       	out	0x3d, r28	; 61
    5ee2:	df 91       	pop	r29
    5ee4:	cf 91       	pop	r28
    5ee6:	1f 91       	pop	r17
    5ee8:	0f 91       	pop	r16
    5eea:	08 95       	ret

00005eec <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    5eec:	cf 93       	push	r28
    5eee:	df 93       	push	r29
    5ef0:	0f 92       	push	r0
    5ef2:	0f 92       	push	r0
    5ef4:	cd b7       	in	r28, 0x3d	; 61
    5ef6:	de b7       	in	r29, 0x3e	; 62
    5ef8:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5efa:	11 82       	std	Z+1, r1	; 0x01
    5efc:	10 82       	st	Z, r1
	capacity = 0;
    5efe:	13 82       	std	Z+3, r1	; 0x03
    5f00:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5f02:	15 82       	std	Z+5, r1	; 0x05
    5f04:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    5f06:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    5f08:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    5f0a:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    5f0c:	be 01       	movw	r22, r28
    5f0e:	6f 5f       	subi	r22, 0xFF	; 255
    5f10:	7f 4f       	sbci	r23, 0xFF	; 255
    5f12:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_ZN6StringaSEPKc>
}
    5f16:	0f 90       	pop	r0
    5f18:	0f 90       	pop	r0
    5f1a:	df 91       	pop	r29
    5f1c:	cf 91       	pop	r28
    5f1e:	08 95       	ret

00005f20 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    5f20:	ef 92       	push	r14
    5f22:	ff 92       	push	r15
    5f24:	0f 93       	push	r16
    5f26:	1f 93       	push	r17
    5f28:	cf 93       	push	r28
    5f2a:	df 93       	push	r29
    5f2c:	8c 01       	movw	r16, r24
    5f2e:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    5f30:	fc 01       	movw	r30, r24
    5f32:	c4 81       	ldd	r28, Z+4	; 0x04
    5f34:	d5 81       	ldd	r29, Z+5	; 0x05
	if (!cstr) return 0;
    5f36:	61 15       	cp	r22, r1
    5f38:	71 05       	cpc	r23, r1
    5f3a:	c9 f0       	breq	.+50     	; 0x5f6e <_ZN6String6concatEPKcj+0x4e>
	if (length == 0) return 1;
    5f3c:	41 15       	cp	r20, r1
    5f3e:	51 05       	cpc	r21, r1
    5f40:	c1 f0       	breq	.+48     	; 0x5f72 <_ZN6String6concatEPKcj+0x52>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    5f42:	c4 0f       	add	r28, r20
    5f44:	d5 1f       	adc	r29, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    5f46:	be 01       	movw	r22, r28
    5f48:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <_ZN6String7reserveEj>
    5f4c:	88 23       	and	r24, r24
    5f4e:	99 f0       	breq	.+38     	; 0x5f76 <_ZN6String6concatEPKcj+0x56>
	strcpy(buffer + len, cstr);
    5f50:	f8 01       	movw	r30, r16
    5f52:	80 81       	ld	r24, Z
    5f54:	91 81       	ldd	r25, Z+1	; 0x01
    5f56:	24 81       	ldd	r18, Z+4	; 0x04
    5f58:	35 81       	ldd	r19, Z+5	; 0x05
    5f5a:	82 0f       	add	r24, r18
    5f5c:	93 1f       	adc	r25, r19
    5f5e:	b7 01       	movw	r22, r14
    5f60:	0e 94 7c 4e 	call	0x9cf8	; 0x9cf8 <strcpy>
	len = newlen;
    5f64:	f8 01       	movw	r30, r16
    5f66:	d5 83       	std	Z+5, r29	; 0x05
    5f68:	c4 83       	std	Z+4, r28	; 0x04
	return 1;
    5f6a:	81 e0       	ldi	r24, 0x01	; 1
    5f6c:	05 c0       	rjmp	.+10     	; 0x5f78 <_ZN6String6concatEPKcj+0x58>
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
    5f6e:	80 e0       	ldi	r24, 0x00	; 0
    5f70:	03 c0       	rjmp	.+6      	; 0x5f78 <_ZN6String6concatEPKcj+0x58>
	if (length == 0) return 1;
    5f72:	81 e0       	ldi	r24, 0x01	; 1
    5f74:	01 c0       	rjmp	.+2      	; 0x5f78 <_ZN6String6concatEPKcj+0x58>
	if (!reserve(newlen)) return 0;
    5f76:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    5f78:	df 91       	pop	r29
    5f7a:	cf 91       	pop	r28
    5f7c:	1f 91       	pop	r17
    5f7e:	0f 91       	pop	r16
    5f80:	ff 90       	pop	r15
    5f82:	ef 90       	pop	r14
    5f84:	08 95       	ret

00005f86 <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    5f86:	fb 01       	movw	r30, r22
	return concat(s.buffer, s.len);
    5f88:	20 81       	ld	r18, Z
    5f8a:	31 81       	ldd	r19, Z+1	; 0x01
    5f8c:	44 81       	ldd	r20, Z+4	; 0x04
    5f8e:	55 81       	ldd	r21, Z+5	; 0x05
    5f90:	b9 01       	movw	r22, r18
    5f92:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <_ZN6String6concatEPKcj>
}
    5f96:	08 95       	ret

00005f98 <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    5f98:	61 15       	cp	r22, r1
    5f9a:	71 05       	cpc	r23, r1
    5f9c:	71 f0       	breq	.+28     	; 0x5fba <_ZN6String6concatEPKc+0x22>
	return concat(cstr, strlen(cstr));
    5f9e:	e6 2f       	mov	r30, r22
    5fa0:	f7 2f       	mov	r31, r23
    5fa2:	df 01       	movw	r26, r30
    5fa4:	0d 90       	ld	r0, X+
    5fa6:	00 20       	and	r0, r0
    5fa8:	e9 f7       	brne	.-6      	; 0x5fa4 <_ZN6String6concatEPKc+0xc>
    5faa:	ad 01       	movw	r20, r26
    5fac:	41 50       	subi	r20, 0x01	; 1
    5fae:	50 40       	sbci	r21, 0x00	; 0
    5fb0:	4e 1b       	sub	r20, r30
    5fb2:	5f 0b       	sbc	r21, r31
    5fb4:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <_ZN6String6concatEPKcj>
    5fb8:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    5fba:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
    5fbc:	08 95       	ret

00005fbe <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    5fbe:	cf 93       	push	r28
    5fc0:	df 93       	push	r29
    5fc2:	0f 92       	push	r0
    5fc4:	0f 92       	push	r0
    5fc6:	cd b7       	in	r28, 0x3d	; 61
    5fc8:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    5fca:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    5fcc:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    5fce:	be 01       	movw	r22, r28
    5fd0:	6f 5f       	subi	r22, 0xFF	; 255
    5fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    5fd4:	41 e0       	ldi	r20, 0x01	; 1
    5fd6:	50 e0       	ldi	r21, 0x00	; 0
    5fd8:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <_ZN6String6concatEPKcj>
}
    5fdc:	0f 90       	pop	r0
    5fde:	0f 90       	pop	r0
    5fe0:	df 91       	pop	r29
    5fe2:	cf 91       	pop	r28
    5fe4:	08 95       	ret

00005fe6 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    5fe6:	ef 92       	push	r14
    5fe8:	ff 92       	push	r15
    5fea:	0f 93       	push	r16
    5fec:	1f 93       	push	r17
    5fee:	cf 93       	push	r28
    5ff0:	df 93       	push	r29
    5ff2:	00 d0       	rcall	.+0      	; 0x5ff4 <_ZN6String6concatEh+0xe>
    5ff4:	0f 92       	push	r0
    5ff6:	cd b7       	in	r28, 0x3d	; 61
    5ff8:	de b7       	in	r29, 0x3e	; 62
    5ffa:	7c 01       	movw	r14, r24
    5ffc:	86 2f       	mov	r24, r22
	char buf[4];
	itoa(num, buf, 10);
    5ffe:	90 e0       	ldi	r25, 0x00	; 0
    6000:	8e 01       	movw	r16, r28
    6002:	0f 5f       	subi	r16, 0xFF	; 255
    6004:	1f 4f       	sbci	r17, 0xFF	; 255
    6006:	b8 01       	movw	r22, r16
    6008:	4a e0       	ldi	r20, 0x0A	; 10
    600a:	50 e0       	ldi	r21, 0x00	; 0
    600c:	0e 94 c5 4e 	call	0x9d8a	; 0x9d8a <itoa>
	return concat(buf, strlen(buf));
    6010:	f8 01       	movw	r30, r16
    6012:	01 90       	ld	r0, Z+
    6014:	00 20       	and	r0, r0
    6016:	e9 f7       	brne	.-6      	; 0x6012 <_ZN6String6concatEh+0x2c>
    6018:	af 01       	movw	r20, r30
    601a:	41 50       	subi	r20, 0x01	; 1
    601c:	50 40       	sbci	r21, 0x00	; 0
    601e:	40 1b       	sub	r20, r16
    6020:	51 0b       	sbc	r21, r17
    6022:	c7 01       	movw	r24, r14
    6024:	b8 01       	movw	r22, r16
    6026:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <_ZN6String6concatEPKcj>
}
    602a:	0f 90       	pop	r0
    602c:	0f 90       	pop	r0
    602e:	0f 90       	pop	r0
    6030:	0f 90       	pop	r0
    6032:	df 91       	pop	r29
    6034:	cf 91       	pop	r28
    6036:	1f 91       	pop	r17
    6038:	0f 91       	pop	r16
    603a:	ff 90       	pop	r15
    603c:	ef 90       	pop	r14
    603e:	08 95       	ret

00006040 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    6040:	ef 92       	push	r14
    6042:	ff 92       	push	r15
    6044:	0f 93       	push	r16
    6046:	1f 93       	push	r17
    6048:	cf 93       	push	r28
    604a:	df 93       	push	r29
    604c:	cd b7       	in	r28, 0x3d	; 61
    604e:	de b7       	in	r29, 0x3e	; 62
    6050:	27 97       	sbiw	r28, 0x07	; 7
    6052:	0f b6       	in	r0, 0x3f	; 63
    6054:	f8 94       	cli
    6056:	de bf       	out	0x3e, r29	; 62
    6058:	0f be       	out	0x3f, r0	; 63
    605a:	cd bf       	out	0x3d, r28	; 61
    605c:	7c 01       	movw	r14, r24
    605e:	cb 01       	movw	r24, r22
	char buf[7];
	itoa(num, buf, 10);
    6060:	8e 01       	movw	r16, r28
    6062:	0f 5f       	subi	r16, 0xFF	; 255
    6064:	1f 4f       	sbci	r17, 0xFF	; 255
    6066:	b8 01       	movw	r22, r16
    6068:	4a e0       	ldi	r20, 0x0A	; 10
    606a:	50 e0       	ldi	r21, 0x00	; 0
    606c:	0e 94 c5 4e 	call	0x9d8a	; 0x9d8a <itoa>
	return concat(buf, strlen(buf));
    6070:	f8 01       	movw	r30, r16
    6072:	01 90       	ld	r0, Z+
    6074:	00 20       	and	r0, r0
    6076:	e9 f7       	brne	.-6      	; 0x6072 <_ZN6String6concatEi+0x32>
    6078:	af 01       	movw	r20, r30
    607a:	41 50       	subi	r20, 0x01	; 1
    607c:	50 40       	sbci	r21, 0x00	; 0
    607e:	40 1b       	sub	r20, r16
    6080:	51 0b       	sbc	r21, r17
    6082:	c7 01       	movw	r24, r14
    6084:	b8 01       	movw	r22, r16
    6086:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <_ZN6String6concatEPKcj>
}
    608a:	27 96       	adiw	r28, 0x07	; 7
    608c:	0f b6       	in	r0, 0x3f	; 63
    608e:	f8 94       	cli
    6090:	de bf       	out	0x3e, r29	; 62
    6092:	0f be       	out	0x3f, r0	; 63
    6094:	cd bf       	out	0x3d, r28	; 61
    6096:	df 91       	pop	r29
    6098:	cf 91       	pop	r28
    609a:	1f 91       	pop	r17
    609c:	0f 91       	pop	r16
    609e:	ff 90       	pop	r15
    60a0:	ef 90       	pop	r14
    60a2:	08 95       	ret

000060a4 <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    60a4:	ef 92       	push	r14
    60a6:	ff 92       	push	r15
    60a8:	0f 93       	push	r16
    60aa:	1f 93       	push	r17
    60ac:	cf 93       	push	r28
    60ae:	df 93       	push	r29
    60b0:	00 d0       	rcall	.+0      	; 0x60b2 <_ZN6String6concatEj+0xe>
    60b2:	00 d0       	rcall	.+0      	; 0x60b4 <_ZN6String6concatEj+0x10>
    60b4:	cd b7       	in	r28, 0x3d	; 61
    60b6:	de b7       	in	r29, 0x3e	; 62
    60b8:	7c 01       	movw	r14, r24
    60ba:	cb 01       	movw	r24, r22
	char buf[6];
	utoa(num, buf, 10);
    60bc:	8e 01       	movw	r16, r28
    60be:	0f 5f       	subi	r16, 0xFF	; 255
    60c0:	1f 4f       	sbci	r17, 0xFF	; 255
    60c2:	b8 01       	movw	r22, r16
    60c4:	4a e0       	ldi	r20, 0x0A	; 10
    60c6:	50 e0       	ldi	r21, 0x00	; 0
    60c8:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <utoa>
	return concat(buf, strlen(buf));
    60cc:	f8 01       	movw	r30, r16
    60ce:	01 90       	ld	r0, Z+
    60d0:	00 20       	and	r0, r0
    60d2:	e9 f7       	brne	.-6      	; 0x60ce <_ZN6String6concatEj+0x2a>
    60d4:	af 01       	movw	r20, r30
    60d6:	41 50       	subi	r20, 0x01	; 1
    60d8:	50 40       	sbci	r21, 0x00	; 0
    60da:	40 1b       	sub	r20, r16
    60dc:	51 0b       	sbc	r21, r17
    60de:	c7 01       	movw	r24, r14
    60e0:	b8 01       	movw	r22, r16
    60e2:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <_ZN6String6concatEPKcj>
}
    60e6:	26 96       	adiw	r28, 0x06	; 6
    60e8:	0f b6       	in	r0, 0x3f	; 63
    60ea:	f8 94       	cli
    60ec:	de bf       	out	0x3e, r29	; 62
    60ee:	0f be       	out	0x3f, r0	; 63
    60f0:	cd bf       	out	0x3d, r28	; 61
    60f2:	df 91       	pop	r29
    60f4:	cf 91       	pop	r28
    60f6:	1f 91       	pop	r17
    60f8:	0f 91       	pop	r16
    60fa:	ff 90       	pop	r15
    60fc:	ef 90       	pop	r14
    60fe:	08 95       	ret

00006100 <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    6100:	ef 92       	push	r14
    6102:	ff 92       	push	r15
    6104:	0f 93       	push	r16
    6106:	1f 93       	push	r17
    6108:	cf 93       	push	r28
    610a:	df 93       	push	r29
    610c:	cd b7       	in	r28, 0x3d	; 61
    610e:	de b7       	in	r29, 0x3e	; 62
    6110:	2c 97       	sbiw	r28, 0x0c	; 12
    6112:	0f b6       	in	r0, 0x3f	; 63
    6114:	f8 94       	cli
    6116:	de bf       	out	0x3e, r29	; 62
    6118:	0f be       	out	0x3f, r0	; 63
    611a:	cd bf       	out	0x3d, r28	; 61
    611c:	7c 01       	movw	r14, r24
	char buf[12];
	ltoa(num, buf, 10);
    611e:	cb 01       	movw	r24, r22
    6120:	ba 01       	movw	r22, r20
    6122:	8e 01       	movw	r16, r28
    6124:	0f 5f       	subi	r16, 0xFF	; 255
    6126:	1f 4f       	sbci	r17, 0xFF	; 255
    6128:	a8 01       	movw	r20, r16
    612a:	2a e0       	ldi	r18, 0x0A	; 10
    612c:	30 e0       	ldi	r19, 0x00	; 0
    612e:	0e 94 e6 4e 	call	0x9dcc	; 0x9dcc <ltoa>
	return concat(buf, strlen(buf));
    6132:	f8 01       	movw	r30, r16
    6134:	01 90       	ld	r0, Z+
    6136:	00 20       	and	r0, r0
    6138:	e9 f7       	brne	.-6      	; 0x6134 <_ZN6String6concatEl+0x34>
    613a:	af 01       	movw	r20, r30
    613c:	41 50       	subi	r20, 0x01	; 1
    613e:	50 40       	sbci	r21, 0x00	; 0
    6140:	40 1b       	sub	r20, r16
    6142:	51 0b       	sbc	r21, r17
    6144:	c7 01       	movw	r24, r14
    6146:	b8 01       	movw	r22, r16
    6148:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <_ZN6String6concatEPKcj>
}
    614c:	2c 96       	adiw	r28, 0x0c	; 12
    614e:	0f b6       	in	r0, 0x3f	; 63
    6150:	f8 94       	cli
    6152:	de bf       	out	0x3e, r29	; 62
    6154:	0f be       	out	0x3f, r0	; 63
    6156:	cd bf       	out	0x3d, r28	; 61
    6158:	df 91       	pop	r29
    615a:	cf 91       	pop	r28
    615c:	1f 91       	pop	r17
    615e:	0f 91       	pop	r16
    6160:	ff 90       	pop	r15
    6162:	ef 90       	pop	r14
    6164:	08 95       	ret

00006166 <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    6166:	ef 92       	push	r14
    6168:	ff 92       	push	r15
    616a:	0f 93       	push	r16
    616c:	1f 93       	push	r17
    616e:	cf 93       	push	r28
    6170:	df 93       	push	r29
    6172:	cd b7       	in	r28, 0x3d	; 61
    6174:	de b7       	in	r29, 0x3e	; 62
    6176:	2b 97       	sbiw	r28, 0x0b	; 11
    6178:	0f b6       	in	r0, 0x3f	; 63
    617a:	f8 94       	cli
    617c:	de bf       	out	0x3e, r29	; 62
    617e:	0f be       	out	0x3f, r0	; 63
    6180:	cd bf       	out	0x3d, r28	; 61
    6182:	7c 01       	movw	r14, r24
	char buf[11];
	ultoa(num, buf, 10);
    6184:	cb 01       	movw	r24, r22
    6186:	ba 01       	movw	r22, r20
    6188:	8e 01       	movw	r16, r28
    618a:	0f 5f       	subi	r16, 0xFF	; 255
    618c:	1f 4f       	sbci	r17, 0xFF	; 255
    618e:	a8 01       	movw	r20, r16
    6190:	2a e0       	ldi	r18, 0x0A	; 10
    6192:	30 e0       	ldi	r19, 0x00	; 0
    6194:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ultoa>
	return concat(buf, strlen(buf));
    6198:	f8 01       	movw	r30, r16
    619a:	01 90       	ld	r0, Z+
    619c:	00 20       	and	r0, r0
    619e:	e9 f7       	brne	.-6      	; 0x619a <_ZN6String6concatEm+0x34>
    61a0:	af 01       	movw	r20, r30
    61a2:	41 50       	subi	r20, 0x01	; 1
    61a4:	50 40       	sbci	r21, 0x00	; 0
    61a6:	40 1b       	sub	r20, r16
    61a8:	51 0b       	sbc	r21, r17
    61aa:	c7 01       	movw	r24, r14
    61ac:	b8 01       	movw	r22, r16
    61ae:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <_ZN6String6concatEPKcj>
}
    61b2:	2b 96       	adiw	r28, 0x0b	; 11
    61b4:	0f b6       	in	r0, 0x3f	; 63
    61b6:	f8 94       	cli
    61b8:	de bf       	out	0x3e, r29	; 62
    61ba:	0f be       	out	0x3f, r0	; 63
    61bc:	cd bf       	out	0x3d, r28	; 61
    61be:	df 91       	pop	r29
    61c0:	cf 91       	pop	r28
    61c2:	1f 91       	pop	r17
    61c4:	0f 91       	pop	r16
    61c6:	ff 90       	pop	r15
    61c8:	ef 90       	pop	r14
    61ca:	08 95       	ret

000061cc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    61cc:	cf 93       	push	r28
    61ce:	df 93       	push	r29
    61d0:	c8 2f       	mov	r28, r24
    61d2:	d9 2f       	mov	r29, r25
    61d4:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    61d6:	20 81       	ld	r18, Z
    61d8:	31 81       	ldd	r19, Z+1	; 0x01
    61da:	44 81       	ldd	r20, Z+4	; 0x04
    61dc:	55 81       	ldd	r21, Z+5	; 0x05
    61de:	b9 01       	movw	r22, r18
    61e0:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <_ZN6String6concatEPKcj>
    61e4:	88 23       	and	r24, r24
    61e6:	21 f4       	brne	.+8      	; 0x61f0 <_ZplRK15StringSumHelperRK6String+0x24>
    61e8:	8c 2f       	mov	r24, r28
    61ea:	9d 2f       	mov	r25, r29
    61ec:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_ZN6String10invalidateEv>
	return a;
}
    61f0:	8c 2f       	mov	r24, r28
    61f2:	9d 2f       	mov	r25, r29
    61f4:	df 91       	pop	r29
    61f6:	cf 91       	pop	r28
    61f8:	08 95       	ret

000061fa <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    61fa:	cf 93       	push	r28
    61fc:	df 93       	push	r29
    61fe:	c8 2f       	mov	r28, r24
    6200:	d9 2f       	mov	r29, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    6202:	61 15       	cp	r22, r1
    6204:	71 05       	cpc	r23, r1
    6206:	79 f0       	breq	.+30     	; 0x6226 <_ZplRK15StringSumHelperPKc+0x2c>
    6208:	e6 2f       	mov	r30, r22
    620a:	f7 2f       	mov	r31, r23
    620c:	df 01       	movw	r26, r30
    620e:	0d 90       	ld	r0, X+
    6210:	00 20       	and	r0, r0
    6212:	e9 f7       	brne	.-6      	; 0x620e <_ZplRK15StringSumHelperPKc+0x14>
    6214:	ad 01       	movw	r20, r26
    6216:	41 50       	subi	r20, 0x01	; 1
    6218:	50 40       	sbci	r21, 0x00	; 0
    621a:	4e 1b       	sub	r20, r30
    621c:	5f 0b       	sbc	r21, r31
    621e:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <_ZN6String6concatEPKcj>
    6222:	88 23       	and	r24, r24
    6224:	21 f4       	brne	.+8      	; 0x622e <_ZplRK15StringSumHelperPKc+0x34>
    6226:	8c 2f       	mov	r24, r28
    6228:	9d 2f       	mov	r25, r29
    622a:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_ZN6String10invalidateEv>
	return a;
}
    622e:	8c 2f       	mov	r24, r28
    6230:	9d 2f       	mov	r25, r29
    6232:	df 91       	pop	r29
    6234:	cf 91       	pop	r28
    6236:	08 95       	ret

00006238 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    6238:	cf 93       	push	r28
    623a:	df 93       	push	r29
    623c:	d8 2f       	mov	r29, r24
    623e:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    6240:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <_ZN6String6concatEc>
    6244:	88 23       	and	r24, r24
    6246:	21 f4       	brne	.+8      	; 0x6250 <_ZplRK15StringSumHelperc+0x18>
    6248:	8d 2f       	mov	r24, r29
    624a:	9c 2f       	mov	r25, r28
    624c:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_ZN6String10invalidateEv>
	return a;
}
    6250:	8d 2f       	mov	r24, r29
    6252:	9c 2f       	mov	r25, r28
    6254:	df 91       	pop	r29
    6256:	cf 91       	pop	r28
    6258:	08 95       	ret

0000625a <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    625a:	cf 93       	push	r28
    625c:	df 93       	push	r29
    625e:	d8 2f       	mov	r29, r24
    6260:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    6262:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <_ZN6String6concatEh>
    6266:	88 23       	and	r24, r24
    6268:	21 f4       	brne	.+8      	; 0x6272 <_ZplRK15StringSumHelperh+0x18>
    626a:	8d 2f       	mov	r24, r29
    626c:	9c 2f       	mov	r25, r28
    626e:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_ZN6String10invalidateEv>
	return a;
}
    6272:	8d 2f       	mov	r24, r29
    6274:	9c 2f       	mov	r25, r28
    6276:	df 91       	pop	r29
    6278:	cf 91       	pop	r28
    627a:	08 95       	ret

0000627c <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    627c:	cf 93       	push	r28
    627e:	df 93       	push	r29
    6280:	d8 2f       	mov	r29, r24
    6282:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    6284:	0e 94 20 30 	call	0x6040	; 0x6040 <_ZN6String6concatEi>
    6288:	88 23       	and	r24, r24
    628a:	21 f4       	brne	.+8      	; 0x6294 <_ZplRK15StringSumHelperi+0x18>
    628c:	8d 2f       	mov	r24, r29
    628e:	9c 2f       	mov	r25, r28
    6290:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_ZN6String10invalidateEv>
	return a;
}
    6294:	8d 2f       	mov	r24, r29
    6296:	9c 2f       	mov	r25, r28
    6298:	df 91       	pop	r29
    629a:	cf 91       	pop	r28
    629c:	08 95       	ret

0000629e <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    629e:	cf 93       	push	r28
    62a0:	df 93       	push	r29
    62a2:	d8 2f       	mov	r29, r24
    62a4:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    62a6:	0e 94 52 30 	call	0x60a4	; 0x60a4 <_ZN6String6concatEj>
    62aa:	88 23       	and	r24, r24
    62ac:	21 f4       	brne	.+8      	; 0x62b6 <_ZplRK15StringSumHelperj+0x18>
    62ae:	8d 2f       	mov	r24, r29
    62b0:	9c 2f       	mov	r25, r28
    62b2:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_ZN6String10invalidateEv>
	return a;
}
    62b6:	8d 2f       	mov	r24, r29
    62b8:	9c 2f       	mov	r25, r28
    62ba:	df 91       	pop	r29
    62bc:	cf 91       	pop	r28
    62be:	08 95       	ret

000062c0 <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    62c0:	cf 93       	push	r28
    62c2:	df 93       	push	r29
    62c4:	d8 2f       	mov	r29, r24
    62c6:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    62c8:	0e 94 80 30 	call	0x6100	; 0x6100 <_ZN6String6concatEl>
    62cc:	88 23       	and	r24, r24
    62ce:	21 f4       	brne	.+8      	; 0x62d8 <_ZplRK15StringSumHelperl+0x18>
    62d0:	8d 2f       	mov	r24, r29
    62d2:	9c 2f       	mov	r25, r28
    62d4:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_ZN6String10invalidateEv>
	return a;
}
    62d8:	8d 2f       	mov	r24, r29
    62da:	9c 2f       	mov	r25, r28
    62dc:	df 91       	pop	r29
    62de:	cf 91       	pop	r28
    62e0:	08 95       	ret

000062e2 <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    62e2:	cf 93       	push	r28
    62e4:	df 93       	push	r29
    62e6:	d8 2f       	mov	r29, r24
    62e8:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    62ea:	0e 94 b3 30 	call	0x6166	; 0x6166 <_ZN6String6concatEm>
    62ee:	88 23       	and	r24, r24
    62f0:	21 f4       	brne	.+8      	; 0x62fa <_ZplRK15StringSumHelperm+0x18>
    62f2:	8d 2f       	mov	r24, r29
    62f4:	9c 2f       	mov	r25, r28
    62f6:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <_ZN6String10invalidateEv>
	return a;
}
    62fa:	8d 2f       	mov	r24, r29
    62fc:	9c 2f       	mov	r25, r28
    62fe:	df 91       	pop	r29
    6300:	cf 91       	pop	r28
    6302:	08 95       	ret

00006304 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    6304:	dc 01       	movw	r26, r24
    6306:	fb 01       	movw	r30, r22
	if (!buffer || !s.buffer) {
    6308:	8d 91       	ld	r24, X+
    630a:	9c 91       	ld	r25, X
    630c:	11 97       	sbiw	r26, 0x01	; 1
    630e:	00 97       	sbiw	r24, 0x00	; 0
    6310:	31 f0       	breq	.+12     	; 0x631e <_ZNK6String9compareToERKS_+0x1a>
    6312:	60 81       	ld	r22, Z
    6314:	71 81       	ldd	r23, Z+1	; 0x01
    6316:	61 15       	cp	r22, r1
    6318:	71 05       	cpc	r23, r1
    631a:	d1 f4       	brne	.+52     	; 0x6350 <_ZNK6String9compareToERKS_+0x4c>
    631c:	0e c0       	rjmp	.+28     	; 0x633a <_ZNK6String9compareToERKS_+0x36>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    631e:	a0 81       	ld	r26, Z
    6320:	b1 81       	ldd	r27, Z+1	; 0x01
    6322:	10 97       	sbiw	r26, 0x00	; 0
    6324:	d1 f0       	breq	.+52     	; 0x635a <_ZNK6String9compareToERKS_+0x56>
    6326:	84 81       	ldd	r24, Z+4	; 0x04
    6328:	95 81       	ldd	r25, Z+5	; 0x05
    632a:	00 97       	sbiw	r24, 0x00	; 0
    632c:	c9 f0       	breq	.+50     	; 0x6360 <_ZNK6String9compareToERKS_+0x5c>
    632e:	2c 91       	ld	r18, X
    6330:	30 e0       	ldi	r19, 0x00	; 0
    6332:	30 95       	com	r19
    6334:	21 95       	neg	r18
    6336:	3f 4f       	sbci	r19, 0xFF	; 255
    6338:	18 c0       	rjmp	.+48     	; 0x636a <_ZNK6String9compareToERKS_+0x66>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    633a:	14 96       	adiw	r26, 0x04	; 4
    633c:	2d 91       	ld	r18, X+
    633e:	3c 91       	ld	r19, X
    6340:	15 97       	sbiw	r26, 0x05	; 5
    6342:	21 15       	cp	r18, r1
    6344:	31 05       	cpc	r19, r1
    6346:	79 f0       	breq	.+30     	; 0x6366 <_ZNK6String9compareToERKS_+0x62>
    6348:	fc 01       	movw	r30, r24
    634a:	20 81       	ld	r18, Z
    634c:	30 e0       	ldi	r19, 0x00	; 0
    634e:	0d c0       	rjmp	.+26     	; 0x636a <_ZNK6String9compareToERKS_+0x66>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    6350:	0e 94 73 4e 	call	0x9ce6	; 0x9ce6 <strcmp>
    6354:	28 2f       	mov	r18, r24
    6356:	39 2f       	mov	r19, r25
    6358:	08 c0       	rjmp	.+16     	; 0x636a <_ZNK6String9compareToERKS_+0x66>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    635a:	20 e0       	ldi	r18, 0x00	; 0
    635c:	30 e0       	ldi	r19, 0x00	; 0
    635e:	05 c0       	rjmp	.+10     	; 0x636a <_ZNK6String9compareToERKS_+0x66>
    6360:	20 e0       	ldi	r18, 0x00	; 0
    6362:	30 e0       	ldi	r19, 0x00	; 0
    6364:	02 c0       	rjmp	.+4      	; 0x636a <_ZNK6String9compareToERKS_+0x66>
    6366:	20 e0       	ldi	r18, 0x00	; 0
    6368:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    636a:	82 2f       	mov	r24, r18
    636c:	93 2f       	mov	r25, r19
    636e:	08 95       	ret

00006370 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    6370:	fc 01       	movw	r30, r24
    6372:	24 81       	ldd	r18, Z+4	; 0x04
    6374:	35 81       	ldd	r19, Z+5	; 0x05
    6376:	fb 01       	movw	r30, r22
    6378:	44 81       	ldd	r20, Z+4	; 0x04
    637a:	55 81       	ldd	r21, Z+5	; 0x05
    637c:	24 17       	cp	r18, r20
    637e:	35 07       	cpc	r19, r21
    6380:	39 f4       	brne	.+14     	; 0x6390 <_ZNK6String6equalsERKS_+0x20>
    6382:	0e 94 82 31 	call	0x6304	; 0x6304 <_ZNK6String9compareToERKS_>
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    6386:	21 e0       	ldi	r18, 0x01	; 1
    6388:	00 97       	sbiw	r24, 0x00	; 0
    638a:	19 f0       	breq	.+6      	; 0x6392 <_ZNK6String6equalsERKS_+0x22>
    638c:	20 e0       	ldi	r18, 0x00	; 0
    638e:	01 c0       	rjmp	.+2      	; 0x6392 <_ZNK6String6equalsERKS_+0x22>
{
	return (len == s2.len && compareTo(s2) == 0);
    6390:	20 e0       	ldi	r18, 0x00	; 0
}
    6392:	82 2f       	mov	r24, r18
    6394:	08 95       	ret

00006396 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    6396:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    6398:	84 81       	ldd	r24, Z+4	; 0x04
    639a:	95 81       	ldd	r25, Z+5	; 0x05
    639c:	00 97       	sbiw	r24, 0x00	; 0
    639e:	61 f4       	brne	.+24     	; 0x63b8 <_ZNK6String6equalsEPKc+0x22>
    63a0:	61 15       	cp	r22, r1
    63a2:	71 05       	cpc	r23, r1
    63a4:	39 f0       	breq	.+14     	; 0x63b4 <_ZNK6String6equalsEPKc+0x1e>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    63a6:	81 e0       	ldi	r24, 0x01	; 1
    63a8:	fb 01       	movw	r30, r22
    63aa:	90 81       	ld	r25, Z
    63ac:	99 23       	and	r25, r25
    63ae:	d9 f0       	breq	.+54     	; 0x63e6 <_ZNK6String6equalsEPKc+0x50>
    63b0:	80 e0       	ldi	r24, 0x00	; 0
    63b2:	08 95       	ret
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    63b4:	81 e0       	ldi	r24, 0x01	; 1
    63b6:	08 95       	ret
	if (cstr == NULL) return buffer[0] == 0;
    63b8:	61 15       	cp	r22, r1
    63ba:	71 05       	cpc	r23, r1
    63bc:	49 f4       	brne	.+18     	; 0x63d0 <_ZNK6String6equalsEPKc+0x3a>
    63be:	01 90       	ld	r0, Z+
    63c0:	f0 81       	ld	r31, Z
    63c2:	e0 2d       	mov	r30, r0
    63c4:	81 e0       	ldi	r24, 0x01	; 1
    63c6:	90 81       	ld	r25, Z
    63c8:	99 23       	and	r25, r25
    63ca:	69 f0       	breq	.+26     	; 0x63e6 <_ZNK6String6equalsEPKc+0x50>
    63cc:	80 e0       	ldi	r24, 0x00	; 0
    63ce:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    63d0:	80 81       	ld	r24, Z
    63d2:	91 81       	ldd	r25, Z+1	; 0x01
    63d4:	0e 94 73 4e 	call	0x9ce6	; 0x9ce6 <strcmp>
    63d8:	28 2f       	mov	r18, r24
    63da:	39 2f       	mov	r19, r25
    63dc:	81 e0       	ldi	r24, 0x01	; 1
    63de:	21 15       	cp	r18, r1
    63e0:	31 05       	cpc	r19, r1
    63e2:	09 f0       	breq	.+2      	; 0x63e6 <_ZNK6String6equalsEPKc+0x50>
    63e4:	80 e0       	ldi	r24, 0x00	; 0
}
    63e6:	08 95       	ret

000063e8 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    63e8:	0e 94 82 31 	call	0x6304	; 0x6304 <_ZNK6String9compareToERKS_>
}
    63ec:	89 2f       	mov	r24, r25
    63ee:	88 1f       	adc	r24, r24
    63f0:	88 27       	eor	r24, r24
    63f2:	88 1f       	adc	r24, r24
    63f4:	08 95       	ret

000063f6 <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    63f6:	0e 94 82 31 	call	0x6304	; 0x6304 <_ZNK6String9compareToERKS_>
    63fa:	21 e0       	ldi	r18, 0x01	; 1
    63fc:	18 16       	cp	r1, r24
    63fe:	19 06       	cpc	r1, r25
    6400:	0c f0       	brlt	.+2      	; 0x6404 <_ZNK6StringgtERKS_+0xe>
    6402:	20 e0       	ldi	r18, 0x00	; 0
}
    6404:	82 2f       	mov	r24, r18
    6406:	08 95       	ret

00006408 <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    6408:	0e 94 82 31 	call	0x6304	; 0x6304 <_ZNK6String9compareToERKS_>
    640c:	21 e0       	ldi	r18, 0x01	; 1
    640e:	18 16       	cp	r1, r24
    6410:	19 06       	cpc	r1, r25
    6412:	0c f4       	brge	.+2      	; 0x6416 <_ZNK6StringleERKS_+0xe>
    6414:	20 e0       	ldi	r18, 0x00	; 0
}
    6416:	82 2f       	mov	r24, r18
    6418:	08 95       	ret

0000641a <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    641a:	0e 94 82 31 	call	0x6304	; 0x6304 <_ZNK6String9compareToERKS_>
    641e:	89 2f       	mov	r24, r25
    6420:	80 95       	com	r24
}
    6422:	88 1f       	adc	r24, r24
    6424:	88 27       	eor	r24, r24
    6426:	88 1f       	adc	r24, r24
    6428:	08 95       	ret

0000642a <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    642a:	ef 92       	push	r14
    642c:	ff 92       	push	r15
    642e:	0f 93       	push	r16
    6430:	1f 93       	push	r17
    6432:	cf 93       	push	r28
    6434:	df 93       	push	r29
    6436:	dc 01       	movw	r26, r24
    6438:	fb 01       	movw	r30, r22
	if (this == &s2) return 1;
    643a:	86 17       	cp	r24, r22
    643c:	97 07       	cpc	r25, r23
    643e:	29 f1       	breq	.+74     	; 0x648a <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	if (len != s2.len) return 0;
    6440:	14 96       	adiw	r26, 0x04	; 4
    6442:	8d 91       	ld	r24, X+
    6444:	9c 91       	ld	r25, X
    6446:	15 97       	sbiw	r26, 0x05	; 5
    6448:	24 81       	ldd	r18, Z+4	; 0x04
    644a:	35 81       	ldd	r19, Z+5	; 0x05
    644c:	82 17       	cp	r24, r18
    644e:	93 07       	cpc	r25, r19
    6450:	f1 f4       	brne	.+60     	; 0x648e <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len == 0) return 1;
    6452:	00 97       	sbiw	r24, 0x00	; 0
    6454:	f1 f0       	breq	.+60     	; 0x6492 <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
    6456:	e0 80       	ld	r14, Z
    6458:	f1 80       	ldd	r15, Z+1	; 0x01
    645a:	0d 91       	ld	r16, X+
    645c:	1c 91       	ld	r17, X
    645e:	11 97       	sbiw	r26, 0x01	; 1
	while (*p1) {
    6460:	0d c0       	rjmp	.+26     	; 0x647c <_ZNK6String16equalsIgnoreCaseERKS_+0x52>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    6462:	90 e0       	ldi	r25, 0x00	; 0
    6464:	0e 94 30 4e 	call	0x9c60	; 0x9c60 <tolower>
    6468:	ec 01       	movw	r28, r24
    646a:	f7 01       	movw	r30, r14
    646c:	81 91       	ld	r24, Z+
    646e:	7f 01       	movw	r14, r30
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	0e 94 30 4e 	call	0x9c60	; 0x9c60 <tolower>
    6476:	c8 17       	cp	r28, r24
    6478:	d9 07       	cpc	r29, r25
    647a:	69 f4       	brne	.+26     	; 0x6496 <_ZNK6String16equalsIgnoreCaseERKS_+0x6c>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    647c:	f8 01       	movw	r30, r16
    647e:	81 91       	ld	r24, Z+
    6480:	8f 01       	movw	r16, r30
    6482:	88 23       	and	r24, r24
    6484:	71 f7       	brne	.-36     	; 0x6462 <_ZNK6String16equalsIgnoreCaseERKS_+0x38>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
    6486:	81 e0       	ldi	r24, 0x01	; 1
    6488:	07 c0       	rjmp	.+14     	; 0x6498 <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
    648a:	81 e0       	ldi	r24, 0x01	; 1
    648c:	05 c0       	rjmp	.+10     	; 0x6498 <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	if (len != s2.len) return 0;
    648e:	80 e0       	ldi	r24, 0x00	; 0
    6490:	03 c0       	rjmp	.+6      	; 0x6498 <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	if (len == 0) return 1;
    6492:	81 e0       	ldi	r24, 0x01	; 1
    6494:	01 c0       	rjmp	.+2      	; 0x6498 <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    6496:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return 1;
}
    6498:	df 91       	pop	r29
    649a:	cf 91       	pop	r28
    649c:	1f 91       	pop	r17
    649e:	0f 91       	pop	r16
    64a0:	ff 90       	pop	r15
    64a2:	ef 90       	pop	r14
    64a4:	08 95       	ret

000064a6 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    64a6:	fc 01       	movw	r30, r24
    64a8:	db 01       	movw	r26, r22
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    64aa:	14 96       	adiw	r26, 0x04	; 4
    64ac:	2d 91       	ld	r18, X+
    64ae:	3c 91       	ld	r19, X
    64b0:	15 97       	sbiw	r26, 0x05	; 5
    64b2:	84 81       	ldd	r24, Z+4	; 0x04
    64b4:	95 81       	ldd	r25, Z+5	; 0x05
    64b6:	82 1b       	sub	r24, r18
    64b8:	93 0b       	sbc	r25, r19
    64ba:	84 17       	cp	r24, r20
    64bc:	95 07       	cpc	r25, r21
    64be:	b8 f0       	brcs	.+46     	; 0x64ee <_ZNK6String10startsWithERKS_j+0x48>
    64c0:	80 81       	ld	r24, Z
    64c2:	91 81       	ldd	r25, Z+1	; 0x01
    64c4:	00 97       	sbiw	r24, 0x00	; 0
    64c6:	a9 f0       	breq	.+42     	; 0x64f2 <_ZNK6String10startsWithERKS_j+0x4c>
    64c8:	6d 91       	ld	r22, X+
    64ca:	7c 91       	ld	r23, X
    64cc:	11 97       	sbiw	r26, 0x01	; 1
    64ce:	61 15       	cp	r22, r1
    64d0:	71 05       	cpc	r23, r1
    64d2:	89 f0       	breq	.+34     	; 0x64f6 <_ZNK6String10startsWithERKS_j+0x50>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    64d4:	84 0f       	add	r24, r20
    64d6:	95 1f       	adc	r25, r21
    64d8:	a9 01       	movw	r20, r18
    64da:	0e 94 83 4e 	call	0x9d06	; 0x9d06 <strncmp>
    64de:	28 2f       	mov	r18, r24
    64e0:	39 2f       	mov	r19, r25
    64e2:	81 e0       	ldi	r24, 0x01	; 1
    64e4:	21 15       	cp	r18, r1
    64e6:	31 05       	cpc	r19, r1
    64e8:	39 f0       	breq	.+14     	; 0x64f8 <_ZNK6String10startsWithERKS_j+0x52>
    64ea:	80 e0       	ldi	r24, 0x00	; 0
    64ec:	08 95       	ret
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    64ee:	80 e0       	ldi	r24, 0x00	; 0
    64f0:	08 95       	ret
    64f2:	80 e0       	ldi	r24, 0x00	; 0
    64f4:	08 95       	ret
    64f6:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    64f8:	08 95       	ret

000064fa <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    64fa:	fc 01       	movw	r30, r24
    64fc:	24 81       	ldd	r18, Z+4	; 0x04
    64fe:	35 81       	ldd	r19, Z+5	; 0x05
    6500:	fb 01       	movw	r30, r22
    6502:	44 81       	ldd	r20, Z+4	; 0x04
    6504:	55 81       	ldd	r21, Z+5	; 0x05
    6506:	24 17       	cp	r18, r20
    6508:	35 07       	cpc	r19, r21
    650a:	28 f0       	brcs	.+10     	; 0x6516 <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    650c:	40 e0       	ldi	r20, 0x00	; 0
    650e:	50 e0       	ldi	r21, 0x00	; 0
    6510:	0e 94 53 32 	call	0x64a6	; 0x64a6 <_ZNK6String10startsWithERKS_j>
    6514:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    6516:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    6518:	08 95       	ret

0000651a <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    651a:	fc 01       	movw	r30, r24
    651c:	db 01       	movw	r26, r22
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    651e:	84 81       	ldd	r24, Z+4	; 0x04
    6520:	95 81       	ldd	r25, Z+5	; 0x05
    6522:	14 96       	adiw	r26, 0x04	; 4
    6524:	2d 91       	ld	r18, X+
    6526:	3c 91       	ld	r19, X
    6528:	15 97       	sbiw	r26, 0x05	; 5
    652a:	82 17       	cp	r24, r18
    652c:	93 07       	cpc	r25, r19
    652e:	c8 f0       	brcs	.+50     	; 0x6562 <_ZNK6String8endsWithERKS_+0x48>
    6530:	40 81       	ld	r20, Z
    6532:	51 81       	ldd	r21, Z+1	; 0x01
    6534:	41 15       	cp	r20, r1
    6536:	51 05       	cpc	r21, r1
    6538:	b1 f0       	breq	.+44     	; 0x6566 <_ZNK6String8endsWithERKS_+0x4c>
    653a:	6d 91       	ld	r22, X+
    653c:	7c 91       	ld	r23, X
    653e:	11 97       	sbiw	r26, 0x01	; 1
    6540:	61 15       	cp	r22, r1
    6542:	71 05       	cpc	r23, r1
    6544:	91 f0       	breq	.+36     	; 0x656a <_ZNK6String8endsWithERKS_+0x50>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    6546:	82 1b       	sub	r24, r18
    6548:	93 0b       	sbc	r25, r19
    654a:	84 0f       	add	r24, r20
    654c:	95 1f       	adc	r25, r21
    654e:	0e 94 73 4e 	call	0x9ce6	; 0x9ce6 <strcmp>
    6552:	28 2f       	mov	r18, r24
    6554:	39 2f       	mov	r19, r25
    6556:	81 e0       	ldi	r24, 0x01	; 1
    6558:	21 15       	cp	r18, r1
    655a:	31 05       	cpc	r19, r1
    655c:	39 f0       	breq	.+14     	; 0x656c <_ZNK6String8endsWithERKS_+0x52>
    655e:	80 e0       	ldi	r24, 0x00	; 0
    6560:	08 95       	ret
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    6562:	80 e0       	ldi	r24, 0x00	; 0
    6564:	08 95       	ret
    6566:	80 e0       	ldi	r24, 0x00	; 0
    6568:	08 95       	ret
    656a:	80 e0       	ldi	r24, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    656c:	08 95       	ret

0000656e <_ZN6String9setCharAtEjc>:
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
    656e:	fc 01       	movw	r30, r24
	if (loc < len) buffer[loc] = c;
    6570:	84 81       	ldd	r24, Z+4	; 0x04
    6572:	95 81       	ldd	r25, Z+5	; 0x05
    6574:	68 17       	cp	r22, r24
    6576:	79 07       	cpc	r23, r25
    6578:	30 f4       	brcc	.+12     	; 0x6586 <_ZN6String9setCharAtEjc+0x18>
    657a:	80 81       	ld	r24, Z
    657c:	91 81       	ldd	r25, Z+1	; 0x01
    657e:	68 0f       	add	r22, r24
    6580:	79 1f       	adc	r23, r25
    6582:	fb 01       	movw	r30, r22
    6584:	40 83       	st	Z, r20
    6586:	08 95       	ret

00006588 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    6588:	fc 01       	movw	r30, r24
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    658a:	84 81       	ldd	r24, Z+4	; 0x04
    658c:	95 81       	ldd	r25, Z+5	; 0x05
    658e:	68 17       	cp	r22, r24
    6590:	79 07       	cpc	r23, r25
    6592:	20 f4       	brcc	.+8      	; 0x659c <_ZN6StringixEj+0x14>
    6594:	80 81       	ld	r24, Z
    6596:	91 81       	ldd	r25, Z+1	; 0x01
    6598:	00 97       	sbiw	r24, 0x00	; 0
    659a:	29 f4       	brne	.+10     	; 0x65a6 <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    659c:	10 92 e2 09 	sts	0x09E2, r1
		return dummy_writable_char;
    65a0:	82 ee       	ldi	r24, 0xE2	; 226
    65a2:	99 e0       	ldi	r25, 0x09	; 9
    65a4:	08 95       	ret
	}
	return buffer[index];
    65a6:	86 0f       	add	r24, r22
    65a8:	97 1f       	adc	r25, r23
}
    65aa:	08 95       	ret

000065ac <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    65ac:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    65ae:	84 81       	ldd	r24, Z+4	; 0x04
    65b0:	95 81       	ldd	r25, Z+5	; 0x05
    65b2:	68 17       	cp	r22, r24
    65b4:	79 07       	cpc	r23, r25
    65b6:	48 f4       	brcc	.+18     	; 0x65ca <_ZNK6StringixEj+0x1e>
    65b8:	80 81       	ld	r24, Z
    65ba:	91 81       	ldd	r25, Z+1	; 0x01
    65bc:	00 97       	sbiw	r24, 0x00	; 0
    65be:	39 f0       	breq	.+14     	; 0x65ce <_ZNK6StringixEj+0x22>
	return buffer[index];
    65c0:	68 0f       	add	r22, r24
    65c2:	79 1f       	adc	r23, r25
    65c4:	fb 01       	movw	r30, r22
    65c6:	80 81       	ld	r24, Z
    65c8:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    65ca:	80 e0       	ldi	r24, 0x00	; 0
    65cc:	08 95       	ret
    65ce:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    65d0:	08 95       	ret

000065d2 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    65d2:	0e 94 d6 32 	call	0x65ac	; 0x65ac <_ZNK6StringixEj>
}
    65d6:	08 95       	ret

000065d8 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    65d8:	0f 93       	push	r16
    65da:	1f 93       	push	r17
    65dc:	cf 93       	push	r28
    65de:	df 93       	push	r29
    65e0:	fc 01       	movw	r30, r24
    65e2:	eb 01       	movw	r28, r22
	if (!bufsize || !buf) return;
    65e4:	41 15       	cp	r20, r1
    65e6:	51 05       	cpc	r21, r1
    65e8:	e9 f0       	breq	.+58     	; 0x6624 <_ZNK6String8getBytesEPhjj+0x4c>
    65ea:	20 97       	sbiw	r28, 0x00	; 0
    65ec:	d9 f0       	breq	.+54     	; 0x6624 <_ZNK6String8getBytesEPhjj+0x4c>
	if (index >= len) {
    65ee:	84 81       	ldd	r24, Z+4	; 0x04
    65f0:	95 81       	ldd	r25, Z+5	; 0x05
    65f2:	28 17       	cp	r18, r24
    65f4:	39 07       	cpc	r19, r25
    65f6:	10 f0       	brcs	.+4      	; 0x65fc <_ZNK6String8getBytesEPhjj+0x24>
		buf[0] = 0;
    65f8:	18 82       	st	Y, r1
		return;
    65fa:	14 c0       	rjmp	.+40     	; 0x6624 <_ZNK6String8getBytesEPhjj+0x4c>
	}
	unsigned int n = bufsize - 1;
    65fc:	41 50       	subi	r20, 0x01	; 1
    65fe:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    6600:	8c 01       	movw	r16, r24
    6602:	02 1b       	sub	r16, r18
    6604:	13 0b       	sbc	r17, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    6606:	40 17       	cp	r20, r16
    6608:	51 07       	cpc	r21, r17
    660a:	08 f4       	brcc	.+2      	; 0x660e <_ZNK6String8getBytesEPhjj+0x36>
    660c:	8a 01       	movw	r16, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    660e:	60 81       	ld	r22, Z
    6610:	71 81       	ldd	r23, Z+1	; 0x01
    6612:	62 0f       	add	r22, r18
    6614:	73 1f       	adc	r23, r19
    6616:	ce 01       	movw	r24, r28
    6618:	a8 01       	movw	r20, r16
    661a:	0e 94 91 4e 	call	0x9d22	; 0x9d22 <strncpy>
	buf[n] = 0;
    661e:	c0 0f       	add	r28, r16
    6620:	d1 1f       	adc	r29, r17
    6622:	18 82       	st	Y, r1
}
    6624:	df 91       	pop	r29
    6626:	cf 91       	pop	r28
    6628:	1f 91       	pop	r17
    662a:	0f 91       	pop	r16
    662c:	08 95       	ret

0000662e <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    662e:	cf 93       	push	r28
    6630:	df 93       	push	r29
    6632:	fc 01       	movw	r30, r24
	if (fromIndex >= len) return -1;
    6634:	84 81       	ldd	r24, Z+4	; 0x04
    6636:	95 81       	ldd	r25, Z+5	; 0x05
    6638:	48 17       	cp	r20, r24
    663a:	59 07       	cpc	r21, r25
    663c:	68 f4       	brcc	.+26     	; 0x6658 <_ZNK6String7indexOfEcj+0x2a>
	const char* temp = strchr(buffer + fromIndex, ch);
    663e:	c0 81       	ld	r28, Z
    6640:	d1 81       	ldd	r29, Z+1	; 0x01
    6642:	ce 01       	movw	r24, r28
    6644:	84 0f       	add	r24, r20
    6646:	95 1f       	adc	r25, r21
    6648:	70 e0       	ldi	r23, 0x00	; 0
    664a:	0e 94 68 4e 	call	0x9cd0	; 0x9cd0 <strchr>
	if (temp == NULL) return -1;
    664e:	00 97       	sbiw	r24, 0x00	; 0
    6650:	31 f0       	breq	.+12     	; 0x665e <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
    6652:	8c 1b       	sub	r24, r28
    6654:	9d 0b       	sbc	r25, r29
    6656:	05 c0       	rjmp	.+10     	; 0x6662 <_ZNK6String7indexOfEcj+0x34>
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
    6658:	8f ef       	ldi	r24, 0xFF	; 255
    665a:	9f ef       	ldi	r25, 0xFF	; 255
    665c:	02 c0       	rjmp	.+4      	; 0x6662 <_ZNK6String7indexOfEcj+0x34>
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
    665e:	8f ef       	ldi	r24, 0xFF	; 255
    6660:	9f ef       	ldi	r25, 0xFF	; 255
	return temp - buffer;
}
    6662:	df 91       	pop	r29
    6664:	cf 91       	pop	r28
    6666:	08 95       	ret

00006668 <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    6668:	40 e0       	ldi	r20, 0x00	; 0
    666a:	50 e0       	ldi	r21, 0x00	; 0
    666c:	0e 94 17 33 	call	0x662e	; 0x662e <_ZNK6String7indexOfEcj>
}
    6670:	08 95       	ret

00006672 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    6672:	cf 93       	push	r28
    6674:	df 93       	push	r29
    6676:	fc 01       	movw	r30, r24
	if (fromIndex >= len) return -1;
    6678:	84 81       	ldd	r24, Z+4	; 0x04
    667a:	95 81       	ldd	r25, Z+5	; 0x05
    667c:	48 17       	cp	r20, r24
    667e:	59 07       	cpc	r21, r25
    6680:	78 f4       	brcc	.+30     	; 0x66a0 <_ZNK6String7indexOfERKS_j+0x2e>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    6682:	c0 81       	ld	r28, Z
    6684:	d1 81       	ldd	r29, Z+1	; 0x01
    6686:	fb 01       	movw	r30, r22
    6688:	60 81       	ld	r22, Z
    668a:	71 81       	ldd	r23, Z+1	; 0x01
    668c:	ce 01       	movw	r24, r28
    668e:	84 0f       	add	r24, r20
    6690:	95 1f       	adc	r25, r21
    6692:	0e 94 ab 4e 	call	0x9d56	; 0x9d56 <strstr>
	if (found == NULL) return -1;
    6696:	00 97       	sbiw	r24, 0x00	; 0
    6698:	31 f0       	breq	.+12     	; 0x66a6 <_ZNK6String7indexOfERKS_j+0x34>
	return found - buffer;
    669a:	8c 1b       	sub	r24, r28
    669c:	9d 0b       	sbc	r25, r29
    669e:	05 c0       	rjmp	.+10     	; 0x66aa <_ZNK6String7indexOfERKS_j+0x38>
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    66a0:	8f ef       	ldi	r24, 0xFF	; 255
    66a2:	9f ef       	ldi	r25, 0xFF	; 255
    66a4:	02 c0       	rjmp	.+4      	; 0x66aa <_ZNK6String7indexOfERKS_j+0x38>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    66a6:	8f ef       	ldi	r24, 0xFF	; 255
    66a8:	9f ef       	ldi	r25, 0xFF	; 255
	return found - buffer;
}
    66aa:	df 91       	pop	r29
    66ac:	cf 91       	pop	r28
    66ae:	08 95       	ret

000066b0 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    66b0:	40 e0       	ldi	r20, 0x00	; 0
    66b2:	50 e0       	ldi	r21, 0x00	; 0
    66b4:	0e 94 39 33 	call	0x6672	; 0x6672 <_ZNK6String7indexOfERKS_j>
}
    66b8:	08 95       	ret

000066ba <_ZNK6String11lastIndexOfEcj>:
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    66ba:	df 92       	push	r13
    66bc:	ef 92       	push	r14
    66be:	ff 92       	push	r15
    66c0:	0f 93       	push	r16
    66c2:	1f 93       	push	r17
    66c4:	cf 93       	push	r28
    66c6:	df 93       	push	r29
    66c8:	8c 01       	movw	r16, r24
	if (fromIndex >= len) return -1;
    66ca:	dc 01       	movw	r26, r24
    66cc:	14 96       	adiw	r26, 0x04	; 4
    66ce:	8d 91       	ld	r24, X+
    66d0:	9c 91       	ld	r25, X
    66d2:	15 97       	sbiw	r26, 0x05	; 5
    66d4:	48 17       	cp	r20, r24
    66d6:	59 07       	cpc	r21, r25
    66d8:	e0 f4       	brcc	.+56     	; 0x6712 <_ZNK6String11lastIndexOfEcj+0x58>
	char tempchar = buffer[fromIndex + 1];
    66da:	7a 01       	movw	r14, r20
    66dc:	08 94       	sec
    66de:	e1 1c       	adc	r14, r1
    66e0:	f1 1c       	adc	r15, r1
    66e2:	ed 91       	ld	r30, X+
    66e4:	fc 91       	ld	r31, X
    66e6:	11 97       	sbiw	r26, 0x01	; 1
    66e8:	ee 0d       	add	r30, r14
    66ea:	ff 1d       	adc	r31, r15
    66ec:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    66ee:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    66f0:	cd 91       	ld	r28, X+
    66f2:	dc 91       	ld	r29, X
    66f4:	ce 01       	movw	r24, r28
    66f6:	70 e0       	ldi	r23, 0x00	; 0
    66f8:	0e 94 a0 4e 	call	0x9d40	; 0x9d40 <strrchr>
	buffer[fromIndex + 1] = tempchar;
    66fc:	ce 0d       	add	r28, r14
    66fe:	df 1d       	adc	r29, r15
    6700:	d8 82       	st	Y, r13
	if (temp == NULL) return -1;
    6702:	00 97       	sbiw	r24, 0x00	; 0
    6704:	49 f0       	breq	.+18     	; 0x6718 <_ZNK6String11lastIndexOfEcj+0x5e>
	return temp - buffer;
    6706:	f8 01       	movw	r30, r16
    6708:	20 81       	ld	r18, Z
    670a:	31 81       	ldd	r19, Z+1	; 0x01
    670c:	82 1b       	sub	r24, r18
    670e:	93 0b       	sbc	r25, r19
    6710:	05 c0       	rjmp	.+10     	; 0x671c <_ZNK6String11lastIndexOfEcj+0x62>
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    6712:	8f ef       	ldi	r24, 0xFF	; 255
    6714:	9f ef       	ldi	r25, 0xFF	; 255
    6716:	02 c0       	rjmp	.+4      	; 0x671c <_ZNK6String11lastIndexOfEcj+0x62>
	char tempchar = buffer[fromIndex + 1];
	buffer[fromIndex + 1] = '\0';
	char* temp = strrchr( buffer, ch );
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
    6718:	8f ef       	ldi	r24, 0xFF	; 255
    671a:	9f ef       	ldi	r25, 0xFF	; 255
	return temp - buffer;
}
    671c:	df 91       	pop	r29
    671e:	cf 91       	pop	r28
    6720:	1f 91       	pop	r17
    6722:	0f 91       	pop	r16
    6724:	ff 90       	pop	r15
    6726:	ef 90       	pop	r14
    6728:	df 90       	pop	r13
    672a:	08 95       	ret

0000672c <_ZNK6String11lastIndexOfEc>:
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    672c:	fc 01       	movw	r30, r24
    672e:	44 81       	ldd	r20, Z+4	; 0x04
    6730:	55 81       	ldd	r21, Z+5	; 0x05
    6732:	41 50       	subi	r20, 0x01	; 1
    6734:	50 40       	sbci	r21, 0x00	; 0
    6736:	0e 94 5d 33 	call	0x66ba	; 0x66ba <_ZNK6String11lastIndexOfEcj>
}
    673a:	08 95       	ret

0000673c <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    673c:	af 92       	push	r10
    673e:	bf 92       	push	r11
    6740:	cf 92       	push	r12
    6742:	df 92       	push	r13
    6744:	ef 92       	push	r14
    6746:	ff 92       	push	r15
    6748:	0f 93       	push	r16
    674a:	1f 93       	push	r17
    674c:	cf 93       	push	r28
    674e:	df 93       	push	r29
    6750:	fc 01       	movw	r30, r24
    6752:	6b 01       	movw	r12, r22
    6754:	7a 01       	movw	r14, r20
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    6756:	db 01       	movw	r26, r22
    6758:	14 96       	adiw	r26, 0x04	; 4
    675a:	2d 91       	ld	r18, X+
    675c:	3c 91       	ld	r19, X
    675e:	15 97       	sbiw	r26, 0x05	; 5
    6760:	21 15       	cp	r18, r1
    6762:	31 05       	cpc	r19, r1
    6764:	71 f1       	breq	.+92     	; 0x67c2 <_ZNK6String11lastIndexOfERKS_j+0x86>
    6766:	84 81       	ldd	r24, Z+4	; 0x04
    6768:	95 81       	ldd	r25, Z+5	; 0x05
    676a:	00 97       	sbiw	r24, 0x00	; 0
    676c:	71 f1       	breq	.+92     	; 0x67ca <_ZNK6String11lastIndexOfERKS_j+0x8e>
    676e:	82 17       	cp	r24, r18
    6770:	93 07       	cpc	r25, r19
    6772:	78 f1       	brcs	.+94     	; 0x67d2 <_ZNK6String11lastIndexOfERKS_j+0x96>
	if (fromIndex >= len) fromIndex = len - 1;
    6774:	48 17       	cp	r20, r24
    6776:	59 07       	cpc	r21, r25
    6778:	20 f0       	brcs	.+8      	; 0x6782 <_ZNK6String11lastIndexOfERKS_j+0x46>
    677a:	7c 01       	movw	r14, r24
    677c:	08 94       	sec
    677e:	e1 08       	sbc	r14, r1
    6780:	f1 08       	sbc	r15, r1
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    6782:	c0 81       	ld	r28, Z
    6784:	d1 81       	ldd	r29, Z+1	; 0x01
    6786:	8e 01       	movw	r16, r28
    6788:	0e 0d       	add	r16, r14
    678a:	1f 1d       	adc	r17, r15
    678c:	0c 17       	cp	r16, r28
    678e:	1d 07       	cpc	r17, r29
    6790:	20 f1       	brcs	.+72     	; 0x67da <_ZNK6String11lastIndexOfERKS_j+0x9e>
    6792:	ce 01       	movw	r24, r28

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    6794:	aa 24       	eor	r10, r10
    6796:	aa 94       	dec	r10
    6798:	ba 2c       	mov	r11, r10
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
		p = strstr(p, s2.buffer);
    679a:	f6 01       	movw	r30, r12
    679c:	60 81       	ld	r22, Z
    679e:	71 81       	ldd	r23, Z+1	; 0x01
    67a0:	0e 94 ab 4e 	call	0x9d56	; 0x9d56 <strstr>
    67a4:	9c 01       	movw	r18, r24
		if (!p) break;
    67a6:	00 97       	sbiw	r24, 0x00	; 0
    67a8:	d9 f0       	breq	.+54     	; 0x67e0 <_ZNK6String11lastIndexOfERKS_j+0xa4>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    67aa:	8c 1b       	sub	r24, r28
    67ac:	9d 0b       	sbc	r25, r29
    67ae:	e8 16       	cp	r14, r24
    67b0:	f9 06       	cpc	r15, r25
    67b2:	08 f0       	brcs	.+2      	; 0x67b6 <_ZNK6String11lastIndexOfERKS_j+0x7a>
    67b4:	5c 01       	movw	r10, r24
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    67b6:	c9 01       	movw	r24, r18
    67b8:	01 96       	adiw	r24, 0x01	; 1
    67ba:	08 17       	cp	r16, r24
    67bc:	19 07       	cpc	r17, r25
    67be:	68 f7       	brcc	.-38     	; 0x679a <_ZNK6String11lastIndexOfERKS_j+0x5e>
    67c0:	0f c0       	rjmp	.+30     	; 0x67e0 <_ZNK6String11lastIndexOfERKS_j+0xa4>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    67c2:	aa 24       	eor	r10, r10
    67c4:	aa 94       	dec	r10
    67c6:	ba 2c       	mov	r11, r10
    67c8:	0b c0       	rjmp	.+22     	; 0x67e0 <_ZNK6String11lastIndexOfERKS_j+0xa4>
    67ca:	aa 24       	eor	r10, r10
    67cc:	aa 94       	dec	r10
    67ce:	ba 2c       	mov	r11, r10
    67d0:	07 c0       	rjmp	.+14     	; 0x67e0 <_ZNK6String11lastIndexOfERKS_j+0xa4>
    67d2:	aa 24       	eor	r10, r10
    67d4:	aa 94       	dec	r10
    67d6:	ba 2c       	mov	r11, r10
    67d8:	03 c0       	rjmp	.+6      	; 0x67e0 <_ZNK6String11lastIndexOfERKS_j+0xa4>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    67da:	aa 24       	eor	r10, r10
    67dc:	aa 94       	dec	r10
    67de:	ba 2c       	mov	r11, r10
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    67e0:	8a 2d       	mov	r24, r10
    67e2:	9b 2d       	mov	r25, r11
    67e4:	df 91       	pop	r29
    67e6:	cf 91       	pop	r28
    67e8:	1f 91       	pop	r17
    67ea:	0f 91       	pop	r16
    67ec:	ff 90       	pop	r15
    67ee:	ef 90       	pop	r14
    67f0:	df 90       	pop	r13
    67f2:	cf 90       	pop	r12
    67f4:	bf 90       	pop	r11
    67f6:	af 90       	pop	r10
    67f8:	08 95       	ret

000067fa <_ZNK6String11lastIndexOfERKS_>:
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
    67fa:	fc 01       	movw	r30, r24
	return lastIndexOf(s2, len - s2.len);
    67fc:	44 81       	ldd	r20, Z+4	; 0x04
    67fe:	55 81       	ldd	r21, Z+5	; 0x05
    6800:	db 01       	movw	r26, r22
    6802:	14 96       	adiw	r26, 0x04	; 4
    6804:	8d 91       	ld	r24, X+
    6806:	9c 91       	ld	r25, X
    6808:	15 97       	sbiw	r26, 0x05	; 5
    680a:	48 1b       	sub	r20, r24
    680c:	59 0b       	sbc	r21, r25
    680e:	cf 01       	movw	r24, r30
    6810:	0e 94 9e 33 	call	0x673c	; 0x673c <_ZNK6String11lastIndexOfERKS_j>
}
    6814:	08 95       	ret

00006816 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    6816:	bf 92       	push	r11
    6818:	cf 92       	push	r12
    681a:	df 92       	push	r13
    681c:	ef 92       	push	r14
    681e:	ff 92       	push	r15
    6820:	0f 93       	push	r16
    6822:	1f 93       	push	r17
    6824:	cf 93       	push	r28
    6826:	df 93       	push	r29
    6828:	7c 01       	movw	r14, r24
    682a:	6b 01       	movw	r12, r22
    682c:	8a 01       	movw	r16, r20
    682e:	e9 01       	movw	r28, r18
	if (left > right) {
    6830:	24 17       	cp	r18, r20
    6832:	35 07       	cpc	r19, r21
    6834:	20 f4       	brcc	.+8      	; 0x683e <_ZNK6String9substringEjj+0x28>
    6836:	81 2f       	mov	r24, r17
		unsigned int temp = right;
		right = left;
		left = temp;
    6838:	89 01       	movw	r16, r18

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
		unsigned int temp = right;
		right = left;
    683a:	c4 2f       	mov	r28, r20
    683c:	d8 2f       	mov	r29, r24
		left = temp;
	}
	String out;
    683e:	c7 01       	movw	r24, r14
    6840:	6e e5       	ldi	r22, 0x5E	; 94
    6842:	73 e0       	ldi	r23, 0x03	; 3
    6844:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <_ZN6StringC1EPKc>
	if (left > len) return out;
    6848:	d6 01       	movw	r26, r12
    684a:	14 96       	adiw	r26, 0x04	; 4
    684c:	8d 91       	ld	r24, X+
    684e:	9c 91       	ld	r25, X
    6850:	15 97       	sbiw	r26, 0x05	; 5
    6852:	80 17       	cp	r24, r16
    6854:	91 07       	cpc	r25, r17
    6856:	c8 f0       	brcs	.+50     	; 0x688a <_ZNK6String9substringEjj+0x74>
    6858:	8c 17       	cp	r24, r28
    685a:	9d 07       	cpc	r25, r29
    685c:	08 f4       	brcc	.+2      	; 0x6860 <_ZNK6String9substringEjj+0x4a>
    685e:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    6860:	d6 01       	movw	r26, r12
    6862:	ed 91       	ld	r30, X+
    6864:	fc 91       	ld	r31, X
    6866:	11 97       	sbiw	r26, 0x01	; 1
    6868:	ec 0f       	add	r30, r28
    686a:	fd 1f       	adc	r31, r29
    686c:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    686e:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    6870:	6d 91       	ld	r22, X+
    6872:	7c 91       	ld	r23, X
    6874:	60 0f       	add	r22, r16
    6876:	71 1f       	adc	r23, r17
    6878:	c7 01       	movw	r24, r14
    687a:	0e 94 76 2e 	call	0x5cec	; 0x5cec <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    687e:	f6 01       	movw	r30, r12
    6880:	80 81       	ld	r24, Z
    6882:	91 81       	ldd	r25, Z+1	; 0x01
    6884:	c8 0f       	add	r28, r24
    6886:	d9 1f       	adc	r29, r25
    6888:	b8 82       	st	Y, r11
	return out;
}
    688a:	c7 01       	movw	r24, r14
    688c:	df 91       	pop	r29
    688e:	cf 91       	pop	r28
    6890:	1f 91       	pop	r17
    6892:	0f 91       	pop	r16
    6894:	ff 90       	pop	r15
    6896:	ef 90       	pop	r14
    6898:	df 90       	pop	r13
    689a:	cf 90       	pop	r12
    689c:	bf 90       	pop	r11
    689e:	08 95       	ret

000068a0 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    68a0:	cf 93       	push	r28
    68a2:	df 93       	push	r29
    68a4:	ec 01       	movw	r28, r24
	return substring(left, len);
    68a6:	fb 01       	movw	r30, r22
    68a8:	24 81       	ldd	r18, Z+4	; 0x04
    68aa:	35 81       	ldd	r19, Z+5	; 0x05
    68ac:	0e 94 0b 34 	call	0x6816	; 0x6816 <_ZNK6String9substringEjj>
}
    68b0:	ce 01       	movw	r24, r28
    68b2:	df 91       	pop	r29
    68b4:	cf 91       	pop	r28
    68b6:	08 95       	ret

000068b8 <_ZN6String7replaceEcc>:
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    68b8:	dc 01       	movw	r26, r24
    68ba:	ed 91       	ld	r30, X+
    68bc:	fc 91       	ld	r31, X
    68be:	11 97       	sbiw	r26, 0x01	; 1
    68c0:	30 97       	sbiw	r30, 0x00	; 0
    68c2:	61 f0       	breq	.+24     	; 0x68dc <_ZN6String7replaceEcc+0x24>
	for (char *p = buffer; *p; p++) {
    68c4:	80 81       	ld	r24, Z
    68c6:	88 23       	and	r24, r24
    68c8:	49 f0       	breq	.+18     	; 0x68dc <_ZN6String7replaceEcc+0x24>

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
    68ca:	31 96       	adiw	r30, 0x01	; 1
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    68cc:	86 17       	cp	r24, r22
    68ce:	19 f4       	brne	.+6      	; 0x68d6 <_ZN6String7replaceEcc+0x1e>

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
    68d0:	df 01       	movw	r26, r30
    68d2:	11 97       	sbiw	r26, 0x01	; 1
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    68d4:	4c 93       	st	X, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    68d6:	81 91       	ld	r24, Z+
    68d8:	88 23       	and	r24, r24
    68da:	c1 f7       	brne	.-16     	; 0x68cc <_ZN6String7replaceEcc+0x14>
    68dc:	08 95       	ret

000068de <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    68de:	4f 92       	push	r4
    68e0:	5f 92       	push	r5
    68e2:	6f 92       	push	r6
    68e4:	7f 92       	push	r7
    68e6:	8f 92       	push	r8
    68e8:	9f 92       	push	r9
    68ea:	af 92       	push	r10
    68ec:	bf 92       	push	r11
    68ee:	cf 92       	push	r12
    68f0:	df 92       	push	r13
    68f2:	ef 92       	push	r14
    68f4:	ff 92       	push	r15
    68f6:	0f 93       	push	r16
    68f8:	1f 93       	push	r17
    68fa:	cf 93       	push	r28
    68fc:	df 93       	push	r29
    68fe:	3c 01       	movw	r6, r24
    6900:	4b 01       	movw	r8, r22
    6902:	7a 01       	movw	r14, r20
	if (len == 0 || find.len == 0) return;
    6904:	fc 01       	movw	r30, r24
    6906:	a4 80       	ldd	r10, Z+4	; 0x04
    6908:	b5 80       	ldd	r11, Z+5	; 0x05
    690a:	a1 14       	cp	r10, r1
    690c:	b1 04       	cpc	r11, r1
    690e:	09 f4       	brne	.+2      	; 0x6912 <_ZN6String7replaceERKS_S1_+0x34>
    6910:	ca c0       	rjmp	.+404    	; 0x6aa6 <_ZN6String7replaceERKS_S1_+0x1c8>
    6912:	fb 01       	movw	r30, r22
    6914:	c4 80       	ldd	r12, Z+4	; 0x04
    6916:	d5 80       	ldd	r13, Z+5	; 0x05
    6918:	c1 14       	cp	r12, r1
    691a:	d1 04       	cpc	r13, r1
    691c:	09 f4       	brne	.+2      	; 0x6920 <_ZN6String7replaceERKS_S1_+0x42>
    691e:	c3 c0       	rjmp	.+390    	; 0x6aa6 <_ZN6String7replaceERKS_S1_+0x1c8>
	int diff = replace.len - find.len;
    6920:	fa 01       	movw	r30, r20
    6922:	84 81       	ldd	r24, Z+4	; 0x04
    6924:	95 81       	ldd	r25, Z+5	; 0x05
    6926:	2c 01       	movw	r4, r24
    6928:	4c 18       	sub	r4, r12
    692a:	5d 08       	sbc	r5, r13
    692c:	c2 01       	movw	r24, r4
	char *readFrom = buffer;
    692e:	f3 01       	movw	r30, r6
    6930:	00 81       	ld	r16, Z
    6932:	11 81       	ldd	r17, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    6934:	41 14       	cp	r4, r1
    6936:	51 04       	cpc	r5, r1
    6938:	79 f0       	breq	.+30     	; 0x6958 <_ZN6String7replaceERKS_S1_+0x7a>
    693a:	18 c0       	rjmp	.+48     	; 0x696c <_ZN6String7replaceERKS_S1_+0x8e>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    693c:	f7 01       	movw	r30, r14
    693e:	60 81       	ld	r22, Z
    6940:	71 81       	ldd	r23, Z+1	; 0x01
    6942:	44 81       	ldd	r20, Z+4	; 0x04
    6944:	55 81       	ldd	r21, Z+5	; 0x05
    6946:	8c 2f       	mov	r24, r28
    6948:	9d 2f       	mov	r25, r29
    694a:	0e 94 4d 4e 	call	0x9c9a	; 0x9c9a <memcpy>
			readFrom = foundAt + replace.len;
    694e:	f7 01       	movw	r30, r14
    6950:	04 81       	ldd	r16, Z+4	; 0x04
    6952:	15 81       	ldd	r17, Z+5	; 0x05
    6954:	0c 0f       	add	r16, r28
    6956:	1d 1f       	adc	r17, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    6958:	f4 01       	movw	r30, r8
    695a:	60 81       	ld	r22, Z
    695c:	71 81       	ldd	r23, Z+1	; 0x01
    695e:	c8 01       	movw	r24, r16
    6960:	0e 94 ab 4e 	call	0x9d56	; 0x9d56 <strstr>
    6964:	ec 01       	movw	r28, r24
    6966:	00 97       	sbiw	r24, 0x00	; 0
    6968:	49 f7       	brne	.-46     	; 0x693c <_ZN6String7replaceERKS_S1_+0x5e>
    696a:	9d c0       	rjmp	.+314    	; 0x6aa6 <_ZN6String7replaceERKS_S1_+0x1c8>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    696c:	99 23       	and	r25, r25
    696e:	64 f1       	brlt	.+88     	; 0x69c8 <_ZN6String7replaceERKS_S1_+0xea>
    6970:	e5 01       	movw	r28, r10
    6972:	3e c0       	rjmp	.+124    	; 0x69f0 <_ZN6String7replaceERKS_S1_+0x112>
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    6974:	e6 01       	movw	r28, r12
    6976:	c0 1b       	sub	r28, r16
    6978:	d1 0b       	sbc	r29, r17
			memcpy(writeTo, readFrom, n);
    697a:	8a 2d       	mov	r24, r10
    697c:	9b 2d       	mov	r25, r11
    697e:	60 2f       	mov	r22, r16
    6980:	71 2f       	mov	r23, r17
    6982:	4c 2f       	mov	r20, r28
    6984:	5d 2f       	mov	r21, r29
    6986:	0e 94 4d 4e 	call	0x9c9a	; 0x9c9a <memcpy>
			writeTo += n;
    698a:	ca 0d       	add	r28, r10
    698c:	db 1d       	adc	r29, r11
			memcpy(writeTo, replace.buffer, replace.len);
    698e:	f7 01       	movw	r30, r14
    6990:	60 81       	ld	r22, Z
    6992:	71 81       	ldd	r23, Z+1	; 0x01
    6994:	44 81       	ldd	r20, Z+4	; 0x04
    6996:	55 81       	ldd	r21, Z+5	; 0x05
    6998:	8c 2f       	mov	r24, r28
    699a:	9d 2f       	mov	r25, r29
    699c:	0e 94 4d 4e 	call	0x9c9a	; 0x9c9a <memcpy>
			writeTo += replace.len;
    69a0:	f7 01       	movw	r30, r14
    69a2:	84 81       	ldd	r24, Z+4	; 0x04
    69a4:	95 81       	ldd	r25, Z+5	; 0x05
    69a6:	5e 01       	movw	r10, r28
    69a8:	a8 0e       	add	r10, r24
    69aa:	b9 1e       	adc	r11, r25
			readFrom = foundAt + find.len;
    69ac:	f4 01       	movw	r30, r8
    69ae:	84 81       	ldd	r24, Z+4	; 0x04
    69b0:	95 81       	ldd	r25, Z+5	; 0x05
    69b2:	86 01       	movw	r16, r12
    69b4:	08 0f       	add	r16, r24
    69b6:	19 1f       	adc	r17, r25
			len += diff;
    69b8:	f3 01       	movw	r30, r6
    69ba:	84 81       	ldd	r24, Z+4	; 0x04
    69bc:	95 81       	ldd	r25, Z+5	; 0x05
    69be:	84 0d       	add	r24, r4
    69c0:	95 1d       	adc	r25, r5
    69c2:	95 83       	std	Z+5, r25	; 0x05
    69c4:	84 83       	std	Z+4, r24	; 0x04
    69c6:	01 c0       	rjmp	.+2      	; 0x69ca <_ZN6String7replaceERKS_S1_+0xec>
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    69c8:	58 01       	movw	r10, r16
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    69ca:	f4 01       	movw	r30, r8
    69cc:	60 81       	ld	r22, Z
    69ce:	71 81       	ldd	r23, Z+1	; 0x01
    69d0:	c8 01       	movw	r24, r16
    69d2:	0e 94 ab 4e 	call	0x9d56	; 0x9d56 <strstr>
    69d6:	6c 01       	movw	r12, r24
    69d8:	00 97       	sbiw	r24, 0x00	; 0
    69da:	61 f6       	brne	.-104    	; 0x6974 <_ZN6String7replaceERKS_S1_+0x96>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    69dc:	c5 01       	movw	r24, r10
    69de:	b8 01       	movw	r22, r16
    69e0:	0e 94 7c 4e 	call	0x9cf8	; 0x9cf8 <strcpy>
    69e4:	60 c0       	rjmp	.+192    	; 0x6aa6 <_ZN6String7replaceERKS_S1_+0x1c8>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    69e6:	8c 01       	movw	r16, r24
    69e8:	0c 0d       	add	r16, r12
    69ea:	1d 1d       	adc	r17, r13
			size += diff;
    69ec:	c4 0d       	add	r28, r4
    69ee:	d5 1d       	adc	r29, r5
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    69f0:	f4 01       	movw	r30, r8
    69f2:	60 81       	ld	r22, Z
    69f4:	71 81       	ldd	r23, Z+1	; 0x01
    69f6:	c8 01       	movw	r24, r16
    69f8:	0e 94 ab 4e 	call	0x9d56	; 0x9d56 <strstr>
    69fc:	00 97       	sbiw	r24, 0x00	; 0
    69fe:	99 f7       	brne	.-26     	; 0x69e6 <_ZN6String7replaceERKS_S1_+0x108>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    6a00:	ca 15       	cp	r28, r10
    6a02:	db 05       	cpc	r29, r11
    6a04:	09 f4       	brne	.+2      	; 0x6a08 <_ZN6String7replaceERKS_S1_+0x12a>
    6a06:	4f c0       	rjmp	.+158    	; 0x6aa6 <_ZN6String7replaceERKS_S1_+0x1c8>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    6a08:	f3 01       	movw	r30, r6
    6a0a:	82 81       	ldd	r24, Z+2	; 0x02
    6a0c:	93 81       	ldd	r25, Z+3	; 0x03
    6a0e:	8c 17       	cp	r24, r28
    6a10:	9d 07       	cpc	r25, r29
    6a12:	08 f0       	brcs	.+2      	; 0x6a16 <_ZN6String7replaceERKS_S1_+0x138>
    6a14:	42 c0       	rjmp	.+132    	; 0x6a9a <_ZN6String7replaceERKS_S1_+0x1bc>
    6a16:	c3 01       	movw	r24, r6
    6a18:	be 01       	movw	r22, r28
    6a1a:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <_ZN6String12changeBufferEj>
    6a1e:	88 23       	and	r24, r24
    6a20:	09 f4       	brne	.+2      	; 0x6a24 <_ZN6String7replaceERKS_S1_+0x146>
    6a22:	41 c0       	rjmp	.+130    	; 0x6aa6 <_ZN6String7replaceERKS_S1_+0x1c8>
    6a24:	3a c0       	rjmp	.+116    	; 0x6a9a <_ZN6String7replaceERKS_S1_+0x1bc>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    6a26:	55 23       	and	r21, r21
    6a28:	f4 f1       	brlt	.+124    	; 0x6aa6 <_ZN6String7replaceERKS_S1_+0x1c8>
    6a2a:	c3 01       	movw	r24, r6
    6a2c:	b4 01       	movw	r22, r8
    6a2e:	0e 94 9e 33 	call	0x673c	; 0x673c <_ZNK6String11lastIndexOfERKS_j>
    6a32:	ec 01       	movw	r28, r24
    6a34:	99 23       	and	r25, r25
    6a36:	bc f1       	brlt	.+110    	; 0x6aa6 <_ZN6String7replaceERKS_S1_+0x1c8>
			readFrom = buffer + index + find.len;
    6a38:	f3 01       	movw	r30, r6
    6a3a:	60 81       	ld	r22, Z
    6a3c:	71 81       	ldd	r23, Z+1	; 0x01
    6a3e:	f4 01       	movw	r30, r8
    6a40:	84 81       	ldd	r24, Z+4	; 0x04
    6a42:	95 81       	ldd	r25, Z+5	; 0x05
    6a44:	8c 0f       	add	r24, r28
    6a46:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    6a48:	68 0f       	add	r22, r24
    6a4a:	79 1f       	adc	r23, r25
    6a4c:	f3 01       	movw	r30, r6
    6a4e:	44 81       	ldd	r20, Z+4	; 0x04
    6a50:	55 81       	ldd	r21, Z+5	; 0x05
    6a52:	48 1b       	sub	r20, r24
    6a54:	59 0b       	sbc	r21, r25
    6a56:	cb 01       	movw	r24, r22
    6a58:	84 0d       	add	r24, r4
    6a5a:	95 1d       	adc	r25, r5
    6a5c:	0e 94 56 4e 	call	0x9cac	; 0x9cac <memmove>
			len += diff;
    6a60:	f3 01       	movw	r30, r6
    6a62:	84 81       	ldd	r24, Z+4	; 0x04
    6a64:	95 81       	ldd	r25, Z+5	; 0x05
    6a66:	84 0d       	add	r24, r4
    6a68:	95 1d       	adc	r25, r5
    6a6a:	95 83       	std	Z+5, r25	; 0x05
    6a6c:	84 83       	std	Z+4, r24	; 0x04
			buffer[len] = 0;
    6a6e:	20 81       	ld	r18, Z
    6a70:	31 81       	ldd	r19, Z+1	; 0x01
    6a72:	82 0f       	add	r24, r18
    6a74:	93 1f       	adc	r25, r19
    6a76:	fc 01       	movw	r30, r24
    6a78:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    6a7a:	f3 01       	movw	r30, r6
    6a7c:	80 81       	ld	r24, Z
    6a7e:	91 81       	ldd	r25, Z+1	; 0x01
    6a80:	8c 0f       	add	r24, r28
    6a82:	9d 1f       	adc	r25, r29
    6a84:	f7 01       	movw	r30, r14
    6a86:	60 81       	ld	r22, Z
    6a88:	71 81       	ldd	r23, Z+1	; 0x01
    6a8a:	44 81       	ldd	r20, Z+4	; 0x04
    6a8c:	55 81       	ldd	r21, Z+5	; 0x05
    6a8e:	0e 94 4d 4e 	call	0x9c9a	; 0x9c9a <memcpy>
			index--;
    6a92:	ae 01       	movw	r20, r28
    6a94:	41 50       	subi	r20, 0x01	; 1
    6a96:	50 40       	sbci	r21, 0x00	; 0
    6a98:	c6 cf       	rjmp	.-116    	; 0x6a26 <_ZN6String7replaceERKS_S1_+0x148>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    6a9a:	f3 01       	movw	r30, r6
    6a9c:	44 81       	ldd	r20, Z+4	; 0x04
    6a9e:	55 81       	ldd	r21, Z+5	; 0x05
    6aa0:	41 50       	subi	r20, 0x01	; 1
    6aa2:	50 40       	sbci	r21, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    6aa4:	c0 cf       	rjmp	.-128    	; 0x6a26 <_ZN6String7replaceERKS_S1_+0x148>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    6aa6:	df 91       	pop	r29
    6aa8:	cf 91       	pop	r28
    6aaa:	1f 91       	pop	r17
    6aac:	0f 91       	pop	r16
    6aae:	ff 90       	pop	r15
    6ab0:	ef 90       	pop	r14
    6ab2:	df 90       	pop	r13
    6ab4:	cf 90       	pop	r12
    6ab6:	bf 90       	pop	r11
    6ab8:	af 90       	pop	r10
    6aba:	9f 90       	pop	r9
    6abc:	8f 90       	pop	r8
    6abe:	7f 90       	pop	r7
    6ac0:	6f 90       	pop	r6
    6ac2:	5f 90       	pop	r5
    6ac4:	4f 90       	pop	r4
    6ac6:	08 95       	ret

00006ac8 <_ZN6String11toLowerCaseEv>:

void String::toLowerCase(void)
{
    6ac8:	0f 93       	push	r16
    6aca:	1f 93       	push	r17
    6acc:	cf 93       	push	r28
    6ace:	df 93       	push	r29
	if (!buffer) return;
    6ad0:	fc 01       	movw	r30, r24
    6ad2:	c0 81       	ld	r28, Z
    6ad4:	d1 81       	ldd	r29, Z+1	; 0x01
    6ad6:	20 97       	sbiw	r28, 0x00	; 0
    6ad8:	79 f0       	breq	.+30     	; 0x6af8 <_ZN6String11toLowerCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
    6ada:	88 81       	ld	r24, Y
    6adc:	88 23       	and	r24, r24
    6ade:	61 f0       	breq	.+24     	; 0x6af8 <_ZN6String11toLowerCaseEv+0x30>
			index--;
		}
	}
}

void String::toLowerCase(void)
    6ae0:	8e 01       	movw	r16, r28
    6ae2:	0f 5f       	subi	r16, 0xFF	; 255
    6ae4:	1f 4f       	sbci	r17, 0xFF	; 255
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    6ae6:	90 e0       	ldi	r25, 0x00	; 0
    6ae8:	0e 94 30 4e 	call	0x9c60	; 0x9c60 <tolower>
    6aec:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    6aee:	f8 01       	movw	r30, r16
    6af0:	81 91       	ld	r24, Z+
    6af2:	8f 01       	movw	r16, r30
    6af4:	88 23       	and	r24, r24
    6af6:	b9 f7       	brne	.-18     	; 0x6ae6 <_ZN6String11toLowerCaseEv+0x1e>
		*p = tolower(*p);
	}
}
    6af8:	df 91       	pop	r29
    6afa:	cf 91       	pop	r28
    6afc:	1f 91       	pop	r17
    6afe:	0f 91       	pop	r16
    6b00:	08 95       	ret

00006b02 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    6b02:	0f 93       	push	r16
    6b04:	1f 93       	push	r17
    6b06:	cf 93       	push	r28
    6b08:	df 93       	push	r29
	if (!buffer) return;
    6b0a:	fc 01       	movw	r30, r24
    6b0c:	c0 81       	ld	r28, Z
    6b0e:	d1 81       	ldd	r29, Z+1	; 0x01
    6b10:	20 97       	sbiw	r28, 0x00	; 0
    6b12:	79 f0       	breq	.+30     	; 0x6b32 <_ZN6String11toUpperCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
    6b14:	88 81       	ld	r24, Y
    6b16:	88 23       	and	r24, r24
    6b18:	61 f0       	breq	.+24     	; 0x6b32 <_ZN6String11toUpperCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    6b1a:	8e 01       	movw	r16, r28
    6b1c:	0f 5f       	subi	r16, 0xFF	; 255
    6b1e:	1f 4f       	sbci	r17, 0xFF	; 255
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    6b20:	90 e0       	ldi	r25, 0x00	; 0
    6b22:	0e 94 38 4e 	call	0x9c70	; 0x9c70 <toupper>
    6b26:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    6b28:	f8 01       	movw	r30, r16
    6b2a:	81 91       	ld	r24, Z+
    6b2c:	8f 01       	movw	r16, r30
    6b2e:	88 23       	and	r24, r24
    6b30:	b9 f7       	brne	.-18     	; 0x6b20 <_ZN6String11toUpperCaseEv+0x1e>
		*p = toupper(*p);
	}
}
    6b32:	df 91       	pop	r29
    6b34:	cf 91       	pop	r28
    6b36:	1f 91       	pop	r17
    6b38:	0f 91       	pop	r16
    6b3a:	08 95       	ret

00006b3c <_ZN6String4trimEv>:

void String::trim(void)
{
    6b3c:	af 92       	push	r10
    6b3e:	bf 92       	push	r11
    6b40:	cf 92       	push	r12
    6b42:	df 92       	push	r13
    6b44:	ef 92       	push	r14
    6b46:	ff 92       	push	r15
    6b48:	0f 93       	push	r16
    6b4a:	1f 93       	push	r17
    6b4c:	cf 93       	push	r28
    6b4e:	df 93       	push	r29
    6b50:	7c 01       	movw	r14, r24
	if (!buffer || len == 0) return;
    6b52:	dc 01       	movw	r26, r24
    6b54:	cd 90       	ld	r12, X+
    6b56:	dc 90       	ld	r13, X
    6b58:	11 97       	sbiw	r26, 0x01	; 1
    6b5a:	c1 14       	cp	r12, r1
    6b5c:	d1 04       	cpc	r13, r1
    6b5e:	f1 f1       	breq	.+124    	; 0x6bdc <_ZN6String4trimEv+0xa0>
    6b60:	14 96       	adiw	r26, 0x04	; 4
    6b62:	ad 90       	ld	r10, X+
    6b64:	bc 90       	ld	r11, X
    6b66:	15 97       	sbiw	r26, 0x05	; 5
    6b68:	a1 14       	cp	r10, r1
    6b6a:	b1 04       	cpc	r11, r1
    6b6c:	b9 f1       	breq	.+110    	; 0x6bdc <_ZN6String4trimEv+0xa0>
    6b6e:	e6 01       	movw	r28, r12
    6b70:	8e 01       	movw	r16, r28
    6b72:	21 96       	adiw	r28, 0x01	; 1
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    6b74:	f8 01       	movw	r30, r16
    6b76:	80 81       	ld	r24, Z
    6b78:	90 e0       	ldi	r25, 0x00	; 0
    6b7a:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <isspace>
    6b7e:	00 97       	sbiw	r24, 0x00	; 0
    6b80:	b9 f7       	brne	.-18     	; 0x6b70 <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    6b82:	e5 01       	movw	r28, r10
    6b84:	21 97       	sbiw	r28, 0x01	; 1
    6b86:	cc 0d       	add	r28, r12
    6b88:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    6b8a:	88 81       	ld	r24, Y
    6b8c:	90 e0       	ldi	r25, 0x00	; 0
    6b8e:	0e 94 28 4e 	call	0x9c50	; 0x9c50 <isspace>
    6b92:	00 97       	sbiw	r24, 0x00	; 0
    6b94:	c9 f0       	breq	.+50     	; 0x6bc8 <_ZN6String4trimEv+0x8c>
    6b96:	c0 17       	cp	r28, r16
    6b98:	d1 07       	cpc	r29, r17
    6b9a:	b0 f0       	brcs	.+44     	; 0x6bc8 <_ZN6String4trimEv+0x8c>
    6b9c:	21 97       	sbiw	r28, 0x01	; 1
    6b9e:	f5 cf       	rjmp	.-22     	; 0x6b8a <_ZN6String4trimEv+0x4e>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
    6ba0:	8c 2d       	mov	r24, r12
    6ba2:	9d 2d       	mov	r25, r13
    6ba4:	60 2f       	mov	r22, r16
    6ba6:	71 2f       	mov	r23, r17
    6ba8:	4c 2f       	mov	r20, r28
    6baa:	5d 2f       	mov	r21, r29
    6bac:	0e 94 4d 4e 	call	0x9c9a	; 0x9c9a <memcpy>
	buffer[len] = 0;
    6bb0:	d7 01       	movw	r26, r14
    6bb2:	ed 91       	ld	r30, X+
    6bb4:	fc 91       	ld	r31, X
    6bb6:	11 97       	sbiw	r26, 0x01	; 1
    6bb8:	14 96       	adiw	r26, 0x04	; 4
    6bba:	8d 91       	ld	r24, X+
    6bbc:	9c 91       	ld	r25, X
    6bbe:	15 97       	sbiw	r26, 0x05	; 5
    6bc0:	e8 0f       	add	r30, r24
    6bc2:	f9 1f       	adc	r31, r25
    6bc4:	10 82       	st	Z, r1
    6bc6:	0a c0       	rjmp	.+20     	; 0x6bdc <_ZN6String4trimEv+0xa0>
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
    6bc8:	21 96       	adiw	r28, 0x01	; 1
    6bca:	c0 1b       	sub	r28, r16
    6bcc:	d1 0b       	sbc	r29, r17
    6bce:	f7 01       	movw	r30, r14
    6bd0:	d5 83       	std	Z+5, r29	; 0x05
    6bd2:	c4 83       	std	Z+4, r28	; 0x04
	if (begin > buffer) memcpy(buffer, begin, len);
    6bd4:	c0 16       	cp	r12, r16
    6bd6:	d1 06       	cpc	r13, r17
    6bd8:	58 f7       	brcc	.-42     	; 0x6bb0 <_ZN6String4trimEv+0x74>
    6bda:	e2 cf       	rjmp	.-60     	; 0x6ba0 <_ZN6String4trimEv+0x64>
	buffer[len] = 0;
}
    6bdc:	df 91       	pop	r29
    6bde:	cf 91       	pop	r28
    6be0:	1f 91       	pop	r17
    6be2:	0f 91       	pop	r16
    6be4:	ff 90       	pop	r15
    6be6:	ef 90       	pop	r14
    6be8:	df 90       	pop	r13
    6bea:	cf 90       	pop	r12
    6bec:	bf 90       	pop	r11
    6bee:	af 90       	pop	r10
    6bf0:	08 95       	ret

00006bf2 <_ZNK6String5toIntEv>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
    6bf2:	0f 93       	push	r16
    6bf4:	1f 93       	push	r17
	if (buffer) return atol(buffer);
    6bf6:	fc 01       	movw	r30, r24
    6bf8:	80 81       	ld	r24, Z
    6bfa:	91 81       	ldd	r25, Z+1	; 0x01
    6bfc:	00 97       	sbiw	r24, 0x00	; 0
    6bfe:	29 f0       	breq	.+10     	; 0x6c0a <_ZNK6String5toIntEv+0x18>
    6c00:	0e 94 01 4e 	call	0x9c02	; 0x9c02 <atol>
    6c04:	8b 01       	movw	r16, r22
    6c06:	9c 01       	movw	r18, r24
    6c08:	03 c0       	rjmp	.+6      	; 0x6c10 <_ZNK6String5toIntEv+0x1e>
	return 0;
    6c0a:	00 e0       	ldi	r16, 0x00	; 0
    6c0c:	10 e0       	ldi	r17, 0x00	; 0
    6c0e:	98 01       	movw	r18, r16
}
    6c10:	60 2f       	mov	r22, r16
    6c12:	71 2f       	mov	r23, r17
    6c14:	82 2f       	mov	r24, r18
    6c16:	93 2f       	mov	r25, r19
    6c18:	1f 91       	pop	r17
    6c1a:	0f 91       	pop	r16
    6c1c:	08 95       	ret

00006c1e <_ZN9DhcpClass16reset_DHCP_leaseEv>:
    return request_DHCP_lease();
}

void DhcpClass::reset_DHCP_lease(){
    // zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
    memset(_dhcpLocalIp, 0, 20);
    6c1e:	0e 96       	adiw	r24, 0x0e	; 14
    6c20:	e8 2f       	mov	r30, r24
    6c22:	f9 2f       	mov	r31, r25
    6c24:	84 e1       	ldi	r24, 0x14	; 20
    6c26:	df 01       	movw	r26, r30
    6c28:	1d 92       	st	X+, r1
    6c2a:	8a 95       	dec	r24
    6c2c:	e9 f7       	brne	.-6      	; 0x6c28 <_ZN9DhcpClass16reset_DHCP_leaseEv+0xa>
}
    6c2e:	08 95       	ret

00006c30 <_ZN9DhcpClass12presend_DHCPEv>:
    return result;
}

void DhcpClass::presend_DHCP()
{
}
    6c30:	08 95       	ret

00006c32 <_ZN9DhcpClass17parseDHCPResponseEmRm>:

    _dhcpUdpSocket.endPacket();
}

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
    6c32:	2f 92       	push	r2
    6c34:	3f 92       	push	r3
    6c36:	4f 92       	push	r4
    6c38:	5f 92       	push	r5
    6c3a:	6f 92       	push	r6
    6c3c:	7f 92       	push	r7
    6c3e:	8f 92       	push	r8
    6c40:	9f 92       	push	r9
    6c42:	af 92       	push	r10
    6c44:	bf 92       	push	r11
    6c46:	cf 92       	push	r12
    6c48:	df 92       	push	r13
    6c4a:	ef 92       	push	r14
    6c4c:	ff 92       	push	r15
    6c4e:	0f 93       	push	r16
    6c50:	1f 93       	push	r17
    6c52:	cf 93       	push	r28
    6c54:	df 93       	push	r29
    6c56:	cd b7       	in	r28, 0x3d	; 61
    6c58:	de b7       	in	r29, 0x3e	; 62
    6c5a:	e4 97       	sbiw	r28, 0x34	; 52
    6c5c:	0f b6       	in	r0, 0x3f	; 63
    6c5e:	f8 94       	cli
    6c60:	de bf       	out	0x3e, r29	; 62
    6c62:	0f be       	out	0x3f, r0	; 63
    6c64:	cd bf       	out	0x3d, r28	; 61
    6c66:	2c 01       	movw	r4, r24
    6c68:	6a 01       	movw	r12, r20
    6c6a:	7b 01       	movw	r14, r22
    6c6c:	19 01       	movw	r2, r18
    uint8_t type = 0;
    uint8_t opt_len = 0;
     
    unsigned long startTime = millis();
    6c6e:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    6c72:	4b 01       	movw	r8, r22
    6c74:	5c 01       	movw	r10, r24

    while(_dhcpUdpSocket.parsePacket() <= 0)
    6c76:	82 01       	movw	r16, r4
    6c78:	09 5b       	subi	r16, 0xB9	; 185
    6c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    6c7c:	14 c0       	rjmp	.+40     	; 0x6ca6 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x74>
    {
        if((millis() - startTime) > responseTimeout)
    6c7e:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    6c82:	dc 01       	movw	r26, r24
    6c84:	cb 01       	movw	r24, r22
    6c86:	88 19       	sub	r24, r8
    6c88:	99 09       	sbc	r25, r9
    6c8a:	aa 09       	sbc	r26, r10
    6c8c:	bb 09       	sbc	r27, r11
    6c8e:	c8 16       	cp	r12, r24
    6c90:	d9 06       	cpc	r13, r25
    6c92:	ea 06       	cpc	r14, r26
    6c94:	fb 06       	cpc	r15, r27
    6c96:	08 f4       	brcc	.+2      	; 0x6c9a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x68>
    6c98:	40 c2       	rjmp	.+1152   	; 0x711a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4e8>
        {
            return 255;
        }
        delay(50);
    6c9a:	62 e3       	ldi	r22, 0x32	; 50
    6c9c:	70 e0       	ldi	r23, 0x00	; 0
    6c9e:	80 e0       	ldi	r24, 0x00	; 0
    6ca0:	90 e0       	ldi	r25, 0x00	; 0
    6ca2:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <delay>
    uint8_t type = 0;
    uint8_t opt_len = 0;
     
    unsigned long startTime = millis();

    while(_dhcpUdpSocket.parsePacket() <= 0)
    6ca6:	70 2e       	mov	r7, r16
    6ca8:	61 2e       	mov	r6, r17
    6caa:	c8 01       	movw	r24, r16
    6cac:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <_ZN11EthernetUDP11parsePacketEv>
    6cb0:	18 16       	cp	r1, r24
    6cb2:	19 06       	cpc	r1, r25
    6cb4:	24 f7       	brge	.-56     	; 0x6c7e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c>
        }
        delay(50);
    }
    // start reading in the packet
    RIP_MSG_FIXED fixedMsg;
    _dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));
    6cb6:	80 2f       	mov	r24, r16
    6cb8:	91 2f       	mov	r25, r17
    6cba:	be 01       	movw	r22, r28
    6cbc:	69 5f       	subi	r22, 0xF9	; 249
    6cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    6cc0:	42 e2       	ldi	r20, 0x22	; 34
    6cc2:	50 e0       	ldi	r21, 0x00	; 0
    6cc4:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
  
    if(fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT)
    6cc8:	8f 81       	ldd	r24, Y+7	; 0x07
    6cca:	82 30       	cpi	r24, 0x02	; 2
    6ccc:	09 f0       	breq	.+2      	; 0x6cd0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x9e>
    6cce:	1d c2       	rjmp	.+1082   	; 0x710a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4d8>
    6cd0:	f2 01       	movw	r30, r4
    6cd2:	e9 5b       	subi	r30, 0xB9	; 185
    6cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    6cd6:	85 89       	ldd	r24, Z+21	; 0x15
    6cd8:	96 89       	ldd	r25, Z+22	; 0x16
    6cda:	83 34       	cpi	r24, 0x43	; 67
    6cdc:	91 05       	cpc	r25, r1
    6cde:	09 f0       	breq	.+2      	; 0x6ce2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0xb0>
    6ce0:	16 c2       	rjmp	.+1068   	; 0x710e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4dc>
    {
        transactionId = ntohl(fixedMsg.xid);
    6ce2:	0b 85       	ldd	r16, Y+11	; 0x0b
    6ce4:	1c 85       	ldd	r17, Y+12	; 0x0c
    6ce6:	2d 85       	ldd	r18, Y+13	; 0x0d
    6ce8:	3e 85       	ldd	r19, Y+14	; 0x0e
    6cea:	43 2f       	mov	r20, r19
    6cec:	55 27       	eor	r21, r21
    6cee:	66 27       	eor	r22, r22
    6cf0:	77 27       	eor	r23, r23
    6cf2:	b0 2f       	mov	r27, r16
    6cf4:	aa 27       	eor	r26, r26
    6cf6:	99 27       	eor	r25, r25
    6cf8:	88 27       	eor	r24, r24
    6cfa:	48 2b       	or	r20, r24
    6cfc:	59 2b       	or	r21, r25
    6cfe:	6a 2b       	or	r22, r26
    6d00:	7b 2b       	or	r23, r27
    6d02:	b2 2f       	mov	r27, r18
    6d04:	a1 2f       	mov	r26, r17
    6d06:	90 2f       	mov	r25, r16
    6d08:	88 27       	eor	r24, r24
    6d0a:	80 70       	andi	r24, 0x00	; 0
    6d0c:	90 70       	andi	r25, 0x00	; 0
    6d0e:	b0 70       	andi	r27, 0x00	; 0
    6d10:	48 2b       	or	r20, r24
    6d12:	59 2b       	or	r21, r25
    6d14:	6a 2b       	or	r22, r26
    6d16:	7b 2b       	or	r23, r27
    6d18:	bb 27       	eor	r27, r27
    6d1a:	a3 2f       	mov	r26, r19
    6d1c:	92 2f       	mov	r25, r18
    6d1e:	81 2f       	mov	r24, r17
    6d20:	80 70       	andi	r24, 0x00	; 0
    6d22:	a0 70       	andi	r26, 0x00	; 0
    6d24:	b0 70       	andi	r27, 0x00	; 0
    6d26:	6a 01       	movw	r12, r20
    6d28:	7b 01       	movw	r14, r22
    6d2a:	c8 2a       	or	r12, r24
    6d2c:	d9 2a       	or	r13, r25
    6d2e:	ea 2a       	or	r14, r26
    6d30:	fb 2a       	or	r15, r27
    6d32:	f1 01       	movw	r30, r2
    6d34:	c0 82       	st	Z, r12
    6d36:	d1 82       	std	Z+1, r13	; 0x01
    6d38:	e2 82       	std	Z+2, r14	; 0x02
    6d3a:	f3 82       	std	Z+3, r15	; 0x03
        if(memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 || (transactionId < _dhcpInitialTransactionId) || (transactionId > _dhcpTransactionId))
    6d3c:	b2 01       	movw	r22, r4
    6d3e:	68 5f       	subi	r22, 0xF8	; 248
    6d40:	7f 4f       	sbci	r23, 0xFF	; 255
    6d42:	ce 01       	movw	r24, r28
    6d44:	83 96       	adiw	r24, 0x23	; 35
    6d46:	46 e0       	ldi	r20, 0x06	; 6
    6d48:	50 e0       	ldi	r21, 0x00	; 0
    6d4a:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <memcmp>
    6d4e:	28 2f       	mov	r18, r24
    6d50:	39 2f       	mov	r19, r25
    6d52:	21 15       	cp	r18, r1
    6d54:	31 05       	cpc	r19, r1
    6d56:	99 f4       	brne	.+38     	; 0x6d7e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x14c>
    6d58:	f2 01       	movw	r30, r4
    6d5a:	80 81       	ld	r24, Z
    6d5c:	91 81       	ldd	r25, Z+1	; 0x01
    6d5e:	a2 81       	ldd	r26, Z+2	; 0x02
    6d60:	b3 81       	ldd	r27, Z+3	; 0x03
    6d62:	c8 16       	cp	r12, r24
    6d64:	d9 06       	cpc	r13, r25
    6d66:	ea 06       	cpc	r14, r26
    6d68:	fb 06       	cpc	r15, r27
    6d6a:	48 f0       	brcs	.+18     	; 0x6d7e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x14c>
    6d6c:	84 81       	ldd	r24, Z+4	; 0x04
    6d6e:	95 81       	ldd	r25, Z+5	; 0x05
    6d70:	a6 81       	ldd	r26, Z+6	; 0x06
    6d72:	b7 81       	ldd	r27, Z+7	; 0x07
    6d74:	8c 15       	cp	r24, r12
    6d76:	9d 05       	cpc	r25, r13
    6d78:	ae 05       	cpc	r26, r14
    6d7a:	bf 05       	cpc	r27, r15
    6d7c:	30 f4       	brcc	.+12     	; 0x6d8a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x158>
        {
            // Need to read the rest of the packet here regardless
            _dhcpUdpSocket.flush();
    6d7e:	87 2d       	mov	r24, r7
    6d80:	96 2d       	mov	r25, r6
    6d82:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZN11EthernetUDP5flushEv>
            return 0;
    6d86:	88 24       	eor	r8, r8
    6d88:	ca c1       	rjmp	.+916    	; 0x711e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ec>
        }

        memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);
    6d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    6d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    6d8e:	a9 8d       	ldd	r26, Y+25	; 0x19
    6d90:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6d92:	f2 01       	movw	r30, r4
    6d94:	86 87       	std	Z+14, r24	; 0x0e
    6d96:	97 87       	std	Z+15, r25	; 0x0f
    6d98:	a0 8b       	std	Z+16, r26	; 0x10
    6d9a:	b1 8b       	std	Z+17, r27	; 0x11
    6d9c:	0e ec       	ldi	r16, 0xCE	; 206
    6d9e:	10 e0       	ldi	r17, 0x00	; 0
        // Skip to the option part
        // Doing this a byte at a time so we don't have to put a big buffer
        // on the stack (as we don't have lots of memory lying around)
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
        {
            _dhcpUdpSocket.read(); // we don't care about the returned byte
    6da0:	87 2d       	mov	r24, r7
    6da2:	96 2d       	mov	r25, r6
    6da4:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
    6da8:	01 50       	subi	r16, 0x01	; 1
    6daa:	10 40       	sbci	r17, 0x00	; 0
        memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);

        // Skip to the option part
        // Doing this a byte at a time so we don't have to put a big buffer
        // on the stack (as we don't have lots of memory lying around)
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
    6dac:	c9 f7       	brne	.-14     	; 0x6da0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16e>
    6dae:	88 24       	eor	r8, r8
                    _dhcpT2 = ntohl(_dhcpT2);
                    break;

                case dhcpIPaddrLeaseTime :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
    6db0:	0f 2e       	mov	r0, r31
    6db2:	f2 e2       	ldi	r31, 0x22	; 34
    6db4:	ef 2e       	mov	r14, r31
    6db6:	ff 24       	eor	r15, r15
    6db8:	f0 2d       	mov	r31, r0
    6dba:	e4 0c       	add	r14, r4
    6dbc:	f5 1c       	adc	r15, r5
                    }
                    break;

                case dhcpT1value : 
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
    6dbe:	0f 2e       	mov	r0, r31
    6dc0:	f6 e2       	ldi	r31, 0x26	; 38
    6dc2:	af 2e       	mov	r10, r31
    6dc4:	bb 24       	eor	r11, r11
    6dc6:	f0 2d       	mov	r31, r0
    6dc8:	a4 0c       	add	r10, r4
    6dca:	b5 1c       	adc	r11, r5
                    _dhcpT1 = ntohl(_dhcpT1);
                    break;

                case dhcpT2value : 
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
    6dcc:	c2 01       	movw	r24, r4
    6dce:	8a 96       	adiw	r24, 0x2a	; 42
    6dd0:	9a a7       	lds	r25, 0x7a
    6dd2:	89 a7       	lds	r24, 0x79
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
                    {
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
    6dd4:	f2 01       	movw	r30, r4
    6dd6:	7a 96       	adiw	r30, 0x1a	; 26
    6dd8:	fa ab       	sts	0x5a, r31
    6dda:	e9 ab       	sts	0x59, r30

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    6ddc:	c2 01       	movw	r24, r4
    6dde:	88 5a       	subi	r24, 0xA8	; 168
    6de0:	9f 4f       	sbci	r25, 0xFF	; 255
    6de2:	9c ab       	sts	0x5c, r25
    6de4:	8b ab       	sts	0x5b, r24
                    type = _dhcpUdpSocket.read();
                    break;
                
                case subnetMask :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpSubnetMask, 4);
    6de6:	f2 01       	movw	r30, r4
    6de8:	72 96       	adiw	r30, 0x12	; 18
    6dea:	fc a7       	lds	r31, 0x7c
    6dec:	eb a7       	lds	r30, 0x7b
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
    6dee:	c2 01       	movw	r24, r4
    6df0:	46 96       	adiw	r24, 0x16	; 22
    6df2:	9e a7       	lds	r25, 0x7e
    6df4:	8d a7       	lds	r24, 0x7d
                    for (int i = 0; i < opt_len-4; i++)
    6df6:	22 24       	eor	r2, r2
    6df8:	33 24       	eor	r3, r3
                    }
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
    6dfa:	f2 01       	movw	r30, r4
    6dfc:	7e 96       	adiw	r30, 0x1e	; 30
    6dfe:	f8 ab       	sts	0x58, r31
    6e00:	ef a7       	lds	r30, 0x7f
    6e02:	67 01       	movw	r12, r14
    6e04:	79 c1       	rjmp	.+754    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
            _dhcpUdpSocket.read(); // we don't care about the returned byte
        }

        while (_dhcpUdpSocket.available() > 0) 
        {
            switch (_dhcpUdpSocket.read()) 
    6e06:	87 2d       	mov	r24, r7
    6e08:	96 2d       	mov	r25, r6
    6e0a:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
    6e0e:	83 33       	cpi	r24, 0x33	; 51
    6e10:	91 05       	cpc	r25, r1
    6e12:	09 f4       	brne	.+2      	; 0x6e16 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1e4>
    6e14:	29 c1       	rjmp	.+594    	; 0x7068 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x436>
    6e16:	84 33       	cpi	r24, 0x34	; 52
    6e18:	91 05       	cpc	r25, r1
    6e1a:	94 f4       	brge	.+36     	; 0x6e40 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x20e>
    6e1c:	81 30       	cpi	r24, 0x01	; 1
    6e1e:	91 05       	cpc	r25, r1
    6e20:	89 f1       	breq	.+98     	; 0x6e84 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x252>
    6e22:	82 30       	cpi	r24, 0x02	; 2
    6e24:	91 05       	cpc	r25, r1
    6e26:	24 f4       	brge	.+8      	; 0x6e30 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1fe>
    6e28:	00 97       	sbiw	r24, 0x00	; 0
    6e2a:	09 f4       	brne	.+2      	; 0x6e2e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1fc>
    6e2c:	65 c1       	rjmp	.+714    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
    6e2e:	57 c1       	rjmp	.+686    	; 0x70de <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    6e30:	83 30       	cpi	r24, 0x03	; 3
    6e32:	91 05       	cpc	r25, r1
    6e34:	a1 f1       	breq	.+104    	; 0x6e9e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x26c>
    6e36:	86 30       	cpi	r24, 0x06	; 6
    6e38:	91 05       	cpc	r25, r1
    6e3a:	09 f0       	breq	.+2      	; 0x6e3e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x20c>
    6e3c:	50 c1       	rjmp	.+672    	; 0x70de <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    6e3e:	4f c0       	rjmp	.+158    	; 0x6ede <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2ac>
    6e40:	8a 33       	cpi	r24, 0x3A	; 58
    6e42:	91 05       	cpc	r25, r1
    6e44:	09 f4       	brne	.+2      	; 0x6e48 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x216>
    6e46:	a1 c0       	rjmp	.+322    	; 0x6f8a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x358>
    6e48:	8b 33       	cpi	r24, 0x3B	; 59
    6e4a:	91 05       	cpc	r25, r1
    6e4c:	44 f4       	brge	.+16     	; 0x6e5e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x22c>
    6e4e:	85 33       	cpi	r24, 0x35	; 53
    6e50:	91 05       	cpc	r25, r1
    6e52:	71 f0       	breq	.+28     	; 0x6e70 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x23e>
    6e54:	86 33       	cpi	r24, 0x36	; 54
    6e56:	91 05       	cpc	r25, r1
    6e58:	09 f0       	breq	.+2      	; 0x6e5c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x22a>
    6e5a:	41 c1       	rjmp	.+642    	; 0x70de <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    6e5c:	60 c0       	rjmp	.+192    	; 0x6f1e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2ec>
    6e5e:	8b 33       	cpi	r24, 0x3B	; 59
    6e60:	91 05       	cpc	r25, r1
    6e62:	09 f4       	brne	.+2      	; 0x6e66 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x234>
    6e64:	c9 c0       	rjmp	.+402    	; 0x6ff8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x3c6>
    6e66:	8f 3f       	cpi	r24, 0xFF	; 255
    6e68:	91 05       	cpc	r25, r1
    6e6a:	09 f0       	breq	.+2      	; 0x6e6e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x23c>
    6e6c:	38 c1       	rjmp	.+624    	; 0x70de <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    6e6e:	44 c1       	rjmp	.+648    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                    
                case padOption :
                    break;
                
                case dhcpMessageType :
                    opt_len = _dhcpUdpSocket.read();
    6e70:	87 2d       	mov	r24, r7
    6e72:	96 2d       	mov	r25, r6
    6e74:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
                    type = _dhcpUdpSocket.read();
    6e78:	87 2d       	mov	r24, r7
    6e7a:	96 2d       	mov	r25, r6
    6e7c:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
    6e80:	88 2e       	mov	r8, r24
                    break;
    6e82:	3a c1       	rjmp	.+628    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                
                case subnetMask :
                    opt_len = _dhcpUdpSocket.read();
    6e84:	87 2d       	mov	r24, r7
    6e86:	96 2d       	mov	r25, r6
    6e88:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read(_dhcpSubnetMask, 4);
    6e8c:	87 2d       	mov	r24, r7
    6e8e:	96 2d       	mov	r25, r6
    6e90:	6b a5       	lds	r22, 0x6b
    6e92:	7c a5       	lds	r23, 0x6c
    6e94:	44 e0       	ldi	r20, 0x04	; 4
    6e96:	50 e0       	ldi	r21, 0x00	; 0
    6e98:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
                    break;
    6e9c:	2d c1       	rjmp	.+602    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
    6e9e:	87 2d       	mov	r24, r7
    6ea0:	96 2d       	mov	r25, r6
    6ea2:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
    6ea6:	08 2f       	mov	r16, r24
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
    6ea8:	87 2d       	mov	r24, r7
    6eaa:	96 2d       	mov	r25, r6
    6eac:	6d a5       	lds	r22, 0x6d
    6eae:	7e a5       	lds	r23, 0x6e
    6eb0:	44 e0       	ldi	r20, 0x04	; 4
    6eb2:	50 e0       	ldi	r21, 0x00	; 0
    6eb4:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
                    for (int i = 0; i < opt_len-4; i++)
    6eb8:	10 e0       	ldi	r17, 0x00	; 0
    6eba:	04 50       	subi	r16, 0x04	; 4
    6ebc:	10 40       	sbci	r17, 0x00	; 0
    6ebe:	10 16       	cp	r1, r16
    6ec0:	11 06       	cpc	r1, r17
    6ec2:	0c f0       	brlt	.+2      	; 0x6ec6 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x294>
    6ec4:	19 c1       	rjmp	.+562    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
    6ec6:	71 01       	movw	r14, r2
                    {
                        _dhcpUdpSocket.read();
    6ec8:	87 2d       	mov	r24, r7
    6eca:	96 2d       	mov	r25, r6
    6ecc:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
                    for (int i = 0; i < opt_len-4; i++)
    6ed0:	08 94       	sec
    6ed2:	e1 1c       	adc	r14, r1
    6ed4:	f1 1c       	adc	r15, r1
    6ed6:	e0 16       	cp	r14, r16
    6ed8:	f1 06       	cpc	r15, r17
    6eda:	b4 f3       	brlt	.-20     	; 0x6ec8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x296>
    6edc:	0d c1       	rjmp	.+538    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        _dhcpUdpSocket.read();
                    }
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
    6ede:	87 2d       	mov	r24, r7
    6ee0:	96 2d       	mov	r25, r6
    6ee2:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
    6ee6:	08 2f       	mov	r16, r24
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
    6ee8:	87 2d       	mov	r24, r7
    6eea:	96 2d       	mov	r25, r6
    6eec:	6f a5       	lds	r22, 0x6f
    6eee:	78 a9       	sts	0x48, r23
    6ef0:	44 e0       	ldi	r20, 0x04	; 4
    6ef2:	50 e0       	ldi	r21, 0x00	; 0
    6ef4:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
                    for (int i = 0; i < opt_len-4; i++)
    6ef8:	10 e0       	ldi	r17, 0x00	; 0
    6efa:	04 50       	subi	r16, 0x04	; 4
    6efc:	10 40       	sbci	r17, 0x00	; 0
    6efe:	10 16       	cp	r1, r16
    6f00:	11 06       	cpc	r1, r17
    6f02:	0c f0       	brlt	.+2      	; 0x6f06 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2d4>
    6f04:	f9 c0       	rjmp	.+498    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
    6f06:	71 01       	movw	r14, r2
                    {
                        _dhcpUdpSocket.read();
    6f08:	87 2d       	mov	r24, r7
    6f0a:	96 2d       	mov	r25, r6
    6f0c:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
                    for (int i = 0; i < opt_len-4; i++)
    6f10:	08 94       	sec
    6f12:	e1 1c       	adc	r14, r1
    6f14:	f1 1c       	adc	r15, r1
    6f16:	e0 16       	cp	r14, r16
    6f18:	f1 06       	cpc	r15, r17
    6f1a:	b4 f3       	brlt	.-20     	; 0x6f08 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2d6>
    6f1c:	ed c0       	rjmp	.+474    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        _dhcpUdpSocket.read();
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
    6f1e:	87 2d       	mov	r24, r7
    6f20:	96 2d       	mov	r25, r6
    6f22:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
    6f26:	18 2f       	mov	r17, r24
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
    6f28:	f2 01       	movw	r30, r4
    6f2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    6f2c:	93 8d       	ldd	r25, Z+27	; 0x1b
    6f2e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6f30:	b5 8d       	ldd	r27, Z+29	; 0x1d
    6f32:	00 97       	sbiw	r24, 0x00	; 0
    6f34:	a1 05       	cpc	r26, r1
    6f36:	b1 05       	cpc	r27, r1
    6f38:	a9 f0       	breq	.+42     	; 0x6f64 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x332>
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
    6f3a:	ce 01       	movw	r24, r28
    6f3c:	01 96       	adiw	r24, 0x01	; 1
    6f3e:	69 a9       	sts	0x49, r22
    6f40:	7a a9       	sts	0x4a, r23
    6f42:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN9IPAddressC1EPKh>
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
    6f46:	8b 81       	ldd	r24, Y+3	; 0x03
    6f48:	9c 81       	ldd	r25, Y+4	; 0x04
    6f4a:	ad 81       	ldd	r26, Y+5	; 0x05
    6f4c:	be 81       	ldd	r27, Y+6	; 0x06
    6f4e:	eb a9       	sts	0x4b, r30
    6f50:	fc a9       	sts	0x4c, r31
    6f52:	40 81       	ld	r20, Z
    6f54:	51 81       	ldd	r21, Z+1	; 0x01
    6f56:	62 81       	ldd	r22, Z+2	; 0x02
    6f58:	73 81       	ldd	r23, Z+3	; 0x03
    6f5a:	84 17       	cp	r24, r20
    6f5c:	95 07       	cpc	r25, r21
    6f5e:	a6 07       	cpc	r26, r22
    6f60:	b7 07       	cpc	r27, r23
    6f62:	49 f4       	brne	.+18     	; 0x6f76 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x344>
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
                    {
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
    6f64:	87 2d       	mov	r24, r7
    6f66:	96 2d       	mov	r25, r6
    6f68:	69 a9       	sts	0x49, r22
    6f6a:	7a a9       	sts	0x4a, r23
    6f6c:	44 e0       	ldi	r20, 0x04	; 4
    6f6e:	50 e0       	ldi	r21, 0x00	; 0
    6f70:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
    6f74:	c1 c0       	rjmp	.+386    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                    }
                    else
                    {
                        // Skip over the rest of this option
                        while (opt_len--)
    6f76:	11 23       	and	r17, r17
    6f78:	09 f4       	brne	.+2      	; 0x6f7c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x34a>
    6f7a:	be c0       	rjmp	.+380    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        {
                            _dhcpUdpSocket.read();
    6f7c:	87 2d       	mov	r24, r7
    6f7e:	96 2d       	mov	r25, r6
    6f80:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
    6f84:	11 50       	subi	r17, 0x01	; 1
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
                    }
                    else
                    {
                        // Skip over the rest of this option
                        while (opt_len--)
    6f86:	d1 f7       	brne	.-12     	; 0x6f7c <_ZN9DhcpClass17parseDHCPResponseEmRm+0x34a>
    6f88:	b7 c0       	rjmp	.+366    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        }
                    }
                    break;

                case dhcpT1value : 
                    opt_len = _dhcpUdpSocket.read();
    6f8a:	87 2d       	mov	r24, r7
    6f8c:	96 2d       	mov	r25, r6
    6f8e:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
    6f92:	87 2d       	mov	r24, r7
    6f94:	96 2d       	mov	r25, r6
    6f96:	b5 01       	movw	r22, r10
    6f98:	44 e0       	ldi	r20, 0x04	; 4
    6f9a:	50 e0       	ldi	r21, 0x00	; 0
    6f9c:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
                    _dhcpT1 = ntohl(_dhcpT1);
    6fa0:	f2 01       	movw	r30, r4
    6fa2:	06 a1       	lds	r16, 0x46
    6fa4:	17 a1       	lds	r17, 0x47
    6fa6:	20 a5       	lds	r18, 0x60
    6fa8:	31 a5       	lds	r19, 0x61
    6faa:	83 2f       	mov	r24, r19
    6fac:	99 27       	eor	r25, r25
    6fae:	aa 27       	eor	r26, r26
    6fb0:	bb 27       	eor	r27, r27
    6fb2:	70 2f       	mov	r23, r16
    6fb4:	66 27       	eor	r22, r22
    6fb6:	55 27       	eor	r21, r21
    6fb8:	44 27       	eor	r20, r20
    6fba:	48 2b       	or	r20, r24
    6fbc:	59 2b       	or	r21, r25
    6fbe:	6a 2b       	or	r22, r26
    6fc0:	7b 2b       	or	r23, r27
    6fc2:	b2 2f       	mov	r27, r18
    6fc4:	a1 2f       	mov	r26, r17
    6fc6:	90 2f       	mov	r25, r16
    6fc8:	88 27       	eor	r24, r24
    6fca:	80 70       	andi	r24, 0x00	; 0
    6fcc:	90 70       	andi	r25, 0x00	; 0
    6fce:	b0 70       	andi	r27, 0x00	; 0
    6fd0:	48 2b       	or	r20, r24
    6fd2:	59 2b       	or	r21, r25
    6fd4:	6a 2b       	or	r22, r26
    6fd6:	7b 2b       	or	r23, r27
    6fd8:	bb 27       	eor	r27, r27
    6fda:	a3 2f       	mov	r26, r19
    6fdc:	92 2f       	mov	r25, r18
    6fde:	81 2f       	mov	r24, r17
    6fe0:	80 70       	andi	r24, 0x00	; 0
    6fe2:	a0 70       	andi	r26, 0x00	; 0
    6fe4:	b0 70       	andi	r27, 0x00	; 0
    6fe6:	84 2b       	or	r24, r20
    6fe8:	95 2b       	or	r25, r21
    6fea:	a6 2b       	or	r26, r22
    6fec:	b7 2b       	or	r27, r23
    6fee:	86 a3       	lds	r24, 0x56
    6ff0:	97 a3       	lds	r25, 0x57
    6ff2:	a0 a7       	lds	r26, 0x70
    6ff4:	b1 a7       	lds	r27, 0x71
                    break;
    6ff6:	80 c0       	rjmp	.+256    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>

                case dhcpT2value : 
                    opt_len = _dhcpUdpSocket.read();
    6ff8:	87 2d       	mov	r24, r7
    6ffa:	96 2d       	mov	r25, r6
    6ffc:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
    7000:	87 2d       	mov	r24, r7
    7002:	96 2d       	mov	r25, r6
    7004:	69 a5       	lds	r22, 0x69
    7006:	7a a5       	lds	r23, 0x6a
    7008:	44 e0       	ldi	r20, 0x04	; 4
    700a:	50 e0       	ldi	r21, 0x00	; 0
    700c:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
                    _dhcpT2 = ntohl(_dhcpT2);
    7010:	f2 01       	movw	r30, r4
    7012:	02 a5       	lds	r16, 0x62
    7014:	13 a5       	lds	r17, 0x63
    7016:	24 a5       	lds	r18, 0x64
    7018:	35 a5       	lds	r19, 0x65
    701a:	83 2f       	mov	r24, r19
    701c:	99 27       	eor	r25, r25
    701e:	aa 27       	eor	r26, r26
    7020:	bb 27       	eor	r27, r27
    7022:	70 2f       	mov	r23, r16
    7024:	66 27       	eor	r22, r22
    7026:	55 27       	eor	r21, r21
    7028:	44 27       	eor	r20, r20
    702a:	48 2b       	or	r20, r24
    702c:	59 2b       	or	r21, r25
    702e:	6a 2b       	or	r22, r26
    7030:	7b 2b       	or	r23, r27
    7032:	b2 2f       	mov	r27, r18
    7034:	a1 2f       	mov	r26, r17
    7036:	90 2f       	mov	r25, r16
    7038:	88 27       	eor	r24, r24
    703a:	80 70       	andi	r24, 0x00	; 0
    703c:	90 70       	andi	r25, 0x00	; 0
    703e:	b0 70       	andi	r27, 0x00	; 0
    7040:	48 2b       	or	r20, r24
    7042:	59 2b       	or	r21, r25
    7044:	6a 2b       	or	r22, r26
    7046:	7b 2b       	or	r23, r27
    7048:	bb 27       	eor	r27, r27
    704a:	a3 2f       	mov	r26, r19
    704c:	92 2f       	mov	r25, r18
    704e:	81 2f       	mov	r24, r17
    7050:	80 70       	andi	r24, 0x00	; 0
    7052:	a0 70       	andi	r26, 0x00	; 0
    7054:	b0 70       	andi	r27, 0x00	; 0
    7056:	84 2b       	or	r24, r20
    7058:	95 2b       	or	r25, r21
    705a:	a6 2b       	or	r26, r22
    705c:	b7 2b       	or	r27, r23
    705e:	82 a7       	lds	r24, 0x72
    7060:	93 a7       	lds	r25, 0x73
    7062:	a4 a7       	lds	r26, 0x74
    7064:	b5 a7       	lds	r27, 0x75
                    break;
    7066:	48 c0       	rjmp	.+144    	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>

                case dhcpIPaddrLeaseTime :
                    opt_len = _dhcpUdpSocket.read();
    7068:	87 2d       	mov	r24, r7
    706a:	96 2d       	mov	r25, r6
    706c:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
    7070:	87 2d       	mov	r24, r7
    7072:	96 2d       	mov	r25, r6
    7074:	b6 01       	movw	r22, r12
    7076:	44 e0       	ldi	r20, 0x04	; 4
    7078:	50 e0       	ldi	r21, 0x00	; 0
    707a:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
                    _dhcpLeaseTime = ntohl(_dhcpLeaseTime);
    707e:	f2 01       	movw	r30, r4
    7080:	02 a1       	lds	r16, 0x42
    7082:	13 a1       	lds	r17, 0x43
    7084:	24 a1       	lds	r18, 0x44
    7086:	35 a1       	lds	r19, 0x45
    7088:	83 2f       	mov	r24, r19
    708a:	99 27       	eor	r25, r25
    708c:	aa 27       	eor	r26, r26
    708e:	bb 27       	eor	r27, r27
    7090:	70 2f       	mov	r23, r16
    7092:	66 27       	eor	r22, r22
    7094:	55 27       	eor	r21, r21
    7096:	44 27       	eor	r20, r20
    7098:	48 2b       	or	r20, r24
    709a:	59 2b       	or	r21, r25
    709c:	6a 2b       	or	r22, r26
    709e:	7b 2b       	or	r23, r27
    70a0:	b2 2f       	mov	r27, r18
    70a2:	a1 2f       	mov	r26, r17
    70a4:	90 2f       	mov	r25, r16
    70a6:	88 27       	eor	r24, r24
    70a8:	80 70       	andi	r24, 0x00	; 0
    70aa:	90 70       	andi	r25, 0x00	; 0
    70ac:	b0 70       	andi	r27, 0x00	; 0
    70ae:	48 2b       	or	r20, r24
    70b0:	59 2b       	or	r21, r25
    70b2:	6a 2b       	or	r22, r26
    70b4:	7b 2b       	or	r23, r27
    70b6:	bb 27       	eor	r27, r27
    70b8:	a3 2f       	mov	r26, r19
    70ba:	92 2f       	mov	r25, r18
    70bc:	81 2f       	mov	r24, r17
    70be:	80 70       	andi	r24, 0x00	; 0
    70c0:	a0 70       	andi	r26, 0x00	; 0
    70c2:	b0 70       	andi	r27, 0x00	; 0
    70c4:	84 2b       	or	r24, r20
    70c6:	95 2b       	or	r25, r21
    70c8:	a6 2b       	or	r26, r22
    70ca:	b7 2b       	or	r27, r23
    70cc:	82 a3       	lds	r24, 0x52
    70ce:	93 a3       	lds	r25, 0x53
    70d0:	a4 a3       	lds	r26, 0x54
    70d2:	b5 a3       	lds	r27, 0x55
                    _renewInSec = _dhcpLeaseTime;
    70d4:	86 a7       	lds	r24, 0x76
    70d6:	97 a7       	lds	r25, 0x77
    70d8:	a0 ab       	sts	0x50, r26
    70da:	b1 ab       	sts	0x51, r27
                    break;
    70dc:	0d c0       	rjmp	.+26     	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>

                default :
                    opt_len = _dhcpUdpSocket.read();
    70de:	87 2d       	mov	r24, r7
    70e0:	96 2d       	mov	r25, r6
    70e2:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
    70e6:	18 2f       	mov	r17, r24
                    // Skip over the rest of this option
                    while (opt_len--)
    70e8:	88 23       	and	r24, r24
    70ea:	31 f0       	breq	.+12     	; 0x70f8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                    {
                        _dhcpUdpSocket.read();
    70ec:	87 2d       	mov	r24, r7
    70ee:	96 2d       	mov	r25, r6
    70f0:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
    70f4:	11 50       	subi	r17, 0x01	; 1
                    break;

                default :
                    opt_len = _dhcpUdpSocket.read();
                    // Skip over the rest of this option
                    while (opt_len--)
    70f6:	d1 f7       	brne	.-12     	; 0x70ec <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ba>
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
        {
            _dhcpUdpSocket.read(); // we don't care about the returned byte
        }

        while (_dhcpUdpSocket.available() > 0) 
    70f8:	87 2d       	mov	r24, r7
    70fa:	96 2d       	mov	r25, r6
    70fc:	0e 94 19 10 	call	0x2032	; 0x2032 <_ZN11EthernetUDP9availableEv>
    7100:	18 16       	cp	r1, r24
    7102:	19 06       	cpc	r1, r25
    7104:	0c f4       	brge	.+2      	; 0x7108 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4d6>
    7106:	7f ce       	rjmp	.-770    	; 0x6e06 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1d4>
    7108:	03 c0       	rjmp	.+6      	; 0x7110 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4de>
    _dhcpUdpSocket.endPacket();
}

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
    uint8_t type = 0;
    710a:	88 24       	eor	r8, r8
    710c:	01 c0       	rjmp	.+2      	; 0x7110 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4de>
    710e:	88 24       	eor	r8, r8
            }
        }
    }

    // Need to skip to end of the packet regardless here
    _dhcpUdpSocket.flush();
    7110:	87 2d       	mov	r24, r7
    7112:	96 2d       	mov	r25, r6
    7114:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZN11EthernetUDP5flushEv>

    return type;
    7118:	02 c0       	rjmp	.+4      	; 0x711e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ec>

    while(_dhcpUdpSocket.parsePacket() <= 0)
    {
        if((millis() - startTime) > responseTimeout)
        {
            return 255;
    711a:	88 24       	eor	r8, r8
    711c:	8a 94       	dec	r8

    // Need to skip to end of the packet regardless here
    _dhcpUdpSocket.flush();

    return type;
}
    711e:	88 2d       	mov	r24, r8
    7120:	e4 96       	adiw	r28, 0x34	; 52
    7122:	0f b6       	in	r0, 0x3f	; 63
    7124:	f8 94       	cli
    7126:	de bf       	out	0x3e, r29	; 62
    7128:	0f be       	out	0x3f, r0	; 63
    712a:	cd bf       	out	0x3d, r28	; 61
    712c:	df 91       	pop	r29
    712e:	cf 91       	pop	r28
    7130:	1f 91       	pop	r17
    7132:	0f 91       	pop	r16
    7134:	ff 90       	pop	r15
    7136:	ef 90       	pop	r14
    7138:	df 90       	pop	r13
    713a:	cf 90       	pop	r12
    713c:	bf 90       	pop	r11
    713e:	af 90       	pop	r10
    7140:	9f 90       	pop	r9
    7142:	8f 90       	pop	r8
    7144:	7f 90       	pop	r7
    7146:	6f 90       	pop	r6
    7148:	5f 90       	pop	r5
    714a:	4f 90       	pop	r4
    714c:	3f 90       	pop	r3
    714e:	2f 90       	pop	r2
    7150:	08 95       	ret

00007152 <_ZN9DhcpClass10getLocalIpEv>:
    _lastCheck = now;
    return rc;
}

IPAddress DhcpClass::getLocalIp()
{
    7152:	cf 93       	push	r28
    7154:	df 93       	push	r29
    7156:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpLocalIp);
    7158:	62 5f       	subi	r22, 0xF2	; 242
    715a:	7f 4f       	sbci	r23, 0xFF	; 255
    715c:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN9IPAddressC1EPKh>
}
    7160:	ce 01       	movw	r24, r28
    7162:	df 91       	pop	r29
    7164:	cf 91       	pop	r28
    7166:	08 95       	ret

00007168 <_ZN9DhcpClass13getSubnetMaskEv>:

IPAddress DhcpClass::getSubnetMask()
{
    7168:	cf 93       	push	r28
    716a:	df 93       	push	r29
    716c:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpSubnetMask);
    716e:	6e 5e       	subi	r22, 0xEE	; 238
    7170:	7f 4f       	sbci	r23, 0xFF	; 255
    7172:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN9IPAddressC1EPKh>
}
    7176:	ce 01       	movw	r24, r28
    7178:	df 91       	pop	r29
    717a:	cf 91       	pop	r28
    717c:	08 95       	ret

0000717e <_ZN9DhcpClass12getGatewayIpEv>:

IPAddress DhcpClass::getGatewayIp()
{
    717e:	cf 93       	push	r28
    7180:	df 93       	push	r29
    7182:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpGatewayIp);
    7184:	6a 5e       	subi	r22, 0xEA	; 234
    7186:	7f 4f       	sbci	r23, 0xFF	; 255
    7188:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN9IPAddressC1EPKh>
}
    718c:	ce 01       	movw	r24, r28
    718e:	df 91       	pop	r29
    7190:	cf 91       	pop	r28
    7192:	08 95       	ret

00007194 <_ZN9DhcpClass15getDhcpServerIpEv>:

IPAddress DhcpClass::getDhcpServerIp()
{
    7194:	cf 93       	push	r28
    7196:	df 93       	push	r29
    7198:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpDhcpServerIp);
    719a:	66 5e       	subi	r22, 0xE6	; 230
    719c:	7f 4f       	sbci	r23, 0xFF	; 255
    719e:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN9IPAddressC1EPKh>
}
    71a2:	ce 01       	movw	r24, r28
    71a4:	df 91       	pop	r29
    71a6:	cf 91       	pop	r28
    71a8:	08 95       	ret

000071aa <_ZN9DhcpClass14getDnsServerIpEv>:

IPAddress DhcpClass::getDnsServerIp()
{
    71aa:	cf 93       	push	r28
    71ac:	df 93       	push	r29
    71ae:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpDnsServerIp);
    71b0:	62 5e       	subi	r22, 0xE2	; 226
    71b2:	7f 4f       	sbci	r23, 0xFF	; 255
    71b4:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <_ZN9IPAddressC1EPKh>
}
    71b8:	ce 01       	movw	r24, r28
    71ba:	df 91       	pop	r29
    71bc:	cf 91       	pop	r28
    71be:	08 95       	ret

000071c0 <_ZN9DhcpClass9printByteEPch>:

void DhcpClass::printByte(char * buf, uint8_t n ) {
  char *str = &buf[1];
  buf[0]='0';
    71c0:	80 e3       	ldi	r24, 0x30	; 48
    71c2:	fb 01       	movw	r30, r22
    71c4:	80 83       	st	Z, r24
IPAddress DhcpClass::getDnsServerIp()
{
    return IPAddress(_dhcpDnsServerIp);
}

void DhcpClass::printByte(char * buf, uint8_t n ) {
    71c6:	32 96       	adiw	r30, 0x02	; 2
    71c8:	01 c0       	rjmp	.+2      	; 0x71cc <_ZN9DhcpClass9printByteEPch+0xc>
  char *str = &buf[1];
  buf[0]='0';
  do {
    unsigned long m = n;
    n /= 16;
    71ca:	48 2f       	mov	r20, r24
    char c = m - 16 * n;
    71cc:	84 2f       	mov	r24, r20
    71ce:	82 95       	swap	r24
    71d0:	8f 70       	andi	r24, 0x0F	; 15
    71d2:	4f 70       	andi	r20, 0x0F	; 15
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
    71d4:	4a 30       	cpi	r20, 0x0A	; 10
    71d6:	10 f4       	brcc	.+4      	; 0x71dc <_ZN9DhcpClass9printByteEPch+0x1c>
    71d8:	40 5d       	subi	r20, 0xD0	; 208
    71da:	01 c0       	rjmp	.+2      	; 0x71de <_ZN9DhcpClass9printByteEPch+0x1e>
    71dc:	49 5c       	subi	r20, 0xC9	; 201
    71de:	42 93       	st	-Z, r20
}

void DhcpClass::printByte(char * buf, uint8_t n ) {
  char *str = &buf[1];
  buf[0]='0';
  do {
    71e0:	88 23       	and	r24, r24
    71e2:	99 f7       	brne	.-26     	; 0x71ca <_ZN9DhcpClass9printByteEPch+0xa>
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    71e4:	08 95       	ret

000071e6 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>:
void DhcpClass::presend_DHCP()
{
}

void DhcpClass::send_DHCP_MESSAGE(uint8_t messageType, uint16_t secondsElapsed)
{
    71e6:	9f 92       	push	r9
    71e8:	af 92       	push	r10
    71ea:	bf 92       	push	r11
    71ec:	cf 92       	push	r12
    71ee:	df 92       	push	r13
    71f0:	ef 92       	push	r14
    71f2:	ff 92       	push	r15
    71f4:	0f 93       	push	r16
    71f6:	1f 93       	push	r17
    71f8:	cf 93       	push	r28
    71fa:	df 93       	push	r29
    71fc:	cd b7       	in	r28, 0x3d	; 61
    71fe:	de b7       	in	r29, 0x3e	; 62
    7200:	ac 97       	sbiw	r28, 0x2c	; 44
    7202:	0f b6       	in	r0, 0x3f	; 63
    7204:	f8 94       	cli
    7206:	de bf       	out	0x3e, r29	; 62
    7208:	0f be       	out	0x3f, r0	; 63
    720a:	cd bf       	out	0x3d, r28	; 61
    720c:	5c 01       	movw	r10, r24
    720e:	96 2e       	mov	r9, r22
    7210:	d4 2e       	mov	r13, r20
    7212:	c5 2e       	mov	r12, r21
    uint8_t buffer[32];
    memset(buffer, 0, 32);
    7214:	80 e2       	ldi	r24, 0x20	; 32
    7216:	fe 01       	movw	r30, r28
    7218:	3d 96       	adiw	r30, 0x0d	; 13
    721a:	df 01       	movw	r26, r30
    721c:	1d 92       	st	X+, r1
    721e:	8a 95       	dec	r24
    7220:	e9 f7       	brne	.-6      	; 0x721c <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x36>
    IPAddress dest_addr( 255, 255, 255, 255 ); // Broadcast address
    7222:	ce 01       	movw	r24, r28
    7224:	07 96       	adiw	r24, 0x07	; 7
    7226:	6f ef       	ldi	r22, 0xFF	; 255
    7228:	4f ef       	ldi	r20, 0xFF	; 255
    722a:	2f ef       	ldi	r18, 0xFF	; 255
    722c:	0f ef       	ldi	r16, 0xFF	; 255
    722e:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <_ZN9IPAddressC1Ehhhh>

    if (-1 == _dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT))
    7232:	0f 2e       	mov	r0, r31
    7234:	f7 e4       	ldi	r31, 0x47	; 71
    7236:	ef 2e       	mov	r14, r31
    7238:	ff 24       	eor	r15, r15
    723a:	f0 2d       	mov	r31, r0
    723c:	ea 0c       	add	r14, r10
    723e:	fb 1c       	adc	r15, r11
    7240:	8b e4       	ldi	r24, 0x4B	; 75
    7242:	93 e0       	ldi	r25, 0x03	; 3
    7244:	9a 83       	std	Y+2, r25	; 0x02
    7246:	89 83       	std	Y+1, r24	; 0x01
    7248:	89 85       	ldd	r24, Y+9	; 0x09
    724a:	9a 85       	ldd	r25, Y+10	; 0x0a
    724c:	ab 85       	ldd	r26, Y+11	; 0x0b
    724e:	bc 85       	ldd	r27, Y+12	; 0x0c
    7250:	8b 83       	std	Y+3, r24	; 0x03
    7252:	9c 83       	std	Y+4, r25	; 0x04
    7254:	ad 83       	std	Y+5, r26	; 0x05
    7256:	be 83       	std	Y+6, r27	; 0x06
    7258:	c7 01       	movw	r24, r14
    725a:	be 01       	movw	r22, r28
    725c:	6f 5f       	subi	r22, 0xFF	; 255
    725e:	7f 4f       	sbci	r23, 0xFF	; 255
    7260:	43 e4       	ldi	r20, 0x43	; 67
    7262:	50 e0       	ldi	r21, 0x00	; 0
    7264:	0e 94 4a 11 	call	0x2294	; 0x2294 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
    7268:	bf ef       	ldi	r27, 0xFF	; 255
    726a:	8f 3f       	cpi	r24, 0xFF	; 255
    726c:	9b 07       	cpc	r25, r27
    726e:	09 f4       	brne	.+2      	; 0x7272 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x8c>
    7270:	f3 c0       	rjmp	.+486    	; 0x7458 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x272>
    {
        // FIXME Need to return errors
        return;
    }

    buffer[0] = DHCP_BOOTREQUEST;   // op
    7272:	81 e0       	ldi	r24, 0x01	; 1
    7274:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = DHCP_HTYPE10MB;     // htype
    7276:	8e 87       	std	Y+14, r24	; 0x0e
    buffer[2] = DHCP_HLENETHERNET;  // hlen
    7278:	86 e0       	ldi	r24, 0x06	; 6
    727a:	8f 87       	std	Y+15, r24	; 0x0f
    buffer[3] = DHCP_HOPS;          // hops
    727c:	18 8a       	std	Y+16, r1	; 0x10

    // xid
    unsigned long xid = htonl(_dhcpTransactionId);
    727e:	f5 01       	movw	r30, r10
    7280:	04 81       	ldd	r16, Z+4	; 0x04
    7282:	15 81       	ldd	r17, Z+5	; 0x05
    7284:	26 81       	ldd	r18, Z+6	; 0x06
    7286:	37 81       	ldd	r19, Z+7	; 0x07
    7288:	43 2f       	mov	r20, r19
    728a:	55 27       	eor	r21, r21
    728c:	66 27       	eor	r22, r22
    728e:	77 27       	eor	r23, r23
    7290:	b0 2f       	mov	r27, r16
    7292:	aa 27       	eor	r26, r26
    7294:	99 27       	eor	r25, r25
    7296:	88 27       	eor	r24, r24
    7298:	48 2b       	or	r20, r24
    729a:	59 2b       	or	r21, r25
    729c:	6a 2b       	or	r22, r26
    729e:	7b 2b       	or	r23, r27
    72a0:	b2 2f       	mov	r27, r18
    72a2:	a1 2f       	mov	r26, r17
    72a4:	90 2f       	mov	r25, r16
    72a6:	88 27       	eor	r24, r24
    72a8:	80 70       	andi	r24, 0x00	; 0
    72aa:	90 70       	andi	r25, 0x00	; 0
    72ac:	b0 70       	andi	r27, 0x00	; 0
    72ae:	84 2b       	or	r24, r20
    72b0:	95 2b       	or	r25, r21
    72b2:	a6 2b       	or	r26, r22
    72b4:	b7 2b       	or	r27, r23
    72b6:	01 2f       	mov	r16, r17
    72b8:	12 2f       	mov	r17, r18
    72ba:	23 2f       	mov	r18, r19
    72bc:	33 27       	eor	r19, r19
    72be:	00 70       	andi	r16, 0x00	; 0
    72c0:	20 70       	andi	r18, 0x00	; 0
    72c2:	30 70       	andi	r19, 0x00	; 0
    72c4:	80 2b       	or	r24, r16
    72c6:	91 2b       	or	r25, r17
    72c8:	a2 2b       	or	r26, r18
    72ca:	b3 2b       	or	r27, r19
    memcpy(buffer + 4, &(xid), 4);
    72cc:	89 8b       	std	Y+17, r24	; 0x11
    72ce:	9a 8b       	std	Y+18, r25	; 0x12
    72d0:	ab 8b       	std	Y+19, r26	; 0x13
    72d2:	bc 8b       	std	Y+20, r27	; 0x14

    // 8, 9 - seconds elapsed
    buffer[8] = ((secondsElapsed & 0xff00) >> 8);
    72d4:	cd 8a       	std	Y+21, r12	; 0x15
    buffer[9] = (secondsElapsed & 0x00ff);
    72d6:	de 8a       	std	Y+22, r13	; 0x16

    // flags
    unsigned short flags = htons(DHCP_FLAGSBROADCAST);
    memcpy(buffer + 10, &(flags), 2);
    72d8:	80 e8       	ldi	r24, 0x80	; 128
    72da:	90 e0       	ldi	r25, 0x00	; 0
    72dc:	98 8f       	std	Y+24, r25	; 0x18
    72de:	8f 8b       	std	Y+23, r24	; 0x17
    // yiaddr: already zeroed
    // siaddr: already zeroed
    // giaddr: already zeroed

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 28);
    72e0:	8e 01       	movw	r16, r28
    72e2:	03 5f       	subi	r16, 0xF3	; 243
    72e4:	1f 4f       	sbci	r17, 0xFF	; 255
    72e6:	c7 01       	movw	r24, r14
    72e8:	b8 01       	movw	r22, r16
    72ea:	4c e1       	ldi	r20, 0x1C	; 28
    72ec:	50 e0       	ldi	r21, 0x00	; 0
    72ee:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>

    memset(buffer, 0, 32); // clear local buffer
    72f2:	80 e2       	ldi	r24, 0x20	; 32
    72f4:	d8 01       	movw	r26, r16
    72f6:	1d 92       	st	X+, r1
    72f8:	8a 95       	dec	r24
    72fa:	e9 f7       	brne	.-6      	; 0x72f6 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x110>

    memcpy(buffer, _dhcpMacAddr, 6); // chaddr
    72fc:	cc 24       	eor	r12, r12
    72fe:	dd 24       	eor	r13, r13
    7300:	68 94       	set
    7302:	c3 f8       	bld	r12, 3
    7304:	ca 0c       	add	r12, r10
    7306:	db 1c       	adc	r13, r11
    7308:	f8 01       	movw	r30, r16
    730a:	d6 01       	movw	r26, r12
    730c:	86 e0       	ldi	r24, 0x06	; 6
    730e:	0d 90       	ld	r0, X+
    7310:	01 92       	st	Z+, r0
    7312:	81 50       	subi	r24, 0x01	; 1
    7314:	e1 f7       	brne	.-8      	; 0x730e <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x128>

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 16);
    7316:	8e 01       	movw	r16, r28
    7318:	03 5f       	subi	r16, 0xF3	; 243
    731a:	1f 4f       	sbci	r17, 0xFF	; 255
    731c:	c7 01       	movw	r24, r14
    731e:	b8 01       	movw	r22, r16
    7320:	40 e1       	ldi	r20, 0x10	; 16
    7322:	50 e0       	ldi	r21, 0x00	; 0
    7324:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>

    memset(buffer, 0, 32); // clear local buffer
    7328:	80 e2       	ldi	r24, 0x20	; 32
    732a:	f8 01       	movw	r30, r16
    732c:	11 92       	st	Z+, r1
    732e:	8a 95       	dec	r24
    7330:	e9 f7       	brne	.-6      	; 0x732c <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x146>
    7332:	06 e0       	ldi	r16, 0x06	; 6
    7334:	10 e0       	ldi	r17, 0x00	; 0

    // leave zeroed out for sname && file
    // put in W5100 transmit buffer x 6 (192 bytes)
  
    for(int i = 0; i < 6; i++) {
        _dhcpUdpSocket.write(buffer, 32);
    7336:	c7 01       	movw	r24, r14
    7338:	be 01       	movw	r22, r28
    733a:	63 5f       	subi	r22, 0xF3	; 243
    733c:	7f 4f       	sbci	r23, 0xFF	; 255
    733e:	40 e2       	ldi	r20, 0x20	; 32
    7340:	50 e0       	ldi	r21, 0x00	; 0
    7342:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>
    7346:	01 50       	subi	r16, 0x01	; 1
    7348:	10 40       	sbci	r17, 0x00	; 0
    memset(buffer, 0, 32); // clear local buffer

    // leave zeroed out for sname && file
    // put in W5100 transmit buffer x 6 (192 bytes)
  
    for(int i = 0; i < 6; i++) {
    734a:	a9 f7       	brne	.-22     	; 0x7336 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x150>
        _dhcpUdpSocket.write(buffer, 32);
    }
  
    // OPT - Magic Cookie
    buffer[0] = (uint8_t)((MAGIC_COOKIE >> 24)& 0xFF);
    734c:	83 e6       	ldi	r24, 0x63	; 99
    734e:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = (uint8_t)((MAGIC_COOKIE >> 16)& 0xFF);
    7350:	92 e8       	ldi	r25, 0x82	; 130
    7352:	9e 87       	std	Y+14, r25	; 0x0e
    buffer[2] = (uint8_t)((MAGIC_COOKIE >> 8)& 0xFF);
    7354:	93 e5       	ldi	r25, 0x53	; 83
    7356:	9f 87       	std	Y+15, r25	; 0x0f
    buffer[3] = (uint8_t)(MAGIC_COOKIE& 0xFF);
    7358:	88 8b       	std	Y+16, r24	; 0x10

    // OPT - message type
    buffer[4] = dhcpMessageType;
    735a:	85 e3       	ldi	r24, 0x35	; 53
    735c:	89 8b       	std	Y+17, r24	; 0x11
    buffer[5] = 0x01;
    735e:	81 e0       	ldi	r24, 0x01	; 1
    7360:	8a 8b       	std	Y+18, r24	; 0x12
    buffer[6] = messageType; //DHCP_REQUEST;
    7362:	9b 8a       	std	Y+19, r9	; 0x13

    // OPT - client identifier
    buffer[7] = dhcpClientIdentifier;
    7364:	9d e3       	ldi	r25, 0x3D	; 61
    7366:	9c 8b       	std	Y+20, r25	; 0x14
    buffer[8] = 0x07;
    7368:	97 e0       	ldi	r25, 0x07	; 7
    736a:	9d 8b       	std	Y+21, r25	; 0x15
    buffer[9] = 0x01;
    736c:	8e 8b       	std	Y+22, r24	; 0x16
    memcpy(buffer + 10, _dhcpMacAddr, 6);
    736e:	fe 01       	movw	r30, r28
    7370:	77 96       	adiw	r30, 0x17	; 23
    7372:	d6 01       	movw	r26, r12
    7374:	86 e0       	ldi	r24, 0x06	; 6
    7376:	0d 90       	ld	r0, X+
    7378:	01 92       	st	Z+, r0
    737a:	81 50       	subi	r24, 0x01	; 1
    737c:	e1 f7       	brne	.-8      	; 0x7376 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x190>

    // OPT - host name
    buffer[16] = hostName;
    737e:	8c e0       	ldi	r24, 0x0C	; 12
    7380:	8d 8f       	std	Y+29, r24	; 0x1d
    buffer[17] = strlen(HOST_NAME) + 6; // length of hostname + last 3 bytes of mac address
    7382:	8e 8f       	std	Y+30, r24	; 0x1e
    strcpy((char*)&(buffer[18]), HOST_NAME);
    7384:	fe 01       	movw	r30, r28
    7386:	7f 96       	adiw	r30, 0x1f	; 31
    7388:	af e5       	ldi	r26, 0x5F	; 95
    738a:	b3 e0       	ldi	r27, 0x03	; 3
    738c:	87 e0       	ldi	r24, 0x07	; 7
    738e:	0d 90       	ld	r0, X+
    7390:	01 92       	st	Z+, r0
    7392:	81 50       	subi	r24, 0x01	; 1
    7394:	e1 f7       	brne	.-8      	; 0x738e <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x1a8>

    printByte((char*)&(buffer[24]), _dhcpMacAddr[3]);
    7396:	c5 01       	movw	r24, r10
    7398:	be 01       	movw	r22, r28
    739a:	6b 5d       	subi	r22, 0xDB	; 219
    739c:	7f 4f       	sbci	r23, 0xFF	; 255
    739e:	d5 01       	movw	r26, r10
    73a0:	1b 96       	adiw	r26, 0x0b	; 11
    73a2:	4c 91       	ld	r20, X
    73a4:	0e 94 e0 38 	call	0x71c0	; 0x71c0 <_ZN9DhcpClass9printByteEPch>
    printByte((char*)&(buffer[26]), _dhcpMacAddr[4]);
    73a8:	c5 01       	movw	r24, r10
    73aa:	be 01       	movw	r22, r28
    73ac:	69 5d       	subi	r22, 0xD9	; 217
    73ae:	7f 4f       	sbci	r23, 0xFF	; 255
    73b0:	f5 01       	movw	r30, r10
    73b2:	44 85       	ldd	r20, Z+12	; 0x0c
    73b4:	0e 94 e0 38 	call	0x71c0	; 0x71c0 <_ZN9DhcpClass9printByteEPch>
    printByte((char*)&(buffer[28]), _dhcpMacAddr[5]);
    73b8:	c5 01       	movw	r24, r10
    73ba:	be 01       	movw	r22, r28
    73bc:	67 5d       	subi	r22, 0xD7	; 215
    73be:	7f 4f       	sbci	r23, 0xFF	; 255
    73c0:	d5 01       	movw	r26, r10
    73c2:	1d 96       	adiw	r26, 0x0d	; 13
    73c4:	4c 91       	ld	r20, X
    73c6:	0e 94 e0 38 	call	0x71c0	; 0x71c0 <_ZN9DhcpClass9printByteEPch>

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 30);
    73ca:	c7 01       	movw	r24, r14
    73cc:	be 01       	movw	r22, r28
    73ce:	63 5f       	subi	r22, 0xF3	; 243
    73d0:	7f 4f       	sbci	r23, 0xFF	; 255
    73d2:	4e e1       	ldi	r20, 0x1E	; 30
    73d4:	50 e0       	ldi	r21, 0x00	; 0
    73d6:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>

    if(messageType == DHCP_REQUEST)
    73da:	b3 e0       	ldi	r27, 0x03	; 3
    73dc:	9b 16       	cp	r9, r27
    73de:	01 f5       	brne	.+64     	; 0x7420 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x23a>
    {
        buffer[0] = dhcpRequestedIPaddr;
    73e0:	82 e3       	ldi	r24, 0x32	; 50
    73e2:	8d 87       	std	Y+13, r24	; 0x0d
        buffer[1] = 0x04;
    73e4:	84 e0       	ldi	r24, 0x04	; 4
    73e6:	8e 87       	std	Y+14, r24	; 0x0e
        buffer[2] = _dhcpLocalIp[0];
    73e8:	f5 01       	movw	r30, r10
    73ea:	96 85       	ldd	r25, Z+14	; 0x0e
    73ec:	9f 87       	std	Y+15, r25	; 0x0f
        buffer[3] = _dhcpLocalIp[1];
    73ee:	97 85       	ldd	r25, Z+15	; 0x0f
    73f0:	98 8b       	std	Y+16, r25	; 0x10
        buffer[4] = _dhcpLocalIp[2];
    73f2:	90 89       	ldd	r25, Z+16	; 0x10
    73f4:	99 8b       	std	Y+17, r25	; 0x11
        buffer[5] = _dhcpLocalIp[3];
    73f6:	91 89       	ldd	r25, Z+17	; 0x11
    73f8:	9a 8b       	std	Y+18, r25	; 0x12

        buffer[6] = dhcpServerIdentifier;
    73fa:	96 e3       	ldi	r25, 0x36	; 54
    73fc:	9b 8b       	std	Y+19, r25	; 0x13
        buffer[7] = 0x04;
    73fe:	8c 8b       	std	Y+20, r24	; 0x14
        buffer[8] = _dhcpDhcpServerIp[0];
    7400:	82 8d       	ldd	r24, Z+26	; 0x1a
    7402:	8d 8b       	std	Y+21, r24	; 0x15
        buffer[9] = _dhcpDhcpServerIp[1];
    7404:	83 8d       	ldd	r24, Z+27	; 0x1b
    7406:	8e 8b       	std	Y+22, r24	; 0x16
        buffer[10] = _dhcpDhcpServerIp[2];
    7408:	84 8d       	ldd	r24, Z+28	; 0x1c
    740a:	8f 8b       	std	Y+23, r24	; 0x17
        buffer[11] = _dhcpDhcpServerIp[3];
    740c:	85 8d       	ldd	r24, Z+29	; 0x1d
    740e:	88 8f       	std	Y+24, r24	; 0x18

        //put data in W5100 transmit buffer
        _dhcpUdpSocket.write(buffer, 12);
    7410:	c7 01       	movw	r24, r14
    7412:	be 01       	movw	r22, r28
    7414:	63 5f       	subi	r22, 0xF3	; 243
    7416:	7f 4f       	sbci	r23, 0xFF	; 255
    7418:	4c e0       	ldi	r20, 0x0C	; 12
    741a:	50 e0       	ldi	r21, 0x00	; 0
    741c:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>
    }
    
    buffer[0] = dhcpParamRequest;
    7420:	87 e3       	ldi	r24, 0x37	; 55
    7422:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = 0x06;
    7424:	86 e0       	ldi	r24, 0x06	; 6
    7426:	8e 87       	std	Y+14, r24	; 0x0e
    buffer[2] = subnetMask;
    7428:	91 e0       	ldi	r25, 0x01	; 1
    742a:	9f 87       	std	Y+15, r25	; 0x0f
    buffer[3] = routersOnSubnet;
    742c:	93 e0       	ldi	r25, 0x03	; 3
    742e:	98 8b       	std	Y+16, r25	; 0x10
    buffer[4] = dns;
    7430:	89 8b       	std	Y+17, r24	; 0x11
    buffer[5] = domainName;
    7432:	8f e0       	ldi	r24, 0x0F	; 15
    7434:	8a 8b       	std	Y+18, r24	; 0x12
    buffer[6] = dhcpT1value;
    7436:	8a e3       	ldi	r24, 0x3A	; 58
    7438:	8b 8b       	std	Y+19, r24	; 0x13
    buffer[7] = dhcpT2value;
    743a:	8b e3       	ldi	r24, 0x3B	; 59
    743c:	8c 8b       	std	Y+20, r24	; 0x14
    buffer[8] = endOption;
    743e:	8f ef       	ldi	r24, 0xFF	; 255
    7440:	8d 8b       	std	Y+21, r24	; 0x15
    
    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 9);
    7442:	c7 01       	movw	r24, r14
    7444:	be 01       	movw	r22, r28
    7446:	63 5f       	subi	r22, 0xF3	; 243
    7448:	7f 4f       	sbci	r23, 0xFF	; 255
    744a:	49 e0       	ldi	r20, 0x09	; 9
    744c:	50 e0       	ldi	r21, 0x00	; 0
    744e:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>

    _dhcpUdpSocket.endPacket();
    7452:	c7 01       	movw	r24, r14
    7454:	0e 94 45 11 	call	0x228a	; 0x228a <_ZN11EthernetUDP9endPacketEv>
}
    7458:	ac 96       	adiw	r28, 0x2c	; 44
    745a:	0f b6       	in	r0, 0x3f	; 63
    745c:	f8 94       	cli
    745e:	de bf       	out	0x3e, r29	; 62
    7460:	0f be       	out	0x3f, r0	; 63
    7462:	cd bf       	out	0x3d, r28	; 61
    7464:	df 91       	pop	r29
    7466:	cf 91       	pop	r28
    7468:	1f 91       	pop	r17
    746a:	0f 91       	pop	r16
    746c:	ff 90       	pop	r15
    746e:	ef 90       	pop	r14
    7470:	df 90       	pop	r13
    7472:	cf 90       	pop	r12
    7474:	bf 90       	pop	r11
    7476:	af 90       	pop	r10
    7478:	9f 90       	pop	r9
    747a:	08 95       	ret

0000747c <_ZN9DhcpClass18request_DHCP_leaseEv>:
    // zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
    memset(_dhcpLocalIp, 0, 20);
}

//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease(){
    747c:	2f 92       	push	r2
    747e:	3f 92       	push	r3
    7480:	4f 92       	push	r4
    7482:	5f 92       	push	r5
    7484:	6f 92       	push	r6
    7486:	7f 92       	push	r7
    7488:	8f 92       	push	r8
    748a:	9f 92       	push	r9
    748c:	af 92       	push	r10
    748e:	bf 92       	push	r11
    7490:	cf 92       	push	r12
    7492:	df 92       	push	r13
    7494:	ef 92       	push	r14
    7496:	ff 92       	push	r15
    7498:	0f 93       	push	r16
    749a:	1f 93       	push	r17
    749c:	cf 93       	push	r28
    749e:	df 93       	push	r29
    74a0:	cd b7       	in	r28, 0x3d	; 61
    74a2:	de b7       	in	r29, 0x3e	; 62
    74a4:	2a 97       	sbiw	r28, 0x0a	; 10
    74a6:	0f b6       	in	r0, 0x3f	; 63
    74a8:	f8 94       	cli
    74aa:	de bf       	out	0x3e, r29	; 62
    74ac:	0f be       	out	0x3f, r0	; 63
    74ae:	cd bf       	out	0x3d, r28	; 61
    74b0:	8c 01       	movw	r16, r24
    uint8_t messageType = 0;
  
    
  
    // Pick an initial transaction ID
    _dhcpTransactionId = random(1UL, 2000UL);
    74b2:	61 e0       	ldi	r22, 0x01	; 1
    74b4:	70 e0       	ldi	r23, 0x00	; 0
    74b6:	80 e0       	ldi	r24, 0x00	; 0
    74b8:	90 e0       	ldi	r25, 0x00	; 0
    74ba:	20 ed       	ldi	r18, 0xD0	; 208
    74bc:	37 e0       	ldi	r19, 0x07	; 7
    74be:	40 e0       	ldi	r20, 0x00	; 0
    74c0:	50 e0       	ldi	r21, 0x00	; 0
    74c2:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <_Z6randomll>
    74c6:	d8 01       	movw	r26, r16
    74c8:	14 96       	adiw	r26, 0x04	; 4
    74ca:	6c 93       	st	X, r22
    74cc:	14 97       	sbiw	r26, 0x04	; 4
    74ce:	15 96       	adiw	r26, 0x05	; 5
    74d0:	7c 93       	st	X, r23
    74d2:	15 97       	sbiw	r26, 0x05	; 5
    74d4:	16 96       	adiw	r26, 0x06	; 6
    74d6:	8c 93       	st	X, r24
    74d8:	16 97       	sbiw	r26, 0x06	; 6
    74da:	17 96       	adiw	r26, 0x07	; 7
    74dc:	9c 93       	st	X, r25
    74de:	17 97       	sbiw	r26, 0x07	; 7
    _dhcpInitialTransactionId = _dhcpTransactionId;
    74e0:	6c 93       	st	X, r22
    74e2:	11 96       	adiw	r26, 0x01	; 1
    74e4:	7c 93       	st	X, r23
    74e6:	11 97       	sbiw	r26, 0x01	; 1
    74e8:	12 96       	adiw	r26, 0x02	; 2
    74ea:	8c 93       	st	X, r24
    74ec:	12 97       	sbiw	r26, 0x02	; 2
    74ee:	13 96       	adiw	r26, 0x03	; 3
    74f0:	9c 93       	st	X, r25

    if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0)
    74f2:	f8 01       	movw	r30, r16
    74f4:	e9 5b       	subi	r30, 0xB9	; 185
    74f6:	ff 4f       	sbci	r31, 0xFF	; 255
    74f8:	f8 87       	std	Y+8, r31	; 0x08
    74fa:	ef 83       	std	Y+7, r30	; 0x07
    74fc:	cf 01       	movw	r24, r30
    74fe:	64 e4       	ldi	r22, 0x44	; 68
    7500:	70 e0       	ldi	r23, 0x00	; 0
    7502:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN11EthernetUDP5beginEj>
    7506:	88 23       	and	r24, r24
    7508:	09 f4       	brne	.+2      	; 0x750c <_ZN9DhcpClass18request_DHCP_leaseEv+0x90>
    750a:	41 c1       	rjmp	.+642    	; 0x778e <_ZN9DhcpClass18request_DHCP_leaseEv+0x312>
    
    presend_DHCP();
    
    int result = 0;
    
    unsigned long startTime = millis();
    750c:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    7510:	4b 01       	movw	r8, r22
    7512:	5c 01       	movw	r10, r24
      return 0;
    }
    
    presend_DHCP();
    
    int result = 0;
    7514:	cc 24       	eor	r12, r12
    7516:	dd 24       	eor	r13, r13
}

//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease(){
    
    uint8_t messageType = 0;
    7518:	ff 24       	eor	r15, r15
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    751a:	0f 2e       	mov	r0, r31
    751c:	f6 e4       	ldi	r31, 0x46	; 70
    751e:	6f 2e       	mov	r6, r31
    7520:	77 24       	eor	r7, r7
    7522:	f0 2d       	mov	r31, r0
    7524:	60 0e       	add	r6, r16
    7526:	71 1e       	adc	r7, r17
                _dhcp_state = STATE_DHCP_START;
        }
        
        if(messageType == 255)
        {
            messageType = 0;
    7528:	ee 24       	eor	r14, r14
            }
        }
        else if(_dhcp_state == STATE_DHCP_REQUEST)
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    752a:	c8 01       	movw	r24, r16
    752c:	ce 96       	adiw	r24, 0x3e	; 62
    752e:	9a 87       	std	Y+10, r25	; 0x0a
    7530:	89 87       	std	Y+9, r24	; 0x09
            if(messageType == DHCP_OFFER)
            {
                // We'll use the transaction ID that the offer came with,
                // rather than the one we were up to
                _dhcpTransactionId = respId;
                send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime) / 1000));
    7532:	0f 2e       	mov	r0, r31
    7534:	f8 ee       	ldi	r31, 0xE8	; 232
    7536:	2f 2e       	mov	r2, r31
    7538:	f3 e0       	ldi	r31, 0x03	; 3
    753a:	3f 2e       	mov	r3, r31
    753c:	f0 e0       	ldi	r31, 0x00	; 0
    753e:	4f 2e       	mov	r4, r31
    7540:	f0 e0       	ldi	r31, 0x00	; 0
    7542:	5f 2e       	mov	r5, r31
    7544:	f0 2d       	mov	r31, r0
    7546:	7e 82       	std	Y+6, r7	; 0x06
    7548:	6d 82       	std	Y+5, r6	; 0x05
    754a:	38 01       	movw	r6, r16
    754c:	0f 2d       	mov	r16, r15
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    754e:	08 c1       	rjmp	.+528    	; 0x7760 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e4>
    {
        if(_dhcp_state == STATE_DHCP_START)
    7550:	88 23       	and	r24, r24
    7552:	21 f5       	brne	.+72     	; 0x759c <_ZN9DhcpClass18request_DHCP_leaseEv+0x120>
        {
            _dhcpTransactionId++;
    7554:	f3 01       	movw	r30, r6
    7556:	84 81       	ldd	r24, Z+4	; 0x04
    7558:	95 81       	ldd	r25, Z+5	; 0x05
    755a:	a6 81       	ldd	r26, Z+6	; 0x06
    755c:	b7 81       	ldd	r27, Z+7	; 0x07
    755e:	01 96       	adiw	r24, 0x01	; 1
    7560:	a1 1d       	adc	r26, r1
    7562:	b1 1d       	adc	r27, r1
    7564:	84 83       	std	Z+4, r24	; 0x04
    7566:	95 83       	std	Z+5, r25	; 0x05
    7568:	a6 83       	std	Z+6, r26	; 0x06
    756a:	b7 83       	std	Z+7, r27	; 0x07
            
            send_DHCP_MESSAGE(DHCP_DISCOVER, ((millis() - startTime) / 1000));
    756c:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    7570:	dc 01       	movw	r26, r24
    7572:	cb 01       	movw	r24, r22
    7574:	88 19       	sub	r24, r8
    7576:	99 09       	sbc	r25, r9
    7578:	aa 09       	sbc	r26, r10
    757a:	bb 09       	sbc	r27, r11
    757c:	bc 01       	movw	r22, r24
    757e:	cd 01       	movw	r24, r26
    7580:	a2 01       	movw	r20, r4
    7582:	91 01       	movw	r18, r2
    7584:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    7588:	c3 01       	movw	r24, r6
    758a:	61 e0       	ldi	r22, 0x01	; 1
    758c:	a9 01       	movw	r20, r18
    758e:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
            _dhcp_state = STATE_DHCP_DISCOVER;
    7592:	81 e0       	ldi	r24, 0x01	; 1
    7594:	ad 81       	ldd	r26, Y+5	; 0x05
    7596:	be 81       	ldd	r27, Y+6	; 0x06
    7598:	8c 93       	st	X, r24
    759a:	c6 c0       	rjmp	.+396    	; 0x7728 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
        }
        else if(_dhcp_state == STATE_DHCP_REREQUEST){
    759c:	84 30       	cpi	r24, 0x04	; 4
    759e:	21 f5       	brne	.+72     	; 0x75e8 <_ZN9DhcpClass18request_DHCP_leaseEv+0x16c>
            _dhcpTransactionId++;
    75a0:	f3 01       	movw	r30, r6
    75a2:	84 81       	ldd	r24, Z+4	; 0x04
    75a4:	95 81       	ldd	r25, Z+5	; 0x05
    75a6:	a6 81       	ldd	r26, Z+6	; 0x06
    75a8:	b7 81       	ldd	r27, Z+7	; 0x07
    75aa:	01 96       	adiw	r24, 0x01	; 1
    75ac:	a1 1d       	adc	r26, r1
    75ae:	b1 1d       	adc	r27, r1
    75b0:	84 83       	std	Z+4, r24	; 0x04
    75b2:	95 83       	std	Z+5, r25	; 0x05
    75b4:	a6 83       	std	Z+6, r26	; 0x06
    75b6:	b7 83       	std	Z+7, r27	; 0x07
            send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime)/1000));
    75b8:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    75bc:	dc 01       	movw	r26, r24
    75be:	cb 01       	movw	r24, r22
    75c0:	88 19       	sub	r24, r8
    75c2:	99 09       	sbc	r25, r9
    75c4:	aa 09       	sbc	r26, r10
    75c6:	bb 09       	sbc	r27, r11
    75c8:	bc 01       	movw	r22, r24
    75ca:	cd 01       	movw	r24, r26
    75cc:	a2 01       	movw	r20, r4
    75ce:	91 01       	movw	r18, r2
    75d0:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    75d4:	c3 01       	movw	r24, r6
    75d6:	63 e0       	ldi	r22, 0x03	; 3
    75d8:	a9 01       	movw	r20, r18
    75da:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
            _dhcp_state = STATE_DHCP_REQUEST;
    75de:	e2 e0       	ldi	r30, 0x02	; 2
    75e0:	ad 81       	ldd	r26, Y+5	; 0x05
    75e2:	be 81       	ldd	r27, Y+6	; 0x06
    75e4:	ec 93       	st	X, r30
    75e6:	a0 c0       	rjmp	.+320    	; 0x7728 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
        }
        else if(_dhcp_state == STATE_DHCP_DISCOVER)
    75e8:	81 30       	cpi	r24, 0x01	; 1
    75ea:	89 f5       	brne	.+98     	; 0x764e <_ZN9DhcpClass18request_DHCP_leaseEv+0x1d2>
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    75ec:	a9 85       	ldd	r26, Y+9	; 0x09
    75ee:	ba 85       	ldd	r27, Y+10	; 0x0a
    75f0:	4d 91       	ld	r20, X+
    75f2:	5d 91       	ld	r21, X+
    75f4:	6d 91       	ld	r22, X+
    75f6:	7c 91       	ld	r23, X
    75f8:	c3 01       	movw	r24, r6
    75fa:	9e 01       	movw	r18, r28
    75fc:	2f 5f       	subi	r18, 0xFF	; 255
    75fe:	3f 4f       	sbci	r19, 0xFF	; 255
    7600:	0e 94 19 36 	call	0x6c32	; 0x6c32 <_ZN9DhcpClass17parseDHCPResponseEmRm>
    7604:	08 2f       	mov	r16, r24
            if(messageType == DHCP_OFFER)
    7606:	82 30       	cpi	r24, 0x02	; 2
    7608:	09 f0       	breq	.+2      	; 0x760c <_ZN9DhcpClass18request_DHCP_leaseEv+0x190>
    760a:	8e c0       	rjmp	.+284    	; 0x7728 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
            {
                // We'll use the transaction ID that the offer came with,
                // rather than the one we were up to
                _dhcpTransactionId = respId;
    760c:	89 81       	ldd	r24, Y+1	; 0x01
    760e:	9a 81       	ldd	r25, Y+2	; 0x02
    7610:	ab 81       	ldd	r26, Y+3	; 0x03
    7612:	bc 81       	ldd	r27, Y+4	; 0x04
    7614:	f3 01       	movw	r30, r6
    7616:	84 83       	std	Z+4, r24	; 0x04
    7618:	95 83       	std	Z+5, r25	; 0x05
    761a:	a6 83       	std	Z+6, r26	; 0x06
    761c:	b7 83       	std	Z+7, r27	; 0x07
                send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime) / 1000));
    761e:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    7622:	dc 01       	movw	r26, r24
    7624:	cb 01       	movw	r24, r22
    7626:	88 19       	sub	r24, r8
    7628:	99 09       	sbc	r25, r9
    762a:	aa 09       	sbc	r26, r10
    762c:	bb 09       	sbc	r27, r11
    762e:	bc 01       	movw	r22, r24
    7630:	cd 01       	movw	r24, r26
    7632:	a2 01       	movw	r20, r4
    7634:	91 01       	movw	r18, r2
    7636:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    763a:	c3 01       	movw	r24, r6
    763c:	63 e0       	ldi	r22, 0x03	; 3
    763e:	a9 01       	movw	r20, r18
    7640:	0e 94 f3 38 	call	0x71e6	; 0x71e6 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
                _dhcp_state = STATE_DHCP_REQUEST;
    7644:	e2 e0       	ldi	r30, 0x02	; 2
    7646:	ad 81       	ldd	r26, Y+5	; 0x05
    7648:	be 81       	ldd	r27, Y+6	; 0x06
    764a:	ec 93       	st	X, r30
    764c:	73 c0       	rjmp	.+230    	; 0x7734 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2b8>
            }
        }
        else if(_dhcp_state == STATE_DHCP_REQUEST)
    764e:	82 30       	cpi	r24, 0x02	; 2
    7650:	09 f0       	breq	.+2      	; 0x7654 <_ZN9DhcpClass18request_DHCP_leaseEv+0x1d8>
    7652:	6a c0       	rjmp	.+212    	; 0x7728 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    7654:	a9 85       	ldd	r26, Y+9	; 0x09
    7656:	ba 85       	ldd	r27, Y+10	; 0x0a
    7658:	4d 91       	ld	r20, X+
    765a:	5d 91       	ld	r21, X+
    765c:	6d 91       	ld	r22, X+
    765e:	7c 91       	ld	r23, X
    7660:	c3 01       	movw	r24, r6
    7662:	9e 01       	movw	r18, r28
    7664:	2f 5f       	subi	r18, 0xFF	; 255
    7666:	3f 4f       	sbci	r19, 0xFF	; 255
    7668:	0e 94 19 36 	call	0x6c32	; 0x6c32 <_ZN9DhcpClass17parseDHCPResponseEmRm>
    766c:	08 2f       	mov	r16, r24
            if(messageType == DHCP_ACK)
    766e:	85 30       	cpi	r24, 0x05	; 5
    7670:	09 f0       	breq	.+2      	; 0x7674 <_ZN9DhcpClass18request_DHCP_leaseEv+0x1f8>
    7672:	54 c0       	rjmp	.+168    	; 0x771c <_ZN9DhcpClass18request_DHCP_leaseEv+0x2a0>
            {
                _dhcp_state = STATE_DHCP_LEASED;
    7674:	83 e0       	ldi	r24, 0x03	; 3
    7676:	ed 81       	ldd	r30, Y+5	; 0x05
    7678:	fe 81       	ldd	r31, Y+6	; 0x06
    767a:	80 83       	st	Z, r24
                result = 1;
                //use default lease time if we didn't get it
                if(_dhcpLeaseTime == 0){
    767c:	f3 01       	movw	r30, r6
    767e:	82 a1       	lds	r24, 0x42
    7680:	93 a1       	lds	r25, 0x43
    7682:	a4 a1       	lds	r26, 0x44
    7684:	b5 a1       	lds	r27, 0x45
    7686:	00 97       	sbiw	r24, 0x00	; 0
    7688:	a1 05       	cpc	r26, r1
    768a:	b1 05       	cpc	r27, r1
    768c:	41 f4       	brne	.+16     	; 0x769e <_ZN9DhcpClass18request_DHCP_leaseEv+0x222>
                    _dhcpLeaseTime = DEFAULT_LEASE;
    768e:	84 e8       	ldi	r24, 0x84	; 132
    7690:	93 e0       	ldi	r25, 0x03	; 3
    7692:	a0 e0       	ldi	r26, 0x00	; 0
    7694:	b0 e0       	ldi	r27, 0x00	; 0
    7696:	82 a3       	lds	r24, 0x52
    7698:	93 a3       	lds	r25, 0x53
    769a:	a4 a3       	lds	r26, 0x54
    769c:	b5 a3       	lds	r27, 0x55
                }
                //calculate T1 & T2 if we didn't get it
                if(_dhcpT1 == 0){
    769e:	f3 01       	movw	r30, r6
    76a0:	86 a1       	lds	r24, 0x46
    76a2:	97 a1       	lds	r25, 0x47
    76a4:	a0 a5       	lds	r26, 0x60
    76a6:	b1 a5       	lds	r27, 0x61
    76a8:	00 97       	sbiw	r24, 0x00	; 0
    76aa:	a1 05       	cpc	r26, r1
    76ac:	b1 05       	cpc	r27, r1
    76ae:	61 f4       	brne	.+24     	; 0x76c8 <_ZN9DhcpClass18request_DHCP_leaseEv+0x24c>
                    //T1 should be 50% of _dhcpLeaseTime
                    _dhcpT1 = _dhcpLeaseTime >> 1;
    76b0:	82 a1       	lds	r24, 0x42
    76b2:	93 a1       	lds	r25, 0x43
    76b4:	a4 a1       	lds	r26, 0x44
    76b6:	b5 a1       	lds	r27, 0x45
    76b8:	b6 95       	lsr	r27
    76ba:	a7 95       	ror	r26
    76bc:	97 95       	ror	r25
    76be:	87 95       	ror	r24
    76c0:	86 a3       	lds	r24, 0x56
    76c2:	97 a3       	lds	r25, 0x57
    76c4:	a0 a7       	lds	r26, 0x70
    76c6:	b1 a7       	lds	r27, 0x71
                }
                if(_dhcpT2 == 0){
    76c8:	f3 01       	movw	r30, r6
    76ca:	82 a5       	lds	r24, 0x62
    76cc:	93 a5       	lds	r25, 0x63
    76ce:	a4 a5       	lds	r26, 0x64
    76d0:	b5 a5       	lds	r27, 0x65
    76d2:	00 97       	sbiw	r24, 0x00	; 0
    76d4:	a1 05       	cpc	r26, r1
    76d6:	b1 05       	cpc	r27, r1
    76d8:	61 f4       	brne	.+24     	; 0x76f2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x276>
                    //T2 should be 87.5% (7/8ths) of _dhcpLeaseTime
                    _dhcpT2 = _dhcpT1 << 1;
    76da:	86 a1       	lds	r24, 0x46
    76dc:	97 a1       	lds	r25, 0x47
    76de:	a0 a5       	lds	r26, 0x60
    76e0:	b1 a5       	lds	r27, 0x61
    76e2:	88 0f       	add	r24, r24
    76e4:	99 1f       	adc	r25, r25
    76e6:	aa 1f       	adc	r26, r26
    76e8:	bb 1f       	adc	r27, r27
    76ea:	82 a7       	lds	r24, 0x72
    76ec:	93 a7       	lds	r25, 0x73
    76ee:	a4 a7       	lds	r26, 0x74
    76f0:	b5 a7       	lds	r27, 0x75
                }
                _renewInSec = _dhcpT1;
    76f2:	f3 01       	movw	r30, r6
    76f4:	86 a1       	lds	r24, 0x46
    76f6:	97 a1       	lds	r25, 0x47
    76f8:	a0 a5       	lds	r26, 0x60
    76fa:	b1 a5       	lds	r27, 0x61
    76fc:	86 a7       	lds	r24, 0x76
    76fe:	97 a7       	lds	r25, 0x77
    7700:	a0 ab       	sts	0x50, r26
    7702:	b1 ab       	sts	0x51, r27
                _rebindInSec = _dhcpT2;
    7704:	82 a5       	lds	r24, 0x62
    7706:	93 a5       	lds	r25, 0x63
    7708:	a4 a5       	lds	r26, 0x64
    770a:	b5 a5       	lds	r27, 0x65
    770c:	82 ab       	sts	0x52, r24
    770e:	93 ab       	sts	0x53, r25
    7710:	a4 ab       	sts	0x54, r26
    7712:	b5 ab       	sts	0x55, r27
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
            if(messageType == DHCP_ACK)
            {
                _dhcp_state = STATE_DHCP_LEASED;
                result = 1;
    7714:	cc 24       	eor	r12, r12
    7716:	dd 24       	eor	r13, r13
    7718:	c3 94       	inc	r12
    771a:	06 c0       	rjmp	.+12     	; 0x7728 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
                    _dhcpT2 = _dhcpT1 << 1;
                }
                _renewInSec = _dhcpT1;
                _rebindInSec = _dhcpT2;
            }
            else if(messageType == DHCP_NAK)
    771c:	86 30       	cpi	r24, 0x06	; 6
    771e:	21 f4       	brne	.+8      	; 0x7728 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
                _dhcp_state = STATE_DHCP_START;
    7720:	ad 81       	ldd	r26, Y+5	; 0x05
    7722:	be 81       	ldd	r27, Y+6	; 0x06
    7724:	1c 92       	st	X, r1
    7726:	06 c0       	rjmp	.+12     	; 0x7734 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2b8>
        }
        
        if(messageType == 255)
    7728:	0f 3f       	cpi	r16, 0xFF	; 255
    772a:	21 f4       	brne	.+8      	; 0x7734 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2b8>
        {
            messageType = 0;
            _dhcp_state = STATE_DHCP_START;
    772c:	ed 81       	ldd	r30, Y+5	; 0x05
    772e:	fe 81       	ldd	r31, Y+6	; 0x06
    7730:	10 82       	st	Z, r1
                _dhcp_state = STATE_DHCP_START;
        }
        
        if(messageType == 255)
        {
            messageType = 0;
    7732:	0e 2d       	mov	r16, r14
            _dhcp_state = STATE_DHCP_START;
        }
        
        if(result != 1 && ((millis() - startTime) > _timeout))
    7734:	f1 e0       	ldi	r31, 0x01	; 1
    7736:	cf 16       	cp	r12, r31
    7738:	d1 04       	cpc	r13, r1
    773a:	91 f0       	breq	.+36     	; 0x7760 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e4>
    773c:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    7740:	dc 01       	movw	r26, r24
    7742:	cb 01       	movw	r24, r22
    7744:	88 19       	sub	r24, r8
    7746:	99 09       	sbc	r25, r9
    7748:	aa 09       	sbc	r26, r10
    774a:	bb 09       	sbc	r27, r11
    774c:	f3 01       	movw	r30, r6
    774e:	42 ad       	sts	0x62, r20
    7750:	53 ad       	sts	0x63, r21
    7752:	64 ad       	sts	0x64, r22
    7754:	75 ad       	sts	0x65, r23
    7756:	48 17       	cp	r20, r24
    7758:	59 07       	cpc	r21, r25
    775a:	6a 07       	cpc	r22, r26
    775c:	7b 07       	cpc	r23, r27
    775e:	30 f0       	brcs	.+12     	; 0x776c <_ZN9DhcpClass18request_DHCP_leaseEv+0x2f0>
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    7760:	ad 81       	ldd	r26, Y+5	; 0x05
    7762:	be 81       	ldd	r27, Y+6	; 0x06
    7764:	8c 91       	ld	r24, X
    7766:	83 30       	cpi	r24, 0x03	; 3
    7768:	09 f0       	breq	.+2      	; 0x776c <_ZN9DhcpClass18request_DHCP_leaseEv+0x2f0>
    776a:	f2 ce       	rjmp	.-540    	; 0x7550 <_ZN9DhcpClass18request_DHCP_leaseEv+0xd4>
        if(result != 1 && ((millis() - startTime) > _timeout))
            break;
    }
    
    // We're done with the socket now
    _dhcpUdpSocket.stop();
    776c:	8f 81       	ldd	r24, Y+7	; 0x07
    776e:	98 85       	ldd	r25, Y+8	; 0x08
    7770:	0e 94 53 11 	call	0x22a6	; 0x22a6 <_ZN11EthernetUDP4stopEv>
    _dhcpTransactionId++;
    7774:	f3 01       	movw	r30, r6
    7776:	84 81       	ldd	r24, Z+4	; 0x04
    7778:	95 81       	ldd	r25, Z+5	; 0x05
    777a:	a6 81       	ldd	r26, Z+6	; 0x06
    777c:	b7 81       	ldd	r27, Z+7	; 0x07
    777e:	01 96       	adiw	r24, 0x01	; 1
    7780:	a1 1d       	adc	r26, r1
    7782:	b1 1d       	adc	r27, r1
    7784:	84 83       	std	Z+4, r24	; 0x04
    7786:	95 83       	std	Z+5, r25	; 0x05
    7788:	a6 83       	std	Z+6, r26	; 0x06
    778a:	b7 83       	std	Z+7, r27	; 0x07

    return result;
    778c:	02 c0       	rjmp	.+4      	; 0x7792 <_ZN9DhcpClass18request_DHCP_leaseEv+0x316>
    _dhcpInitialTransactionId = _dhcpTransactionId;

    if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0)
    {
      // Couldn't get a socket
      return 0;
    778e:	cc 24       	eor	r12, r12
    7790:	dd 24       	eor	r13, r13
    // We're done with the socket now
    _dhcpUdpSocket.stop();
    _dhcpTransactionId++;

    return result;
}
    7792:	8c 2d       	mov	r24, r12
    7794:	9d 2d       	mov	r25, r13
    7796:	2a 96       	adiw	r28, 0x0a	; 10
    7798:	0f b6       	in	r0, 0x3f	; 63
    779a:	f8 94       	cli
    779c:	de bf       	out	0x3e, r29	; 62
    779e:	0f be       	out	0x3f, r0	; 63
    77a0:	cd bf       	out	0x3d, r28	; 61
    77a2:	df 91       	pop	r29
    77a4:	cf 91       	pop	r28
    77a6:	1f 91       	pop	r17
    77a8:	0f 91       	pop	r16
    77aa:	ff 90       	pop	r15
    77ac:	ef 90       	pop	r14
    77ae:	df 90       	pop	r13
    77b0:	cf 90       	pop	r12
    77b2:	bf 90       	pop	r11
    77b4:	af 90       	pop	r10
    77b6:	9f 90       	pop	r9
    77b8:	8f 90       	pop	r8
    77ba:	7f 90       	pop	r7
    77bc:	6f 90       	pop	r6
    77be:	5f 90       	pop	r5
    77c0:	4f 90       	pop	r4
    77c2:	3f 90       	pop	r3
    77c4:	2f 90       	pop	r2
    77c6:	08 95       	ret

000077c8 <_ZN9DhcpClass10checkLeaseEv>:
    1/DHCP_CHECK_RENEW_FAIL: renew failed
    2/DHCP_CHECK_RENEW_OK: renew success
    3/DHCP_CHECK_REBIND_FAIL: rebind fail
    4/DHCP_CHECK_REBIND_OK: rebind success
*/
int DhcpClass::checkLease(){
    77c8:	6f 92       	push	r6
    77ca:	7f 92       	push	r7
    77cc:	8f 92       	push	r8
    77ce:	9f 92       	push	r9
    77d0:	af 92       	push	r10
    77d2:	bf 92       	push	r11
    77d4:	cf 92       	push	r12
    77d6:	df 92       	push	r13
    77d8:	ef 92       	push	r14
    77da:	ff 92       	push	r15
    77dc:	0f 93       	push	r16
    77de:	1f 93       	push	r17
    77e0:	cf 93       	push	r28
    77e2:	df 93       	push	r29
    77e4:	ec 01       	movw	r28, r24
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    77e6:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    signed long snow = (long)now;
    77ea:	c6 2e       	mov	r12, r22
    77ec:	d7 2e       	mov	r13, r23
    77ee:	e8 2e       	mov	r14, r24
    77f0:	f9 2e       	mov	r15, r25
    int rc=DHCP_CHECK_NONE;
    if (_lastCheck != 0){
    77f2:	8e a9       	sts	0x4e, r24
    77f4:	9f a9       	sts	0x4f, r25
    77f6:	a8 ad       	sts	0x68, r26
    77f8:	b9 ad       	sts	0x69, r27
    77fa:	00 97       	sbiw	r24, 0x00	; 0
    77fc:	a1 05       	cpc	r26, r1
    77fe:	b1 05       	cpc	r27, r1
    7800:	09 f4       	brne	.+2      	; 0x7804 <_ZN9DhcpClass10checkLeaseEv+0x3c>
    7802:	a2 c0       	rjmp	.+324    	; 0x7948 <_ZN9DhcpClass10checkLeaseEv+0x180>
        signed long factor;
        //calc how many ms past the timeout we are
        factor = snow - (long)_secTimeout;
    7804:	fe 01       	movw	r30, r28
    7806:	ee 5b       	subi	r30, 0xBE	; 190
    7808:	ff 4f       	sbci	r31, 0xFF	; 255
    780a:	80 81       	ld	r24, Z
    780c:	91 81       	ldd	r25, Z+1	; 0x01
    780e:	a2 81       	ldd	r26, Z+2	; 0x02
    7810:	b3 81       	ldd	r27, Z+3	; 0x03
    7812:	a7 01       	movw	r20, r14
    7814:	96 01       	movw	r18, r12
    7816:	28 1b       	sub	r18, r24
    7818:	39 0b       	sbc	r19, r25
    781a:	4a 0b       	sbc	r20, r26
    781c:	5b 0b       	sbc	r21, r27
    781e:	ca 01       	movw	r24, r20
    7820:	b9 01       	movw	r22, r18
        //if on or passed the timeout, reduce the counters
        if ( factor >= 0 ){
    7822:	0a f4       	brpl	.+2      	; 0x7826 <_ZN9DhcpClass10checkLeaseEv+0x5e>
    7824:	5a c0       	rjmp	.+180    	; 0x78da <_ZN9DhcpClass10checkLeaseEv+0x112>
            //next timeout should be now plus 1000 ms minus parts of second in factor
            _secTimeout = snow + 1000 - factor % 1000;
    7826:	3f 01       	movw	r6, r30
    7828:	0f 2e       	mov	r0, r31
    782a:	f8 ee       	ldi	r31, 0xE8	; 232
    782c:	8f 2e       	mov	r8, r31
    782e:	f3 e0       	ldi	r31, 0x03	; 3
    7830:	9f 2e       	mov	r9, r31
    7832:	f0 e0       	ldi	r31, 0x00	; 0
    7834:	af 2e       	mov	r10, r31
    7836:	f0 e0       	ldi	r31, 0x00	; 0
    7838:	bf 2e       	mov	r11, r31
    783a:	f0 2d       	mov	r31, r0
    783c:	8c 0c       	add	r8, r12
    783e:	9d 1c       	adc	r9, r13
    7840:	ae 1c       	adc	r10, r14
    7842:	bf 1c       	adc	r11, r15
    7844:	28 ee       	ldi	r18, 0xE8	; 232
    7846:	33 e0       	ldi	r19, 0x03	; 3
    7848:	40 e0       	ldi	r20, 0x00	; 0
    784a:	50 e0       	ldi	r21, 0x00	; 0
    784c:	0e 94 67 4b 	call	0x96ce	; 0x96ce <__divmodsi4>
    7850:	89 01       	movw	r16, r18
    7852:	9a 01       	movw	r18, r20
    7854:	dc 01       	movw	r26, r24
    7856:	cb 01       	movw	r24, r22
    7858:	b5 01       	movw	r22, r10
    785a:	a4 01       	movw	r20, r8
    785c:	48 1b       	sub	r20, r24
    785e:	59 0b       	sbc	r21, r25
    7860:	6a 0b       	sbc	r22, r26
    7862:	7b 0b       	sbc	r23, r27
    7864:	f3 01       	movw	r30, r6
    7866:	40 83       	st	Z, r20
    7868:	51 83       	std	Z+1, r21	; 0x01
    786a:	62 83       	std	Z+2, r22	; 0x02
    786c:	73 83       	std	Z+3, r23	; 0x03
            //how many seconds late are we, minimum 1
            factor = factor / 1000 +1;
    786e:	0f 5f       	subi	r16, 0xFF	; 255
    7870:	1f 4f       	sbci	r17, 0xFF	; 255
    7872:	2f 4f       	sbci	r18, 0xFF	; 255
    7874:	3f 4f       	sbci	r19, 0xFF	; 255
            
            //reduce the counters by that mouch
            //if we can assume that the cycle time (factor) is fairly constant
            //and if the remainder is less than cycle time * 2 
            //do it early instead of late
            if(_renewInSec < factor*2 )
    7876:	4e a5       	lds	r20, 0x6e
    7878:	5f a5       	lds	r21, 0x6f
    787a:	68 a9       	sts	0x48, r22
    787c:	79 a9       	sts	0x49, r23
    787e:	d9 01       	movw	r26, r18
    7880:	c8 01       	movw	r24, r16
    7882:	88 0f       	add	r24, r24
    7884:	99 1f       	adc	r25, r25
    7886:	aa 1f       	adc	r26, r26
    7888:	bb 1f       	adc	r27, r27
    788a:	48 17       	cp	r20, r24
    788c:	59 07       	cpc	r21, r25
    788e:	6a 07       	cpc	r22, r26
    7890:	7b 07       	cpc	r23, r27
    7892:	2c f4       	brge	.+10     	; 0x789e <_ZN9DhcpClass10checkLeaseEv+0xd6>
                _renewInSec = 0;
    7894:	1e a6       	lds	r17, 0xbe
    7896:	1f a6       	lds	r17, 0xbf
    7898:	18 aa       	sts	0x98, r17
    789a:	19 aa       	sts	0x99, r17
    789c:	08 c0       	rjmp	.+16     	; 0x78ae <_ZN9DhcpClass10checkLeaseEv+0xe6>
            else
                _renewInSec -= factor;
    789e:	40 1b       	sub	r20, r16
    78a0:	51 0b       	sbc	r21, r17
    78a2:	62 0b       	sbc	r22, r18
    78a4:	73 0b       	sbc	r23, r19
    78a6:	4e a7       	lds	r20, 0x7e
    78a8:	5f a7       	lds	r21, 0x7f
    78aa:	68 ab       	sts	0x58, r22
    78ac:	79 ab       	sts	0x59, r23
            
            if(_rebindInSec < factor*2 )
    78ae:	4a a9       	sts	0x4a, r20
    78b0:	5b a9       	sts	0x4b, r21
    78b2:	6c a9       	sts	0x4c, r22
    78b4:	7d a9       	sts	0x4d, r23
    78b6:	48 17       	cp	r20, r24
    78b8:	59 07       	cpc	r21, r25
    78ba:	6a 07       	cpc	r22, r26
    78bc:	7b 07       	cpc	r23, r27
    78be:	2c f4       	brge	.+10     	; 0x78ca <_ZN9DhcpClass10checkLeaseEv+0x102>
                _rebindInSec = 0;
    78c0:	1a aa       	sts	0x9a, r17
    78c2:	1b aa       	sts	0x9b, r17
    78c4:	1c aa       	sts	0x9c, r17
    78c6:	1d aa       	sts	0x9d, r17
    78c8:	08 c0       	rjmp	.+16     	; 0x78da <_ZN9DhcpClass10checkLeaseEv+0x112>
            else
                _rebindInSec -= factor;
    78ca:	40 1b       	sub	r20, r16
    78cc:	51 0b       	sbc	r21, r17
    78ce:	62 0b       	sbc	r22, r18
    78d0:	73 0b       	sbc	r23, r19
    78d2:	4a ab       	sts	0x5a, r20
    78d4:	5b ab       	sts	0x5b, r21
    78d6:	6c ab       	sts	0x5c, r22
    78d8:	7d ab       	sts	0x5d, r23
        }

        //if we have a lease but should renew, do it
        if (_dhcp_state == STATE_DHCP_LEASED && _renewInSec <=0){
    78da:	fe 01       	movw	r30, r28
    78dc:	ea 5b       	subi	r30, 0xBA	; 186
    78de:	ff 4f       	sbci	r31, 0xFF	; 255
    78e0:	20 81       	ld	r18, Z
    78e2:	23 30       	cpi	r18, 0x03	; 3
    78e4:	a9 f4       	brne	.+42     	; 0x7910 <_ZN9DhcpClass10checkLeaseEv+0x148>
    78e6:	8e a5       	lds	r24, 0x6e
    78e8:	9f a5       	lds	r25, 0x6f
    78ea:	a8 a9       	sts	0x48, r26
    78ec:	b9 a9       	sts	0x49, r27
    78ee:	18 16       	cp	r1, r24
    78f0:	19 06       	cpc	r1, r25
    78f2:	1a 06       	cpc	r1, r26
    78f4:	1b 06       	cpc	r1, r27
    78f6:	8c f0       	brlt	.+34     	; 0x791a <_ZN9DhcpClass10checkLeaseEv+0x152>
            _dhcp_state = STATE_DHCP_REREQUEST;
    78f8:	8f 01       	movw	r16, r30
    78fa:	84 e0       	ldi	r24, 0x04	; 4
    78fc:	80 83       	st	Z, r24
            rc = 1 + request_DHCP_lease();
    78fe:	ce 01       	movw	r24, r28
    7900:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN9DhcpClass18request_DHCP_leaseEv>
    7904:	01 96       	adiw	r24, 0x01	; 1
        }

        //if we have a lease or is renewing but should bind, do it
        if( (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START) && _rebindInSec <=0){
    7906:	f8 01       	movw	r30, r16
    7908:	20 81       	ld	r18, Z
    790a:	23 30       	cpi	r18, 0x03	; 3
    790c:	41 f0       	breq	.+16     	; 0x791e <_ZN9DhcpClass10checkLeaseEv+0x156>
    790e:	02 c0       	rjmp	.+4      	; 0x7914 <_ZN9DhcpClass10checkLeaseEv+0x14c>
*/
int DhcpClass::checkLease(){
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    signed long snow = (long)now;
    int rc=DHCP_CHECK_NONE;
    7910:	80 e0       	ldi	r24, 0x00	; 0
    7912:	90 e0       	ldi	r25, 0x00	; 0
            _dhcp_state = STATE_DHCP_REREQUEST;
            rc = 1 + request_DHCP_lease();
        }

        //if we have a lease or is renewing but should bind, do it
        if( (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START) && _rebindInSec <=0){
    7914:	22 23       	and	r18, r18
    7916:	19 f0       	breq	.+6      	; 0x791e <_ZN9DhcpClass10checkLeaseEv+0x156>
    7918:	26 c0       	rjmp	.+76     	; 0x7966 <_ZN9DhcpClass10checkLeaseEv+0x19e>
*/
int DhcpClass::checkLease(){
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    signed long snow = (long)now;
    int rc=DHCP_CHECK_NONE;
    791a:	80 e0       	ldi	r24, 0x00	; 0
    791c:	90 e0       	ldi	r25, 0x00	; 0
            _dhcp_state = STATE_DHCP_REREQUEST;
            rc = 1 + request_DHCP_lease();
        }

        //if we have a lease or is renewing but should bind, do it
        if( (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START) && _rebindInSec <=0){
    791e:	4a a9       	sts	0x4a, r20
    7920:	5b a9       	sts	0x4b, r21
    7922:	6c a9       	sts	0x4c, r22
    7924:	7d a9       	sts	0x4d, r23
    7926:	14 16       	cp	r1, r20
    7928:	15 06       	cpc	r1, r21
    792a:	16 06       	cpc	r1, r22
    792c:	17 06       	cpc	r1, r23
    792e:	dc f0       	brlt	.+54     	; 0x7966 <_ZN9DhcpClass10checkLeaseEv+0x19e>
            //this should basically restart completely
            _dhcp_state = STATE_DHCP_START;
    7930:	fe 01       	movw	r30, r28
    7932:	ea 5b       	subi	r30, 0xBA	; 186
    7934:	ff 4f       	sbci	r31, 0xFF	; 255
    7936:	10 82       	st	Z, r1
            reset_DHCP_lease();
    7938:	ce 01       	movw	r24, r28
    793a:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_ZN9DhcpClass16reset_DHCP_leaseEv>
            rc = 3 + request_DHCP_lease();
    793e:	ce 01       	movw	r24, r28
    7940:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN9DhcpClass18request_DHCP_leaseEv>
    7944:	03 96       	adiw	r24, 0x03	; 3
    7946:	0f c0       	rjmp	.+30     	; 0x7966 <_ZN9DhcpClass10checkLeaseEv+0x19e>
        }
    }
    else{
        _secTimeout = snow + 1000;
    7948:	fe 01       	movw	r30, r28
    794a:	ee 5b       	subi	r30, 0xBE	; 190
    794c:	ff 4f       	sbci	r31, 0xFF	; 255
    794e:	d7 01       	movw	r26, r14
    7950:	c6 01       	movw	r24, r12
    7952:	88 51       	subi	r24, 0x18	; 24
    7954:	9c 4f       	sbci	r25, 0xFC	; 252
    7956:	af 4f       	sbci	r26, 0xFF	; 255
    7958:	bf 4f       	sbci	r27, 0xFF	; 255
    795a:	80 83       	st	Z, r24
    795c:	91 83       	std	Z+1, r25	; 0x01
    795e:	a2 83       	std	Z+2, r26	; 0x02
    7960:	b3 83       	std	Z+3, r27	; 0x03
*/
int DhcpClass::checkLease(){
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    signed long snow = (long)now;
    int rc=DHCP_CHECK_NONE;
    7962:	80 e0       	ldi	r24, 0x00	; 0
    7964:	90 e0       	ldi	r25, 0x00	; 0
    }
    else{
        _secTimeout = snow + 1000;
    }

    _lastCheck = now;
    7966:	ce aa       	sts	0x9e, r28
    7968:	df aa       	sts	0x9f, r29
    796a:	e8 ae       	sts	0xb8, r30
    796c:	f9 ae       	sts	0xb9, r31
    return rc;
}
    796e:	df 91       	pop	r29
    7970:	cf 91       	pop	r28
    7972:	1f 91       	pop	r17
    7974:	0f 91       	pop	r16
    7976:	ff 90       	pop	r15
    7978:	ef 90       	pop	r14
    797a:	df 90       	pop	r13
    797c:	cf 90       	pop	r12
    797e:	bf 90       	pop	r11
    7980:	af 90       	pop	r10
    7982:	9f 90       	pop	r9
    7984:	8f 90       	pop	r8
    7986:	7f 90       	pop	r7
    7988:	6f 90       	pop	r6
    798a:	08 95       	ret

0000798c <_ZN9DhcpClass13beginWithDHCPEPhmm>:
#include "Dhcp.h"
#include "..\Arduino.h"
#include "util.h"

int DhcpClass::beginWithDHCP(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
    798c:	af 92       	push	r10
    798e:	bf 92       	push	r11
    7990:	cf 92       	push	r12
    7992:	df 92       	push	r13
    7994:	ef 92       	push	r14
    7996:	ff 92       	push	r15
    7998:	0f 93       	push	r16
    799a:	1f 93       	push	r17
    799c:	cf 93       	push	r28
    799e:	df 93       	push	r29
    79a0:	6c 01       	movw	r12, r24
    79a2:	b6 2e       	mov	r11, r22
    79a4:	a7 2e       	mov	r10, r23
    79a6:	da 01       	movw	r26, r20
    79a8:	c9 01       	movw	r24, r18
    _dhcpLeaseTime=0;
    79aa:	f6 01       	movw	r30, r12
    79ac:	12 a2       	lds	r17, 0x92
    79ae:	13 a2       	lds	r17, 0x93
    79b0:	14 a2       	lds	r17, 0x94
    79b2:	15 a2       	lds	r17, 0x95
    _dhcpT1=0;
    79b4:	16 a2       	lds	r17, 0x96
    79b6:	17 a2       	lds	r17, 0x97
    79b8:	10 a6       	lds	r17, 0xb0
    79ba:	11 a6       	lds	r17, 0xb1
    _dhcpT2=0;
    79bc:	12 a6       	lds	r17, 0xb2
    79be:	13 a6       	lds	r17, 0xb3
    79c0:	14 a6       	lds	r17, 0xb4
    79c2:	15 a6       	lds	r17, 0xb5
    _lastCheck=0;
    79c4:	16 aa       	sts	0x96, r17
    79c6:	17 aa       	sts	0x97, r17
    79c8:	10 ae       	sts	0xb0, r17
    79ca:	11 ae       	sts	0xb1, r17
    _timeout = timeout;
    79cc:	82 af       	sts	0x72, r24
    79ce:	93 af       	sts	0x73, r25
    79d0:	a4 af       	sts	0x74, r26
    79d2:	b5 af       	sts	0x75, r27
    _responseTimeout = responseTimeout;
    79d4:	fe 96       	adiw	r30, 0x3e	; 62
    79d6:	e0 82       	st	Z, r14
    79d8:	f1 82       	std	Z+1, r15	; 0x01
    79da:	02 83       	std	Z+2, r16	; 0x02
    79dc:	13 83       	std	Z+3, r17	; 0x03

    // zero out _dhcpMacAddr
    memset(_dhcpMacAddr, 0, 6); 
    79de:	e6 01       	movw	r28, r12
    79e0:	28 96       	adiw	r28, 0x08	; 8
    79e2:	86 e0       	ldi	r24, 0x06	; 6
    79e4:	fe 01       	movw	r30, r28
    79e6:	11 92       	st	Z+, r1
    79e8:	8a 95       	dec	r24
    79ea:	e9 f7       	brne	.-6      	; 0x79e6 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x5a>
    reset_DHCP_lease();
    79ec:	c6 01       	movw	r24, r12
    79ee:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <_ZN9DhcpClass16reset_DHCP_leaseEv>

    memcpy((void*)_dhcpMacAddr, (void*)mac, 6);
    79f2:	eb 2d       	mov	r30, r11
    79f4:	fa 2d       	mov	r31, r10
    79f6:	86 e0       	ldi	r24, 0x06	; 6
    79f8:	01 90       	ld	r0, Z+
    79fa:	09 92       	st	Y+, r0
    79fc:	81 50       	subi	r24, 0x01	; 1
    79fe:	e1 f7       	brne	.-8      	; 0x79f8 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x6c>
    _dhcp_state = STATE_DHCP_START;
    7a00:	f6 01       	movw	r30, r12
    7a02:	ea 5b       	subi	r30, 0xBA	; 186
    7a04:	ff 4f       	sbci	r31, 0xFF	; 255
    7a06:	10 82       	st	Z, r1
    return request_DHCP_lease();
    7a08:	c6 01       	movw	r24, r12
    7a0a:	0e 94 3e 3a 	call	0x747c	; 0x747c <_ZN9DhcpClass18request_DHCP_leaseEv>
}
    7a0e:	df 91       	pop	r29
    7a10:	cf 91       	pop	r28
    7a12:	1f 91       	pop	r17
    7a14:	0f 91       	pop	r16
    7a16:	ff 90       	pop	r15
    7a18:	ef 90       	pop	r14
    7a1a:	df 90       	pop	r13
    7a1c:	cf 90       	pop	r12
    7a1e:	bf 90       	pop	r11
    7a20:	af 90       	pop	r10
    7a22:	08 95       	ret

00007a24 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    7a24:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    7a26:	83 ee       	ldi	r24, 0xE3	; 227
    7a28:	99 e0       	ldi	r25, 0x09	; 9
    7a2a:	60 e0       	ldi	r22, 0x00	; 0
    7a2c:	40 e0       	ldi	r20, 0x00	; 0
    7a2e:	20 e0       	ldi	r18, 0x00	; 0
    7a30:	00 e0       	ldi	r16, 0x00	; 0
    7a32:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <_ZN9IPAddressC1Ehhhh>
    7a36:	0f 91       	pop	r16
    7a38:	08 95       	ret

00007a3a <_ZN9DNSClient5beginERK9IPAddress>:
#define INVALID_SERVER   -2
#define TRUNCATED        -3
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    7a3a:	cf 93       	push	r28
    7a3c:	df 93       	push	r29
    7a3e:	fc 01       	movw	r30, r24

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    7a40:	eb 01       	movw	r28, r22
    7a42:	8a 81       	ldd	r24, Y+2	; 0x02
    7a44:	9b 81       	ldd	r25, Y+3	; 0x03
    7a46:	ac 81       	ldd	r26, Y+4	; 0x04
    7a48:	bd 81       	ldd	r27, Y+5	; 0x05
    7a4a:	82 83       	std	Z+2, r24	; 0x02
    7a4c:	93 83       	std	Z+3, r25	; 0x03
    7a4e:	a4 83       	std	Z+4, r26	; 0x04
    7a50:	b5 83       	std	Z+5, r27	; 0x05
    iDNSServer = aDNSServer;
    iRequestId = 0;
    7a52:	17 82       	std	Z+7, r1	; 0x07
    7a54:	16 82       	std	Z+6, r1	; 0x06
}
    7a56:	df 91       	pop	r29
    7a58:	cf 91       	pop	r28
    7a5a:	08 95       	ret

00007a5c <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    7a5c:	0f 93       	push	r16
    7a5e:	1f 93       	push	r17
    7a60:	cf 93       	push	r28
    7a62:	df 93       	push	r29
    7a64:	db 01       	movw	r26, r22
    7a66:	ea 01       	movw	r28, r20
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    7a68:	8c 91       	ld	r24, X
    7a6a:	88 23       	and	r24, r24
    7a6c:	29 f0       	breq	.+10     	; 0x7a78 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1c>
    iDNSServer = aDNSServer;
    iRequestId = 0;
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
    7a6e:	fb 01       	movw	r30, r22
    7a70:	31 96       	adiw	r30, 0x01	; 1
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    7a72:	81 91       	ld	r24, Z+
    7a74:	88 23       	and	r24, r24
    7a76:	e9 f7       	brne	.-6      	; 0x7a72 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
                    segment++;
                    segmentValue = 0;
    7a78:	80 e0       	ldi	r24, 0x00	; 0
    7a7a:	90 e0       	ldi	r25, 0x00	; 0
    7a7c:	40 e0       	ldi	r20, 0x00	; 0
    7a7e:	50 e0       	ldi	r21, 0x00	; 0
    7a80:	00 e0       	ldi	r16, 0x00	; 0
    7a82:	10 e0       	ldi	r17, 0x00	; 0
    7a84:	1c c0       	rjmp	.+56     	; 0x7abe <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
        while (*p && (segment < 4))
        {
            if (*p == '.')
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    7a86:	8f 3f       	cpi	r24, 0xFF	; 255
    7a88:	91 05       	cpc	r25, r1
    7a8a:	09 f0       	breq	.+2      	; 0x7a8e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    7a8c:	54 f5       	brge	.+84     	; 0x7ae2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x86>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    7a8e:	fe 01       	movw	r30, r28
    7a90:	e4 0f       	add	r30, r20
    7a92:	f5 1f       	adc	r31, r21
    7a94:	82 83       	std	Z+2, r24	; 0x02
                    segment++;
    7a96:	4f 5f       	subi	r20, 0xFF	; 255
    7a98:	5f 4f       	sbci	r21, 0xFF	; 255
                    segmentValue = 0;
    7a9a:	c8 01       	movw	r24, r16
    7a9c:	10 c0       	rjmp	.+32     	; 0x7abe <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    7a9e:	9c 01       	movw	r18, r24
    7aa0:	22 0f       	add	r18, r18
    7aa2:	33 1f       	adc	r19, r19
    7aa4:	88 0f       	add	r24, r24
    7aa6:	99 1f       	adc	r25, r25
    7aa8:	88 0f       	add	r24, r24
    7aaa:	99 1f       	adc	r25, r25
    7aac:	88 0f       	add	r24, r24
    7aae:	99 1f       	adc	r25, r25
    7ab0:	28 0f       	add	r18, r24
    7ab2:	39 1f       	adc	r19, r25
    7ab4:	86 2f       	mov	r24, r22
    7ab6:	90 e0       	ldi	r25, 0x00	; 0
    7ab8:	c0 97       	sbiw	r24, 0x30	; 48
    7aba:	82 0f       	add	r24, r18
    7abc:	93 1f       	adc	r25, r19
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    7abe:	6d 91       	ld	r22, X+
    7ac0:	66 23       	and	r22, r22
    7ac2:	e1 f0       	breq	.+56     	; 0x7afc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa0>
    7ac4:	44 30       	cpi	r20, 0x04	; 4
    7ac6:	51 05       	cpc	r21, r1
    7ac8:	cc f4       	brge	.+50     	; 0x7afc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa0>
        {
            if (*p == '.')
    7aca:	6e 32       	cpi	r22, 0x2E	; 46
    7acc:	41 f7       	brne	.-48     	; 0x7a9e <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x42>
    7ace:	db cf       	rjmp	.-74     	; 0x7a86 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x2a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    7ad0:	44 30       	cpi	r20, 0x04	; 4
    7ad2:	51 05       	cpc	r21, r1
    7ad4:	4c f4       	brge	.+18     	; 0x7ae8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x8c>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    7ad6:	c4 0f       	add	r28, r20
    7ad8:	d5 1f       	adc	r29, r21
    7ada:	8a 83       	std	Y+2, r24	; 0x02
            return 1;
    7adc:	81 e0       	ldi	r24, 0x01	; 1
    7ade:	90 e0       	ldi	r25, 0x00	; 0
    7ae0:	08 c0       	rjmp	.+16     	; 0x7af2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x96>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
                {
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
    7ae2:	80 e0       	ldi	r24, 0x00	; 0
    7ae4:	90 e0       	ldi	r25, 0x00	; 0
    7ae6:	05 c0       	rjmp	.+10     	; 0x7af2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x96>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    7ae8:	80 e0       	ldi	r24, 0x00	; 0
    7aea:	90 e0       	ldi	r25, 0x00	; 0
    7aec:	02 c0       	rjmp	.+4      	; 0x7af2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x96>
    7aee:	80 e0       	ldi	r24, 0x00	; 0
    7af0:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    7af2:	df 91       	pop	r29
    7af4:	cf 91       	pop	r28
    7af6:	1f 91       	pop	r17
    7af8:	0f 91       	pop	r16
    7afa:	08 95       	ret
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    7afc:	8f 3f       	cpi	r24, 0xFF	; 255
    7afe:	91 05       	cpc	r25, r1
    7b00:	39 f3       	breq	.-50     	; 0x7ad0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x74>
    7b02:	34 f3       	brlt	.-52     	; 0x7ad0 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x74>
    7b04:	f4 cf       	rjmp	.-24     	; 0x7aee <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x92>

00007b06 <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    7b06:	af 92       	push	r10
    7b08:	bf 92       	push	r11
    7b0a:	cf 92       	push	r12
    7b0c:	df 92       	push	r13
    7b0e:	ef 92       	push	r14
    7b10:	ff 92       	push	r15
    7b12:	0f 93       	push	r16
    7b14:	1f 93       	push	r17
    7b16:	cf 93       	push	r28
    7b18:	df 93       	push	r29
    7b1a:	00 d0       	rcall	.+0      	; 0x7b1c <_ZN9DNSClient12BuildRequestEPKc+0x16>
    7b1c:	cd b7       	in	r28, 0x3d	; 61
    7b1e:	de b7       	in	r29, 0x3e	; 62
    7b20:	8c 01       	movw	r16, r24
    7b22:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    7b24:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    7b28:	dc 01       	movw	r26, r24
    7b2a:	cb 01       	movw	r24, r22
    7b2c:	f8 01       	movw	r30, r16
    7b2e:	97 83       	std	Z+7, r25	; 0x07
    7b30:	86 83       	std	Z+6, r24	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    7b32:	aa 24       	eor	r10, r10
    7b34:	bb 24       	eor	r11, r11
    7b36:	68 94       	set
    7b38:	a3 f8       	bld	r10, 3
    7b3a:	a0 0e       	add	r10, r16
    7b3c:	b1 1e       	adc	r11, r17
    7b3e:	b8 01       	movw	r22, r16
    7b40:	6a 5f       	subi	r22, 0xFA	; 250
    7b42:	7f 4f       	sbci	r23, 0xFF	; 255
    7b44:	c5 01       	movw	r24, r10
    7b46:	42 e0       	ldi	r20, 0x02	; 2
    7b48:	50 e0       	ldi	r21, 0x00	; 0
    7b4a:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    7b4e:	81 e0       	ldi	r24, 0x01	; 1
    7b50:	90 e0       	ldi	r25, 0x00	; 0
    7b52:	9b 83       	std	Y+3, r25	; 0x03
    7b54:	8a 83       	std	Y+2, r24	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7b56:	c5 01       	movw	r24, r10
    7b58:	be 01       	movw	r22, r28
    7b5a:	6e 5f       	subi	r22, 0xFE	; 254
    7b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    7b5e:	42 e0       	ldi	r20, 0x02	; 2
    7b60:	50 e0       	ldi	r21, 0x00	; 0
    7b62:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    7b66:	80 e0       	ldi	r24, 0x00	; 0
    7b68:	91 e0       	ldi	r25, 0x01	; 1
    7b6a:	9b 83       	std	Y+3, r25	; 0x03
    7b6c:	8a 83       	std	Y+2, r24	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7b6e:	c5 01       	movw	r24, r10
    7b70:	be 01       	movw	r22, r28
    7b72:	6e 5f       	subi	r22, 0xFE	; 254
    7b74:	7f 4f       	sbci	r23, 0xFF	; 255
    7b76:	42 e0       	ldi	r20, 0x02	; 2
    7b78:	50 e0       	ldi	r21, 0x00	; 0
    7b7a:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    7b7e:	1b 82       	std	Y+3, r1	; 0x03
    7b80:	1a 82       	std	Y+2, r1	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7b82:	c5 01       	movw	r24, r10
    7b84:	be 01       	movw	r22, r28
    7b86:	6e 5f       	subi	r22, 0xFE	; 254
    7b88:	7f 4f       	sbci	r23, 0xFF	; 255
    7b8a:	42 e0       	ldi	r20, 0x02	; 2
    7b8c:	50 e0       	ldi	r21, 0x00	; 0
    7b8e:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7b92:	c5 01       	movw	r24, r10
    7b94:	be 01       	movw	r22, r28
    7b96:	6e 5f       	subi	r22, 0xFE	; 254
    7b98:	7f 4f       	sbci	r23, 0xFF	; 255
    7b9a:	42 e0       	ldi	r20, 0x02	; 2
    7b9c:	50 e0       	ldi	r21, 0x00	; 0
    7b9e:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7ba2:	c5 01       	movw	r24, r10
    7ba4:	be 01       	movw	r22, r28
    7ba6:	6e 5f       	subi	r22, 0xFE	; 254
    7ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    7baa:	42 e0       	ldi	r20, 0x02	; 2
    7bac:	50 e0       	ldi	r21, 0x00	; 0
    7bae:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    7bb2:	f7 01       	movw	r30, r14
    7bb4:	80 81       	ld	r24, Z
    7bb6:	88 23       	and	r24, r24
    7bb8:	11 f5       	brne	.+68     	; 0x7bfe <_ZN9DNSClient12BuildRequestEPKc+0xf8>
    7bba:	27 c0       	rjmp	.+78     	; 0x7c0a <_ZN9DNSClient12BuildRequestEPKc+0x104>
    7bbc:	7f 01       	movw	r14, r30
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    7bbe:	81 91       	ld	r24, Z+
    7bc0:	88 23       	and	r24, r24
    7bc2:	09 f4       	brne	.+2      	; 0x7bc6 <_ZN9DNSClient12BuildRequestEPKc+0xc0>
    7bc4:	51 c0       	rjmp	.+162    	; 0x7c68 <_ZN9DNSClient12BuildRequestEPKc+0x162>
    7bc6:	8e 32       	cpi	r24, 0x2E	; 46
    7bc8:	c9 f7       	brne	.-14     	; 0x7bbc <_ZN9DNSClient12BuildRequestEPKc+0xb6>
    7bca:	4e c0       	rjmp	.+156    	; 0x7c68 <_ZN9DNSClient12BuildRequestEPKc+0x162>
        }

        if (end-start > 0)
        {
            // Write out the size of this section
            len = end-start;
    7bcc:	09 83       	std	Y+1, r16	; 0x01
            iUdp.write(&len, sizeof(len));
    7bce:	c5 01       	movw	r24, r10
    7bd0:	be 01       	movw	r22, r28
    7bd2:	6f 5f       	subi	r22, 0xFF	; 255
    7bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    7bd6:	41 e0       	ldi	r20, 0x01	; 1
    7bd8:	50 e0       	ldi	r21, 0x00	; 0
    7bda:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    7bde:	c5 01       	movw	r24, r10
    7be0:	b6 01       	movw	r22, r12
    7be2:	a8 01       	movw	r20, r16
    7be4:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    7be8:	f7 01       	movw	r30, r14
    7bea:	80 81       	ld	r24, Z
    7bec:	88 23       	and	r24, r24
    7bee:	69 f0       	breq	.+26     	; 0x7c0a <_ZN9DNSClient12BuildRequestEPKc+0x104>
            len = end-start;
            iUdp.write(&len, sizeof(len));
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
        }
        start = end+1;
    7bf0:	67 01       	movw	r12, r14
    7bf2:	08 94       	sec
    7bf4:	c1 1c       	adc	r12, r1
    7bf6:	d1 1c       	adc	r13, r1
    7bf8:	9c 2d       	mov	r25, r12
    7bfa:	8d 2d       	mov	r24, r13
    7bfc:	03 c0       	rjmp	.+6      	; 0x7c04 <_ZN9DNSClient12BuildRequestEPKc+0xfe>
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    7bfe:	67 01       	movw	r12, r14
    7c00:	9e 2d       	mov	r25, r14
    7c02:	8f 2d       	mov	r24, r15
            len = end-start;
            iUdp.write(&len, sizeof(len));
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
        }
        start = end+1;
    7c04:	e9 2f       	mov	r30, r25
    7c06:	f8 2f       	mov	r31, r24
    7c08:	d9 cf       	rjmp	.-78     	; 0x7bbc <_ZN9DNSClient12BuildRequestEPKc+0xb6>
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    7c0a:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write(&len, sizeof(len));
    7c0c:	c5 01       	movw	r24, r10
    7c0e:	be 01       	movw	r22, r28
    7c10:	6f 5f       	subi	r22, 0xFF	; 255
    7c12:	7f 4f       	sbci	r23, 0xFF	; 255
    7c14:	41 e0       	ldi	r20, 0x01	; 1
    7c16:	50 e0       	ldi	r21, 0x00	; 0
    7c18:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    7c1c:	00 e0       	ldi	r16, 0x00	; 0
    7c1e:	11 e0       	ldi	r17, 0x01	; 1
    7c20:	1b 83       	std	Y+3, r17	; 0x03
    7c22:	0a 83       	std	Y+2, r16	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7c24:	c5 01       	movw	r24, r10
    7c26:	be 01       	movw	r22, r28
    7c28:	6e 5f       	subi	r22, 0xFE	; 254
    7c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    7c2c:	42 e0       	ldi	r20, 0x02	; 2
    7c2e:	50 e0       	ldi	r21, 0x00	; 0
    7c30:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    7c34:	1b 83       	std	Y+3, r17	; 0x03
    7c36:	0a 83       	std	Y+2, r16	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7c38:	c5 01       	movw	r24, r10
    7c3a:	be 01       	movw	r22, r28
    7c3c:	6e 5f       	subi	r22, 0xFE	; 254
    7c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    7c40:	42 e0       	ldi	r20, 0x02	; 2
    7c42:	50 e0       	ldi	r21, 0x00	; 0
    7c44:	0e 94 30 11 	call	0x2260	; 0x2260 <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    7c48:	81 e0       	ldi	r24, 0x01	; 1
    7c4a:	90 e0       	ldi	r25, 0x00	; 0
    7c4c:	0f 90       	pop	r0
    7c4e:	0f 90       	pop	r0
    7c50:	0f 90       	pop	r0
    7c52:	df 91       	pop	r29
    7c54:	cf 91       	pop	r28
    7c56:	1f 91       	pop	r17
    7c58:	0f 91       	pop	r16
    7c5a:	ff 90       	pop	r15
    7c5c:	ef 90       	pop	r14
    7c5e:	df 90       	pop	r13
    7c60:	cf 90       	pop	r12
    7c62:	bf 90       	pop	r11
    7c64:	af 90       	pop	r10
    7c66:	08 95       	ret
        while (*end && (*end != '.') )
        {
            end++;
        }

        if (end-start > 0)
    7c68:	87 01       	movw	r16, r14
    7c6a:	0c 19       	sub	r16, r12
    7c6c:	1d 09       	sbc	r17, r13
    7c6e:	10 16       	cp	r1, r16
    7c70:	11 06       	cpc	r1, r17
    7c72:	0c f4       	brge	.+2      	; 0x7c76 <_ZN9DNSClient12BuildRequestEPKc+0x170>
    7c74:	ab cf       	rjmp	.-170    	; 0x7bcc <_ZN9DNSClient12BuildRequestEPKc+0xc6>
    7c76:	b8 cf       	rjmp	.-144    	; 0x7be8 <_ZN9DNSClient12BuildRequestEPKc+0xe2>

00007c78 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:
    return 1;
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    7c78:	2f 92       	push	r2
    7c7a:	3f 92       	push	r3
    7c7c:	4f 92       	push	r4
    7c7e:	5f 92       	push	r5
    7c80:	6f 92       	push	r6
    7c82:	7f 92       	push	r7
    7c84:	8f 92       	push	r8
    7c86:	9f 92       	push	r9
    7c88:	af 92       	push	r10
    7c8a:	bf 92       	push	r11
    7c8c:	cf 92       	push	r12
    7c8e:	df 92       	push	r13
    7c90:	ef 92       	push	r14
    7c92:	ff 92       	push	r15
    7c94:	0f 93       	push	r16
    7c96:	1f 93       	push	r17
    7c98:	cf 93       	push	r28
    7c9a:	df 93       	push	r29
    7c9c:	cd b7       	in	r28, 0x3d	; 61
    7c9e:	de b7       	in	r29, 0x3e	; 62
    7ca0:	63 97       	sbiw	r28, 0x13	; 19
    7ca2:	0f b6       	in	r0, 0x3f	; 63
    7ca4:	f8 94       	cli
    7ca6:	de bf       	out	0x3e, r29	; 62
    7ca8:	0f be       	out	0x3f, r0	; 63
    7caa:	cd bf       	out	0x3d, r28	; 61
    7cac:	6c 01       	movw	r12, r24
    7cae:	8b 01       	movw	r16, r22
    7cb0:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    7cb2:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    7cb6:	2b 01       	movw	r4, r22
    7cb8:	3c 01       	movw	r6, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    7cba:	ee 24       	eor	r14, r14
    7cbc:	ff 24       	eor	r15, r15
    7cbe:	68 94       	set
    7cc0:	e3 f8       	bld	r14, 3
    7cc2:	ec 0c       	add	r14, r12
    7cc4:	fd 1c       	adc	r15, r13
    {
        if((millis() - startTime) > aTimeout)
    7cc6:	48 01       	movw	r8, r16
    7cc8:	aa 24       	eor	r10, r10
    7cca:	bb 24       	eor	r11, r11
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    7ccc:	14 c0       	rjmp	.+40     	; 0x7cf6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x7e>
    {
        if((millis() - startTime) > aTimeout)
    7cce:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    7cd2:	dc 01       	movw	r26, r24
    7cd4:	cb 01       	movw	r24, r22
    7cd6:	84 19       	sub	r24, r4
    7cd8:	95 09       	sbc	r25, r5
    7cda:	a6 09       	sbc	r26, r6
    7cdc:	b7 09       	sbc	r27, r7
    7cde:	88 16       	cp	r8, r24
    7ce0:	99 06       	cpc	r9, r25
    7ce2:	aa 06       	cpc	r10, r26
    7ce4:	bb 06       	cpc	r11, r27
    7ce6:	08 f4       	brcc	.+2      	; 0x7cea <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x72>
    7ce8:	3b c1       	rjmp	.+630    	; 0x7f60 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e8>
            return TIMED_OUT;
        delay(50);
    7cea:	62 e3       	ldi	r22, 0x32	; 50
    7cec:	70 e0       	ldi	r23, 0x00	; 0
    7cee:	80 e0       	ldi	r24, 0x00	; 0
    7cf0:	90 e0       	ldi	r25, 0x00	; 0
    7cf2:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    7cf6:	0e 2d       	mov	r16, r14
    7cf8:	1f 2d       	mov	r17, r15
    7cfa:	c7 01       	movw	r24, r14
    7cfc:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <_ZN11EthernetUDP11parsePacketEv>
    7d00:	18 16       	cp	r1, r24
    7d02:	19 06       	cpc	r1, r25
    7d04:	24 f7       	brge	.-56     	; 0x7cce <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x56>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    7d06:	f6 01       	movw	r30, r12
    7d08:	42 81       	ldd	r20, Z+2	; 0x02
    7d0a:	53 81       	ldd	r21, Z+3	; 0x03
    7d0c:	64 81       	ldd	r22, Z+4	; 0x04
    7d0e:	75 81       	ldd	r23, Z+5	; 0x05
    7d10:	81 8d       	ldd	r24, Z+25	; 0x19
    7d12:	92 8d       	ldd	r25, Z+26	; 0x1a
    7d14:	a3 8d       	ldd	r26, Z+27	; 0x1b
    7d16:	b4 8d       	ldd	r27, Z+28	; 0x1c
    7d18:	48 17       	cp	r20, r24
    7d1a:	59 07       	cpc	r21, r25
    7d1c:	6a 07       	cpc	r22, r26
    7d1e:	7b 07       	cpc	r23, r27
    7d20:	09 f0       	breq	.+2      	; 0x7d24 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xac>
    7d22:	21 c1       	rjmp	.+578    	; 0x7f66 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ee>
    7d24:	85 8d       	ldd	r24, Z+29	; 0x1d
    7d26:	96 8d       	ldd	r25, Z+30	; 0x1e
    7d28:	85 33       	cpi	r24, 0x35	; 53
    7d2a:	91 05       	cpc	r25, r1
    7d2c:	09 f0       	breq	.+2      	; 0x7d30 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>
    7d2e:	1e c1       	rjmp	.+572    	; 0x7f6c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2f4>
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    7d30:	8e 2d       	mov	r24, r14
    7d32:	9f 2d       	mov	r25, r15
    7d34:	0e 94 19 10 	call	0x2032	; 0x2032 <_ZN11EthernetUDP9availableEv>
    7d38:	8c 30       	cpi	r24, 0x0C	; 12
    7d3a:	91 05       	cpc	r25, r1
    7d3c:	0c f4       	brge	.+2      	; 0x7d40 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc8>
    7d3e:	19 c1       	rjmp	.+562    	; 0x7f72 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fa>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    7d40:	8e 2d       	mov	r24, r14
    7d42:	9f 2d       	mov	r25, r15
    7d44:	be 01       	movw	r22, r28
    7d46:	68 5f       	subi	r22, 0xF8	; 248
    7d48:	7f 4f       	sbci	r23, 0xFF	; 255
    7d4a:	4c e0       	ldi	r20, 0x0C	; 12
    7d4c:	50 e0       	ldi	r21, 0x00	; 0
    7d4e:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    7d52:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d54:	9b 85       	ldd	r25, Y+11	; 0x0b
    7d56:	58 2f       	mov	r21, r24
    7d58:	49 2f       	mov	r20, r25
    7d5a:	5f 83       	std	Y+7, r21	; 0x07
    7d5c:	4e 83       	std	Y+6, r20	; 0x06
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    7d5e:	f6 01       	movw	r30, r12
    7d60:	26 81       	ldd	r18, Z+6	; 0x06
    7d62:	37 81       	ldd	r19, Z+7	; 0x07
    7d64:	88 85       	ldd	r24, Y+8	; 0x08
    7d66:	99 85       	ldd	r25, Y+9	; 0x09
    7d68:	28 17       	cp	r18, r24
    7d6a:	39 07       	cpc	r19, r25
    7d6c:	11 f4       	brne	.+4      	; 0x7d72 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xfa>
    7d6e:	55 23       	and	r21, r21
    7d70:	3c f0       	brlt	.+14     	; 0x7d80 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x108>
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    7d72:	80 2f       	mov	r24, r16
    7d74:	91 2f       	mov	r25, r17
    7d76:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    7d7a:	8c ef       	ldi	r24, 0xFC	; 252
    7d7c:	9f ef       	ldi	r25, 0xFF	; 255
    7d7e:	fb c0       	rjmp	.+502    	; 0x7f76 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    // Success!  Everything buffered okay
    return 1;
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
    7d80:	4f 70       	andi	r20, 0x0F	; 15
    7d82:	52 70       	andi	r21, 0x02	; 2
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    7d84:	41 15       	cp	r20, r1
    7d86:	51 05       	cpc	r21, r1
    7d88:	39 f0       	breq	.+14     	; 0x7d98 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x120>
    {
        // Mark the entire packet as read
        iUdp.flush();
    7d8a:	8e 2d       	mov	r24, r14
    7d8c:	9f 2d       	mov	r25, r15
    7d8e:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    7d92:	8b ef       	ldi	r24, 0xFB	; 251
    7d94:	9f ef       	ldi	r25, 0xFF	; 255
    7d96:	ef c0       	rjmp	.+478    	; 0x7f76 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    7d98:	8e 84       	ldd	r8, Y+14	; 0x0e
    7d9a:	9f 84       	ldd	r9, Y+15	; 0x0f
    7d9c:	98 24       	eor	r9, r8
    7d9e:	89 24       	eor	r8, r9
    7da0:	98 24       	eor	r9, r8
    if (answerCount == 0 )
    7da2:	81 14       	cp	r8, r1
    7da4:	91 04       	cpc	r9, r1
    7da6:	59 f0       	breq	.+22     	; 0x7dbe <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x146>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    7da8:	8c 85       	ldd	r24, Y+12	; 0x0c
    7daa:	9d 85       	ldd	r25, Y+13	; 0x0d
    7dac:	00 97       	sbiw	r24, 0x00	; 0
    7dae:	71 f4       	brne	.+28     	; 0x7dcc <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x154>
    7db0:	cc 24       	eor	r12, r12
    7db2:	dd 24       	eor	r13, r13

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    7db4:	44 24       	eor	r4, r4
    7db6:	55 24       	eor	r5, r5
    7db8:	68 94       	set
    7dba:	42 f8       	bld	r4, 2
    7dbc:	3e c0       	rjmp	.+124    	; 0x7e3a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c2>
    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    {
        // Mark the entire packet as read
        iUdp.flush();
    7dbe:	8e 2d       	mov	r24, r14
    7dc0:	9f 2d       	mov	r25, r15
    7dc2:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    7dc6:	8a ef       	ldi	r24, 0xFA	; 250
    7dc8:	9f ef       	ldi	r25, 0xFF	; 255
    7dca:	d5 c0       	rjmp	.+426    	; 0x7f76 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    7dcc:	cc 24       	eor	r12, r12
    7dce:	dd 24       	eor	r13, r13
    7dd0:	44 24       	eor	r4, r4
    7dd2:	55 24       	eor	r5, r5
    7dd4:	68 94       	set
    7dd6:	42 f8       	bld	r4, 2
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    7dd8:	80 2f       	mov	r24, r16
    7dda:	91 2f       	mov	r25, r17
    7ddc:	be 01       	movw	r22, r28
    7dde:	6f 5f       	subi	r22, 0xFF	; 255
    7de0:	7f 4f       	sbci	r23, 0xFF	; 255
    7de2:	41 e0       	ldi	r20, 0x01	; 1
    7de4:	50 e0       	ldi	r21, 0x00	; 0
    7de6:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    7dea:	89 81       	ldd	r24, Y+1	; 0x01
    7dec:	88 23       	and	r24, r24
    7dee:	71 f0       	breq	.+28     	; 0x7e0c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x194>
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    7df0:	81 50       	subi	r24, 0x01	; 1
    7df2:	89 83       	std	Y+1, r24	; 0x01
                {
                    iUdp.read(); // we don't care about the returned byte
    7df4:	80 2f       	mov	r24, r16
    7df6:	91 2f       	mov	r25, r17
    7df8:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    7dfc:	89 81       	ldd	r24, Y+1	; 0x01
    7dfe:	98 2f       	mov	r25, r24
    7e00:	91 50       	subi	r25, 0x01	; 1
    7e02:	99 83       	std	Y+1, r25	; 0x01
    7e04:	88 23       	and	r24, r24
    7e06:	b1 f7       	brne	.-20     	; 0x7df4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    {
        // Skip over the name
        uint8_t len;
        do
    7e08:	99 23       	and	r25, r25
    7e0a:	31 f7       	brne	.-52     	; 0x7dd8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x160>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    7e0c:	72 01       	movw	r14, r4
        } while (len != 0);

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    7e0e:	80 2f       	mov	r24, r16
    7e10:	91 2f       	mov	r25, r17
    7e12:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
    7e16:	08 94       	sec
    7e18:	e1 08       	sbc	r14, r1
    7e1a:	f1 08       	sbc	r15, r1
                }
            }
        } while (len != 0);

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
    7e1c:	e1 14       	cp	r14, r1
    7e1e:	f1 04       	cpc	r15, r1
    7e20:	b1 f7       	brne	.-20     	; 0x7e0e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x196>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    7e22:	08 94       	sec
    7e24:	c1 1c       	adc	r12, r1
    7e26:	d1 1c       	adc	r13, r1
    7e28:	8c 85       	ldd	r24, Y+12	; 0x0c
    7e2a:	9d 85       	ldd	r25, Y+13	; 0x0d
    7e2c:	98 27       	eor	r25, r24
    7e2e:	89 27       	eor	r24, r25
    7e30:	98 27       	eor	r25, r24
    7e32:	c8 16       	cp	r12, r24
    7e34:	d9 06       	cpc	r13, r25
    7e36:	80 f2       	brcs	.-96     	; 0x7dd8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x160>
    7e38:	bb cf       	rjmp	.-138    	; 0x7db0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x138>
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    7e3a:	80 2f       	mov	r24, r16
    7e3c:	91 2f       	mov	r25, r17
    7e3e:	be 01       	movw	r22, r28
    7e40:	6f 5f       	subi	r22, 0xFF	; 255
    7e42:	7f 4f       	sbci	r23, 0xFF	; 255
    7e44:	41 e0       	ldi	r20, 0x01	; 1
    7e46:	50 e0       	ldi	r21, 0x00	; 0
    7e48:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    7e4c:	89 81       	ldd	r24, Y+1	; 0x01
    7e4e:	98 2f       	mov	r25, r24
    7e50:	90 7c       	andi	r25, 0xC0	; 192
    7e52:	79 f4       	brne	.+30     	; 0x7e72 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1fa>
            {
                // It's just a normal label
                if (len > 0)
    7e54:	88 23       	and	r24, r24
    7e56:	a9 f0       	breq	.+42     	; 0x7e82 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x20a>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    7e58:	81 50       	subi	r24, 0x01	; 1
    7e5a:	89 83       	std	Y+1, r24	; 0x01
                    {
                        iUdp.read(); // we don't care about the returned byte
    7e5c:	80 2f       	mov	r24, r16
    7e5e:	91 2f       	mov	r25, r17
    7e60:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    7e64:	89 81       	ldd	r24, Y+1	; 0x01
    7e66:	98 2f       	mov	r25, r24
    7e68:	91 50       	subi	r25, 0x01	; 1
    7e6a:	99 83       	std	Y+1, r25	; 0x01
    7e6c:	88 23       	and	r24, r24
    7e6e:	b1 f7       	brne	.-20     	; 0x7e5c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1e4>
    7e70:	06 c0       	rjmp	.+12     	; 0x7e7e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x206>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    7e72:	80 2f       	mov	r24, r16
    7e74:	91 2f       	mov	r25, r17
    7e76:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
                // And set len so that we drop out of the name loop
                len = 0;
    7e7a:	19 82       	std	Y+1, r1	; 0x01
    7e7c:	02 c0       	rjmp	.+4      	; 0x7e82 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x20a>

    for (uint16_t i =0; i < answerCount; i++)
    {
        // Skip the name
        uint8_t len;
        do
    7e7e:	99 23       	and	r25, r25
    7e80:	e1 f6       	brne	.-72     	; 0x7e3a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c2>
        } while (len != 0);

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    7e82:	80 2f       	mov	r24, r16
    7e84:	91 2f       	mov	r25, r17
    7e86:	be 01       	movw	r22, r28
    7e88:	6c 5f       	subi	r22, 0xFC	; 252
    7e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    7e8c:	42 e0       	ldi	r20, 0x02	; 2
    7e8e:	50 e0       	ldi	r21, 0x00	; 0
    7e90:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    7e94:	80 2f       	mov	r24, r16
    7e96:	91 2f       	mov	r25, r17
    7e98:	be 01       	movw	r22, r28
    7e9a:	6e 5f       	subi	r22, 0xFE	; 254
    7e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    7e9e:	42 e0       	ldi	r20, 0x02	; 2
    7ea0:	50 e0       	ldi	r21, 0x00	; 0
    7ea2:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
    7ea6:	72 01       	movw	r14, r4

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    7ea8:	80 2f       	mov	r24, r16
    7eaa:	91 2f       	mov	r25, r17
    7eac:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
    7eb0:	08 94       	sec
    7eb2:	e1 08       	sbc	r14, r1
    7eb4:	f1 08       	sbc	r15, r1
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
    7eb6:	e1 14       	cp	r14, r1
    7eb8:	f1 04       	cpc	r15, r1
    7eba:	b1 f7       	brne	.-20     	; 0x7ea8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x230>
            iUdp.read(); // we don't care about the returned byte
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    7ebc:	80 2f       	mov	r24, r16
    7ebe:	91 2f       	mov	r25, r17
    7ec0:	be 01       	movw	r22, r28
    7ec2:	6a 5f       	subi	r22, 0xFA	; 250
    7ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ec6:	42 e0       	ldi	r20, 0x02	; 2
    7ec8:	50 e0       	ldi	r21, 0x00	; 0
    7eca:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    7ece:	8c 81       	ldd	r24, Y+4	; 0x04
    7ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    7ed2:	f1 e0       	ldi	r31, 0x01	; 1
    7ed4:	80 30       	cpi	r24, 0x00	; 0
    7ed6:	9f 07       	cpc	r25, r31
    7ed8:	29 f0       	breq	.+10     	; 0x7ee4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26c>
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    7eda:	8e 81       	ldd	r24, Y+6	; 0x06
    7edc:	9f 81       	ldd	r25, Y+7	; 0x07
    7ede:	00 97       	sbiw	r24, 0x00	; 0
    7ee0:	01 f5       	brne	.+64     	; 0x7f22 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2aa>
    7ee2:	30 c0       	rjmp	.+96     	; 0x7f44 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2cc>

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    7ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    7ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    7ee8:	21 e0       	ldi	r18, 0x01	; 1
    7eea:	80 30       	cpi	r24, 0x00	; 0
    7eec:	92 07       	cpc	r25, r18
    7eee:	a9 f7       	brne	.-22     	; 0x7eda <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x262>
        {
            if (htons(header_flags) != 4)
    7ef0:	8e 81       	ldd	r24, Y+6	; 0x06
    7ef2:	9f 81       	ldd	r25, Y+7	; 0x07
    7ef4:	e4 e0       	ldi	r30, 0x04	; 4
    7ef6:	80 30       	cpi	r24, 0x00	; 0
    7ef8:	9e 07       	cpc	r25, r30
    7efa:	39 f0       	breq	.+14     	; 0x7f0a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x292>
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    7efc:	80 2f       	mov	r24, r16
    7efe:	91 2f       	mov	r25, r17
    7f00:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZN11EthernetUDP5flushEv>
                return -9;//INVALID_RESPONSE;
    7f04:	87 ef       	ldi	r24, 0xF7	; 247
    7f06:	9f ef       	ldi	r25, 0xFF	; 255
    7f08:	36 c0       	rjmp	.+108    	; 0x7f76 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
            }
            iUdp.read(aAddress.raw_address(), 4);
    7f0a:	b1 01       	movw	r22, r2
    7f0c:	6e 5f       	subi	r22, 0xFE	; 254
    7f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    7f10:	80 2f       	mov	r24, r16
    7f12:	91 2f       	mov	r25, r17
    7f14:	44 e0       	ldi	r20, 0x04	; 4
    7f16:	50 e0       	ldi	r21, 0x00	; 0
    7f18:	0e 94 91 10 	call	0x2122	; 0x2122 <_ZN11EthernetUDP4readEPhj>
            return SUCCESS;
    7f1c:	81 e0       	ldi	r24, 0x01	; 1
    7f1e:	90 e0       	ldi	r25, 0x00	; 0
    7f20:	2a c0       	rjmp	.+84     	; 0x7f76 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    7f22:	ee 24       	eor	r14, r14
    7f24:	ff 24       	eor	r15, r15
            {
                iUdp.read(); // we don't care about the returned byte
    7f26:	80 2f       	mov	r24, r16
    7f28:	91 2f       	mov	r25, r17
    7f2a:	0e 94 b7 10 	call	0x216e	; 0x216e <_ZN11EthernetUDP4readEv>
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    7f2e:	08 94       	sec
    7f30:	e1 1c       	adc	r14, r1
    7f32:	f1 1c       	adc	r15, r1
    7f34:	8e 81       	ldd	r24, Y+6	; 0x06
    7f36:	9f 81       	ldd	r25, Y+7	; 0x07
    7f38:	98 27       	eor	r25, r24
    7f3a:	89 27       	eor	r24, r25
    7f3c:	98 27       	eor	r25, r24
    7f3e:	e8 16       	cp	r14, r24
    7f40:	f9 06       	cpc	r15, r25
    7f42:	88 f3       	brcs	.-30     	; 0x7f26 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ae>
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    7f44:	08 94       	sec
    7f46:	c1 1c       	adc	r12, r1
    7f48:	d1 1c       	adc	r13, r1
    7f4a:	c8 14       	cp	r12, r8
    7f4c:	d9 04       	cpc	r13, r9
    7f4e:	09 f0       	breq	.+2      	; 0x7f52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2da>
    7f50:	74 cf       	rjmp	.-280    	; 0x7e3a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c2>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    7f52:	80 2f       	mov	r24, r16
    7f54:	91 2f       	mov	r25, r17
    7f56:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZN11EthernetUDP5flushEv>

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    7f5a:	86 ef       	ldi	r24, 0xF6	; 246
    7f5c:	9f ef       	ldi	r25, 0xFF	; 255
    7f5e:	0b c0       	rjmp	.+22     	; 0x7f76 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    7f60:	8f ef       	ldi	r24, 0xFF	; 255
    7f62:	9f ef       	ldi	r25, 0xFF	; 255
    7f64:	08 c0       	rjmp	.+16     	; 0x7f76 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    7f66:	8e ef       	ldi	r24, 0xFE	; 254
    7f68:	9f ef       	ldi	r25, 0xFF	; 255
    7f6a:	05 c0       	rjmp	.+10     	; 0x7f76 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    7f6c:	8e ef       	ldi	r24, 0xFE	; 254
    7f6e:	9f ef       	ldi	r25, 0xFF	; 255
    7f70:	02 c0       	rjmp	.+4      	; 0x7f76 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    7f72:	8d ef       	ldi	r24, 0xFD	; 253
    7f74:	9f ef       	ldi	r25, 0xFF	; 255
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    7f76:	63 96       	adiw	r28, 0x13	; 19
    7f78:	0f b6       	in	r0, 0x3f	; 63
    7f7a:	f8 94       	cli
    7f7c:	de bf       	out	0x3e, r29	; 62
    7f7e:	0f be       	out	0x3f, r0	; 63
    7f80:	cd bf       	out	0x3d, r28	; 61
    7f82:	df 91       	pop	r29
    7f84:	cf 91       	pop	r28
    7f86:	1f 91       	pop	r17
    7f88:	0f 91       	pop	r16
    7f8a:	ff 90       	pop	r15
    7f8c:	ef 90       	pop	r14
    7f8e:	df 90       	pop	r13
    7f90:	cf 90       	pop	r12
    7f92:	bf 90       	pop	r11
    7f94:	af 90       	pop	r10
    7f96:	9f 90       	pop	r9
    7f98:	8f 90       	pop	r8
    7f9a:	7f 90       	pop	r7
    7f9c:	6f 90       	pop	r6
    7f9e:	5f 90       	pop	r5
    7fa0:	4f 90       	pop	r4
    7fa2:	3f 90       	pop	r3
    7fa4:	2f 90       	pop	r2
    7fa6:	08 95       	ret

00007fa8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    7fa8:	8f 92       	push	r8
    7faa:	9f 92       	push	r9
    7fac:	af 92       	push	r10
    7fae:	bf 92       	push	r11
    7fb0:	cf 92       	push	r12
    7fb2:	df 92       	push	r13
    7fb4:	ef 92       	push	r14
    7fb6:	ff 92       	push	r15
    7fb8:	0f 93       	push	r16
    7fba:	1f 93       	push	r17
    7fbc:	cf 93       	push	r28
    7fbe:	df 93       	push	r29
    7fc0:	00 d0       	rcall	.+0      	; 0x7fc2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    7fc2:	00 d0       	rcall	.+0      	; 0x7fc4 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    7fc4:	cd b7       	in	r28, 0x3d	; 61
    7fc6:	de b7       	in	r29, 0x3e	; 62
    7fc8:	7c 01       	movw	r14, r24
    7fca:	6b 01       	movw	r12, r22
    7fcc:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    7fce:	0e 94 2e 3d 	call	0x7a5c	; 0x7a5c <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    7fd2:	00 97       	sbiw	r24, 0x00	; 0
    7fd4:	09 f0       	breq	.+2      	; 0x7fd8 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x30>
    7fd6:	69 c0       	rjmp	.+210    	; 0x80aa <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x102>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    7fd8:	f7 01       	movw	r30, r14
    7fda:	82 81       	ldd	r24, Z+2	; 0x02
    7fdc:	93 81       	ldd	r25, Z+3	; 0x03
    7fde:	a4 81       	ldd	r26, Z+4	; 0x04
    7fe0:	b5 81       	ldd	r27, Z+5	; 0x05
    7fe2:	40 91 eb 09 	lds	r20, 0x09EB
    7fe6:	50 91 ec 09 	lds	r21, 0x09EC
    7fea:	60 91 ed 09 	lds	r22, 0x09ED
    7fee:	70 91 ee 09 	lds	r23, 0x09EE
    7ff2:	84 17       	cp	r24, r20
    7ff4:	95 07       	cpc	r25, r21
    7ff6:	a6 07       	cpc	r26, r22
    7ff8:	b7 07       	cpc	r27, r23
    7ffa:	09 f4       	brne	.+2      	; 0x7ffe <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x56>
    7ffc:	59 c0       	rjmp	.+178    	; 0x80b0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x108>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    7ffe:	88 24       	eor	r8, r8
    8000:	99 24       	eor	r9, r9
    8002:	68 94       	set
    8004:	83 f8       	bld	r8, 3
    8006:	8e 0c       	add	r8, r14
    8008:	9f 1c       	adc	r9, r15
    800a:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    800e:	6f 70       	andi	r22, 0x0F	; 15
    8010:	70 70       	andi	r23, 0x00	; 0
    8012:	60 50       	subi	r22, 0x00	; 0
    8014:	7c 4f       	sbci	r23, 0xFC	; 252
    8016:	c4 01       	movw	r24, r8
    8018:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN11EthernetUDP5beginEj>
    801c:	81 30       	cpi	r24, 0x01	; 1
    801e:	09 f0       	breq	.+2      	; 0x8022 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x7a>
    8020:	4a c0       	rjmp	.+148    	; 0x80b6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x10e>
    8022:	8b e4       	ldi	r24, 0x4B	; 75
    8024:	93 e0       	ldi	r25, 0x03	; 3
    8026:	9a 83       	std	Y+2, r25	; 0x02
    8028:	89 83       	std	Y+1, r24	; 0x01
    802a:	f7 01       	movw	r30, r14
    802c:	82 81       	ldd	r24, Z+2	; 0x02
    802e:	93 81       	ldd	r25, Z+3	; 0x03
    8030:	a4 81       	ldd	r26, Z+4	; 0x04
    8032:	b5 81       	ldd	r27, Z+5	; 0x05
    8034:	8b 83       	std	Y+3, r24	; 0x03
    8036:	9c 83       	std	Y+4, r25	; 0x04
    8038:	ad 83       	std	Y+5, r26	; 0x05
    803a:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    803c:	c4 01       	movw	r24, r8
    803e:	be 01       	movw	r22, r28
    8040:	6f 5f       	subi	r22, 0xFF	; 255
    8042:	7f 4f       	sbci	r23, 0xFF	; 255
    8044:	45 e3       	ldi	r20, 0x35	; 53
    8046:	50 e0       	ldi	r21, 0x00	; 0
    8048:	0e 94 4a 11 	call	0x2294	; 0x2294 <_ZN11EthernetUDP11beginPacketE9IPAddressj>
    804c:	8c 01       	movw	r16, r24
            if (ret != 0)
    804e:	00 97       	sbiw	r24, 0x00	; 0
    8050:	41 f1       	breq	.+80     	; 0x80a2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfa>
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    8052:	c7 01       	movw	r24, r14
    8054:	b6 01       	movw	r22, r12
    8056:	0e 94 83 3d 	call	0x7b06	; 0x7b06 <_ZN9DNSClient12BuildRequestEPKc>
    805a:	08 2f       	mov	r16, r24
    805c:	19 2f       	mov	r17, r25
                if (ret != 0)
    805e:	01 15       	cp	r16, r1
    8060:	11 05       	cpc	r17, r1
    8062:	f9 f0       	breq	.+62     	; 0x80a2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfa>
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    8064:	c4 01       	movw	r24, r8
    8066:	0e 94 45 11 	call	0x228a	; 0x228a <_ZN11EthernetUDP9endPacketEv>
    806a:	8c 01       	movw	r16, r24
                    if (ret != 0)
    806c:	00 97       	sbiw	r24, 0x00	; 0
    806e:	31 f4       	brne	.+12     	; 0x807c <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd4>
    8070:	18 c0       	rjmp	.+48     	; 0x80a2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfa>
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    8072:	ff ef       	ldi	r31, 0xFF	; 255
    8074:	0f 3f       	cpi	r16, 0xFF	; 255
    8076:	1f 07       	cpc	r17, r31
    8078:	a1 f4       	brne	.+40     	; 0x80a2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfa>
    807a:	05 c0       	rjmp	.+10     	; 0x8086 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xde>
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
                    if (ret != 0)
    807c:	0f 2e       	mov	r0, r31
    807e:	f3 e0       	ldi	r31, 0x03	; 3
    8080:	cf 2e       	mov	r12, r31
    8082:	dd 24       	eor	r13, r13
    8084:	f0 2d       	mov	r31, r0
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    8086:	c7 01       	movw	r24, r14
    8088:	68 e8       	ldi	r22, 0x88	; 136
    808a:	73 e1       	ldi	r23, 0x13	; 19
    808c:	a5 01       	movw	r20, r10
    808e:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    8092:	08 2f       	mov	r16, r24
    8094:	19 2f       	mov	r17, r25
    8096:	08 94       	sec
    8098:	c1 08       	sbc	r12, r1
    809a:	d1 08       	sbc	r13, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    809c:	c1 14       	cp	r12, r1
    809e:	d1 04       	cpc	r13, r1
    80a0:	41 f7       	brne	.-48     	; 0x8072 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xca>
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    80a2:	c4 01       	movw	r24, r8
    80a4:	0e 94 53 11 	call	0x22a6	; 0x22a6 <_ZN11EthernetUDP4stopEv>
    80a8:	08 c0       	rjmp	.+16     	; 0x80ba <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x112>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    80aa:	01 e0       	ldi	r16, 0x01	; 1
    80ac:	10 e0       	ldi	r17, 0x00	; 0
    80ae:	05 c0       	rjmp	.+10     	; 0x80ba <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x112>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    80b0:	0e ef       	ldi	r16, 0xFE	; 254
    80b2:	1f ef       	ldi	r17, 0xFF	; 255
    80b4:	02 c0       	rjmp	.+4      	; 0x80ba <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x112>
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    80b6:	00 e0       	ldi	r16, 0x00	; 0
    80b8:	10 e0       	ldi	r17, 0x00	; 0
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    80ba:	80 2f       	mov	r24, r16
    80bc:	91 2f       	mov	r25, r17
    80be:	26 96       	adiw	r28, 0x06	; 6
    80c0:	0f b6       	in	r0, 0x3f	; 63
    80c2:	f8 94       	cli
    80c4:	de bf       	out	0x3e, r29	; 62
    80c6:	0f be       	out	0x3f, r0	; 63
    80c8:	cd bf       	out	0x3d, r28	; 61
    80ca:	df 91       	pop	r29
    80cc:	cf 91       	pop	r28
    80ce:	1f 91       	pop	r17
    80d0:	0f 91       	pop	r16
    80d2:	ff 90       	pop	r15
    80d4:	ef 90       	pop	r14
    80d6:	df 90       	pop	r13
    80d8:	cf 90       	pop	r12
    80da:	bf 90       	pop	r11
    80dc:	af 90       	pop	r10
    80de:	9f 90       	pop	r9
    80e0:	8f 90       	pop	r8
    80e2:	08 95       	ret

000080e4 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    80e4:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    80e6:	89 ee       	ldi	r24, 0xE9	; 233
    80e8:	99 e0       	ldi	r25, 0x09	; 9
    80ea:	60 e0       	ldi	r22, 0x00	; 0
    80ec:	40 e0       	ldi	r20, 0x00	; 0
    80ee:	20 e0       	ldi	r18, 0x00	; 0
    80f0:	00 e0       	ldi	r16, 0x00	; 0
    80f2:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <_ZN9IPAddressC1Ehhhh>
    80f6:	0f 91       	pop	r16
    80f8:	08 95       	ret

000080fa <_ZN10RobotModel4initEv>:
RobotModel::RobotModel() {
	// TODO Auto-generated constructor stub
	init();
}
void RobotModel::init(){
	_sectionCount = 0;
    80fa:	fc 01       	movw	r30, r24
    80fc:	13 8a       	std	Z+19, r1	; 0x13
    80fe:	12 8a       	std	Z+18, r1	; 0x12
}
    8100:	08 95       	ret

00008102 <_ZN10RobotModelC1Ev>:
#include "..\Utils\ByteReader.h"
#include "..\Utils\ByteWriter.h"

RobotModel::RobotModel() {
	// TODO Auto-generated constructor stub
	init();
    8102:	0e 94 7d 40 	call	0x80fa	; 0x80fa <_ZN10RobotModel4initEv>
}
    8106:	08 95       	ret

00008108 <_ZN10RobotModel6updateEPhjj>:
void RobotModel::init(){
	_sectionCount = 0;
}

void RobotModel::update(unsigned char data[], unsigned int offset, unsigned int length){
    8108:	2f 92       	push	r2
    810a:	3f 92       	push	r3
    810c:	4f 92       	push	r4
    810e:	5f 92       	push	r5
    8110:	6f 92       	push	r6
    8112:	7f 92       	push	r7
    8114:	8f 92       	push	r8
    8116:	9f 92       	push	r9
    8118:	af 92       	push	r10
    811a:	bf 92       	push	r11
    811c:	cf 92       	push	r12
    811e:	df 92       	push	r13
    8120:	ef 92       	push	r14
    8122:	ff 92       	push	r15
    8124:	0f 93       	push	r16
    8126:	1f 93       	push	r17
    8128:	cf 93       	push	r28
    812a:	df 93       	push	r29
    812c:	00 d0       	rcall	.+0      	; 0x812e <_ZN10RobotModel6updateEPhjj+0x26>
    812e:	0f 92       	push	r0
    8130:	0f 92       	push	r0
    8132:	cd b7       	in	r28, 0x3d	; 61
    8134:	de b7       	in	r29, 0x3e	; 62
    8136:	4c 01       	movw	r8, r24
    8138:	3b 01       	movw	r6, r22
	if (data[offset++] == PACKET_VERSION){
    813a:	84 2f       	mov	r24, r20
    813c:	95 2f       	mov	r25, r21
    813e:	fb 01       	movw	r30, r22
    8140:	e8 0f       	add	r30, r24
    8142:	f9 1f       	adc	r31, r25
    8144:	20 81       	ld	r18, Z
    8146:	01 96       	adiw	r24, 0x01	; 1
    8148:	9a 83       	std	Y+2, r25	; 0x02
    814a:	89 83       	std	Y+1, r24	; 0x01
    814c:	24 30       	cpi	r18, 0x04	; 4
    814e:	09 f0       	breq	.+2      	; 0x8152 <_ZN10RobotModel6updateEPhjj+0x4a>
    8150:	87 c0       	rjmp	.+270    	; 0x8260 <_ZN10RobotModel6updateEPhjj+0x158>
		packetIndex = readUInt16(data, &offset);
    8152:	cb 01       	movw	r24, r22
    8154:	be 01       	movw	r22, r28
    8156:	6f 5f       	subi	r22, 0xFF	; 255
    8158:	7f 4f       	sbci	r23, 0xFF	; 255
    815a:	0e 94 01 44 	call	0x8802	; 0x8802 <_Z10readUInt16PhPj>
    815e:	d4 01       	movw	r26, r8
    8160:	51 96       	adiw	r26, 0x11	; 17
    8162:	9c 93       	st	X, r25
    8164:	8e 93       	st	-X, r24
    8166:	50 97       	sbiw	r26, 0x10	; 16
		uint8_t packetType = data[offset++];
    8168:	29 81       	ldd	r18, Y+1	; 0x01
    816a:	3a 81       	ldd	r19, Y+2	; 0x02
    816c:	f3 01       	movw	r30, r6
    816e:	e2 0f       	add	r30, r18
    8170:	f3 1f       	adc	r31, r19
    8172:	40 81       	ld	r20, Z
		
		offset+=2; //Ignore the content length.
    8174:	c9 01       	movw	r24, r18
    8176:	03 96       	adiw	r24, 0x03	; 3
		if (packetType == 2) {
    8178:	42 30       	cpi	r20, 0x02	; 2
    817a:	09 f0       	breq	.+2      	; 0x817e <_ZN10RobotModel6updateEPhjj+0x76>
    817c:	71 c0       	rjmp	.+226    	; 0x8260 <_ZN10RobotModel6updateEPhjj+0x158>
			uint8_t sectionCount = data[offset++];
    817e:	86 0d       	add	r24, r6
    8180:	97 1d       	adc	r25, r7
    8182:	fc 01       	movw	r30, r24
    8184:	80 81       	ld	r24, Z
    8186:	2c 5f       	subi	r18, 0xFC	; 252
    8188:	3f 4f       	sbci	r19, 0xFF	; 255
    818a:	3a 83       	std	Y+2, r19	; 0x02
    818c:	29 83       	std	Y+1, r18	; 0x01
			
			for (int i = 0; i < sectionCount; i++){
    818e:	28 2f       	mov	r18, r24
    8190:	30 e0       	ldi	r19, 0x00	; 0
    8192:	3c 83       	std	Y+4, r19	; 0x04
    8194:	2b 83       	std	Y+3, r18	; 0x03
    8196:	12 16       	cp	r1, r18
    8198:	13 06       	cpc	r1, r19
    819a:	0c f0       	brlt	.+2      	; 0x819e <_ZN10RobotModel6updateEPhjj+0x96>
    819c:	61 c0       	rjmp	.+194    	; 0x8260 <_ZN10RobotModel6updateEPhjj+0x158>
    819e:	44 24       	eor	r4, r4
    81a0:	55 24       	eor	r5, r5
				unsigned char sectionId = data[offset++];
				
				unsigned short length = readUInt16(data, &offset);
				for (int iSection = 0; iSection < _sectionCount; iSection++){
    81a2:	a8 2c       	mov	r10, r8
    81a4:	9d 82       	std	Y+5, r9	; 0x05
		offset+=2; //Ignore the content length.
		if (packetType == 2) {
			uint8_t sectionCount = data[offset++];
			
			for (int i = 0; i < sectionCount; i++){
				unsigned char sectionId = data[offset++];
    81a6:	89 81       	ldd	r24, Y+1	; 0x01
    81a8:	9a 81       	ldd	r25, Y+2	; 0x02
    81aa:	f3 01       	movw	r30, r6
    81ac:	e8 0f       	add	r30, r24
    81ae:	f9 1f       	adc	r31, r25
    81b0:	b0 80       	ld	r11, Z
    81b2:	01 96       	adiw	r24, 0x01	; 1
    81b4:	9a 83       	std	Y+2, r25	; 0x02
    81b6:	89 83       	std	Y+1, r24	; 0x01
				
				unsigned short length = readUInt16(data, &offset);
    81b8:	c3 01       	movw	r24, r6
    81ba:	be 01       	movw	r22, r28
    81bc:	6f 5f       	subi	r22, 0xFF	; 255
    81be:	7f 4f       	sbci	r23, 0xFF	; 255
    81c0:	0e 94 01 44 	call	0x8802	; 0x8802 <_Z10readUInt16PhPj>
    81c4:	1c 01       	movw	r2, r24
				for (int iSection = 0; iSection < _sectionCount; iSection++){
    81c6:	d4 01       	movw	r26, r8
    81c8:	52 96       	adiw	r26, 0x12	; 18
    81ca:	8d 91       	ld	r24, X+
    81cc:	9c 91       	ld	r25, X
    81ce:	53 97       	sbiw	r26, 0x13	; 19
    81d0:	18 16       	cp	r1, r24
    81d2:	19 06       	cpc	r1, r25
    81d4:	b4 f5       	brge	.+108    	; 0x8242 <_ZN10RobotModel6updateEPhjj+0x13a>
    81d6:	0a 2d       	mov	r16, r10
    81d8:	1d 81       	ldd	r17, Y+5	; 0x05
    81da:	ee 24       	eor	r14, r14
    81dc:	ff 24       	eor	r15, r15
}
void RobotModel::init(){
	_sectionCount = 0;
}

void RobotModel::update(unsigned char data[], unsigned int offset, unsigned int length){
    81de:	68 01       	movw	r12, r16
			for (int i = 0; i < sectionCount; i++){
				unsigned char sectionId = data[offset++];
				
				unsigned short length = readUInt16(data, &offset);
				for (int iSection = 0; iSection < _sectionCount; iSection++){
					if (sections[iSection]->sectionId == sectionId){
    81e0:	d8 01       	movw	r26, r16
    81e2:	ed 91       	ld	r30, X+
    81e4:	fc 91       	ld	r31, X
    81e6:	11 97       	sbiw	r26, 0x01	; 1
    81e8:	82 81       	ldd	r24, Z+2	; 0x02
    81ea:	8b 15       	cp	r24, r11
    81ec:	f9 f4       	brne	.+62     	; 0x822c <_ZN10RobotModel6updateEPhjj+0x124>
						if (!sections[iSection]->isActive){
    81ee:	83 81       	ldd	r24, Z+3	; 0x03
    81f0:	88 23       	and	r24, r24
    81f2:	79 f4       	brne	.+30     	; 0x8212 <_ZN10RobotModel6updateEPhjj+0x10a>
							sections[iSection]->isActive = true;
    81f4:	b1 e0       	ldi	r27, 0x01	; 1
    81f6:	b3 83       	std	Z+3, r27	; 0x03
							Serial.print("Activated section:");
    81f8:	8e ee       	ldi	r24, 0xEE	; 238
    81fa:	96 e0       	ldi	r25, 0x06	; 6
    81fc:	66 e6       	ldi	r22, 0x66	; 102
    81fe:	73 e0       	ldi	r23, 0x03	; 3
    8200:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
							Serial.println(sectionId);
    8204:	8e ee       	ldi	r24, 0xEE	; 238
    8206:	96 e0       	ldi	r25, 0x06	; 6
    8208:	6b 2d       	mov	r22, r11
    820a:	4a e0       	ldi	r20, 0x0A	; 10
    820c:	50 e0       	ldi	r21, 0x00	; 0
    820e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <_ZN5Print7printlnEhi>
						}						
						sections[iSection]->update(data, offset);
    8212:	f6 01       	movw	r30, r12
    8214:	80 81       	ld	r24, Z
    8216:	91 81       	ldd	r25, Z+1	; 0x01
    8218:	dc 01       	movw	r26, r24
    821a:	ed 91       	ld	r30, X+
    821c:	fc 91       	ld	r31, X
    821e:	49 81       	ldd	r20, Y+1	; 0x01
    8220:	5a 81       	ldd	r21, Y+2	; 0x02
    8222:	01 90       	ld	r0, Z+
    8224:	f0 81       	ld	r31, Z
    8226:	e0 2d       	mov	r30, r0
    8228:	b3 01       	movw	r22, r6
    822a:	19 95       	eicall
			
			for (int i = 0; i < sectionCount; i++){
				unsigned char sectionId = data[offset++];
				
				unsigned short length = readUInt16(data, &offset);
				for (int iSection = 0; iSection < _sectionCount; iSection++){
    822c:	08 94       	sec
    822e:	e1 1c       	adc	r14, r1
    8230:	f1 1c       	adc	r15, r1
    8232:	0e 5f       	subi	r16, 0xFE	; 254
    8234:	1f 4f       	sbci	r17, 0xFF	; 255
    8236:	f4 01       	movw	r30, r8
    8238:	82 89       	ldd	r24, Z+18	; 0x12
    823a:	93 89       	ldd	r25, Z+19	; 0x13
    823c:	e8 16       	cp	r14, r24
    823e:	f9 06       	cpc	r15, r25
    8240:	74 f2       	brlt	.-100    	; 0x81de <_ZN10RobotModel6updateEPhjj+0xd6>
							Serial.println(sectionId);
						}						
						sections[iSection]->update(data, offset);
					}
				}
				offset += length;
    8242:	89 81       	ldd	r24, Y+1	; 0x01
    8244:	9a 81       	ldd	r25, Y+2	; 0x02
    8246:	82 0d       	add	r24, r2
    8248:	93 1d       	adc	r25, r3
    824a:	9a 83       	std	Y+2, r25	; 0x02
    824c:	89 83       	std	Y+1, r24	; 0x01
		
		offset+=2; //Ignore the content length.
		if (packetType == 2) {
			uint8_t sectionCount = data[offset++];
			
			for (int i = 0; i < sectionCount; i++){
    824e:	08 94       	sec
    8250:	41 1c       	adc	r4, r1
    8252:	51 1c       	adc	r5, r1
    8254:	2b 81       	ldd	r18, Y+3	; 0x03
    8256:	3c 81       	ldd	r19, Y+4	; 0x04
    8258:	42 16       	cp	r4, r18
    825a:	53 06       	cpc	r5, r19
    825c:	0c f4       	brge	.+2      	; 0x8260 <_ZN10RobotModel6updateEPhjj+0x158>
    825e:	a3 cf       	rjmp	.-186    	; 0x81a6 <_ZN10RobotModel6updateEPhjj+0x9e>
		}
	}
	else{
		//TODO:Invalid packet version. DTC.
	}
}
    8260:	0f 90       	pop	r0
    8262:	0f 90       	pop	r0
    8264:	0f 90       	pop	r0
    8266:	0f 90       	pop	r0
    8268:	0f 90       	pop	r0
    826a:	df 91       	pop	r29
    826c:	cf 91       	pop	r28
    826e:	1f 91       	pop	r17
    8270:	0f 91       	pop	r16
    8272:	ff 90       	pop	r15
    8274:	ef 90       	pop	r14
    8276:	df 90       	pop	r13
    8278:	cf 90       	pop	r12
    827a:	bf 90       	pop	r11
    827c:	af 90       	pop	r10
    827e:	9f 90       	pop	r9
    8280:	8f 90       	pop	r8
    8282:	7f 90       	pop	r7
    8284:	6f 90       	pop	r6
    8286:	5f 90       	pop	r5
    8288:	4f 90       	pop	r4
    828a:	3f 90       	pop	r3
    828c:	2f 90       	pop	r2
    828e:	08 95       	ret

00008290 <_ZN10RobotModel9getStatusEPhPj>:
void RobotModel::getStatus(unsigned char data[], unsigned int *offset){
    8290:	4f 92       	push	r4
    8292:	5f 92       	push	r5
    8294:	6f 92       	push	r6
    8296:	7f 92       	push	r7
    8298:	8f 92       	push	r8
    829a:	9f 92       	push	r9
    829c:	af 92       	push	r10
    829e:	bf 92       	push	r11
    82a0:	cf 92       	push	r12
    82a2:	df 92       	push	r13
    82a4:	ef 92       	push	r14
    82a6:	ff 92       	push	r15
    82a8:	0f 93       	push	r16
    82aa:	1f 93       	push	r17
    82ac:	cf 93       	push	r28
    82ae:	df 93       	push	r29
    82b0:	3c 01       	movw	r6, r24
    82b2:	4b 01       	movw	r8, r22
    82b4:	5a 01       	movw	r10, r20
	data[(*offset)++] = PACKET_VERSION;
    82b6:	da 01       	movw	r26, r20
    82b8:	4d 91       	ld	r20, X+
    82ba:	5c 91       	ld	r21, X
    82bc:	11 97       	sbiw	r26, 0x01	; 1
    82be:	fb 01       	movw	r30, r22
    82c0:	e4 0f       	add	r30, r20
    82c2:	f5 1f       	adc	r31, r21
    82c4:	84 e0       	ldi	r24, 0x04	; 4
    82c6:	80 83       	st	Z, r24
    82c8:	4f 5f       	subi	r20, 0xFF	; 255
    82ca:	5f 4f       	sbci	r21, 0xFF	; 255
    82cc:	4d 93       	st	X+, r20
    82ce:	5c 93       	st	X, r21
	writeUInt16(data, packetIndex, (*offset)); (*offset) += 2;
    82d0:	f3 01       	movw	r30, r6
    82d2:	60 89       	ldd	r22, Z+16	; 0x10
    82d4:	71 89       	ldd	r23, Z+17	; 0x11
    82d6:	c4 01       	movw	r24, r8
    82d8:	0e 94 be 47 	call	0x8f7c	; 0x8f7c <_Z11writeUInt16Phtj>
    82dc:	d5 01       	movw	r26, r10
    82de:	2d 91       	ld	r18, X+
    82e0:	3c 91       	ld	r19, X
    82e2:	11 97       	sbiw	r26, 0x01	; 1
	data[(*offset)++] = 3; //Set as status packet
    82e4:	f4 01       	movw	r30, r8
    82e6:	e2 0f       	add	r30, r18
    82e8:	f3 1f       	adc	r31, r19
    82ea:	83 e0       	ldi	r24, 0x03	; 3
    82ec:	82 83       	std	Z+2, r24	; 0x02
    82ee:	0f 2e       	mov	r0, r31
    82f0:	f3 e0       	ldi	r31, 0x03	; 3
    82f2:	4f 2e       	mov	r4, r31
    82f4:	55 24       	eor	r5, r5
    82f6:	f0 2d       	mov	r31, r0
    82f8:	42 0e       	add	r4, r18
    82fa:	53 1e       	adc	r5, r19
	unsigned int contentLengthOffset = *offset;
	(*offset) += 2;
    82fc:	c9 01       	movw	r24, r18
    82fe:	05 96       	adiw	r24, 0x05	; 5
    8300:	8d 93       	st	X+, r24
    8302:	9c 93       	st	X, r25
	data[(*offset)++] = _sectionCount;
    8304:	88 0d       	add	r24, r8
    8306:	99 1d       	adc	r25, r9
    8308:	f3 01       	movw	r30, r6
    830a:	42 89       	ldd	r20, Z+18	; 0x12
    830c:	dc 01       	movw	r26, r24
    830e:	4c 93       	st	X, r20
    8310:	c9 01       	movw	r24, r18
    8312:	06 96       	adiw	r24, 0x06	; 6
    8314:	f5 01       	movw	r30, r10
    8316:	91 83       	std	Z+1, r25	; 0x01
    8318:	80 83       	st	Z, r24
	
	for (int i = 0; i < _sectionCount; i++){
    831a:	d3 01       	movw	r26, r6
    831c:	52 96       	adiw	r26, 0x12	; 18
    831e:	8d 91       	ld	r24, X+
    8320:	9c 91       	ld	r25, X
    8322:	53 97       	sbiw	r26, 0x13	; 19
    8324:	18 16       	cp	r1, r24
    8326:	19 06       	cpc	r1, r25
    8328:	e4 f5       	brge	.+120    	; 0x83a2 <_ZN10RobotModel9getStatusEPhPj+0x112>
    832a:	83 01       	movw	r16, r6
    832c:	ee 24       	eor	r14, r14
    832e:	ff 24       	eor	r15, r15
		unsigned short sectionHeaderOffset = *offset;
    8330:	f5 01       	movw	r30, r10
    8332:	80 81       	ld	r24, Z
    8334:	91 81       	ldd	r25, Z+1	; 0x01
		data[(*offset)++] = sections[i]->sectionId;
    8336:	d8 01       	movw	r26, r16
    8338:	ed 91       	ld	r30, X+
    833a:	fc 91       	ld	r31, X
    833c:	22 81       	ldd	r18, Z+2	; 0x02
    833e:	f4 01       	movw	r30, r8
    8340:	e8 0f       	add	r30, r24
    8342:	f9 1f       	adc	r31, r25
    8344:	20 83       	st	Z, r18
    8346:	6c 01       	movw	r12, r24
    8348:	08 94       	sec
    834a:	c1 1c       	adc	r12, r1
    834c:	d1 1c       	adc	r13, r1
		(*offset) += 2;
    834e:	ec 01       	movw	r28, r24
    8350:	23 96       	adiw	r28, 0x03	; 3
    8352:	f5 01       	movw	r30, r10
    8354:	d1 83       	std	Z+1, r29	; 0x01
    8356:	c0 83       	st	Z, r28
		unsigned short contentStartOffset = *offset;

		if (sections[i]->isActive){
    8358:	f8 01       	movw	r30, r16
    835a:	a1 91       	ld	r26, Z+
    835c:	b1 91       	ld	r27, Z+
    835e:	8f 01       	movw	r16, r30
    8360:	13 96       	adiw	r26, 0x03	; 3
    8362:	8c 91       	ld	r24, X
    8364:	13 97       	sbiw	r26, 0x03	; 3
    8366:	88 23       	and	r24, r24
    8368:	51 f0       	breq	.+20     	; 0x837e <_ZN10RobotModel9getStatusEPhPj+0xee>
			sections[i]->getStatus(data, offset);
    836a:	ed 91       	ld	r30, X+
    836c:	fc 91       	ld	r31, X
    836e:	11 97       	sbiw	r26, 0x01	; 1
    8370:	02 80       	ldd	r0, Z+2	; 0x02
    8372:	f3 81       	ldd	r31, Z+3	; 0x03
    8374:	e0 2d       	mov	r30, r0
    8376:	cd 01       	movw	r24, r26
    8378:	b4 01       	movw	r22, r8
    837a:	a5 01       	movw	r20, r10
    837c:	19 95       	eicall
		}		
		//Write length to header
		unsigned short length = (*offset) - contentStartOffset;
    837e:	d5 01       	movw	r26, r10
    8380:	6d 91       	ld	r22, X+
    8382:	7c 91       	ld	r23, X
    8384:	6c 1b       	sub	r22, r28
    8386:	7d 0b       	sbc	r23, r29
		writeUInt16(data, length, sectionHeaderOffset + 1);
    8388:	c4 01       	movw	r24, r8
    838a:	a6 01       	movw	r20, r12
    838c:	0e 94 be 47 	call	0x8f7c	; 0x8f7c <_Z11writeUInt16Phtj>
	data[(*offset)++] = 3; //Set as status packet
	unsigned int contentLengthOffset = *offset;
	(*offset) += 2;
	data[(*offset)++] = _sectionCount;
	
	for (int i = 0; i < _sectionCount; i++){
    8390:	08 94       	sec
    8392:	e1 1c       	adc	r14, r1
    8394:	f1 1c       	adc	r15, r1
    8396:	f3 01       	movw	r30, r6
    8398:	82 89       	ldd	r24, Z+18	; 0x12
    839a:	93 89       	ldd	r25, Z+19	; 0x13
    839c:	e8 16       	cp	r14, r24
    839e:	f9 06       	cpc	r15, r25
    83a0:	3c f2       	brlt	.-114    	; 0x8330 <_ZN10RobotModel9getStatusEPhPj+0xa0>
		}		
		//Write length to header
		unsigned short length = (*offset) - contentStartOffset;
		writeUInt16(data, length, sectionHeaderOffset + 1);
	}
	writeUInt16(data, (*offset) - contentLengthOffset, contentLengthOffset);
    83a2:	d5 01       	movw	r26, r10
    83a4:	6d 91       	ld	r22, X+
    83a6:	7c 91       	ld	r23, X
    83a8:	64 19       	sub	r22, r4
    83aa:	75 09       	sbc	r23, r5
    83ac:	c4 01       	movw	r24, r8
    83ae:	a2 01       	movw	r20, r4
    83b0:	0e 94 be 47 	call	0x8f7c	; 0x8f7c <_Z11writeUInt16Phtj>
}
    83b4:	df 91       	pop	r29
    83b6:	cf 91       	pop	r28
    83b8:	1f 91       	pop	r17
    83ba:	0f 91       	pop	r16
    83bc:	ff 90       	pop	r15
    83be:	ef 90       	pop	r14
    83c0:	df 90       	pop	r13
    83c2:	cf 90       	pop	r12
    83c4:	bf 90       	pop	r11
    83c6:	af 90       	pop	r10
    83c8:	9f 90       	pop	r9
    83ca:	8f 90       	pop	r8
    83cc:	7f 90       	pop	r7
    83ce:	6f 90       	pop	r6
    83d0:	5f 90       	pop	r5
    83d2:	4f 90       	pop	r4
    83d4:	08 95       	ret

000083d6 <_ZN10RobotModel4loopEb>:

void RobotModel::loop(bool safteyTripped){
    83d6:	df 92       	push	r13
    83d8:	ef 92       	push	r14
    83da:	ff 92       	push	r15
    83dc:	0f 93       	push	r16
    83de:	1f 93       	push	r17
    83e0:	cf 93       	push	r28
    83e2:	df 93       	push	r29
    83e4:	7c 01       	movw	r14, r24
    83e6:	d6 2e       	mov	r13, r22
	for (int i = 0; i < _sectionCount; i++){
    83e8:	fc 01       	movw	r30, r24
    83ea:	82 89       	ldd	r24, Z+18	; 0x12
    83ec:	93 89       	ldd	r25, Z+19	; 0x13
    83ee:	18 16       	cp	r1, r24
    83f0:	19 06       	cpc	r1, r25
    83f2:	e4 f4       	brge	.+56     	; 0x842c <_ZN10RobotModel4loopEb+0x56>
    83f4:	87 01       	movw	r16, r14
    83f6:	c0 e0       	ldi	r28, 0x00	; 0
    83f8:	d0 e0       	ldi	r29, 0x00	; 0
		if (sections[i]->isActive)
    83fa:	f8 01       	movw	r30, r16
    83fc:	a1 91       	ld	r26, Z+
    83fe:	b1 91       	ld	r27, Z+
    8400:	8f 01       	movw	r16, r30
    8402:	13 96       	adiw	r26, 0x03	; 3
    8404:	8c 91       	ld	r24, X
    8406:	13 97       	sbiw	r26, 0x03	; 3
    8408:	88 23       	and	r24, r24
    840a:	49 f0       	breq	.+18     	; 0x841e <_ZN10RobotModel4loopEb+0x48>
		sections[i]->loop(safteyTripped);
    840c:	ed 91       	ld	r30, X+
    840e:	fc 91       	ld	r31, X
    8410:	11 97       	sbiw	r26, 0x01	; 1
    8412:	04 80       	ldd	r0, Z+4	; 0x04
    8414:	f5 81       	ldd	r31, Z+5	; 0x05
    8416:	e0 2d       	mov	r30, r0
    8418:	cd 01       	movw	r24, r26
    841a:	6d 2d       	mov	r22, r13
    841c:	19 95       	eicall
	}
	writeUInt16(data, (*offset) - contentLengthOffset, contentLengthOffset);
}

void RobotModel::loop(bool safteyTripped){
	for (int i = 0; i < _sectionCount; i++){
    841e:	21 96       	adiw	r28, 0x01	; 1
    8420:	f7 01       	movw	r30, r14
    8422:	82 89       	ldd	r24, Z+18	; 0x12
    8424:	93 89       	ldd	r25, Z+19	; 0x13
    8426:	c8 17       	cp	r28, r24
    8428:	d9 07       	cpc	r29, r25
    842a:	3c f3       	brlt	.-50     	; 0x83fa <_ZN10RobotModel4loopEb+0x24>
		if (sections[i]->isActive)
		sections[i]->loop(safteyTripped);
	}
}
    842c:	df 91       	pop	r29
    842e:	cf 91       	pop	r28
    8430:	1f 91       	pop	r17
    8432:	0f 91       	pop	r16
    8434:	ff 90       	pop	r15
    8436:	ef 90       	pop	r14
    8438:	df 90       	pop	r13
    843a:	08 95       	ret

0000843c <_ZN10RobotModel10addSectionEP17RobotModelSection>:

bool RobotModel::addSection(RobotModelSection *section){
    843c:	ef 92       	push	r14
    843e:	ff 92       	push	r15
    8440:	0f 93       	push	r16
    8442:	1f 93       	push	r17
    8444:	cf 93       	push	r28
    8446:	df 93       	push	r29
    8448:	8c 01       	movw	r16, r24
    844a:	7b 01       	movw	r14, r22
	if (_sectionCount < MAX_MODEL_SECTIONS){
    844c:	fc 01       	movw	r30, r24
    844e:	82 89       	ldd	r24, Z+18	; 0x12
    8450:	93 89       	ldd	r25, Z+19	; 0x13
    8452:	88 30       	cpi	r24, 0x08	; 8
    8454:	91 05       	cpc	r25, r1
    8456:	e4 f4       	brge	.+56     	; 0x8490 <_ZN10RobotModel10addSectionEP17RobotModelSection+0x54>
		sections[_sectionCount++] = section;
    8458:	fc 01       	movw	r30, r24
    845a:	ee 0f       	add	r30, r30
    845c:	ff 1f       	adc	r31, r31
    845e:	e0 0f       	add	r30, r16
    8460:	f1 1f       	adc	r31, r17
    8462:	71 83       	std	Z+1, r23	; 0x01
    8464:	60 83       	st	Z, r22
    8466:	01 96       	adiw	r24, 0x01	; 1
    8468:	f8 01       	movw	r30, r16
    846a:	93 8b       	std	Z+19, r25	; 0x13
    846c:	82 8b       	std	Z+18, r24	; 0x12
		Serial.print("Added section:");
    846e:	ce ee       	ldi	r28, 0xEE	; 238
    8470:	d6 e0       	ldi	r29, 0x06	; 6
    8472:	ce 01       	movw	r24, r28
    8474:	69 e7       	ldi	r22, 0x79	; 121
    8476:	73 e0       	ldi	r23, 0x03	; 3
    8478:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
		Serial.println((int)(section->sectionId));
    847c:	f7 01       	movw	r30, r14
    847e:	62 81       	ldd	r22, Z+2	; 0x02
    8480:	ce 01       	movw	r24, r28
    8482:	70 e0       	ldi	r23, 0x00	; 0
    8484:	4a e0       	ldi	r20, 0x0A	; 10
    8486:	50 e0       	ldi	r21, 0x00	; 0
    8488:	0e 94 c3 20 	call	0x4186	; 0x4186 <_ZN5Print7printlnEii>
		return true;
    848c:	81 e0       	ldi	r24, 0x01	; 1
    848e:	10 c0       	rjmp	.+32     	; 0x84b0 <_ZN10RobotModel10addSectionEP17RobotModelSection+0x74>
	}
	else
	{
		Serial.print("Too many sections:");
    8490:	ce ee       	ldi	r28, 0xEE	; 238
    8492:	d6 e0       	ldi	r29, 0x06	; 6
    8494:	ce 01       	movw	r24, r28
    8496:	68 e8       	ldi	r22, 0x88	; 136
    8498:	73 e0       	ldi	r23, 0x03	; 3
    849a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_ZN5Print5printEPKc>
		Serial.print(_sectionCount);
    849e:	f8 01       	movw	r30, r16
    84a0:	62 89       	ldd	r22, Z+18	; 0x12
    84a2:	73 89       	ldd	r23, Z+19	; 0x13
    84a4:	ce 01       	movw	r24, r28
    84a6:	4a e0       	ldi	r20, 0x0A	; 10
    84a8:	50 e0       	ldi	r21, 0x00	; 0
    84aa:	0e 94 b9 20 	call	0x4172	; 0x4172 <_ZN5Print5printEii>
		return false;
    84ae:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    84b0:	df 91       	pop	r29
    84b2:	cf 91       	pop	r28
    84b4:	1f 91       	pop	r17
    84b6:	0f 91       	pop	r16
    84b8:	ff 90       	pop	r15
    84ba:	ef 90       	pop	r14
    84bc:	08 95       	ret

000084be <_ZN17RobotModelSection6updateEPhj>:
	isActive = false;
}

void RobotModelSection::update(unsigned char data[], unsigned int offset){

}
    84be:	08 95       	ret

000084c0 <_ZN17RobotModelSection9getStatusEPhPj>:
void RobotModelSection::getStatus(unsigned char data[], unsigned int *offset){

}
    84c0:	08 95       	ret

000084c2 <_ZN17RobotModelSection4loopEb>:

void RobotModelSection::loop(bool safteyTripped){
    84c2:	1f 93       	push	r17
    84c4:	cf 93       	push	r28
    84c6:	df 93       	push	r29
    84c8:	ec 01       	movw	r28, r24
    84ca:	16 2f       	mov	r17, r22
	if (safteyTripped && !lastIsSafteyTripped)
    84cc:	66 23       	and	r22, r22
    84ce:	59 f0       	breq	.+22     	; 0x84e6 <_ZN17RobotModelSection4loopEb+0x24>
    84d0:	8d 81       	ldd	r24, Y+5	; 0x05
    84d2:	88 23       	and	r24, r24
    84d4:	59 f4       	brne	.+22     	; 0x84ec <_ZN17RobotModelSection4loopEb+0x2a>
		disableOutputs();
    84d6:	e8 81       	ld	r30, Y
    84d8:	f9 81       	ldd	r31, Y+1	; 0x01
    84da:	06 80       	ldd	r0, Z+6	; 0x06
    84dc:	f7 81       	ldd	r31, Z+7	; 0x07
    84de:	e0 2d       	mov	r30, r0
    84e0:	ce 01       	movw	r24, r28
    84e2:	19 95       	eicall
    84e4:	0d c0       	rjmp	.+26     	; 0x8500 <_ZN17RobotModelSection4loopEb+0x3e>
	else if ((!safteyTripped && lastIsSafteyTripped) || isFirstLoop){
    84e6:	8d 81       	ldd	r24, Y+5	; 0x05
    84e8:	88 23       	and	r24, r24
    84ea:	19 f4       	brne	.+6      	; 0x84f2 <_ZN17RobotModelSection4loopEb+0x30>
    84ec:	8c 81       	ldd	r24, Y+4	; 0x04
    84ee:	88 23       	and	r24, r24
    84f0:	39 f0       	breq	.+14     	; 0x8500 <_ZN17RobotModelSection4loopEb+0x3e>
		enableOutputs();
    84f2:	e8 81       	ld	r30, Y
    84f4:	f9 81       	ldd	r31, Y+1	; 0x01
    84f6:	00 84       	ldd	r0, Z+8	; 0x08
    84f8:	f1 85       	ldd	r31, Z+9	; 0x09
    84fa:	e0 2d       	mov	r30, r0
    84fc:	ce 01       	movw	r24, r28
    84fe:	19 95       	eicall
	}
	lastIsSafteyTripped = safteyTripped;
    8500:	1d 83       	std	Y+5, r17	; 0x05
	isFirstLoop = false;
    8502:	1c 82       	std	Y+4, r1	; 0x04
}
    8504:	df 91       	pop	r29
    8506:	cf 91       	pop	r28
    8508:	1f 91       	pop	r17
    850a:	08 95       	ret

0000850c <_ZN17RobotModelSection14disableOutputsEv>:
void RobotModelSection::disableOutputs(){}
    850c:	08 95       	ret

0000850e <_ZN17RobotModelSection13enableOutputsEv>:
void RobotModelSection::enableOutputs(){}
    850e:	08 95       	ret

00008510 <_ZN17RobotModelSection4initEv>:

RobotModelSection::RobotModelSection() {
	init();
}

void RobotModelSection::init(){
    8510:	fc 01       	movw	r30, r24
	lastIsSafteyTripped = false;
    8512:	15 82       	std	Z+5, r1	; 0x05
	isFirstLoop = true;
    8514:	81 e0       	ldi	r24, 0x01	; 1
    8516:	84 83       	std	Z+4, r24	; 0x04
	isActive = false;
    8518:	13 82       	std	Z+3, r1	; 0x03
}
    851a:	08 95       	ret

0000851c <_ZN17RobotModelSectionC1Ev>:
 *      Author: EHaskins
 */

#include "RobotModelSection.h"

RobotModelSection::RobotModelSection() {
    851c:	2f e9       	ldi	r18, 0x9F	; 159
    851e:	33 e0       	ldi	r19, 0x03	; 3
    8520:	fc 01       	movw	r30, r24
    8522:	31 83       	std	Z+1, r19	; 0x01
    8524:	20 83       	st	Z, r18
	init();
    8526:	0e 94 88 42 	call	0x8510	; 0x8510 <_ZN17RobotModelSection4initEv>
}
    852a:	08 95       	ret

0000852c <_ZN15RslModelSection6updateEPhj>:
	state = 0;
	isActive = true;
	pinMode(pin, OUTPUT);
}
void RslModelSection::update(unsigned char data[], unsigned int offset){
	state = data[offset++];
    852c:	64 0f       	add	r22, r20
    852e:	75 1f       	adc	r23, r21
    8530:	fb 01       	movw	r30, r22
    8532:	20 81       	ld	r18, Z
    8534:	fc 01       	movw	r30, r24
    8536:	20 87       	std	Z+8, r18	; 0x08
}
    8538:	08 95       	ret

0000853a <_ZN15RslModelSection9getStatusEPhPj>:
void RslModelSection::getStatus(unsigned char data[], unsigned int *offset){
	//RSL has no status
}
    853a:	08 95       	ret

0000853c <_ZN15RslModelSectionC1Ev>:
 *      Author: EHaskins
 */

#include "RslModelSection.h"

RslModelSection::RslModelSection() {
    853c:	cf 93       	push	r28
    853e:	df 93       	push	r29
    8540:	ec 01       	movw	r28, r24
    8542:	0e 94 8e 42 	call	0x851c	; 0x851c <_ZN17RobotModelSectionC1Ev>
    8546:	8d ea       	ldi	r24, 0xAD	; 173
    8548:	93 e0       	ldi	r25, 0x03	; 3
    854a:	99 83       	std	Y+1, r25	; 0x01
    854c:	88 83       	st	Y, r24
	sectionId = 0;
    854e:	1a 82       	std	Y+2, r1	; 0x02
	pin = 13;
    8550:	8d e0       	ldi	r24, 0x0D	; 13
    8552:	90 e0       	ldi	r25, 0x00	; 0
    8554:	9f 83       	std	Y+7, r25	; 0x07
    8556:	8e 83       	std	Y+6, r24	; 0x06
	state = 0;
    8558:	18 86       	std	Y+8, r1	; 0x08
	isActive = true;
    855a:	81 e0       	ldi	r24, 0x01	; 1
    855c:	8b 83       	std	Y+3, r24	; 0x03
	pinMode(pin, OUTPUT);
    855e:	8d e0       	ldi	r24, 0x0D	; 13
    8560:	61 e0       	ldi	r22, 0x01	; 1
    8562:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <pinMode>
}
    8566:	df 91       	pop	r29
    8568:	cf 91       	pop	r28
    856a:	08 95       	ret

0000856c <_ZN15RslModelSection12driveNoStateEv>:
}

void RslModelSection::driveEStopped(){
	driveDisabled();
}
void RslModelSection::driveNoState(){
    856c:	cf 93       	push	r28
    856e:	df 93       	push	r29
    8570:	ec 01       	movw	r28, r24
	if (millis() % 400 < 100)
    8572:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    8576:	20 e9       	ldi	r18, 0x90	; 144
    8578:	31 e0       	ldi	r19, 0x01	; 1
    857a:	40 e0       	ldi	r20, 0x00	; 0
    857c:	50 e0       	ldi	r21, 0x00	; 0
    857e:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    8582:	dc 01       	movw	r26, r24
    8584:	cb 01       	movw	r24, r22
    8586:	84 36       	cpi	r24, 0x64	; 100
    8588:	91 05       	cpc	r25, r1
    858a:	a1 05       	cpc	r26, r1
    858c:	b1 05       	cpc	r27, r1
    858e:	28 f4       	brcc	.+10     	; 0x859a <_ZN15RslModelSection12driveNoStateEv+0x2e>
		digitalWrite(pin, HIGH);
    8590:	8e 81       	ldd	r24, Y+6	; 0x06
    8592:	61 e0       	ldi	r22, 0x01	; 1
    8594:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    8598:	04 c0       	rjmp	.+8      	; 0x85a2 <_ZN15RslModelSection12driveNoStateEv+0x36>
	else
		digitalWrite(pin, LOW);
    859a:	8e 81       	ldd	r24, Y+6	; 0x06
    859c:	60 e0       	ldi	r22, 0x00	; 0
    859e:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
}
    85a2:	df 91       	pop	r29
    85a4:	cf 91       	pop	r28
    85a6:	08 95       	ret

000085a8 <_ZN15RslModelSection17driveNoBeagleCommEv>:

void RslModelSection::driveNoBeagleComm(){
    85a8:	cf 93       	push	r28
    85aa:	df 93       	push	r29
    85ac:	ec 01       	movw	r28, r24
	if (millis() % 200 < 100)
    85ae:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    85b2:	28 ec       	ldi	r18, 0xC8	; 200
    85b4:	30 e0       	ldi	r19, 0x00	; 0
    85b6:	40 e0       	ldi	r20, 0x00	; 0
    85b8:	50 e0       	ldi	r21, 0x00	; 0
    85ba:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    85be:	dc 01       	movw	r26, r24
    85c0:	cb 01       	movw	r24, r22
    85c2:	84 36       	cpi	r24, 0x64	; 100
    85c4:	91 05       	cpc	r25, r1
    85c6:	a1 05       	cpc	r26, r1
    85c8:	b1 05       	cpc	r27, r1
    85ca:	28 f4       	brcc	.+10     	; 0x85d6 <_ZN15RslModelSection17driveNoBeagleCommEv+0x2e>
		digitalWrite(pin, HIGH);
    85cc:	8e 81       	ldd	r24, Y+6	; 0x06
    85ce:	61 e0       	ldi	r22, 0x01	; 1
    85d0:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    85d4:	04 c0       	rjmp	.+8      	; 0x85de <_ZN15RslModelSection17driveNoBeagleCommEv+0x36>
	else
		digitalWrite(pin, LOW);
    85d6:	8e 81       	ldd	r24, Y+6	; 0x06
    85d8:	60 e0       	ldi	r22, 0x00	; 0
    85da:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
}
    85de:	df 91       	pop	r29
    85e0:	cf 91       	pop	r28
    85e2:	08 95       	ret

000085e4 <_ZN15RslModelSection14driveNoFrcCommEv>:
void RslModelSection::driveNoFrcComm(){
    85e4:	cf 93       	push	r28
    85e6:	df 93       	push	r29
    85e8:	ec 01       	movw	r28, r24
	if (millis() % 900 < 100)
    85ea:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    85ee:	24 e8       	ldi	r18, 0x84	; 132
    85f0:	33 e0       	ldi	r19, 0x03	; 3
    85f2:	40 e0       	ldi	r20, 0x00	; 0
    85f4:	50 e0       	ldi	r21, 0x00	; 0
    85f6:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    85fa:	dc 01       	movw	r26, r24
    85fc:	cb 01       	movw	r24, r22
    85fe:	84 36       	cpi	r24, 0x64	; 100
    8600:	91 05       	cpc	r25, r1
    8602:	a1 05       	cpc	r26, r1
    8604:	b1 05       	cpc	r27, r1
    8606:	28 f4       	brcc	.+10     	; 0x8612 <_ZN15RslModelSection14driveNoFrcCommEv+0x2e>
		digitalWrite(pin, HIGH);
    8608:	8e 81       	ldd	r24, Y+6	; 0x06
    860a:	61 e0       	ldi	r22, 0x01	; 1
    860c:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    8610:	04 c0       	rjmp	.+8      	; 0x861a <_ZN15RslModelSection14driveNoFrcCommEv+0x36>
	else
		digitalWrite(pin, LOW);
    8612:	8e 81       	ldd	r24, Y+6	; 0x06
    8614:	60 e0       	ldi	r22, 0x00	; 0
    8616:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
}
    861a:	df 91       	pop	r29
    861c:	cf 91       	pop	r28
    861e:	08 95       	ret

00008620 <_ZN15RslModelSection12driveEnabledEv>:
void RslModelSection::driveEnabled(){
    8620:	cf 93       	push	r28
    8622:	df 93       	push	r29
    8624:	ec 01       	movw	r28, r24
	unsigned long m = millis();
    8626:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
	if (m % 1200 < 50)
    862a:	20 eb       	ldi	r18, 0xB0	; 176
    862c:	34 e0       	ldi	r19, 0x04	; 4
    862e:	40 e0       	ldi	r20, 0x00	; 0
    8630:	50 e0       	ldi	r21, 0x00	; 0
    8632:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    8636:	dc 01       	movw	r26, r24
    8638:	cb 01       	movw	r24, r22
    863a:	82 33       	cpi	r24, 0x32	; 50
    863c:	91 05       	cpc	r25, r1
    863e:	a1 05       	cpc	r26, r1
    8640:	b1 05       	cpc	r27, r1
    8642:	28 f4       	brcc	.+10     	; 0x864e <_ZN15RslModelSection12driveEnabledEv+0x2e>
		digitalWrite(pin, LOW);
    8644:	8e 81       	ldd	r24, Y+6	; 0x06
    8646:	60 e0       	ldi	r22, 0x00	; 0
    8648:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    864c:	18 c0       	rjmp	.+48     	; 0x867e <_ZN15RslModelSection12driveEnabledEv+0x5e>
	else if (m % 1200 < 150)
    864e:	86 39       	cpi	r24, 0x96	; 150
    8650:	91 05       	cpc	r25, r1
    8652:	a1 05       	cpc	r26, r1
    8654:	b1 05       	cpc	r27, r1
    8656:	28 f4       	brcc	.+10     	; 0x8662 <_ZN15RslModelSection12driveEnabledEv+0x42>
		digitalWrite(pin, HIGH);
    8658:	8e 81       	ldd	r24, Y+6	; 0x06
    865a:	61 e0       	ldi	r22, 0x01	; 1
    865c:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    8660:	0e c0       	rjmp	.+28     	; 0x867e <_ZN15RslModelSection12driveEnabledEv+0x5e>
	else if (m % 1200 < 200)
    8662:	88 3c       	cpi	r24, 0xC8	; 200
    8664:	91 05       	cpc	r25, r1
    8666:	a1 05       	cpc	r26, r1
    8668:	b1 05       	cpc	r27, r1
    866a:	28 f4       	brcc	.+10     	; 0x8676 <_ZN15RslModelSection12driveEnabledEv+0x56>
		digitalWrite(pin, LOW);
    866c:	8e 81       	ldd	r24, Y+6	; 0x06
    866e:	60 e0       	ldi	r22, 0x00	; 0
    8670:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    8674:	04 c0       	rjmp	.+8      	; 0x867e <_ZN15RslModelSection12driveEnabledEv+0x5e>
	else
		digitalWrite(pin, HIGH);
    8676:	8e 81       	ldd	r24, Y+6	; 0x06
    8678:	61 e0       	ldi	r22, 0x01	; 1
    867a:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>

}
    867e:	df 91       	pop	r29
    8680:	cf 91       	pop	r28
    8682:	08 95       	ret

00008684 <_ZN15RslModelSection13driveDisabledEv>:
void RslModelSection::driveDisabled(){
    8684:	cf 93       	push	r28
    8686:	df 93       	push	r29
    8688:	ec 01       	movw	r28, r24
	if (millis() % 2000 < 1000)
    868a:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
    868e:	20 ed       	ldi	r18, 0xD0	; 208
    8690:	37 e0       	ldi	r19, 0x07	; 7
    8692:	40 e0       	ldi	r20, 0x00	; 0
    8694:	50 e0       	ldi	r21, 0x00	; 0
    8696:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    869a:	dc 01       	movw	r26, r24
    869c:	cb 01       	movw	r24, r22
    869e:	88 3e       	cpi	r24, 0xE8	; 232
    86a0:	23 e0       	ldi	r18, 0x03	; 3
    86a2:	92 07       	cpc	r25, r18
    86a4:	20 e0       	ldi	r18, 0x00	; 0
    86a6:	a2 07       	cpc	r26, r18
    86a8:	20 e0       	ldi	r18, 0x00	; 0
    86aa:	b2 07       	cpc	r27, r18
    86ac:	28 f4       	brcc	.+10     	; 0x86b8 <_ZN15RslModelSection13driveDisabledEv+0x34>
		digitalWrite(pin, HIGH);
    86ae:	8e 81       	ldd	r24, Y+6	; 0x06
    86b0:	61 e0       	ldi	r22, 0x01	; 1
    86b2:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    86b6:	04 c0       	rjmp	.+8      	; 0x86c0 <_ZN15RslModelSection13driveDisabledEv+0x3c>
	else
		digitalWrite(pin, LOW);
    86b8:	8e 81       	ldd	r24, Y+6	; 0x06
    86ba:	60 e0       	ldi	r22, 0x00	; 0
    86bc:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
}
    86c0:	df 91       	pop	r29
    86c2:	cf 91       	pop	r28
    86c4:	08 95       	ret

000086c6 <_ZN15RslModelSection13driveEStoppedEv>:
		}
	}
}

void RslModelSection::driveEStopped(){
	driveDisabled();
    86c6:	0e 94 42 43 	call	0x8684	; 0x8684 <_ZN15RslModelSection13driveDisabledEv>
}
    86ca:	08 95       	ret

000086cc <_ZN15RslModelSection15driveAutonomousEv>:
	if (millis() % 2000 < 1000)
		digitalWrite(pin, HIGH);
	else
		digitalWrite(pin, LOW);
}
void RslModelSection::driveAutonomous(){
    86cc:	cf 93       	push	r28
    86ce:	df 93       	push	r29
    86d0:	ec 01       	movw	r28, r24
	unsigned long m = millis();
    86d2:	0e 94 20 2a 	call	0x5440	; 0x5440 <millis>
	if (m % 1200 < 50)
    86d6:	20 eb       	ldi	r18, 0xB0	; 176
    86d8:	34 e0       	ldi	r19, 0x04	; 4
    86da:	40 e0       	ldi	r20, 0x00	; 0
    86dc:	50 e0       	ldi	r21, 0x00	; 0
    86de:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    86e2:	dc 01       	movw	r26, r24
    86e4:	cb 01       	movw	r24, r22
    86e6:	82 33       	cpi	r24, 0x32	; 50
    86e8:	91 05       	cpc	r25, r1
    86ea:	a1 05       	cpc	r26, r1
    86ec:	b1 05       	cpc	r27, r1
    86ee:	28 f4       	brcc	.+10     	; 0x86fa <_ZN15RslModelSection15driveAutonomousEv+0x2e>
		digitalWrite(pin, LOW);
    86f0:	8e 81       	ldd	r24, Y+6	; 0x06
    86f2:	60 e0       	ldi	r22, 0x00	; 0
    86f4:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    86f8:	32 c0       	rjmp	.+100    	; 0x875e <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 150)
    86fa:	86 39       	cpi	r24, 0x96	; 150
    86fc:	91 05       	cpc	r25, r1
    86fe:	a1 05       	cpc	r26, r1
    8700:	b1 05       	cpc	r27, r1
    8702:	28 f4       	brcc	.+10     	; 0x870e <_ZN15RslModelSection15driveAutonomousEv+0x42>
		digitalWrite(pin, HIGH);
    8704:	8e 81       	ldd	r24, Y+6	; 0x06
    8706:	61 e0       	ldi	r22, 0x01	; 1
    8708:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    870c:	28 c0       	rjmp	.+80     	; 0x875e <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 250)
    870e:	8a 3f       	cpi	r24, 0xFA	; 250
    8710:	91 05       	cpc	r25, r1
    8712:	a1 05       	cpc	r26, r1
    8714:	b1 05       	cpc	r27, r1
    8716:	28 f4       	brcc	.+10     	; 0x8722 <_ZN15RslModelSection15driveAutonomousEv+0x56>
		digitalWrite(pin, LOW);
    8718:	8e 81       	ldd	r24, Y+6	; 0x06
    871a:	60 e0       	ldi	r22, 0x00	; 0
    871c:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    8720:	1e c0       	rjmp	.+60     	; 0x875e <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 350)
    8722:	8e 35       	cpi	r24, 0x5E	; 94
    8724:	21 e0       	ldi	r18, 0x01	; 1
    8726:	92 07       	cpc	r25, r18
    8728:	20 e0       	ldi	r18, 0x00	; 0
    872a:	a2 07       	cpc	r26, r18
    872c:	20 e0       	ldi	r18, 0x00	; 0
    872e:	b2 07       	cpc	r27, r18
    8730:	28 f4       	brcc	.+10     	; 0x873c <_ZN15RslModelSection15driveAutonomousEv+0x70>
		digitalWrite(pin, HIGH);
    8732:	8e 81       	ldd	r24, Y+6	; 0x06
    8734:	61 e0       	ldi	r22, 0x01	; 1
    8736:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    873a:	11 c0       	rjmp	.+34     	; 0x875e <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 400)
    873c:	80 39       	cpi	r24, 0x90	; 144
    873e:	21 e0       	ldi	r18, 0x01	; 1
    8740:	92 07       	cpc	r25, r18
    8742:	20 e0       	ldi	r18, 0x00	; 0
    8744:	a2 07       	cpc	r26, r18
    8746:	20 e0       	ldi	r18, 0x00	; 0
    8748:	b2 07       	cpc	r27, r18
    874a:	28 f4       	brcc	.+10     	; 0x8756 <_ZN15RslModelSection15driveAutonomousEv+0x8a>
		digitalWrite(pin, LOW);
    874c:	8e 81       	ldd	r24, Y+6	; 0x06
    874e:	60 e0       	ldi	r22, 0x00	; 0
    8750:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
    8754:	04 c0       	rjmp	.+8      	; 0x875e <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else
		digitalWrite(pin, HIGH);
    8756:	8e 81       	ldd	r24, Y+6	; 0x06
    8758:	61 e0       	ldi	r22, 0x01	; 1
    875a:	0e 94 af 2c 	call	0x595e	; 0x595e <digitalWrite>
}
    875e:	df 91       	pop	r29
    8760:	cf 91       	pop	r28
    8762:	08 95       	ret

00008764 <_ZN15RslModelSection10driveLightEb>:
}
void RslModelSection::loop(bool safteyTripped){
	RobotModelSection::loop(safteyTripped);
	driveLight(safteyTripped);
}
void RslModelSection::driveLight(bool safteyTripped){
    8764:	cf 93       	push	r28
    8766:	df 93       	push	r29
    8768:	ec 01       	movw	r28, r24
	if (safteyTripped){
    876a:	66 23       	and	r22, r22
    876c:	29 f0       	breq	.+10     	; 0x8778 <_ZN15RslModelSection10driveLightEb+0x14>
		driveNoBeagleComm();
    876e:	0e 94 d4 42 	call	0x85a8	; 0x85a8 <_ZN15RslModelSection17driveNoBeagleCommEv>
		state = 255;
    8772:	8f ef       	ldi	r24, 0xFF	; 255
    8774:	88 87       	std	Y+8, r24	; 0x08
    8776:	27 c0       	rjmp	.+78     	; 0x87c6 <_ZN15RslModelSection10driveLightEb+0x62>
	}
	else{
		switch (state){
    8778:	88 85       	ldd	r24, Y+8	; 0x08
    877a:	82 30       	cpi	r24, 0x02	; 2
    877c:	c9 f0       	breq	.+50     	; 0x87b0 <_ZN15RslModelSection10driveLightEb+0x4c>
    877e:	83 30       	cpi	r24, 0x03	; 3
    8780:	28 f4       	brcc	.+10     	; 0x878c <_ZN15RslModelSection10driveLightEb+0x28>
    8782:	88 23       	and	r24, r24
    8784:	69 f0       	breq	.+26     	; 0x87a0 <_ZN15RslModelSection10driveLightEb+0x3c>
    8786:	81 30       	cpi	r24, 0x01	; 1
    8788:	f1 f4       	brne	.+60     	; 0x87c6 <_ZN15RslModelSection10driveLightEb+0x62>
    878a:	0e c0       	rjmp	.+28     	; 0x87a8 <_ZN15RslModelSection10driveLightEb+0x44>
    878c:	84 30       	cpi	r24, 0x04	; 4
    878e:	c1 f0       	breq	.+48     	; 0x87c0 <_ZN15RslModelSection10driveLightEb+0x5c>
    8790:	84 30       	cpi	r24, 0x04	; 4
    8792:	90 f0       	brcs	.+36     	; 0x87b8 <_ZN15RslModelSection10driveLightEb+0x54>
    8794:	8f 3f       	cpi	r24, 0xFF	; 255
    8796:	b9 f4       	brne	.+46     	; 0x87c6 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_NOSTATE:
			driveNoState();
    8798:	ce 01       	movw	r24, r28
    879a:	0e 94 b6 42 	call	0x856c	; 0x856c <_ZN15RslModelSection12driveNoStateEv>
			break;
    879e:	13 c0       	rjmp	.+38     	; 0x87c6 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_NOFRCCOMM:
			driveNoFrcComm();
    87a0:	ce 01       	movw	r24, r28
    87a2:	0e 94 f2 42 	call	0x85e4	; 0x85e4 <_ZN15RslModelSection14driveNoFrcCommEv>
			break;
    87a6:	0f c0       	rjmp	.+30     	; 0x87c6 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_ENABLED:
			driveEnabled();
    87a8:	ce 01       	movw	r24, r28
    87aa:	0e 94 10 43 	call	0x8620	; 0x8620 <_ZN15RslModelSection12driveEnabledEv>
			break;
    87ae:	0b c0       	rjmp	.+22     	; 0x87c6 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_DISABLED:
			driveDisabled();
    87b0:	ce 01       	movw	r24, r28
    87b2:	0e 94 42 43 	call	0x8684	; 0x8684 <_ZN15RslModelSection13driveDisabledEv>
			break;
    87b6:	07 c0       	rjmp	.+14     	; 0x87c6 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_AUTONOMOUS:
			driveAutonomous();
    87b8:	ce 01       	movw	r24, r28
    87ba:	0e 94 66 43 	call	0x86cc	; 0x86cc <_ZN15RslModelSection15driveAutonomousEv>
			break;
    87be:	03 c0       	rjmp	.+6      	; 0x87c6 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_ESTOPPED:
			driveEStopped();
    87c0:	ce 01       	movw	r24, r28
    87c2:	0e 94 63 43 	call	0x86c6	; 0x86c6 <_ZN15RslModelSection13driveEStoppedEv>
			break;
		}
	}
}
    87c6:	df 91       	pop	r29
    87c8:	cf 91       	pop	r28
    87ca:	08 95       	ret

000087cc <_ZN15RslModelSection4loopEb>:
	state = data[offset++];
}
void RslModelSection::getStatus(unsigned char data[], unsigned int *offset){
	//RSL has no status
}
void RslModelSection::loop(bool safteyTripped){
    87cc:	1f 93       	push	r17
    87ce:	cf 93       	push	r28
    87d0:	df 93       	push	r29
    87d2:	ec 01       	movw	r28, r24
    87d4:	16 2f       	mov	r17, r22
	RobotModelSection::loop(safteyTripped);
    87d6:	0e 94 61 42 	call	0x84c2	; 0x84c2 <_ZN17RobotModelSection4loopEb>
	driveLight(safteyTripped);
    87da:	ce 01       	movw	r24, r28
    87dc:	61 2f       	mov	r22, r17
    87de:	0e 94 b2 43 	call	0x8764	; 0x8764 <_ZN15RslModelSection10driveLightEb>
}
    87e2:	df 91       	pop	r29
    87e4:	cf 91       	pop	r28
    87e6:	1f 91       	pop	r17
    87e8:	08 95       	ret

000087ea <_Z9readUInt8PhPj>:
	}
	Serial.print("ReadBytes: Offset:");
	Serial.println(*offset);
}*/

unsigned char readUInt8(unsigned char data[], unsigned int *offset){
    87ea:	fb 01       	movw	r30, r22
	unsigned char out = data[*offset];
    87ec:	20 81       	ld	r18, Z
    87ee:	31 81       	ldd	r19, Z+1	; 0x01
    87f0:	dc 01       	movw	r26, r24
    87f2:	a2 0f       	add	r26, r18
    87f4:	b3 1f       	adc	r27, r19
    87f6:	8c 91       	ld	r24, X
	*offset += 1;
    87f8:	2f 5f       	subi	r18, 0xFF	; 255
    87fa:	3f 4f       	sbci	r19, 0xFF	; 255
    87fc:	31 83       	std	Z+1, r19	; 0x01
    87fe:	20 83       	st	Z, r18
	return out;
}
    8800:	08 95       	ret

00008802 <_Z10readUInt16PhPj>:
unsigned short readUInt16(unsigned char data[], unsigned int *offset){
    8802:	db 01       	movw	r26, r22
	unsigned short out = (data[*offset + 1] << 8) + (data[*offset]);
    8804:	2d 91       	ld	r18, X+
    8806:	3c 91       	ld	r19, X
    8808:	11 97       	sbiw	r26, 0x01	; 1
    880a:	fc 01       	movw	r30, r24
    880c:	e2 0f       	add	r30, r18
    880e:	f3 1f       	adc	r31, r19
    8810:	91 81       	ldd	r25, Z+1	; 0x01
    8812:	80 e0       	ldi	r24, 0x00	; 0
    8814:	40 81       	ld	r20, Z
    8816:	84 0f       	add	r24, r20
    8818:	91 1d       	adc	r25, r1
	/*unsigned char byteCount = 2;
	for (int i = 0; i < byteCount; i++){
		out += data[*offset + byteCount - i] << (8 * i);
	}*/
	*offset += 2;
    881a:	2e 5f       	subi	r18, 0xFE	; 254
    881c:	3f 4f       	sbci	r19, 0xFF	; 255
    881e:	11 96       	adiw	r26, 0x01	; 1
    8820:	3c 93       	st	X, r19
    8822:	2e 93       	st	-X, r18
	return out;
}
    8824:	08 95       	ret

00008826 <_Z10readUInt32PhPj>:
unsigned long readUInt32(unsigned char data[], unsigned int *offset){
    8826:	0f 93       	push	r16
    8828:	1f 93       	push	r17
    882a:	cf 93       	push	r28
    882c:	df 93       	push	r29
    882e:	eb 01       	movw	r28, r22
	unsigned long out =
	((unsigned long)data[*offset + 3] << 24) +
    8830:	48 81       	ld	r20, Y
    8832:	59 81       	ldd	r21, Y+1	; 0x01
    8834:	fc 01       	movw	r30, r24
    8836:	e4 0f       	add	r30, r20
    8838:	f5 1f       	adc	r31, r21
	((unsigned long)data[*offset + 2] << 16) +
	((unsigned long)data[*offset + 1] << 8) +
	((unsigned long)data[*offset]);
    883a:	83 81       	ldd	r24, Z+3	; 0x03
    883c:	90 e0       	ldi	r25, 0x00	; 0
    883e:	a0 e0       	ldi	r26, 0x00	; 0
    8840:	b0 e0       	ldi	r27, 0x00	; 0
    8842:	b8 2f       	mov	r27, r24
    8844:	aa 27       	eor	r26, r26
    8846:	99 27       	eor	r25, r25
    8848:	88 27       	eor	r24, r24
    884a:	02 81       	ldd	r16, Z+2	; 0x02
    884c:	10 e0       	ldi	r17, 0x00	; 0
    884e:	20 e0       	ldi	r18, 0x00	; 0
    8850:	30 e0       	ldi	r19, 0x00	; 0
    8852:	98 01       	movw	r18, r16
    8854:	11 27       	eor	r17, r17
    8856:	00 27       	eor	r16, r16
    8858:	08 0f       	add	r16, r24
    885a:	19 1f       	adc	r17, r25
    885c:	2a 1f       	adc	r18, r26
    885e:	3b 1f       	adc	r19, r27
    8860:	80 81       	ld	r24, Z
    8862:	08 0f       	add	r16, r24
    8864:	11 1d       	adc	r17, r1
    8866:	21 1d       	adc	r18, r1
    8868:	31 1d       	adc	r19, r1
    886a:	81 81       	ldd	r24, Z+1	; 0x01
    886c:	90 e0       	ldi	r25, 0x00	; 0
    886e:	a0 e0       	ldi	r26, 0x00	; 0
    8870:	b0 e0       	ldi	r27, 0x00	; 0
    8872:	ba 2f       	mov	r27, r26
    8874:	a9 2f       	mov	r26, r25
    8876:	98 2f       	mov	r25, r24
    8878:	88 27       	eor	r24, r24
    887a:	08 0f       	add	r16, r24
    887c:	19 1f       	adc	r17, r25
    887e:	2a 1f       	adc	r18, r26
    8880:	3b 1f       	adc	r19, r27
	/*unsigned char byteCount = 2;
	for (int i = 0; i < byteCount; i++){
		out += data[*offset + byteCount - i] << (8 * i);
	}*/
	*offset += 4;
    8882:	4c 5f       	subi	r20, 0xFC	; 252
    8884:	5f 4f       	sbci	r21, 0xFF	; 255
    8886:	59 83       	std	Y+1, r21	; 0x01
    8888:	48 83       	st	Y, r20
	return out;
}
    888a:	60 2f       	mov	r22, r16
    888c:	71 2f       	mov	r23, r17
    888e:	82 2f       	mov	r24, r18
    8890:	93 2f       	mov	r25, r19
    8892:	df 91       	pop	r29
    8894:	cf 91       	pop	r28
    8896:	1f 91       	pop	r17
    8898:	0f 91       	pop	r16
    889a:	08 95       	ret

0000889c <_Z10readUInt64PhPj>:
unsigned long long readUInt64(unsigned char data[], unsigned int *offset){
    889c:	2f 92       	push	r2
    889e:	3f 92       	push	r3
    88a0:	4f 92       	push	r4
    88a2:	5f 92       	push	r5
    88a4:	6f 92       	push	r6
    88a6:	7f 92       	push	r7
    88a8:	8f 92       	push	r8
    88aa:	9f 92       	push	r9
    88ac:	af 92       	push	r10
    88ae:	bf 92       	push	r11
    88b0:	cf 92       	push	r12
    88b2:	df 92       	push	r13
    88b4:	ef 92       	push	r14
    88b6:	ff 92       	push	r15
    88b8:	0f 93       	push	r16
    88ba:	1f 93       	push	r17
    88bc:	cf 93       	push	r28
    88be:	df 93       	push	r29
    88c0:	cd b7       	in	r28, 0x3d	; 61
    88c2:	de b7       	in	r29, 0x3e	; 62
    88c4:	2b 97       	sbiw	r28, 0x0b	; 11
    88c6:	0f b6       	in	r0, 0x3f	; 63
    88c8:	f8 94       	cli
    88ca:	de bf       	out	0x3e, r29	; 62
    88cc:	0f be       	out	0x3f, r0	; 63
    88ce:	cd bf       	out	0x3d, r28	; 61
    88d0:	9d 83       	std	Y+5, r25	; 0x05
    88d2:	8c 83       	std	Y+4, r24	; 0x04
    88d4:	79 87       	std	Y+9, r23	; 0x09
    88d6:	68 87       	std	Y+8, r22	; 0x08
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
    88d8:	db 01       	movw	r26, r22
    88da:	0d 90       	ld	r0, X+
    88dc:	bc 91       	ld	r27, X
    88de:	a0 2d       	mov	r26, r0
    88e0:	bb 83       	std	Y+3, r27	; 0x03
    88e2:	aa 83       	std	Y+2, r26	; 0x02
    88e4:	6c 01       	movw	r12, r24
    88e6:	ca 0e       	add	r12, r26
    88e8:	db 1e       	adc	r13, r27
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    88ea:	f6 01       	movw	r30, r12
    88ec:	27 81       	ldd	r18, Z+7	; 0x07
    88ee:	30 e0       	ldi	r19, 0x00	; 0
    88f0:	40 e0       	ldi	r20, 0x00	; 0
    88f2:	50 e0       	ldi	r21, 0x00	; 0
    88f4:	60 e0       	ldi	r22, 0x00	; 0
    88f6:	70 e0       	ldi	r23, 0x00	; 0
    88f8:	80 e0       	ldi	r24, 0x00	; 0
    88fa:	90 e0       	ldi	r25, 0x00	; 0
    88fc:	08 e3       	ldi	r16, 0x38	; 56
    88fe:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <__ashldi3>
    8902:	f2 2e       	mov	r15, r18
    8904:	13 2f       	mov	r17, r19
    8906:	e4 2e       	mov	r14, r20
    8908:	b5 2e       	mov	r11, r21
    890a:	a6 2e       	mov	r10, r22
    890c:	97 2e       	mov	r9, r23
    890e:	88 2e       	mov	r8, r24
    8910:	69 2e       	mov	r6, r25
    8912:	d6 01       	movw	r26, r12
    8914:	16 96       	adiw	r26, 0x06	; 6
    8916:	2c 91       	ld	r18, X
    8918:	30 e0       	ldi	r19, 0x00	; 0
    891a:	40 e0       	ldi	r20, 0x00	; 0
    891c:	50 e0       	ldi	r21, 0x00	; 0
    891e:	60 e0       	ldi	r22, 0x00	; 0
    8920:	70 e0       	ldi	r23, 0x00	; 0
    8922:	80 e0       	ldi	r24, 0x00	; 0
    8924:	90 e0       	ldi	r25, 0x00	; 0
    8926:	00 e3       	ldi	r16, 0x30	; 48
    8928:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <__ashldi3>
    892c:	2f 0d       	add	r18, r15
    892e:	e1 e0       	ldi	r30, 0x01	; 1
    8930:	2f 15       	cp	r18, r15
    8932:	08 f0       	brcs	.+2      	; 0x8936 <_Z10readUInt64PhPj+0x9a>
    8934:	e0 e0       	ldi	r30, 0x00	; 0
    8936:	31 0f       	add	r19, r17
    8938:	f1 e0       	ldi	r31, 0x01	; 1
    893a:	31 17       	cp	r19, r17
    893c:	08 f0       	brcs	.+2      	; 0x8940 <_Z10readUInt64PhPj+0xa4>
    893e:	f0 e0       	ldi	r31, 0x00	; 0
    8940:	3e 2e       	mov	r3, r30
    8942:	33 0e       	add	r3, r19
    8944:	e1 e0       	ldi	r30, 0x01	; 1
    8946:	33 16       	cp	r3, r19
    8948:	08 f0       	brcs	.+2      	; 0x894c <_Z10readUInt64PhPj+0xb0>
    894a:	e0 e0       	ldi	r30, 0x00	; 0
    894c:	fe 2b       	or	r31, r30
    894e:	33 2d       	mov	r19, r3
    8950:	4e 0d       	add	r20, r14
    8952:	e1 e0       	ldi	r30, 0x01	; 1
    8954:	4e 15       	cp	r20, r14
    8956:	08 f0       	brcs	.+2      	; 0x895a <_Z10readUInt64PhPj+0xbe>
    8958:	e0 e0       	ldi	r30, 0x00	; 0
    895a:	2f 2e       	mov	r2, r31
    895c:	24 0e       	add	r2, r20
    895e:	f1 e0       	ldi	r31, 0x01	; 1
    8960:	24 16       	cp	r2, r20
    8962:	08 f0       	brcs	.+2      	; 0x8966 <_Z10readUInt64PhPj+0xca>
    8964:	f0 e0       	ldi	r31, 0x00	; 0
    8966:	ef 2b       	or	r30, r31
    8968:	42 2d       	mov	r20, r2
    896a:	5b 0d       	add	r21, r11
    896c:	f1 e0       	ldi	r31, 0x01	; 1
    896e:	5b 15       	cp	r21, r11
    8970:	08 f0       	brcs	.+2      	; 0x8974 <_Z10readUInt64PhPj+0xd8>
    8972:	f0 e0       	ldi	r31, 0x00	; 0
    8974:	fe 2e       	mov	r15, r30
    8976:	f5 0e       	add	r15, r21
    8978:	e1 e0       	ldi	r30, 0x01	; 1
    897a:	f5 16       	cp	r15, r21
    897c:	08 f0       	brcs	.+2      	; 0x8980 <_Z10readUInt64PhPj+0xe4>
    897e:	e0 e0       	ldi	r30, 0x00	; 0
    8980:	fe 2b       	or	r31, r30
    8982:	5f 2d       	mov	r21, r15
    8984:	6a 0d       	add	r22, r10
    8986:	e1 e0       	ldi	r30, 0x01	; 1
    8988:	6a 15       	cp	r22, r10
    898a:	08 f0       	brcs	.+2      	; 0x898e <_Z10readUInt64PhPj+0xf2>
    898c:	e0 e0       	ldi	r30, 0x00	; 0
    898e:	ef 2e       	mov	r14, r31
    8990:	e6 0e       	add	r14, r22
    8992:	f1 e0       	ldi	r31, 0x01	; 1
    8994:	e6 16       	cp	r14, r22
    8996:	08 f0       	brcs	.+2      	; 0x899a <_Z10readUInt64PhPj+0xfe>
    8998:	f0 e0       	ldi	r31, 0x00	; 0
    899a:	ef 2b       	or	r30, r31
    899c:	6e 2d       	mov	r22, r14
    899e:	79 0d       	add	r23, r9
    89a0:	f1 e0       	ldi	r31, 0x01	; 1
    89a2:	79 15       	cp	r23, r9
    89a4:	08 f0       	brcs	.+2      	; 0x89a8 <_Z10readUInt64PhPj+0x10c>
    89a6:	f0 e0       	ldi	r31, 0x00	; 0
    89a8:	de 2e       	mov	r13, r30
    89aa:	d7 0e       	add	r13, r23
    89ac:	e1 e0       	ldi	r30, 0x01	; 1
    89ae:	d7 16       	cp	r13, r23
    89b0:	08 f0       	brcs	.+2      	; 0x89b4 <_Z10readUInt64PhPj+0x118>
    89b2:	e0 e0       	ldi	r30, 0x00	; 0
    89b4:	fe 2b       	or	r31, r30
    89b6:	7d 2d       	mov	r23, r13
    89b8:	88 0d       	add	r24, r8
    89ba:	e1 e0       	ldi	r30, 0x01	; 1
    89bc:	88 15       	cp	r24, r8
    89be:	08 f0       	brcs	.+2      	; 0x89c2 <_Z10readUInt64PhPj+0x126>
    89c0:	e0 e0       	ldi	r30, 0x00	; 0
    89c2:	cf 2e       	mov	r12, r31
    89c4:	c8 0e       	add	r12, r24
    89c6:	f1 e0       	ldi	r31, 0x01	; 1
    89c8:	c8 16       	cp	r12, r24
    89ca:	08 f0       	brcs	.+2      	; 0x89ce <_Z10readUInt64PhPj+0x132>
    89cc:	f0 e0       	ldi	r31, 0x00	; 0
    89ce:	ef 2b       	or	r30, r31
    89d0:	8c 2d       	mov	r24, r12
    89d2:	96 0d       	add	r25, r6
    89d4:	9e 0f       	add	r25, r30
    89d6:	ec 81       	ldd	r30, Y+4	; 0x04
    89d8:	fd 81       	ldd	r31, Y+5	; 0x05
    89da:	aa 81       	ldd	r26, Y+2	; 0x02
    89dc:	bb 81       	ldd	r27, Y+3	; 0x03
    89de:	ea 0f       	add	r30, r26
    89e0:	fb 1f       	adc	r31, r27
    89e2:	70 80       	ld	r7, Z
    89e4:	72 0e       	add	r7, r18
    89e6:	f1 e0       	ldi	r31, 0x01	; 1
    89e8:	72 16       	cp	r7, r18
    89ea:	08 f0       	brcs	.+2      	; 0x89ee <_Z10readUInt64PhPj+0x152>
    89ec:	f0 e0       	ldi	r31, 0x00	; 0
    89ee:	e1 e0       	ldi	r30, 0x01	; 1
    89f0:	33 16       	cp	r3, r19
    89f2:	08 f0       	brcs	.+2      	; 0x89f6 <_Z10readUInt64PhPj+0x15a>
    89f4:	e0 e0       	ldi	r30, 0x00	; 0
    89f6:	bf 2e       	mov	r11, r31
    89f8:	b3 0c       	add	r11, r3
    89fa:	21 e0       	ldi	r18, 0x01	; 1
    89fc:	b3 14       	cp	r11, r3
    89fe:	08 f0       	brcs	.+2      	; 0x8a02 <_Z10readUInt64PhPj+0x166>
    8a00:	20 e0       	ldi	r18, 0x00	; 0
    8a02:	e2 2b       	or	r30, r18
    8a04:	3b 2c       	mov	r3, r11
    8a06:	21 e0       	ldi	r18, 0x01	; 1
    8a08:	24 16       	cp	r2, r20
    8a0a:	08 f0       	brcs	.+2      	; 0x8a0e <_Z10readUInt64PhPj+0x172>
    8a0c:	20 e0       	ldi	r18, 0x00	; 0
    8a0e:	ae 2e       	mov	r10, r30
    8a10:	a2 0c       	add	r10, r2
    8a12:	31 e0       	ldi	r19, 0x01	; 1
    8a14:	a2 14       	cp	r10, r2
    8a16:	08 f0       	brcs	.+2      	; 0x8a1a <_Z10readUInt64PhPj+0x17e>
    8a18:	30 e0       	ldi	r19, 0x00	; 0
    8a1a:	23 2b       	or	r18, r19
    8a1c:	2a 2c       	mov	r2, r10
    8a1e:	31 e0       	ldi	r19, 0x01	; 1
    8a20:	f5 16       	cp	r15, r21
    8a22:	08 f0       	brcs	.+2      	; 0x8a26 <_Z10readUInt64PhPj+0x18a>
    8a24:	30 e0       	ldi	r19, 0x00	; 0
    8a26:	92 2e       	mov	r9, r18
    8a28:	9f 0c       	add	r9, r15
    8a2a:	21 e0       	ldi	r18, 0x01	; 1
    8a2c:	9f 14       	cp	r9, r15
    8a2e:	08 f0       	brcs	.+2      	; 0x8a32 <_Z10readUInt64PhPj+0x196>
    8a30:	20 e0       	ldi	r18, 0x00	; 0
    8a32:	32 2b       	or	r19, r18
    8a34:	f9 2c       	mov	r15, r9
    8a36:	21 e0       	ldi	r18, 0x01	; 1
    8a38:	e6 16       	cp	r14, r22
    8a3a:	08 f0       	brcs	.+2      	; 0x8a3e <_Z10readUInt64PhPj+0x1a2>
    8a3c:	20 e0       	ldi	r18, 0x00	; 0
    8a3e:	83 2e       	mov	r8, r19
    8a40:	8e 0c       	add	r8, r14
    8a42:	31 e0       	ldi	r19, 0x01	; 1
    8a44:	8e 14       	cp	r8, r14
    8a46:	08 f0       	brcs	.+2      	; 0x8a4a <_Z10readUInt64PhPj+0x1ae>
    8a48:	30 e0       	ldi	r19, 0x00	; 0
    8a4a:	23 2b       	or	r18, r19
    8a4c:	e8 2c       	mov	r14, r8
    8a4e:	31 e0       	ldi	r19, 0x01	; 1
    8a50:	d7 16       	cp	r13, r23
    8a52:	08 f0       	brcs	.+2      	; 0x8a56 <_Z10readUInt64PhPj+0x1ba>
    8a54:	30 e0       	ldi	r19, 0x00	; 0
    8a56:	52 2e       	mov	r5, r18
    8a58:	5d 0c       	add	r5, r13
    8a5a:	21 e0       	ldi	r18, 0x01	; 1
    8a5c:	5d 14       	cp	r5, r13
    8a5e:	08 f0       	brcs	.+2      	; 0x8a62 <_Z10readUInt64PhPj+0x1c6>
    8a60:	20 e0       	ldi	r18, 0x00	; 0
    8a62:	32 2b       	or	r19, r18
    8a64:	d5 2c       	mov	r13, r5
    8a66:	21 e0       	ldi	r18, 0x01	; 1
    8a68:	c8 16       	cp	r12, r24
    8a6a:	08 f0       	brcs	.+2      	; 0x8a6e <_Z10readUInt64PhPj+0x1d2>
    8a6c:	20 e0       	ldi	r18, 0x00	; 0
    8a6e:	43 2e       	mov	r4, r19
    8a70:	4c 0c       	add	r4, r12
    8a72:	81 e0       	ldi	r24, 0x01	; 1
    8a74:	4c 14       	cp	r4, r12
    8a76:	08 f0       	brcs	.+2      	; 0x8a7a <_Z10readUInt64PhPj+0x1de>
    8a78:	80 e0       	ldi	r24, 0x00	; 0
    8a7a:	28 2b       	or	r18, r24
    8a7c:	c4 2c       	mov	r12, r4
    8a7e:	62 2e       	mov	r6, r18
    8a80:	69 0e       	add	r6, r25
}
unsigned long long readUInt64(unsigned char data[], unsigned int *offset){
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
    8a82:	ec 81       	ldd	r30, Y+4	; 0x04
    8a84:	fd 81       	ldd	r31, Y+5	; 0x05
    8a86:	2a 81       	ldd	r18, Y+2	; 0x02
    8a88:	3b 81       	ldd	r19, Y+3	; 0x03
    8a8a:	e2 0f       	add	r30, r18
    8a8c:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    8a8e:	25 81       	ldd	r18, Z+5	; 0x05
    8a90:	30 e0       	ldi	r19, 0x00	; 0
    8a92:	40 e0       	ldi	r20, 0x00	; 0
    8a94:	50 e0       	ldi	r21, 0x00	; 0
    8a96:	60 e0       	ldi	r22, 0x00	; 0
    8a98:	70 e0       	ldi	r23, 0x00	; 0
    8a9a:	80 e0       	ldi	r24, 0x00	; 0
    8a9c:	90 e0       	ldi	r25, 0x00	; 0
    8a9e:	08 e2       	ldi	r16, 0x28	; 40
    8aa0:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <__ashldi3>
    8aa4:	27 0d       	add	r18, r7
    8aa6:	2e 83       	std	Y+6, r18	; 0x06
    8aa8:	11 e0       	ldi	r17, 0x01	; 1
    8aaa:	27 15       	cp	r18, r7
    8aac:	08 f0       	brcs	.+2      	; 0x8ab0 <_Z10readUInt64PhPj+0x214>
    8aae:	10 e0       	ldi	r17, 0x00	; 0
    8ab0:	b3 0e       	add	r11, r19
    8ab2:	21 e0       	ldi	r18, 0x01	; 1
    8ab4:	b3 14       	cp	r11, r3
    8ab6:	08 f0       	brcs	.+2      	; 0x8aba <_Z10readUInt64PhPj+0x21e>
    8ab8:	20 e0       	ldi	r18, 0x00	; 0
    8aba:	1b 0d       	add	r17, r11
    8abc:	31 e0       	ldi	r19, 0x01	; 1
    8abe:	1b 15       	cp	r17, r11
    8ac0:	08 f0       	brcs	.+2      	; 0x8ac4 <_Z10readUInt64PhPj+0x228>
    8ac2:	30 e0       	ldi	r19, 0x00	; 0
    8ac4:	23 2b       	or	r18, r19
    8ac6:	b1 2e       	mov	r11, r17
    8ac8:	a4 0e       	add	r10, r20
    8aca:	31 e0       	ldi	r19, 0x01	; 1
    8acc:	a2 14       	cp	r10, r2
    8ace:	08 f0       	brcs	.+2      	; 0x8ad2 <_Z10readUInt64PhPj+0x236>
    8ad0:	30 e0       	ldi	r19, 0x00	; 0
    8ad2:	2a 0d       	add	r18, r10
    8ad4:	29 83       	std	Y+1, r18	; 0x01
    8ad6:	21 e0       	ldi	r18, 0x01	; 1
    8ad8:	49 81       	ldd	r20, Y+1	; 0x01
    8ada:	4a 15       	cp	r20, r10
    8adc:	08 f0       	brcs	.+2      	; 0x8ae0 <_Z10readUInt64PhPj+0x244>
    8ade:	20 e0       	ldi	r18, 0x00	; 0
    8ae0:	32 2b       	or	r19, r18
    8ae2:	a9 80       	ldd	r10, Y+1	; 0x01
    8ae4:	95 0e       	add	r9, r21
    8ae6:	21 e0       	ldi	r18, 0x01	; 1
    8ae8:	9f 14       	cp	r9, r15
    8aea:	08 f0       	brcs	.+2      	; 0x8aee <_Z10readUInt64PhPj+0x252>
    8aec:	20 e0       	ldi	r18, 0x00	; 0
    8aee:	23 2e       	mov	r2, r19
    8af0:	29 0c       	add	r2, r9
    8af2:	31 e0       	ldi	r19, 0x01	; 1
    8af4:	29 14       	cp	r2, r9
    8af6:	08 f0       	brcs	.+2      	; 0x8afa <_Z10readUInt64PhPj+0x25e>
    8af8:	30 e0       	ldi	r19, 0x00	; 0
    8afa:	23 2b       	or	r18, r19
    8afc:	92 2c       	mov	r9, r2
    8afe:	86 0e       	add	r8, r22
    8b00:	31 e0       	ldi	r19, 0x01	; 1
    8b02:	8e 14       	cp	r8, r14
    8b04:	08 f0       	brcs	.+2      	; 0x8b08 <_Z10readUInt64PhPj+0x26c>
    8b06:	30 e0       	ldi	r19, 0x00	; 0
    8b08:	32 2e       	mov	r3, r18
    8b0a:	38 0c       	add	r3, r8
    8b0c:	21 e0       	ldi	r18, 0x01	; 1
    8b0e:	38 14       	cp	r3, r8
    8b10:	08 f0       	brcs	.+2      	; 0x8b14 <_Z10readUInt64PhPj+0x278>
    8b12:	20 e0       	ldi	r18, 0x00	; 0
    8b14:	32 2b       	or	r19, r18
    8b16:	83 2c       	mov	r8, r3
    8b18:	57 0e       	add	r5, r23
    8b1a:	5a 86       	std	Y+10, r5	; 0x0a
    8b1c:	21 e0       	ldi	r18, 0x01	; 1
    8b1e:	5d 14       	cp	r5, r13
    8b20:	08 f0       	brcs	.+2      	; 0x8b24 <_Z10readUInt64PhPj+0x288>
    8b22:	20 e0       	ldi	r18, 0x00	; 0
    8b24:	7a 84       	ldd	r7, Y+10	; 0x0a
    8b26:	73 0e       	add	r7, r19
    8b28:	31 e0       	ldi	r19, 0x01	; 1
    8b2a:	aa 85       	ldd	r26, Y+10	; 0x0a
    8b2c:	7a 16       	cp	r7, r26
    8b2e:	08 f0       	brcs	.+2      	; 0x8b32 <_Z10readUInt64PhPj+0x296>
    8b30:	30 e0       	ldi	r19, 0x00	; 0
    8b32:	23 2b       	or	r18, r19
    8b34:	7a 86       	std	Y+10, r7	; 0x0a
    8b36:	48 0e       	add	r4, r24
    8b38:	4b 86       	std	Y+11, r4	; 0x0b
    8b3a:	81 e0       	ldi	r24, 0x01	; 1
    8b3c:	4c 14       	cp	r4, r12
    8b3e:	08 f0       	brcs	.+2      	; 0x8b42 <_Z10readUInt64PhPj+0x2a6>
    8b40:	80 e0       	ldi	r24, 0x00	; 0
    8b42:	cb 84       	ldd	r12, Y+11	; 0x0b
    8b44:	c2 0e       	add	r12, r18
    8b46:	21 e0       	ldi	r18, 0x01	; 1
    8b48:	bb 85       	ldd	r27, Y+11	; 0x0b
    8b4a:	cb 16       	cp	r12, r27
    8b4c:	08 f0       	brcs	.+2      	; 0x8b50 <_Z10readUInt64PhPj+0x2b4>
    8b4e:	20 e0       	ldi	r18, 0x00	; 0
    8b50:	82 2b       	or	r24, r18
    8b52:	cb 86       	std	Y+11, r12	; 0x0b
    8b54:	69 0e       	add	r6, r25
    8b56:	68 0e       	add	r6, r24
unsigned long long readUInt64(unsigned char data[], unsigned int *offset){
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
    8b58:	ec 81       	ldd	r30, Y+4	; 0x04
    8b5a:	fd 81       	ldd	r31, Y+5	; 0x05
    8b5c:	2a 81       	ldd	r18, Y+2	; 0x02
    8b5e:	3b 81       	ldd	r19, Y+3	; 0x03
    8b60:	e2 0f       	add	r30, r18
    8b62:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    8b64:	24 81       	ldd	r18, Z+4	; 0x04
    8b66:	30 e0       	ldi	r19, 0x00	; 0
    8b68:	40 e0       	ldi	r20, 0x00	; 0
    8b6a:	50 e0       	ldi	r21, 0x00	; 0
    8b6c:	60 e0       	ldi	r22, 0x00	; 0
    8b6e:	70 e0       	ldi	r23, 0x00	; 0
    8b70:	80 e0       	ldi	r24, 0x00	; 0
    8b72:	90 e0       	ldi	r25, 0x00	; 0
    8b74:	00 e2       	ldi	r16, 0x20	; 32
    8b76:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <__ashldi3>
    8b7a:	ae 81       	ldd	r26, Y+6	; 0x06
    8b7c:	a2 0f       	add	r26, r18
    8b7e:	af 83       	std	Y+7, r26	; 0x07
    8b80:	21 e0       	ldi	r18, 0x01	; 1
    8b82:	be 81       	ldd	r27, Y+6	; 0x06
    8b84:	ab 17       	cp	r26, r27
    8b86:	08 f0       	brcs	.+2      	; 0x8b8a <_Z10readUInt64PhPj+0x2ee>
    8b88:	20 e0       	ldi	r18, 0x00	; 0
    8b8a:	13 0f       	add	r17, r19
    8b8c:	31 e0       	ldi	r19, 0x01	; 1
    8b8e:	1b 15       	cp	r17, r11
    8b90:	08 f0       	brcs	.+2      	; 0x8b94 <_Z10readUInt64PhPj+0x2f8>
    8b92:	30 e0       	ldi	r19, 0x00	; 0
    8b94:	e2 2e       	mov	r14, r18
    8b96:	e1 0e       	add	r14, r17
    8b98:	21 e0       	ldi	r18, 0x01	; 1
    8b9a:	e1 16       	cp	r14, r17
    8b9c:	08 f0       	brcs	.+2      	; 0x8ba0 <_Z10readUInt64PhPj+0x304>
    8b9e:	20 e0       	ldi	r18, 0x00	; 0
    8ba0:	32 2b       	or	r19, r18
    8ba2:	1e 2d       	mov	r17, r14
    8ba4:	f9 80       	ldd	r15, Y+1	; 0x01
    8ba6:	f4 0e       	add	r15, r20
    8ba8:	21 e0       	ldi	r18, 0x01	; 1
    8baa:	fa 14       	cp	r15, r10
    8bac:	08 f0       	brcs	.+2      	; 0x8bb0 <_Z10readUInt64PhPj+0x314>
    8bae:	20 e0       	ldi	r18, 0x00	; 0
    8bb0:	3f 0d       	add	r19, r15
    8bb2:	39 83       	std	Y+1, r19	; 0x01
    8bb4:	31 e0       	ldi	r19, 0x01	; 1
    8bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    8bb8:	ef 15       	cp	r30, r15
    8bba:	08 f0       	brcs	.+2      	; 0x8bbe <_Z10readUInt64PhPj+0x322>
    8bbc:	30 e0       	ldi	r19, 0x00	; 0
    8bbe:	23 2b       	or	r18, r19
    8bc0:	f9 80       	ldd	r15, Y+1	; 0x01
    8bc2:	d2 2c       	mov	r13, r2
    8bc4:	d5 0e       	add	r13, r21
    8bc6:	31 e0       	ldi	r19, 0x01	; 1
    8bc8:	d9 14       	cp	r13, r9
    8bca:	08 f0       	brcs	.+2      	; 0x8bce <_Z10readUInt64PhPj+0x332>
    8bcc:	30 e0       	ldi	r19, 0x00	; 0
    8bce:	42 2e       	mov	r4, r18
    8bd0:	4d 0c       	add	r4, r13
    8bd2:	21 e0       	ldi	r18, 0x01	; 1
    8bd4:	4d 14       	cp	r4, r13
    8bd6:	08 f0       	brcs	.+2      	; 0x8bda <_Z10readUInt64PhPj+0x33e>
    8bd8:	20 e0       	ldi	r18, 0x00	; 0
    8bda:	32 2b       	or	r19, r18
    8bdc:	d4 2c       	mov	r13, r4
    8bde:	b3 2c       	mov	r11, r3
    8be0:	b6 0e       	add	r11, r22
    8be2:	21 e0       	ldi	r18, 0x01	; 1
    8be4:	b8 14       	cp	r11, r8
    8be6:	08 f0       	brcs	.+2      	; 0x8bea <_Z10readUInt64PhPj+0x34e>
    8be8:	20 e0       	ldi	r18, 0x00	; 0
    8bea:	53 2e       	mov	r5, r19
    8bec:	5b 0c       	add	r5, r11
    8bee:	31 e0       	ldi	r19, 0x01	; 1
    8bf0:	5b 14       	cp	r5, r11
    8bf2:	08 f0       	brcs	.+2      	; 0x8bf6 <_Z10readUInt64PhPj+0x35a>
    8bf4:	30 e0       	ldi	r19, 0x00	; 0
    8bf6:	23 2b       	or	r18, r19
    8bf8:	b5 2c       	mov	r11, r5
    8bfa:	97 2c       	mov	r9, r7
    8bfc:	97 0e       	add	r9, r23
    8bfe:	31 e0       	ldi	r19, 0x01	; 1
    8c00:	fa 85       	ldd	r31, Y+10	; 0x0a
    8c02:	9f 16       	cp	r9, r31
    8c04:	08 f0       	brcs	.+2      	; 0x8c08 <_Z10readUInt64PhPj+0x36c>
    8c06:	30 e0       	ldi	r19, 0x00	; 0
    8c08:	72 2e       	mov	r7, r18
    8c0a:	79 0c       	add	r7, r9
    8c0c:	21 e0       	ldi	r18, 0x01	; 1
    8c0e:	79 14       	cp	r7, r9
    8c10:	08 f0       	brcs	.+2      	; 0x8c14 <_Z10readUInt64PhPj+0x378>
    8c12:	20 e0       	ldi	r18, 0x00	; 0
    8c14:	32 2b       	or	r19, r18
    8c16:	97 2c       	mov	r9, r7
    8c18:	ac 2c       	mov	r10, r12
    8c1a:	a8 0e       	add	r10, r24
    8c1c:	81 e0       	ldi	r24, 0x01	; 1
    8c1e:	2b 85       	ldd	r18, Y+11	; 0x0b
    8c20:	a2 16       	cp	r10, r18
    8c22:	08 f0       	brcs	.+2      	; 0x8c26 <_Z10readUInt64PhPj+0x38a>
    8c24:	80 e0       	ldi	r24, 0x00	; 0
    8c26:	83 2e       	mov	r8, r19
    8c28:	8a 0c       	add	r8, r10
    8c2a:	21 e0       	ldi	r18, 0x01	; 1
    8c2c:	8a 14       	cp	r8, r10
    8c2e:	08 f0       	brcs	.+2      	; 0x8c32 <_Z10readUInt64PhPj+0x396>
    8c30:	20 e0       	ldi	r18, 0x00	; 0
    8c32:	82 2b       	or	r24, r18
    8c34:	a8 2c       	mov	r10, r8
    8c36:	69 0e       	add	r6, r25
    8c38:	68 0e       	add	r6, r24
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
    8c3a:	ec 81       	ldd	r30, Y+4	; 0x04
    8c3c:	fd 81       	ldd	r31, Y+5	; 0x05
    8c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    8c40:	9b 81       	ldd	r25, Y+3	; 0x03
    8c42:	e8 0f       	add	r30, r24
    8c44:	f9 1f       	adc	r31, r25
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    8c46:	23 81       	ldd	r18, Z+3	; 0x03
    8c48:	30 e0       	ldi	r19, 0x00	; 0
    8c4a:	40 e0       	ldi	r20, 0x00	; 0
    8c4c:	50 e0       	ldi	r21, 0x00	; 0
    8c4e:	60 e0       	ldi	r22, 0x00	; 0
    8c50:	70 e0       	ldi	r23, 0x00	; 0
    8c52:	80 e0       	ldi	r24, 0x00	; 0
    8c54:	90 e0       	ldi	r25, 0x00	; 0
    8c56:	08 e1       	ldi	r16, 0x18	; 24
    8c58:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <__ashldi3>
    8c5c:	2f 80       	ldd	r2, Y+7	; 0x07
    8c5e:	22 0e       	add	r2, r18
    8c60:	21 e0       	ldi	r18, 0x01	; 1
    8c62:	af 81       	ldd	r26, Y+7	; 0x07
    8c64:	2a 16       	cp	r2, r26
    8c66:	08 f0       	brcs	.+2      	; 0x8c6a <_Z10readUInt64PhPj+0x3ce>
    8c68:	20 e0       	ldi	r18, 0x00	; 0
    8c6a:	e3 0e       	add	r14, r19
    8c6c:	31 e0       	ldi	r19, 0x01	; 1
    8c6e:	e1 16       	cp	r14, r17
    8c70:	08 f0       	brcs	.+2      	; 0x8c74 <_Z10readUInt64PhPj+0x3d8>
    8c72:	30 e0       	ldi	r19, 0x00	; 0
    8c74:	32 2e       	mov	r3, r18
    8c76:	3e 0c       	add	r3, r14
    8c78:	21 e0       	ldi	r18, 0x01	; 1
    8c7a:	3e 14       	cp	r3, r14
    8c7c:	08 f0       	brcs	.+2      	; 0x8c80 <_Z10readUInt64PhPj+0x3e4>
    8c7e:	20 e0       	ldi	r18, 0x00	; 0
    8c80:	32 2b       	or	r19, r18
    8c82:	e3 2c       	mov	r14, r3
    8c84:	b9 81       	ldd	r27, Y+1	; 0x01
    8c86:	b4 0f       	add	r27, r20
    8c88:	be 83       	std	Y+6, r27	; 0x06
    8c8a:	21 e0       	ldi	r18, 0x01	; 1
    8c8c:	bf 15       	cp	r27, r15
    8c8e:	08 f0       	brcs	.+2      	; 0x8c92 <_Z10readUInt64PhPj+0x3f6>
    8c90:	20 e0       	ldi	r18, 0x00	; 0
    8c92:	ce 80       	ldd	r12, Y+6	; 0x06
    8c94:	c3 0e       	add	r12, r19
    8c96:	31 e0       	ldi	r19, 0x01	; 1
    8c98:	ee 81       	ldd	r30, Y+6	; 0x06
    8c9a:	ce 16       	cp	r12, r30
    8c9c:	08 f0       	brcs	.+2      	; 0x8ca0 <_Z10readUInt64PhPj+0x404>
    8c9e:	30 e0       	ldi	r19, 0x00	; 0
    8ca0:	23 2b       	or	r18, r19
    8ca2:	ce 82       	std	Y+6, r12	; 0x06
    8ca4:	45 0e       	add	r4, r21
    8ca6:	4f 82       	std	Y+7, r4	; 0x07
    8ca8:	31 e0       	ldi	r19, 0x01	; 1
    8caa:	4d 14       	cp	r4, r13
    8cac:	08 f0       	brcs	.+2      	; 0x8cb0 <_Z10readUInt64PhPj+0x414>
    8cae:	30 e0       	ldi	r19, 0x00	; 0
    8cb0:	4f 80       	ldd	r4, Y+7	; 0x07
    8cb2:	42 0e       	add	r4, r18
    8cb4:	21 e0       	ldi	r18, 0x01	; 1
    8cb6:	ff 81       	ldd	r31, Y+7	; 0x07
    8cb8:	4f 16       	cp	r4, r31
    8cba:	08 f0       	brcs	.+2      	; 0x8cbe <_Z10readUInt64PhPj+0x422>
    8cbc:	20 e0       	ldi	r18, 0x00	; 0
    8cbe:	32 2b       	or	r19, r18
    8cc0:	4f 82       	std	Y+7, r4	; 0x07
    8cc2:	f5 2c       	mov	r15, r5
    8cc4:	f6 0e       	add	r15, r22
    8cc6:	21 e0       	ldi	r18, 0x01	; 1
    8cc8:	fb 14       	cp	r15, r11
    8cca:	08 f0       	brcs	.+2      	; 0x8cce <_Z10readUInt64PhPj+0x432>
    8ccc:	20 e0       	ldi	r18, 0x00	; 0
    8cce:	53 2e       	mov	r5, r19
    8cd0:	5f 0c       	add	r5, r15
    8cd2:	31 e0       	ldi	r19, 0x01	; 1
    8cd4:	5f 14       	cp	r5, r15
    8cd6:	08 f0       	brcs	.+2      	; 0x8cda <_Z10readUInt64PhPj+0x43e>
    8cd8:	30 e0       	ldi	r19, 0x00	; 0
    8cda:	23 2b       	or	r18, r19
    8cdc:	f5 2c       	mov	r15, r5
    8cde:	d7 2c       	mov	r13, r7
    8ce0:	d7 0e       	add	r13, r23
    8ce2:	11 e0       	ldi	r17, 0x01	; 1
    8ce4:	d9 14       	cp	r13, r9
    8ce6:	08 f0       	brcs	.+2      	; 0x8cea <_Z10readUInt64PhPj+0x44e>
    8ce8:	10 e0       	ldi	r17, 0x00	; 0
    8cea:	72 2e       	mov	r7, r18
    8cec:	7d 0c       	add	r7, r13
    8cee:	21 e0       	ldi	r18, 0x01	; 1
    8cf0:	7d 14       	cp	r7, r13
    8cf2:	08 f0       	brcs	.+2      	; 0x8cf6 <_Z10readUInt64PhPj+0x45a>
    8cf4:	20 e0       	ldi	r18, 0x00	; 0
    8cf6:	12 2b       	or	r17, r18
    8cf8:	d7 2c       	mov	r13, r7
    8cfa:	98 2c       	mov	r9, r8
    8cfc:	98 0e       	add	r9, r24
    8cfe:	81 e0       	ldi	r24, 0x01	; 1
    8d00:	9a 14       	cp	r9, r10
    8d02:	08 f0       	brcs	.+2      	; 0x8d06 <_Z10readUInt64PhPj+0x46a>
    8d04:	80 e0       	ldi	r24, 0x00	; 0
    8d06:	19 0d       	add	r17, r9
    8d08:	21 e0       	ldi	r18, 0x01	; 1
    8d0a:	19 15       	cp	r17, r9
    8d0c:	08 f0       	brcs	.+2      	; 0x8d10 <_Z10readUInt64PhPj+0x474>
    8d0e:	20 e0       	ldi	r18, 0x00	; 0
    8d10:	82 2b       	or	r24, r18
    8d12:	91 2e       	mov	r9, r17
    8d14:	69 0e       	add	r6, r25
    8d16:	68 0e       	add	r6, r24
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
    8d18:	ec 81       	ldd	r30, Y+4	; 0x04
    8d1a:	fd 81       	ldd	r31, Y+5	; 0x05
    8d1c:	2a 81       	ldd	r18, Y+2	; 0x02
    8d1e:	3b 81       	ldd	r19, Y+3	; 0x03
    8d20:	e2 0f       	add	r30, r18
    8d22:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    8d24:	22 81       	ldd	r18, Z+2	; 0x02
    8d26:	30 e0       	ldi	r19, 0x00	; 0
    8d28:	40 e0       	ldi	r20, 0x00	; 0
    8d2a:	50 e0       	ldi	r21, 0x00	; 0
    8d2c:	60 e0       	ldi	r22, 0x00	; 0
    8d2e:	70 e0       	ldi	r23, 0x00	; 0
    8d30:	80 e0       	ldi	r24, 0x00	; 0
    8d32:	90 e0       	ldi	r25, 0x00	; 0
    8d34:	00 e1       	ldi	r16, 0x10	; 16
    8d36:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <__ashldi3>
    8d3a:	22 0d       	add	r18, r2
    8d3c:	29 83       	std	Y+1, r18	; 0x01
    8d3e:	21 e0       	ldi	r18, 0x01	; 1
    8d40:	a9 81       	ldd	r26, Y+1	; 0x01
    8d42:	a2 15       	cp	r26, r2
    8d44:	08 f0       	brcs	.+2      	; 0x8d48 <_Z10readUInt64PhPj+0x4ac>
    8d46:	20 e0       	ldi	r18, 0x00	; 0
    8d48:	b3 2c       	mov	r11, r3
    8d4a:	b3 0e       	add	r11, r19
    8d4c:	31 e0       	ldi	r19, 0x01	; 1
    8d4e:	be 14       	cp	r11, r14
    8d50:	08 f0       	brcs	.+2      	; 0x8d54 <_Z10readUInt64PhPj+0x4b8>
    8d52:	30 e0       	ldi	r19, 0x00	; 0
    8d54:	22 2e       	mov	r2, r18
    8d56:	2b 0c       	add	r2, r11
    8d58:	21 e0       	ldi	r18, 0x01	; 1
    8d5a:	2b 14       	cp	r2, r11
    8d5c:	08 f0       	brcs	.+2      	; 0x8d60 <_Z10readUInt64PhPj+0x4c4>
    8d5e:	20 e0       	ldi	r18, 0x00	; 0
    8d60:	32 2b       	or	r19, r18
    8d62:	b2 2c       	mov	r11, r2
    8d64:	c4 0e       	add	r12, r20
    8d66:	21 e0       	ldi	r18, 0x01	; 1
    8d68:	be 81       	ldd	r27, Y+6	; 0x06
    8d6a:	cb 16       	cp	r12, r27
    8d6c:	08 f0       	brcs	.+2      	; 0x8d70 <_Z10readUInt64PhPj+0x4d4>
    8d6e:	20 e0       	ldi	r18, 0x00	; 0
    8d70:	33 2e       	mov	r3, r19
    8d72:	3c 0c       	add	r3, r12
    8d74:	31 e0       	ldi	r19, 0x01	; 1
    8d76:	3c 14       	cp	r3, r12
    8d78:	08 f0       	brcs	.+2      	; 0x8d7c <_Z10readUInt64PhPj+0x4e0>
    8d7a:	30 e0       	ldi	r19, 0x00	; 0
    8d7c:	23 2b       	or	r18, r19
    8d7e:	c3 2c       	mov	r12, r3
    8d80:	e4 2c       	mov	r14, r4
    8d82:	e5 0e       	add	r14, r21
    8d84:	31 e0       	ldi	r19, 0x01	; 1
    8d86:	ef 81       	ldd	r30, Y+7	; 0x07
    8d88:	ee 16       	cp	r14, r30
    8d8a:	08 f0       	brcs	.+2      	; 0x8d8e <_Z10readUInt64PhPj+0x4f2>
    8d8c:	30 e0       	ldi	r19, 0x00	; 0
    8d8e:	42 2e       	mov	r4, r18
    8d90:	4e 0c       	add	r4, r14
    8d92:	21 e0       	ldi	r18, 0x01	; 1
    8d94:	4e 14       	cp	r4, r14
    8d96:	08 f0       	brcs	.+2      	; 0x8d9a <_Z10readUInt64PhPj+0x4fe>
    8d98:	20 e0       	ldi	r18, 0x00	; 0
    8d9a:	32 2b       	or	r19, r18
    8d9c:	e4 2c       	mov	r14, r4
    8d9e:	56 0e       	add	r5, r22
    8da0:	21 e0       	ldi	r18, 0x01	; 1
    8da2:	5f 14       	cp	r5, r15
    8da4:	08 f0       	brcs	.+2      	; 0x8da8 <_Z10readUInt64PhPj+0x50c>
    8da6:	20 e0       	ldi	r18, 0x00	; 0
    8da8:	83 2e       	mov	r8, r19
    8daa:	85 0c       	add	r8, r5
    8dac:	31 e0       	ldi	r19, 0x01	; 1
    8dae:	85 14       	cp	r8, r5
    8db0:	08 f0       	brcs	.+2      	; 0x8db4 <_Z10readUInt64PhPj+0x518>
    8db2:	30 e0       	ldi	r19, 0x00	; 0
    8db4:	23 2b       	or	r18, r19
    8db6:	58 2c       	mov	r5, r8
    8db8:	77 0e       	add	r7, r23
    8dba:	31 e0       	ldi	r19, 0x01	; 1
    8dbc:	7d 14       	cp	r7, r13
    8dbe:	08 f0       	brcs	.+2      	; 0x8dc2 <_Z10readUInt64PhPj+0x526>
    8dc0:	30 e0       	ldi	r19, 0x00	; 0
    8dc2:	a2 2e       	mov	r10, r18
    8dc4:	a7 0c       	add	r10, r7
    8dc6:	21 e0       	ldi	r18, 0x01	; 1
    8dc8:	a7 14       	cp	r10, r7
    8dca:	08 f0       	brcs	.+2      	; 0x8dce <_Z10readUInt64PhPj+0x532>
    8dcc:	20 e0       	ldi	r18, 0x00	; 0
    8dce:	32 2b       	or	r19, r18
    8dd0:	7a 2c       	mov	r7, r10
    8dd2:	18 0f       	add	r17, r24
    8dd4:	81 e0       	ldi	r24, 0x01	; 1
    8dd6:	19 15       	cp	r17, r9
    8dd8:	08 f0       	brcs	.+2      	; 0x8ddc <_Z10readUInt64PhPj+0x540>
    8dda:	80 e0       	ldi	r24, 0x00	; 0
    8ddc:	f3 2e       	mov	r15, r19
    8dde:	f1 0e       	add	r15, r17
    8de0:	21 e0       	ldi	r18, 0x01	; 1
    8de2:	f1 16       	cp	r15, r17
    8de4:	08 f0       	brcs	.+2      	; 0x8de8 <_Z10readUInt64PhPj+0x54c>
    8de6:	20 e0       	ldi	r18, 0x00	; 0
    8de8:	82 2b       	or	r24, r18
    8dea:	1f 2d       	mov	r17, r15
    8dec:	d6 2c       	mov	r13, r6
    8dee:	d9 0e       	add	r13, r25
    8df0:	d8 0e       	add	r13, r24
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
    8df2:	ec 81       	ldd	r30, Y+4	; 0x04
    8df4:	fd 81       	ldd	r31, Y+5	; 0x05
    8df6:	2a 81       	ldd	r18, Y+2	; 0x02
    8df8:	3b 81       	ldd	r19, Y+3	; 0x03
    8dfa:	e2 0f       	add	r30, r18
    8dfc:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 0]);
    8dfe:	21 81       	ldd	r18, Z+1	; 0x01
    8e00:	30 e0       	ldi	r19, 0x00	; 0
    8e02:	40 e0       	ldi	r20, 0x00	; 0
    8e04:	50 e0       	ldi	r21, 0x00	; 0
    8e06:	60 e0       	ldi	r22, 0x00	; 0
    8e08:	70 e0       	ldi	r23, 0x00	; 0
    8e0a:	80 e0       	ldi	r24, 0x00	; 0
    8e0c:	90 e0       	ldi	r25, 0x00	; 0
    8e0e:	08 e0       	ldi	r16, 0x08	; 8
    8e10:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <__ashldi3>
    8e14:	a9 81       	ldd	r26, Y+1	; 0x01
    8e16:	2a 0f       	add	r18, r26
    8e18:	f1 e0       	ldi	r31, 0x01	; 1
    8e1a:	2a 17       	cp	r18, r26
    8e1c:	08 f0       	brcs	.+2      	; 0x8e20 <_Z10readUInt64PhPj+0x584>
    8e1e:	f0 e0       	ldi	r31, 0x00	; 0
    8e20:	23 0e       	add	r2, r19
    8e22:	e1 e0       	ldi	r30, 0x01	; 1
    8e24:	2b 14       	cp	r2, r11
    8e26:	08 f0       	brcs	.+2      	; 0x8e2a <_Z10readUInt64PhPj+0x58e>
    8e28:	e0 e0       	ldi	r30, 0x00	; 0
    8e2a:	3f 2f       	mov	r19, r31
    8e2c:	32 0d       	add	r19, r2
    8e2e:	f1 e0       	ldi	r31, 0x01	; 1
    8e30:	32 15       	cp	r19, r2
    8e32:	08 f0       	brcs	.+2      	; 0x8e36 <_Z10readUInt64PhPj+0x59a>
    8e34:	f0 e0       	ldi	r31, 0x00	; 0
    8e36:	ef 2b       	or	r30, r31
    8e38:	34 0e       	add	r3, r20
    8e3a:	f1 e0       	ldi	r31, 0x01	; 1
    8e3c:	3c 14       	cp	r3, r12
    8e3e:	08 f0       	brcs	.+2      	; 0x8e42 <_Z10readUInt64PhPj+0x5a6>
    8e40:	f0 e0       	ldi	r31, 0x00	; 0
    8e42:	4e 2f       	mov	r20, r30
    8e44:	43 0d       	add	r20, r3
    8e46:	e1 e0       	ldi	r30, 0x01	; 1
    8e48:	43 15       	cp	r20, r3
    8e4a:	08 f0       	brcs	.+2      	; 0x8e4e <_Z10readUInt64PhPj+0x5b2>
    8e4c:	e0 e0       	ldi	r30, 0x00	; 0
    8e4e:	fe 2b       	or	r31, r30
    8e50:	45 0e       	add	r4, r21
    8e52:	e1 e0       	ldi	r30, 0x01	; 1
    8e54:	4e 14       	cp	r4, r14
    8e56:	08 f0       	brcs	.+2      	; 0x8e5a <_Z10readUInt64PhPj+0x5be>
    8e58:	e0 e0       	ldi	r30, 0x00	; 0
    8e5a:	5f 2f       	mov	r21, r31
    8e5c:	54 0d       	add	r21, r4
    8e5e:	f1 e0       	ldi	r31, 0x01	; 1
    8e60:	54 15       	cp	r21, r4
    8e62:	08 f0       	brcs	.+2      	; 0x8e66 <_Z10readUInt64PhPj+0x5ca>
    8e64:	f0 e0       	ldi	r31, 0x00	; 0
    8e66:	ef 2b       	or	r30, r31
    8e68:	86 0e       	add	r8, r22
    8e6a:	f1 e0       	ldi	r31, 0x01	; 1
    8e6c:	85 14       	cp	r8, r5
    8e6e:	08 f0       	brcs	.+2      	; 0x8e72 <_Z10readUInt64PhPj+0x5d6>
    8e70:	f0 e0       	ldi	r31, 0x00	; 0
    8e72:	6e 2f       	mov	r22, r30
    8e74:	68 0d       	add	r22, r8
    8e76:	e1 e0       	ldi	r30, 0x01	; 1
    8e78:	68 15       	cp	r22, r8
    8e7a:	08 f0       	brcs	.+2      	; 0x8e7e <_Z10readUInt64PhPj+0x5e2>
    8e7c:	e0 e0       	ldi	r30, 0x00	; 0
    8e7e:	fe 2b       	or	r31, r30
    8e80:	a7 0e       	add	r10, r23
    8e82:	e1 e0       	ldi	r30, 0x01	; 1
    8e84:	a7 14       	cp	r10, r7
    8e86:	08 f0       	brcs	.+2      	; 0x8e8a <_Z10readUInt64PhPj+0x5ee>
    8e88:	e0 e0       	ldi	r30, 0x00	; 0
    8e8a:	7f 2f       	mov	r23, r31
    8e8c:	7a 0d       	add	r23, r10
    8e8e:	f1 e0       	ldi	r31, 0x01	; 1
    8e90:	7a 15       	cp	r23, r10
    8e92:	08 f0       	brcs	.+2      	; 0x8e96 <_Z10readUInt64PhPj+0x5fa>
    8e94:	f0 e0       	ldi	r31, 0x00	; 0
    8e96:	ef 2b       	or	r30, r31
    8e98:	f8 0e       	add	r15, r24
    8e9a:	a1 e0       	ldi	r26, 0x01	; 1
    8e9c:	f1 16       	cp	r15, r17
    8e9e:	08 f0       	brcs	.+2      	; 0x8ea2 <_Z10readUInt64PhPj+0x606>
    8ea0:	a0 e0       	ldi	r26, 0x00	; 0
    8ea2:	8e 2f       	mov	r24, r30
    8ea4:	8f 0d       	add	r24, r15
    8ea6:	e1 e0       	ldi	r30, 0x01	; 1
    8ea8:	8f 15       	cp	r24, r15
    8eaa:	08 f0       	brcs	.+2      	; 0x8eae <_Z10readUInt64PhPj+0x612>
    8eac:	e0 e0       	ldi	r30, 0x00	; 0
    8eae:	ae 2b       	or	r26, r30
    8eb0:	9d 0d       	add	r25, r13
	/*unsigned char byteCount = 2;
	for (int i = 0; i < byteCount; i++){
		out += data[*offset + byteCount - i] << (8 * i);
	}*/
	*offset += 8;
    8eb2:	0a 81       	ldd	r16, Y+2	; 0x02
    8eb4:	1b 81       	ldd	r17, Y+3	; 0x03
    8eb6:	08 5f       	subi	r16, 0xF8	; 248
    8eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    8eba:	e8 85       	ldd	r30, Y+8	; 0x08
    8ebc:	f9 85       	ldd	r31, Y+9	; 0x09
    8ebe:	11 83       	std	Z+1, r17	; 0x01
    8ec0:	00 83       	st	Z, r16
	return out;
}
    8ec2:	9a 0f       	add	r25, r26
    8ec4:	2b 96       	adiw	r28, 0x0b	; 11
    8ec6:	0f b6       	in	r0, 0x3f	; 63
    8ec8:	f8 94       	cli
    8eca:	de bf       	out	0x3e, r29	; 62
    8ecc:	0f be       	out	0x3f, r0	; 63
    8ece:	cd bf       	out	0x3d, r28	; 61
    8ed0:	df 91       	pop	r29
    8ed2:	cf 91       	pop	r28
    8ed4:	1f 91       	pop	r17
    8ed6:	0f 91       	pop	r16
    8ed8:	ff 90       	pop	r15
    8eda:	ef 90       	pop	r14
    8edc:	df 90       	pop	r13
    8ede:	cf 90       	pop	r12
    8ee0:	bf 90       	pop	r11
    8ee2:	af 90       	pop	r10
    8ee4:	9f 90       	pop	r9
    8ee6:	8f 90       	pop	r8
    8ee8:	7f 90       	pop	r7
    8eea:	6f 90       	pop	r6
    8eec:	5f 90       	pop	r5
    8eee:	4f 90       	pop	r4
    8ef0:	3f 90       	pop	r3
    8ef2:	2f 90       	pop	r2
    8ef4:	08 95       	ret

00008ef6 <_Z9readBytesPhS_iPj>:
void readBytes(unsigned char data[], unsigned char out[], int count, unsigned int *offset){
    8ef6:	0f 93       	push	r16
    8ef8:	1f 93       	push	r17
    8efa:	cf 93       	push	r28
    8efc:	df 93       	push	r29
    8efe:	8c 01       	movw	r16, r24
    8f00:	e9 01       	movw	r28, r18
	for (int i = 0; i < count; i++){
    8f02:	14 16       	cp	r1, r20
    8f04:	15 06       	cpc	r1, r21
    8f06:	94 f4       	brge	.+36     	; 0x8f2c <_Z9readBytesPhS_iPj+0x36>
    8f08:	a6 2f       	mov	r26, r22
    8f0a:	b7 2f       	mov	r27, r23
    8f0c:	20 e0       	ldi	r18, 0x00	; 0
    8f0e:	30 e0       	ldi	r19, 0x00	; 0
		out[i] = data[i + *offset];
    8f10:	f8 01       	movw	r30, r16
    8f12:	e2 0f       	add	r30, r18
    8f14:	f3 1f       	adc	r31, r19
    8f16:	88 81       	ld	r24, Y
    8f18:	99 81       	ldd	r25, Y+1	; 0x01
    8f1a:	e8 0f       	add	r30, r24
    8f1c:	f9 1f       	adc	r31, r25
    8f1e:	80 81       	ld	r24, Z
    8f20:	8d 93       	st	X+, r24
	}*/
	*offset += 8;
	return out;
}
void readBytes(unsigned char data[], unsigned char out[], int count, unsigned int *offset){
	for (int i = 0; i < count; i++){
    8f22:	2f 5f       	subi	r18, 0xFF	; 255
    8f24:	3f 4f       	sbci	r19, 0xFF	; 255
    8f26:	24 17       	cp	r18, r20
    8f28:	35 07       	cpc	r19, r21
    8f2a:	91 f7       	brne	.-28     	; 0x8f10 <_Z9readBytesPhS_iPj+0x1a>
		out[i] = data[i + *offset];
	}
	*offset += count;
    8f2c:	88 81       	ld	r24, Y
    8f2e:	99 81       	ldd	r25, Y+1	; 0x01
    8f30:	48 0f       	add	r20, r24
    8f32:	59 1f       	adc	r21, r25
    8f34:	59 83       	std	Y+1, r21	; 0x01
    8f36:	48 83       	st	Y, r20
}
    8f38:	df 91       	pop	r29
    8f3a:	cf 91       	pop	r28
    8f3c:	1f 91       	pop	r17
    8f3e:	0f 91       	pop	r16
    8f40:	08 95       	ret

00008f42 <_Z9readFloatPhPj>:

float readFloat(unsigned char data[], unsigned int* offset){
    8f42:	fb 01       	movw	r30, r22
	byte *bytes = &data[*offset];
    8f44:	20 81       	ld	r18, Z
    8f46:	31 81       	ldd	r19, Z+1	; 0x01
	float* val = reinterpret_cast<float*>(bytes);
	*offset += 4;
    8f48:	a9 01       	movw	r20, r18
    8f4a:	4c 5f       	subi	r20, 0xFC	; 252
    8f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    8f4e:	51 83       	std	Z+1, r21	; 0x01
    8f50:	40 83       	st	Z, r20
	return *val;
    8f52:	fc 01       	movw	r30, r24
    8f54:	e2 0f       	add	r30, r18
    8f56:	f3 1f       	adc	r31, r19
    8f58:	50 81       	ld	r21, Z
    8f5a:	41 81       	ldd	r20, Z+1	; 0x01
    8f5c:	32 81       	ldd	r19, Z+2	; 0x02
    8f5e:	23 81       	ldd	r18, Z+3	; 0x03
    8f60:	85 2f       	mov	r24, r21
    8f62:	94 2f       	mov	r25, r20
    8f64:	a3 2f       	mov	r26, r19
    8f66:	b2 2f       	mov	r27, r18
    8f68:	bc 01       	movw	r22, r24
    8f6a:	cd 01       	movw	r24, r26
    8f6c:	08 95       	ret

00008f6e <_Z9writeBytePhhi>:
 *      Author: EHaskins
 */

#include "ByteWriter.h"
int writeByte(unsigned char data[], unsigned char val, int offset){
	data[offset] = val;
    8f6e:	fc 01       	movw	r30, r24
    8f70:	e4 0f       	add	r30, r20
    8f72:	f5 1f       	adc	r31, r21
    8f74:	60 83       	st	Z, r22
	return offset + 1;
    8f76:	ca 01       	movw	r24, r20
    8f78:	01 96       	adiw	r24, 0x01	; 1
}
    8f7a:	08 95       	ret

00008f7c <_Z11writeUInt16Phtj>:
int writeUInt16(unsigned char data[], unsigned short val, unsigned int offset){

	data[offset + 1] = (unsigned char)(val >> 8);
    8f7c:	fc 01       	movw	r30, r24
    8f7e:	e4 0f       	add	r30, r20
    8f80:	f5 1f       	adc	r31, r21
    8f82:	71 83       	std	Z+1, r23	; 0x01
	data[offset + 0] = (unsigned char)val;
    8f84:	60 83       	st	Z, r22
	return offset + 2;
    8f86:	ca 01       	movw	r24, r20
    8f88:	02 96       	adiw	r24, 0x02	; 2
}
    8f8a:	08 95       	ret

00008f8c <_Z11writeUInt32Phmj>:
int writeUInt32(unsigned char data[], unsigned long val, unsigned int offset){
	data[offset + 3] = (unsigned char)(val >> 24);
    8f8c:	fc 01       	movw	r30, r24
    8f8e:	e2 0f       	add	r30, r18
    8f90:	f3 1f       	adc	r31, r19
    8f92:	73 83       	std	Z+3, r23	; 0x03
	data[offset + 2] = (unsigned char)(val >> 16);
    8f94:	62 83       	std	Z+2, r22	; 0x02
	data[offset + 1] = (unsigned char)(val >> 8);
    8f96:	51 83       	std	Z+1, r21	; 0x01
	data[offset + 0] = (unsigned char)val;
    8f98:	40 83       	st	Z, r20
	return offset + 4;
    8f9a:	c9 01       	movw	r24, r18
    8f9c:	04 96       	adiw	r24, 0x04	; 4
}
    8f9e:	08 95       	ret

00008fa0 <_Z17writeUInt32ForCrcPhmj>:

int writeUInt32ForCrc(unsigned char data[], unsigned long val, unsigned int offset){
	data[offset + 3] = (unsigned char)(val >> 24);
    8fa0:	fc 01       	movw	r30, r24
    8fa2:	e2 0f       	add	r30, r18
    8fa4:	f3 1f       	adc	r31, r19
    8fa6:	73 83       	std	Z+3, r23	; 0x03
	data[offset + 2] = (unsigned char)(val >> 16);
    8fa8:	62 83       	std	Z+2, r22	; 0x02
	data[offset + 1] = (unsigned char)(val >> 8);
    8faa:	51 83       	std	Z+1, r21	; 0x01
	data[offset] = (unsigned char)val;
    8fac:	40 83       	st	Z, r20
	return offset + 4;
    8fae:	c9 01       	movw	r24, r18
    8fb0:	04 96       	adiw	r24, 0x04	; 4
}
    8fb2:	08 95       	ret

00008fb4 <_Z10writeBytesPhjS_ij>:

int writeBytes(unsigned char data[], unsigned int dataOffset, unsigned char val[], int count, unsigned int valOffset){
    8fb4:	0f 93       	push	r16
    8fb6:	1f 93       	push	r17
	for (int i = 0; i < count; i++){
    8fb8:	12 16       	cp	r1, r18
    8fba:	13 06       	cpc	r1, r19
    8fbc:	74 f4       	brge	.+28     	; 0x8fda <_Z10writeBytesPhjS_ij+0x26>
	data[offset + 1] = (unsigned char)(val >> 8);
	data[offset] = (unsigned char)val;
	return offset + 4;
}

int writeBytes(unsigned char data[], unsigned int dataOffset, unsigned char val[], int count, unsigned int valOffset){
    8fbe:	da 01       	movw	r26, r20
    8fc0:	a0 0f       	add	r26, r16
    8fc2:	b1 1f       	adc	r27, r17
    8fc4:	fc 01       	movw	r30, r24
    8fc6:	e6 0f       	add	r30, r22
    8fc8:	f7 1f       	adc	r31, r23
	for (int i = 0; i < count; i++){
    8fca:	80 e0       	ldi	r24, 0x00	; 0
    8fcc:	90 e0       	ldi	r25, 0x00	; 0
		data[i + dataOffset] = val[i + valOffset];
    8fce:	4d 91       	ld	r20, X+
    8fd0:	41 93       	st	Z+, r20
	data[offset] = (unsigned char)val;
	return offset + 4;
}

int writeBytes(unsigned char data[], unsigned int dataOffset, unsigned char val[], int count, unsigned int valOffset){
	for (int i = 0; i < count; i++){
    8fd2:	01 96       	adiw	r24, 0x01	; 1
    8fd4:	82 17       	cp	r24, r18
    8fd6:	93 07       	cpc	r25, r19
    8fd8:	d1 f7       	brne	.-12     	; 0x8fce <_Z10writeBytesPhjS_ij+0x1a>
		data[i + dataOffset] = val[i + valOffset];
	}
	return dataOffset + count;
    8fda:	26 0f       	add	r18, r22
    8fdc:	37 1f       	adc	r19, r23
}
    8fde:	82 2f       	mov	r24, r18
    8fe0:	93 2f       	mov	r25, r19
    8fe2:	1f 91       	pop	r17
    8fe4:	0f 91       	pop	r16
    8fe6:	08 95       	ret

00008fe8 <__ashldi3>:
    8fe8:	cf 92       	push	r12
    8fea:	df 92       	push	r13
    8fec:	ef 92       	push	r14
    8fee:	ff 92       	push	r15
    8ff0:	0f 93       	push	r16
    8ff2:	cf 93       	push	r28
    8ff4:	df 93       	push	r29
    8ff6:	cd b7       	in	r28, 0x3d	; 61
    8ff8:	de b7       	in	r29, 0x3e	; 62
    8ffa:	60 97       	sbiw	r28, 0x10	; 16
    8ffc:	0f b6       	in	r0, 0x3f	; 63
    8ffe:	f8 94       	cli
    9000:	de bf       	out	0x3e, r29	; 62
    9002:	0f be       	out	0x3f, r0	; 63
    9004:	cd bf       	out	0x3d, r28	; 61
    9006:	00 23       	and	r16, r16
    9008:	09 f4       	brne	.+2      	; 0x900c <__ashldi3+0x24>
    900a:	5a c0       	rjmp	.+180    	; 0x90c0 <__ashldi3+0xd8>
    900c:	29 87       	std	Y+9, r18	; 0x09
    900e:	3a 87       	std	Y+10, r19	; 0x0a
    9010:	4b 87       	std	Y+11, r20	; 0x0b
    9012:	5c 87       	std	Y+12, r21	; 0x0c
    9014:	6d 87       	std	Y+13, r22	; 0x0d
    9016:	7e 87       	std	Y+14, r23	; 0x0e
    9018:	8f 87       	std	Y+15, r24	; 0x0f
    901a:	98 8b       	std	Y+16, r25	; 0x10
    901c:	80 e2       	ldi	r24, 0x20	; 32
    901e:	80 1b       	sub	r24, r16
    9020:	49 85       	ldd	r20, Y+9	; 0x09
    9022:	5a 85       	ldd	r21, Y+10	; 0x0a
    9024:	6b 85       	ldd	r22, Y+11	; 0x0b
    9026:	7c 85       	ldd	r23, Y+12	; 0x0c
    9028:	18 16       	cp	r1, r24
    902a:	b4 f0       	brlt	.+44     	; 0x9058 <__ashldi3+0x70>
    902c:	19 82       	std	Y+1, r1	; 0x01
    902e:	1a 82       	std	Y+2, r1	; 0x02
    9030:	1b 82       	std	Y+3, r1	; 0x03
    9032:	1c 82       	std	Y+4, r1	; 0x04
    9034:	99 27       	eor	r25, r25
    9036:	87 fd       	sbrc	r24, 7
    9038:	90 95       	com	r25
    903a:	90 95       	com	r25
    903c:	81 95       	neg	r24
    903e:	9f 4f       	sbci	r25, 0xFF	; 255
    9040:	04 c0       	rjmp	.+8      	; 0x904a <__ashldi3+0x62>
    9042:	44 0f       	add	r20, r20
    9044:	55 1f       	adc	r21, r21
    9046:	66 1f       	adc	r22, r22
    9048:	77 1f       	adc	r23, r23
    904a:	8a 95       	dec	r24
    904c:	d2 f7       	brpl	.-12     	; 0x9042 <__ashldi3+0x5a>
    904e:	4d 83       	std	Y+5, r20	; 0x05
    9050:	5e 83       	std	Y+6, r21	; 0x06
    9052:	6f 83       	std	Y+7, r22	; 0x07
    9054:	78 87       	std	Y+8, r23	; 0x08
    9056:	2c c0       	rjmp	.+88     	; 0x90b0 <__ashldi3+0xc8>
    9058:	6a 01       	movw	r12, r20
    905a:	7b 01       	movw	r14, r22
    905c:	00 2e       	mov	r0, r16
    905e:	04 c0       	rjmp	.+8      	; 0x9068 <__ashldi3+0x80>
    9060:	cc 0c       	add	r12, r12
    9062:	dd 1c       	adc	r13, r13
    9064:	ee 1c       	adc	r14, r14
    9066:	ff 1c       	adc	r15, r15
    9068:	0a 94       	dec	r0
    906a:	d2 f7       	brpl	.-12     	; 0x9060 <__ashldi3+0x78>
    906c:	c9 82       	std	Y+1, r12	; 0x01
    906e:	da 82       	std	Y+2, r13	; 0x02
    9070:	eb 82       	std	Y+3, r14	; 0x03
    9072:	fc 82       	std	Y+4, r15	; 0x04
    9074:	6a 01       	movw	r12, r20
    9076:	7b 01       	movw	r14, r22
    9078:	04 c0       	rjmp	.+8      	; 0x9082 <__ashldi3+0x9a>
    907a:	f6 94       	lsr	r15
    907c:	e7 94       	ror	r14
    907e:	d7 94       	ror	r13
    9080:	c7 94       	ror	r12
    9082:	8a 95       	dec	r24
    9084:	d2 f7       	brpl	.-12     	; 0x907a <__ashldi3+0x92>
    9086:	d7 01       	movw	r26, r14
    9088:	c6 01       	movw	r24, r12
    908a:	4d 85       	ldd	r20, Y+13	; 0x0d
    908c:	5e 85       	ldd	r21, Y+14	; 0x0e
    908e:	6f 85       	ldd	r22, Y+15	; 0x0f
    9090:	78 89       	ldd	r23, Y+16	; 0x10
    9092:	04 c0       	rjmp	.+8      	; 0x909c <__ashldi3+0xb4>
    9094:	44 0f       	add	r20, r20
    9096:	55 1f       	adc	r21, r21
    9098:	66 1f       	adc	r22, r22
    909a:	77 1f       	adc	r23, r23
    909c:	0a 95       	dec	r16
    909e:	d2 f7       	brpl	.-12     	; 0x9094 <__ashldi3+0xac>
    90a0:	84 2b       	or	r24, r20
    90a2:	95 2b       	or	r25, r21
    90a4:	a6 2b       	or	r26, r22
    90a6:	b7 2b       	or	r27, r23
    90a8:	8d 83       	std	Y+5, r24	; 0x05
    90aa:	9e 83       	std	Y+6, r25	; 0x06
    90ac:	af 83       	std	Y+7, r26	; 0x07
    90ae:	b8 87       	std	Y+8, r27	; 0x08
    90b0:	29 81       	ldd	r18, Y+1	; 0x01
    90b2:	3a 81       	ldd	r19, Y+2	; 0x02
    90b4:	4b 81       	ldd	r20, Y+3	; 0x03
    90b6:	5c 81       	ldd	r21, Y+4	; 0x04
    90b8:	6d 81       	ldd	r22, Y+5	; 0x05
    90ba:	7e 81       	ldd	r23, Y+6	; 0x06
    90bc:	8f 81       	ldd	r24, Y+7	; 0x07
    90be:	98 85       	ldd	r25, Y+8	; 0x08
    90c0:	60 96       	adiw	r28, 0x10	; 16
    90c2:	0f b6       	in	r0, 0x3f	; 63
    90c4:	f8 94       	cli
    90c6:	de bf       	out	0x3e, r29	; 62
    90c8:	0f be       	out	0x3f, r0	; 63
    90ca:	cd bf       	out	0x3d, r28	; 61
    90cc:	df 91       	pop	r29
    90ce:	cf 91       	pop	r28
    90d0:	0f 91       	pop	r16
    90d2:	ff 90       	pop	r15
    90d4:	ef 90       	pop	r14
    90d6:	df 90       	pop	r13
    90d8:	cf 90       	pop	r12
    90da:	08 95       	ret

000090dc <__subsf3>:
    90dc:	50 58       	subi	r21, 0x80	; 128

000090de <__addsf3>:
    90de:	bb 27       	eor	r27, r27
    90e0:	aa 27       	eor	r26, r26
    90e2:	0e d0       	rcall	.+28     	; 0x9100 <__addsf3x>
    90e4:	fc c1       	rjmp	.+1016   	; 0x94de <__fp_round>
    90e6:	ed d1       	rcall	.+986    	; 0x94c2 <__fp_pscA>
    90e8:	30 f0       	brcs	.+12     	; 0x90f6 <__addsf3+0x18>
    90ea:	f2 d1       	rcall	.+996    	; 0x94d0 <__fp_pscB>
    90ec:	20 f0       	brcs	.+8      	; 0x90f6 <__addsf3+0x18>
    90ee:	31 f4       	brne	.+12     	; 0x90fc <__addsf3+0x1e>
    90f0:	9f 3f       	cpi	r25, 0xFF	; 255
    90f2:	11 f4       	brne	.+4      	; 0x90f8 <__addsf3+0x1a>
    90f4:	1e f4       	brtc	.+6      	; 0x90fc <__addsf3+0x1e>
    90f6:	bd c1       	rjmp	.+890    	; 0x9472 <__fp_nan>
    90f8:	0e f4       	brtc	.+2      	; 0x90fc <__addsf3+0x1e>
    90fa:	e0 95       	com	r30
    90fc:	e7 fb       	bst	r30, 7
    90fe:	b3 c1       	rjmp	.+870    	; 0x9466 <__fp_inf>

00009100 <__addsf3x>:
    9100:	e9 2f       	mov	r30, r25
    9102:	fe d1       	rcall	.+1020   	; 0x9500 <__fp_split3>
    9104:	80 f3       	brcs	.-32     	; 0x90e6 <__addsf3+0x8>
    9106:	ba 17       	cp	r27, r26
    9108:	62 07       	cpc	r22, r18
    910a:	73 07       	cpc	r23, r19
    910c:	84 07       	cpc	r24, r20
    910e:	95 07       	cpc	r25, r21
    9110:	18 f0       	brcs	.+6      	; 0x9118 <__addsf3x+0x18>
    9112:	71 f4       	brne	.+28     	; 0x9130 <__addsf3x+0x30>
    9114:	9e f5       	brtc	.+102    	; 0x917c <__addsf3x+0x7c>
    9116:	16 c2       	rjmp	.+1068   	; 0x9544 <__fp_zero>
    9118:	0e f4       	brtc	.+2      	; 0x911c <__addsf3x+0x1c>
    911a:	e0 95       	com	r30
    911c:	0b 2e       	mov	r0, r27
    911e:	ba 2f       	mov	r27, r26
    9120:	a0 2d       	mov	r26, r0
    9122:	0b 01       	movw	r0, r22
    9124:	b9 01       	movw	r22, r18
    9126:	90 01       	movw	r18, r0
    9128:	0c 01       	movw	r0, r24
    912a:	ca 01       	movw	r24, r20
    912c:	a0 01       	movw	r20, r0
    912e:	11 24       	eor	r1, r1
    9130:	ff 27       	eor	r31, r31
    9132:	59 1b       	sub	r21, r25
    9134:	99 f0       	breq	.+38     	; 0x915c <__addsf3x+0x5c>
    9136:	59 3f       	cpi	r21, 0xF9	; 249
    9138:	50 f4       	brcc	.+20     	; 0x914e <__addsf3x+0x4e>
    913a:	50 3e       	cpi	r21, 0xE0	; 224
    913c:	68 f1       	brcs	.+90     	; 0x9198 <__addsf3x+0x98>
    913e:	1a 16       	cp	r1, r26
    9140:	f0 40       	sbci	r31, 0x00	; 0
    9142:	a2 2f       	mov	r26, r18
    9144:	23 2f       	mov	r18, r19
    9146:	34 2f       	mov	r19, r20
    9148:	44 27       	eor	r20, r20
    914a:	58 5f       	subi	r21, 0xF8	; 248
    914c:	f3 cf       	rjmp	.-26     	; 0x9134 <__addsf3x+0x34>
    914e:	46 95       	lsr	r20
    9150:	37 95       	ror	r19
    9152:	27 95       	ror	r18
    9154:	a7 95       	ror	r26
    9156:	f0 40       	sbci	r31, 0x00	; 0
    9158:	53 95       	inc	r21
    915a:	c9 f7       	brne	.-14     	; 0x914e <__addsf3x+0x4e>
    915c:	7e f4       	brtc	.+30     	; 0x917c <__addsf3x+0x7c>
    915e:	1f 16       	cp	r1, r31
    9160:	ba 0b       	sbc	r27, r26
    9162:	62 0b       	sbc	r22, r18
    9164:	73 0b       	sbc	r23, r19
    9166:	84 0b       	sbc	r24, r20
    9168:	ba f0       	brmi	.+46     	; 0x9198 <__addsf3x+0x98>
    916a:	91 50       	subi	r25, 0x01	; 1
    916c:	a1 f0       	breq	.+40     	; 0x9196 <__addsf3x+0x96>
    916e:	ff 0f       	add	r31, r31
    9170:	bb 1f       	adc	r27, r27
    9172:	66 1f       	adc	r22, r22
    9174:	77 1f       	adc	r23, r23
    9176:	88 1f       	adc	r24, r24
    9178:	c2 f7       	brpl	.-16     	; 0x916a <__addsf3x+0x6a>
    917a:	0e c0       	rjmp	.+28     	; 0x9198 <__addsf3x+0x98>
    917c:	ba 0f       	add	r27, r26
    917e:	62 1f       	adc	r22, r18
    9180:	73 1f       	adc	r23, r19
    9182:	84 1f       	adc	r24, r20
    9184:	48 f4       	brcc	.+18     	; 0x9198 <__addsf3x+0x98>
    9186:	87 95       	ror	r24
    9188:	77 95       	ror	r23
    918a:	67 95       	ror	r22
    918c:	b7 95       	ror	r27
    918e:	f7 95       	ror	r31
    9190:	9e 3f       	cpi	r25, 0xFE	; 254
    9192:	08 f0       	brcs	.+2      	; 0x9196 <__addsf3x+0x96>
    9194:	b3 cf       	rjmp	.-154    	; 0x90fc <__addsf3+0x1e>
    9196:	93 95       	inc	r25
    9198:	88 0f       	add	r24, r24
    919a:	08 f0       	brcs	.+2      	; 0x919e <__addsf3x+0x9e>
    919c:	99 27       	eor	r25, r25
    919e:	ee 0f       	add	r30, r30
    91a0:	97 95       	ror	r25
    91a2:	87 95       	ror	r24
    91a4:	08 95       	ret
    91a6:	8d d1       	rcall	.+794    	; 0x94c2 <__fp_pscA>
    91a8:	58 f0       	brcs	.+22     	; 0x91c0 <__addsf3x+0xc0>
    91aa:	80 e8       	ldi	r24, 0x80	; 128
    91ac:	91 e0       	ldi	r25, 0x01	; 1
    91ae:	09 f4       	brne	.+2      	; 0x91b2 <__addsf3x+0xb2>
    91b0:	9e ef       	ldi	r25, 0xFE	; 254
    91b2:	8e d1       	rcall	.+796    	; 0x94d0 <__fp_pscB>
    91b4:	28 f0       	brcs	.+10     	; 0x91c0 <__addsf3x+0xc0>
    91b6:	40 e8       	ldi	r20, 0x80	; 128
    91b8:	51 e0       	ldi	r21, 0x01	; 1
    91ba:	59 f4       	brne	.+22     	; 0x91d2 <atan2+0xe>
    91bc:	5e ef       	ldi	r21, 0xFE	; 254
    91be:	09 c0       	rjmp	.+18     	; 0x91d2 <atan2+0xe>
    91c0:	58 c1       	rjmp	.+688    	; 0x9472 <__fp_nan>
    91c2:	c0 c1       	rjmp	.+896    	; 0x9544 <__fp_zero>

000091c4 <atan2>:
    91c4:	e9 2f       	mov	r30, r25
    91c6:	e0 78       	andi	r30, 0x80	; 128
    91c8:	9b d1       	rcall	.+822    	; 0x9500 <__fp_split3>
    91ca:	68 f3       	brcs	.-38     	; 0x91a6 <__addsf3x+0xa6>
    91cc:	09 2e       	mov	r0, r25
    91ce:	05 2a       	or	r0, r21
    91d0:	c1 f3       	breq	.-16     	; 0x91c2 <__addsf3x+0xc2>
    91d2:	26 17       	cp	r18, r22
    91d4:	37 07       	cpc	r19, r23
    91d6:	48 07       	cpc	r20, r24
    91d8:	59 07       	cpc	r21, r25
    91da:	38 f0       	brcs	.+14     	; 0x91ea <atan2+0x26>
    91dc:	0e 2e       	mov	r0, r30
    91de:	07 f8       	bld	r0, 7
    91e0:	e0 25       	eor	r30, r0
    91e2:	69 f0       	breq	.+26     	; 0x91fe <atan2+0x3a>
    91e4:	e0 25       	eor	r30, r0
    91e6:	e0 64       	ori	r30, 0x40	; 64
    91e8:	0a c0       	rjmp	.+20     	; 0x91fe <atan2+0x3a>
    91ea:	ef 63       	ori	r30, 0x3F	; 63
    91ec:	07 f8       	bld	r0, 7
    91ee:	00 94       	com	r0
    91f0:	07 fa       	bst	r0, 7
    91f2:	db 01       	movw	r26, r22
    91f4:	b9 01       	movw	r22, r18
    91f6:	9d 01       	movw	r18, r26
    91f8:	dc 01       	movw	r26, r24
    91fa:	ca 01       	movw	r24, r20
    91fc:	ad 01       	movw	r20, r26
    91fe:	ef 93       	push	r30
    9200:	47 d0       	rcall	.+142    	; 0x9290 <__divsf3_pse>
    9202:	6d d1       	rcall	.+730    	; 0x94de <__fp_round>
    9204:	0a d0       	rcall	.+20     	; 0x921a <atan>
    9206:	5f 91       	pop	r21
    9208:	55 23       	and	r21, r21
    920a:	31 f0       	breq	.+12     	; 0x9218 <atan2+0x54>
    920c:	2b ed       	ldi	r18, 0xDB	; 219
    920e:	3f e0       	ldi	r19, 0x0F	; 15
    9210:	49 e4       	ldi	r20, 0x49	; 73
    9212:	50 fd       	sbrc	r21, 0
    9214:	49 ec       	ldi	r20, 0xC9	; 201
    9216:	63 cf       	rjmp	.-314    	; 0x90de <__addsf3>
    9218:	08 95       	ret

0000921a <atan>:
    921a:	df 93       	push	r29
    921c:	dd 27       	eor	r29, r29
    921e:	b9 2f       	mov	r27, r25
    9220:	bf 77       	andi	r27, 0x7F	; 127
    9222:	40 e8       	ldi	r20, 0x80	; 128
    9224:	5f e3       	ldi	r21, 0x3F	; 63
    9226:	16 16       	cp	r1, r22
    9228:	17 06       	cpc	r1, r23
    922a:	48 07       	cpc	r20, r24
    922c:	5b 07       	cpc	r21, r27
    922e:	10 f4       	brcc	.+4      	; 0x9234 <atan+0x1a>
    9230:	d9 2f       	mov	r29, r25
    9232:	93 d1       	rcall	.+806    	; 0x955a <inverse>
    9234:	9f 93       	push	r25
    9236:	8f 93       	push	r24
    9238:	7f 93       	push	r23
    923a:	6f 93       	push	r22
    923c:	f8 d1       	rcall	.+1008   	; 0x962e <square>
    923e:	e4 ee       	ldi	r30, 0xE4	; 228
    9240:	f0 e0       	ldi	r31, 0x00	; 0
    9242:	1a d1       	rcall	.+564    	; 0x9478 <__fp_powser>
    9244:	4c d1       	rcall	.+664    	; 0x94de <__fp_round>
    9246:	2f 91       	pop	r18
    9248:	3f 91       	pop	r19
    924a:	4f 91       	pop	r20
    924c:	5f 91       	pop	r21
    924e:	98 d1       	rcall	.+816    	; 0x9580 <__mulsf3x>
    9250:	dd 23       	and	r29, r29
    9252:	49 f0       	breq	.+18     	; 0x9266 <atan+0x4c>
    9254:	90 58       	subi	r25, 0x80	; 128
    9256:	a2 ea       	ldi	r26, 0xA2	; 162
    9258:	2a ed       	ldi	r18, 0xDA	; 218
    925a:	3f e0       	ldi	r19, 0x0F	; 15
    925c:	49 ec       	ldi	r20, 0xC9	; 201
    925e:	5f e3       	ldi	r21, 0x3F	; 63
    9260:	d0 78       	andi	r29, 0x80	; 128
    9262:	5d 27       	eor	r21, r29
    9264:	4d df       	rcall	.-358    	; 0x9100 <__addsf3x>
    9266:	df 91       	pop	r29
    9268:	3a c1       	rjmp	.+628    	; 0x94de <__fp_round>

0000926a <__cmpsf2>:
    926a:	d9 d0       	rcall	.+434    	; 0x941e <__fp_cmp>
    926c:	08 f4       	brcc	.+2      	; 0x9270 <__cmpsf2+0x6>
    926e:	81 e0       	ldi	r24, 0x01	; 1
    9270:	08 95       	ret

00009272 <__divsf3>:
    9272:	0c d0       	rcall	.+24     	; 0x928c <__divsf3x>
    9274:	34 c1       	rjmp	.+616    	; 0x94de <__fp_round>
    9276:	2c d1       	rcall	.+600    	; 0x94d0 <__fp_pscB>
    9278:	40 f0       	brcs	.+16     	; 0x928a <__divsf3+0x18>
    927a:	23 d1       	rcall	.+582    	; 0x94c2 <__fp_pscA>
    927c:	30 f0       	brcs	.+12     	; 0x928a <__divsf3+0x18>
    927e:	21 f4       	brne	.+8      	; 0x9288 <__divsf3+0x16>
    9280:	5f 3f       	cpi	r21, 0xFF	; 255
    9282:	19 f0       	breq	.+6      	; 0x928a <__divsf3+0x18>
    9284:	f0 c0       	rjmp	.+480    	; 0x9466 <__fp_inf>
    9286:	51 11       	cpse	r21, r1
    9288:	5e c1       	rjmp	.+700    	; 0x9546 <__fp_szero>
    928a:	f3 c0       	rjmp	.+486    	; 0x9472 <__fp_nan>

0000928c <__divsf3x>:
    928c:	39 d1       	rcall	.+626    	; 0x9500 <__fp_split3>
    928e:	98 f3       	brcs	.-26     	; 0x9276 <__divsf3+0x4>

00009290 <__divsf3_pse>:
    9290:	99 23       	and	r25, r25
    9292:	c9 f3       	breq	.-14     	; 0x9286 <__divsf3+0x14>
    9294:	55 23       	and	r21, r21
    9296:	b1 f3       	breq	.-20     	; 0x9284 <__divsf3+0x12>
    9298:	95 1b       	sub	r25, r21
    929a:	55 0b       	sbc	r21, r21
    929c:	bb 27       	eor	r27, r27
    929e:	aa 27       	eor	r26, r26
    92a0:	62 17       	cp	r22, r18
    92a2:	73 07       	cpc	r23, r19
    92a4:	84 07       	cpc	r24, r20
    92a6:	38 f0       	brcs	.+14     	; 0x92b6 <__divsf3_pse+0x26>
    92a8:	9f 5f       	subi	r25, 0xFF	; 255
    92aa:	5f 4f       	sbci	r21, 0xFF	; 255
    92ac:	22 0f       	add	r18, r18
    92ae:	33 1f       	adc	r19, r19
    92b0:	44 1f       	adc	r20, r20
    92b2:	aa 1f       	adc	r26, r26
    92b4:	a9 f3       	breq	.-22     	; 0x92a0 <__divsf3_pse+0x10>
    92b6:	33 d0       	rcall	.+102    	; 0x931e <__divsf3_pse+0x8e>
    92b8:	0e 2e       	mov	r0, r30
    92ba:	3a f0       	brmi	.+14     	; 0x92ca <__divsf3_pse+0x3a>
    92bc:	e0 e8       	ldi	r30, 0x80	; 128
    92be:	30 d0       	rcall	.+96     	; 0x9320 <__divsf3_pse+0x90>
    92c0:	91 50       	subi	r25, 0x01	; 1
    92c2:	50 40       	sbci	r21, 0x00	; 0
    92c4:	e6 95       	lsr	r30
    92c6:	00 1c       	adc	r0, r0
    92c8:	ca f7       	brpl	.-14     	; 0x92bc <__divsf3_pse+0x2c>
    92ca:	29 d0       	rcall	.+82     	; 0x931e <__divsf3_pse+0x8e>
    92cc:	fe 2f       	mov	r31, r30
    92ce:	27 d0       	rcall	.+78     	; 0x931e <__divsf3_pse+0x8e>
    92d0:	66 0f       	add	r22, r22
    92d2:	77 1f       	adc	r23, r23
    92d4:	88 1f       	adc	r24, r24
    92d6:	bb 1f       	adc	r27, r27
    92d8:	26 17       	cp	r18, r22
    92da:	37 07       	cpc	r19, r23
    92dc:	48 07       	cpc	r20, r24
    92de:	ab 07       	cpc	r26, r27
    92e0:	b0 e8       	ldi	r27, 0x80	; 128
    92e2:	09 f0       	breq	.+2      	; 0x92e6 <__divsf3_pse+0x56>
    92e4:	bb 0b       	sbc	r27, r27
    92e6:	80 2d       	mov	r24, r0
    92e8:	bf 01       	movw	r22, r30
    92ea:	ff 27       	eor	r31, r31
    92ec:	93 58       	subi	r25, 0x83	; 131
    92ee:	5f 4f       	sbci	r21, 0xFF	; 255
    92f0:	2a f0       	brmi	.+10     	; 0x92fc <__divsf3_pse+0x6c>
    92f2:	9e 3f       	cpi	r25, 0xFE	; 254
    92f4:	51 05       	cpc	r21, r1
    92f6:	68 f0       	brcs	.+26     	; 0x9312 <__divsf3_pse+0x82>
    92f8:	b6 c0       	rjmp	.+364    	; 0x9466 <__fp_inf>
    92fa:	25 c1       	rjmp	.+586    	; 0x9546 <__fp_szero>
    92fc:	5f 3f       	cpi	r21, 0xFF	; 255
    92fe:	ec f3       	brlt	.-6      	; 0x92fa <__divsf3_pse+0x6a>
    9300:	98 3e       	cpi	r25, 0xE8	; 232
    9302:	dc f3       	brlt	.-10     	; 0x92fa <__divsf3_pse+0x6a>
    9304:	86 95       	lsr	r24
    9306:	77 95       	ror	r23
    9308:	67 95       	ror	r22
    930a:	b7 95       	ror	r27
    930c:	f7 95       	ror	r31
    930e:	9f 5f       	subi	r25, 0xFF	; 255
    9310:	c9 f7       	brne	.-14     	; 0x9304 <__divsf3_pse+0x74>
    9312:	88 0f       	add	r24, r24
    9314:	91 1d       	adc	r25, r1
    9316:	96 95       	lsr	r25
    9318:	87 95       	ror	r24
    931a:	97 f9       	bld	r25, 7
    931c:	08 95       	ret
    931e:	e1 e0       	ldi	r30, 0x01	; 1
    9320:	66 0f       	add	r22, r22
    9322:	77 1f       	adc	r23, r23
    9324:	88 1f       	adc	r24, r24
    9326:	bb 1f       	adc	r27, r27
    9328:	62 17       	cp	r22, r18
    932a:	73 07       	cpc	r23, r19
    932c:	84 07       	cpc	r24, r20
    932e:	ba 07       	cpc	r27, r26
    9330:	20 f0       	brcs	.+8      	; 0x933a <__divsf3_pse+0xaa>
    9332:	62 1b       	sub	r22, r18
    9334:	73 0b       	sbc	r23, r19
    9336:	84 0b       	sbc	r24, r20
    9338:	ba 0b       	sbc	r27, r26
    933a:	ee 1f       	adc	r30, r30
    933c:	88 f7       	brcc	.-30     	; 0x9320 <__divsf3_pse+0x90>
    933e:	e0 95       	com	r30
    9340:	08 95       	ret

00009342 <__fixsfsi>:
    9342:	04 d0       	rcall	.+8      	; 0x934c <__fixunssfsi>
    9344:	68 94       	set
    9346:	b1 11       	cpse	r27, r1
    9348:	fe c0       	rjmp	.+508    	; 0x9546 <__fp_szero>
    934a:	08 95       	ret

0000934c <__fixunssfsi>:
    934c:	e1 d0       	rcall	.+450    	; 0x9510 <__fp_splitA>
    934e:	88 f0       	brcs	.+34     	; 0x9372 <__fixunssfsi+0x26>
    9350:	9f 57       	subi	r25, 0x7F	; 127
    9352:	90 f0       	brcs	.+36     	; 0x9378 <__fixunssfsi+0x2c>
    9354:	b9 2f       	mov	r27, r25
    9356:	99 27       	eor	r25, r25
    9358:	b7 51       	subi	r27, 0x17	; 23
    935a:	a0 f0       	brcs	.+40     	; 0x9384 <__fixunssfsi+0x38>
    935c:	d1 f0       	breq	.+52     	; 0x9392 <__fixunssfsi+0x46>
    935e:	66 0f       	add	r22, r22
    9360:	77 1f       	adc	r23, r23
    9362:	88 1f       	adc	r24, r24
    9364:	99 1f       	adc	r25, r25
    9366:	1a f0       	brmi	.+6      	; 0x936e <__fixunssfsi+0x22>
    9368:	ba 95       	dec	r27
    936a:	c9 f7       	brne	.-14     	; 0x935e <__fixunssfsi+0x12>
    936c:	12 c0       	rjmp	.+36     	; 0x9392 <__fixunssfsi+0x46>
    936e:	b1 30       	cpi	r27, 0x01	; 1
    9370:	81 f0       	breq	.+32     	; 0x9392 <__fixunssfsi+0x46>
    9372:	e8 d0       	rcall	.+464    	; 0x9544 <__fp_zero>
    9374:	b1 e0       	ldi	r27, 0x01	; 1
    9376:	08 95       	ret
    9378:	e5 c0       	rjmp	.+458    	; 0x9544 <__fp_zero>
    937a:	67 2f       	mov	r22, r23
    937c:	78 2f       	mov	r23, r24
    937e:	88 27       	eor	r24, r24
    9380:	b8 5f       	subi	r27, 0xF8	; 248
    9382:	39 f0       	breq	.+14     	; 0x9392 <__fixunssfsi+0x46>
    9384:	b9 3f       	cpi	r27, 0xF9	; 249
    9386:	cc f3       	brlt	.-14     	; 0x937a <__fixunssfsi+0x2e>
    9388:	86 95       	lsr	r24
    938a:	77 95       	ror	r23
    938c:	67 95       	ror	r22
    938e:	b3 95       	inc	r27
    9390:	d9 f7       	brne	.-10     	; 0x9388 <__fixunssfsi+0x3c>
    9392:	3e f4       	brtc	.+14     	; 0x93a2 <__fixunssfsi+0x56>
    9394:	90 95       	com	r25
    9396:	80 95       	com	r24
    9398:	70 95       	com	r23
    939a:	61 95       	neg	r22
    939c:	7f 4f       	sbci	r23, 0xFF	; 255
    939e:	8f 4f       	sbci	r24, 0xFF	; 255
    93a0:	9f 4f       	sbci	r25, 0xFF	; 255
    93a2:	08 95       	ret

000093a4 <__floatunsisf>:
    93a4:	e8 94       	clt
    93a6:	09 c0       	rjmp	.+18     	; 0x93ba <__floatsisf+0x12>

000093a8 <__floatsisf>:
    93a8:	97 fb       	bst	r25, 7
    93aa:	3e f4       	brtc	.+14     	; 0x93ba <__floatsisf+0x12>
    93ac:	90 95       	com	r25
    93ae:	80 95       	com	r24
    93b0:	70 95       	com	r23
    93b2:	61 95       	neg	r22
    93b4:	7f 4f       	sbci	r23, 0xFF	; 255
    93b6:	8f 4f       	sbci	r24, 0xFF	; 255
    93b8:	9f 4f       	sbci	r25, 0xFF	; 255
    93ba:	99 23       	and	r25, r25
    93bc:	a9 f0       	breq	.+42     	; 0x93e8 <__floatsisf+0x40>
    93be:	f9 2f       	mov	r31, r25
    93c0:	96 e9       	ldi	r25, 0x96	; 150
    93c2:	bb 27       	eor	r27, r27
    93c4:	93 95       	inc	r25
    93c6:	f6 95       	lsr	r31
    93c8:	87 95       	ror	r24
    93ca:	77 95       	ror	r23
    93cc:	67 95       	ror	r22
    93ce:	b7 95       	ror	r27
    93d0:	f1 11       	cpse	r31, r1
    93d2:	f8 cf       	rjmp	.-16     	; 0x93c4 <__floatsisf+0x1c>
    93d4:	fa f4       	brpl	.+62     	; 0x9414 <__floatsisf+0x6c>
    93d6:	bb 0f       	add	r27, r27
    93d8:	11 f4       	brne	.+4      	; 0x93de <__floatsisf+0x36>
    93da:	60 ff       	sbrs	r22, 0
    93dc:	1b c0       	rjmp	.+54     	; 0x9414 <__floatsisf+0x6c>
    93de:	6f 5f       	subi	r22, 0xFF	; 255
    93e0:	7f 4f       	sbci	r23, 0xFF	; 255
    93e2:	8f 4f       	sbci	r24, 0xFF	; 255
    93e4:	9f 4f       	sbci	r25, 0xFF	; 255
    93e6:	16 c0       	rjmp	.+44     	; 0x9414 <__floatsisf+0x6c>
    93e8:	88 23       	and	r24, r24
    93ea:	11 f0       	breq	.+4      	; 0x93f0 <__floatsisf+0x48>
    93ec:	96 e9       	ldi	r25, 0x96	; 150
    93ee:	11 c0       	rjmp	.+34     	; 0x9412 <__floatsisf+0x6a>
    93f0:	77 23       	and	r23, r23
    93f2:	21 f0       	breq	.+8      	; 0x93fc <__floatsisf+0x54>
    93f4:	9e e8       	ldi	r25, 0x8E	; 142
    93f6:	87 2f       	mov	r24, r23
    93f8:	76 2f       	mov	r23, r22
    93fa:	05 c0       	rjmp	.+10     	; 0x9406 <__floatsisf+0x5e>
    93fc:	66 23       	and	r22, r22
    93fe:	71 f0       	breq	.+28     	; 0x941c <__floatsisf+0x74>
    9400:	96 e8       	ldi	r25, 0x86	; 134
    9402:	86 2f       	mov	r24, r22
    9404:	70 e0       	ldi	r23, 0x00	; 0
    9406:	60 e0       	ldi	r22, 0x00	; 0
    9408:	2a f0       	brmi	.+10     	; 0x9414 <__floatsisf+0x6c>
    940a:	9a 95       	dec	r25
    940c:	66 0f       	add	r22, r22
    940e:	77 1f       	adc	r23, r23
    9410:	88 1f       	adc	r24, r24
    9412:	da f7       	brpl	.-10     	; 0x940a <__floatsisf+0x62>
    9414:	88 0f       	add	r24, r24
    9416:	96 95       	lsr	r25
    9418:	87 95       	ror	r24
    941a:	97 f9       	bld	r25, 7
    941c:	08 95       	ret

0000941e <__fp_cmp>:
    941e:	99 0f       	add	r25, r25
    9420:	00 08       	sbc	r0, r0
    9422:	55 0f       	add	r21, r21
    9424:	aa 0b       	sbc	r26, r26
    9426:	e0 e8       	ldi	r30, 0x80	; 128
    9428:	fe ef       	ldi	r31, 0xFE	; 254
    942a:	16 16       	cp	r1, r22
    942c:	17 06       	cpc	r1, r23
    942e:	e8 07       	cpc	r30, r24
    9430:	f9 07       	cpc	r31, r25
    9432:	c0 f0       	brcs	.+48     	; 0x9464 <__fp_cmp+0x46>
    9434:	12 16       	cp	r1, r18
    9436:	13 06       	cpc	r1, r19
    9438:	e4 07       	cpc	r30, r20
    943a:	f5 07       	cpc	r31, r21
    943c:	98 f0       	brcs	.+38     	; 0x9464 <__fp_cmp+0x46>
    943e:	62 1b       	sub	r22, r18
    9440:	73 0b       	sbc	r23, r19
    9442:	84 0b       	sbc	r24, r20
    9444:	95 0b       	sbc	r25, r21
    9446:	39 f4       	brne	.+14     	; 0x9456 <__fp_cmp+0x38>
    9448:	0a 26       	eor	r0, r26
    944a:	61 f0       	breq	.+24     	; 0x9464 <__fp_cmp+0x46>
    944c:	23 2b       	or	r18, r19
    944e:	24 2b       	or	r18, r20
    9450:	25 2b       	or	r18, r21
    9452:	21 f4       	brne	.+8      	; 0x945c <__fp_cmp+0x3e>
    9454:	08 95       	ret
    9456:	0a 26       	eor	r0, r26
    9458:	09 f4       	brne	.+2      	; 0x945c <__fp_cmp+0x3e>
    945a:	a1 40       	sbci	r26, 0x01	; 1
    945c:	a6 95       	lsr	r26
    945e:	8f ef       	ldi	r24, 0xFF	; 255
    9460:	81 1d       	adc	r24, r1
    9462:	81 1d       	adc	r24, r1
    9464:	08 95       	ret

00009466 <__fp_inf>:
    9466:	97 f9       	bld	r25, 7
    9468:	9f 67       	ori	r25, 0x7F	; 127
    946a:	80 e8       	ldi	r24, 0x80	; 128
    946c:	70 e0       	ldi	r23, 0x00	; 0
    946e:	60 e0       	ldi	r22, 0x00	; 0
    9470:	08 95       	ret

00009472 <__fp_nan>:
    9472:	9f ef       	ldi	r25, 0xFF	; 255
    9474:	80 ec       	ldi	r24, 0xC0	; 192
    9476:	08 95       	ret

00009478 <__fp_powser>:
    9478:	df 93       	push	r29
    947a:	cf 93       	push	r28
    947c:	1f 93       	push	r17
    947e:	0f 93       	push	r16
    9480:	ff 92       	push	r15
    9482:	ef 92       	push	r14
    9484:	df 92       	push	r13
    9486:	7b 01       	movw	r14, r22
    9488:	8c 01       	movw	r16, r24
    948a:	68 94       	set
    948c:	05 c0       	rjmp	.+10     	; 0x9498 <__fp_powser+0x20>
    948e:	da 2e       	mov	r13, r26
    9490:	ef 01       	movw	r28, r30
    9492:	76 d0       	rcall	.+236    	; 0x9580 <__mulsf3x>
    9494:	fe 01       	movw	r30, r28
    9496:	e8 94       	clt
    9498:	a5 91       	lpm	r26, Z+
    949a:	25 91       	lpm	r18, Z+
    949c:	35 91       	lpm	r19, Z+
    949e:	45 91       	lpm	r20, Z+
    94a0:	55 91       	lpm	r21, Z+
    94a2:	ae f3       	brts	.-22     	; 0x948e <__fp_powser+0x16>
    94a4:	ef 01       	movw	r28, r30
    94a6:	2c de       	rcall	.-936    	; 0x9100 <__addsf3x>
    94a8:	fe 01       	movw	r30, r28
    94aa:	97 01       	movw	r18, r14
    94ac:	a8 01       	movw	r20, r16
    94ae:	da 94       	dec	r13
    94b0:	79 f7       	brne	.-34     	; 0x9490 <__fp_powser+0x18>
    94b2:	df 90       	pop	r13
    94b4:	ef 90       	pop	r14
    94b6:	ff 90       	pop	r15
    94b8:	0f 91       	pop	r16
    94ba:	1f 91       	pop	r17
    94bc:	cf 91       	pop	r28
    94be:	df 91       	pop	r29
    94c0:	08 95       	ret

000094c2 <__fp_pscA>:
    94c2:	00 24       	eor	r0, r0
    94c4:	0a 94       	dec	r0
    94c6:	16 16       	cp	r1, r22
    94c8:	17 06       	cpc	r1, r23
    94ca:	18 06       	cpc	r1, r24
    94cc:	09 06       	cpc	r0, r25
    94ce:	08 95       	ret

000094d0 <__fp_pscB>:
    94d0:	00 24       	eor	r0, r0
    94d2:	0a 94       	dec	r0
    94d4:	12 16       	cp	r1, r18
    94d6:	13 06       	cpc	r1, r19
    94d8:	14 06       	cpc	r1, r20
    94da:	05 06       	cpc	r0, r21
    94dc:	08 95       	ret

000094de <__fp_round>:
    94de:	09 2e       	mov	r0, r25
    94e0:	03 94       	inc	r0
    94e2:	00 0c       	add	r0, r0
    94e4:	11 f4       	brne	.+4      	; 0x94ea <__fp_round+0xc>
    94e6:	88 23       	and	r24, r24
    94e8:	52 f0       	brmi	.+20     	; 0x94fe <__fp_round+0x20>
    94ea:	bb 0f       	add	r27, r27
    94ec:	40 f4       	brcc	.+16     	; 0x94fe <__fp_round+0x20>
    94ee:	bf 2b       	or	r27, r31
    94f0:	11 f4       	brne	.+4      	; 0x94f6 <__fp_round+0x18>
    94f2:	60 ff       	sbrs	r22, 0
    94f4:	04 c0       	rjmp	.+8      	; 0x94fe <__fp_round+0x20>
    94f6:	6f 5f       	subi	r22, 0xFF	; 255
    94f8:	7f 4f       	sbci	r23, 0xFF	; 255
    94fa:	8f 4f       	sbci	r24, 0xFF	; 255
    94fc:	9f 4f       	sbci	r25, 0xFF	; 255
    94fe:	08 95       	ret

00009500 <__fp_split3>:
    9500:	57 fd       	sbrc	r21, 7
    9502:	90 58       	subi	r25, 0x80	; 128
    9504:	44 0f       	add	r20, r20
    9506:	55 1f       	adc	r21, r21
    9508:	59 f0       	breq	.+22     	; 0x9520 <__fp_splitA+0x10>
    950a:	5f 3f       	cpi	r21, 0xFF	; 255
    950c:	71 f0       	breq	.+28     	; 0x952a <__fp_splitA+0x1a>
    950e:	47 95       	ror	r20

00009510 <__fp_splitA>:
    9510:	88 0f       	add	r24, r24
    9512:	97 fb       	bst	r25, 7
    9514:	99 1f       	adc	r25, r25
    9516:	61 f0       	breq	.+24     	; 0x9530 <__fp_splitA+0x20>
    9518:	9f 3f       	cpi	r25, 0xFF	; 255
    951a:	79 f0       	breq	.+30     	; 0x953a <__fp_splitA+0x2a>
    951c:	87 95       	ror	r24
    951e:	08 95       	ret
    9520:	12 16       	cp	r1, r18
    9522:	13 06       	cpc	r1, r19
    9524:	14 06       	cpc	r1, r20
    9526:	55 1f       	adc	r21, r21
    9528:	f2 cf       	rjmp	.-28     	; 0x950e <__fp_split3+0xe>
    952a:	46 95       	lsr	r20
    952c:	f1 df       	rcall	.-30     	; 0x9510 <__fp_splitA>
    952e:	08 c0       	rjmp	.+16     	; 0x9540 <__fp_splitA+0x30>
    9530:	16 16       	cp	r1, r22
    9532:	17 06       	cpc	r1, r23
    9534:	18 06       	cpc	r1, r24
    9536:	99 1f       	adc	r25, r25
    9538:	f1 cf       	rjmp	.-30     	; 0x951c <__fp_splitA+0xc>
    953a:	86 95       	lsr	r24
    953c:	71 05       	cpc	r23, r1
    953e:	61 05       	cpc	r22, r1
    9540:	08 94       	sec
    9542:	08 95       	ret

00009544 <__fp_zero>:
    9544:	e8 94       	clt

00009546 <__fp_szero>:
    9546:	bb 27       	eor	r27, r27
    9548:	66 27       	eor	r22, r22
    954a:	77 27       	eor	r23, r23
    954c:	cb 01       	movw	r24, r22
    954e:	97 f9       	bld	r25, 7
    9550:	08 95       	ret

00009552 <__gesf2>:
    9552:	65 df       	rcall	.-310    	; 0x941e <__fp_cmp>
    9554:	08 f4       	brcc	.+2      	; 0x9558 <__gesf2+0x6>
    9556:	8f ef       	ldi	r24, 0xFF	; 255
    9558:	08 95       	ret

0000955a <inverse>:
    955a:	9b 01       	movw	r18, r22
    955c:	ac 01       	movw	r20, r24
    955e:	60 e0       	ldi	r22, 0x00	; 0
    9560:	70 e0       	ldi	r23, 0x00	; 0
    9562:	80 e8       	ldi	r24, 0x80	; 128
    9564:	9f e3       	ldi	r25, 0x3F	; 63
    9566:	85 ce       	rjmp	.-758    	; 0x9272 <__divsf3>

00009568 <__mulsf3>:
    9568:	0b d0       	rcall	.+22     	; 0x9580 <__mulsf3x>
    956a:	b9 cf       	rjmp	.-142    	; 0x94de <__fp_round>
    956c:	aa df       	rcall	.-172    	; 0x94c2 <__fp_pscA>
    956e:	28 f0       	brcs	.+10     	; 0x957a <__mulsf3+0x12>
    9570:	af df       	rcall	.-162    	; 0x94d0 <__fp_pscB>
    9572:	18 f0       	brcs	.+6      	; 0x957a <__mulsf3+0x12>
    9574:	95 23       	and	r25, r21
    9576:	09 f0       	breq	.+2      	; 0x957a <__mulsf3+0x12>
    9578:	76 cf       	rjmp	.-276    	; 0x9466 <__fp_inf>
    957a:	7b cf       	rjmp	.-266    	; 0x9472 <__fp_nan>
    957c:	11 24       	eor	r1, r1
    957e:	e3 cf       	rjmp	.-58     	; 0x9546 <__fp_szero>

00009580 <__mulsf3x>:
    9580:	bf df       	rcall	.-130    	; 0x9500 <__fp_split3>
    9582:	a0 f3       	brcs	.-24     	; 0x956c <__mulsf3+0x4>

00009584 <__mulsf3_pse>:
    9584:	95 9f       	mul	r25, r21
    9586:	d1 f3       	breq	.-12     	; 0x957c <__mulsf3+0x14>
    9588:	95 0f       	add	r25, r21
    958a:	50 e0       	ldi	r21, 0x00	; 0
    958c:	55 1f       	adc	r21, r21
    958e:	62 9f       	mul	r22, r18
    9590:	f0 01       	movw	r30, r0
    9592:	72 9f       	mul	r23, r18
    9594:	bb 27       	eor	r27, r27
    9596:	f0 0d       	add	r31, r0
    9598:	b1 1d       	adc	r27, r1
    959a:	63 9f       	mul	r22, r19
    959c:	aa 27       	eor	r26, r26
    959e:	f0 0d       	add	r31, r0
    95a0:	b1 1d       	adc	r27, r1
    95a2:	aa 1f       	adc	r26, r26
    95a4:	64 9f       	mul	r22, r20
    95a6:	66 27       	eor	r22, r22
    95a8:	b0 0d       	add	r27, r0
    95aa:	a1 1d       	adc	r26, r1
    95ac:	66 1f       	adc	r22, r22
    95ae:	82 9f       	mul	r24, r18
    95b0:	22 27       	eor	r18, r18
    95b2:	b0 0d       	add	r27, r0
    95b4:	a1 1d       	adc	r26, r1
    95b6:	62 1f       	adc	r22, r18
    95b8:	73 9f       	mul	r23, r19
    95ba:	b0 0d       	add	r27, r0
    95bc:	a1 1d       	adc	r26, r1
    95be:	62 1f       	adc	r22, r18
    95c0:	83 9f       	mul	r24, r19
    95c2:	a0 0d       	add	r26, r0
    95c4:	61 1d       	adc	r22, r1
    95c6:	22 1f       	adc	r18, r18
    95c8:	74 9f       	mul	r23, r20
    95ca:	33 27       	eor	r19, r19
    95cc:	a0 0d       	add	r26, r0
    95ce:	61 1d       	adc	r22, r1
    95d0:	23 1f       	adc	r18, r19
    95d2:	84 9f       	mul	r24, r20
    95d4:	60 0d       	add	r22, r0
    95d6:	21 1d       	adc	r18, r1
    95d8:	82 2f       	mov	r24, r18
    95da:	76 2f       	mov	r23, r22
    95dc:	6a 2f       	mov	r22, r26
    95de:	11 24       	eor	r1, r1
    95e0:	9f 57       	subi	r25, 0x7F	; 127
    95e2:	50 40       	sbci	r21, 0x00	; 0
    95e4:	8a f0       	brmi	.+34     	; 0x9608 <__mulsf3_pse+0x84>
    95e6:	e1 f0       	breq	.+56     	; 0x9620 <__mulsf3_pse+0x9c>
    95e8:	88 23       	and	r24, r24
    95ea:	4a f0       	brmi	.+18     	; 0x95fe <__mulsf3_pse+0x7a>
    95ec:	ee 0f       	add	r30, r30
    95ee:	ff 1f       	adc	r31, r31
    95f0:	bb 1f       	adc	r27, r27
    95f2:	66 1f       	adc	r22, r22
    95f4:	77 1f       	adc	r23, r23
    95f6:	88 1f       	adc	r24, r24
    95f8:	91 50       	subi	r25, 0x01	; 1
    95fa:	50 40       	sbci	r21, 0x00	; 0
    95fc:	a9 f7       	brne	.-22     	; 0x95e8 <__mulsf3_pse+0x64>
    95fe:	9e 3f       	cpi	r25, 0xFE	; 254
    9600:	51 05       	cpc	r21, r1
    9602:	70 f0       	brcs	.+28     	; 0x9620 <__mulsf3_pse+0x9c>
    9604:	30 cf       	rjmp	.-416    	; 0x9466 <__fp_inf>
    9606:	9f cf       	rjmp	.-194    	; 0x9546 <__fp_szero>
    9608:	5f 3f       	cpi	r21, 0xFF	; 255
    960a:	ec f3       	brlt	.-6      	; 0x9606 <__mulsf3_pse+0x82>
    960c:	98 3e       	cpi	r25, 0xE8	; 232
    960e:	dc f3       	brlt	.-10     	; 0x9606 <__mulsf3_pse+0x82>
    9610:	86 95       	lsr	r24
    9612:	77 95       	ror	r23
    9614:	67 95       	ror	r22
    9616:	b7 95       	ror	r27
    9618:	f7 95       	ror	r31
    961a:	e7 95       	ror	r30
    961c:	9f 5f       	subi	r25, 0xFF	; 255
    961e:	c1 f7       	brne	.-16     	; 0x9610 <__mulsf3_pse+0x8c>
    9620:	fe 2b       	or	r31, r30
    9622:	88 0f       	add	r24, r24
    9624:	91 1d       	adc	r25, r1
    9626:	96 95       	lsr	r25
    9628:	87 95       	ror	r24
    962a:	97 f9       	bld	r25, 7
    962c:	08 95       	ret

0000962e <square>:
    962e:	9b 01       	movw	r18, r22
    9630:	ac 01       	movw	r20, r24
    9632:	9a cf       	rjmp	.-204    	; 0x9568 <__mulsf3>

00009634 <__mulsi3>:
    9634:	62 9f       	mul	r22, r18
    9636:	d0 01       	movw	r26, r0
    9638:	73 9f       	mul	r23, r19
    963a:	f0 01       	movw	r30, r0
    963c:	82 9f       	mul	r24, r18
    963e:	e0 0d       	add	r30, r0
    9640:	f1 1d       	adc	r31, r1
    9642:	64 9f       	mul	r22, r20
    9644:	e0 0d       	add	r30, r0
    9646:	f1 1d       	adc	r31, r1
    9648:	92 9f       	mul	r25, r18
    964a:	f0 0d       	add	r31, r0
    964c:	83 9f       	mul	r24, r19
    964e:	f0 0d       	add	r31, r0
    9650:	74 9f       	mul	r23, r20
    9652:	f0 0d       	add	r31, r0
    9654:	65 9f       	mul	r22, r21
    9656:	f0 0d       	add	r31, r0
    9658:	99 27       	eor	r25, r25
    965a:	72 9f       	mul	r23, r18
    965c:	b0 0d       	add	r27, r0
    965e:	e1 1d       	adc	r30, r1
    9660:	f9 1f       	adc	r31, r25
    9662:	63 9f       	mul	r22, r19
    9664:	b0 0d       	add	r27, r0
    9666:	e1 1d       	adc	r30, r1
    9668:	f9 1f       	adc	r31, r25
    966a:	bd 01       	movw	r22, r26
    966c:	cf 01       	movw	r24, r30
    966e:	11 24       	eor	r1, r1
    9670:	08 95       	ret

00009672 <__udivmodqi4>:
    9672:	99 1b       	sub	r25, r25
    9674:	79 e0       	ldi	r23, 0x09	; 9
    9676:	04 c0       	rjmp	.+8      	; 0x9680 <__udivmodqi4_ep>

00009678 <__udivmodqi4_loop>:
    9678:	99 1f       	adc	r25, r25
    967a:	96 17       	cp	r25, r22
    967c:	08 f0       	brcs	.+2      	; 0x9680 <__udivmodqi4_ep>
    967e:	96 1b       	sub	r25, r22

00009680 <__udivmodqi4_ep>:
    9680:	88 1f       	adc	r24, r24
    9682:	7a 95       	dec	r23
    9684:	c9 f7       	brne	.-14     	; 0x9678 <__udivmodqi4_loop>
    9686:	80 95       	com	r24
    9688:	08 95       	ret

0000968a <__udivmodsi4>:
    968a:	a1 e2       	ldi	r26, 0x21	; 33
    968c:	1a 2e       	mov	r1, r26
    968e:	aa 1b       	sub	r26, r26
    9690:	bb 1b       	sub	r27, r27
    9692:	fd 01       	movw	r30, r26
    9694:	0d c0       	rjmp	.+26     	; 0x96b0 <__udivmodsi4_ep>

00009696 <__udivmodsi4_loop>:
    9696:	aa 1f       	adc	r26, r26
    9698:	bb 1f       	adc	r27, r27
    969a:	ee 1f       	adc	r30, r30
    969c:	ff 1f       	adc	r31, r31
    969e:	a2 17       	cp	r26, r18
    96a0:	b3 07       	cpc	r27, r19
    96a2:	e4 07       	cpc	r30, r20
    96a4:	f5 07       	cpc	r31, r21
    96a6:	20 f0       	brcs	.+8      	; 0x96b0 <__udivmodsi4_ep>
    96a8:	a2 1b       	sub	r26, r18
    96aa:	b3 0b       	sbc	r27, r19
    96ac:	e4 0b       	sbc	r30, r20
    96ae:	f5 0b       	sbc	r31, r21

000096b0 <__udivmodsi4_ep>:
    96b0:	66 1f       	adc	r22, r22
    96b2:	77 1f       	adc	r23, r23
    96b4:	88 1f       	adc	r24, r24
    96b6:	99 1f       	adc	r25, r25
    96b8:	1a 94       	dec	r1
    96ba:	69 f7       	brne	.-38     	; 0x9696 <__udivmodsi4_loop>
    96bc:	60 95       	com	r22
    96be:	70 95       	com	r23
    96c0:	80 95       	com	r24
    96c2:	90 95       	com	r25
    96c4:	9b 01       	movw	r18, r22
    96c6:	ac 01       	movw	r20, r24
    96c8:	bd 01       	movw	r22, r26
    96ca:	cf 01       	movw	r24, r30
    96cc:	08 95       	ret

000096ce <__divmodsi4>:
    96ce:	97 fb       	bst	r25, 7
    96d0:	09 2e       	mov	r0, r25
    96d2:	05 26       	eor	r0, r21
    96d4:	0e d0       	rcall	.+28     	; 0x96f2 <__divmodsi4_neg1>
    96d6:	57 fd       	sbrc	r21, 7
    96d8:	04 d0       	rcall	.+8      	; 0x96e2 <__divmodsi4_neg2>
    96da:	d7 df       	rcall	.-82     	; 0x968a <__udivmodsi4>
    96dc:	0a d0       	rcall	.+20     	; 0x96f2 <__divmodsi4_neg1>
    96de:	00 1c       	adc	r0, r0
    96e0:	38 f4       	brcc	.+14     	; 0x96f0 <__divmodsi4_exit>

000096e2 <__divmodsi4_neg2>:
    96e2:	50 95       	com	r21
    96e4:	40 95       	com	r20
    96e6:	30 95       	com	r19
    96e8:	21 95       	neg	r18
    96ea:	3f 4f       	sbci	r19, 0xFF	; 255
    96ec:	4f 4f       	sbci	r20, 0xFF	; 255
    96ee:	5f 4f       	sbci	r21, 0xFF	; 255

000096f0 <__divmodsi4_exit>:
    96f0:	08 95       	ret

000096f2 <__divmodsi4_neg1>:
    96f2:	f6 f7       	brtc	.-4      	; 0x96f0 <__divmodsi4_exit>
    96f4:	90 95       	com	r25
    96f6:	80 95       	com	r24
    96f8:	70 95       	com	r23
    96fa:	61 95       	neg	r22
    96fc:	7f 4f       	sbci	r23, 0xFF	; 255
    96fe:	8f 4f       	sbci	r24, 0xFF	; 255
    9700:	9f 4f       	sbci	r25, 0xFF	; 255
    9702:	08 95       	ret

00009704 <__tablejump_elpm__>:
    9704:	07 90       	elpm	r0, Z+
    9706:	f6 91       	elpm	r31, Z
    9708:	e0 2d       	mov	r30, r0
    970a:	19 94       	eijmp

0000970c <malloc>:
    970c:	cf 93       	push	r28
    970e:	df 93       	push	r29
    9710:	ac 01       	movw	r20, r24
    9712:	82 30       	cpi	r24, 0x02	; 2
    9714:	91 05       	cpc	r25, r1
    9716:	10 f4       	brcc	.+4      	; 0x971c <malloc+0x10>
    9718:	42 e0       	ldi	r20, 0x02	; 2
    971a:	50 e0       	ldi	r21, 0x00	; 0
    971c:	e0 91 f1 09 	lds	r30, 0x09F1
    9720:	f0 91 f2 09 	lds	r31, 0x09F2
    9724:	20 e0       	ldi	r18, 0x00	; 0
    9726:	30 e0       	ldi	r19, 0x00	; 0
    9728:	a0 e0       	ldi	r26, 0x00	; 0
    972a:	b0 e0       	ldi	r27, 0x00	; 0
    972c:	24 c0       	rjmp	.+72     	; 0x9776 <malloc+0x6a>
    972e:	80 81       	ld	r24, Z
    9730:	91 81       	ldd	r25, Z+1	; 0x01
    9732:	84 17       	cp	r24, r20
    9734:	95 07       	cpc	r25, r21
    9736:	d0 f0       	brcs	.+52     	; 0x976c <malloc+0x60>
    9738:	84 17       	cp	r24, r20
    973a:	95 07       	cpc	r25, r21
    973c:	71 f4       	brne	.+28     	; 0x975a <malloc+0x4e>
    973e:	82 81       	ldd	r24, Z+2	; 0x02
    9740:	93 81       	ldd	r25, Z+3	; 0x03
    9742:	10 97       	sbiw	r26, 0x00	; 0
    9744:	29 f0       	breq	.+10     	; 0x9750 <malloc+0x44>
    9746:	13 96       	adiw	r26, 0x03	; 3
    9748:	9c 93       	st	X, r25
    974a:	8e 93       	st	-X, r24
    974c:	12 97       	sbiw	r26, 0x02	; 2
    974e:	2c c0       	rjmp	.+88     	; 0x97a8 <malloc+0x9c>
    9750:	90 93 f2 09 	sts	0x09F2, r25
    9754:	80 93 f1 09 	sts	0x09F1, r24
    9758:	27 c0       	rjmp	.+78     	; 0x97a8 <malloc+0x9c>
    975a:	21 15       	cp	r18, r1
    975c:	31 05       	cpc	r19, r1
    975e:	19 f0       	breq	.+6      	; 0x9766 <malloc+0x5a>
    9760:	82 17       	cp	r24, r18
    9762:	93 07       	cpc	r25, r19
    9764:	18 f4       	brcc	.+6      	; 0x976c <malloc+0x60>
    9766:	9c 01       	movw	r18, r24
    9768:	bd 01       	movw	r22, r26
    976a:	ef 01       	movw	r28, r30
    976c:	92 81       	ldd	r25, Z+2	; 0x02
    976e:	83 81       	ldd	r24, Z+3	; 0x03
    9770:	df 01       	movw	r26, r30
    9772:	e9 2f       	mov	r30, r25
    9774:	f8 2f       	mov	r31, r24
    9776:	30 97       	sbiw	r30, 0x00	; 0
    9778:	d1 f6       	brne	.-76     	; 0x972e <malloc+0x22>
    977a:	21 15       	cp	r18, r1
    977c:	31 05       	cpc	r19, r1
    977e:	f9 f0       	breq	.+62     	; 0x97be <malloc+0xb2>
    9780:	c9 01       	movw	r24, r18
    9782:	84 1b       	sub	r24, r20
    9784:	95 0b       	sbc	r25, r21
    9786:	84 30       	cpi	r24, 0x04	; 4
    9788:	91 05       	cpc	r25, r1
    978a:	80 f4       	brcc	.+32     	; 0x97ac <malloc+0xa0>
    978c:	8a 81       	ldd	r24, Y+2	; 0x02
    978e:	9b 81       	ldd	r25, Y+3	; 0x03
    9790:	61 15       	cp	r22, r1
    9792:	71 05       	cpc	r23, r1
    9794:	21 f0       	breq	.+8      	; 0x979e <malloc+0x92>
    9796:	fb 01       	movw	r30, r22
    9798:	93 83       	std	Z+3, r25	; 0x03
    979a:	82 83       	std	Z+2, r24	; 0x02
    979c:	04 c0       	rjmp	.+8      	; 0x97a6 <malloc+0x9a>
    979e:	90 93 f2 09 	sts	0x09F2, r25
    97a2:	80 93 f1 09 	sts	0x09F1, r24
    97a6:	fe 01       	movw	r30, r28
    97a8:	32 96       	adiw	r30, 0x02	; 2
    97aa:	42 c0       	rjmp	.+132    	; 0x9830 <malloc+0x124>
    97ac:	fe 01       	movw	r30, r28
    97ae:	e8 0f       	add	r30, r24
    97b0:	f9 1f       	adc	r31, r25
    97b2:	41 93       	st	Z+, r20
    97b4:	51 93       	st	Z+, r21
    97b6:	02 97       	sbiw	r24, 0x02	; 2
    97b8:	99 83       	std	Y+1, r25	; 0x01
    97ba:	88 83       	st	Y, r24
    97bc:	39 c0       	rjmp	.+114    	; 0x9830 <malloc+0x124>
    97be:	80 91 ef 09 	lds	r24, 0x09EF
    97c2:	90 91 f0 09 	lds	r25, 0x09F0
    97c6:	00 97       	sbiw	r24, 0x00	; 0
    97c8:	41 f4       	brne	.+16     	; 0x97da <malloc+0xce>
    97ca:	80 91 b9 03 	lds	r24, 0x03B9
    97ce:	90 91 ba 03 	lds	r25, 0x03BA
    97d2:	90 93 f0 09 	sts	0x09F0, r25
    97d6:	80 93 ef 09 	sts	0x09EF, r24
    97da:	20 91 b7 03 	lds	r18, 0x03B7
    97de:	30 91 b8 03 	lds	r19, 0x03B8
    97e2:	21 15       	cp	r18, r1
    97e4:	31 05       	cpc	r19, r1
    97e6:	41 f4       	brne	.+16     	; 0x97f8 <malloc+0xec>
    97e8:	2d b7       	in	r18, 0x3d	; 61
    97ea:	3e b7       	in	r19, 0x3e	; 62
    97ec:	80 91 bb 03 	lds	r24, 0x03BB
    97f0:	90 91 bc 03 	lds	r25, 0x03BC
    97f4:	28 1b       	sub	r18, r24
    97f6:	39 0b       	sbc	r19, r25
    97f8:	e0 91 ef 09 	lds	r30, 0x09EF
    97fc:	f0 91 f0 09 	lds	r31, 0x09F0
    9800:	e2 17       	cp	r30, r18
    9802:	f3 07       	cpc	r31, r19
    9804:	98 f4       	brcc	.+38     	; 0x982c <malloc+0x120>
    9806:	2e 1b       	sub	r18, r30
    9808:	3f 0b       	sbc	r19, r31
    980a:	24 17       	cp	r18, r20
    980c:	35 07       	cpc	r19, r21
    980e:	70 f0       	brcs	.+28     	; 0x982c <malloc+0x120>
    9810:	ca 01       	movw	r24, r20
    9812:	02 96       	adiw	r24, 0x02	; 2
    9814:	28 17       	cp	r18, r24
    9816:	39 07       	cpc	r19, r25
    9818:	48 f0       	brcs	.+18     	; 0x982c <malloc+0x120>
    981a:	8e 0f       	add	r24, r30
    981c:	9f 1f       	adc	r25, r31
    981e:	90 93 f0 09 	sts	0x09F0, r25
    9822:	80 93 ef 09 	sts	0x09EF, r24
    9826:	41 93       	st	Z+, r20
    9828:	51 93       	st	Z+, r21
    982a:	02 c0       	rjmp	.+4      	; 0x9830 <malloc+0x124>
    982c:	e0 e0       	ldi	r30, 0x00	; 0
    982e:	f0 e0       	ldi	r31, 0x00	; 0
    9830:	cf 01       	movw	r24, r30
    9832:	df 91       	pop	r29
    9834:	cf 91       	pop	r28
    9836:	08 95       	ret

00009838 <free>:
    9838:	0f 93       	push	r16
    983a:	1f 93       	push	r17
    983c:	cf 93       	push	r28
    983e:	df 93       	push	r29
    9840:	9c 01       	movw	r18, r24
    9842:	00 97       	sbiw	r24, 0x00	; 0
    9844:	09 f4       	brne	.+2      	; 0x9848 <free+0x10>
    9846:	8c c0       	rjmp	.+280    	; 0x9960 <free+0x128>
    9848:	dc 01       	movw	r26, r24
    984a:	12 97       	sbiw	r26, 0x02	; 2
    984c:	13 96       	adiw	r26, 0x03	; 3
    984e:	1c 92       	st	X, r1
    9850:	1e 92       	st	-X, r1
    9852:	12 97       	sbiw	r26, 0x02	; 2
    9854:	60 91 f1 09 	lds	r22, 0x09F1
    9858:	70 91 f2 09 	lds	r23, 0x09F2
    985c:	61 15       	cp	r22, r1
    985e:	71 05       	cpc	r23, r1
    9860:	89 f4       	brne	.+34     	; 0x9884 <free+0x4c>
    9862:	8d 91       	ld	r24, X+
    9864:	9c 91       	ld	r25, X
    9866:	11 97       	sbiw	r26, 0x01	; 1
    9868:	82 0f       	add	r24, r18
    986a:	93 1f       	adc	r25, r19
    986c:	20 91 ef 09 	lds	r18, 0x09EF
    9870:	30 91 f0 09 	lds	r19, 0x09F0
    9874:	28 17       	cp	r18, r24
    9876:	39 07       	cpc	r19, r25
    9878:	69 f5       	brne	.+90     	; 0x98d4 <free+0x9c>
    987a:	b0 93 f0 09 	sts	0x09F0, r27
    987e:	a0 93 ef 09 	sts	0x09EF, r26
    9882:	6e c0       	rjmp	.+220    	; 0x9960 <free+0x128>
    9884:	fb 01       	movw	r30, r22
    9886:	40 e0       	ldi	r20, 0x00	; 0
    9888:	50 e0       	ldi	r21, 0x00	; 0
    988a:	01 c0       	rjmp	.+2      	; 0x988e <free+0x56>
    988c:	fc 01       	movw	r30, r24
    988e:	ea 17       	cp	r30, r26
    9890:	fb 07       	cpc	r31, r27
    9892:	30 f4       	brcc	.+12     	; 0x98a0 <free+0x68>
    9894:	82 81       	ldd	r24, Z+2	; 0x02
    9896:	93 81       	ldd	r25, Z+3	; 0x03
    9898:	af 01       	movw	r20, r30
    989a:	00 97       	sbiw	r24, 0x00	; 0
    989c:	b9 f7       	brne	.-18     	; 0x988c <free+0x54>
    989e:	1f c0       	rjmp	.+62     	; 0x98de <free+0xa6>
    98a0:	e9 01       	movw	r28, r18
    98a2:	22 97       	sbiw	r28, 0x02	; 2
    98a4:	fb 83       	std	Y+3, r31	; 0x03
    98a6:	ea 83       	std	Y+2, r30	; 0x02
    98a8:	08 81       	ld	r16, Y
    98aa:	19 81       	ldd	r17, Y+1	; 0x01
    98ac:	c9 01       	movw	r24, r18
    98ae:	80 0f       	add	r24, r16
    98b0:	91 1f       	adc	r25, r17
    98b2:	8e 17       	cp	r24, r30
    98b4:	9f 07       	cpc	r25, r31
    98b6:	59 f4       	brne	.+22     	; 0x98ce <free+0x96>
    98b8:	80 81       	ld	r24, Z
    98ba:	91 81       	ldd	r25, Z+1	; 0x01
    98bc:	80 0f       	add	r24, r16
    98be:	91 1f       	adc	r25, r17
    98c0:	02 96       	adiw	r24, 0x02	; 2
    98c2:	99 83       	std	Y+1, r25	; 0x01
    98c4:	88 83       	st	Y, r24
    98c6:	82 81       	ldd	r24, Z+2	; 0x02
    98c8:	93 81       	ldd	r25, Z+3	; 0x03
    98ca:	9b 83       	std	Y+3, r25	; 0x03
    98cc:	8a 83       	std	Y+2, r24	; 0x02
    98ce:	41 15       	cp	r20, r1
    98d0:	51 05       	cpc	r21, r1
    98d2:	29 f4       	brne	.+10     	; 0x98de <free+0xa6>
    98d4:	b0 93 f2 09 	sts	0x09F2, r27
    98d8:	a0 93 f1 09 	sts	0x09F1, r26
    98dc:	41 c0       	rjmp	.+130    	; 0x9960 <free+0x128>
    98de:	fa 01       	movw	r30, r20
    98e0:	b3 83       	std	Z+3, r27	; 0x03
    98e2:	a2 83       	std	Z+2, r26	; 0x02
    98e4:	c1 91       	ld	r28, Z+
    98e6:	d1 91       	ld	r29, Z+
    98e8:	ec 0f       	add	r30, r28
    98ea:	fd 1f       	adc	r31, r29
    98ec:	ae 17       	cp	r26, r30
    98ee:	bf 07       	cpc	r27, r31
    98f0:	81 f4       	brne	.+32     	; 0x9912 <free+0xda>
    98f2:	f9 01       	movw	r30, r18
    98f4:	92 91       	ld	r25, -Z
    98f6:	82 91       	ld	r24, -Z
    98f8:	8c 0f       	add	r24, r28
    98fa:	9d 1f       	adc	r25, r29
    98fc:	02 96       	adiw	r24, 0x02	; 2
    98fe:	da 01       	movw	r26, r20
    9900:	11 96       	adiw	r26, 0x01	; 1
    9902:	9c 93       	st	X, r25
    9904:	8e 93       	st	-X, r24
    9906:	82 81       	ldd	r24, Z+2	; 0x02
    9908:	93 81       	ldd	r25, Z+3	; 0x03
    990a:	13 96       	adiw	r26, 0x03	; 3
    990c:	9c 93       	st	X, r25
    990e:	8e 93       	st	-X, r24
    9910:	12 97       	sbiw	r26, 0x02	; 2
    9912:	e0 e0       	ldi	r30, 0x00	; 0
    9914:	f0 e0       	ldi	r31, 0x00	; 0
    9916:	02 c0       	rjmp	.+4      	; 0x991c <free+0xe4>
    9918:	fb 01       	movw	r30, r22
    991a:	bc 01       	movw	r22, r24
    991c:	db 01       	movw	r26, r22
    991e:	12 96       	adiw	r26, 0x02	; 2
    9920:	8d 91       	ld	r24, X+
    9922:	9c 91       	ld	r25, X
    9924:	13 97       	sbiw	r26, 0x03	; 3
    9926:	00 97       	sbiw	r24, 0x00	; 0
    9928:	b9 f7       	brne	.-18     	; 0x9918 <free+0xe0>
    992a:	cb 01       	movw	r24, r22
    992c:	02 96       	adiw	r24, 0x02	; 2
    992e:	2d 91       	ld	r18, X+
    9930:	3c 91       	ld	r19, X
    9932:	11 97       	sbiw	r26, 0x01	; 1
    9934:	82 0f       	add	r24, r18
    9936:	93 1f       	adc	r25, r19
    9938:	20 91 ef 09 	lds	r18, 0x09EF
    993c:	30 91 f0 09 	lds	r19, 0x09F0
    9940:	28 17       	cp	r18, r24
    9942:	39 07       	cpc	r19, r25
    9944:	69 f4       	brne	.+26     	; 0x9960 <free+0x128>
    9946:	30 97       	sbiw	r30, 0x00	; 0
    9948:	29 f4       	brne	.+10     	; 0x9954 <free+0x11c>
    994a:	10 92 f2 09 	sts	0x09F2, r1
    994e:	10 92 f1 09 	sts	0x09F1, r1
    9952:	02 c0       	rjmp	.+4      	; 0x9958 <free+0x120>
    9954:	13 82       	std	Z+3, r1	; 0x03
    9956:	12 82       	std	Z+2, r1	; 0x02
    9958:	70 93 f0 09 	sts	0x09F0, r23
    995c:	60 93 ef 09 	sts	0x09EF, r22
    9960:	df 91       	pop	r29
    9962:	cf 91       	pop	r28
    9964:	1f 91       	pop	r17
    9966:	0f 91       	pop	r16
    9968:	08 95       	ret

0000996a <do_random>:
    996a:	8f 92       	push	r8
    996c:	9f 92       	push	r9
    996e:	af 92       	push	r10
    9970:	bf 92       	push	r11
    9972:	cf 92       	push	r12
    9974:	df 92       	push	r13
    9976:	ef 92       	push	r14
    9978:	ff 92       	push	r15
    997a:	0f 93       	push	r16
    997c:	1f 93       	push	r17
    997e:	cf 93       	push	r28
    9980:	df 93       	push	r29
    9982:	ec 01       	movw	r28, r24
    9984:	88 81       	ld	r24, Y
    9986:	99 81       	ldd	r25, Y+1	; 0x01
    9988:	aa 81       	ldd	r26, Y+2	; 0x02
    998a:	bb 81       	ldd	r27, Y+3	; 0x03
    998c:	00 97       	sbiw	r24, 0x00	; 0
    998e:	a1 05       	cpc	r26, r1
    9990:	b1 05       	cpc	r27, r1
    9992:	21 f4       	brne	.+8      	; 0x999c <do_random+0x32>
    9994:	84 e2       	ldi	r24, 0x24	; 36
    9996:	99 ed       	ldi	r25, 0xD9	; 217
    9998:	ab e5       	ldi	r26, 0x5B	; 91
    999a:	b7 e0       	ldi	r27, 0x07	; 7
    999c:	bc 01       	movw	r22, r24
    999e:	cd 01       	movw	r24, r26
    99a0:	2d e1       	ldi	r18, 0x1D	; 29
    99a2:	33 ef       	ldi	r19, 0xF3	; 243
    99a4:	41 e0       	ldi	r20, 0x01	; 1
    99a6:	50 e0       	ldi	r21, 0x00	; 0
    99a8:	0e 94 67 4b 	call	0x96ce	; 0x96ce <__divmodsi4>
    99ac:	49 01       	movw	r8, r18
    99ae:	5a 01       	movw	r10, r20
    99b0:	27 ea       	ldi	r18, 0xA7	; 167
    99b2:	31 e4       	ldi	r19, 0x41	; 65
    99b4:	40 e0       	ldi	r20, 0x00	; 0
    99b6:	50 e0       	ldi	r21, 0x00	; 0
    99b8:	0e 94 1a 4b 	call	0x9634	; 0x9634 <__mulsi3>
    99bc:	6b 01       	movw	r12, r22
    99be:	7c 01       	movw	r14, r24
    99c0:	c5 01       	movw	r24, r10
    99c2:	b4 01       	movw	r22, r8
    99c4:	2c ee       	ldi	r18, 0xEC	; 236
    99c6:	34 ef       	ldi	r19, 0xF4	; 244
    99c8:	4f ef       	ldi	r20, 0xFF	; 255
    99ca:	5f ef       	ldi	r21, 0xFF	; 255
    99cc:	0e 94 1a 4b 	call	0x9634	; 0x9634 <__mulsi3>
    99d0:	dc 01       	movw	r26, r24
    99d2:	cb 01       	movw	r24, r22
    99d4:	c8 0e       	add	r12, r24
    99d6:	d9 1e       	adc	r13, r25
    99d8:	ea 1e       	adc	r14, r26
    99da:	fb 1e       	adc	r15, r27
    99dc:	f7 fe       	sbrs	r15, 7
    99de:	08 c0       	rjmp	.+16     	; 0x99f0 <do_random+0x86>
    99e0:	8f ef       	ldi	r24, 0xFF	; 255
    99e2:	9f ef       	ldi	r25, 0xFF	; 255
    99e4:	af ef       	ldi	r26, 0xFF	; 255
    99e6:	bf e7       	ldi	r27, 0x7F	; 127
    99e8:	c8 0e       	add	r12, r24
    99ea:	d9 1e       	adc	r13, r25
    99ec:	ea 1e       	adc	r14, r26
    99ee:	fb 1e       	adc	r15, r27
    99f0:	c8 82       	st	Y, r12
    99f2:	d9 82       	std	Y+1, r13	; 0x01
    99f4:	ea 82       	std	Y+2, r14	; 0x02
    99f6:	fb 82       	std	Y+3, r15	; 0x03
    99f8:	97 01       	movw	r18, r14
    99fa:	86 01       	movw	r16, r12
    99fc:	3f 77       	andi	r19, 0x7F	; 127
    99fe:	b8 01       	movw	r22, r16
    9a00:	c9 01       	movw	r24, r18
    9a02:	df 91       	pop	r29
    9a04:	cf 91       	pop	r28
    9a06:	1f 91       	pop	r17
    9a08:	0f 91       	pop	r16
    9a0a:	ff 90       	pop	r15
    9a0c:	ef 90       	pop	r14
    9a0e:	df 90       	pop	r13
    9a10:	cf 90       	pop	r12
    9a12:	bf 90       	pop	r11
    9a14:	af 90       	pop	r10
    9a16:	9f 90       	pop	r9
    9a18:	8f 90       	pop	r8
    9a1a:	08 95       	ret

00009a1c <random_r>:
    9a1c:	0e 94 b5 4c 	call	0x996a	; 0x996a <do_random>
    9a20:	08 95       	ret

00009a22 <random>:
    9a22:	8d eb       	ldi	r24, 0xBD	; 189
    9a24:	93 e0       	ldi	r25, 0x03	; 3
    9a26:	0e 94 b5 4c 	call	0x996a	; 0x996a <do_random>
    9a2a:	08 95       	ret

00009a2c <srandom>:
    9a2c:	dc 01       	movw	r26, r24
    9a2e:	cb 01       	movw	r24, r22
    9a30:	80 93 bd 03 	sts	0x03BD, r24
    9a34:	90 93 be 03 	sts	0x03BE, r25
    9a38:	a0 93 bf 03 	sts	0x03BF, r26
    9a3c:	b0 93 c0 03 	sts	0x03C0, r27
    9a40:	08 95       	ret

00009a42 <realloc>:
    9a42:	8f 92       	push	r8
    9a44:	9f 92       	push	r9
    9a46:	af 92       	push	r10
    9a48:	bf 92       	push	r11
    9a4a:	cf 92       	push	r12
    9a4c:	df 92       	push	r13
    9a4e:	ef 92       	push	r14
    9a50:	ff 92       	push	r15
    9a52:	0f 93       	push	r16
    9a54:	1f 93       	push	r17
    9a56:	cf 93       	push	r28
    9a58:	df 93       	push	r29
    9a5a:	0f 92       	push	r0
    9a5c:	0f 92       	push	r0
    9a5e:	cd b7       	in	r28, 0x3d	; 61
    9a60:	de b7       	in	r29, 0x3e	; 62
    9a62:	8c 01       	movw	r16, r24
    9a64:	00 97       	sbiw	r24, 0x00	; 0
    9a66:	29 f4       	brne	.+10     	; 0x9a72 <realloc+0x30>
    9a68:	cb 01       	movw	r24, r22
    9a6a:	0e 94 86 4b 	call	0x970c	; 0x970c <malloc>
    9a6e:	8c 01       	movw	r16, r24
    9a70:	b8 c0       	rjmp	.+368    	; 0x9be2 <realloc+0x1a0>
    9a72:	dc 01       	movw	r26, r24
    9a74:	a6 0f       	add	r26, r22
    9a76:	b7 1f       	adc	r27, r23
    9a78:	fc 01       	movw	r30, r24
    9a7a:	32 97       	sbiw	r30, 0x02	; 2
    9a7c:	ae 17       	cp	r26, r30
    9a7e:	bf 07       	cpc	r27, r31
    9a80:	08 f4       	brcc	.+2      	; 0x9a84 <realloc+0x42>
    9a82:	ad c0       	rjmp	.+346    	; 0x9bde <realloc+0x19c>
    9a84:	20 81       	ld	r18, Z
    9a86:	31 81       	ldd	r19, Z+1	; 0x01
    9a88:	26 17       	cp	r18, r22
    9a8a:	37 07       	cpc	r19, r23
    9a8c:	b0 f0       	brcs	.+44     	; 0x9aba <realloc+0x78>
    9a8e:	25 30       	cpi	r18, 0x05	; 5
    9a90:	31 05       	cpc	r19, r1
    9a92:	08 f4       	brcc	.+2      	; 0x9a96 <realloc+0x54>
    9a94:	a6 c0       	rjmp	.+332    	; 0x9be2 <realloc+0x1a0>
    9a96:	c9 01       	movw	r24, r18
    9a98:	04 97       	sbiw	r24, 0x04	; 4
    9a9a:	86 17       	cp	r24, r22
    9a9c:	97 07       	cpc	r25, r23
    9a9e:	08 f4       	brcc	.+2      	; 0x9aa2 <realloc+0x60>
    9aa0:	a0 c0       	rjmp	.+320    	; 0x9be2 <realloc+0x1a0>
    9aa2:	22 50       	subi	r18, 0x02	; 2
    9aa4:	30 40       	sbci	r19, 0x00	; 0
    9aa6:	26 1b       	sub	r18, r22
    9aa8:	37 0b       	sbc	r19, r23
    9aaa:	2d 93       	st	X+, r18
    9aac:	3d 93       	st	X+, r19
    9aae:	cd 01       	movw	r24, r26
    9ab0:	71 83       	std	Z+1, r23	; 0x01
    9ab2:	60 83       	st	Z, r22
    9ab4:	0e 94 1c 4c 	call	0x9838	; 0x9838 <free>
    9ab8:	94 c0       	rjmp	.+296    	; 0x9be2 <realloc+0x1a0>
    9aba:	6b 01       	movw	r12, r22
    9abc:	c2 1a       	sub	r12, r18
    9abe:	d3 0a       	sbc	r13, r19
    9ac0:	5c 01       	movw	r10, r24
    9ac2:	a2 0e       	add	r10, r18
    9ac4:	b3 1e       	adc	r11, r19
    9ac6:	e0 91 f1 09 	lds	r30, 0x09F1
    9aca:	f0 91 f2 09 	lds	r31, 0x09F2
    9ace:	40 e0       	ldi	r20, 0x00	; 0
    9ad0:	50 e0       	ldi	r21, 0x00	; 0
    9ad2:	88 24       	eor	r8, r8
    9ad4:	99 24       	eor	r9, r9
    9ad6:	49 c0       	rjmp	.+146    	; 0x9b6a <realloc+0x128>
    9ad8:	ea 15       	cp	r30, r10
    9ada:	fb 05       	cpc	r31, r11
    9adc:	e1 f5       	brne	.+120    	; 0x9b56 <realloc+0x114>
    9ade:	e0 80       	ld	r14, Z
    9ae0:	f1 80       	ldd	r15, Z+1	; 0x01
    9ae2:	c7 01       	movw	r24, r14
    9ae4:	02 96       	adiw	r24, 0x02	; 2
    9ae6:	8c 15       	cp	r24, r12
    9ae8:	9d 05       	cpc	r25, r13
    9aea:	a8 f1       	brcs	.+106    	; 0x9b56 <realloc+0x114>
    9aec:	a7 01       	movw	r20, r14
    9aee:	4c 19       	sub	r20, r12
    9af0:	5d 09       	sbc	r21, r13
    9af2:	ca 01       	movw	r24, r20
    9af4:	02 96       	adiw	r24, 0x02	; 2
    9af6:	0f 2e       	mov	r0, r31
    9af8:	fe ef       	ldi	r31, 0xFE	; 254
    9afa:	cf 2e       	mov	r12, r31
    9afc:	ff ef       	ldi	r31, 0xFF	; 255
    9afe:	df 2e       	mov	r13, r31
    9b00:	f0 2d       	mov	r31, r0
    9b02:	c0 0e       	add	r12, r16
    9b04:	d1 1e       	adc	r13, r17
    9b06:	85 30       	cpi	r24, 0x05	; 5
    9b08:	91 05       	cpc	r25, r1
    9b0a:	78 f0       	brcs	.+30     	; 0x9b2a <realloc+0xe8>
    9b0c:	82 81       	ldd	r24, Z+2	; 0x02
    9b0e:	93 81       	ldd	r25, Z+3	; 0x03
    9b10:	13 96       	adiw	r26, 0x03	; 3
    9b12:	9c 93       	st	X, r25
    9b14:	8e 93       	st	-X, r24
    9b16:	12 97       	sbiw	r26, 0x02	; 2
    9b18:	11 96       	adiw	r26, 0x01	; 1
    9b1a:	5c 93       	st	X, r21
    9b1c:	4e 93       	st	-X, r20
    9b1e:	f6 01       	movw	r30, r12
    9b20:	71 83       	std	Z+1, r23	; 0x01
    9b22:	60 83       	st	Z, r22
    9b24:	9a 2f       	mov	r25, r26
    9b26:	8b 2f       	mov	r24, r27
    9b28:	0a c0       	rjmp	.+20     	; 0x9b3e <realloc+0xfc>
    9b2a:	c9 01       	movw	r24, r18
    9b2c:	02 96       	adiw	r24, 0x02	; 2
    9b2e:	8e 0d       	add	r24, r14
    9b30:	9f 1d       	adc	r25, r15
    9b32:	d6 01       	movw	r26, r12
    9b34:	11 96       	adiw	r26, 0x01	; 1
    9b36:	9c 93       	st	X, r25
    9b38:	8e 93       	st	-X, r24
    9b3a:	92 81       	ldd	r25, Z+2	; 0x02
    9b3c:	83 81       	ldd	r24, Z+3	; 0x03
    9b3e:	81 14       	cp	r8, r1
    9b40:	91 04       	cpc	r9, r1
    9b42:	21 f0       	breq	.+8      	; 0x9b4c <realloc+0x10a>
    9b44:	f4 01       	movw	r30, r8
    9b46:	92 83       	std	Z+2, r25	; 0x02
    9b48:	83 83       	std	Z+3, r24	; 0x03
    9b4a:	4b c0       	rjmp	.+150    	; 0x9be2 <realloc+0x1a0>
    9b4c:	90 93 f1 09 	sts	0x09F1, r25
    9b50:	80 93 f2 09 	sts	0x09F2, r24
    9b54:	46 c0       	rjmp	.+140    	; 0x9be2 <realloc+0x1a0>
    9b56:	80 81       	ld	r24, Z
    9b58:	91 81       	ldd	r25, Z+1	; 0x01
    9b5a:	48 17       	cp	r20, r24
    9b5c:	59 07       	cpc	r21, r25
    9b5e:	08 f4       	brcc	.+2      	; 0x9b62 <realloc+0x120>
    9b60:	ac 01       	movw	r20, r24
    9b62:	82 81       	ldd	r24, Z+2	; 0x02
    9b64:	93 81       	ldd	r25, Z+3	; 0x03
    9b66:	4f 01       	movw	r8, r30
    9b68:	fc 01       	movw	r30, r24
    9b6a:	30 97       	sbiw	r30, 0x00	; 0
    9b6c:	09 f0       	breq	.+2      	; 0x9b70 <realloc+0x12e>
    9b6e:	b4 cf       	rjmp	.-152    	; 0x9ad8 <realloc+0x96>
    9b70:	80 91 ef 09 	lds	r24, 0x09EF
    9b74:	90 91 f0 09 	lds	r25, 0x09F0
    9b78:	8a 15       	cp	r24, r10
    9b7a:	9b 05       	cpc	r25, r11
    9b7c:	e9 f4       	brne	.+58     	; 0x9bb8 <realloc+0x176>
    9b7e:	46 17       	cp	r20, r22
    9b80:	57 07       	cpc	r21, r23
    9b82:	d0 f4       	brcc	.+52     	; 0x9bb8 <realloc+0x176>
    9b84:	80 91 b7 03 	lds	r24, 0x03B7
    9b88:	90 91 b8 03 	lds	r25, 0x03B8
    9b8c:	00 97       	sbiw	r24, 0x00	; 0
    9b8e:	41 f4       	brne	.+16     	; 0x9ba0 <realloc+0x15e>
    9b90:	8d b7       	in	r24, 0x3d	; 61
    9b92:	9e b7       	in	r25, 0x3e	; 62
    9b94:	20 91 bb 03 	lds	r18, 0x03BB
    9b98:	30 91 bc 03 	lds	r19, 0x03BC
    9b9c:	82 1b       	sub	r24, r18
    9b9e:	93 0b       	sbc	r25, r19
    9ba0:	a8 17       	cp	r26, r24
    9ba2:	b9 07       	cpc	r27, r25
    9ba4:	e0 f4       	brcc	.+56     	; 0x9bde <realloc+0x19c>
    9ba6:	b0 93 f0 09 	sts	0x09F0, r27
    9baa:	a0 93 ef 09 	sts	0x09EF, r26
    9bae:	f8 01       	movw	r30, r16
    9bb0:	32 97       	sbiw	r30, 0x02	; 2
    9bb2:	71 83       	std	Z+1, r23	; 0x01
    9bb4:	60 83       	st	Z, r22
    9bb6:	15 c0       	rjmp	.+42     	; 0x9be2 <realloc+0x1a0>
    9bb8:	cb 01       	movw	r24, r22
    9bba:	29 83       	std	Y+1, r18	; 0x01
    9bbc:	3a 83       	std	Y+2, r19	; 0x02
    9bbe:	0e 94 86 4b 	call	0x970c	; 0x970c <malloc>
    9bc2:	7c 01       	movw	r14, r24
    9bc4:	29 81       	ldd	r18, Y+1	; 0x01
    9bc6:	3a 81       	ldd	r19, Y+2	; 0x02
    9bc8:	00 97       	sbiw	r24, 0x00	; 0
    9bca:	49 f0       	breq	.+18     	; 0x9bde <realloc+0x19c>
    9bcc:	b8 01       	movw	r22, r16
    9bce:	a9 01       	movw	r20, r18
    9bd0:	0e 94 4d 4e 	call	0x9c9a	; 0x9c9a <memcpy>
    9bd4:	c8 01       	movw	r24, r16
    9bd6:	0e 94 1c 4c 	call	0x9838	; 0x9838 <free>
    9bda:	87 01       	movw	r16, r14
    9bdc:	02 c0       	rjmp	.+4      	; 0x9be2 <realloc+0x1a0>
    9bde:	00 e0       	ldi	r16, 0x00	; 0
    9be0:	10 e0       	ldi	r17, 0x00	; 0
    9be2:	c8 01       	movw	r24, r16
    9be4:	0f 90       	pop	r0
    9be6:	0f 90       	pop	r0
    9be8:	df 91       	pop	r29
    9bea:	cf 91       	pop	r28
    9bec:	1f 91       	pop	r17
    9bee:	0f 91       	pop	r16
    9bf0:	ff 90       	pop	r15
    9bf2:	ef 90       	pop	r14
    9bf4:	df 90       	pop	r13
    9bf6:	cf 90       	pop	r12
    9bf8:	bf 90       	pop	r11
    9bfa:	af 90       	pop	r10
    9bfc:	9f 90       	pop	r9
    9bfe:	8f 90       	pop	r8
    9c00:	08 95       	ret

00009c02 <atol>:
    9c02:	1f 93       	push	r17
    9c04:	fc 01       	movw	r30, r24
    9c06:	99 27       	eor	r25, r25
    9c08:	88 27       	eor	r24, r24
    9c0a:	bc 01       	movw	r22, r24
    9c0c:	e8 94       	clt
    9c0e:	11 91       	ld	r17, Z+
    9c10:	10 32       	cpi	r17, 0x20	; 32
    9c12:	e9 f3       	breq	.-6      	; 0x9c0e <atol+0xc>
    9c14:	19 30       	cpi	r17, 0x09	; 9
    9c16:	10 f0       	brcs	.+4      	; 0x9c1c <atol+0x1a>
    9c18:	1e 30       	cpi	r17, 0x0E	; 14
    9c1a:	c8 f3       	brcs	.-14     	; 0x9c0e <atol+0xc>
    9c1c:	1b 32       	cpi	r17, 0x2B	; 43
    9c1e:	51 f0       	breq	.+20     	; 0x9c34 <atol+0x32>
    9c20:	1d 32       	cpi	r17, 0x2D	; 45
    9c22:	49 f4       	brne	.+18     	; 0x9c36 <atol+0x34>
    9c24:	68 94       	set
    9c26:	06 c0       	rjmp	.+12     	; 0x9c34 <atol+0x32>
    9c28:	0e 94 1a 4f 	call	0x9e34	; 0x9e34 <__mulsi_const_10>
    9c2c:	61 0f       	add	r22, r17
    9c2e:	71 1d       	adc	r23, r1
    9c30:	81 1d       	adc	r24, r1
    9c32:	91 1d       	adc	r25, r1
    9c34:	11 91       	ld	r17, Z+
    9c36:	10 53       	subi	r17, 0x30	; 48
    9c38:	1a 30       	cpi	r17, 0x0A	; 10
    9c3a:	b0 f3       	brcs	.-20     	; 0x9c28 <atol+0x26>
    9c3c:	3e f4       	brtc	.+14     	; 0x9c4c <atol+0x4a>
    9c3e:	90 95       	com	r25
    9c40:	80 95       	com	r24
    9c42:	70 95       	com	r23
    9c44:	61 95       	neg	r22
    9c46:	7f 4f       	sbci	r23, 0xFF	; 255
    9c48:	8f 4f       	sbci	r24, 0xFF	; 255
    9c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    9c4c:	1f 91       	pop	r17
    9c4e:	08 95       	ret

00009c50 <isspace>:
    9c50:	91 11       	cpse	r25, r1
    9c52:	40 c1       	rjmp	.+640    	; 0x9ed4 <__ctype_isfalse>
    9c54:	80 32       	cpi	r24, 0x20	; 32
    9c56:	19 f0       	breq	.+6      	; 0x9c5e <isspace+0xe>
    9c58:	89 50       	subi	r24, 0x09	; 9
    9c5a:	85 50       	subi	r24, 0x05	; 5
    9c5c:	d0 f7       	brcc	.-12     	; 0x9c52 <isspace+0x2>
    9c5e:	08 95       	ret

00009c60 <tolower>:
    9c60:	91 11       	cpse	r25, r1
    9c62:	08 95       	ret
    9c64:	81 54       	subi	r24, 0x41	; 65
    9c66:	8a 51       	subi	r24, 0x1A	; 26
    9c68:	08 f4       	brcc	.+2      	; 0x9c6c <tolower+0xc>
    9c6a:	80 5e       	subi	r24, 0xE0	; 224
    9c6c:	85 5a       	subi	r24, 0xA5	; 165
    9c6e:	08 95       	ret

00009c70 <toupper>:
    9c70:	91 11       	cpse	r25, r1
    9c72:	08 95       	ret
    9c74:	81 56       	subi	r24, 0x61	; 97
    9c76:	8a 51       	subi	r24, 0x1A	; 26
    9c78:	08 f4       	brcc	.+2      	; 0x9c7c <toupper+0xc>
    9c7a:	80 52       	subi	r24, 0x20	; 32
    9c7c:	85 58       	subi	r24, 0x85	; 133
    9c7e:	08 95       	ret

00009c80 <memcmp>:
    9c80:	fb 01       	movw	r30, r22
    9c82:	dc 01       	movw	r26, r24
    9c84:	04 c0       	rjmp	.+8      	; 0x9c8e <memcmp+0xe>
    9c86:	8d 91       	ld	r24, X+
    9c88:	01 90       	ld	r0, Z+
    9c8a:	80 19       	sub	r24, r0
    9c8c:	21 f4       	brne	.+8      	; 0x9c96 <memcmp+0x16>
    9c8e:	41 50       	subi	r20, 0x01	; 1
    9c90:	50 40       	sbci	r21, 0x00	; 0
    9c92:	c8 f7       	brcc	.-14     	; 0x9c86 <memcmp+0x6>
    9c94:	88 1b       	sub	r24, r24
    9c96:	99 0b       	sbc	r25, r25
    9c98:	08 95       	ret

00009c9a <memcpy>:
    9c9a:	fb 01       	movw	r30, r22
    9c9c:	dc 01       	movw	r26, r24
    9c9e:	02 c0       	rjmp	.+4      	; 0x9ca4 <memcpy+0xa>
    9ca0:	01 90       	ld	r0, Z+
    9ca2:	0d 92       	st	X+, r0
    9ca4:	41 50       	subi	r20, 0x01	; 1
    9ca6:	50 40       	sbci	r21, 0x00	; 0
    9ca8:	d8 f7       	brcc	.-10     	; 0x9ca0 <memcpy+0x6>
    9caa:	08 95       	ret

00009cac <memmove>:
    9cac:	68 17       	cp	r22, r24
    9cae:	79 07       	cpc	r23, r25
    9cb0:	68 f4       	brcc	.+26     	; 0x9ccc <memmove+0x20>
    9cb2:	fb 01       	movw	r30, r22
    9cb4:	dc 01       	movw	r26, r24
    9cb6:	e4 0f       	add	r30, r20
    9cb8:	f5 1f       	adc	r31, r21
    9cba:	a4 0f       	add	r26, r20
    9cbc:	b5 1f       	adc	r27, r21
    9cbe:	02 c0       	rjmp	.+4      	; 0x9cc4 <memmove+0x18>
    9cc0:	02 90       	ld	r0, -Z
    9cc2:	0e 92       	st	-X, r0
    9cc4:	41 50       	subi	r20, 0x01	; 1
    9cc6:	50 40       	sbci	r21, 0x00	; 0
    9cc8:	d8 f7       	brcc	.-10     	; 0x9cc0 <memmove+0x14>
    9cca:	08 95       	ret
    9ccc:	0c 94 4d 4e 	jmp	0x9c9a	; 0x9c9a <memcpy>

00009cd0 <strchr>:
    9cd0:	fc 01       	movw	r30, r24
    9cd2:	81 91       	ld	r24, Z+
    9cd4:	86 17       	cp	r24, r22
    9cd6:	21 f0       	breq	.+8      	; 0x9ce0 <strchr+0x10>
    9cd8:	88 23       	and	r24, r24
    9cda:	d9 f7       	brne	.-10     	; 0x9cd2 <strchr+0x2>
    9cdc:	99 27       	eor	r25, r25
    9cde:	08 95       	ret
    9ce0:	31 97       	sbiw	r30, 0x01	; 1
    9ce2:	cf 01       	movw	r24, r30
    9ce4:	08 95       	ret

00009ce6 <strcmp>:
    9ce6:	fb 01       	movw	r30, r22
    9ce8:	dc 01       	movw	r26, r24
    9cea:	8d 91       	ld	r24, X+
    9cec:	01 90       	ld	r0, Z+
    9cee:	80 19       	sub	r24, r0
    9cf0:	01 10       	cpse	r0, r1
    9cf2:	d9 f3       	breq	.-10     	; 0x9cea <strcmp+0x4>
    9cf4:	99 0b       	sbc	r25, r25
    9cf6:	08 95       	ret

00009cf8 <strcpy>:
    9cf8:	fb 01       	movw	r30, r22
    9cfa:	dc 01       	movw	r26, r24
    9cfc:	01 90       	ld	r0, Z+
    9cfe:	0d 92       	st	X+, r0
    9d00:	00 20       	and	r0, r0
    9d02:	e1 f7       	brne	.-8      	; 0x9cfc <strcpy+0x4>
    9d04:	08 95       	ret

00009d06 <strncmp>:
    9d06:	fb 01       	movw	r30, r22
    9d08:	dc 01       	movw	r26, r24
    9d0a:	41 50       	subi	r20, 0x01	; 1
    9d0c:	50 40       	sbci	r21, 0x00	; 0
    9d0e:	30 f0       	brcs	.+12     	; 0x9d1c <strncmp+0x16>
    9d10:	8d 91       	ld	r24, X+
    9d12:	01 90       	ld	r0, Z+
    9d14:	80 19       	sub	r24, r0
    9d16:	19 f4       	brne	.+6      	; 0x9d1e <strncmp+0x18>
    9d18:	00 20       	and	r0, r0
    9d1a:	b9 f7       	brne	.-18     	; 0x9d0a <strncmp+0x4>
    9d1c:	88 1b       	sub	r24, r24
    9d1e:	99 0b       	sbc	r25, r25
    9d20:	08 95       	ret

00009d22 <strncpy>:
    9d22:	fb 01       	movw	r30, r22
    9d24:	dc 01       	movw	r26, r24
    9d26:	41 50       	subi	r20, 0x01	; 1
    9d28:	50 40       	sbci	r21, 0x00	; 0
    9d2a:	48 f0       	brcs	.+18     	; 0x9d3e <strncpy+0x1c>
    9d2c:	01 90       	ld	r0, Z+
    9d2e:	0d 92       	st	X+, r0
    9d30:	00 20       	and	r0, r0
    9d32:	c9 f7       	brne	.-14     	; 0x9d26 <strncpy+0x4>
    9d34:	01 c0       	rjmp	.+2      	; 0x9d38 <strncpy+0x16>
    9d36:	1d 92       	st	X+, r1
    9d38:	41 50       	subi	r20, 0x01	; 1
    9d3a:	50 40       	sbci	r21, 0x00	; 0
    9d3c:	e0 f7       	brcc	.-8      	; 0x9d36 <strncpy+0x14>
    9d3e:	08 95       	ret

00009d40 <strrchr>:
    9d40:	fc 01       	movw	r30, r24
    9d42:	81 e0       	ldi	r24, 0x01	; 1
    9d44:	90 e0       	ldi	r25, 0x00	; 0
    9d46:	01 90       	ld	r0, Z+
    9d48:	06 16       	cp	r0, r22
    9d4a:	09 f4       	brne	.+2      	; 0x9d4e <strrchr+0xe>
    9d4c:	cf 01       	movw	r24, r30
    9d4e:	00 20       	and	r0, r0
    9d50:	d1 f7       	brne	.-12     	; 0x9d46 <strrchr+0x6>
    9d52:	01 97       	sbiw	r24, 0x01	; 1
    9d54:	08 95       	ret

00009d56 <strstr>:
    9d56:	fb 01       	movw	r30, r22
    9d58:	51 91       	ld	r21, Z+
    9d5a:	55 23       	and	r21, r21
    9d5c:	a9 f0       	breq	.+42     	; 0x9d88 <strstr+0x32>
    9d5e:	bf 01       	movw	r22, r30
    9d60:	dc 01       	movw	r26, r24
    9d62:	4d 91       	ld	r20, X+
    9d64:	45 17       	cp	r20, r21
    9d66:	41 11       	cpse	r20, r1
    9d68:	e1 f7       	brne	.-8      	; 0x9d62 <strstr+0xc>
    9d6a:	59 f4       	brne	.+22     	; 0x9d82 <strstr+0x2c>
    9d6c:	cd 01       	movw	r24, r26
    9d6e:	01 90       	ld	r0, Z+
    9d70:	00 20       	and	r0, r0
    9d72:	49 f0       	breq	.+18     	; 0x9d86 <strstr+0x30>
    9d74:	4d 91       	ld	r20, X+
    9d76:	40 15       	cp	r20, r0
    9d78:	41 11       	cpse	r20, r1
    9d7a:	c9 f3       	breq	.-14     	; 0x9d6e <strstr+0x18>
    9d7c:	fb 01       	movw	r30, r22
    9d7e:	41 11       	cpse	r20, r1
    9d80:	ef cf       	rjmp	.-34     	; 0x9d60 <strstr+0xa>
    9d82:	81 e0       	ldi	r24, 0x01	; 1
    9d84:	90 e0       	ldi	r25, 0x00	; 0
    9d86:	01 97       	sbiw	r24, 0x01	; 1
    9d88:	08 95       	ret

00009d8a <itoa>:
    9d8a:	fb 01       	movw	r30, r22
    9d8c:	9f 01       	movw	r18, r30
    9d8e:	e8 94       	clt
    9d90:	42 30       	cpi	r20, 0x02	; 2
    9d92:	c4 f0       	brlt	.+48     	; 0x9dc4 <itoa+0x3a>
    9d94:	45 32       	cpi	r20, 0x25	; 37
    9d96:	b4 f4       	brge	.+44     	; 0x9dc4 <itoa+0x3a>
    9d98:	4a 30       	cpi	r20, 0x0A	; 10
    9d9a:	29 f4       	brne	.+10     	; 0x9da6 <itoa+0x1c>
    9d9c:	97 fb       	bst	r25, 7
    9d9e:	1e f4       	brtc	.+6      	; 0x9da6 <itoa+0x1c>
    9da0:	90 95       	com	r25
    9da2:	81 95       	neg	r24
    9da4:	9f 4f       	sbci	r25, 0xFF	; 255
    9da6:	64 2f       	mov	r22, r20
    9da8:	77 27       	eor	r23, r23
    9daa:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__udivmodhi4>
    9dae:	80 5d       	subi	r24, 0xD0	; 208
    9db0:	8a 33       	cpi	r24, 0x3A	; 58
    9db2:	0c f0       	brlt	.+2      	; 0x9db6 <itoa+0x2c>
    9db4:	89 5d       	subi	r24, 0xD9	; 217
    9db6:	81 93       	st	Z+, r24
    9db8:	cb 01       	movw	r24, r22
    9dba:	00 97       	sbiw	r24, 0x00	; 0
    9dbc:	a1 f7       	brne	.-24     	; 0x9da6 <itoa+0x1c>
    9dbe:	16 f4       	brtc	.+4      	; 0x9dc4 <itoa+0x3a>
    9dc0:	5d e2       	ldi	r21, 0x2D	; 45
    9dc2:	51 93       	st	Z+, r21
    9dc4:	10 82       	st	Z, r1
    9dc6:	c9 01       	movw	r24, r18
    9dc8:	0c 94 6d 4f 	jmp	0x9eda	; 0x9eda <strrev>

00009dcc <ltoa>:
    9dcc:	fa 01       	movw	r30, r20
    9dce:	cf 93       	push	r28
    9dd0:	ff 93       	push	r31
    9dd2:	ef 93       	push	r30
    9dd4:	22 30       	cpi	r18, 0x02	; 2
    9dd6:	44 f1       	brlt	.+80     	; 0x9e28 <ltoa+0x5c>
    9dd8:	25 32       	cpi	r18, 0x25	; 37
    9dda:	34 f5       	brge	.+76     	; 0x9e28 <ltoa+0x5c>
    9ddc:	c2 2f       	mov	r28, r18
    9dde:	e8 94       	clt
    9de0:	ca 30       	cpi	r28, 0x0A	; 10
    9de2:	49 f4       	brne	.+18     	; 0x9df6 <ltoa+0x2a>
    9de4:	97 fb       	bst	r25, 7
    9de6:	3e f4       	brtc	.+14     	; 0x9df6 <ltoa+0x2a>
    9de8:	90 95       	com	r25
    9dea:	80 95       	com	r24
    9dec:	70 95       	com	r23
    9dee:	61 95       	neg	r22
    9df0:	7f 4f       	sbci	r23, 0xFF	; 255
    9df2:	8f 4f       	sbci	r24, 0xFF	; 255
    9df4:	9f 4f       	sbci	r25, 0xFF	; 255
    9df6:	2c 2f       	mov	r18, r28
    9df8:	33 27       	eor	r19, r19
    9dfa:	44 27       	eor	r20, r20
    9dfc:	55 27       	eor	r21, r21
    9dfe:	ff 93       	push	r31
    9e00:	ef 93       	push	r30
    9e02:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    9e06:	ef 91       	pop	r30
    9e08:	ff 91       	pop	r31
    9e0a:	60 5d       	subi	r22, 0xD0	; 208
    9e0c:	6a 33       	cpi	r22, 0x3A	; 58
    9e0e:	0c f0       	brlt	.+2      	; 0x9e12 <ltoa+0x46>
    9e10:	69 5d       	subi	r22, 0xD9	; 217
    9e12:	61 93       	st	Z+, r22
    9e14:	b9 01       	movw	r22, r18
    9e16:	ca 01       	movw	r24, r20
    9e18:	60 50       	subi	r22, 0x00	; 0
    9e1a:	70 40       	sbci	r23, 0x00	; 0
    9e1c:	80 40       	sbci	r24, 0x00	; 0
    9e1e:	90 40       	sbci	r25, 0x00	; 0
    9e20:	51 f7       	brne	.-44     	; 0x9df6 <ltoa+0x2a>
    9e22:	16 f4       	brtc	.+4      	; 0x9e28 <ltoa+0x5c>
    9e24:	cd e2       	ldi	r28, 0x2D	; 45
    9e26:	c1 93       	st	Z+, r28
    9e28:	10 82       	st	Z, r1
    9e2a:	8f 91       	pop	r24
    9e2c:	9f 91       	pop	r25
    9e2e:	cf 91       	pop	r28
    9e30:	0c 94 6d 4f 	jmp	0x9eda	; 0x9eda <strrev>

00009e34 <__mulsi_const_10>:
    9e34:	59 2f       	mov	r21, r25
    9e36:	48 2f       	mov	r20, r24
    9e38:	37 2f       	mov	r19, r23
    9e3a:	26 2f       	mov	r18, r22
    9e3c:	66 0f       	add	r22, r22
    9e3e:	77 1f       	adc	r23, r23
    9e40:	88 1f       	adc	r24, r24
    9e42:	99 1f       	adc	r25, r25
    9e44:	66 0f       	add	r22, r22
    9e46:	77 1f       	adc	r23, r23
    9e48:	88 1f       	adc	r24, r24
    9e4a:	99 1f       	adc	r25, r25
    9e4c:	62 0f       	add	r22, r18
    9e4e:	73 1f       	adc	r23, r19
    9e50:	84 1f       	adc	r24, r20
    9e52:	95 1f       	adc	r25, r21
    9e54:	66 0f       	add	r22, r22
    9e56:	77 1f       	adc	r23, r23
    9e58:	88 1f       	adc	r24, r24
    9e5a:	99 1f       	adc	r25, r25
    9e5c:	08 95       	ret

00009e5e <ultoa>:
    9e5e:	fa 01       	movw	r30, r20
    9e60:	cf 93       	push	r28
    9e62:	ff 93       	push	r31
    9e64:	ef 93       	push	r30
    9e66:	22 30       	cpi	r18, 0x02	; 2
    9e68:	cc f0       	brlt	.+50     	; 0x9e9c <ultoa+0x3e>
    9e6a:	25 32       	cpi	r18, 0x25	; 37
    9e6c:	bc f4       	brge	.+46     	; 0x9e9c <ultoa+0x3e>
    9e6e:	c2 2f       	mov	r28, r18
    9e70:	2c 2f       	mov	r18, r28
    9e72:	33 27       	eor	r19, r19
    9e74:	44 27       	eor	r20, r20
    9e76:	55 27       	eor	r21, r21
    9e78:	ff 93       	push	r31
    9e7a:	ef 93       	push	r30
    9e7c:	0e 94 45 4b 	call	0x968a	; 0x968a <__udivmodsi4>
    9e80:	ef 91       	pop	r30
    9e82:	ff 91       	pop	r31
    9e84:	60 5d       	subi	r22, 0xD0	; 208
    9e86:	6a 33       	cpi	r22, 0x3A	; 58
    9e88:	0c f0       	brlt	.+2      	; 0x9e8c <ultoa+0x2e>
    9e8a:	69 5d       	subi	r22, 0xD9	; 217
    9e8c:	61 93       	st	Z+, r22
    9e8e:	b9 01       	movw	r22, r18
    9e90:	ca 01       	movw	r24, r20
    9e92:	60 50       	subi	r22, 0x00	; 0
    9e94:	70 40       	sbci	r23, 0x00	; 0
    9e96:	80 40       	sbci	r24, 0x00	; 0
    9e98:	90 40       	sbci	r25, 0x00	; 0
    9e9a:	51 f7       	brne	.-44     	; 0x9e70 <ultoa+0x12>
    9e9c:	10 82       	st	Z, r1
    9e9e:	8f 91       	pop	r24
    9ea0:	9f 91       	pop	r25
    9ea2:	cf 91       	pop	r28
    9ea4:	0c 94 6d 4f 	jmp	0x9eda	; 0x9eda <strrev>

00009ea8 <utoa>:
    9ea8:	fb 01       	movw	r30, r22
    9eaa:	9f 01       	movw	r18, r30
    9eac:	42 30       	cpi	r20, 0x02	; 2
    9eae:	74 f0       	brlt	.+28     	; 0x9ecc <utoa+0x24>
    9eb0:	45 32       	cpi	r20, 0x25	; 37
    9eb2:	64 f4       	brge	.+24     	; 0x9ecc <utoa+0x24>
    9eb4:	64 2f       	mov	r22, r20
    9eb6:	77 27       	eor	r23, r23
    9eb8:	0e 94 7d 4f 	call	0x9efa	; 0x9efa <__udivmodhi4>
    9ebc:	80 5d       	subi	r24, 0xD0	; 208
    9ebe:	8a 33       	cpi	r24, 0x3A	; 58
    9ec0:	0c f0       	brlt	.+2      	; 0x9ec4 <utoa+0x1c>
    9ec2:	89 5d       	subi	r24, 0xD9	; 217
    9ec4:	81 93       	st	Z+, r24
    9ec6:	cb 01       	movw	r24, r22
    9ec8:	00 97       	sbiw	r24, 0x00	; 0
    9eca:	a1 f7       	brne	.-24     	; 0x9eb4 <utoa+0xc>
    9ecc:	10 82       	st	Z, r1
    9ece:	c9 01       	movw	r24, r18
    9ed0:	0c 94 6d 4f 	jmp	0x9eda	; 0x9eda <strrev>

00009ed4 <__ctype_isfalse>:
    9ed4:	99 27       	eor	r25, r25
    9ed6:	88 27       	eor	r24, r24

00009ed8 <__ctype_istrue>:
    9ed8:	08 95       	ret

00009eda <strrev>:
    9eda:	dc 01       	movw	r26, r24
    9edc:	fc 01       	movw	r30, r24
    9ede:	67 2f       	mov	r22, r23
    9ee0:	71 91       	ld	r23, Z+
    9ee2:	77 23       	and	r23, r23
    9ee4:	e1 f7       	brne	.-8      	; 0x9ede <strrev+0x4>
    9ee6:	32 97       	sbiw	r30, 0x02	; 2
    9ee8:	04 c0       	rjmp	.+8      	; 0x9ef2 <strrev+0x18>
    9eea:	7c 91       	ld	r23, X
    9eec:	6d 93       	st	X+, r22
    9eee:	70 83       	st	Z, r23
    9ef0:	62 91       	ld	r22, -Z
    9ef2:	ae 17       	cp	r26, r30
    9ef4:	bf 07       	cpc	r27, r31
    9ef6:	c8 f3       	brcs	.-14     	; 0x9eea <strrev+0x10>
    9ef8:	08 95       	ret

00009efa <__udivmodhi4>:
    9efa:	aa 1b       	sub	r26, r26
    9efc:	bb 1b       	sub	r27, r27
    9efe:	51 e1       	ldi	r21, 0x11	; 17
    9f00:	07 c0       	rjmp	.+14     	; 0x9f10 <__udivmodhi4_ep>

00009f02 <__udivmodhi4_loop>:
    9f02:	aa 1f       	adc	r26, r26
    9f04:	bb 1f       	adc	r27, r27
    9f06:	a6 17       	cp	r26, r22
    9f08:	b7 07       	cpc	r27, r23
    9f0a:	10 f0       	brcs	.+4      	; 0x9f10 <__udivmodhi4_ep>
    9f0c:	a6 1b       	sub	r26, r22
    9f0e:	b7 0b       	sbc	r27, r23

00009f10 <__udivmodhi4_ep>:
    9f10:	88 1f       	adc	r24, r24
    9f12:	99 1f       	adc	r25, r25
    9f14:	5a 95       	dec	r21
    9f16:	a9 f7       	brne	.-22     	; 0x9f02 <__udivmodhi4_loop>
    9f18:	80 95       	com	r24
    9f1a:	90 95       	com	r25
    9f1c:	bc 01       	movw	r22, r24
    9f1e:	cd 01       	movw	r24, r26
    9f20:	08 95       	ret

00009f22 <_exit>:
    9f22:	f8 94       	cli

00009f24 <__stop_program>:
    9f24:	ff cf       	rjmp	.-2      	; 0x9f24 <__stop_program>
