
BalBot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c2  00800100  00008c30  00008cc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008c30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b9  008002c2  008002c2  00008e86  2**0
                  ALLOC
  3 .stab         00004080  00000000  00000000  00008e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000110a  00000000  00000000  0000cf08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000005a0  00000000  00000000  0000e018  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00016d6e  00000000  00000000  0000e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004857  00000000  00000000  00025326  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004516  00000000  00000000  00029b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002e04  00000000  00000000  0002e094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a2e  00000000  00000000  00030e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e139  00000000  00000000  000358c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  000439ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
       4:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__vector_1>
       8:	0c 94 17 21 	jmp	0x422e	; 0x422e <__vector_2>
       c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      10:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      14:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      18:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      1c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      20:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      24:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      28:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      2c:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__vector_11>
      30:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      38:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      3c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      40:	0c 94 44 21 	jmp	0x4288	; 0x4288 <__vector_16>
      44:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      48:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__vector_18>
      4c:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <__vector_19>
      50:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      54:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      58:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      5c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      60:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	sts	0x9b, r22
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000095 <digital_pin_to_timer_PGM>:
      95:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      a5:	00 00 00 00                                         ....

000000a9 <digital_pin_to_bit_mask_PGM>:
      a9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b9:	04 08 10 20                                         ... 

000000bd <digital_pin_to_port_PGM>:
      bd:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      cd:	03 03 03 03                                         ....

000000d1 <port_to_input_PGM>:
      d1:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000db <port_to_output_PGM>:
      db:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000e5 <port_to_mode_PGM>:
      e5:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000f0 <__ctors_start>:
      f0:	e3 07       	cpc	r30, r19
      f2:	b3 0d       	add	r27, r3
      f4:	da 0f       	add	r29, r26
      f6:	3a 19       	sub	r19, r10
      f8:	18 1a       	sub	r1, r24
      fa:	7f 33       	cpi	r23, 0x3F	; 63
      fc:	e1 36       	cpi	r30, 0x61	; 97

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d8 e0       	ldi	r29, 0x08	; 8
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	12 e0       	ldi	r17, 0x02	; 2
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	e0 e3       	ldi	r30, 0x30	; 48
     112:	fc e8       	ldi	r31, 0x8C	; 140
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	a2 3c       	cpi	r26, 0xC2	; 194
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>

00000120 <__do_clear_bss>:
     120:	16 e0       	ldi	r17, 0x06	; 6
     122:	a2 ec       	ldi	r26, 0xC2	; 194
     124:	b2 e0       	ldi	r27, 0x02	; 2
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	ab 37       	cpi	r26, 0x7B	; 123
     12c:	b1 07       	cpc	r27, r17
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>

00000130 <__do_global_ctors>:
     130:	10 e0       	ldi	r17, 0x00	; 0
     132:	ce ef       	ldi	r28, 0xFE	; 254
     134:	d0 e0       	ldi	r29, 0x00	; 0
     136:	04 c0       	rjmp	.+8      	; 0x140 <__do_global_ctors+0x10>
     138:	22 97       	sbiw	r28, 0x02	; 2
     13a:	fe 01       	movw	r30, r28
     13c:	0e 94 f3 41 	call	0x83e6	; 0x83e6 <__tablejump__>
     140:	c0 3f       	cpi	r28, 0xF0	; 240
     142:	d1 07       	cpc	r29, r17
     144:	c9 f7       	brne	.-14     	; 0x138 <__do_global_ctors+0x8>
     146:	0e 94 95 08 	call	0x112a	; 0x112a <main>
     14a:	0c 94 16 46 	jmp	0x8c2c	; 0x8c2c <_exit>

0000014e <__bad_interrupt>:
     14e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000152 <_ZN7Encoder4isr1Ev>:
			"st	-X, r25"		"\n\t"
			"st	-X, r24"		"\n\t"
			"st	-X, r23"		"\n\t"
			"st	-X, r22"		"\n\t"
		"L%=end:"				"\n"
		: : "x" (arg) : "r22", "r23", "r24", "r25", "r30", "r31");
     152:	a0 91 55 05 	lds	r26, 0x0555
     156:	b0 91 56 05 	lds	r27, 0x0556
     15a:	ed 91       	ld	r30, X+
     15c:	fd 91       	ld	r31, X+
     15e:	80 81       	ld	r24, Z
     160:	ed 91       	ld	r30, X+
     162:	fd 91       	ld	r31, X+
     164:	90 81       	ld	r25, Z
     166:	ed 91       	ld	r30, X+
     168:	fd 91       	ld	r31, X+
     16a:	6c 91       	ld	r22, X
     16c:	63 70       	andi	r22, 0x03	; 3
     16e:	8e 23       	and	r24, r30
     170:	09 f0       	breq	.+2      	; 0x174 <L91>
     172:	64 60       	ori	r22, 0x04	; 4

00000174 <L91>:
     174:	9f 23       	and	r25, r31
     176:	09 f0       	breq	.+2      	; 0x17a <L92>
     178:	68 60       	ori	r22, 0x08	; 8

0000017a <L92>:
     17a:	e9 ec       	ldi	r30, 0xC9	; 201
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	e6 0f       	add	r30, r22
     180:	f1 1d       	adc	r31, r1
     182:	65 95       	asr	r22
     184:	65 95       	asr	r22
     186:	6d 93       	st	X+, r22
     188:	6d 91       	ld	r22, X+
     18a:	7d 91       	ld	r23, X+
     18c:	8d 91       	ld	r24, X+
     18e:	9d 91       	ld	r25, X+
     190:	09 94       	ijmp

00000192 <L9table>:
     192:	23 c0       	rjmp	.+70     	; 0x1da <L9end>
     194:	1a c0       	rjmp	.+52     	; 0x1ca <L9plus1>
     196:	12 c0       	rjmp	.+36     	; 0x1bc <L9minus1>
     198:	16 c0       	rjmp	.+44     	; 0x1c6 <L9plus2>
     19a:	10 c0       	rjmp	.+32     	; 0x1bc <L9minus1>
     19c:	1e c0       	rjmp	.+60     	; 0x1da <L9end>
     19e:	09 c0       	rjmp	.+18     	; 0x1b2 <L9minus2>
     1a0:	14 c0       	rjmp	.+40     	; 0x1ca <L9plus1>
     1a2:	13 c0       	rjmp	.+38     	; 0x1ca <L9plus1>
     1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <L9minus2>
     1a6:	19 c0       	rjmp	.+50     	; 0x1da <L9end>
     1a8:	09 c0       	rjmp	.+18     	; 0x1bc <L9minus1>
     1aa:	0d c0       	rjmp	.+26     	; 0x1c6 <L9plus2>
     1ac:	07 c0       	rjmp	.+14     	; 0x1bc <L9minus1>
     1ae:	0d c0       	rjmp	.+26     	; 0x1ca <L9plus1>
     1b0:	14 c0       	rjmp	.+40     	; 0x1da <L9end>

000001b2 <L9minus2>:
     1b2:	62 50       	subi	r22, 0x02	; 2
     1b4:	70 40       	sbci	r23, 0x00	; 0
     1b6:	80 40       	sbci	r24, 0x00	; 0
     1b8:	90 40       	sbci	r25, 0x00	; 0
     1ba:	0b c0       	rjmp	.+22     	; 0x1d2 <L9store>

000001bc <L9minus1>:
     1bc:	61 50       	subi	r22, 0x01	; 1
     1be:	70 40       	sbci	r23, 0x00	; 0
     1c0:	80 40       	sbci	r24, 0x00	; 0
     1c2:	90 40       	sbci	r25, 0x00	; 0
     1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <L9store>

000001c6 <L9plus2>:
     1c6:	6e 5f       	subi	r22, 0xFE	; 254
     1c8:	01 c0       	rjmp	.+2      	; 0x1cc <L9z>

000001ca <L9plus1>:
     1ca:	6f 5f       	subi	r22, 0xFF	; 255

000001cc <L9z>:
     1cc:	7f 4f       	sbci	r23, 0xFF	; 255
     1ce:	8f 4f       	sbci	r24, 0xFF	; 255
     1d0:	9f 4f       	sbci	r25, 0xFF	; 255

000001d2 <L9store>:
     1d2:	9e 93       	st	-X, r25
     1d4:	8e 93       	st	-X, r24
     1d6:	7e 93       	st	-X, r23
     1d8:	6e 93       	st	-X, r22

000001da <L9end>:
#if defined(ENCODER_USE_INTERRUPTS) && !defined(ENCODER_OPTIMIZE_INTERRUPTS)
	#ifdef CORE_INT0_PIN
	static void isr0(void) { update(interruptArgs[0]); }
	#endif
	#ifdef CORE_INT1_PIN
	static void isr1(void) { update(interruptArgs[1]); }
     1da:	08 95       	ret

000001dc <_ZN17TuningDataSection9getStatusEPhPj>:
		safteyLimit = readFloat(data, &offset);
		desiredAngle = readFloat(data, &offset);
		spin = readFloat(data, &offset);
		
	}
	virtual void getStatus(unsigned char data[], unsigned int *offset){
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	da 01       	movw	r26, r20
		byte* currentBytes = reinterpret_cast<byte*>(&currentAngle);
     1e2:	ec 01       	movw	r28, r24
     1e4:	62 96       	adiw	r28, 0x12	; 18
		for (int i = 0; i < 4; i++){
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
			data[(*offset)++] = currentBytes[i];
     1ea:	8d 91       	ld	r24, X+
     1ec:	9c 91       	ld	r25, X
     1ee:	11 97       	sbiw	r26, 0x01	; 1
     1f0:	49 91       	ld	r20, Y+
     1f2:	fb 01       	movw	r30, r22
     1f4:	e8 0f       	add	r30, r24
     1f6:	f9 1f       	adc	r31, r25
     1f8:	40 83       	st	Z, r20
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	11 96       	adiw	r26, 0x01	; 1
     1fe:	9c 93       	st	X, r25
     200:	8e 93       	st	-X, r24
		spin = readFloat(data, &offset);
		
	}
	virtual void getStatus(unsigned char data[], unsigned int *offset){
		byte* currentBytes = reinterpret_cast<byte*>(&currentAngle);
		for (int i = 0; i < 4; i++){
     202:	2f 5f       	subi	r18, 0xFF	; 255
     204:	3f 4f       	sbci	r19, 0xFF	; 255
     206:	24 30       	cpi	r18, 0x04	; 4
     208:	31 05       	cpc	r19, r1
     20a:	79 f7       	brne	.-34     	; 0x1ea <_ZN17TuningDataSection9getStatusEPhPj+0xe>
			data[(*offset)++] = currentBytes[i];
		}
	}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <_ZN19AnalogAccelerometer6updateEv>:
		AnalogAccelerometer(int pin, int center, boolean invert){
			this->pin = pin;
			init(center, invert);	
		}
		
		void update(){
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	ec 01       	movw	r28, r24
			acceleration = (analogRead(pin) - center) * (invert ? -1 : 1);
     218:	89 85       	ldd	r24, Y+9	; 0x09
     21a:	0e 94 3b 22 	call	0x4476	; 0x4476 <analogRead>
     21e:	2b 81       	ldd	r18, Y+3	; 0x03
     220:	3c 81       	ldd	r19, Y+4	; 0x04
     222:	ac 01       	movw	r20, r24
     224:	42 1b       	sub	r20, r18
     226:	53 0b       	sbc	r21, r19
     228:	9a 01       	movw	r18, r20
     22a:	8a 81       	ldd	r24, Y+2	; 0x02
     22c:	88 23       	and	r24, r24
     22e:	19 f0       	breq	.+6      	; 0x236 <_ZN19AnalogAccelerometer6updateEv+0x24>
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	9f ef       	ldi	r25, 0xFF	; 255
     234:	02 c0       	rjmp	.+4      	; 0x23a <_ZN19AnalogAccelerometer6updateEv+0x28>
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	28 9f       	mul	r18, r24
     23c:	b0 01       	movw	r22, r0
     23e:	29 9f       	mul	r18, r25
     240:	70 0d       	add	r23, r0
     242:	38 9f       	mul	r19, r24
     244:	70 0d       	add	r23, r0
     246:	11 24       	eor	r1, r1
     248:	88 27       	eor	r24, r24
     24a:	77 fd       	sbrc	r23, 7
     24c:	80 95       	com	r24
     24e:	98 2f       	mov	r25, r24
     250:	0e 94 43 40 	call	0x8086	; 0x8086 <__floatsisf>
     254:	dc 01       	movw	r26, r24
     256:	cb 01       	movw	r24, r22
     258:	8d 83       	std	Y+5, r24	; 0x05
     25a:	9e 83       	std	Y+6, r25	; 0x06
     25c:	af 83       	std	Y+7, r26	; 0x07
     25e:	b8 87       	std	Y+8, r27	; 0x08
		}
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <_ZN17TuningDataSection6updateEPhj>:
	float d;
	float currentAngle;
	float desiredAngle;
	float spin;
	float safteyLimit;
	virtual void update(unsigned char data[], unsigned int offset){
     266:	ef 92       	push	r14
     268:	ff 92       	push	r15
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	00 d0       	rcall	.+0      	; 0x274 <_ZN17TuningDataSection6updateEPhj+0xe>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	7c 01       	movw	r14, r24
     27a:	8b 01       	movw	r16, r22
     27c:	5a 83       	std	Y+2, r21	; 0x02
     27e:	49 83       	std	Y+1, r20	; 0x01
	
		p = readFloat(data, &offset);
     280:	cb 01       	movw	r24, r22
     282:	be 01       	movw	r22, r28
     284:	6f 5f       	subi	r22, 0xFF	; 255
     286:	7f 4f       	sbci	r23, 0xFF	; 255
     288:	0e 94 10 3e 	call	0x7c20	; 0x7c20 <_Z9readFloatPhPj>
     28c:	dc 01       	movw	r26, r24
     28e:	cb 01       	movw	r24, r22
     290:	f7 01       	movw	r30, r14
     292:	86 83       	std	Z+6, r24	; 0x06
     294:	97 83       	std	Z+7, r25	; 0x07
     296:	a0 87       	std	Z+8, r26	; 0x08
     298:	b1 87       	std	Z+9, r27	; 0x09
		i = readFloat(data, &offset);
     29a:	c8 01       	movw	r24, r16
     29c:	be 01       	movw	r22, r28
     29e:	6f 5f       	subi	r22, 0xFF	; 255
     2a0:	7f 4f       	sbci	r23, 0xFF	; 255
     2a2:	0e 94 10 3e 	call	0x7c20	; 0x7c20 <_Z9readFloatPhPj>
     2a6:	dc 01       	movw	r26, r24
     2a8:	cb 01       	movw	r24, r22
     2aa:	f7 01       	movw	r30, r14
     2ac:	82 87       	std	Z+10, r24	; 0x0a
     2ae:	93 87       	std	Z+11, r25	; 0x0b
     2b0:	a4 87       	std	Z+12, r26	; 0x0c
     2b2:	b5 87       	std	Z+13, r27	; 0x0d
		d = readFloat(data, &offset);
     2b4:	c8 01       	movw	r24, r16
     2b6:	be 01       	movw	r22, r28
     2b8:	6f 5f       	subi	r22, 0xFF	; 255
     2ba:	7f 4f       	sbci	r23, 0xFF	; 255
     2bc:	0e 94 10 3e 	call	0x7c20	; 0x7c20 <_Z9readFloatPhPj>
     2c0:	dc 01       	movw	r26, r24
     2c2:	cb 01       	movw	r24, r22
     2c4:	f7 01       	movw	r30, r14
     2c6:	86 87       	std	Z+14, r24	; 0x0e
     2c8:	97 87       	std	Z+15, r25	; 0x0f
     2ca:	a0 8b       	std	Z+16, r26	; 0x10
     2cc:	b1 8b       	std	Z+17, r27	; 0x11
		safteyLimit = readFloat(data, &offset);
     2ce:	c8 01       	movw	r24, r16
     2d0:	be 01       	movw	r22, r28
     2d2:	6f 5f       	subi	r22, 0xFF	; 255
     2d4:	7f 4f       	sbci	r23, 0xFF	; 255
     2d6:	0e 94 10 3e 	call	0x7c20	; 0x7c20 <_Z9readFloatPhPj>
     2da:	dc 01       	movw	r26, r24
     2dc:	cb 01       	movw	r24, r22
     2de:	f7 01       	movw	r30, r14
     2e0:	86 8f       	std	Z+30, r24	; 0x1e
     2e2:	97 8f       	std	Z+31, r25	; 0x1f
     2e4:	a0 a3       	lds	r26, 0x50
     2e6:	b1 a3       	lds	r27, 0x51
		desiredAngle = readFloat(data, &offset);
     2e8:	c8 01       	movw	r24, r16
     2ea:	be 01       	movw	r22, r28
     2ec:	6f 5f       	subi	r22, 0xFF	; 255
     2ee:	7f 4f       	sbci	r23, 0xFF	; 255
     2f0:	0e 94 10 3e 	call	0x7c20	; 0x7c20 <_Z9readFloatPhPj>
     2f4:	dc 01       	movw	r26, r24
     2f6:	cb 01       	movw	r24, r22
     2f8:	f7 01       	movw	r30, r14
     2fa:	86 8b       	std	Z+22, r24	; 0x16
     2fc:	97 8b       	std	Z+23, r25	; 0x17
     2fe:	a0 8f       	std	Z+24, r26	; 0x18
     300:	b1 8f       	std	Z+25, r27	; 0x19
		spin = readFloat(data, &offset);
     302:	c8 01       	movw	r24, r16
     304:	be 01       	movw	r22, r28
     306:	6f 5f       	subi	r22, 0xFF	; 255
     308:	7f 4f       	sbci	r23, 0xFF	; 255
     30a:	0e 94 10 3e 	call	0x7c20	; 0x7c20 <_Z9readFloatPhPj>
     30e:	dc 01       	movw	r26, r24
     310:	cb 01       	movw	r24, r22
     312:	f7 01       	movw	r30, r14
     314:	82 8f       	std	Z+26, r24	; 0x1a
     316:	93 8f       	std	Z+27, r25	; 0x1b
     318:	a4 8f       	std	Z+28, r26	; 0x1c
     31a:	b5 8f       	std	Z+29, r27	; 0x1d
		
	}
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	08 95       	ret

0000032e <_ZN7Encoder4isr0Ev>:
			"st	-X, r25"		"\n\t"
			"st	-X, r24"		"\n\t"
			"st	-X, r23"		"\n\t"
			"st	-X, r22"		"\n\t"
		"L%=end:"				"\n"
		: : "x" (arg) : "r22", "r23", "r24", "r25", "r30", "r31");
     32e:	a0 91 53 05 	lds	r26, 0x0553
     332:	b0 91 54 05 	lds	r27, 0x0554
     336:	ed 91       	ld	r30, X+
     338:	fd 91       	ld	r31, X+
     33a:	80 81       	ld	r24, Z
     33c:	ed 91       	ld	r30, X+
     33e:	fd 91       	ld	r31, X+
     340:	90 81       	ld	r25, Z
     342:	ed 91       	ld	r30, X+
     344:	fd 91       	ld	r31, X+
     346:	6c 91       	ld	r22, X
     348:	63 70       	andi	r22, 0x03	; 3
     34a:	8e 23       	and	r24, r30
     34c:	09 f0       	breq	.+2      	; 0x350 <L1871>
     34e:	64 60       	ori	r22, 0x04	; 4

00000350 <L1871>:
     350:	9f 23       	and	r25, r31
     352:	09 f0       	breq	.+2      	; 0x356 <L1872>
     354:	68 60       	ori	r22, 0x08	; 8

00000356 <L1872>:
     356:	e7 eb       	ldi	r30, 0xB7	; 183
     358:	f1 e0       	ldi	r31, 0x01	; 1
     35a:	e6 0f       	add	r30, r22
     35c:	f1 1d       	adc	r31, r1
     35e:	65 95       	asr	r22
     360:	65 95       	asr	r22
     362:	6d 93       	st	X+, r22
     364:	6d 91       	ld	r22, X+
     366:	7d 91       	ld	r23, X+
     368:	8d 91       	ld	r24, X+
     36a:	9d 91       	ld	r25, X+
     36c:	09 94       	ijmp

0000036e <L187table>:
     36e:	23 c0       	rjmp	.+70     	; 0x3b6 <L187end>
     370:	1a c0       	rjmp	.+52     	; 0x3a6 <L187plus1>
     372:	12 c0       	rjmp	.+36     	; 0x398 <L187minus1>
     374:	16 c0       	rjmp	.+44     	; 0x3a2 <L187plus2>
     376:	10 c0       	rjmp	.+32     	; 0x398 <L187minus1>
     378:	1e c0       	rjmp	.+60     	; 0x3b6 <L187end>
     37a:	09 c0       	rjmp	.+18     	; 0x38e <L187minus2>
     37c:	14 c0       	rjmp	.+40     	; 0x3a6 <L187plus1>
     37e:	13 c0       	rjmp	.+38     	; 0x3a6 <L187plus1>
     380:	06 c0       	rjmp	.+12     	; 0x38e <L187minus2>
     382:	19 c0       	rjmp	.+50     	; 0x3b6 <L187end>
     384:	09 c0       	rjmp	.+18     	; 0x398 <L187minus1>
     386:	0d c0       	rjmp	.+26     	; 0x3a2 <L187plus2>
     388:	07 c0       	rjmp	.+14     	; 0x398 <L187minus1>
     38a:	0d c0       	rjmp	.+26     	; 0x3a6 <L187plus1>
     38c:	14 c0       	rjmp	.+40     	; 0x3b6 <L187end>

0000038e <L187minus2>:
     38e:	62 50       	subi	r22, 0x02	; 2
     390:	70 40       	sbci	r23, 0x00	; 0
     392:	80 40       	sbci	r24, 0x00	; 0
     394:	90 40       	sbci	r25, 0x00	; 0
     396:	0b c0       	rjmp	.+22     	; 0x3ae <L187store>

00000398 <L187minus1>:
     398:	61 50       	subi	r22, 0x01	; 1
     39a:	70 40       	sbci	r23, 0x00	; 0
     39c:	80 40       	sbci	r24, 0x00	; 0
     39e:	90 40       	sbci	r25, 0x00	; 0
     3a0:	06 c0       	rjmp	.+12     	; 0x3ae <L187store>

000003a2 <L187plus2>:
     3a2:	6e 5f       	subi	r22, 0xFE	; 254
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <L187z>

000003a6 <L187plus1>:
     3a6:	6f 5f       	subi	r22, 0xFF	; 255

000003a8 <L187z>:
     3a8:	7f 4f       	sbci	r23, 0xFF	; 255
     3aa:	8f 4f       	sbci	r24, 0xFF	; 255
     3ac:	9f 4f       	sbci	r25, 0xFF	; 255

000003ae <L187store>:
     3ae:	9e 93       	st	-X, r25
     3b0:	8e 93       	st	-X, r24
     3b2:	7e 93       	st	-X, r23
     3b4:	6e 93       	st	-X, r22

000003b6 <L187end>:
#endif
*/

#if defined(ENCODER_USE_INTERRUPTS) && !defined(ENCODER_OPTIMIZE_INTERRUPTS)
	#ifdef CORE_INT0_PIN
	static void isr0(void) { update(interruptArgs[0]); }
     3b6:	08 95       	ret

000003b8 <_ZN7EncoderC1Ehh>:
} Encoder_internal_state_t;

class Encoder
{
public:
	Encoder(uint8_t pin1, uint8_t pin2) {
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	ec 01       	movw	r28, r24
     3c2:	16 2f       	mov	r17, r22
     3c4:	04 2f       	mov	r16, r20
		#ifdef INPUT_PULLUP
		pinMode(pin1, INPUT_PULLUP);
     3c6:	86 2f       	mov	r24, r22
     3c8:	62 e0       	ldi	r22, 0x02	; 2
     3ca:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
     3ce:	80 2f       	mov	r24, r16
     3d0:	62 e0       	ldi	r22, 0x02	; 2
     3d2:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <pinMode>
		pinMode(pin1, INPUT);
		digitalWrite(pin1, HIGH);
		pinMode(pin2, INPUT);
		digitalWrite(pin2, HIGH);
		#endif
		encoder.pin1_register = PIN_TO_BASEREG(pin1);
     3d6:	21 2f       	mov	r18, r17
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	f9 01       	movw	r30, r18
     3dc:	e3 54       	subi	r30, 0x43	; 67
     3de:	ff 4f       	sbci	r31, 0xFF	; 255
     3e0:	e4 91       	lpm	r30, Z
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	ee 0f       	add	r30, r30
     3e6:	ff 1f       	adc	r31, r31
     3e8:	ef 52       	subi	r30, 0x2F	; 47
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	85 91       	lpm	r24, Z+
     3ee:	94 91       	lpm	r25, Z
     3f0:	88 83       	st	Y, r24
     3f2:	99 83       	std	Y+1, r25	; 0x01
		encoder.pin1_bitmask = PIN_TO_BITMASK(pin1);
     3f4:	27 55       	subi	r18, 0x57	; 87
     3f6:	3f 4f       	sbci	r19, 0xFF	; 255
     3f8:	f9 01       	movw	r30, r18
     3fa:	24 91       	lpm	r18, Z
     3fc:	2c 83       	std	Y+4, r18	; 0x04
		encoder.pin2_register = PIN_TO_BASEREG(pin2);
     3fe:	20 2f       	mov	r18, r16
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	f9 01       	movw	r30, r18
     404:	e3 54       	subi	r30, 0x43	; 67
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	e4 91       	lpm	r30, Z
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	ee 0f       	add	r30, r30
     40e:	ff 1f       	adc	r31, r31
     410:	ef 52       	subi	r30, 0x2F	; 47
     412:	ff 4f       	sbci	r31, 0xFF	; 255
     414:	85 91       	lpm	r24, Z+
     416:	94 91       	lpm	r25, Z
     418:	8a 83       	std	Y+2, r24	; 0x02
     41a:	9b 83       	std	Y+3, r25	; 0x03
		encoder.pin2_bitmask = PIN_TO_BITMASK(pin2);
     41c:	27 55       	subi	r18, 0x57	; 87
     41e:	3f 4f       	sbci	r19, 0xFF	; 255
     420:	f9 01       	movw	r30, r18
     422:	24 91       	lpm	r18, Z
     424:	2d 83       	std	Y+5, r18	; 0x05
		encoder.position = 0;
     426:	1f 82       	std	Y+7, r1	; 0x07
     428:	18 86       	std	Y+8, r1	; 0x08
     42a:	19 86       	std	Y+9, r1	; 0x09
     42c:	1a 86       	std	Y+10, r1	; 0x0a
		// allow time for a passive R-C filter to charge
		// through the pullup resistors, before reading
		// the initial state
		delayMicroseconds(2000);
     42e:	80 ed       	ldi	r24, 0xD0	; 208
     430:	97 e0       	ldi	r25, 0x07	; 7
     432:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <delayMicroseconds>
		uint8_t s = 0;
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
     436:	e8 81       	ld	r30, Y
     438:	f9 81       	ldd	r31, Y+1	; 0x01
     43a:	90 81       	ld	r25, Z
     43c:	8c 81       	ldd	r24, Y+4	; 0x04
     43e:	98 23       	and	r25, r24
		encoder.position = 0;
		// allow time for a passive R-C filter to charge
		// through the pullup resistors, before reading
		// the initial state
		delayMicroseconds(2000);
		uint8_t s = 0;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	09 f4       	brne	.+2      	; 0x446 <_ZN7EncoderC1Ehh+0x8e>
     444:	80 e0       	ldi	r24, 0x00	; 0
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
     446:	ea 81       	ldd	r30, Y+2	; 0x02
     448:	fb 81       	ldd	r31, Y+3	; 0x03
     44a:	20 81       	ld	r18, Z
     44c:	9d 81       	ldd	r25, Y+5	; 0x05
     44e:	92 23       	and	r25, r18
     450:	09 f0       	breq	.+2      	; 0x454 <_ZN7EncoderC1Ehh+0x9c>
     452:	82 60       	ori	r24, 0x02	; 2
		encoder.state = s;
     454:	8e 83       	std	Y+6, r24	; 0x06
#ifdef ENCODER_USE_INTERRUPTS
		interrupts_in_use = 0;
     456:	1b 86       	std	Y+11, r1	; 0x0b
		switch (pin1) {
     458:	12 30       	cpi	r17, 0x02	; 2
     45a:	19 f0       	breq	.+6      	; 0x462 <_ZN7EncoderC1Ehh+0xaa>
     45c:	13 30       	cpi	r17, 0x03	; 3
     45e:	d1 f5       	brne	.+116    	; 0x4d4 <_ZN7EncoderC1Ehh+0x11c>
     460:	0c c0       	rjmp	.+24     	; 0x47a <_ZN7EncoderC1Ehh+0xc2>
		#ifdef CORE_INT0_PIN
			case CORE_INT0_PIN:
				interruptArgs[0] = &encoder;
     462:	d0 93 54 05 	sts	0x0554, r29
     466:	c0 93 53 05 	sts	0x0553, r28
				attachInterrupt(0, isr0, CHANGE);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	67 e9       	ldi	r22, 0x97	; 151
     46e:	71 e0       	ldi	r23, 0x01	; 1
     470:	41 e0       	ldi	r20, 0x01	; 1
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	0e 94 ba 20 	call	0x4174	; 0x4174 <attachInterrupt>
				break;
     478:	0b c0       	rjmp	.+22     	; 0x490 <_ZN7EncoderC1Ehh+0xd8>
		#endif
		#ifdef CORE_INT1_PIN
			case CORE_INT1_PIN:
				interruptArgs[1] = &encoder;
     47a:	d0 93 56 05 	sts	0x0556, r29
     47e:	c0 93 55 05 	sts	0x0555, r28
				attachInterrupt(1, isr1, CHANGE);
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	69 ea       	ldi	r22, 0xA9	; 169
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	0e 94 ba 20 	call	0x4174	; 0x4174 <attachInterrupt>
				break;
		#endif
			default:
				return;
		}
		interrupts_in_use++;
     490:	8b 85       	ldd	r24, Y+11	; 0x0b
     492:	8f 5f       	subi	r24, 0xFF	; 255
     494:	8b 87       	std	Y+11, r24	; 0x0b

		switch (pin2) {
     496:	02 30       	cpi	r16, 0x02	; 2
     498:	19 f0       	breq	.+6      	; 0x4a0 <_ZN7EncoderC1Ehh+0xe8>
     49a:	03 30       	cpi	r16, 0x03	; 3
     49c:	c1 f4       	brne	.+48     	; 0x4ce <_ZN7EncoderC1Ehh+0x116>
     49e:	0c c0       	rjmp	.+24     	; 0x4b8 <_ZN7EncoderC1Ehh+0x100>
		#ifdef CORE_INT0_PIN
			case CORE_INT0_PIN:
				interruptArgs[0] = &encoder;
     4a0:	d0 93 54 05 	sts	0x0554, r29
     4a4:	c0 93 53 05 	sts	0x0553, r28
				attachInterrupt(0, isr0, CHANGE);
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	67 e9       	ldi	r22, 0x97	; 151
     4ac:	71 e0       	ldi	r23, 0x01	; 1
     4ae:	41 e0       	ldi	r20, 0x01	; 1
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	0e 94 ba 20 	call	0x4174	; 0x4174 <attachInterrupt>
				break;
     4b6:	0b c0       	rjmp	.+22     	; 0x4ce <_ZN7EncoderC1Ehh+0x116>
		#endif
		#ifdef CORE_INT1_PIN
			case CORE_INT1_PIN:
				interruptArgs[1] = &encoder;
     4b8:	d0 93 56 05 	sts	0x0556, r29
     4bc:	c0 93 55 05 	sts	0x0555, r28
				attachInterrupt(1, isr1, CHANGE);
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	69 ea       	ldi	r22, 0xA9	; 169
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	41 e0       	ldi	r20, 0x01	; 1
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	0e 94 ba 20 	call	0x4174	; 0x4174 <attachInterrupt>
				break;
			default:
				return;
		#endif
		}
		interrupts_in_use++;
     4ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     4d0:	8f 5f       	subi	r24, 0xFF	; 255
     4d2:	8b 87       	std	Y+11, r24	; 0x0b
#endif
		//update_finishup();  // to force linker to include the code
	}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	08 95       	ret

000004de <_Z10printAnglev>:
		//printImuCsv();
		//testCenter();
	}
}

void printAngle(){
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
	Serial.print("Angle:");
     4e2:	c9 e8       	ldi	r28, 0x89	; 137
     4e4:	d5 e0       	ldi	r29, 0x05	; 5
     4e6:	ce 01       	movw	r24, r28
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	71 e0       	ldi	r23, 0x01	; 1
     4ec:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
	Serial.print(AngleCalc.angle);
     4f0:	40 91 01 05 	lds	r20, 0x0501
     4f4:	50 91 02 05 	lds	r21, 0x0502
     4f8:	60 91 03 05 	lds	r22, 0x0503
     4fc:	70 91 04 05 	lds	r23, 0x0504
     500:	ce 01       	movw	r24, r28
     502:	22 e0       	ldi	r18, 0x02	; 2
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <_ZN5Print5printEdi>
	Serial.print(" Accel X:");
     50a:	ce 01       	movw	r24, r28
     50c:	67 e0       	ldi	r22, 0x07	; 7
     50e:	71 e0       	ldi	r23, 0x01	; 1
     510:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
	Serial.print(ForwardAccel.acceleration);
     514:	40 91 1e 05 	lds	r20, 0x051E
     518:	50 91 1f 05 	lds	r21, 0x051F
     51c:	60 91 20 05 	lds	r22, 0x0520
     520:	70 91 21 05 	lds	r23, 0x0521
     524:	ce 01       	movw	r24, r28
     526:	22 e0       	ldi	r18, 0x02	; 2
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <_ZN5Print5printEdi>
	Serial.print(" Accel Y:");
     52e:	ce 01       	movw	r24, r28
     530:	61 e1       	ldi	r22, 0x11	; 17
     532:	71 e0       	ldi	r23, 0x01	; 1
     534:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
	Serial.print(UpAccel.acceleration);
     538:	40 91 29 05 	lds	r20, 0x0529
     53c:	50 91 2a 05 	lds	r21, 0x052A
     540:	60 91 2b 05 	lds	r22, 0x052B
     544:	70 91 2c 05 	lds	r23, 0x052C
     548:	ce 01       	movw	r24, r28
     54a:	22 e0       	ldi	r18, 0x02	; 2
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <_ZN5Print5printEdi>
	Serial.print(" Rate:");
     552:	ce 01       	movw	r24, r28
     554:	6b e1       	ldi	r22, 0x1B	; 27
     556:	71 e0       	ldi	r23, 0x01	; 1
     558:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
	Serial.println(TiltGyro.rate);
     55c:	40 91 2f 05 	lds	r20, 0x052F
     560:	50 91 30 05 	lds	r21, 0x0530
     564:	60 91 31 05 	lds	r22, 0x0531
     568:	70 91 32 05 	lds	r23, 0x0532
     56c:	ce 01       	movw	r24, r28
     56e:	22 e0       	ldi	r18, 0x02	; 2
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <_ZN5Print7printlnEdi>
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <_Z11printImuCsvv>:
int count = 0;
void printImuCsv(){
     57c:	af 92       	push	r10
     57e:	bf 92       	push	r11
     580:	cf 92       	push	r12
     582:	df 92       	push	r13
     584:	ef 92       	push	r14
     586:	ff 92       	push	r15
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	2c 97       	sbiw	r28, 0x0c	; 12
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	6e 01       	movw	r12, r28
     5a2:	08 94       	sec
     5a4:	c1 1c       	adc	r12, r1
     5a6:	d1 1c       	adc	r13, r1
     5a8:	76 01       	movw	r14, r12
     5aa:	08 e0       	ldi	r16, 0x08	; 8
	int anas[6];
	for (int i = 0; i < 6; i++){
		anas[i] = analogRead(i+8);
     5ac:	80 2f       	mov	r24, r16
     5ae:	0e 94 3b 22 	call	0x4476	; 0x4476 <analogRead>
     5b2:	f7 01       	movw	r30, r14
     5b4:	81 93       	st	Z+, r24
     5b6:	91 93       	st	Z+, r25
     5b8:	7f 01       	movw	r14, r30
     5ba:	0f 5f       	subi	r16, 0xFF	; 255
	Serial.println(TiltGyro.rate);
}
int count = 0;
void printImuCsv(){
	int anas[6];
	for (int i = 0; i < 6; i++){
     5bc:	0e 30       	cpi	r16, 0x0E	; 14
     5be:	b1 f7       	brne	.-20     	; 0x5ac <_Z11printImuCsvv+0x30>
		anas[i] = analogRead(i+8);
	}
	
	Serial.print(count);
     5c0:	09 e8       	ldi	r16, 0x89	; 137
     5c2:	15 e0       	ldi	r17, 0x05	; 5
     5c4:	60 91 c2 02 	lds	r22, 0x02C2
     5c8:	70 91 c3 02 	lds	r23, 0x02C3
     5cc:	c8 01       	movw	r24, r16
     5ce:	4a e0       	ldi	r20, 0x0A	; 10
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_ZN5Print5printEii>
	Serial.print(",");
     5d6:	c8 01       	movw	r24, r16
     5d8:	62 e2       	ldi	r22, 0x22	; 34
     5da:	71 e0       	ldi	r23, 0x01	; 1
     5dc:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
	Serial.print(UpAccel.acceleration);
	Serial.print(" Rate:");
	Serial.println(TiltGyro.rate);
}
int count = 0;
void printImuCsv(){
     5e0:	8e 01       	movw	r16, r28
     5e2:	03 5f       	subi	r16, 0xF3	; 243
     5e4:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	
	Serial.print(count);
	Serial.print(",");
	for (int i = 0; i < 6; i++){
		Serial.print(anas[i]);
     5e6:	0f 2e       	mov	r0, r31
     5e8:	f9 e8       	ldi	r31, 0x89	; 137
     5ea:	ef 2e       	mov	r14, r31
     5ec:	f5 e0       	ldi	r31, 0x05	; 5
     5ee:	ff 2e       	mov	r15, r31
     5f0:	f0 2d       	mov	r31, r0
		Serial.print(",");
     5f2:	0f 2e       	mov	r0, r31
     5f4:	f2 e2       	ldi	r31, 0x22	; 34
     5f6:	af 2e       	mov	r10, r31
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
     5fa:	bf 2e       	mov	r11, r31
     5fc:	f0 2d       	mov	r31, r0
	}
	
	Serial.print(count);
	Serial.print(",");
	for (int i = 0; i < 6; i++){
		Serial.print(anas[i]);
     5fe:	f6 01       	movw	r30, r12
     600:	61 91       	ld	r22, Z+
     602:	71 91       	ld	r23, Z+
     604:	6f 01       	movw	r12, r30
     606:	c7 01       	movw	r24, r14
     608:	4a e0       	ldi	r20, 0x0A	; 10
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_ZN5Print5printEii>
		Serial.print(",");
     610:	c7 01       	movw	r24, r14
     612:	b5 01       	movw	r22, r10
     614:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
		anas[i] = analogRead(i+8);
	}
	
	Serial.print(count);
	Serial.print(",");
	for (int i = 0; i < 6; i++){
     618:	c0 16       	cp	r12, r16
     61a:	d1 06       	cpc	r13, r17
     61c:	81 f7       	brne	.-32     	; 0x5fe <_Z11printImuCsvv+0x82>
		Serial.print(anas[i]);
		Serial.print(",");
	}
	Serial.print((long)millis());
     61e:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
     622:	ab 01       	movw	r20, r22
     624:	bc 01       	movw	r22, r24
     626:	09 e8       	ldi	r16, 0x89	; 137
     628:	15 e0       	ldi	r17, 0x05	; 5
     62a:	c8 01       	movw	r24, r16
     62c:	2a e0       	ldi	r18, 0x0A	; 10
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	0e 94 2d 1c 	call	0x385a	; 0x385a <_ZN5Print5printEli>
	
	Serial.println();
     634:	c8 01       	movw	r24, r16
     636:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_ZN5Print7printlnEv>
	//delay(1);
}
     63a:	2c 96       	adiw	r28, 0x0c	; 12
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	ef 90       	pop	r14
     652:	df 90       	pop	r13
     654:	cf 90       	pop	r12
     656:	bf 90       	pop	r11
     658:	af 90       	pop	r10
     65a:	08 95       	ret

0000065c <_Z8writeLedb>:

void writeLed(bool state){
     65c:	68 2f       	mov	r22, r24
	digitalWrite(13, state ? HIGH : LOW);
     65e:	8d e0       	ldi	r24, 0x0D	; 13
     660:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
}
     664:	08 95       	ret

00000666 <_Z8setDriveff>:
		output = BalancePID.update(AngleCalc.angle, desiredAngle, AngleCalc.gyro->rate);
	}
	setDrive(output + spin, output - spin);
}

void setDrive(float leftVal, float rightVal){
     666:	4f 92       	push	r4
     668:	5f 92       	push	r5
     66a:	6f 92       	push	r6
     66c:	7f 92       	push	r7
     66e:	8f 92       	push	r8
     670:	9f 92       	push	r9
     672:	af 92       	push	r10
     674:	bf 92       	push	r11
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	49 01       	movw	r8, r18
     680:	5a 01       	movw	r10, r20
	leftVal *= LEFT_INVERT;
     682:	90 58       	subi	r25, 0x80	; 128
	rightVal *= RIGHT_INVERT;
	leftVal = limit(leftVal, -1.0, 1.0);
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e8       	ldi	r20, 0x80	; 128
     68a:	5f eb       	ldi	r21, 0xBF	; 191
     68c:	0f 2e       	mov	r0, r31
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	ef 2e       	mov	r14, r31
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	ff 2e       	mov	r15, r31
     696:	f0 e8       	ldi	r31, 0x80	; 128
     698:	0f 2f       	mov	r16, r31
     69a:	ff e3       	ldi	r31, 0x3F	; 63
     69c:	1f 2f       	mov	r17, r31
     69e:	f0 2d       	mov	r31, r0
     6a0:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_Z5limitfff>
     6a4:	2b 01       	movw	r4, r22
     6a6:	3c 01       	movw	r6, r24
	rightVal = limit(rightVal, -1.0, 1.0);
     6a8:	c5 01       	movw	r24, r10
     6aa:	b4 01       	movw	r22, r8
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 e8       	ldi	r20, 0x80	; 128
     6b2:	5f eb       	ldi	r21, 0xBF	; 191
     6b4:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_Z5limitfff>
     6b8:	4b 01       	movw	r8, r22
     6ba:	5c 01       	movw	r10, r24
	
	leftVal *= PULSE_RANGE;
     6bc:	c3 01       	movw	r24, r6
     6be:	b2 01       	movw	r22, r4
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e8       	ldi	r19, 0x80	; 128
     6c4:	4b e3       	ldi	r20, 0x3B	; 59
     6c6:	54 e4       	ldi	r21, 0x44	; 68
     6c8:	0e 94 23 41 	call	0x8246	; 0x8246 <__mulsf3>
	rightVal *= PULSE_RANGE;
	
	left.writeMicroseconds(LEFT_CENTER + removeDeadband(leftVal, PLUSE_DEADBAND, PULSE_RANGE));
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 ea       	ldi	r20, 0xA0	; 160
     6d2:	52 e4       	ldi	r21, 0x42	; 66
     6d4:	0f 2e       	mov	r0, r31
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	ef 2e       	mov	r14, r31
     6da:	f0 e8       	ldi	r31, 0x80	; 128
     6dc:	ff 2e       	mov	r15, r31
     6de:	fb e3       	ldi	r31, 0x3B	; 59
     6e0:	0f 2f       	mov	r16, r31
     6e2:	f4 e4       	ldi	r31, 0x44	; 68
     6e4:	1f 2f       	mov	r17, r31
     6e6:	f0 2d       	mov	r31, r0
     6e8:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14removeDeadbandfff>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e8       	ldi	r19, 0x80	; 128
     6f0:	4b eb       	ldi	r20, 0xBB	; 187
     6f2:	54 e4       	ldi	r21, 0x44	; 68
     6f4:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__addsf3>
     6f8:	0e 94 10 40 	call	0x8020	; 0x8020 <__fixsfsi>
     6fc:	ab 01       	movw	r20, r22
     6fe:	bc 01       	movw	r22, r24
     700:	86 ee       	ldi	r24, 0xE6	; 230
     702:	94 e0       	ldi	r25, 0x04	; 4
     704:	ba 01       	movw	r22, r20
     706:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN5Servo17writeMicrosecondsEi>
	rightVal *= RIGHT_INVERT;
	leftVal = limit(leftVal, -1.0, 1.0);
	rightVal = limit(rightVal, -1.0, 1.0);
	
	leftVal *= PULSE_RANGE;
	rightVal *= PULSE_RANGE;
     70a:	c5 01       	movw	r24, r10
     70c:	b4 01       	movw	r22, r8
     70e:	a8 01       	movw	r20, r16
     710:	97 01       	movw	r18, r14
     712:	0e 94 23 41 	call	0x8246	; 0x8246 <__mulsf3>
	
	left.writeMicroseconds(LEFT_CENTER + removeDeadband(leftVal, PLUSE_DEADBAND, PULSE_RANGE));
	right.writeMicroseconds(RIGHT_CENTER + removeDeadband(rightVal, PLUSE_DEADBAND, PULSE_RANGE));
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	40 ea       	ldi	r20, 0xA0	; 160
     71c:	52 e4       	ldi	r21, 0x42	; 66
     71e:	0e 94 96 0a 	call	0x152c	; 0x152c <_Z14removeDeadbandfff>
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e4       	ldi	r19, 0x40	; 64
     726:	4a eb       	ldi	r20, 0xBA	; 186
     728:	54 e4       	ldi	r21, 0x44	; 68
     72a:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__addsf3>
     72e:	0e 94 10 40 	call	0x8020	; 0x8020 <__fixsfsi>
     732:	ab 01       	movw	r20, r22
     734:	bc 01       	movw	r22, r24
     736:	83 ee       	ldi	r24, 0xE3	; 227
     738:	94 e0       	ldi	r25, 0x04	; 4
     73a:	ba 01       	movw	r22, r20
     73c:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN5Servo17writeMicrosecondsEi>
}
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	9f 90       	pop	r9
     74e:	8f 90       	pop	r8
     750:	7f 90       	pop	r7
     752:	6f 90       	pop	r6
     754:	5f 90       	pop	r5
     756:	4f 90       	pop	r4
     758:	08 95       	ret

0000075a <_Z7balanceff>:

void writeLed(bool state){
	digitalWrite(13, state ? HIGH : LOW);
}

void balance(float desiredAngle, float spin){
     75a:	2f 92       	push	r2
     75c:	3f 92       	push	r3
     75e:	4f 92       	push	r4
     760:	5f 92       	push	r5
     762:	6f 92       	push	r6
     764:	7f 92       	push	r7
     766:	8f 92       	push	r8
     768:	9f 92       	push	r9
     76a:	af 92       	push	r10
     76c:	bf 92       	push	r11
     76e:	cf 92       	push	r12
     770:	df 92       	push	r13
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	00 d0       	rcall	.+0      	; 0x780 <_Z7balanceff+0x26>
     780:	00 d0       	rcall	.+0      	; 0x782 <_Z7balanceff+0x28>
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	29 01       	movw	r4, r18
     790:	3a 01       	movw	r6, r20
		this->updateSensors = updateSensors;
		firstAngleUpdate = true;
	}
	
	void update(){
		if (updateSensors){
     792:	80 91 13 05 	lds	r24, 0x0513
     796:	88 23       	and	r24, r24
     798:	e1 f0       	breq	.+56     	; 0x7d2 <_Z7balanceff+0x78>
			gyro->update();
     79a:	80 91 05 05 	lds	r24, 0x0505
     79e:	90 91 06 05 	lds	r25, 0x0506
     7a2:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN4Gyro6updateEv>
			xAccel->update();
     7a6:	80 91 07 05 	lds	r24, 0x0507
     7aa:	90 91 08 05 	lds	r25, 0x0508
     7ae:	dc 01       	movw	r26, r24
     7b0:	ed 91       	ld	r30, X+
     7b2:	fc 91       	ld	r31, X
     7b4:	01 90       	ld	r0, Z+
     7b6:	f0 81       	ld	r31, Z
     7b8:	e0 2d       	mov	r30, r0
     7ba:	09 95       	icall
			yAccel->update();
     7bc:	80 91 09 05 	lds	r24, 0x0509
     7c0:	90 91 0a 05 	lds	r25, 0x050A
     7c4:	dc 01       	movw	r26, r24
     7c6:	ed 91       	ld	r30, X+
     7c8:	fc 91       	ld	r31, X
     7ca:	01 90       	ld	r0, Z+
     7cc:	f0 81       	ld	r31, Z
     7ce:	e0 2d       	mov	r30, r0
     7d0:	09 95       	icall
		}
		
		double accelRads = atan2(xAccel->acceleration, yAccel->acceleration);
     7d2:	e0 91 07 05 	lds	r30, 0x0507
     7d6:	f0 91 08 05 	lds	r31, 0x0508
     7da:	65 81       	ldd	r22, Z+5	; 0x05
     7dc:	76 81       	ldd	r23, Z+6	; 0x06
     7de:	87 81       	ldd	r24, Z+7	; 0x07
     7e0:	90 85       	ldd	r25, Z+8	; 0x08
     7e2:	e0 91 09 05 	lds	r30, 0x0509
     7e6:	f0 91 0a 05 	lds	r31, 0x050A
     7ea:	25 81       	ldd	r18, Z+5	; 0x05
     7ec:	36 81       	ldd	r19, Z+6	; 0x06
     7ee:	47 81       	ldd	r20, Z+7	; 0x07
     7f0:	50 85       	ldd	r21, Z+8	; 0x08
     7f2:	0e 94 51 3f 	call	0x7ea2	; 0x7ea2 <atan2>
		double accelAngle = (long) (accelRads * 180 / PI);
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	44 e3       	ldi	r20, 0x34	; 52
     7fc:	53 e4       	ldi	r21, 0x43	; 67
     7fe:	0e 94 23 41 	call	0x8246	; 0x8246 <__mulsf3>
     802:	2b ed       	ldi	r18, 0xDB	; 219
     804:	3f e0       	ldi	r19, 0x0F	; 15
     806:	49 e4       	ldi	r20, 0x49	; 73
     808:	50 e4       	ldi	r21, 0x40	; 64
     80a:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <__divsf3>
     80e:	0e 94 10 40 	call	0x8020	; 0x8020 <__fixsfsi>
     812:	0e 94 43 40 	call	0x8086	; 0x8086 <__floatsisf>
     816:	36 2e       	mov	r3, r22
     818:	a7 2e       	mov	r10, r23
     81a:	08 2f       	mov	r16, r24
     81c:	b9 2e       	mov	r11, r25

		double gyroDelta = gyro->deltaAngle;
     81e:	80 90 05 05 	lds	r8, 0x0505
     822:	90 90 06 05 	lds	r9, 0x0506
     826:	f4 01       	movw	r30, r8
     828:	44 81       	ldd	r20, Z+4	; 0x04
     82a:	55 81       	ldd	r21, Z+5	; 0x05
     82c:	66 81       	ldd	r22, Z+6	; 0x06
     82e:	77 81       	ldd	r23, Z+7	; 0x07

		if (firstAngleUpdate) {
     830:	80 91 14 05 	lds	r24, 0x0514
     834:	88 23       	and	r24, r24
     836:	71 f0       	breq	.+28     	; 0x854 <_Z7balanceff+0xfa>
			angle = accelAngle;
     838:	83 2d       	mov	r24, r3
     83a:	9a 2d       	mov	r25, r10
     83c:	a0 2f       	mov	r26, r16
     83e:	bb 2d       	mov	r27, r11
     840:	80 93 01 05 	sts	0x0501, r24
     844:	90 93 02 05 	sts	0x0502, r25
     848:	a0 93 03 05 	sts	0x0503, r26
     84c:	b0 93 04 05 	sts	0x0504, r27
			firstAngleUpdate = false;
     850:	10 92 14 05 	sts	0x0514, r1
		}

		angle = (angle + gyroDelta) * gyroWeight + accelAngle * accelWeight;
     854:	cb 01       	movw	r24, r22
     856:	ba 01       	movw	r22, r20
     858:	20 91 01 05 	lds	r18, 0x0501
     85c:	30 91 02 05 	lds	r19, 0x0502
     860:	40 91 03 05 	lds	r20, 0x0503
     864:	50 91 04 05 	lds	r21, 0x0504
     868:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__addsf3>
     86c:	20 91 0b 05 	lds	r18, 0x050B
     870:	30 91 0c 05 	lds	r19, 0x050C
     874:	40 91 0d 05 	lds	r20, 0x050D
     878:	50 91 0e 05 	lds	r21, 0x050E
     87c:	0e 94 23 41 	call	0x8246	; 0x8246 <__mulsf3>
     880:	6b 01       	movw	r12, r22
     882:	7c 01       	movw	r14, r24
     884:	83 2d       	mov	r24, r3
     886:	9a 2d       	mov	r25, r10
     888:	a0 2f       	mov	r26, r16
     88a:	bb 2d       	mov	r27, r11
     88c:	bc 01       	movw	r22, r24
     88e:	cd 01       	movw	r24, r26
     890:	20 91 0f 05 	lds	r18, 0x050F
     894:	30 91 10 05 	lds	r19, 0x0510
     898:	40 91 11 05 	lds	r20, 0x0511
     89c:	50 91 12 05 	lds	r21, 0x0512
     8a0:	0e 94 23 41 	call	0x8246	; 0x8246 <__mulsf3>
     8a4:	9b 01       	movw	r18, r22
     8a6:	ac 01       	movw	r20, r24
     8a8:	c7 01       	movw	r24, r14
     8aa:	b6 01       	movw	r22, r12
     8ac:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__addsf3>
     8b0:	36 2e       	mov	r3, r22
     8b2:	27 2e       	mov	r2, r23
     8b4:	b8 2e       	mov	r11, r24
     8b6:	a9 2e       	mov	r10, r25
     8b8:	38 2f       	mov	r19, r24
     8ba:	86 2f       	mov	r24, r22
     8bc:	92 2d       	mov	r25, r2
     8be:	ab 2d       	mov	r26, r11
     8c0:	ba 2d       	mov	r27, r10
     8c2:	80 93 01 05 	sts	0x0501, r24
     8c6:	90 93 02 05 	sts	0x0502, r25
     8ca:	a0 93 03 05 	sts	0x0503, r26
     8ce:	b0 93 04 05 	sts	0x0504, r27
	AngleCalc.update();
	float output = 0.0;
	float error = desiredAngle - AngleCalc.angle;
     8d2:	69 81       	ldd	r22, Y+1	; 0x01
     8d4:	7a 81       	ldd	r23, Y+2	; 0x02
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	9c 81       	ldd	r25, Y+4	; 0x04
     8da:	03 2d       	mov	r16, r3
     8dc:	12 2d       	mov	r17, r2
     8de:	23 2f       	mov	r18, r19
     8e0:	3b 2f       	mov	r19, r27
     8e2:	a9 01       	movw	r20, r18
     8e4:	98 01       	movw	r18, r16
     8e6:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <__subsf3>
     8ea:	c6 2e       	mov	r12, r22
     8ec:	d7 2e       	mov	r13, r23
     8ee:	e8 2e       	mov	r14, r24
     8f0:	f9 2e       	mov	r15, r25
	
	if (abs(error) > tuningData.safteyLimit){
     8f2:	46 2f       	mov	r20, r22
     8f4:	57 2f       	mov	r21, r23
     8f6:	68 2f       	mov	r22, r24
     8f8:	79 2f       	mov	r23, r25
     8fa:	cb 01       	movw	r24, r22
     8fc:	ba 01       	movw	r22, r20
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	a9 01       	movw	r20, r18
     904:	0e 94 18 41 	call	0x8230	; 0x8230 <__gesf2>
     908:	18 16       	cp	r1, r24
     90a:	24 f0       	brlt	.+8      	; 0x914 <__stack+0x15>
     90c:	f7 fa       	bst	r15, 7
     90e:	f0 94       	com	r15
     910:	f7 f8       	bld	r15, 7
     912:	f0 94       	com	r15
     914:	c7 01       	movw	r24, r14
     916:	b6 01       	movw	r22, r12
     918:	20 91 f3 02 	lds	r18, 0x02F3
     91c:	30 91 f4 02 	lds	r19, 0x02F4
     920:	40 91 f5 02 	lds	r20, 0x02F5
     924:	50 91 f6 02 	lds	r21, 0x02F6
     928:	0e 94 18 41 	call	0x8230	; 0x8230 <__gesf2>
     92c:	18 16       	cp	r1, r24
     92e:	84 f4       	brge	.+32     	; 0x950 <__stack+0x51>
		output = 0;
		BalancePID.iTotal = 0.0;
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	dc 01       	movw	r26, r24
     936:	80 93 d7 04 	sts	0x04D7, r24
     93a:	90 93 d8 04 	sts	0x04D8, r25
     93e:	a0 93 d9 04 	sts	0x04D9, r26
     942:	b0 93 da 04 	sts	0x04DA, r27
	AngleCalc.update();
	float output = 0.0;
	float error = desiredAngle - AngleCalc.angle;
	
	if (abs(error) > tuningData.safteyLimit){
		output = 0;
     946:	6c 01       	movw	r12, r24
     948:	7d 01       	movw	r14, r26
		BalancePID.iTotal = 0.0;
		spin = 0;
     94a:	2c 01       	movw	r4, r24
     94c:	3d 01       	movw	r6, r26
     94e:	13 c0       	rjmp	.+38     	; 0x976 <__stack+0x77>
	}
	else{
		output = BalancePID.update(AngleCalc.angle, desiredAngle, AngleCalc.gyro->rate);
     950:	d4 01       	movw	r26, r8
     952:	cd 90       	ld	r12, X+
     954:	dd 90       	ld	r13, X+
     956:	ed 90       	ld	r14, X+
     958:	fc 90       	ld	r15, X
     95a:	8b ec       	ldi	r24, 0xCB	; 203
     95c:	94 e0       	ldi	r25, 0x04	; 4
     95e:	43 2d       	mov	r20, r3
     960:	52 2d       	mov	r21, r2
     962:	6b 2d       	mov	r22, r11
     964:	7a 2d       	mov	r23, r10
     966:	09 81       	ldd	r16, Y+1	; 0x01
     968:	1a 81       	ldd	r17, Y+2	; 0x02
     96a:	2b 81       	ldd	r18, Y+3	; 0x03
     96c:	3c 81       	ldd	r19, Y+4	; 0x04
     96e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN3PID6updateEddd>
     972:	6b 01       	movw	r12, r22
     974:	7c 01       	movw	r14, r24
	}
	setDrive(output + spin, output - spin);
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	a3 01       	movw	r20, r6
     97c:	92 01       	movw	r18, r4
     97e:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__addsf3>
     982:	4b 01       	movw	r8, r22
     984:	5c 01       	movw	r10, r24
     986:	c7 01       	movw	r24, r14
     988:	b6 01       	movw	r22, r12
     98a:	a3 01       	movw	r20, r6
     98c:	92 01       	movw	r18, r4
     98e:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <__subsf3>
     992:	9b 01       	movw	r18, r22
     994:	ac 01       	movw	r20, r24
     996:	c5 01       	movw	r24, r10
     998:	b4 01       	movw	r22, r8
     99a:	0e 94 33 03 	call	0x666	; 0x666 <_Z8setDriveff>
}
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	df 90       	pop	r13
     9b4:	cf 90       	pop	r12
     9b6:	bf 90       	pop	r11
     9b8:	af 90       	pop	r10
     9ba:	9f 90       	pop	r9
     9bc:	8f 90       	pop	r8
     9be:	7f 90       	pop	r7
     9c0:	6f 90       	pop	r6
     9c2:	5f 90       	pop	r5
     9c4:	4f 90       	pop	r4
     9c6:	3f 90       	pop	r3
     9c8:	2f 90       	pop	r2
     9ca:	08 95       	ret

000009cc <loop>:
	writeLed(false);
}

unsigned long lastLoop = 0;
float elapsedSeconds = 0.0;
void loop() {
     9cc:	4f 92       	push	r4
     9ce:	5f 92       	push	r5
     9d0:	6f 92       	push	r6
     9d2:	7f 92       	push	r7
     9d4:	8f 92       	push	r8
     9d6:	9f 92       	push	r9
     9d8:	af 92       	push	r10
     9da:	bf 92       	push	r11
     9dc:	cf 92       	push	r12
     9de:	df 92       	push	r13
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	2c 97       	sbiw	r28, 0x0c	; 12
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	cd bf       	out	0x3d, r28	; 61
	long nowMicros = micros();
     9fc:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
     a00:	69 87       	std	Y+9, r22	; 0x09
     a02:	7a 87       	std	Y+10, r23	; 0x0a
     a04:	8b 87       	std	Y+11, r24	; 0x0b
     a06:	9c 87       	std	Y+12, r25	; 0x0c
	if (lastLoop == 0)
     a08:	80 91 c8 02 	lds	r24, 0x02C8
     a0c:	90 91 c9 02 	lds	r25, 0x02C9
     a10:	a0 91 ca 02 	lds	r26, 0x02CA
     a14:	b0 91 cb 02 	lds	r27, 0x02CB
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	a1 05       	cpc	r26, r1
     a1c:	b1 05       	cpc	r27, r1
     a1e:	61 f4       	brne	.+24     	; 0xa38 <loop+0x6c>
	lastLoop = nowMicros;
     a20:	29 85       	ldd	r18, Y+9	; 0x09
     a22:	3a 85       	ldd	r19, Y+10	; 0x0a
     a24:	4b 85       	ldd	r20, Y+11	; 0x0b
     a26:	5c 85       	ldd	r21, Y+12	; 0x0c
     a28:	20 93 c8 02 	sts	0x02C8, r18
     a2c:	30 93 c9 02 	sts	0x02C9, r19
     a30:	40 93 ca 02 	sts	0x02CA, r20
     a34:	50 93 cb 02 	sts	0x02CB, r21
	elapsedSeconds = (float)(nowMicros - lastLoop) / 1000000;
     a38:	80 91 c8 02 	lds	r24, 0x02C8
     a3c:	90 91 c9 02 	lds	r25, 0x02C9
     a40:	a0 91 ca 02 	lds	r26, 0x02CA
     a44:	b0 91 cb 02 	lds	r27, 0x02CB
     a48:	29 85       	ldd	r18, Y+9	; 0x09
     a4a:	3a 85       	ldd	r19, Y+10	; 0x0a
     a4c:	4b 85       	ldd	r20, Y+11	; 0x0b
     a4e:	5c 85       	ldd	r21, Y+12	; 0x0c
     a50:	28 1b       	sub	r18, r24
     a52:	39 0b       	sbc	r19, r25
     a54:	4a 0b       	sbc	r20, r26
     a56:	5b 0b       	sbc	r21, r27
     a58:	ca 01       	movw	r24, r20
     a5a:	b9 01       	movw	r22, r18
     a5c:	0e 94 41 40 	call	0x8082	; 0x8082 <__floatunsisf>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	34 e2       	ldi	r19, 0x24	; 36
     a64:	44 e7       	ldi	r20, 0x74	; 116
     a66:	59 e4       	ldi	r21, 0x49	; 73
     a68:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <__divsf3>
     a6c:	dc 01       	movw	r26, r24
     a6e:	cb 01       	movw	r24, r22
     a70:	80 93 c4 02 	sts	0x02C4, r24
     a74:	90 93 c5 02 	sts	0x02C5, r25
     a78:	a0 93 c6 02 	sts	0x02C6, r26
     a7c:	b0 93 c7 02 	sts	0x02C7, r27
	Udp.begin(receivePort);
	initSuccessful = result == 0;
}

void poll(){
	unsigned long now = millis();
     a80:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
     a84:	2b 01       	movw	r4, r22
     a86:	3c 01       	movw	r6, r24
	//Handle rollover. Vehicle should never be on that long, but...
	if (now < lastDataReceived) {
     a88:	80 91 c7 04 	lds	r24, 0x04C7
     a8c:	90 91 c8 04 	lds	r25, 0x04C8
     a90:	a0 91 c9 04 	lds	r26, 0x04C9
     a94:	b0 91 ca 04 	lds	r27, 0x04CA
     a98:	48 16       	cp	r4, r24
     a9a:	59 06       	cpc	r5, r25
     a9c:	6a 06       	cpc	r6, r26
     a9e:	7b 06       	cpc	r7, r27
     aa0:	40 f4       	brcc	.+16     	; 0xab2 <loop+0xe6>
		lastDataReceived = 0;
     aa2:	10 92 c7 04 	sts	0x04C7, r1
     aa6:	10 92 c8 04 	sts	0x04C8, r1
     aaa:	10 92 c9 04 	sts	0x04C9, r1
     aae:	10 92 ca 04 	sts	0x04CA, r1
	}
	
	int packetSize = Udp.parsePacket();
     ab2:	8c e1       	ldi	r24, 0x1C	; 28
     ab4:	93 e0       	ldi	r25, 0x03	; 3
     ab6:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_ZN11EthernetUDP11parsePacketEv>
     aba:	8c 01       	movw	r16, r24
	if (packetSize > 0){
     abc:	18 16       	cp	r1, r24
     abe:	19 06       	cpc	r1, r25
     ac0:	0c f0       	brlt	.+2      	; 0xac4 <loop+0xf8>
     ac2:	6d c0       	rjmp	.+218    	; 0xb9e <loop+0x1d2>
		Serial.print("Received:");
     ac4:	0f 2e       	mov	r0, r31
     ac6:	f9 e8       	ldi	r31, 0x89	; 137
     ac8:	af 2e       	mov	r10, r31
     aca:	f5 e0       	ldi	r31, 0x05	; 5
     acc:	bf 2e       	mov	r11, r31
     ace:	f0 2d       	mov	r31, r0
     ad0:	c5 01       	movw	r24, r10
     ad2:	64 e2       	ldi	r22, 0x24	; 36
     ad4:	71 e0       	ldi	r23, 0x01	; 1
     ad6:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
		Serial.print(packetSize);
     ada:	c5 01       	movw	r24, r10
     adc:	b8 01       	movw	r22, r16
     ade:	4a e0       	ldi	r20, 0x0A	; 10
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_ZN5Print5printEii>
		Udp.read(receiveBuffer, 200);
     ae6:	0f 2e       	mov	r0, r31
     ae8:	fc e1       	ldi	r31, 0x1C	; 28
     aea:	cf 2e       	mov	r12, r31
     aec:	f3 e0       	ldi	r31, 0x03	; 3
     aee:	df 2e       	mov	r13, r31
     af0:	f0 2d       	mov	r31, r0
     af2:	0f 2e       	mov	r0, r31
     af4:	fb e1       	ldi	r31, 0x1B	; 27
     af6:	ef 2e       	mov	r14, r31
     af8:	ff 24       	eor	r15, r15
     afa:	f0 2d       	mov	r31, r0
     afc:	ec 0c       	add	r14, r12
     afe:	fd 1c       	adc	r15, r13
     b00:	c6 01       	movw	r24, r12
     b02:	b7 01       	movw	r22, r14
     b04:	48 ec       	ldi	r20, 0xC8	; 200
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
		
		robotModel.update(receiveBuffer, 0, packetSize);
     b0c:	0f 2e       	mov	r0, r31
     b0e:	fc ee       	ldi	r31, 0xEC	; 236
     b10:	8f 2e       	mov	r8, r31
     b12:	ff ef       	ldi	r31, 0xFF	; 255
     b14:	9f 2e       	mov	r9, r31
     b16:	f0 2d       	mov	r31, r0
     b18:	8c 0c       	add	r8, r12
     b1a:	9d 1c       	adc	r9, r13
     b1c:	c4 01       	movw	r24, r8
     b1e:	b7 01       	movw	r22, r14
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	98 01       	movw	r18, r16
     b26:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <_ZN10RobotModel6updateEPhjj>
		
		unsigned int transmitLength = 0;
     b2a:	18 86       	std	Y+8, r1	; 0x08
     b2c:	1f 82       	std	Y+7, r1	; 0x07
		robotModel.getStatus(transmitBuffer, &transmitLength);
     b2e:	0f ef       	ldi	r16, 0xFF	; 255
     b30:	13 e0       	ldi	r17, 0x03	; 3
     b32:	c4 01       	movw	r24, r8
     b34:	b8 01       	movw	r22, r16
     b36:	ae 01       	movw	r20, r28
     b38:	49 5f       	subi	r20, 0xF9	; 249
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <_ZN10RobotModel9getStatusEPhPj>
		
		Serial.print(" Sending:");
     b40:	c5 01       	movw	r24, r10
     b42:	6e e2       	ldi	r22, 0x2E	; 46
     b44:	71 e0       	ldi	r23, 0x01	; 1
     b46:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
		Serial.println(transmitLength);
     b4a:	6f 81       	ldd	r22, Y+7	; 0x07
     b4c:	78 85       	ldd	r23, Y+8	; 0x08
     b4e:	c5 01       	movw	r24, r10
     b50:	4a e0       	ldi	r20, 0x0A	; 10
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	0e 94 01 1c 	call	0x3802	; 0x3802 <_ZN5Print7printlnEji>

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
     b58:	8b e4       	ldi	r24, 0x4B	; 75
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	9a 83       	std	Y+2, r25	; 0x02
     b5e:	89 83       	std	Y+1, r24	; 0x01
     b60:	80 91 2d 03 	lds	r24, 0x032D
     b64:	90 91 2e 03 	lds	r25, 0x032E
     b68:	a0 91 2f 03 	lds	r26, 0x032F
     b6c:	b0 91 30 03 	lds	r27, 0x0330
     b70:	8b 83       	std	Y+3, r24	; 0x03
     b72:	9c 83       	std	Y+4, r25	; 0x04
     b74:	ad 83       	std	Y+5, r26	; 0x05
     b76:	be 83       	std	Y+6, r27	; 0x06
		
		Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
     b78:	40 91 31 03 	lds	r20, 0x0331
     b7c:	50 91 32 03 	lds	r21, 0x0332
     b80:	c6 01       	movw	r24, r12
     b82:	be 01       	movw	r22, r28
     b84:	6f 5f       	subi	r22, 0xFF	; 255
     b86:	7f 4f       	sbci	r23, 0xFF	; 255
     b88:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_ZN11EthernetUDP11beginPacketE9IPAddressj>
		Udp.write(transmitBuffer, transmitLength);
     b8c:	4f 81       	ldd	r20, Y+7	; 0x07
     b8e:	58 85       	ldd	r21, Y+8	; 0x08
     b90:	c6 01       	movw	r24, r12
     b92:	b8 01       	movw	r22, r16
     b94:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>
		Udp.endPacket();
     b98:	c6 01       	movw	r24, r12
     b9a:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN11EthernetUDP9endPacketEv>
	}
	
	unsigned long safeTime = lastDataReceived + RECEIVE_SAFTEY_DELAY;
     b9e:	80 91 c7 04 	lds	r24, 0x04C7
     ba2:	90 91 c8 04 	lds	r25, 0x04C8
     ba6:	a0 91 c9 04 	lds	r26, 0x04C9
     baa:	b0 91 ca 04 	lds	r27, 0x04CA
     bae:	8c 50       	subi	r24, 0x0C	; 12
     bb0:	9e 4f       	sbci	r25, 0xFE	; 254
     bb2:	af 4f       	sbci	r26, 0xFF	; 255
     bb4:	bf 4f       	sbci	r27, 0xFF	; 255
	isConnected = now > safeTime;
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	84 15       	cp	r24, r4
     bba:	95 05       	cpc	r25, r5
     bbc:	a6 05       	cpc	r26, r6
     bbe:	b7 05       	cpc	r27, r7
     bc0:	08 f0       	brcs	.+2      	; 0xbc4 <loop+0x1f8>
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	60 93 07 03 	sts	0x0307, r22
	robotModel.loop(isConnected);
     bc8:	88 e0       	ldi	r24, 0x08	; 8
     bca:	93 e0       	ldi	r25, 0x03	; 3
     bcc:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <_ZN10RobotModel4loopEb>
	
	//beagleComm.poll();
	udpComm.poll();
	
	Serial.print(tuningData.spin);
     bd0:	40 91 ef 02 	lds	r20, 0x02EF
     bd4:	50 91 f0 02 	lds	r21, 0x02F0
     bd8:	60 91 f1 02 	lds	r22, 0x02F1
     bdc:	70 91 f2 02 	lds	r23, 0x02F2
     be0:	89 e8       	ldi	r24, 0x89	; 137
     be2:	95 e0       	ldi	r25, 0x05	; 5
     be4:	22 e0       	ldi	r18, 0x02	; 2
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <_ZN5Print5printEdi>
	if (elapsedSeconds >= 0.01){
     bec:	60 91 c4 02 	lds	r22, 0x02C4
     bf0:	70 91 c5 02 	lds	r23, 0x02C5
     bf4:	80 91 c6 02 	lds	r24, 0x02C6
     bf8:	90 91 c7 02 	lds	r25, 0x02C7
     bfc:	2a e0       	ldi	r18, 0x0A	; 10
     bfe:	37 ed       	ldi	r19, 0xD7	; 215
     c00:	43 e2       	ldi	r20, 0x23	; 35
     c02:	5c e3       	ldi	r21, 0x3C	; 60
     c04:	0e 94 18 41 	call	0x8230	; 0x8230 <__gesf2>
     c08:	88 23       	and	r24, r24
     c0a:	0c f4       	brge	.+2      	; 0xc0e <loop+0x242>
     c0c:	5e c0       	rjmp	.+188    	; 0xcca <loop+0x2fe>
		BalancePID.P = tuningData.p;
     c0e:	80 91 db 02 	lds	r24, 0x02DB
     c12:	90 91 dc 02 	lds	r25, 0x02DC
     c16:	a0 91 dd 02 	lds	r26, 0x02DD
     c1a:	b0 91 de 02 	lds	r27, 0x02DE
     c1e:	80 93 cb 04 	sts	0x04CB, r24
     c22:	90 93 cc 04 	sts	0x04CC, r25
     c26:	a0 93 cd 04 	sts	0x04CD, r26
     c2a:	b0 93 ce 04 	sts	0x04CE, r27
		BalancePID.I = tuningData.i;
     c2e:	80 91 df 02 	lds	r24, 0x02DF
     c32:	90 91 e0 02 	lds	r25, 0x02E0
     c36:	a0 91 e1 02 	lds	r26, 0x02E1
     c3a:	b0 91 e2 02 	lds	r27, 0x02E2
     c3e:	80 93 cf 04 	sts	0x04CF, r24
     c42:	90 93 d0 04 	sts	0x04D0, r25
     c46:	a0 93 d1 04 	sts	0x04D1, r26
     c4a:	b0 93 d2 04 	sts	0x04D2, r27
		BalancePID.D = tuningData.d;
     c4e:	80 91 e3 02 	lds	r24, 0x02E3
     c52:	90 91 e4 02 	lds	r25, 0x02E4
     c56:	a0 91 e5 02 	lds	r26, 0x02E5
     c5a:	b0 91 e6 02 	lds	r27, 0x02E6
     c5e:	80 93 d3 04 	sts	0x04D3, r24
     c62:	90 93 d4 04 	sts	0x04D4, r25
     c66:	a0 93 d5 04 	sts	0x04D5, r26
     c6a:	b0 93 d6 04 	sts	0x04D6, r27
		/*BalancePID.P = -0.08f;
		BalancePID.I = -0.005f;
		BalancePID.D = 0.0005f;
		*/
		
		lastLoop = nowMicros;
     c6e:	89 85       	ldd	r24, Y+9	; 0x09
     c70:	9a 85       	ldd	r25, Y+10	; 0x0a
     c72:	ab 85       	ldd	r26, Y+11	; 0x0b
     c74:	bc 85       	ldd	r27, Y+12	; 0x0c
     c76:	80 93 c8 02 	sts	0x02C8, r24
     c7a:	90 93 c9 02 	sts	0x02C9, r25
     c7e:	a0 93 ca 02 	sts	0x02CA, r26
     c82:	b0 93 cb 02 	sts	0x02CB, r27
		
		balance(tuningData.desiredAngle, tuningData.spin);
     c86:	60 91 eb 02 	lds	r22, 0x02EB
     c8a:	70 91 ec 02 	lds	r23, 0x02EC
     c8e:	80 91 ed 02 	lds	r24, 0x02ED
     c92:	90 91 ee 02 	lds	r25, 0x02EE
     c96:	20 91 ef 02 	lds	r18, 0x02EF
     c9a:	30 91 f0 02 	lds	r19, 0x02F0
     c9e:	40 91 f1 02 	lds	r20, 0x02F1
     ca2:	50 91 f2 02 	lds	r21, 0x02F2
     ca6:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z7balanceff>
		tuningData.currentAngle = AngleCalc.angle;
     caa:	80 91 01 05 	lds	r24, 0x0501
     cae:	90 91 02 05 	lds	r25, 0x0502
     cb2:	a0 91 03 05 	lds	r26, 0x0503
     cb6:	b0 91 04 05 	lds	r27, 0x0504
     cba:	80 93 e7 02 	sts	0x02E7, r24
     cbe:	90 93 e8 02 	sts	0x02E8, r25
     cc2:	a0 93 e9 02 	sts	0x02E9, r26
     cc6:	b0 93 ea 02 	sts	0x02EA, r27
		//printAngle();
		//printImuCsv();
		//testCenter();
	}
}
     cca:	2c 96       	adiw	r28, 0x0c	; 12
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	af 90       	pop	r10
     cea:	9f 90       	pop	r9
     cec:	8f 90       	pop	r8
     cee:	7f 90       	pop	r7
     cf0:	6f 90       	pop	r6
     cf2:	5f 90       	pop	r5
     cf4:	4f 90       	pop	r4
     cf6:	08 95       	ret

00000cf8 <_Z9calibrateii>:
	
	left.writeMicroseconds(LEFT_CENTER + removeDeadband(leftVal, PLUSE_DEADBAND, PULSE_RANGE));
	right.writeMicroseconds(RIGHT_CENTER + removeDeadband(rightVal, PLUSE_DEADBAND, PULSE_RANGE));
}

void calibrate(int calibrationDelay, int calibrationLoops) {
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	ec 01       	movw	r28, r24
     d06:	7b 01       	movw	r14, r22
	Serial.println("Waiting to calibrate...");
     d08:	09 e8       	ldi	r16, 0x89	; 137
     d0a:	15 e0       	ldi	r17, 0x05	; 5
     d0c:	c8 01       	movw	r24, r16
     d0e:	68 e3       	ldi	r22, 0x38	; 56
     d10:	71 e0       	ldi	r23, 0x01	; 1
     d12:	0e 94 2b 1b 	call	0x3656	; 0x3656 <_ZN5Print7printlnEPKc>
	delay(calibrationDelay);
     d16:	be 01       	movw	r22, r28
     d18:	88 27       	eor	r24, r24
     d1a:	77 fd       	sbrc	r23, 7
     d1c:	80 95       	com	r24
     d1e:	98 2f       	mov	r25, r24
     d20:	0e 94 ca 21 	call	0x4394	; 0x4394 <delay>
	Serial.println("Calibrating...");
     d24:	c8 01       	movw	r24, r16
     d26:	60 e5       	ldi	r22, 0x50	; 80
     d28:	71 e0       	ldi	r23, 0x01	; 1
     d2a:	0e 94 2b 1b 	call	0x3656	; 0x3656 <_ZN5Print7printlnEPKc>

	for (int i = 0; i < calibrationLoops; i++) {
     d2e:	1e 14       	cp	r1, r14
     d30:	1f 04       	cpc	r1, r15
     d32:	8c f4       	brge	.+34     	; 0xd56 <_Z9calibrateii+0x5e>
     d34:	c0 e0       	ldi	r28, 0x00	; 0
     d36:	d0 e0       	ldi	r29, 0x00	; 0
		TiltGyro.calibrate();
     d38:	0f e2       	ldi	r16, 0x2F	; 47
     d3a:	15 e0       	ldi	r17, 0x05	; 5
     d3c:	c8 01       	movw	r24, r16
     d3e:	0e 94 19 09 	call	0x1232	; 0x1232 <_ZN4Gyro9calibrateEv>
		delay(5);
     d42:	65 e0       	ldi	r22, 0x05	; 5
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 ca 21 	call	0x4394	; 0x4394 <delay>
void calibrate(int calibrationDelay, int calibrationLoops) {
	Serial.println("Waiting to calibrate...");
	delay(calibrationDelay);
	Serial.println("Calibrating...");

	for (int i = 0; i < calibrationLoops; i++) {
     d4e:	21 96       	adiw	r28, 0x01	; 1
     d50:	ce 15       	cp	r28, r14
     d52:	df 05       	cpc	r29, r15
     d54:	99 f7       	brne	.-26     	; 0xd3c <_Z9calibrateii+0x44>
		TiltGyro.calibrate();
		delay(5);
	}
	
	TiltGyro.endCalibrate();
     d56:	8f e2       	ldi	r24, 0x2F	; 47
     d58:	95 e0       	ldi	r25, 0x05	; 5
     d5a:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZN4Gyro12endCalibrateEv>

	Serial.println("Calibration complete!");
     d5e:	c9 e8       	ldi	r28, 0x89	; 137
     d60:	d5 e0       	ldi	r29, 0x05	; 5
     d62:	ce 01       	movw	r24, r28
     d64:	6f e5       	ldi	r22, 0x5F	; 95
     d66:	71 e0       	ldi	r23, 0x01	; 1
     d68:	0e 94 2b 1b 	call	0x3656	; 0x3656 <_ZN5Print7printlnEPKc>
	Serial.print("GyroCenter:");
     d6c:	ce 01       	movw	r24, r28
     d6e:	65 e7       	ldi	r22, 0x75	; 117
     d70:	71 e0       	ldi	r23, 0x01	; 1
     d72:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
	Serial.print(TiltGyro.center);
     d76:	60 91 3d 05 	lds	r22, 0x053D
     d7a:	70 91 3e 05 	lds	r23, 0x053E
     d7e:	ce 01       	movw	r24, r28
     d80:	4a e0       	ldi	r20, 0x0A	; 10
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_ZN5Print5printEii>
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	08 95       	ret

00000d96 <setup>:
//SerialInterface beagleComm;
UdpComms udpComm;
TuningDataSection tuningData;
RslModelSection rsl;

void setup() {
     d96:	8f 92       	push	r8
     d98:	9f 92       	push	r9
     d9a:	af 92       	push	r10
     d9c:	bf 92       	push	r11
     d9e:	cf 92       	push	r12
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	2c 97       	sbiw	r28, 0x0c	; 12
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
	
	pinMode(13, OUTPUT);
     dbe:	8d e0       	ldi	r24, 0x0D	; 13
     dc0:	61 e0       	ldi	r22, 0x01	; 1
     dc2:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <pinMode>
	writeLed(true);
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	0e 94 2e 03 	call	0x65c	; 0x65c <_Z8writeLedb>
	Serial.begin(115200);
     dcc:	09 e8       	ldi	r16, 0x89	; 137
     dce:	15 e0       	ldi	r17, 0x05	; 5
     dd0:	c8 01       	movw	r24, r16
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	52 ec       	ldi	r21, 0xC2	; 194
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	0e 94 0c 18 	call	0x3018	; 0x3018 <_ZN14HardwareSerial5beginEm>
	
	Serial.println("Starting up...");
     dde:	c8 01       	movw	r24, r16
     de0:	61 e8       	ldi	r22, 0x81	; 129
     de2:	71 e0       	ldi	r23, 0x01	; 1
     de4:	0e 94 2b 1b 	call	0x3656	; 0x3656 <_ZN5Print7printlnEPKc>
	
	udpComm.isDhcp = true;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	80 93 fd 02 	sts	0x02FD, r24
	udpComm.receivePort = 8888;
     dee:	88 eb       	ldi	r24, 0xB8	; 184
     df0:	92 e2       	ldi	r25, 0x22	; 34
     df2:	90 93 06 03 	sts	0x0306, r25
     df6:	80 93 05 03 	sts	0x0305, r24
	byte mac[6] = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
     dfa:	de 01       	movw	r26, r28
     dfc:	17 96       	adiw	r26, 0x07	; 7
     dfe:	e9 ea       	ldi	r30, 0xA9	; 169
     e00:	f1 e0       	ldi	r31, 0x01	; 1
     e02:	86 e0       	ldi	r24, 0x06	; 6
     e04:	01 90       	ld	r0, Z+
     e06:	0d 92       	st	X+, r0
     e08:	81 50       	subi	r24, 0x01	; 1
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <setup+0x6e>
     e0c:	fe 01       	movw	r30, r28
     e0e:	37 96       	adiw	r30, 0x07	; 7
     e10:	a7 ef       	ldi	r26, 0xF7	; 247
     e12:	b2 e0       	ldi	r27, 0x02	; 2
//SerialInterface beagleComm;
UdpComms udpComm;
TuningDataSection tuningData;
RslModelSection rsl;

void setup() {
     e14:	ce 01       	movw	r24, r28
     e16:	0d 96       	adiw	r24, 0x0d	; 13
	
	udpComm.isDhcp = true;
	udpComm.receivePort = 8888;
	byte mac[6] = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
	for (int i = 0; i< 6; i++){
		udpComm.macAddress[i] = mac[i];
     e18:	21 91       	ld	r18, Z+
     e1a:	2d 93       	st	X+, r18
	Serial.println("Starting up...");
	
	udpComm.isDhcp = true;
	udpComm.receivePort = 8888;
	byte mac[6] = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};
	for (int i = 0; i< 6; i++){
     e1c:	e8 17       	cp	r30, r24
     e1e:	f9 07       	cpc	r31, r25
     e20:	d9 f7       	brne	.-10     	; 0xe18 <setup+0x82>


void init(){
	int result;
	if (isDhcp){
		result = Ethernet.begin(macAddress);
     e22:	07 ef       	ldi	r16, 0xF7	; 247
     e24:	12 e0       	ldi	r17, 0x02	; 2
     e26:	87 e5       	ldi	r24, 0x57	; 87
     e28:	95 e0       	ldi	r25, 0x05	; 5
     e2a:	b8 01       	movw	r22, r16
     e2c:	0e 94 07 0b 	call	0x160e	; 0x160e <_ZN13EthernetClass5beginEPh>
     e30:	7c 01       	movw	r14, r24
	}
	else{
		result = -1;//Ethernet.begin(macAddress, ipAddress);
	}
	
	Udp.begin(receivePort);
     e32:	60 91 05 03 	lds	r22, 0x0305
     e36:	70 91 06 03 	lds	r23, 0x0306
     e3a:	c8 01       	movw	r24, r16
     e3c:	85 96       	adiw	r24, 0x25	; 37
     e3e:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_ZN11EthernetUDP5beginEj>
	initSuccessful = result == 0;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	e1 14       	cp	r14, r1
     e46:	f1 04       	cpc	r15, r1
     e48:	09 f0       	breq	.+2      	; 0xe4c <setup+0xb6>
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	80 93 04 03 	sts	0x0304, r24
		udpComm.macAddress[i] = mac[i];
	}
	udpComm.init();
	udpComm.robotModel.addSection(&tuningData);
     e50:	08 e0       	ldi	r16, 0x08	; 8
     e52:	13 e0       	ldi	r17, 0x03	; 3
     e54:	c8 01       	movw	r24, r16
     e56:	65 ed       	ldi	r22, 0xD5	; 213
     e58:	72 e0       	ldi	r23, 0x02	; 2
     e5a:	0e 94 8d 38 	call	0x711a	; 0x711a <_ZN10RobotModel10addSectionEP17RobotModelSection>
	udpComm.robotModel.addSection(&rsl);
     e5e:	c8 01       	movw	r24, r16
     e60:	6c ec       	ldi	r22, 0xCC	; 204
     e62:	72 e0       	ldi	r23, 0x02	; 2
     e64:	0e 94 8d 38 	call	0x711a	; 0x711a <_ZN10RobotModel10addSectionEP17RobotModelSection>
	
	tuningData.p = -0.08f;
     e68:	8a e0       	ldi	r24, 0x0A	; 10
     e6a:	97 ed       	ldi	r25, 0xD7	; 215
     e6c:	a3 ea       	ldi	r26, 0xA3	; 163
     e6e:	bd eb       	ldi	r27, 0xBD	; 189
     e70:	80 93 db 02 	sts	0x02DB, r24
     e74:	90 93 dc 02 	sts	0x02DC, r25
     e78:	a0 93 dd 02 	sts	0x02DD, r26
     e7c:	b0 93 de 02 	sts	0x02DE, r27
	tuningData.i = -0.005f;
     e80:	8a e0       	ldi	r24, 0x0A	; 10
     e82:	97 ed       	ldi	r25, 0xD7	; 215
     e84:	a3 ea       	ldi	r26, 0xA3	; 163
     e86:	bb eb       	ldi	r27, 0xBB	; 187
     e88:	80 93 df 02 	sts	0x02DF, r24
     e8c:	90 93 e0 02 	sts	0x02E0, r25
     e90:	a0 93 e1 02 	sts	0x02E1, r26
     e94:	b0 93 e2 02 	sts	0x02E2, r27
	tuningData.d = 0.0005f;
     e98:	8f e6       	ldi	r24, 0x6F	; 111
     e9a:	92 e1       	ldi	r25, 0x12	; 18
     e9c:	a3 e0       	ldi	r26, 0x03	; 3
     e9e:	ba e3       	ldi	r27, 0x3A	; 58
     ea0:	80 93 e3 02 	sts	0x02E3, r24
     ea4:	90 93 e4 02 	sts	0x02E4, r25
     ea8:	a0 93 e5 02 	sts	0x02E5, r26
     eac:	b0 93 e6 02 	sts	0x02E6, r27
	tuningData.desiredAngle = -8;
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	a0 e0       	ldi	r26, 0x00	; 0
     eb6:	b1 ec       	ldi	r27, 0xC1	; 193
     eb8:	80 93 eb 02 	sts	0x02EB, r24
     ebc:	90 93 ec 02 	sts	0x02EC, r25
     ec0:	a0 93 ed 02 	sts	0x02ED, r26
     ec4:	b0 93 ee 02 	sts	0x02EE, r27
	tuningData.spin = 0;
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	dc 01       	movw	r26, r24
     ece:	80 93 ef 02 	sts	0x02EF, r24
     ed2:	90 93 f0 02 	sts	0x02F0, r25
     ed6:	a0 93 f1 02 	sts	0x02F1, r26
     eda:	b0 93 f2 02 	sts	0x02F2, r27
	tuningData.safteyLimit = 3;
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e4       	ldi	r26, 0x40	; 64
     ee4:	b0 e4       	ldi	r27, 0x40	; 64
     ee6:	80 93 f3 02 	sts	0x02F3, r24
     eea:	90 93 f4 02 	sts	0x02F4, r25
     eee:	a0 93 f5 02 	sts	0x02F5, r26
     ef2:	b0 93 f6 02 	sts	0x02F6, r27
	
	// print your local IP address:
	Serial.print("My IP address: ");
     ef6:	89 e8       	ldi	r24, 0x89	; 137
     ef8:	95 e0       	ldi	r25, 0x05	; 5
     efa:	60 e9       	ldi	r22, 0x90	; 144
     efc:	71 e0       	ldi	r23, 0x01	; 1
     efe:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
     f02:	8e 01       	movw	r16, r28
     f04:	0d 5f       	subi	r16, 0xFD	; 253
     f06:	1f 4f       	sbci	r17, 0xFF	; 255
//SerialInterface beagleComm;
UdpComms udpComm;
TuningDataSection tuningData;
RslModelSection rsl;

void setup() {
     f08:	0f 2e       	mov	r0, r31
     f0a:	f7 e0       	ldi	r31, 0x07	; 7
     f0c:	ef 2e       	mov	r14, r31
     f0e:	ff 24       	eor	r15, r15
     f10:	f0 2d       	mov	r31, r0
     f12:	ec 0e       	add	r14, r28
     f14:	fd 1e       	adc	r15, r29
	
	// print your local IP address:
	Serial.print("My IP address: ");
	for (byte i = 0; i < 4; i++) {
		// print the value of each byte of the IP address:
		Serial.print(Ethernet.localIP()[i], DEC);
     f16:	0f 2e       	mov	r0, r31
     f18:	f7 e5       	ldi	r31, 0x57	; 87
     f1a:	af 2e       	mov	r10, r31
     f1c:	f5 e0       	ldi	r31, 0x05	; 5
     f1e:	bf 2e       	mov	r11, r31
     f20:	f0 2d       	mov	r31, r0
     f22:	0f 2e       	mov	r0, r31
     f24:	f9 e8       	ldi	r31, 0x89	; 137
     f26:	cf 2e       	mov	r12, r31
     f28:	f5 e0       	ldi	r31, 0x05	; 5
     f2a:	df 2e       	mov	r13, r31
     f2c:	f0 2d       	mov	r31, r0
		Serial.print(".");
     f2e:	0f 2e       	mov	r0, r31
     f30:	f0 ea       	ldi	r31, 0xA0	; 160
     f32:	8f 2e       	mov	r8, r31
     f34:	f1 e0       	ldi	r31, 0x01	; 1
     f36:	9f 2e       	mov	r9, r31
     f38:	f0 2d       	mov	r31, r0
	
	// print your local IP address:
	Serial.print("My IP address: ");
	for (byte i = 0; i < 4; i++) {
		// print the value of each byte of the IP address:
		Serial.print(Ethernet.localIP()[i], DEC);
     f3a:	ce 01       	movw	r24, r28
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	b5 01       	movw	r22, r10
     f40:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <_ZN13EthernetClass7localIPEv>
     f44:	f8 01       	movw	r30, r16
     f46:	61 91       	ld	r22, Z+
     f48:	8f 01       	movw	r16, r30
     f4a:	c6 01       	movw	r24, r12
     f4c:	4a e0       	ldi	r20, 0x0A	; 10
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	0e 94 13 1c 	call	0x3826	; 0x3826 <_ZN5Print5printEhi>
		Serial.print(".");
     f54:	c6 01       	movw	r24, r12
     f56:	b4 01       	movw	r22, r8
     f58:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
	tuningData.spin = 0;
	tuningData.safteyLimit = 3;
	
	// print your local IP address:
	Serial.print("My IP address: ");
	for (byte i = 0; i < 4; i++) {
     f5c:	0e 15       	cp	r16, r14
     f5e:	1f 05       	cpc	r17, r15
     f60:	61 f7       	brne	.-40     	; 0xf3a <setup+0x1a4>
		// print the value of each byte of the IP address:
		Serial.print(Ethernet.localIP()[i], DEC);
		Serial.print(".");
	}
	Serial.println();
     f62:	09 e8       	ldi	r16, 0x89	; 137
     f64:	15 e0       	ldi	r17, 0x05	; 5
     f66:	c8 01       	movw	r24, r16
     f68:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_ZN5Print7printlnEv>
	
	calibrate(2000, 200);
     f6c:	80 ed       	ldi	r24, 0xD0	; 208
     f6e:	97 e0       	ldi	r25, 0x07	; 7
     f70:	68 ec       	ldi	r22, 0xC8	; 200
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_Z9calibrateii>
	
	right.attach(RIGHT_MOTOR);
     f78:	83 ee       	ldi	r24, 0xE3	; 227
     f7a:	94 e0       	ldi	r25, 0x04	; 4
     f7c:	62 e0       	ldi	r22, 0x02	; 2
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <_ZN5Servo6attachEi>
	left.attach(LEFT_MOTOR);
     f84:	86 ee       	ldi	r24, 0xE6	; 230
     f86:	94 e0       	ldi	r25, 0x04	; 4
     f88:	63 e0       	ldi	r22, 0x03	; 3
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <_ZN5Servo6attachEi>

	Serial.println("Ready.");
     f90:	c8 01       	movw	r24, r16
     f92:	62 ea       	ldi	r22, 0xA2	; 162
     f94:	71 e0       	ldi	r23, 0x01	; 1
     f96:	0e 94 2b 1b 	call	0x3656	; 0x3656 <_ZN5Print7printlnEPKc>
	writeLed(false);
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	0e 94 2e 03 	call	0x65c	; 0x65c <_Z8writeLedb>
}
     fa0:	2c 96       	adiw	r28, 0x0c	; 12
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	ff 90       	pop	r15
     fb6:	ef 90       	pop	r14
     fb8:	df 90       	pop	r13
     fba:	cf 90       	pop	r12
     fbc:	bf 90       	pop	r11
     fbe:	af 90       	pop	r10
     fc0:	9f 90       	pop	r9
     fc2:	8f 90       	pop	r8
     fc4:	08 95       	ret

00000fc6 <_GLOBAL__sub_I_TiltGyro>:
	TiltGyro.endCalibrate();

	Serial.println("Calibration complete!");
	Serial.print("GyroCenter:");
	Serial.print(TiltGyro.center);
     fc6:	cf 92       	push	r12
     fc8:	df 92       	push	r13
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     fd6:	8d e4       	ldi	r24, 0x4D	; 77
     fd8:	95 e0       	ldi	r25, 0x05	; 5
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	00 e0       	ldi	r16, 0x00	; 0
     fe2:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN9IPAddressC1Ehhhh>
#define RIGHT_MOTOR 2
#define RIGHT_INVERT 1
#define LEFT_INVERT -1


Gyro TiltGyro(9, 1);
     fe6:	cf e2       	ldi	r28, 0x2F	; 47
     fe8:	d5 e0       	ldi	r29, 0x05	; 5
     fea:	ce 01       	movw	r24, r28
     fec:	69 e0       	ldi	r22, 0x09	; 9
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e8       	ldi	r20, 0x80	; 128
     ff6:	5f e3       	ldi	r21, 0x3F	; 63
     ff8:	0e 94 9c 08 	call	0x1138	; 0x1138 <_ZN4GyroC1Eid>

#include "Accelerometer.h"

class AnalogAccelerometer : public Accelerometer {
	public:
		AnalogAccelerometer(int pin, int center, boolean invert){
     ffc:	23 eb       	ldi	r18, 0xB3	; 179
     ffe:	31 e0       	ldi	r19, 0x01	; 1
    1000:	30 93 25 05 	sts	0x0525, r19
    1004:	20 93 24 05 	sts	0x0524, r18
			this->pin = pin;
    1008:	8c e0       	ldi	r24, 0x0C	; 12
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	90 93 2e 05 	sts	0x052E, r25
    1010:	80 93 2d 05 	sts	0x052D, r24
class Accelerometer
{
	public:
		
	void init(int center, bool invert){
		this->center = center;
    1014:	84 ef       	ldi	r24, 0xF4	; 244
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	90 93 28 05 	sts	0x0528, r25
    101c:	80 93 27 05 	sts	0x0527, r24
		this->invert = invert;
    1020:	41 e0       	ldi	r20, 0x01	; 1
    1022:	40 93 26 05 	sts	0x0526, r20

#include "Accelerometer.h"

class AnalogAccelerometer : public Accelerometer {
	public:
		AnalogAccelerometer(int pin, int center, boolean invert){
    1026:	30 93 1a 05 	sts	0x051A, r19
    102a:	20 93 19 05 	sts	0x0519, r18
			this->pin = pin;
    102e:	2d e0       	ldi	r18, 0x0D	; 13
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	30 93 23 05 	sts	0x0523, r19
    1036:	20 93 22 05 	sts	0x0522, r18
class Accelerometer
{
	public:
		
	void init(int center, bool invert){
		this->center = center;
    103a:	90 93 1d 05 	sts	0x051D, r25
    103e:	80 93 1c 05 	sts	0x051C, r24
		this->invert = invert;
    1042:	40 93 1b 05 	sts	0x051B, r20
#define ANGLE_PRINT_INTERVAL 500
class SimpleAngleThing
{
	public:
	SimpleAngleThing(Gyro *gyro, Accelerometer *xAccel, Accelerometer *yAccel, double gyroWeight, bool updateSensors){
		this->gyro = gyro;
    1046:	d0 93 06 05 	sts	0x0506, r29
    104a:	c0 93 05 05 	sts	0x0505, r28
		this->xAccel = xAccel;
    104e:	89 e1       	ldi	r24, 0x19	; 25
    1050:	95 e0       	ldi	r25, 0x05	; 5
    1052:	90 93 08 05 	sts	0x0508, r25
    1056:	80 93 07 05 	sts	0x0507, r24
		this->yAccel = yAccel;
    105a:	84 e2       	ldi	r24, 0x24	; 36
    105c:	95 e0       	ldi	r25, 0x05	; 5
    105e:	90 93 0a 05 	sts	0x050A, r25
    1062:	80 93 09 05 	sts	0x0509, r24
		this->gyroWeight = gyroWeight;
    1066:	88 e4       	ldi	r24, 0x48	; 72
    1068:	91 ee       	ldi	r25, 0xE1	; 225
    106a:	aa e7       	ldi	r26, 0x7A	; 122
    106c:	bf e3       	ldi	r27, 0x3F	; 63
    106e:	80 93 0b 05 	sts	0x050B, r24
    1072:	90 93 0c 05 	sts	0x050C, r25
    1076:	a0 93 0d 05 	sts	0x050D, r26
    107a:	b0 93 0e 05 	sts	0x050E, r27
		this->accelWeight = 1 - gyroWeight;
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	97 ed       	ldi	r25, 0xD7	; 215
    1082:	a3 ea       	ldi	r26, 0xA3	; 163
    1084:	bc e3       	ldi	r27, 0x3C	; 60
    1086:	80 93 0f 05 	sts	0x050F, r24
    108a:	90 93 10 05 	sts	0x0510, r25
    108e:	a0 93 11 05 	sts	0x0511, r26
    1092:	b0 93 12 05 	sts	0x0512, r27
		this->updateSensors = updateSensors;
    1096:	40 93 13 05 	sts	0x0513, r20
		firstAngleUpdate = true;
    109a:	40 93 14 05 	sts	0x0514, r20
AnalogAccelerometer UpAccel(12, 500, true);
AnalogAccelerometer ForwardAccel(13, 500, true);
SimpleAngleThing AngleCalc(&TiltGyro, &ForwardAccel, &UpAccel, 0.98, true);

Encoder leftEnc (21, 18);
    109e:	85 ef       	ldi	r24, 0xF5	; 245
    10a0:	94 e0       	ldi	r25, 0x04	; 4
    10a2:	65 e1       	ldi	r22, 0x15	; 21
    10a4:	42 e1       	ldi	r20, 0x12	; 18
    10a6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN7EncoderC1Ehh>
Encoder rightEnc (20,17);
    10aa:	89 ee       	ldi	r24, 0xE9	; 233
    10ac:	94 e0       	ldi	r25, 0x04	; 4
    10ae:	64 e1       	ldi	r22, 0x14	; 20
    10b0:	41 e1       	ldi	r20, 0x11	; 17
    10b2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN7EncoderC1Ehh>

Servo left;
    10b6:	86 ee       	ldi	r24, 0xE6	; 230
    10b8:	94 e0       	ldi	r25, 0x04	; 4
    10ba:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <_ZN5ServoC1Ev>
Servo right;
    10be:	83 ee       	ldi	r24, 0xE3	; 227
    10c0:	94 e0       	ldi	r25, 0x04	; 4
    10c2:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <_ZN5ServoC1Ev>
#define LEFT_CENTER 1500
#define RIGHT_CENTER 1490
#define PLUSE_DEADBAND 80

//PID BalancePID(-40, -2, -25);
PID BalancePID(0, 0, 0);
    10c6:	8b ec       	ldi	r24, 0xCB	; 203
    10c8:	94 e0       	ldi	r25, 0x04	; 4
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	ba 01       	movw	r22, r20
    10d0:	8a 01       	movw	r16, r20
    10d2:	9b 01       	movw	r18, r22
    10d4:	6a 01       	movw	r12, r20
    10d6:	7b 01       	movw	r14, r22
    10d8:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN3PIDC1Eddd>
#include <Ethernet\EthernetUdp.h>
#include <RobotModel\RobotModel.h>

class UdpComms {
	public:
UdpComms(){}
    10dc:	ce ef       	ldi	r28, 0xFE	; 254
    10de:	d2 e0       	ldi	r29, 0x02	; 2
    10e0:	ce 01       	movw	r24, r28
    10e2:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN9IPAddressC1Ev>
    10e6:	ce 01       	movw	r24, r28
    10e8:	0a 96       	adiw	r24, 0x0a	; 10
    10ea:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <_ZN10RobotModelC1Ev>
    10ee:	ce 01       	movw	r24, r28
    10f0:	4e 96       	adiw	r24, 0x1e	; 30
    10f2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN11EthernetUDPC1Ev>
#include <Utils\ByteReader.h>
#include <RobotModel\RobotModelSection.h>

class TuningDataSection : public RobotModelSection{
	public:
	TuningDataSection(){
    10f6:	85 ed       	ldi	r24, 0xD5	; 213
    10f8:	92 e0       	ldi	r25, 0x02	; 2
    10fa:	0e 94 fd 38 	call	0x71fa	; 0x71fa <_ZN17RobotModelSectionC1Ev>
    10fe:	89 eb       	ldi	r24, 0xB9	; 185
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	90 93 d6 02 	sts	0x02D6, r25
    1106:	80 93 d5 02 	sts	0x02D5, r24
		this->sectionId = 255;
    110a:	8f ef       	ldi	r24, 0xFF	; 255
    110c:	80 93 d7 02 	sts	0x02D7, r24

//SerialInterface beagleComm;
UdpComms udpComm;
TuningDataSection tuningData;
RslModelSection rsl;
    1110:	8c ec       	ldi	r24, 0xCC	; 204
    1112:	92 e0       	ldi	r25, 0x02	; 2
    1114:	0e 94 0d 39 	call	0x721a	; 0x721a <_ZN15RslModelSectionC1Ev>
	TiltGyro.endCalibrate();

	Serial.println("Calibration complete!");
	Serial.print("GyroCenter:");
	Serial.print(TiltGyro.center);
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	08 95       	ret

0000112a <main>:
 */ 
#include "Arduino.h"
#include "BalBot.h"
int main(void)
{
	init();
    112a:	0e 94 fd 21 	call	0x43fa	; 0x43fa <init>

	/*#if defined(USBCON)
	USBDevice.attach();
	#endif*/
	
	setup();
    112e:	0e 94 cb 06 	call	0xd96	; 0xd96 <setup>
	
	for (;;) {
		loop();
    1132:	0e 94 e6 04 	call	0x9cc	; 0x9cc <loop>
    1136:	fd cf       	rjmp	.-6      	; 0x1132 <main+0x8>

00001138 <_ZN4GyroC1Eid>:
*  Author: EHaskins
*/
#include <Arduino.h>
#include "Gyro.h"

Gyro::Gyro(int pin, double degreesPerSecPerInput){
    1138:	fc 01       	movw	r30, r24
	this->pin = pin;
    113a:	75 87       	std	Z+13, r23	; 0x0d
    113c:	64 87       	std	Z+12, r22	; 0x0c
	this->center = center;
	this->degreesPerSecPerInput = degreesPerSecPerInput;
    113e:	20 8b       	std	Z+16, r18	; 0x10
    1140:	31 8b       	std	Z+17, r19	; 0x11
    1142:	42 8b       	std	Z+18, r20	; 0x12
    1144:	53 8b       	std	Z+19, r21	; 0x13
}
    1146:	08 95       	ret

00001148 <_ZN4Gyro6updateEv>:
double Gyro::update(){
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	ec 01       	movw	r28, r24
	long now = micros();
    1156:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
	long elasped = now - lastMicros;
    115e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1160:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1162:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1164:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1166:	8c 01       	movw	r16, r24
    1168:	9d 01       	movw	r18, r26
    116a:	04 1b       	sub	r16, r20
    116c:	15 0b       	sbc	r17, r21
    116e:	26 0b       	sbc	r18, r22
    1170:	37 0b       	sbc	r19, r23
	lastMicros = now;
    1172:	8a 8f       	std	Y+26, r24	; 0x1a
    1174:	9b 8f       	std	Y+27, r25	; 0x1b
    1176:	ac 8f       	std	Y+28, r26	; 0x1c
    1178:	bd 8f       	std	Y+29, r27	; 0x1d
	
	elapsedSeconds = (double)elasped / 1000000;
    117a:	c9 01       	movw	r24, r18
    117c:	b8 01       	movw	r22, r16
    117e:	0e 94 43 40 	call	0x8086	; 0x8086 <__floatsisf>
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	34 e2       	ldi	r19, 0x24	; 36
    1186:	44 e7       	ldi	r20, 0x74	; 116
    1188:	59 e4       	ldi	r21, 0x49	; 73
    118a:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <__divsf3>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	88 87       	std	Y+8, r24	; 0x08
    1194:	99 87       	std	Y+9, r25	; 0x09
    1196:	aa 87       	std	Y+10, r26	; 0x0a
    1198:	bb 87       	std	Y+11, r27	; 0x0b
	
	double val = analogRead(pin);
    119a:	8c 85       	ldd	r24, Y+12	; 0x0c
    119c:	0e 94 3b 22 	call	0x4476	; 0x4476 <analogRead>
    11a0:	9c 01       	movw	r18, r24
    11a2:	b9 01       	movw	r22, r18
    11a4:	88 27       	eor	r24, r24
    11a6:	77 fd       	sbrc	r23, 7
    11a8:	80 95       	com	r24
    11aa:	98 2f       	mov	r25, r24
    11ac:	0e 94 43 40 	call	0x8086	; 0x8086 <__floatsisf>
    11b0:	16 2f       	mov	r17, r22
    11b2:	07 2f       	mov	r16, r23
    11b4:	f8 2e       	mov	r15, r24
    11b6:	e9 2e       	mov	r14, r25
	val -= center;
    11b8:	6e 85       	ldd	r22, Y+14	; 0x0e
    11ba:	7f 85       	ldd	r23, Y+15	; 0x0f
    11bc:	88 27       	eor	r24, r24
    11be:	77 fd       	sbrc	r23, 7
    11c0:	80 95       	com	r24
    11c2:	98 2f       	mov	r25, r24
    11c4:	0e 94 43 40 	call	0x8086	; 0x8086 <__floatsisf>
    11c8:	9b 01       	movw	r18, r22
    11ca:	ac 01       	movw	r20, r24
    11cc:	81 2f       	mov	r24, r17
    11ce:	90 2f       	mov	r25, r16
    11d0:	af 2d       	mov	r26, r15
    11d2:	be 2d       	mov	r27, r14
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <__subsf3>
	
	rate = val * degreesPerSecPerInput;
    11dc:	28 89       	ldd	r18, Y+16	; 0x10
    11de:	39 89       	ldd	r19, Y+17	; 0x11
    11e0:	4a 89       	ldd	r20, Y+18	; 0x12
    11e2:	5b 89       	ldd	r21, Y+19	; 0x13
    11e4:	0e 94 23 41 	call	0x8246	; 0x8246 <__mulsf3>
    11e8:	26 2f       	mov	r18, r22
    11ea:	37 2f       	mov	r19, r23
    11ec:	f8 2f       	mov	r31, r24
    11ee:	e9 2f       	mov	r30, r25
    11f0:	46 2f       	mov	r20, r22
    11f2:	57 2f       	mov	r21, r23
    11f4:	68 2f       	mov	r22, r24
    11f6:	79 2f       	mov	r23, r25
    11f8:	48 83       	st	Y, r20
    11fa:	59 83       	std	Y+1, r21	; 0x01
    11fc:	6a 83       	std	Y+2, r22	; 0x02
    11fe:	7b 83       	std	Y+3, r23	; 0x03
	deltaAngle = rate * elapsedSeconds;
    1200:	82 2f       	mov	r24, r18
    1202:	93 2f       	mov	r25, r19
    1204:	af 2f       	mov	r26, r31
    1206:	be 2f       	mov	r27, r30
    1208:	bc 01       	movw	r22, r24
    120a:	cd 01       	movw	r24, r26
    120c:	28 85       	ldd	r18, Y+8	; 0x08
    120e:	39 85       	ldd	r19, Y+9	; 0x09
    1210:	4a 85       	ldd	r20, Y+10	; 0x0a
    1212:	5b 85       	ldd	r21, Y+11	; 0x0b
    1214:	0e 94 23 41 	call	0x8246	; 0x8246 <__mulsf3>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	8c 83       	std	Y+4, r24	; 0x04
    121e:	9d 83       	std	Y+5, r25	; 0x05
    1220:	ae 83       	std	Y+6, r26	; 0x06
    1222:	bf 83       	std	Y+7, r27	; 0x07
}
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	08 95       	ret

00001232 <_ZN4Gyro9calibrateEv>:

void Gyro::calibrate(){
    1232:	cf 92       	push	r12
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	ec 01       	movw	r28, r24
	calTotal += analogRead(pin);
    1240:	cc 88       	ldd	r12, Y+20	; 0x14
    1242:	dd 88       	ldd	r13, Y+21	; 0x15
    1244:	ee 88       	ldd	r14, Y+22	; 0x16
    1246:	ff 88       	ldd	r15, Y+23	; 0x17
    1248:	8c 85       	ldd	r24, Y+12	; 0x0c
    124a:	0e 94 3b 22 	call	0x4476	; 0x4476 <analogRead>
    124e:	aa 27       	eor	r26, r26
    1250:	97 fd       	sbrc	r25, 7
    1252:	a0 95       	com	r26
    1254:	ba 2f       	mov	r27, r26
    1256:	c8 0e       	add	r12, r24
    1258:	d9 1e       	adc	r13, r25
    125a:	ea 1e       	adc	r14, r26
    125c:	fb 1e       	adc	r15, r27
    125e:	cc 8a       	std	Y+20, r12	; 0x14
    1260:	dd 8a       	std	Y+21, r13	; 0x15
    1262:	ee 8a       	std	Y+22, r14	; 0x16
    1264:	ff 8a       	std	Y+23, r15	; 0x17
	calCount++;
    1266:	88 8d       	ldd	r24, Y+24	; 0x18
    1268:	99 8d       	ldd	r25, Y+25	; 0x19
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	99 8f       	std	Y+25, r25	; 0x19
    126e:	88 8f       	std	Y+24, r24	; 0x18
}
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	df 90       	pop	r13
    127a:	cf 90       	pop	r12
    127c:	08 95       	ret

0000127e <_ZN4Gyro12endCalibrateEv>:
void Gyro::endCalibrate(){
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	ec 01       	movw	r28, r24
	center = calTotal / calCount;
    1284:	28 8d       	ldd	r18, Y+24	; 0x18
    1286:	39 8d       	ldd	r19, Y+25	; 0x19
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	6c 89       	ldd	r22, Y+20	; 0x14
    128e:	7d 89       	ldd	r23, Y+21	; 0x15
    1290:	8e 89       	ldd	r24, Y+22	; 0x16
    1292:	9f 89       	ldd	r25, Y+23	; 0x17
    1294:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    1298:	3f 87       	std	Y+15, r19	; 0x0f
    129a:	2e 87       	std	Y+14, r18	; 0x0e
	
	calTotal = 0;
    129c:	1c 8a       	std	Y+20, r1	; 0x14
    129e:	1d 8a       	std	Y+21, r1	; 0x15
    12a0:	1e 8a       	std	Y+22, r1	; 0x16
    12a2:	1f 8a       	std	Y+23, r1	; 0x17
	calCount = 0;
    12a4:	19 8e       	std	Y+25, r1	; 0x19
    12a6:	18 8e       	std	Y+24, r1	; 0x18
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	08 95       	ret

000012ae <_ZN3PIDC1Eddd>:
* Created: 10/5/2012 11:59:57 PM
*  Author: EHaskins
*/
#include "PID.h"

PID::PID(double P, double I, double D){
    12ae:	cf 92       	push	r12
    12b0:	df 92       	push	r13
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	fc 01       	movw	r30, r24
	this->P = P;
    12bc:	40 83       	st	Z, r20
    12be:	51 83       	std	Z+1, r21	; 0x01
    12c0:	62 83       	std	Z+2, r22	; 0x02
    12c2:	73 83       	std	Z+3, r23	; 0x03
	this->I = I;
    12c4:	04 83       	std	Z+4, r16	; 0x04
    12c6:	15 83       	std	Z+5, r17	; 0x05
    12c8:	26 83       	std	Z+6, r18	; 0x06
    12ca:	37 83       	std	Z+7, r19	; 0x07
	this->D = D;
    12cc:	c0 86       	std	Z+8, r12	; 0x08
    12ce:	d1 86       	std	Z+9, r13	; 0x09
    12d0:	e2 86       	std	Z+10, r14	; 0x0a
    12d2:	f3 86       	std	Z+11, r15	; 0x0b
}
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	df 90       	pop	r13
    12de:	cf 90       	pop	r12
    12e0:	08 95       	ret

000012e2 <_ZN3PID6updateEddd>:
double PID::update(double current, double desired, double velocity){
    12e2:	4f 92       	push	r4
    12e4:	5f 92       	push	r5
    12e6:	6f 92       	push	r6
    12e8:	7f 92       	push	r7
    12ea:	9f 92       	push	r9
    12ec:	af 92       	push	r10
    12ee:	bf 92       	push	r11
    12f0:	cf 92       	push	r12
    12f2:	df 92       	push	r13
    12f4:	ef 92       	push	r14
    12f6:	ff 92       	push	r15
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	00 d0       	rcall	.+0      	; 0x1302 <_ZN3PID6updateEddd+0x20>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <_ZN3PID6updateEddd+0x22>
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	5c 01       	movw	r10, r24
    130a:	2a 01       	movw	r4, r20
    130c:	3b 01       	movw	r6, r22
    130e:	c9 01       	movw	r24, r18
    1310:	b8 01       	movw	r22, r16
    1312:	c9 82       	std	Y+1, r12	; 0x01
    1314:	da 82       	std	Y+2, r13	; 0x02
    1316:	eb 82       	std	Y+3, r14	; 0x03
    1318:	fc 82       	std	Y+4, r15	; 0x04
	double error = desired - current;
    131a:	a3 01       	movw	r20, r6
    131c:	92 01       	movw	r18, r4
    131e:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <__subsf3>
    1322:	16 2f       	mov	r17, r22
    1324:	97 2e       	mov	r9, r23
    1326:	c8 2e       	mov	r12, r24
    1328:	09 2f       	mov	r16, r25
	
	double output = 0.0;
	
	output = error * P;
    132a:	86 2f       	mov	r24, r22
    132c:	99 2d       	mov	r25, r9
    132e:	ac 2d       	mov	r26, r12
    1330:	b0 2f       	mov	r27, r16
    1332:	bc 01       	movw	r22, r24
    1334:	cd 01       	movw	r24, r26
    1336:	d5 01       	movw	r26, r10
    1338:	2d 91       	ld	r18, X+
    133a:	3d 91       	ld	r19, X+
    133c:	4d 91       	ld	r20, X+
    133e:	5c 91       	ld	r21, X
    1340:	0e 94 23 41 	call	0x8246	; 0x8246 <__mulsf3>
    1344:	46 2e       	mov	r4, r22
    1346:	f7 2e       	mov	r15, r23
    1348:	e8 2e       	mov	r14, r24
    134a:	d9 2e       	mov	r13, r25
	iTotal += error * I;
    134c:	81 2f       	mov	r24, r17
    134e:	99 2d       	mov	r25, r9
    1350:	ac 2d       	mov	r26, r12
    1352:	b0 2f       	mov	r27, r16
    1354:	bc 01       	movw	r22, r24
    1356:	cd 01       	movw	r24, r26
    1358:	f5 01       	movw	r30, r10
    135a:	24 81       	ldd	r18, Z+4	; 0x04
    135c:	35 81       	ldd	r19, Z+5	; 0x05
    135e:	46 81       	ldd	r20, Z+6	; 0x06
    1360:	57 81       	ldd	r21, Z+7	; 0x07
    1362:	0e 94 23 41 	call	0x8246	; 0x8246 <__mulsf3>
    1366:	d5 01       	movw	r26, r10
    1368:	1c 96       	adiw	r26, 0x0c	; 12
    136a:	2d 91       	ld	r18, X+
    136c:	3d 91       	ld	r19, X+
    136e:	4d 91       	ld	r20, X+
    1370:	5c 91       	ld	r21, X
    1372:	1f 97       	sbiw	r26, 0x0f	; 15
    1374:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__addsf3>
    1378:	f6 2f       	mov	r31, r22
    137a:	e7 2f       	mov	r30, r23
    137c:	38 2f       	mov	r19, r24
    137e:	29 2f       	mov	r18, r25
    1380:	98 2f       	mov	r25, r24
    1382:	4f 2f       	mov	r20, r31
    1384:	5e 2f       	mov	r21, r30
    1386:	69 2f       	mov	r22, r25
    1388:	72 2f       	mov	r23, r18
    138a:	d5 01       	movw	r26, r10
    138c:	1c 96       	adiw	r26, 0x0c	; 12
    138e:	4d 93       	st	X+, r20
    1390:	5d 93       	st	X+, r21
    1392:	6d 93       	st	X+, r22
    1394:	7c 93       	st	X, r23
    1396:	1f 97       	sbiw	r26, 0x0f	; 15
	output += iTotal;
    1398:	44 2d       	mov	r20, r4
    139a:	5f 2d       	mov	r21, r15
    139c:	6e 2d       	mov	r22, r14
    139e:	7d 2d       	mov	r23, r13
    13a0:	cb 01       	movw	r24, r22
    13a2:	ba 01       	movw	r22, r20
    13a4:	42 2f       	mov	r20, r18
    13a6:	0f 2f       	mov	r16, r31
    13a8:	1e 2f       	mov	r17, r30
    13aa:	23 2f       	mov	r18, r19
    13ac:	34 2f       	mov	r19, r20
    13ae:	a9 01       	movw	r20, r18
    13b0:	98 01       	movw	r18, r16
    13b2:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__addsf3>
    13b6:	e6 2e       	mov	r14, r22
    13b8:	f7 2e       	mov	r15, r23
    13ba:	18 2f       	mov	r17, r24
    13bc:	09 2f       	mov	r16, r25
	output += velocity * D;
    13be:	69 81       	ldd	r22, Y+1	; 0x01
    13c0:	7a 81       	ldd	r23, Y+2	; 0x02
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	f5 01       	movw	r30, r10
    13c8:	20 85       	ldd	r18, Z+8	; 0x08
    13ca:	31 85       	ldd	r19, Z+9	; 0x09
    13cc:	42 85       	ldd	r20, Z+10	; 0x0a
    13ce:	53 85       	ldd	r21, Z+11	; 0x0b
    13d0:	0e 94 23 41 	call	0x8246	; 0x8246 <__mulsf3>
    13d4:	51 2f       	mov	r21, r17
    13d6:	40 2f       	mov	r20, r16
    13d8:	0e 2d       	mov	r16, r14
    13da:	1f 2d       	mov	r17, r15
    13dc:	25 2f       	mov	r18, r21
    13de:	34 2f       	mov	r19, r20
    13e0:	a9 01       	movw	r20, r18
    13e2:	98 01       	movw	r18, r16
    13e4:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__addsf3>
	
	return output;
    13e8:	46 2f       	mov	r20, r22
    13ea:	57 2f       	mov	r21, r23
    13ec:	68 2f       	mov	r22, r24
    13ee:	79 2f       	mov	r23, r25
    13f0:	cb 01       	movw	r24, r22
    13f2:	ba 01       	movw	r22, r20
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	bf 90       	pop	r11
    140e:	af 90       	pop	r10
    1410:	9f 90       	pop	r9
    1412:	7f 90       	pop	r7
    1414:	6f 90       	pop	r6
    1416:	5f 90       	pop	r5
    1418:	4f 90       	pop	r4
    141a:	08 95       	ret

0000141c <_Z8deadbandii>:
 *  Created on: Apr 4, 2011
 *      Author: EHaskins
 */

int deadband(int value, int deadband){
	if (value < 127-deadband && value > -128+deadband){
    141c:	2f e7       	ldi	r18, 0x7F	; 127
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	26 1b       	sub	r18, r22
    1422:	37 0b       	sbc	r19, r23
    1424:	82 17       	cp	r24, r18
    1426:	93 07       	cpc	r25, r19
    1428:	c4 f4       	brge	.+48     	; 0x145a <_Z8deadbandii+0x3e>
    142a:	9b 01       	movw	r18, r22
    142c:	20 58       	subi	r18, 0x80	; 128
    142e:	30 40       	sbci	r19, 0x00	; 0
    1430:	28 17       	cp	r18, r24
    1432:	39 07       	cpc	r19, r25
    1434:	94 f4       	brge	.+36     	; 0x145a <_Z8deadbandii+0x3e>
		if (value > deadband){
    1436:	68 17       	cp	r22, r24
    1438:	79 07       	cpc	r23, r25
    143a:	1c f4       	brge	.+6      	; 0x1442 <_Z8deadbandii+0x26>
			value -= deadband;
    143c:	86 1b       	sub	r24, r22
    143e:	97 0b       	sbc	r25, r23
    1440:	08 95       	ret
		}
		else if (value < -deadband){
    1442:	22 27       	eor	r18, r18
    1444:	33 27       	eor	r19, r19
    1446:	26 1b       	sub	r18, r22
    1448:	37 0b       	sbc	r19, r23
    144a:	82 17       	cp	r24, r18
    144c:	93 07       	cpc	r25, r19
    144e:	1c f4       	brge	.+6      	; 0x1456 <_Z8deadbandii+0x3a>
			value += deadband;
    1450:	86 0f       	add	r24, r22
    1452:	97 1f       	adc	r25, r23
    1454:	08 95       	ret
		}
		else{
			value = 0;
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return value;
}
    145a:	08 95       	ret

0000145c <_Z5limitiii>:

int limit(int value, int min, int max){
    145c:	9c 01       	movw	r18, r24
	if (value > max)
    145e:	48 17       	cp	r20, r24
    1460:	59 07       	cpc	r21, r25
    1462:	3c f0       	brlt	.+14     	; 0x1472 <_Z5limitiii+0x16>
    1464:	86 2f       	mov	r24, r22
    1466:	97 2f       	mov	r25, r23
    1468:	82 17       	cp	r24, r18
    146a:	93 07       	cpc	r25, r19
    146c:	1c f4       	brge	.+6      	; 0x1474 <_Z5limitiii+0x18>
    146e:	c9 01       	movw	r24, r18
    1470:	08 95       	ret
		value = max;
    1472:	ca 01       	movw	r24, r20
	else if (value < min)
		value = min;
	return value;
}
    1474:	08 95       	ret

00001476 <_Z5limitfff>:

float limit(float value, float min, float max){
    1476:	4f 92       	push	r4
    1478:	5f 92       	push	r5
    147a:	6f 92       	push	r6
    147c:	7f 92       	push	r7
    147e:	8f 92       	push	r8
    1480:	9f 92       	push	r9
    1482:	af 92       	push	r10
    1484:	bf 92       	push	r11
    1486:	cf 92       	push	r12
    1488:	df 92       	push	r13
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	b6 2e       	mov	r11, r22
    1498:	a7 2e       	mov	r10, r23
    149a:	98 2e       	mov	r9, r24
    149c:	89 2e       	mov	r8, r25
    149e:	72 2e       	mov	r7, r18
    14a0:	63 2e       	mov	r6, r19
    14a2:	54 2e       	mov	r5, r20
    14a4:	45 2e       	mov	r4, r21
    14a6:	de 2d       	mov	r29, r14
    14a8:	cf 2d       	mov	r28, r15
	if (value > max)
    14aa:	86 2f       	mov	r24, r22
    14ac:	97 2f       	mov	r25, r23
    14ae:	a9 2d       	mov	r26, r9
    14b0:	b8 2d       	mov	r27, r8
    14b2:	bc 01       	movw	r22, r24
    14b4:	cd 01       	movw	r24, r26
    14b6:	cd 2e       	mov	r12, r29
    14b8:	dc 2e       	mov	r13, r28
    14ba:	e0 2e       	mov	r14, r16
    14bc:	f1 2e       	mov	r15, r17
    14be:	a7 01       	movw	r20, r14
    14c0:	96 01       	movw	r18, r12
    14c2:	0e 94 18 41 	call	0x8230	; 0x8230 <__gesf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	8c f0       	brlt	.+34     	; 0x14ec <_Z5limitfff+0x76>
		value = max;
	else if (value < min)
    14ca:	8b 2d       	mov	r24, r11
    14cc:	9a 2d       	mov	r25, r10
    14ce:	a9 2d       	mov	r26, r9
    14d0:	b8 2d       	mov	r27, r8
    14d2:	bc 01       	movw	r22, r24
    14d4:	cd 01       	movw	r24, r26
    14d6:	07 2d       	mov	r16, r7
    14d8:	16 2d       	mov	r17, r6
    14da:	25 2d       	mov	r18, r5
    14dc:	34 2d       	mov	r19, r4
    14de:	a9 01       	movw	r20, r18
    14e0:	98 01       	movw	r18, r16
    14e2:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <__cmpsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	34 f0       	brlt	.+12     	; 0x14f6 <_Z5limitfff+0x80>
    14ea:	09 c0       	rjmp	.+18     	; 0x14fe <_Z5limitfff+0x88>
	return value;
}

float limit(float value, float min, float max){
	if (value > max)
		value = max;
    14ec:	bd 2e       	mov	r11, r29
    14ee:	ac 2e       	mov	r10, r28
    14f0:	90 2e       	mov	r9, r16
    14f2:	81 2e       	mov	r8, r17
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <_Z5limitfff+0x88>
	else if (value < min)
		value = min;
    14f6:	b7 2c       	mov	r11, r7
    14f8:	a6 2c       	mov	r10, r6
    14fa:	95 2c       	mov	r9, r5
    14fc:	84 2c       	mov	r8, r4
	return value;
}
    14fe:	8b 2d       	mov	r24, r11
    1500:	9a 2d       	mov	r25, r10
    1502:	a9 2d       	mov	r26, r9
    1504:	b8 2d       	mov	r27, r8
    1506:	bc 01       	movw	r22, r24
    1508:	cd 01       	movw	r24, r26
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	ff 90       	pop	r15
    1514:	ef 90       	pop	r14
    1516:	df 90       	pop	r13
    1518:	cf 90       	pop	r12
    151a:	bf 90       	pop	r11
    151c:	af 90       	pop	r10
    151e:	9f 90       	pop	r9
    1520:	8f 90       	pop	r8
    1522:	7f 90       	pop	r7
    1524:	6f 90       	pop	r6
    1526:	5f 90       	pop	r5
    1528:	4f 90       	pop	r4
    152a:	08 95       	ret

0000152c <_Z14removeDeadbandfff>:

float removeDeadband(float value, float deadband, float range){
    152c:	4f 92       	push	r4
    152e:	5f 92       	push	r5
    1530:	6f 92       	push	r6
    1532:	7f 92       	push	r7
    1534:	8f 92       	push	r8
    1536:	9f 92       	push	r9
    1538:	af 92       	push	r10
    153a:	bf 92       	push	r11
    153c:	cf 92       	push	r12
    153e:	df 92       	push	r13
    1540:	ef 92       	push	r14
    1542:	ff 92       	push	r15
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	4b 01       	movw	r8, r22
    154e:	5c 01       	movw	r10, r24
    1550:	29 01       	movw	r4, r18
    1552:	3a 01       	movw	r6, r20
    1554:	67 01       	movw	r12, r14
    1556:	78 01       	movw	r14, r16
	double output;
	double scale = (range - deadband) / range;
    1558:	c7 01       	movw	r24, r14
    155a:	b6 01       	movw	r22, r12
    155c:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <__subsf3>
    1560:	a7 01       	movw	r20, r14
    1562:	96 01       	movw	r18, r12
    1564:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <__divsf3>
    1568:	c6 2e       	mov	r12, r22
    156a:	c7 2f       	mov	r28, r23
    156c:	d8 2f       	mov	r29, r24
    156e:	19 2f       	mov	r17, r25

	if (value < 0)
    1570:	c5 01       	movw	r24, r10
    1572:	b4 01       	movw	r22, r8
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	a9 01       	movw	r20, r18
    157a:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <__cmpsf2>
    157e:	88 23       	and	r24, r24
    1580:	84 f4       	brge	.+32     	; 0x15a2 <_Z14removeDeadbandfff+0x76>
		output = (value - deadband) * scale;
    1582:	c5 01       	movw	r24, r10
    1584:	b4 01       	movw	r22, r8
    1586:	a3 01       	movw	r20, r6
    1588:	92 01       	movw	r18, r4
    158a:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <__subsf3>
    158e:	41 2f       	mov	r20, r17
    1590:	0c 2d       	mov	r16, r12
    1592:	1c 2f       	mov	r17, r28
    1594:	2d 2f       	mov	r18, r29
    1596:	34 2f       	mov	r19, r20
    1598:	a9 01       	movw	r20, r18
    159a:	98 01       	movw	r18, r16
    159c:	0e 94 23 41 	call	0x8246	; 0x8246 <__mulsf3>
    15a0:	1d c0       	rjmp	.+58     	; 0x15dc <_Z14removeDeadbandfff+0xb0>
	else if (value > 0)
    15a2:	c5 01       	movw	r24, r10
    15a4:	b4 01       	movw	r22, r8
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	a9 01       	movw	r20, r18
    15ac:	0e 94 18 41 	call	0x8230	; 0x8230 <__gesf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	84 f4       	brge	.+32     	; 0x15d4 <_Z14removeDeadbandfff+0xa8>
		output = (value + deadband) * scale;
    15b4:	c5 01       	movw	r24, r10
    15b6:	b4 01       	movw	r22, r8
    15b8:	a3 01       	movw	r20, r6
    15ba:	92 01       	movw	r18, r4
    15bc:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__addsf3>
    15c0:	41 2f       	mov	r20, r17
    15c2:	0c 2d       	mov	r16, r12
    15c4:	1c 2f       	mov	r17, r28
    15c6:	2d 2f       	mov	r18, r29
    15c8:	34 2f       	mov	r19, r20
    15ca:	a9 01       	movw	r20, r18
    15cc:	98 01       	movw	r18, r16
    15ce:	0e 94 23 41 	call	0x8246	; 0x8246 <__mulsf3>
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <_Z14removeDeadbandfff+0xb0>
	else
		output = 0;
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0

	return output;
}
    15dc:	38 2f       	mov	r19, r24
    15de:	29 2f       	mov	r18, r25
    15e0:	86 2f       	mov	r24, r22
    15e2:	97 2f       	mov	r25, r23
    15e4:	a3 2f       	mov	r26, r19
    15e6:	b2 2f       	mov	r27, r18
    15e8:	bc 01       	movw	r22, r24
    15ea:	cd 01       	movw	r24, r26
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ff 90       	pop	r15
    15f6:	ef 90       	pop	r14
    15f8:	df 90       	pop	r13
    15fa:	cf 90       	pop	r12
    15fc:	bf 90       	pop	r11
    15fe:	af 90       	pop	r10
    1600:	9f 90       	pop	r9
    1602:	8f 90       	pop	r8
    1604:	7f 90       	pop	r7
    1606:	6f 90       	pop	r6
    1608:	5f 90       	pop	r5
    160a:	4f 90       	pop	r4
    160c:	08 95       	ret

0000160e <_ZN13EthernetClass5beginEPh>:
  0, 0, 0, 0 };
uint16_t EthernetClass::_server_port[MAX_SOCK_NUM] = { 
  0, 0, 0, 0 };

int EthernetClass::begin(uint8_t *mac_address)
{
    160e:	cf 92       	push	r12
    1610:	df 92       	push	r13
    1612:	ef 92       	push	r14
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	6e 97       	sbiw	r28, 0x1e	; 30
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	6c 01       	movw	r12, r24
    1630:	7b 01       	movw	r14, r22
  _dhcp = new DhcpClass();
    1632:	82 e6       	ldi	r24, 0x62	; 98
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 23 1a 	call	0x3446	; 0x3446 <_Znwj>
    163a:	8c 01       	movw	r16, r24
    163c:	82 e6       	ldi	r24, 0x62	; 98
    163e:	f8 01       	movw	r30, r16
    1640:	11 92       	st	Z+, r1
    1642:	8a 95       	dec	r24
    1644:	e9 f7       	brne	.-6      	; 0x1640 <_ZN13EthernetClass5beginEPh+0x32>
	uint8_t  siaddr[4];
	uint8_t  giaddr[4];
	uint8_t  chaddr[6];
}RIP_MSG_FIXED;

class DhcpClass {
    1646:	c8 01       	movw	r24, r16
    1648:	89 5b       	subi	r24, 0xB9	; 185
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN11EthernetUDPC1Ev>
    1650:	f6 01       	movw	r30, r12
    1652:	17 83       	std	Z+7, r17	; 0x07
    1654:	06 83       	std	Z+6, r16	; 0x06


  // Initialise the basic info
  W5100.init();
    1656:	89 e7       	ldi	r24, 0x79	; 121
    1658:	95 e0       	ldi	r25, 0x05	; 5
    165a:	0e 94 1c 14 	call	0x2838	; 0x2838 <_ZN10W5100Class4initEv>

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
    165e:	89 e0       	ldi	r24, 0x09	; 9
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	b7 01       	movw	r22, r14
    1664:	46 e0       	ldi	r20, 0x06	; 6
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
  W5100.setMACAddress(mac_address);
  W5100.setIPAddress(IPAddress(0,0,0,0).raw_address());
    166c:	ce 01       	movw	r24, r28
    166e:	49 96       	adiw	r24, 0x19	; 25
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	00 e0       	ldi	r16, 0x00	; 0
    1678:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN9IPAddressC1Ehhhh>
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
    167c:	8f e0       	ldi	r24, 0x0F	; 15
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	be 01       	movw	r22, r28
    1682:	65 5e       	subi	r22, 0xE5	; 229
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	44 e0       	ldi	r20, 0x04	; 4
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>

  // Now try to get our config info from a DHCP server
  int ret = _dhcp->beginWithDHCP(mac_address);
    168e:	f6 01       	movw	r30, r12
    1690:	86 81       	ldd	r24, Z+6	; 0x06
    1692:	97 81       	ldd	r25, Z+7	; 0x07
    1694:	b7 01       	movw	r22, r14
    1696:	20 e6       	ldi	r18, 0x60	; 96
    1698:	3a ee       	ldi	r19, 0xEA	; 234
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	0f 2e       	mov	r0, r31
    16a0:	f0 ea       	ldi	r31, 0xA0	; 160
    16a2:	ef 2e       	mov	r14, r31
    16a4:	ff e0       	ldi	r31, 0x0F	; 15
    16a6:	ff 2e       	mov	r15, r31
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	0f 2f       	mov	r16, r31
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	1f 2f       	mov	r17, r31
    16b0:	f0 2d       	mov	r31, r0
    16b2:	0e 94 33 33 	call	0x6666	; 0x6666 <_ZN9DhcpClass13beginWithDHCPEPhmm>
    16b6:	8c 01       	movw	r16, r24
  if(ret == 1)
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	91 05       	cpc	r25, r1
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <_ZN13EthernetClass5beginEPh+0xb2>
    16be:	40 c0       	rjmp	.+128    	; 0x1740 <_ZN13EthernetClass5beginEPh+0x132>
  {
    // We've successfully found a DHCP server and got our configuration info, so set things
    // accordingly
    W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
    16c0:	f6 01       	movw	r30, r12
    16c2:	66 81       	ldd	r22, Z+6	; 0x06
    16c4:	77 81       	ldd	r23, Z+7	; 0x07
    16c6:	ce 01       	movw	r24, r28
    16c8:	43 96       	adiw	r24, 0x13	; 19
    16ca:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <_ZN9DhcpClass10getLocalIpEv>
    16ce:	8f e0       	ldi	r24, 0x0F	; 15
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	be 01       	movw	r22, r28
    16d4:	6b 5e       	subi	r22, 0xEB	; 235
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	44 e0       	ldi	r20, 0x04	; 4
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
    W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
    16e0:	f6 01       	movw	r30, r12
    16e2:	66 81       	ldd	r22, Z+6	; 0x06
    16e4:	77 81       	ldd	r23, Z+7	; 0x07
    16e6:	ce 01       	movw	r24, r28
    16e8:	0d 96       	adiw	r24, 0x0d	; 13
    16ea:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <_ZN9DhcpClass12getGatewayIpEv>
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	be 01       	movw	r22, r28
    16f4:	61 5f       	subi	r22, 0xF1	; 241
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	44 e0       	ldi	r20, 0x04	; 4
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
    W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
    1700:	f6 01       	movw	r30, r12
    1702:	66 81       	ldd	r22, Z+6	; 0x06
    1704:	77 81       	ldd	r23, Z+7	; 0x07
    1706:	ce 01       	movw	r24, r28
    1708:	07 96       	adiw	r24, 0x07	; 7
    170a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <_ZN9DhcpClass13getSubnetMaskEv>
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
    170e:	85 e0       	ldi	r24, 0x05	; 5
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	be 01       	movw	r22, r28
    1714:	67 5f       	subi	r22, 0xF7	; 247
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	44 e0       	ldi	r20, 0x04	; 4
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
    _dnsServerAddress = _dhcp->getDnsServerIp();
    1720:	f6 01       	movw	r30, r12
    1722:	66 81       	ldd	r22, Z+6	; 0x06
    1724:	77 81       	ldd	r23, Z+7	; 0x07
    1726:	ce 01       	movw	r24, r28
    1728:	01 96       	adiw	r24, 0x01	; 1
    172a:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <_ZN9DhcpClass14getDnsServerIpEv>

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	ad 81       	ldd	r26, Y+5	; 0x05
    1734:	be 81       	ldd	r27, Y+6	; 0x06
    1736:	f6 01       	movw	r30, r12
    1738:	82 83       	std	Z+2, r24	; 0x02
    173a:	93 83       	std	Z+3, r25	; 0x03
    173c:	a4 83       	std	Z+4, r26	; 0x04
    173e:	b5 83       	std	Z+5, r27	; 0x05
  }

  return ret;
}
    1740:	80 2f       	mov	r24, r16
    1742:	91 2f       	mov	r25, r17
    1744:	6e 96       	adiw	r28, 0x1e	; 30
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	ff 90       	pop	r15
    175a:	ef 90       	pop	r14
    175c:	df 90       	pop	r13
    175e:	cf 90       	pop	r12
    1760:	08 95       	ret

00001762 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>:
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
{
    1762:	8f 92       	push	r8
    1764:	9f 92       	push	r9
    1766:	af 92       	push	r10
    1768:	bf 92       	push	r11
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	4c 01       	movw	r8, r24
    177c:	6b 01       	movw	r12, r22
    177e:	ea 01       	movw	r28, r20
    1780:	59 01       	movw	r10, r18
  W5100.init();
    1782:	89 e7       	ldi	r24, 0x79	; 121
    1784:	95 e0       	ldi	r25, 0x05	; 5
    1786:	0e 94 1c 14 	call	0x2838	; 0x2838 <_ZN10W5100Class4initEv>
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
    178a:	89 e0       	ldi	r24, 0x09	; 9
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	b6 01       	movw	r22, r12
    1790:	46 e0       	ldi	r20, 0x06	; 6
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
  W5100.setMACAddress(mac);
  W5100.setIPAddress(local_ip._address);
    1798:	be 01       	movw	r22, r28
    179a:	6e 5f       	subi	r22, 0xFE	; 254
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
    179e:	8f e0       	ldi	r24, 0x0F	; 15
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	44 e0       	ldi	r20, 0x04	; 4
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
  W5100.setGatewayIp(gateway._address);
    17aa:	b8 01       	movw	r22, r16
    17ac:	6e 5f       	subi	r22, 0xFE	; 254
    17ae:	7f 4f       	sbci	r23, 0xFF	; 255
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	44 e0       	ldi	r20, 0x04	; 4
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
  W5100.setSubnetMask(subnet._address);
    17bc:	b7 01       	movw	r22, r14
    17be:	6e 5f       	subi	r22, 0xFE	; 254
    17c0:	7f 4f       	sbci	r23, 0xFF	; 255
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
    17c2:	85 e0       	ldi	r24, 0x05	; 5
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	44 e0       	ldi	r20, 0x04	; 4
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
    17ce:	f5 01       	movw	r30, r10
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	93 81       	ldd	r25, Z+3	; 0x03
    17d4:	a4 81       	ldd	r26, Z+4	; 0x04
    17d6:	b5 81       	ldd	r27, Z+5	; 0x05
    17d8:	f4 01       	movw	r30, r8
    17da:	82 83       	std	Z+2, r24	; 0x02
    17dc:	93 83       	std	Z+3, r25	; 0x03
    17de:	a4 83       	std	Z+4, r26	; 0x04
    17e0:	b5 83       	std	Z+5, r27	; 0x05
  _dnsServerAddress = dns_server;
}
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	ff 90       	pop	r15
    17ec:	ef 90       	pop	r14
    17ee:	df 90       	pop	r13
    17f0:	cf 90       	pop	r12
    17f2:	bf 90       	pop	r11
    17f4:	af 90       	pop	r10
    17f6:	9f 90       	pop	r9
    17f8:	8f 90       	pop	r8
    17fa:	08 95       	ret

000017fc <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>:
  gateway[3] = 1;
  begin(mac_address, local_ip, dns_server, gateway);
}

void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip, IPAddress dns_server, IPAddress gateway)
{
    17fc:	6f 92       	push	r6
    17fe:	7f 92       	push	r7
    1800:	8f 92       	push	r8
    1802:	9f 92       	push	r9
    1804:	af 92       	push	r10
    1806:	bf 92       	push	r11
    1808:	cf 92       	push	r12
    180a:	df 92       	push	r13
    180c:	ef 92       	push	r14
    180e:	ff 92       	push	r15
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	6e 97       	sbiw	r28, 0x1e	; 30
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	cd bf       	out	0x3d, r28	; 61
    1828:	4c 01       	movw	r8, r24
    182a:	3b 01       	movw	r6, r22
    182c:	7a 01       	movw	r14, r20
    182e:	69 01       	movw	r12, r18
    1830:	58 01       	movw	r10, r16
  IPAddress subnet(255, 255, 255, 0);
    1832:	ce 01       	movw	r24, r28
    1834:	49 96       	adiw	r24, 0x19	; 25
    1836:	6f ef       	ldi	r22, 0xFF	; 255
    1838:	4f ef       	ldi	r20, 0xFF	; 255
    183a:	2f ef       	ldi	r18, 0xFF	; 255
    183c:	00 e0       	ldi	r16, 0x00	; 0
    183e:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN9IPAddressC1Ehhhh>
    1842:	2b e4       	ldi	r18, 0x4B	; 75
    1844:	32 e0       	ldi	r19, 0x02	; 2
    1846:	3c 8b       	std	Y+20, r19	; 0x14
    1848:	2b 8b       	std	Y+19, r18	; 0x13
    184a:	f7 01       	movw	r30, r14
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	a4 81       	ldd	r26, Z+4	; 0x04
    1852:	b5 81       	ldd	r27, Z+5	; 0x05
    1854:	8d 8b       	std	Y+21, r24	; 0x15
    1856:	9e 8b       	std	Y+22, r25	; 0x16
    1858:	af 8b       	std	Y+23, r26	; 0x17
    185a:	b8 8f       	std	Y+24, r27	; 0x18
    185c:	3e 87       	std	Y+14, r19	; 0x0e
    185e:	2d 87       	std	Y+13, r18	; 0x0d
    1860:	f6 01       	movw	r30, r12
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	a4 81       	ldd	r26, Z+4	; 0x04
    1868:	b5 81       	ldd	r27, Z+5	; 0x05
    186a:	8f 87       	std	Y+15, r24	; 0x0f
    186c:	98 8b       	std	Y+16, r25	; 0x10
    186e:	a9 8b       	std	Y+17, r26	; 0x11
    1870:	ba 8b       	std	Y+18, r27	; 0x12
    1872:	38 87       	std	Y+8, r19	; 0x08
    1874:	2f 83       	std	Y+7, r18	; 0x07
    1876:	f5 01       	movw	r30, r10
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	93 81       	ldd	r25, Z+3	; 0x03
    187c:	a4 81       	ldd	r26, Z+4	; 0x04
    187e:	b5 81       	ldd	r27, Z+5	; 0x05
    1880:	89 87       	std	Y+9, r24	; 0x09
    1882:	9a 87       	std	Y+10, r25	; 0x0a
    1884:	ab 87       	std	Y+11, r26	; 0x0b
    1886:	bc 87       	std	Y+12, r27	; 0x0c
    1888:	3a 83       	std	Y+2, r19	; 0x02
    188a:	29 83       	std	Y+1, r18	; 0x01
    188c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    188e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1890:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1892:	be 8d       	ldd	r27, Y+30	; 0x1e
    1894:	8b 83       	std	Y+3, r24	; 0x03
    1896:	9c 83       	std	Y+4, r25	; 0x04
    1898:	ad 83       	std	Y+5, r26	; 0x05
    189a:	be 83       	std	Y+6, r27	; 0x06
  begin(mac_address, local_ip, dns_server, gateway, subnet);
    189c:	c4 01       	movw	r24, r8
    189e:	b3 01       	movw	r22, r6
    18a0:	ae 01       	movw	r20, r28
    18a2:	4d 5e       	subi	r20, 0xED	; 237
    18a4:	5f 4f       	sbci	r21, 0xFF	; 255
    18a6:	9e 01       	movw	r18, r28
    18a8:	23 5f       	subi	r18, 0xF3	; 243
    18aa:	3f 4f       	sbci	r19, 0xFF	; 255
    18ac:	8e 01       	movw	r16, r28
    18ae:	09 5f       	subi	r16, 0xF9	; 249
    18b0:	1f 4f       	sbci	r17, 0xFF	; 255
    18b2:	7e 01       	movw	r14, r28
    18b4:	08 94       	sec
    18b6:	e1 1c       	adc	r14, r1
    18b8:	f1 1c       	adc	r15, r1
    18ba:	0e 94 b1 0b 	call	0x1762	; 0x1762 <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_>
}
    18be:	6e 96       	adiw	r28, 0x1e	; 30
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	bf 90       	pop	r11
    18dc:	af 90       	pop	r10
    18de:	9f 90       	pop	r9
    18e0:	8f 90       	pop	r8
    18e2:	7f 90       	pop	r7
    18e4:	6f 90       	pop	r6
    18e6:	08 95       	ret

000018e8 <_ZN13EthernetClass5beginEPh9IPAddressS1_>:
  dns_server[3] = 1;
  begin(mac_address, local_ip, dns_server);
}

void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip, IPAddress dns_server)
{
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
    18ec:	0f 93       	push	r16
    18ee:	1f 93       	push	r17
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	68 97       	sbiw	r28, 0x18	; 24
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	7b 01       	movw	r14, r22
    1906:	da 01       	movw	r26, r20
    1908:	12 96       	adiw	r26, 0x02	; 2
    190a:	4d 91       	ld	r20, X+
    190c:	5d 91       	ld	r21, X+
    190e:	6d 91       	ld	r22, X+
    1910:	7c 91       	ld	r23, X
    1912:	15 97       	sbiw	r26, 0x05	; 5
    1914:	4d 8b       	std	Y+21, r20	; 0x15
    1916:	5e 8b       	std	Y+22, r21	; 0x16
    1918:	6f 8b       	std	Y+23, r22	; 0x17
    191a:	78 8f       	std	Y+24, r23	; 0x18
    191c:	eb e4       	ldi	r30, 0x4B	; 75
    191e:	f2 e0       	ldi	r31, 0x02	; 2
    1920:	fe 87       	std	Y+14, r31	; 0x0e
    1922:	ed 87       	std	Y+13, r30	; 0x0d
    1924:	4f 87       	std	Y+15, r20	; 0x0f
    1926:	58 8b       	std	Y+16, r21	; 0x10
    1928:	69 8b       	std	Y+17, r22	; 0x11
    192a:	7a 8b       	std	Y+18, r23	; 0x12
    192c:	f8 87       	std	Y+8, r31	; 0x08
    192e:	ef 83       	std	Y+7, r30	; 0x07
    1930:	d9 01       	movw	r26, r18
    1932:	12 96       	adiw	r26, 0x02	; 2
    1934:	0d 91       	ld	r16, X+
    1936:	1d 91       	ld	r17, X+
    1938:	2d 91       	ld	r18, X+
    193a:	3c 91       	ld	r19, X
    193c:	15 97       	sbiw	r26, 0x05	; 5
    193e:	09 87       	std	Y+9, r16	; 0x09
    1940:	1a 87       	std	Y+10, r17	; 0x0a
    1942:	2b 87       	std	Y+11, r18	; 0x0b
    1944:	3c 87       	std	Y+12, r19	; 0x0c
    1946:	fa 83       	std	Y+2, r31	; 0x02
    1948:	e9 83       	std	Y+1, r30	; 0x01
    194a:	4b 83       	std	Y+3, r20	; 0x03
    194c:	5c 83       	std	Y+4, r21	; 0x04
    194e:	6d 83       	std	Y+5, r22	; 0x05
    1950:	7e 83       	std	Y+6, r23	; 0x06
    1952:	21 e0       	ldi	r18, 0x01	; 1
    1954:	2e 83       	std	Y+6, r18	; 0x06
  // Assume the gateway will be the machine on the same network as the local IP
  // but with last octet being '1'
  IPAddress gateway = local_ip;
  gateway[3] = 1;
  begin(mac_address, local_ip, dns_server, gateway);
    1956:	b7 01       	movw	r22, r14
    1958:	ae 01       	movw	r20, r28
    195a:	43 5f       	subi	r20, 0xF3	; 243
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	9e 01       	movw	r18, r28
    1960:	29 5f       	subi	r18, 0xF9	; 249
    1962:	3f 4f       	sbci	r19, 0xFF	; 255
    1964:	8e 01       	movw	r16, r28
    1966:	0f 5f       	subi	r16, 0xFF	; 255
    1968:	1f 4f       	sbci	r17, 0xFF	; 255
    196a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN13EthernetClass5beginEPh9IPAddressS1_S1_>
}
    196e:	68 96       	adiw	r28, 0x18	; 24
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	ff 90       	pop	r15
    1984:	ef 90       	pop	r14
    1986:	08 95       	ret

00001988 <_ZN13EthernetClass5beginEPh9IPAddress>:

  return ret;
}

void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip)
{
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	62 97       	sbiw	r28, 0x12	; 18
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	fb 01       	movw	r30, r22
    199e:	da 01       	movw	r26, r20
    19a0:	12 96       	adiw	r26, 0x02	; 2
    19a2:	4d 91       	ld	r20, X+
    19a4:	5d 91       	ld	r21, X+
    19a6:	6d 91       	ld	r22, X+
    19a8:	7c 91       	ld	r23, X
    19aa:	15 97       	sbiw	r26, 0x05	; 5
    19ac:	4f 87       	std	Y+15, r20	; 0x0f
    19ae:	58 8b       	std	Y+16, r21	; 0x10
    19b0:	69 8b       	std	Y+17, r22	; 0x11
    19b2:	7a 8b       	std	Y+18, r23	; 0x12
    19b4:	2b e4       	ldi	r18, 0x4B	; 75
    19b6:	32 e0       	ldi	r19, 0x02	; 2
    19b8:	38 87       	std	Y+8, r19	; 0x08
    19ba:	2f 83       	std	Y+7, r18	; 0x07
    19bc:	49 87       	std	Y+9, r20	; 0x09
    19be:	5a 87       	std	Y+10, r21	; 0x0a
    19c0:	6b 87       	std	Y+11, r22	; 0x0b
    19c2:	7c 87       	std	Y+12, r23	; 0x0c
    19c4:	3a 83       	std	Y+2, r19	; 0x02
    19c6:	29 83       	std	Y+1, r18	; 0x01
    19c8:	4b 83       	std	Y+3, r20	; 0x03
    19ca:	5c 83       	std	Y+4, r21	; 0x04
    19cc:	6d 83       	std	Y+5, r22	; 0x05
    19ce:	7e 83       	std	Y+6, r23	; 0x06
    19d0:	21 e0       	ldi	r18, 0x01	; 1
    19d2:	2e 83       	std	Y+6, r18	; 0x06
  // Assume the DNS server will be the machine on the same network as the local IP
  // but with last octet being '1'
  IPAddress dns_server = local_ip;
  dns_server[3] = 1;
  begin(mac_address, local_ip, dns_server);
    19d4:	bf 01       	movw	r22, r30
    19d6:	ae 01       	movw	r20, r28
    19d8:	49 5f       	subi	r20, 0xF9	; 249
    19da:	5f 4f       	sbci	r21, 0xFF	; 255
    19dc:	9e 01       	movw	r18, r28
    19de:	2f 5f       	subi	r18, 0xFF	; 255
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN13EthernetClass5beginEPh9IPAddressS1_>
}
    19e6:	62 96       	adiw	r28, 0x12	; 18
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	08 95       	ret

000019f8 <_ZN13EthernetClass8maintainEv>:
  W5100.setGatewayIp(gateway._address);
  W5100.setSubnetMask(subnet._address);
  _dnsServerAddress = dns_server;
}

int EthernetClass::maintain(){
    19f8:	ef 92       	push	r14
    19fa:	ff 92       	push	r15
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	68 97       	sbiw	r28, 0x18	; 24
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	7c 01       	movw	r14, r24
  int rc = DHCP_CHECK_NONE;
  if(_dhcp != NULL){
    1a16:	fc 01       	movw	r30, r24
    1a18:	86 81       	ldd	r24, Z+6	; 0x06
    1a1a:	97 81       	ldd	r25, Z+7	; 0x07
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <_ZN13EthernetClass8maintainEv+0x2a>
    1a20:	4b c0       	rjmp	.+150    	; 0x1ab8 <_ZN13EthernetClass8maintainEv+0xc0>
    //we have a pointer to dhcp, use it
    rc = _dhcp->checkLease();
    1a22:	0e 94 51 32 	call	0x64a2	; 0x64a2 <_ZN9DhcpClass10checkLeaseEv>
    1a26:	8c 01       	movw	r16, r24
    switch ( rc ){
    1a28:	82 30       	cpi	r24, 0x02	; 2
    1a2a:	91 05       	cpc	r25, r1
    1a2c:	21 f0       	breq	.+8      	; 0x1a36 <_ZN13EthernetClass8maintainEv+0x3e>
    1a2e:	84 30       	cpi	r24, 0x04	; 4
    1a30:	91 05       	cpc	r25, r1
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <_ZN13EthernetClass8maintainEv+0x3e>
    1a34:	43 c0       	rjmp	.+134    	; 0x1abc <_ZN13EthernetClass8maintainEv+0xc4>
        //nothing done
        break;
      case DHCP_CHECK_RENEW_OK:
      case DHCP_CHECK_REBIND_OK:
        //we might have got a new IP.
        W5100.setIPAddress(_dhcp->getLocalIp().raw_address());
    1a36:	f7 01       	movw	r30, r14
    1a38:	66 81       	ldd	r22, Z+6	; 0x06
    1a3a:	77 81       	ldd	r23, Z+7	; 0x07
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	43 96       	adiw	r24, 0x13	; 19
    1a40:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <_ZN9DhcpClass10getLocalIpEv>
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
    1a44:	8f e0       	ldi	r24, 0x0F	; 15
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	be 01       	movw	r22, r28
    1a4a:	6b 5e       	subi	r22, 0xEB	; 235
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	44 e0       	ldi	r20, 0x04	; 4
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
        W5100.setGatewayIp(_dhcp->getGatewayIp().raw_address());
    1a56:	f7 01       	movw	r30, r14
    1a58:	66 81       	ldd	r22, Z+6	; 0x06
    1a5a:	77 81       	ldd	r23, Z+7	; 0x07
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	0d 96       	adiw	r24, 0x0d	; 13
    1a60:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <_ZN9DhcpClass12getGatewayIpEv>
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	be 01       	movw	r22, r28
    1a6a:	61 5f       	subi	r22, 0xF1	; 241
    1a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6e:	44 e0       	ldi	r20, 0x04	; 4
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
        W5100.setSubnetMask(_dhcp->getSubnetMask().raw_address());
    1a76:	f7 01       	movw	r30, r14
    1a78:	66 81       	ldd	r22, Z+6	; 0x06
    1a7a:	77 81       	ldd	r23, Z+7	; 0x07
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	07 96       	adiw	r24, 0x07	; 7
    1a80:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <_ZN9DhcpClass13getSubnetMaskEv>
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
    1a84:	85 e0       	ldi	r24, 0x05	; 5
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	be 01       	movw	r22, r28
    1a8a:	67 5f       	subi	r22, 0xF7	; 247
    1a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8e:	44 e0       	ldi	r20, 0x04	; 4
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
        _dnsServerAddress = _dhcp->getDnsServerIp();
    1a96:	f7 01       	movw	r30, r14
    1a98:	66 81       	ldd	r22, Z+6	; 0x06
    1a9a:	77 81       	ldd	r23, Z+7	; 0x07
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <_ZN9DhcpClass14getDnsServerIpEv>
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	ad 81       	ldd	r26, Y+5	; 0x05
    1aaa:	be 81       	ldd	r27, Y+6	; 0x06
    1aac:	f7 01       	movw	r30, r14
    1aae:	82 83       	std	Z+2, r24	; 0x02
    1ab0:	93 83       	std	Z+3, r25	; 0x03
    1ab2:	a4 83       	std	Z+4, r26	; 0x04
    1ab4:	b5 83       	std	Z+5, r27	; 0x05
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <_ZN13EthernetClass8maintainEv+0xc4>
  W5100.setSubnetMask(subnet._address);
  _dnsServerAddress = dns_server;
}

int EthernetClass::maintain(){
  int rc = DHCP_CHECK_NONE;
    1ab8:	00 e0       	ldi	r16, 0x00	; 0
    1aba:	10 e0       	ldi	r17, 0x00	; 0
        //this is actually a error, it will retry though
        break;
    }
  }
  return rc;
}
    1abc:	80 2f       	mov	r24, r16
    1abe:	91 2f       	mov	r25, r17
    1ac0:	68 96       	adiw	r28, 0x18	; 24
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	ff 90       	pop	r15
    1ad6:	ef 90       	pop	r14
    1ad8:	08 95       	ret

00001ada <_ZN13EthernetClass7localIPEv>:

IPAddress EthernetClass::localIP()
{
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	ec 01       	movw	r28, r24
  IPAddress ret;
    1ae0:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN9IPAddressC1Ev>
  W5100.getIPAddress(ret.raw_address());
    1ae4:	be 01       	movw	r22, r28
    1ae6:	6e 5f       	subi	r22, 0xFE	; 254
    1ae8:	7f 4f       	sbci	r23, 0xFF	; 255
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
    1aea:	8f e0       	ldi	r24, 0x0F	; 15
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	44 e0       	ldi	r20, 0x04	; 4
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZN10W5100Class4readEjPhj>
  return ret;
}
    1af6:	ce 01       	movw	r24, r28
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	08 95       	ret

00001afe <_ZN13EthernetClass10subnetMaskEv>:

IPAddress EthernetClass::subnetMask()
{
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	ec 01       	movw	r28, r24
  IPAddress ret;
    1b04:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN9IPAddressC1Ev>
  W5100.getSubnetMask(ret.raw_address());
    1b08:	be 01       	movw	r22, r28
    1b0a:	6e 5f       	subi	r22, 0xFE	; 254
    1b0c:	7f 4f       	sbci	r23, 0xFF	; 255
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
    1b0e:	85 e0       	ldi	r24, 0x05	; 5
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	44 e0       	ldi	r20, 0x04	; 4
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZN10W5100Class4readEjPhj>
  return ret;
}
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	08 95       	ret

00001b22 <_ZN13EthernetClass9gatewayIPEv>:

IPAddress EthernetClass::gatewayIP()
{
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	ec 01       	movw	r28, r24
  IPAddress ret;
    1b28:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN9IPAddressC1Ev>
  W5100.getGatewayIp(ret.raw_address());
    1b2c:	be 01       	movw	r22, r28
    1b2e:	6e 5f       	subi	r22, 0xFE	; 254
    1b30:	7f 4f       	sbci	r23, 0xFF	; 255
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	44 e0       	ldi	r20, 0x04	; 4
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZN10W5100Class4readEjPhj>
  return ret;
}
    1b3e:	ce 01       	movw	r24, r28
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	08 95       	ret

00001b46 <_ZN13EthernetClass11dnsServerIPEv>:
    1b46:	2b e4       	ldi	r18, 0x4B	; 75
    1b48:	32 e0       	ldi	r19, 0x02	; 2
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	31 83       	std	Z+1, r19	; 0x01
    1b4e:	20 83       	st	Z, r18
    1b50:	fb 01       	movw	r30, r22
    1b52:	42 81       	ldd	r20, Z+2	; 0x02
    1b54:	53 81       	ldd	r21, Z+3	; 0x03
    1b56:	64 81       	ldd	r22, Z+4	; 0x04
    1b58:	75 81       	ldd	r23, Z+5	; 0x05
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	42 83       	std	Z+2, r20	; 0x02
    1b5e:	53 83       	std	Z+3, r21	; 0x03
    1b60:	64 83       	std	Z+4, r22	; 0x04
    1b62:	75 83       	std	Z+5, r23	; 0x05

IPAddress EthernetClass::dnsServerIP()
{
  return _dnsServerAddress;
}
    1b64:	08 95       	ret

00001b66 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:

EthernetClass Ethernet;
    1b66:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    1b68:	8b e6       	ldi	r24, 0x6B	; 107
    1b6a:	95 e0       	ldi	r25, 0x05	; 5
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	00 e0       	ldi	r16, 0x00	; 0
    1b74:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN9IPAddressC1Ehhhh>
#include "EthernetServer.h"
#include "Dhcp.h"

#define MAX_SOCK_NUM 4

class EthernetClass {
    1b78:	87 e5       	ldi	r24, 0x57	; 87
    1b7a:	95 e0       	ldi	r25, 0x05	; 5
    1b7c:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN9IPAddressC1Ev>
    1b80:	0f 91       	pop	r16
    1b82:	08 95       	ret

00001b84 <_ZN11EthernetUDP4readEPcj>:
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    1b84:	dc 01       	movw	r26, r24
    1b86:	ed 91       	ld	r30, X+
    1b88:	fc 91       	ld	r31, X
    1b8a:	00 8c       	ldd	r0, Z+24	; 0x18
    1b8c:	f1 8d       	ldd	r31, Z+25	; 0x19
    1b8e:	e0 2d       	mov	r30, r0
    1b90:	09 95       	icall
    1b92:	08 95       	ret

00001b94 <_ZN11EthernetUDP8remoteIPEv>:

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    1b94:	2b e4       	ldi	r18, 0x4B	; 75
    1b96:	32 e0       	ldi	r19, 0x02	; 2
    1b98:	fc 01       	movw	r30, r24
    1b9a:	31 83       	std	Z+1, r19	; 0x01
    1b9c:	20 83       	st	Z, r18
    1b9e:	fb 01       	movw	r30, r22
    1ba0:	41 89       	ldd	r20, Z+17	; 0x11
    1ba2:	52 89       	ldd	r21, Z+18	; 0x12
    1ba4:	63 89       	ldd	r22, Z+19	; 0x13
    1ba6:	74 89       	ldd	r23, Z+20	; 0x14
    1ba8:	fc 01       	movw	r30, r24
    1baa:	42 83       	std	Z+2, r20	; 0x02
    1bac:	53 83       	std	Z+3, r21	; 0x03
    1bae:	64 83       	std	Z+4, r22	; 0x04
    1bb0:	75 83       	std	Z+5, r23	; 0x05
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    1bb2:	08 95       	ret

00001bb4 <_ZN11EthernetUDP10remotePortEv>:
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	85 89       	ldd	r24, Z+21	; 0x15
    1bb8:	96 89       	ldd	r25, Z+22	; 0x16
    1bba:	08 95       	ret

00001bbc <_ZN11EthernetUDP9availableEv>:
  return 1;
}

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
    1bbc:	fc 01       	movw	r30, r24
  return _remaining;
}
    1bbe:	81 8d       	ldd	r24, Z+25	; 0x19
    1bc0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bc2:	08 95       	ret

00001bc4 <_ZN11EthernetUDP5writeEh>:
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	0f 92       	push	r0
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	69 83       	std	Y+1, r22	; 0x01
  return write(&byte, 1);
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	ed 91       	ld	r30, X+
    1bd4:	fc 91       	ld	r31, X
    1bd6:	02 80       	ldd	r0, Z+2	; 0x02
    1bd8:	f3 81       	ldd	r31, Z+3	; 0x03
    1bda:	e0 2d       	mov	r30, r0
    1bdc:	be 01       	movw	r22, r28
    1bde:	6f 5f       	subi	r22, 0xFF	; 255
    1be0:	7f 4f       	sbci	r23, 0xFF	; 255
    1be2:	41 e0       	ldi	r20, 0x01	; 1
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	09 95       	icall
}
    1be8:	0f 90       	pop	r0
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	08 95       	ret

00001bf0 <_ZN11EthernetUDP5flushEv>:
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    1bf0:	cf 92       	push	r12
    1bf2:	df 92       	push	r13
    1bf4:	ef 92       	push	r14
    1bf6:	ff 92       	push	r15
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	8c 01       	movw	r16, r24
  while (_remaining)
  {
	byte garbage[_remaining];
	read(garbage, _remaining);
  }
}
    1c06:	cd b6       	in	r12, 0x3d	; 61
    1c08:	de b6       	in	r13, 0x3e	; 62
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5100 always behaves :)

  while (_remaining)
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	59 96       	adiw	r26, 0x19	; 25
    1c0e:	8d 91       	ld	r24, X+
    1c10:	9c 91       	ld	r25, X
    1c12:	5a 97       	sbiw	r26, 0x1a	; 26
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	19 f1       	breq	.+70     	; 0x1c5e <_ZN11EthernetUDP5flushEv+0x6e>
    1c18:	fd b6       	in	r15, 0x3d	; 61
    1c1a:	ee b6       	in	r14, 0x3e	; 62
  {
	byte garbage[_remaining];
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	41 8d       	ldd	r20, Z+25	; 0x19
    1c20:	52 8d       	ldd	r21, Z+26	; 0x1a
    1c22:	8d b7       	in	r24, 0x3d	; 61
    1c24:	9e b7       	in	r25, 0x3e	; 62
    1c26:	84 1b       	sub	r24, r20
    1c28:	95 0b       	sbc	r25, r21
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	9e bf       	out	0x3e, r25	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	8d bf       	out	0x3d, r24	; 61
    1c34:	6d b7       	in	r22, 0x3d	; 61
    1c36:	7e b7       	in	r23, 0x3e	; 62
    1c38:	6f 5f       	subi	r22, 0xFF	; 255
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255
	read(garbage, _remaining);
    1c3c:	01 90       	ld	r0, Z+
    1c3e:	f0 81       	ld	r31, Z
    1c40:	e0 2d       	mov	r30, r0
    1c42:	00 8c       	ldd	r0, Z+24	; 0x18
    1c44:	f1 8d       	ldd	r31, Z+25	; 0x19
    1c46:	e0 2d       	mov	r30, r0
    1c48:	c8 01       	movw	r24, r16
    1c4a:	09 95       	icall
    1c4c:	fd be       	out	0x3d, r15	; 61
    1c4e:	ee be       	out	0x3e, r14	; 62
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5100 always behaves :)

  while (_remaining)
    1c50:	d8 01       	movw	r26, r16
    1c52:	59 96       	adiw	r26, 0x19	; 25
    1c54:	8d 91       	ld	r24, X+
    1c56:	9c 91       	ld	r25, X
    1c58:	5a 97       	sbiw	r26, 0x1a	; 26
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	e9 f6       	brne	.-70     	; 0x1c18 <_ZN11EthernetUDP5flushEv+0x28>
  {
	byte garbage[_remaining];
	read(garbage, _remaining);
  }
}
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de be       	out	0x3e, r13	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd be       	out	0x3d, r12	; 61
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	df 90       	pop	r13
    1c76:	cf 90       	pop	r12
    1c78:	08 95       	ret

00001c7a <_ZN11EthernetUDP4peekEv>:
  return -1;

}

int EthernetUDP::peek()
{
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	0f 92       	push	r0
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	fc 01       	movw	r30, r24
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    1c86:	81 8d       	ldd	r24, Z+25	; 0x19
    1c88:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	49 f0       	breq	.+18     	; 0x1ca0 <_ZN11EthernetUDP4peekEv+0x26>
    return -1;
  ::peek(_sock, &b);
    1c8e:	84 85       	ldd	r24, Z+12	; 0x0c
    1c90:	be 01       	movw	r22, r28
    1c92:	6f 5f       	subi	r22, 0xFF	; 255
    1c94:	7f 4f       	sbci	r23, 0xFF	; 255
    1c96:	0e 94 6f 11 	call	0x22de	; 0x22de <_Z4peekhPh>
  return b;
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <_ZN11EthernetUDP4peekEv+0x2a>
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    return -1;
    1ca0:	8f ef       	ldi	r24, 0xFF	; 255
    1ca2:	9f ef       	ldi	r25, 0xFF	; 255
  ::peek(_sock, &b);
  return b;
}
    1ca4:	0f 90       	pop	r0
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	08 95       	ret

00001cac <_ZN11EthernetUDP4readEPhj>:
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	ec 01       	movw	r28, r24
    1cb2:	9a 01       	movw	r18, r20

  if (_remaining > 0)
    1cb4:	49 8d       	ldd	r20, Y+25	; 0x19
    1cb6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1cb8:	41 15       	cp	r20, r1
    1cba:	51 05       	cpc	r21, r1
    1cbc:	a9 f0       	breq	.+42     	; 0x1ce8 <_ZN11EthernetUDP4readEPhj+0x3c>
  {

    int got;

    if (_remaining <= len)
    1cbe:	24 17       	cp	r18, r20
    1cc0:	35 07       	cpc	r19, r21
    1cc2:	20 f0       	brcs	.+8      	; 0x1ccc <_ZN11EthernetUDP4readEPhj+0x20>
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    1cc4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cc6:	0e 94 24 11 	call	0x2248	; 0x2248 <_Z4recvhPhi>
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <_ZN11EthernetUDP4readEPhj+0x28>
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    1ccc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cce:	a9 01       	movw	r20, r18
    1cd0:	0e 94 24 11 	call	0x2248	; 0x2248 <_Z4recvhPhi>
    }

    if (got > 0)
    1cd4:	18 16       	cp	r1, r24
    1cd6:	19 06       	cpc	r1, r25
    1cd8:	54 f4       	brge	.+20     	; 0x1cee <_ZN11EthernetUDP4readEPhj+0x42>
    {
      _remaining -= got;
    1cda:	29 8d       	ldd	r18, Y+25	; 0x19
    1cdc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1cde:	28 1b       	sub	r18, r24
    1ce0:	39 0b       	sbc	r19, r25
    1ce2:	3a 8f       	std	Y+26, r19	; 0x1a
    1ce4:	29 8f       	std	Y+25, r18	; 0x19
      return got;
    1ce6:	05 c0       	rjmp	.+10     	; 0x1cf2 <_ZN11EthernetUDP4readEPhj+0x46>
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    1ce8:	8f ef       	ldi	r24, 0xFF	; 255
    1cea:	9f ef       	ldi	r25, 0xFF	; 255
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <_ZN11EthernetUDP4readEPhj+0x46>
    1cee:	8f ef       	ldi	r24, 0xFF	; 255
    1cf0:	9f ef       	ldi	r25, 0xFF	; 255

}
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	08 95       	ret

00001cf8 <_ZN11EthernetUDP4readEv>:
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	0f 92       	push	r0
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	8c 01       	movw	r16, r24
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    1d08:	fc 01       	movw	r30, r24
    1d0a:	81 8d       	ldd	r24, Z+25	; 0x19
    1d0c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	a1 f0       	breq	.+40     	; 0x1d3a <_ZN11EthernetUDP4readEv+0x42>
    1d12:	84 85       	ldd	r24, Z+12	; 0x0c
    1d14:	be 01       	movw	r22, r28
    1d16:	6f 5f       	subi	r22, 0xFF	; 255
    1d18:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1a:	41 e0       	ldi	r20, 0x01	; 1
    1d1c:	50 e0       	ldi	r21, 0x00	; 0
    1d1e:	0e 94 24 11 	call	0x2248	; 0x2248 <_Z4recvhPhi>
    1d22:	18 16       	cp	r1, r24
    1d24:	19 06       	cpc	r1, r25
    1d26:	64 f4       	brge	.+24     	; 0x1d40 <_ZN11EthernetUDP4readEv+0x48>
  {
    // We read things without any problems
    _remaining--;
    1d28:	f8 01       	movw	r30, r16
    1d2a:	81 8d       	ldd	r24, Z+25	; 0x19
    1d2c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	92 8f       	std	Z+26, r25	; 0x1a
    1d32:	81 8f       	std	Z+25, r24	; 0x19
    return byte;
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	05 c0       	rjmp	.+10     	; 0x1d44 <_ZN11EthernetUDP4readEv+0x4c>
  }

  // If we get here, there's no data available
  return -1;
    1d3a:	8f ef       	ldi	r24, 0xFF	; 255
    1d3c:	9f ef       	ldi	r25, 0xFF	; 255
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <_ZN11EthernetUDP4readEv+0x4c>
    1d40:	8f ef       	ldi	r24, 0xFF	; 255
    1d42:	9f ef       	ldi	r25, 0xFF	; 255
}
    1d44:	0f 90       	pop	r0
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	08 95       	ret

00001d50 <_ZN11EthernetUDP11parsePacketEv>:
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	28 97       	sbiw	r28, 0x08	; 8
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	8c 01       	movw	r16, r24
  // discard any remaining bytes in the last packet
  flush();
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	ed 91       	ld	r30, X+
    1d6e:	fc 91       	ld	r31, X
    1d70:	02 84       	ldd	r0, Z+10	; 0x0a
    1d72:	f3 85       	ldd	r31, Z+11	; 0x0b
    1d74:	e0 2d       	mov	r30, r0
    1d76:	09 95       	icall

  if (W5100.getRXReceivedSize(_sock) > 0)
    1d78:	89 e7       	ldi	r24, 0x79	; 121
    1d7a:	95 e0       	ldi	r25, 0x05	; 5
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	64 85       	ldd	r22, Z+12	; 0x0c
    1d80:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN10W5100Class17getRXReceivedSizeEh>
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	21 f1       	breq	.+72     	; 0x1dd0 <_ZN11EthernetUDP11parsePacketEv+0x80>
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    1d88:	d8 01       	movw	r26, r16
    1d8a:	1c 96       	adiw	r26, 0x0c	; 12
    1d8c:	8c 91       	ld	r24, X
    1d8e:	be 01       	movw	r22, r28
    1d90:	6f 5f       	subi	r22, 0xFF	; 255
    1d92:	7f 4f       	sbci	r23, 0xFF	; 255
    1d94:	48 e0       	ldi	r20, 0x08	; 8
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	0e 94 24 11 	call	0x2248	; 0x2248 <_Z4recvhPhi>
    if (ret > 0)
    1d9c:	18 16       	cp	r1, r24
    1d9e:	19 06       	cpc	r1, r25
    1da0:	cc f4       	brge	.+50     	; 0x1dd4 <_ZN11EthernetUDP11parsePacketEv+0x84>
    {
      _remoteIP = tmpBuf;
    1da2:	c8 01       	movw	r24, r16
    1da4:	0f 96       	adiw	r24, 0x0f	; 15
    1da6:	be 01       	movw	r22, r28
    1da8:	6f 5f       	subi	r22, 0xFF	; 255
    1daa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dac:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_ZN9IPAddressaSEPKh>
      _remotePort = tmpBuf[4];
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    1db0:	9d 81       	ldd	r25, Y+5	; 0x05
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	2e 81       	ldd	r18, Y+6	; 0x06
    1db6:	82 0f       	add	r24, r18
    1db8:	91 1d       	adc	r25, r1
    1dba:	f8 01       	movw	r30, r16
    1dbc:	96 8b       	std	Z+22, r25	; 0x16
    1dbe:	85 8b       	std	Z+21, r24	; 0x15
      _remaining = tmpBuf[6];
      _remaining = (_remaining << 8) + tmpBuf[7];
    1dc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	28 85       	ldd	r18, Y+8	; 0x08
    1dc6:	82 0f       	add	r24, r18
    1dc8:	91 1d       	adc	r25, r1
    1dca:	92 8f       	std	Z+26, r25	; 0x1a
    1dcc:	81 8f       	std	Z+25, r24	; 0x19
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <_ZN11EthernetUDP11parsePacketEv+0x84>
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
}
    1dd4:	28 96       	adiw	r28, 0x08	; 8
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	08 95       	ret

00001dea <_ZN11EthernetUDP5writeEPKhj>:
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	ec 01       	movw	r28, r24
    1df0:	9b 01       	movw	r18, r22
    1df2:	fa 01       	movw	r30, r20
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    1df4:	6f 89       	ldd	r22, Y+23	; 0x17
    1df6:	78 8d       	ldd	r23, Y+24	; 0x18
    1df8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dfa:	a9 01       	movw	r20, r18
    1dfc:	9f 01       	movw	r18, r30
    1dfe:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_Z10bufferDatahjPKhj>
  _offset += bytes_written;
    1e02:	2f 89       	ldd	r18, Y+23	; 0x17
    1e04:	38 8d       	ldd	r19, Y+24	; 0x18
    1e06:	28 0f       	add	r18, r24
    1e08:	39 1f       	adc	r19, r25
    1e0a:	38 8f       	std	Y+24, r19	; 0x18
    1e0c:	2f 8b       	std	Y+23, r18	; 0x17
  return bytes_written;
}
    1e0e:	df 91       	pop	r29
    1e10:	cf 91       	pop	r28
    1e12:	08 95       	ret

00001e14 <_ZN11EthernetUDP9endPacketEv>:
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
    1e14:	fc 01       	movw	r30, r24
    1e16:	84 85       	ldd	r24, Z+12	; 0x0c
    1e18:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <_Z7sendUDPh>
}
    1e1c:	08 95       	ret

00001e1e <_ZN11EthernetUDP11beginPacketE9IPAddressj>:
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
    1e1e:	fc 01       	movw	r30, r24
  _offset = 0;
    1e20:	10 8e       	std	Z+24, r1	; 0x18
    1e22:	17 8a       	std	Z+23, r1	; 0x17
  return startUDP(_sock, rawIPAddress(ip), port);
    1e24:	6e 5f       	subi	r22, 0xFE	; 254
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	84 85       	ldd	r24, Z+12	; 0x0c
    1e2a:	0e 94 a0 13 	call	0x2740	; 0x2740 <_Z8startUDPhPhj>
}
    1e2e:	08 95       	ret

00001e30 <_ZN11EthernetUDP4stopEv>:
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	ec 01       	movw	r28, r24
  if (_sock == MAX_SOCK_NUM)
    1e36:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e38:	84 30       	cpi	r24, 0x04	; 4
    1e3a:	61 f0       	breq	.+24     	; 0x1e54 <_ZN11EthernetUDP4stopEv+0x24>
    return;

  close(_sock);
    1e3c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_Z5closeh>

  EthernetClass::_server_port[_sock] = 0;
    1e40:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	ee 0f       	add	r30, r30
    1e46:	ff 1f       	adc	r31, r31
    1e48:	e1 5a       	subi	r30, 0xA1	; 161
    1e4a:	fa 4f       	sbci	r31, 0xFA	; 250
    1e4c:	11 82       	std	Z+1, r1	; 0x01
    1e4e:	10 82       	st	Z, r1
  _sock = MAX_SOCK_NUM;
    1e50:	84 e0       	ldi	r24, 0x04	; 4
    1e52:	8c 87       	std	Y+12, r24	; 0x0c
}
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <_ZN11EthernetUDP5beginEj>:

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    1e5a:	cf 92       	push	r12
    1e5c:	df 92       	push	r13
    1e5e:	ef 92       	push	r14
    1e60:	ff 92       	push	r15
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	7c 01       	movw	r14, r24
    1e6a:	6b 01       	movw	r12, r22
  if (_sock != MAX_SOCK_NUM)
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	84 85       	ldd	r24, Z+12	; 0x0c
    1e70:	84 30       	cpi	r24, 0x04	; 4
    1e72:	09 f5       	brne	.+66     	; 0x1eb6 <_ZN11EthernetUDP5beginEj+0x5c>
    1e74:	c3 e0       	ldi	r28, 0x03	; 3
    1e76:	d4 e0       	ldi	r29, 0x04	; 4
    1e78:	10 e0       	ldi	r17, 0x00	; 0
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = W5100.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    1e80:	88 23       	and	r24, r24
    1e82:	11 f0       	breq	.+4      	; 0x1e88 <_ZN11EthernetUDP5beginEj+0x2e>
    1e84:	88 31       	cpi	r24, 0x18	; 24
    1e86:	19 f4       	brne	.+6      	; 0x1e8e <_ZN11EthernetUDP5beginEj+0x34>
      _sock = i;
    1e88:	f7 01       	movw	r30, r14
    1e8a:	14 87       	std	Z+12, r17	; 0x0c
      break;
    1e8c:	05 c0       	rjmp	.+10     	; 0x1e98 <_ZN11EthernetUDP5beginEj+0x3e>
    1e8e:	1f 5f       	subi	r17, 0xFF	; 255
    1e90:	c0 50       	subi	r28, 0x00	; 0
    1e92:	df 4f       	sbci	r29, 0xFF	; 255
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    1e94:	14 30       	cpi	r17, 0x04	; 4
    1e96:	89 f7       	brne	.-30     	; 0x1e7a <_ZN11EthernetUDP5beginEj+0x20>
      _sock = i;
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    1e98:	f7 01       	movw	r30, r14
    1e9a:	84 85       	ldd	r24, Z+12	; 0x0c
    1e9c:	84 30       	cpi	r24, 0x04	; 4
    1e9e:	69 f0       	breq	.+26     	; 0x1eba <_ZN11EthernetUDP5beginEj+0x60>
    return 0;

  _port = port;
    1ea0:	d6 86       	std	Z+14, r13	; 0x0e
    1ea2:	c5 86       	std	Z+13, r12	; 0x0d
  _remaining = 0;
    1ea4:	12 8e       	std	Z+26, r1	; 0x1a
    1ea6:	11 8e       	std	Z+25, r1	; 0x19
  socket(_sock, SnMR::UDP, _port, 0);
    1ea8:	62 e0       	ldi	r22, 0x02	; 2
    1eaa:	a6 01       	movw	r20, r12
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_Z6sockethhjh>

  return 1;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	03 c0       	rjmp	.+6      	; 0x1ebc <_ZN11EthernetUDP5beginEj+0x62>
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	01 c0       	rjmp	.+2      	; 0x1ebc <_ZN11EthernetUDP5beginEj+0x62>
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    return 0;
    1eba:	80 e0       	ldi	r24, 0x00	; 0
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	1f 91       	pop	r17
    1ec2:	ff 90       	pop	r15
    1ec4:	ef 90       	pop	r14
    1ec6:	df 90       	pop	r13
    1ec8:	cf 90       	pop	r12
    1eca:	08 95       	ret

00001ecc <_ZN11EthernetUDPC1Ev>:
#include "Ethernet.h"
#include "..\Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    1ecc:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1ece:	13 82       	std	Z+3, r1	; 0x03
    1ed0:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1ed2:	48 ee       	ldi	r20, 0xE8	; 232
    1ed4:	53 e0       	ldi	r21, 0x03	; 3
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	44 83       	std	Z+4, r20	; 0x04
    1edc:	55 83       	std	Z+5, r21	; 0x05
    1ede:	66 83       	std	Z+6, r22	; 0x06
    1ee0:	77 83       	std	Z+7, r23	; 0x07
    1ee2:	8d ec       	ldi	r24, 0xCD	; 205
    1ee4:	91 e0       	ldi	r25, 0x01	; 1
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
    1eea:	84 e0       	ldi	r24, 0x04	; 4
    1eec:	84 87       	std	Z+12, r24	; 0x0c
    1eee:	cf 01       	movw	r24, r30
    1ef0:	0f 96       	adiw	r24, 0x0f	; 15
    1ef2:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN9IPAddressC1Ev>
    1ef6:	08 95       	ret

00001ef8 <_ZN11EthernetUDP11beginPacketEPKcj>:
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    1ef8:	cf 92       	push	r12
    1efa:	df 92       	push	r13
    1efc:	ef 92       	push	r14
    1efe:	ff 92       	push	r15
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	e5 97       	sbiw	r28, 0x35	; 53
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	7c 01       	movw	r14, r24
    1f1a:	8b 01       	movw	r16, r22
    1f1c:	6a 01       	movw	r12, r20
#ifndef DNSClient_h
#define DNSClient_h

#include "EthernetUdp.h"

class DNSClient
    1f1e:	ce 01       	movw	r24, r28
    1f20:	43 96       	adiw	r24, 0x13	; 19
    1f22:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN9IPAddressC1Ev>
    1f26:	ce 01       	movw	r24, r28
    1f28:	4b 96       	adiw	r24, 0x1b	; 27
    1f2a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN11EthernetUDPC1Ev>
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
    1f2e:	ce 01       	movw	r24, r28
    1f30:	0d 96       	adiw	r24, 0x0d	; 13
    1f32:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN9IPAddressC1Ev>

  dns.begin(Ethernet.dnsServerIP());
    1f36:	ce 01       	movw	r24, r28
    1f38:	07 96       	adiw	r24, 0x07	; 7
    1f3a:	67 e5       	ldi	r22, 0x57	; 87
    1f3c:	75 e0       	ldi	r23, 0x05	; 5
    1f3e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <_ZN13EthernetClass11dnsServerIPEv>
    1f42:	ce 01       	movw	r24, r28
    1f44:	43 96       	adiw	r24, 0x13	; 19
    1f46:	be 01       	movw	r22, r28
    1f48:	69 5f       	subi	r22, 0xF9	; 249
    1f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4c:	0e 94 8a 33 	call	0x6714	; 0x6714 <_ZN9DNSClient5beginERK9IPAddress>
  ret = dns.getHostByName(host, remote_addr);
    1f50:	ce 01       	movw	r24, r28
    1f52:	43 96       	adiw	r24, 0x13	; 19
    1f54:	b8 01       	movw	r22, r16
    1f56:	ae 01       	movw	r20, r28
    1f58:	43 5f       	subi	r20, 0xF3	; 243
    1f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f5c:	0e 94 42 36 	call	0x6c84	; 0x6c84 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>
  if (ret == 1) {
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	91 05       	cpc	r25, r1
    1f64:	c1 f4       	brne	.+48     	; 0x1f96 <_ZN11EthernetUDP11beginPacketEPKcj+0x9e>
    return beginPacket(remote_addr, port);
    1f66:	d7 01       	movw	r26, r14
    1f68:	ed 91       	ld	r30, X+
    1f6a:	fc 91       	ld	r31, X
    1f6c:	00 88       	ldd	r0, Z+16	; 0x10
    1f6e:	f1 89       	ldd	r31, Z+17	; 0x11
    1f70:	e0 2d       	mov	r30, r0
    1f72:	8b e4       	ldi	r24, 0x4B	; 75
    1f74:	92 e0       	ldi	r25, 0x02	; 2
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7c:	98 89       	ldd	r25, Y+16	; 0x10
    1f7e:	a9 89       	ldd	r26, Y+17	; 0x11
    1f80:	ba 89       	ldd	r27, Y+18	; 0x12
    1f82:	8b 83       	std	Y+3, r24	; 0x03
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	ad 83       	std	Y+5, r26	; 0x05
    1f88:	be 83       	std	Y+6, r27	; 0x06
    1f8a:	c7 01       	movw	r24, r14
    1f8c:	be 01       	movw	r22, r28
    1f8e:	6f 5f       	subi	r22, 0xFF	; 255
    1f90:	7f 4f       	sbci	r23, 0xFF	; 255
    1f92:	a6 01       	movw	r20, r12
    1f94:	09 95       	icall
  } else {
    return ret;
  }
}
    1f96:	e5 96       	adiw	r28, 0x35	; 53
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	df 91       	pop	r29
    1fa4:	cf 91       	pop	r28
    1fa6:	1f 91       	pop	r17
    1fa8:	0f 91       	pop	r16
    1faa:	ff 90       	pop	r15
    1fac:	ef 90       	pop	r14
    1fae:	df 90       	pop	r13
    1fb0:	cf 90       	pop	r12
    1fb2:	08 95       	ret

00001fb4 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:
  while (_remaining)
  {
	byte garbage[_remaining];
	read(garbage, _remaining);
  }
}
    1fb4:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    1fb6:	81 e7       	ldi	r24, 0x71	; 113
    1fb8:	95 e0       	ldi	r25, 0x05	; 5
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	00 e0       	ldi	r16, 0x00	; 0
    1fc2:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN9IPAddressC1Ehhhh>
    1fc6:	0f 91       	pop	r16
    1fc8:	08 95       	ret

00001fca <_Z5closeh>:

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
    1fca:	1f 93       	push	r17
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	18 2f       	mov	r17, r24
  W5100.execCmdSn(s, Sock_CLOSE);
    1fd2:	89 e7       	ldi	r24, 0x79	; 121
    1fd4:	95 e0       	ldi	r25, 0x05	; 5
    1fd6:	61 2f       	mov	r22, r17
    1fd8:	40 e1       	ldi	r20, 0x10	; 16
    1fda:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <_ZN10W5100Class9execCmdSnEh7SockCMD>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    1fde:	d1 2f       	mov	r29, r17
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	c8 2f       	mov	r28, r24
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	8e 5f       	subi	r24, 0xFE	; 254
    1fe8:	9b 4f       	sbci	r25, 0xFB	; 251
    1fea:	6f ef       	ldi	r22, 0xFF	; 255
    1fec:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
  W5100.writeSnIR(s, 0xFF);
}
    1ff0:	df 91       	pop	r29
    1ff2:	cf 91       	pop	r28
    1ff4:	1f 91       	pop	r17
    1ff6:	08 95       	ret

00001ff8 <_Z6sockethhjh>:
/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for W5100 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
{
    1ff8:	cf 92       	push	r12
    1ffa:	df 92       	push	r13
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	18 2f       	mov	r17, r24
    2008:	c6 2f       	mov	r28, r22
    200a:	7a 01       	movw	r14, r20
    200c:	d2 2f       	mov	r29, r18
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
    200e:	86 2f       	mov	r24, r22
    2010:	81 50       	subi	r24, 0x01	; 1
    2012:	85 30       	cpi	r24, 0x05	; 5
    2014:	b0 f5       	brcc	.+108    	; 0x2082 <_Z6sockethhjh+0x8a>
  {
    close(s);
    2016:	81 2f       	mov	r24, r17
    2018:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_Z5closeh>
    201c:	81 2f       	mov	r24, r17
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	04 96       	adiw	r24, 0x04	; 4
    2022:	d8 2e       	mov	r13, r24
    2024:	cc 24       	eor	r12, r12
    W5100.writeSnMR(s, protocol | flag);
    2026:	6d 2f       	mov	r22, r29
    2028:	6c 2b       	or	r22, r28
    202a:	c6 01       	movw	r24, r12
    202c:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    if (port != 0) {
    2030:	e1 14       	cp	r14, r1
    2032:	f1 04       	cpc	r15, r1
    2034:	59 f0       	breq	.+22     	; 0x204c <_Z6sockethhjh+0x54>
    2036:	c6 01       	movw	r24, r12
    2038:	04 96       	adiw	r24, 0x04	; 4
    203a:	6f 2d       	mov	r22, r15
    203c:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    2040:	c6 01       	movw	r24, r12
    2042:	05 96       	adiw	r24, 0x05	; 5
    2044:	6e 2d       	mov	r22, r14
    2046:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    204a:	13 c0       	rjmp	.+38     	; 0x2072 <_Z6sockethhjh+0x7a>
      W5100.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
    204c:	c0 91 77 05 	lds	r28, 0x0577
    2050:	d0 91 78 05 	lds	r29, 0x0578
    2054:	21 96       	adiw	r28, 0x01	; 1
    2056:	d0 93 78 05 	sts	0x0578, r29
    205a:	c0 93 77 05 	sts	0x0577, r28
    205e:	c6 01       	movw	r24, r12
    2060:	04 96       	adiw	r24, 0x04	; 4
    2062:	6d 2f       	mov	r22, r29
    2064:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    2068:	c6 01       	movw	r24, r12
    206a:	05 96       	adiw	r24, 0x05	; 5
    206c:	6c 2f       	mov	r22, r28
    206e:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
      W5100.writeSnPORT(s, local_port);
    }

    W5100.execCmdSn(s, Sock_OPEN);
    2072:	89 e7       	ldi	r24, 0x79	; 121
    2074:	95 e0       	ldi	r25, 0x05	; 5
    2076:	61 2f       	mov	r22, r17
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <_ZN10W5100Class9execCmdSnEh7SockCMD>
    
    return 1;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <_Z6sockethhjh+0x8c>
  }

  return 0;
    2082:	80 e0       	ldi	r24, 0x00	; 0
}
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	ff 90       	pop	r15
    208c:	ef 90       	pop	r14
    208e:	df 90       	pop	r13
    2090:	cf 90       	pop	r12
    2092:	08 95       	ret

00002094 <_Z6listenh>:
/**
 * @brief	This function established  the connection for the channel in passive (server) mode. This function waits for the request from the peer.
 * @return	1 for success else 0.
 */
uint8_t listen(SOCKET s)
{
    2094:	cf 93       	push	r28
    2096:	c8 2f       	mov	r28, r24
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2098:	38 2f       	mov	r19, r24
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	c9 01       	movw	r24, r18
    209e:	8d 5f       	subi	r24, 0xFD	; 253
    20a0:	9b 4f       	sbci	r25, 0xFB	; 251
    20a2:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  if (W5100.readSnSR(s) != SnSR::INIT)
    20a6:	83 31       	cpi	r24, 0x13	; 19
    20a8:	41 f4       	brne	.+16     	; 0x20ba <_Z6listenh+0x26>
    return 0;
  W5100.execCmdSn(s, Sock_LISTEN);
    20aa:	89 e7       	ldi	r24, 0x79	; 121
    20ac:	95 e0       	ldi	r25, 0x05	; 5
    20ae:	6c 2f       	mov	r22, r28
    20b0:	42 e0       	ldi	r20, 0x02	; 2
    20b2:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <_ZN10W5100Class9execCmdSnEh7SockCMD>
  return 1;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	01 c0       	rjmp	.+2      	; 0x20bc <_Z6listenh+0x28>
 * @return	1 for success else 0.
 */
uint8_t listen(SOCKET s)
{
  if (W5100.readSnSR(s) != SnSR::INIT)
    return 0;
    20ba:	80 e0       	ldi	r24, 0x00	; 0
  W5100.execCmdSn(s, Sock_LISTEN);
  return 1;
}
    20bc:	cf 91       	pop	r28
    20be:	08 95       	ret

000020c0 <_Z7connecthPhj>:
 * 		This function waits for the untill the connection is established.
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
    20c0:	ef 92       	push	r14
    20c2:	ff 92       	push	r15
    20c4:	1f 93       	push	r17
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	18 2f       	mov	r17, r24
    20cc:	fb 01       	movw	r30, r22
    20ce:	7a 01       	movw	r14, r20
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    20d0:	80 81       	ld	r24, Z
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    20d2:	8f 3f       	cpi	r24, 0xFF	; 255
    20d4:	51 f4       	brne	.+20     	; 0x20ea <_Z7connecthPhj+0x2a>
    20d6:	81 81       	ldd	r24, Z+1	; 0x01
    20d8:	8f 3f       	cpi	r24, 0xFF	; 255
    20da:	91 f4       	brne	.+36     	; 0x2100 <_Z7connecthPhj+0x40>
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	8f 3f       	cpi	r24, 0xFF	; 255
    20e0:	79 f4       	brne	.+30     	; 0x2100 <_Z7connecthPhj+0x40>
    20e2:	83 81       	ldd	r24, Z+3	; 0x03
    20e4:	8f 3f       	cpi	r24, 0xFF	; 255
    20e6:	61 f4       	brne	.+24     	; 0x2100 <_Z7connecthPhj+0x40>
    20e8:	2c c0       	rjmp	.+88     	; 0x2142 <_Z7connecthPhj+0x82>
    20ea:	88 23       	and	r24, r24
    20ec:	49 f4       	brne	.+18     	; 0x2100 <_Z7connecthPhj+0x40>
    20ee:	81 81       	ldd	r24, Z+1	; 0x01
    20f0:	88 23       	and	r24, r24
    20f2:	31 f4       	brne	.+12     	; 0x2100 <_Z7connecthPhj+0x40>
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	88 23       	and	r24, r24
    20f8:	19 f4       	brne	.+6      	; 0x2100 <_Z7connecthPhj+0x40>
    20fa:	83 81       	ldd	r24, Z+3	; 0x03
    20fc:	88 23       	and	r24, r24
    20fe:	19 f1       	breq	.+70     	; 0x2146 <_Z7connecthPhj+0x86>
    2100:	e1 14       	cp	r14, r1
    2102:	f1 04       	cpc	r15, r1
    2104:	11 f1       	breq	.+68     	; 0x214a <_Z7connecthPhj+0x8a>
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    2106:	c1 2f       	mov	r28, r17
    2108:	d0 e0       	ldi	r29, 0x00	; 0
    210a:	24 96       	adiw	r28, 0x04	; 4
    210c:	dc 2f       	mov	r29, r28
    210e:	cc 27       	eor	r28, r28
    2110:	ce 01       	movw	r24, r28
    2112:	0c 96       	adiw	r24, 0x0c	; 12
    2114:	bf 01       	movw	r22, r30
    2116:	44 e0       	ldi	r20, 0x04	; 4
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    211e:	ce 01       	movw	r24, r28
    2120:	40 96       	adiw	r24, 0x10	; 16
    2122:	6f 2d       	mov	r22, r15
    2124:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    2128:	ce 01       	movw	r24, r28
    212a:	41 96       	adiw	r24, 0x11	; 17
    212c:	6e 2d       	mov	r22, r14
    212e:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    return 0;

  // set destination IP
  W5100.writeSnDIPR(s, addr);
  W5100.writeSnDPORT(s, port);
  W5100.execCmdSn(s, Sock_CONNECT);
    2132:	89 e7       	ldi	r24, 0x79	; 121
    2134:	95 e0       	ldi	r25, 0x05	; 5
    2136:	61 2f       	mov	r22, r17
    2138:	44 e0       	ldi	r20, 0x04	; 4
    213a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <_ZN10W5100Class9execCmdSnEh7SockCMD>

  return 1;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	05 c0       	rjmp	.+10     	; 0x214c <_Z7connecthPhj+0x8c>
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    (port == 0x00) 
    ) 
    return 0;
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	03 c0       	rjmp	.+6      	; 0x214c <_Z7connecthPhj+0x8c>
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	01 c0       	rjmp	.+2      	; 0x214c <_Z7connecthPhj+0x8c>
    214a:	80 e0       	ldi	r24, 0x00	; 0
  W5100.writeSnDIPR(s, addr);
  W5100.writeSnDPORT(s, port);
  W5100.execCmdSn(s, Sock_CONNECT);

  return 1;
}
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	1f 91       	pop	r17
    2152:	ff 90       	pop	r15
    2154:	ef 90       	pop	r14
    2156:	08 95       	ret

00002158 <_Z10disconnecth>:
/**
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
    2158:	68 2f       	mov	r22, r24
  W5100.execCmdSn(s, Sock_DISCON);
    215a:	89 e7       	ldi	r24, 0x79	; 121
    215c:	95 e0       	ldi	r25, 0x05	; 5
    215e:	48 e0       	ldi	r20, 0x08	; 8
    2160:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <_ZN10W5100Class9execCmdSnEh7SockCMD>
}
    2164:	08 95       	ret

00002166 <_Z4sendhPKhj>:
/**
 * @brief	This function used to send the data in TCP mode
 * @return	1 for success else 0.
 */
uint16_t send(SOCKET s, const uint8_t * buf, uint16_t len)
{
    2166:	6f 92       	push	r6
    2168:	7f 92       	push	r7
    216a:	8f 92       	push	r8
    216c:	9f 92       	push	r9
    216e:	af 92       	push	r10
    2170:	bf 92       	push	r11
    2172:	cf 92       	push	r12
    2174:	df 92       	push	r13
    2176:	ef 92       	push	r14
    2178:	ff 92       	push	r15
    217a:	0f 93       	push	r16
    217c:	1f 93       	push	r17
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	f8 2e       	mov	r15, r24
    2184:	3b 01       	movw	r6, r22
  {
    /* m2008.01 [bj] : reduce code */
    if ( W5100.readSnSR(s) == SnSR::CLOSED )
    {
      close(s);
      return 0;
    2186:	a4 2e       	mov	r10, r20
    2188:	b5 2e       	mov	r11, r21
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	a8 16       	cp	r10, r24
    218e:	88 e0       	ldi	r24, 0x08	; 8
    2190:	b8 06       	cpc	r11, r24
    2192:	20 f0       	brcs	.+8      	; 0x219c <_Z4sendhPKhj+0x36>
    2194:	aa 24       	eor	r10, r10
    2196:	bb 24       	eor	r11, r11
    2198:	68 94       	set
    219a:	b3 f8       	bld	r11, 3
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    219c:	cf 2d       	mov	r28, r15
    219e:	d0 e0       	ldi	r29, 0x00	; 0
    21a0:	24 96       	adiw	r28, 0x04	; 4
    21a2:	9c 2e       	mov	r9, r28
    21a4:	88 24       	eor	r8, r8
    21a6:	84 01       	movw	r16, r8
    21a8:	0d 5f       	subi	r16, 0xFD	; 253
    21aa:	1f 4f       	sbci	r17, 0xFF	; 255
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = W5100.getTXFreeSize(s);
    21ac:	0f 2e       	mov	r0, r31
    21ae:	f9 e7       	ldi	r31, 0x79	; 121
    21b0:	cf 2e       	mov	r12, r31
    21b2:	f5 e0       	ldi	r31, 0x05	; 5
    21b4:	df 2e       	mov	r13, r31
    21b6:	f0 2d       	mov	r31, r0
    21b8:	c6 01       	movw	r24, r12
    21ba:	6f 2d       	mov	r22, r15
    21bc:	0e 94 99 14 	call	0x2932	; 0x2932 <_ZN10W5100Class13getTXFreeSizeEh>
    21c0:	ec 01       	movw	r28, r24
    21c2:	c8 01       	movw	r24, r16
    21c4:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
    status = W5100.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    21c8:	87 31       	cpi	r24, 0x17	; 23
    21ca:	11 f0       	breq	.+4      	; 0x21d0 <_Z4sendhPKhj+0x6a>
    21cc:	8c 31       	cpi	r24, 0x1C	; 28
    21ce:	21 f4       	brne	.+8      	; 0x21d8 <_Z4sendhPKhj+0x72>
    ret = W5100.SSIZE; // check size not to exceed MAX size.
  else 
    ret = len;

  // if freebuf is available, start.
  do 
    21d0:	ca 15       	cp	r28, r10
    21d2:	db 05       	cpc	r29, r11
    21d4:	88 f3       	brcs	.-30     	; 0x21b8 <_Z4sendhPKhj+0x52>
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <_Z4sendhPKhj+0x76>
  {
    freesize = W5100.getTXFreeSize(s);
    status = W5100.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    21d8:	aa 24       	eor	r10, r10
    21da:	bb 24       	eor	r11, r11
    }
  } 
  while (freesize < ret);

  // copy data
  W5100.send_data_processing(s, (uint8_t *)buf, ret);
    21dc:	c9 e7       	ldi	r28, 0x79	; 121
    21de:	d5 e0       	ldi	r29, 0x05	; 5
    21e0:	ce 01       	movw	r24, r28
    21e2:	6f 2d       	mov	r22, r15
    21e4:	a3 01       	movw	r20, r6
    21e6:	95 01       	movw	r18, r10
    21e8:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZN10W5100Class20send_data_processingEhPKhj>
  W5100.execCmdSn(s, Sock_SEND);
    21ec:	ce 01       	movw	r24, r28
    21ee:	6f 2d       	mov	r22, r15
    21f0:	40 e2       	ldi	r20, 0x20	; 32
    21f2:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <_ZN10W5100Class9execCmdSnEh7SockCMD>
    21f6:	e4 01       	movw	r28, r8
    21f8:	22 96       	adiw	r28, 0x02	; 2

  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    21fa:	0b c0       	rjmp	.+22     	; 0x2212 <_Z4sendhPKhj+0xac>
    21fc:	c8 01       	movw	r24, r16
    21fe:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  {
    /* m2008.01 [bj] : reduce code */
    if ( W5100.readSnSR(s) == SnSR::CLOSED )
    2202:	88 23       	and	r24, r24
    2204:	31 f4       	brne	.+12     	; 0x2212 <_Z4sendhPKhj+0xac>
    {
      close(s);
    2206:	8f 2d       	mov	r24, r15
    2208:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_Z5closeh>
      return 0;
    220c:	aa 24       	eor	r10, r10
    220e:	bb 24       	eor	r11, r11
    2210:	0a c0       	rjmp	.+20     	; 0x2226 <_Z4sendhPKhj+0xc0>
    2212:	ce 01       	movw	r24, r28
    2214:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  // copy data
  W5100.send_data_processing(s, (uint8_t *)buf, ret);
  W5100.execCmdSn(s, Sock_SEND);

  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    2218:	84 ff       	sbrs	r24, 4
    221a:	f0 cf       	rjmp	.-32     	; 0x21fc <_Z4sendhPKhj+0x96>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    221c:	8c 2f       	mov	r24, r28
    221e:	9d 2f       	mov	r25, r29
    2220:	60 e1       	ldi	r22, 0x10	; 16
    2222:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    }
  }
  /* +2008.01 bj */
  W5100.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    2226:	8a 2d       	mov	r24, r10
    2228:	9b 2d       	mov	r25, r11
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	1f 91       	pop	r17
    2230:	0f 91       	pop	r16
    2232:	ff 90       	pop	r15
    2234:	ef 90       	pop	r14
    2236:	df 90       	pop	r13
    2238:	cf 90       	pop	r12
    223a:	bf 90       	pop	r11
    223c:	af 90       	pop	r10
    223e:	9f 90       	pop	r9
    2240:	8f 90       	pop	r8
    2242:	7f 90       	pop	r7
    2244:	6f 90       	pop	r6
    2246:	08 95       	ret

00002248 <_Z4recvhPhi>:
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
    2248:	af 92       	push	r10
    224a:	bf 92       	push	r11
    224c:	cf 92       	push	r12
    224e:	df 92       	push	r13
    2250:	ef 92       	push	r14
    2252:	ff 92       	push	r15
    2254:	0f 93       	push	r16
    2256:	1f 93       	push	r17
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	18 2f       	mov	r17, r24
    225e:	6b 01       	movw	r12, r22
    2260:	ea 01       	movw	r28, r20
  // Check how much data is available
  int16_t ret = W5100.getRXReceivedSize(s);
    2262:	89 e7       	ldi	r24, 0x79	; 121
    2264:	95 e0       	ldi	r25, 0x05	; 5
    2266:	61 2f       	mov	r22, r17
    2268:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN10W5100Class17getRXReceivedSizeEh>
    226c:	e8 2e       	mov	r14, r24
    226e:	f9 2e       	mov	r15, r25
  if ( ret == 0 )
    2270:	e1 14       	cp	r14, r1
    2272:	f1 04       	cpc	r15, r1
    2274:	71 f4       	brne	.+28     	; 0x2292 <_Z4recvhPhi+0x4a>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2276:	b1 2e       	mov	r11, r17
    2278:	aa 24       	eor	r10, r10
    227a:	c5 01       	movw	r24, r10
    227c:	8d 5f       	subi	r24, 0xFD	; 253
    227e:	9b 4f       	sbci	r25, 0xFB	; 251
    2280:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  {
    // No data available.
    uint8_t status = W5100.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
    2284:	84 31       	cpi	r24, 0x14	; 20
    2286:	d1 f0       	breq	.+52     	; 0x22bc <_Z4recvhPhi+0x74>
    2288:	88 23       	and	r24, r24
    228a:	c1 f0       	breq	.+48     	; 0x22bc <_Z4recvhPhi+0x74>
    228c:	8c 31       	cpi	r24, 0x1C	; 28
    228e:	b1 f0       	breq	.+44     	; 0x22bc <_Z4recvhPhi+0x74>
    2290:	22 c0       	rjmp	.+68     	; 0x22d6 <_Z4recvhPhi+0x8e>
    2292:	ce 15       	cp	r28, r14
    2294:	df 05       	cpc	r29, r15
    2296:	0c f4       	brge	.+2      	; 0x229a <_Z4recvhPhi+0x52>
    2298:	7e 01       	movw	r14, r28
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
    229a:	1e 14       	cp	r1, r14
    229c:	1f 04       	cpc	r1, r15
    229e:	74 f4       	brge	.+28     	; 0x22bc <_Z4recvhPhi+0x74>
  {
    W5100.recv_data_processing(s, buf, ret);
    22a0:	c9 e7       	ldi	r28, 0x79	; 121
    22a2:	d5 e0       	ldi	r29, 0x05	; 5
    22a4:	ce 01       	movw	r24, r28
    22a6:	61 2f       	mov	r22, r17
    22a8:	a6 01       	movw	r20, r12
    22aa:	97 01       	movw	r18, r14
    22ac:	00 e0       	ldi	r16, 0x00	; 0
    22ae:	0e 94 42 16 	call	0x2c84	; 0x2c84 <_ZN10W5100Class20recv_data_processingEhPhjh>
    W5100.execCmdSn(s, Sock_RECV);
    22b2:	ce 01       	movw	r24, r28
    22b4:	61 2f       	mov	r22, r17
    22b6:	40 e4       	ldi	r20, 0x40	; 64
    22b8:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <_ZN10W5100Class9execCmdSnEh7SockCMD>
  }
  return ret;
}
    22bc:	8e 2d       	mov	r24, r14
    22be:	9f 2d       	mov	r25, r15
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	ff 90       	pop	r15
    22ca:	ef 90       	pop	r14
    22cc:	df 90       	pop	r13
    22ce:	cf 90       	pop	r12
    22d0:	bf 90       	pop	r11
    22d2:	af 90       	pop	r10
    22d4:	08 95       	ret
      ret = 0;
    }
    else
    {
      // The connection is still up, but there's no data waiting to be read
      ret = -1;
    22d6:	ee 24       	eor	r14, r14
    22d8:	ea 94       	dec	r14
    22da:	fe 2c       	mov	r15, r14
    22dc:	ef cf       	rjmp	.-34     	; 0x22bc <_Z4recvhPhi+0x74>

000022de <_Z4peekhPh>:
 * @brief	Returns the first byte in the receive queue (no checking)
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
    22de:	0f 93       	push	r16
    22e0:	28 2f       	mov	r18, r24
    22e2:	ab 01       	movw	r20, r22
  W5100.recv_data_processing(s, buf, 1, 1);
    22e4:	89 e7       	ldi	r24, 0x79	; 121
    22e6:	95 e0       	ldi	r25, 0x05	; 5
    22e8:	62 2f       	mov	r22, r18
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	01 e0       	ldi	r16, 0x01	; 1
    22f0:	0e 94 42 16 	call	0x2c84	; 0x2c84 <_ZN10W5100Class20recv_data_processingEhPhjh>

  return 1;
}
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	0f 91       	pop	r16
    22fa:	08 95       	ret

000022fc <_Z6sendtohPKhjPhj>:
 * 		Unlike TCP transmission, The peer's destination address and the port is needed.
 * 		
 * @return	This function return send data size for success else -1.
 */
uint16_t sendto(SOCKET s, const uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t port)
{
    22fc:	af 92       	push	r10
    22fe:	bf 92       	push	r11
    2300:	cf 92       	push	r12
    2302:	df 92       	push	r13
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	f8 2e       	mov	r15, r24
    2310:	5b 01       	movw	r10, r22
    2312:	f9 01       	movw	r30, r18
    2314:	68 01       	movw	r12, r16
  uint16_t ret=0;

  if (len > W5100.SSIZE) ret = W5100.SSIZE; // check size not to exceed MAX size.
  else ret = len;

  if
    2316:	80 81       	ld	r24, Z
    2318:	88 23       	and	r24, r24
    231a:	51 f4       	brne	.+20     	; 0x2330 <_Z6sendtohPKhjPhj+0x34>
    231c:	81 81       	ldd	r24, Z+1	; 0x01
    231e:	88 23       	and	r24, r24
    2320:	39 f4       	brne	.+14     	; 0x2330 <_Z6sendtohPKhjPhj+0x34>
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	88 23       	and	r24, r24
    2326:	21 f4       	brne	.+8      	; 0x2330 <_Z6sendtohPKhjPhj+0x34>
    2328:	83 81       	ldd	r24, Z+3	; 0x03
    232a:	88 23       	and	r24, r24
    232c:	09 f4       	brne	.+2      	; 0x2330 <_Z6sendtohPKhjPhj+0x34>
    232e:	53 c0       	rjmp	.+166    	; 0x23d6 <_Z6sendtohPKhjPhj+0xda>
    2330:	c1 14       	cp	r12, r1
    2332:	d1 04       	cpc	r13, r1
    2334:	09 f4       	brne	.+2      	; 0x2338 <_Z6sendtohPKhjPhj+0x3c>
    2336:	52 c0       	rjmp	.+164    	; 0x23dc <_Z6sendtohPKhjPhj+0xe0>
    2338:	04 2f       	mov	r16, r20
    233a:	15 2f       	mov	r17, r21
    233c:	88 e0       	ldi	r24, 0x08	; 8
    233e:	01 30       	cpi	r16, 0x01	; 1
    2340:	18 07       	cpc	r17, r24
    2342:	10 f0       	brcs	.+4      	; 0x2348 <_Z6sendtohPKhjPhj+0x4c>
    2344:	00 e0       	ldi	r16, 0x00	; 0
    2346:	18 e0       	ldi	r17, 0x08	; 8
    2348:	01 15       	cp	r16, r1
    234a:	11 05       	cpc	r17, r1
    234c:	09 f4       	brne	.+2      	; 0x2350 <_Z6sendtohPKhjPhj+0x54>
    234e:	48 c0       	rjmp	.+144    	; 0x23e0 <_Z6sendtohPKhjPhj+0xe4>
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    2350:	cf 2d       	mov	r28, r15
    2352:	d0 e0       	ldi	r29, 0x00	; 0
    2354:	24 96       	adiw	r28, 0x04	; 4
    2356:	dc 2f       	mov	r29, r28
    2358:	cc 27       	eor	r28, r28
    235a:	ce 01       	movw	r24, r28
    235c:	0c 96       	adiw	r24, 0x0c	; 12
    235e:	bf 01       	movw	r22, r30
    2360:	44 e0       	ldi	r20, 0x04	; 4
    2362:	50 e0       	ldi	r21, 0x00	; 0
    2364:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2368:	ce 01       	movw	r24, r28
    236a:	40 96       	adiw	r24, 0x10	; 16
    236c:	6d 2d       	mov	r22, r13
    236e:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    2372:	ce 01       	movw	r24, r28
    2374:	41 96       	adiw	r24, 0x11	; 17
    2376:	6c 2d       	mov	r22, r12
    2378:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
  {
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);

    // copy data
    W5100.send_data_processing(s, (uint8_t *)buf, ret);
    237c:	0f 2e       	mov	r0, r31
    237e:	f9 e7       	ldi	r31, 0x79	; 121
    2380:	cf 2e       	mov	r12, r31
    2382:	f5 e0       	ldi	r31, 0x05	; 5
    2384:	df 2e       	mov	r13, r31
    2386:	f0 2d       	mov	r31, r0
    2388:	c6 01       	movw	r24, r12
    238a:	6f 2d       	mov	r22, r15
    238c:	a5 01       	movw	r20, r10
    238e:	98 01       	movw	r18, r16
    2390:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZN10W5100Class20send_data_processingEhPKhj>
    W5100.execCmdSn(s, Sock_SEND);
    2394:	c6 01       	movw	r24, r12
    2396:	6f 2d       	mov	r22, r15
    2398:	40 e2       	ldi	r20, 0x20	; 32
    239a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <_ZN10W5100Class9execCmdSnEh7SockCMD>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    239e:	22 96       	adiw	r28, 0x02	; 2

    /* +2008.01 bj */
    while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    23a0:	0d c0       	rjmp	.+26     	; 0x23bc <_Z6sendtohPKhjPhj+0xc0>
    23a2:	ce 01       	movw	r24, r28
    23a4:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
    {
      if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    23a8:	83 ff       	sbrs	r24, 3
    23aa:	08 c0       	rjmp	.+16     	; 0x23bc <_Z6sendtohPKhjPhj+0xc0>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    23ac:	8f 2d       	mov	r24, r15
    23ae:	9c 2d       	mov	r25, r12
    23b0:	68 e1       	ldi	r22, 0x18	; 24
    23b2:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
      {
        /* +2008.01 [bj]: clear interrupt */
        W5100.writeSnIR(s, (SnIR::SEND_OK | SnIR::TIMEOUT)); /* clear SEND_OK & TIMEOUT */
        return 0;
    23b6:	00 e0       	ldi	r16, 0x00	; 0
    23b8:	10 e0       	ldi	r17, 0x00	; 0
    23ba:	12 c0       	rjmp	.+36     	; 0x23e0 <_Z6sendtohPKhjPhj+0xe4>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    23bc:	fc 2e       	mov	r15, r28
    23be:	cd 2e       	mov	r12, r29
    23c0:	ce 01       	movw	r24, r28
    23c2:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
    // copy data
    W5100.send_data_processing(s, (uint8_t *)buf, ret);
    W5100.execCmdSn(s, Sock_SEND);

    /* +2008.01 bj */
    while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    23c6:	84 ff       	sbrs	r24, 4
    23c8:	ec cf       	rjmp	.-40     	; 0x23a2 <_Z6sendtohPKhjPhj+0xa6>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    23ca:	8c 2f       	mov	r24, r28
    23cc:	9d 2f       	mov	r25, r29
    23ce:	60 e1       	ldi	r22, 0x10	; 16
    23d0:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    23d4:	05 c0       	rjmp	.+10     	; 0x23e0 <_Z6sendtohPKhjPhj+0xe4>
  ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    ((port == 0x00)) ||(ret == 0)
    ) 
  {
    /* +2008.01 [bj] : added return value */
    ret = 0;
    23d6:	00 e0       	ldi	r16, 0x00	; 0
    23d8:	10 e0       	ldi	r17, 0x00	; 0
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <_Z6sendtohPKhjPhj+0xe4>
    23dc:	00 e0       	ldi	r16, 0x00	; 0
    23de:	10 e0       	ldi	r17, 0x00	; 0

    /* +2008.01 bj */
    W5100.writeSnIR(s, SnIR::SEND_OK);
  }
  return ret;
}
    23e0:	80 2f       	mov	r24, r16
    23e2:	91 2f       	mov	r25, r17
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	ff 90       	pop	r15
    23ee:	df 90       	pop	r13
    23f0:	cf 90       	pop	r12
    23f2:	bf 90       	pop	r11
    23f4:	af 90       	pop	r10
    23f6:	08 95       	ret

000023f8 <_Z8recvfromhPhjS_Pj>:
 * 	TCP mode. This function is used to receive UDP, IP_RAW and MAC_RAW mode, and handle the header as well. 
 * 	
 * @return	This function return received data size for success else -1.
 */
uint16_t recvfrom(SOCKET s, uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t *port)
{
    23f8:	2f 92       	push	r2
    23fa:	3f 92       	push	r3
    23fc:	4f 92       	push	r4
    23fe:	5f 92       	push	r5
    2400:	6f 92       	push	r6
    2402:	7f 92       	push	r7
    2404:	8f 92       	push	r8
    2406:	9f 92       	push	r9
    2408:	af 92       	push	r10
    240a:	bf 92       	push	r11
    240c:	df 92       	push	r13
    240e:	ef 92       	push	r14
    2410:	ff 92       	push	r15
    2412:	0f 93       	push	r16
    2414:	1f 93       	push	r17
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	2a 97       	sbiw	r28, 0x0a	; 10
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	d8 2e       	mov	r13, r24
    242c:	3b 01       	movw	r6, r22
    242e:	59 01       	movw	r10, r18
    2430:	48 01       	movw	r8, r16
  uint8_t head[8];
  uint16_t data_len=0;
  uint16_t ptr=0;

  if ( len > 0 )
    2432:	41 15       	cp	r20, r1
    2434:	51 05       	cpc	r21, r1
    2436:	09 f4       	brne	.+2      	; 0x243a <_Z8recvfromhPhjS_Pj+0x42>
    2438:	e2 c0       	rjmp	.+452    	; 0x25fe <_Z8recvfromhPhjS_Pj+0x206>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    243a:	08 2f       	mov	r16, r24
    243c:	10 e0       	ldi	r17, 0x00	; 0
    243e:	0c 5f       	subi	r16, 0xFC	; 252
    2440:	1f 4f       	sbci	r17, 0xFF	; 255
    2442:	10 2f       	mov	r17, r16
    2444:	00 27       	eor	r16, r16
    2446:	0f 2e       	mov	r0, r31
    2448:	f8 e2       	ldi	r31, 0x28	; 40
    244a:	4f 2e       	mov	r4, r31
    244c:	55 24       	eor	r5, r5
    244e:	f0 2d       	mov	r31, r0
    2450:	40 0e       	add	r4, r16
    2452:	51 1e       	adc	r5, r17
    2454:	c2 01       	movw	r24, r4
    2456:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
    245a:	e8 2e       	mov	r14, r24
    245c:	0f 2e       	mov	r0, r31
    245e:	f9 e2       	ldi	r31, 0x29	; 41
    2460:	2f 2e       	mov	r2, r31
    2462:	33 24       	eor	r3, r3
    2464:	f0 2d       	mov	r31, r0
    2466:	20 0e       	add	r2, r16
    2468:	31 1e       	adc	r3, r17
    246a:	c1 01       	movw	r24, r2
    246c:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	9e 2d       	mov	r25, r14
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	79 01       	movw	r14, r18
    247a:	e8 2a       	or	r14, r24
    247c:	f9 2a       	or	r15, r25
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    247e:	c8 01       	movw	r24, r16
    2480:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  {
    ptr = W5100.readSnRX_RD(s);
    switch (W5100.readSnMR(s) & 0x07)
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	87 70       	andi	r24, 0x07	; 7
    2488:	90 70       	andi	r25, 0x00	; 0
    248a:	83 30       	cpi	r24, 0x03	; 3
    248c:	91 05       	cpc	r25, r1
    248e:	09 f4       	brne	.+2      	; 0x2492 <_Z8recvfromhPhjS_Pj+0x9a>
    2490:	44 c0       	rjmp	.+136    	; 0x251a <_Z8recvfromhPhjS_Pj+0x122>
    2492:	84 30       	cpi	r24, 0x04	; 4
    2494:	91 05       	cpc	r25, r1
    2496:	09 f4       	brne	.+2      	; 0x249a <_Z8recvfromhPhjS_Pj+0xa2>
    2498:	78 c0       	rjmp	.+240    	; 0x258a <_Z8recvfromhPhjS_Pj+0x192>
    249a:	82 30       	cpi	r24, 0x02	; 2
    249c:	91 05       	cpc	r25, r1
    249e:	09 f0       	breq	.+2      	; 0x24a2 <_Z8recvfromhPhjS_Pj+0xaa>
    24a0:	a5 c0       	rjmp	.+330    	; 0x25ec <_Z8recvfromhPhjS_Pj+0x1f4>
    {
    case SnMR::UDP :
      W5100.read_data(s, (uint8_t *)ptr, head, 0x08);
    24a2:	89 e7       	ldi	r24, 0x79	; 121
    24a4:	95 e0       	ldi	r25, 0x05	; 5
    24a6:	6d 2d       	mov	r22, r13
    24a8:	a7 01       	movw	r20, r14
    24aa:	9e 01       	movw	r18, r28
    24ac:	2f 5f       	subi	r18, 0xFF	; 255
    24ae:	3f 4f       	sbci	r19, 0xFF	; 255
    24b0:	08 e0       	ldi	r16, 0x08	; 8
    24b2:	10 e0       	ldi	r17, 0x00	; 0
    24b4:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += 8;
    24b8:	c7 01       	movw	r24, r14
    24ba:	08 96       	adiw	r24, 0x08	; 8
    24bc:	9a 87       	std	Y+10, r25	; 0x0a
    24be:	89 87       	std	Y+9, r24	; 0x09
      // read peer's IP address, port number.
      addr[0] = head[0];
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	f5 01       	movw	r30, r10
    24c4:	80 83       	st	Z, r24
      addr[1] = head[1];
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	81 83       	std	Z+1, r24	; 0x01
      addr[2] = head[2];
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	82 83       	std	Z+2, r24	; 0x02
      addr[3] = head[3];
    24ce:	8c 81       	ldd	r24, Y+4	; 0x04
    24d0:	83 83       	std	Z+3, r24	; 0x03
      *port = head[4];
      *port = (*port << 8) + head[5];
    24d2:	9d 81       	ldd	r25, Y+5	; 0x05
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	2e 81       	ldd	r18, Y+6	; 0x06
    24d8:	82 0f       	add	r24, r18
    24da:	91 1d       	adc	r25, r1
    24dc:	f4 01       	movw	r30, r8
    24de:	91 83       	std	Z+1, r25	; 0x01
    24e0:	80 83       	st	Z, r24
      data_len = head[6];
      data_len = (data_len << 8) + head[7];
    24e2:	9f 81       	ldd	r25, Y+7	; 0x07
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	28 85       	ldd	r18, Y+8	; 0x08
    24e8:	7c 01       	movw	r14, r24
    24ea:	e2 0e       	add	r14, r18
    24ec:	f1 1c       	adc	r15, r1

      W5100.read_data(s, (uint8_t *)ptr, buf, data_len); // data copy.
    24ee:	89 e7       	ldi	r24, 0x79	; 121
    24f0:	95 e0       	ldi	r25, 0x05	; 5
    24f2:	6d 2d       	mov	r22, r13
    24f4:	49 85       	ldd	r20, Y+9	; 0x09
    24f6:	5a 85       	ldd	r21, Y+10	; 0x0a
    24f8:	93 01       	movw	r18, r6
    24fa:	87 01       	movw	r16, r14
    24fc:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += data_len;
    2500:	09 85       	ldd	r16, Y+9	; 0x09
    2502:	1a 85       	ldd	r17, Y+10	; 0x0a
    2504:	0e 0d       	add	r16, r14
    2506:	1f 1d       	adc	r17, r15
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2508:	c2 01       	movw	r24, r4
    250a:	61 2f       	mov	r22, r17
    250c:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    2510:	c1 01       	movw	r24, r2
    2512:	60 2f       	mov	r22, r16
    2514:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    2518:	6b c0       	rjmp	.+214    	; 0x25f0 <_Z8recvfromhPhjS_Pj+0x1f8>

      W5100.writeSnRX_RD(s, ptr);
      break;

    case SnMR::IPRAW :
      W5100.read_data(s, (uint8_t *)ptr, head, 0x06);
    251a:	0f 2e       	mov	r0, r31
    251c:	f9 e7       	ldi	r31, 0x79	; 121
    251e:	8f 2e       	mov	r8, r31
    2520:	f5 e0       	ldi	r31, 0x05	; 5
    2522:	9f 2e       	mov	r9, r31
    2524:	f0 2d       	mov	r31, r0
    2526:	c4 01       	movw	r24, r8
    2528:	6d 2d       	mov	r22, r13
    252a:	a7 01       	movw	r20, r14
    252c:	9e 01       	movw	r18, r28
    252e:	2f 5f       	subi	r18, 0xFF	; 255
    2530:	3f 4f       	sbci	r19, 0xFF	; 255
    2532:	06 e0       	ldi	r16, 0x06	; 6
    2534:	10 e0       	ldi	r17, 0x00	; 0
    2536:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += 6;
    253a:	c7 01       	movw	r24, r14
    253c:	06 96       	adiw	r24, 0x06	; 6
    253e:	9a 87       	std	Y+10, r25	; 0x0a
    2540:	89 87       	std	Y+9, r24	; 0x09

      addr[0] = head[0];
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	f5 01       	movw	r30, r10
    2546:	80 83       	st	Z, r24
      addr[1] = head[1];
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	81 83       	std	Z+1, r24	; 0x01
      addr[2] = head[2];
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	82 83       	std	Z+2, r24	; 0x02
      addr[3] = head[3];
    2550:	8c 81       	ldd	r24, Y+4	; 0x04
    2552:	83 83       	std	Z+3, r24	; 0x03
      data_len = head[4];
      data_len = (data_len << 8) + head[5];
    2554:	9d 81       	ldd	r25, Y+5	; 0x05
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	2e 81       	ldd	r18, Y+6	; 0x06
    255a:	7c 01       	movw	r14, r24
    255c:	e2 0e       	add	r14, r18
    255e:	f1 1c       	adc	r15, r1

      W5100.read_data(s, (uint8_t *)ptr, buf, data_len); // data copy.
    2560:	c4 01       	movw	r24, r8
    2562:	6d 2d       	mov	r22, r13
    2564:	49 85       	ldd	r20, Y+9	; 0x09
    2566:	5a 85       	ldd	r21, Y+10	; 0x0a
    2568:	93 01       	movw	r18, r6
    256a:	87 01       	movw	r16, r14
    256c:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += data_len;
    2570:	09 85       	ldd	r16, Y+9	; 0x09
    2572:	1a 85       	ldd	r17, Y+10	; 0x0a
    2574:	0e 0d       	add	r16, r14
    2576:	1f 1d       	adc	r17, r15
    2578:	c2 01       	movw	r24, r4
    257a:	61 2f       	mov	r22, r17
    257c:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    2580:	c1 01       	movw	r24, r2
    2582:	60 2f       	mov	r22, r16
    2584:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    2588:	33 c0       	rjmp	.+102    	; 0x25f0 <_Z8recvfromhPhjS_Pj+0x1f8>

      W5100.writeSnRX_RD(s, ptr);
      break;

    case SnMR::MACRAW:
      W5100.read_data(s,(uint8_t*)ptr,head,2);
    258a:	0f 2e       	mov	r0, r31
    258c:	f9 e7       	ldi	r31, 0x79	; 121
    258e:	8f 2e       	mov	r8, r31
    2590:	f5 e0       	ldi	r31, 0x05	; 5
    2592:	9f 2e       	mov	r9, r31
    2594:	f0 2d       	mov	r31, r0
    2596:	c4 01       	movw	r24, r8
    2598:	6d 2d       	mov	r22, r13
    259a:	a7 01       	movw	r20, r14
    259c:	9e 01       	movw	r18, r28
    259e:	2f 5f       	subi	r18, 0xFF	; 255
    25a0:	3f 4f       	sbci	r19, 0xFF	; 255
    25a2:	02 e0       	ldi	r16, 0x02	; 2
    25a4:	10 e0       	ldi	r17, 0x00	; 0
    25a6:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr+=2;
    25aa:	aa 24       	eor	r10, r10
    25ac:	bb 24       	eor	r11, r11
    25ae:	68 94       	set
    25b0:	a1 f8       	bld	r10, 1
    25b2:	ae 0c       	add	r10, r14
    25b4:	bf 1c       	adc	r11, r15
      data_len = head[0];
      data_len = (data_len<<8) + head[1] - 2;
    25b6:	39 81       	ldd	r19, Y+1	; 0x01
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	02 97       	sbiw	r24, 0x02	; 2
    25c0:	7c 01       	movw	r14, r24
    25c2:	e2 0e       	add	r14, r18
    25c4:	f3 1e       	adc	r15, r19

      W5100.read_data(s,(uint8_t*) ptr,buf,data_len);
    25c6:	c4 01       	movw	r24, r8
    25c8:	6d 2d       	mov	r22, r13
    25ca:	a5 01       	movw	r20, r10
    25cc:	93 01       	movw	r18, r6
    25ce:	87 01       	movw	r16, r14
    25d0:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN10W5100Class9read_dataEhPVhS1_j>
      ptr += data_len;
    25d4:	85 01       	movw	r16, r10
    25d6:	0e 0d       	add	r16, r14
    25d8:	1f 1d       	adc	r17, r15
    25da:	c2 01       	movw	r24, r4
    25dc:	61 2f       	mov	r22, r17
    25de:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    25e2:	c1 01       	movw	r24, r2
    25e4:	60 2f       	mov	r22, r16
    25e6:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <_Z8recvfromhPhjS_Pj+0x1f8>
 * @return	This function return received data size for success else -1.
 */
uint16_t recvfrom(SOCKET s, uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t *port)
{
  uint8_t head[8];
  uint16_t data_len=0;
    25ec:	ee 24       	eor	r14, r14
    25ee:	ff 24       	eor	r15, r15
      break;

    default :
      break;
    }
    W5100.execCmdSn(s, Sock_RECV);
    25f0:	89 e7       	ldi	r24, 0x79	; 121
    25f2:	95 e0       	ldi	r25, 0x05	; 5
    25f4:	6d 2d       	mov	r22, r13
    25f6:	40 e4       	ldi	r20, 0x40	; 64
    25f8:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <_ZN10W5100Class9execCmdSnEh7SockCMD>
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <_Z8recvfromhPhjS_Pj+0x20a>
 * @return	This function return received data size for success else -1.
 */
uint16_t recvfrom(SOCKET s, uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t *port)
{
  uint8_t head[8];
  uint16_t data_len=0;
    25fe:	ee 24       	eor	r14, r14
    2600:	ff 24       	eor	r15, r15
      break;
    }
    W5100.execCmdSn(s, Sock_RECV);
  }
  return data_len;
}
    2602:	8e 2d       	mov	r24, r14
    2604:	9f 2d       	mov	r25, r15
    2606:	2a 96       	adiw	r28, 0x0a	; 10
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	de bf       	out	0x3e, r29	; 62
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	1f 91       	pop	r17
    2618:	0f 91       	pop	r16
    261a:	ff 90       	pop	r15
    261c:	ef 90       	pop	r14
    261e:	df 90       	pop	r13
    2620:	bf 90       	pop	r11
    2622:	af 90       	pop	r10
    2624:	9f 90       	pop	r9
    2626:	8f 90       	pop	r8
    2628:	7f 90       	pop	r7
    262a:	6f 90       	pop	r6
    262c:	5f 90       	pop	r5
    262e:	4f 90       	pop	r4
    2630:	3f 90       	pop	r3
    2632:	2f 90       	pop	r2
    2634:	08 95       	ret

00002636 <_Z8igmpsendhPKhj>:


uint16_t igmpsend(SOCKET s, const uint8_t * buf, uint16_t len)
{
    2636:	df 92       	push	r13
    2638:	ef 92       	push	r14
    263a:	ff 92       	push	r15
    263c:	0f 93       	push	r16
    263e:	1f 93       	push	r17
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	d8 2e       	mov	r13, r24
    2646:	9b 01       	movw	r18, r22
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    {
      /* in case of igmp, if send fails, then socket closed */
      /* if you want change, remove this code. */
      close(s);
      return 0;
    2648:	04 2f       	mov	r16, r20
    264a:	15 2f       	mov	r17, r21
    264c:	88 e0       	ldi	r24, 0x08	; 8
    264e:	01 30       	cpi	r16, 0x01	; 1
    2650:	18 07       	cpc	r17, r24
    2652:	10 f0       	brcs	.+4      	; 0x2658 <_Z8igmpsendhPKhj+0x22>
    2654:	00 e0       	ldi	r16, 0x00	; 0
    2656:	18 e0       	ldi	r17, 0x08	; 8
  if (len > W5100.SSIZE) 
    ret = W5100.SSIZE; // check size not to exceed MAX size.
  else 
    ret = len;

  if (ret == 0)
    2658:	01 15       	cp	r16, r1
    265a:	11 05       	cpc	r17, r1
    265c:	99 f1       	breq	.+102    	; 0x26c4 <_Z8igmpsendhPKhj+0x8e>
    return 0;

  W5100.send_data_processing(s, (uint8_t *)buf, ret);
    265e:	c9 e7       	ldi	r28, 0x79	; 121
    2660:	d5 e0       	ldi	r29, 0x05	; 5
    2662:	ce 01       	movw	r24, r28
    2664:	6d 2d       	mov	r22, r13
    2666:	a9 01       	movw	r20, r18
    2668:	98 01       	movw	r18, r16
    266a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZN10W5100Class20send_data_processingEhPKhj>
  W5100.execCmdSn(s, Sock_SEND);
    266e:	ce 01       	movw	r24, r28
    2670:	6d 2d       	mov	r22, r13
    2672:	40 e2       	ldi	r20, 0x20	; 32
    2674:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <_ZN10W5100Class9execCmdSnEh7SockCMD>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2678:	8d 2d       	mov	r24, r13
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	04 96       	adiw	r24, 0x04	; 4
    267e:	98 2f       	mov	r25, r24
    2680:	88 27       	eor	r24, r24
    2682:	ec 01       	movw	r28, r24
    2684:	22 96       	adiw	r28, 0x02	; 2
    2686:	0f 2e       	mov	r0, r31
    2688:	f3 e0       	ldi	r31, 0x03	; 3
    268a:	ef 2e       	mov	r14, r31
    268c:	ff 24       	eor	r15, r15
    268e:	f0 2d       	mov	r31, r0
    2690:	e8 0e       	add	r14, r24
    2692:	f9 1e       	adc	r15, r25

  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    2694:	0e c0       	rjmp	.+28     	; 0x26b2 <_Z8igmpsendhPKhj+0x7c>
    2696:	c7 01       	movw	r24, r14
    2698:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
    269c:	ce 01       	movw	r24, r28
    269e:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  {
    status = W5100.readSnSR(s);
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    26a2:	83 ff       	sbrs	r24, 3
    26a4:	06 c0       	rjmp	.+12     	; 0x26b2 <_Z8igmpsendhPKhj+0x7c>
    {
      /* in case of igmp, if send fails, then socket closed */
      /* if you want change, remove this code. */
      close(s);
    26a6:	8d 2d       	mov	r24, r13
    26a8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_Z5closeh>
      return 0;
    26ac:	00 e0       	ldi	r16, 0x00	; 0
    26ae:	10 e0       	ldi	r17, 0x00	; 0
    26b0:	09 c0       	rjmp	.+18     	; 0x26c4 <_Z8igmpsendhPKhj+0x8e>
    26b2:	ce 01       	movw	r24, r28
    26b4:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
    return 0;

  W5100.send_data_processing(s, (uint8_t *)buf, ret);
  W5100.execCmdSn(s, Sock_SEND);

  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    26b8:	84 ff       	sbrs	r24, 4
    26ba:	ed cf       	rjmp	.-38     	; 0x2696 <_Z8igmpsendhPKhj+0x60>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    26bc:	ce 01       	movw	r24, r28
    26be:	60 e1       	ldi	r22, 0x10	; 16
    26c0:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    }
  }

  W5100.writeSnIR(s, SnIR::SEND_OK);
  return ret;
}
    26c4:	80 2f       	mov	r24, r16
    26c6:	91 2f       	mov	r25, r17
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	ff 90       	pop	r15
    26d2:	ef 90       	pop	r14
    26d4:	df 90       	pop	r13
    26d6:	08 95       	ret

000026d8 <_Z10bufferDatahjPKhj>:

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
    26d8:	af 92       	push	r10
    26da:	bf 92       	push	r11
    26dc:	cf 92       	push	r12
    26de:	df 92       	push	r13
    26e0:	ff 92       	push	r15
    26e2:	0f 93       	push	r16
    26e4:	1f 93       	push	r17
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	c8 2f       	mov	r28, r24
    26ec:	6b 01       	movw	r12, r22
    26ee:	5a 01       	movw	r10, r20
    26f0:	89 01       	movw	r16, r18
  uint16_t ret =0;
  if (len > W5100.getTXFreeSize(s))
    26f2:	89 e7       	ldi	r24, 0x79	; 121
    26f4:	95 e0       	ldi	r25, 0x05	; 5
    26f6:	6c 2f       	mov	r22, r28
    26f8:	0e 94 99 14 	call	0x2932	; 0x2932 <_ZN10W5100Class13getTXFreeSizeEh>
    26fc:	80 17       	cp	r24, r16
    26fe:	91 07       	cpc	r25, r17
    2700:	40 f4       	brcc	.+16     	; 0x2712 <_Z10bufferDatahjPKhj+0x3a>
  {
    ret = W5100.getTXFreeSize(s); // check size not to exceed MAX size.
    2702:	89 e7       	ldi	r24, 0x79	; 121
    2704:	95 e0       	ldi	r25, 0x05	; 5
    2706:	6c 2f       	mov	r22, r28
    2708:	0e 94 99 14 	call	0x2932	; 0x2932 <_ZN10W5100Class13getTXFreeSizeEh>
    270c:	f8 2e       	mov	r15, r24
    270e:	d9 2f       	mov	r29, r25
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <_Z10bufferDatahjPKhj+0x3e>
  }
  else
  {
    ret = len;
    2712:	f0 2e       	mov	r15, r16
    2714:	d1 2f       	mov	r29, r17
  }
  W5100.send_data_processing_offset(s, offset, buf, ret);
    2716:	89 e7       	ldi	r24, 0x79	; 121
    2718:	95 e0       	ldi	r25, 0x05	; 5
    271a:	6c 2f       	mov	r22, r28
    271c:	a6 01       	movw	r20, r12
    271e:	95 01       	movw	r18, r10
    2720:	0f 2d       	mov	r16, r15
    2722:	1d 2f       	mov	r17, r29
    2724:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
  return ret;
}
    2728:	8f 2d       	mov	r24, r15
    272a:	9d 2f       	mov	r25, r29
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	1f 91       	pop	r17
    2732:	0f 91       	pop	r16
    2734:	ff 90       	pop	r15
    2736:	df 90       	pop	r13
    2738:	cf 90       	pop	r12
    273a:	bf 90       	pop	r11
    273c:	af 90       	pop	r10
    273e:	08 95       	ret

00002740 <_Z8startUDPhPhj>:

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
    2740:	0f 93       	push	r16
    2742:	1f 93       	push	r17
    2744:	cf 93       	push	r28
    2746:	df 93       	push	r29
    2748:	fb 01       	movw	r30, r22
    274a:	8a 01       	movw	r16, r20
  if
    274c:	90 81       	ld	r25, Z
    274e:	99 23       	and	r25, r25
    2750:	49 f4       	brne	.+18     	; 0x2764 <_Z8startUDPhPhj+0x24>
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	99 23       	and	r25, r25
    2756:	31 f4       	brne	.+12     	; 0x2764 <_Z8startUDPhPhj+0x24>
    2758:	92 81       	ldd	r25, Z+2	; 0x02
    275a:	99 23       	and	r25, r25
    275c:	19 f4       	brne	.+6      	; 0x2764 <_Z8startUDPhPhj+0x24>
    275e:	93 81       	ldd	r25, Z+3	; 0x03
    2760:	99 23       	and	r25, r25
    2762:	e1 f0       	breq	.+56     	; 0x279c <_Z8startUDPhPhj+0x5c>
    2764:	01 15       	cp	r16, r1
    2766:	11 05       	cpc	r17, r1
    2768:	e1 f0       	breq	.+56     	; 0x27a2 <_Z8startUDPhPhj+0x62>
uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return read(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
}

uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _buf, _len);
    276a:	c8 2f       	mov	r28, r24
    276c:	d0 e0       	ldi	r29, 0x00	; 0
    276e:	24 96       	adiw	r28, 0x04	; 4
    2770:	dc 2f       	mov	r29, r28
    2772:	cc 27       	eor	r28, r28
    2774:	ce 01       	movw	r24, r28
    2776:	0c 96       	adiw	r24, 0x0c	; 12
    2778:	bf 01       	movw	r22, r30
    277a:	44 e0       	ldi	r20, 0x04	; 4
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2782:	ce 01       	movw	r24, r28
    2784:	40 96       	adiw	r24, 0x10	; 16
    2786:	61 2f       	mov	r22, r17
    2788:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    278c:	ce 01       	movw	r24, r28
    278e:	41 96       	adiw	r24, 0x11	; 17
    2790:	60 2f       	mov	r22, r16
    2792:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
  }
  else
  {
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);
    return 1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	05 c0       	rjmp	.+10     	; 0x27a6 <_Z8startUDPhPhj+0x66>
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <_Z8startUDPhPhj+0x66>
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	90 e0       	ldi	r25, 0x00	; 0
  {
    W5100.writeSnDIPR(s, addr);
    W5100.writeSnDPORT(s, port);
    return 1;
  }
}
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	1f 91       	pop	r17
    27ac:	0f 91       	pop	r16
    27ae:	08 95       	ret

000027b0 <_Z7sendUDPh>:

int sendUDP(SOCKET s)
{
    27b0:	1f 93       	push	r17
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	18 2f       	mov	r17, r24
  W5100.execCmdSn(s, Sock_SEND);
    27b8:	89 e7       	ldi	r24, 0x79	; 121
    27ba:	95 e0       	ldi	r25, 0x05	; 5
    27bc:	61 2f       	mov	r22, r17
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <_ZN10W5100Class9execCmdSnEh7SockCMD>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    27c4:	d1 2f       	mov	r29, r17
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	c8 2f       	mov	r28, r24
    27ca:	ce 5f       	subi	r28, 0xFE	; 254
    27cc:	db 4f       	sbci	r29, 0xFB	; 251
		
  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    27ce:	0c c0       	rjmp	.+24     	; 0x27e8 <_Z7sendUDPh+0x38>
    27d0:	ce 01       	movw	r24, r28
    27d2:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  {
    if (W5100.readSnIR(s) & SnIR::TIMEOUT)
    27d6:	83 ff       	sbrs	r24, 3
    27d8:	07 c0       	rjmp	.+14     	; 0x27e8 <_Z7sendUDPh+0x38>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    27da:	ce 01       	movw	r24, r28
    27dc:	68 e1       	ldi	r22, 0x18	; 24
    27de:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    {
      /* +2008.01 [bj]: clear interrupt */
      W5100.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	0b c0       	rjmp	.+22     	; 0x27fe <_Z7sendUDPh+0x4e>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    27e8:	ce 01       	movw	r24, r28
    27ea:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
int sendUDP(SOCKET s)
{
  W5100.execCmdSn(s, Sock_SEND);
		
  /* +2008.01 bj */
  while ( (W5100.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    27ee:	84 ff       	sbrs	r24, 4
    27f0:	ef cf       	rjmp	.-34     	; 0x27d0 <_Z7sendUDPh+0x20>
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    27f2:	ce 01       	movw	r24, r28
    27f4:	60 e1       	ldi	r22, 0x10	; 16
    27f6:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>

  /* +2008.01 bj */	
  W5100.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
}
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	1f 91       	pop	r17
    2804:	08 95       	ret

00002806 <_ZN10W5100Class5writeEjh>:
  inline static void initSS()    { DDRB  |=  _BV(0); };
  inline static void setSS()     { PORTB &= ~_BV(0); };
  inline static void resetSS()   { PORTB |=  _BV(0); }; 
#else
  inline static void initSS()    { DDRB  |=  _BV(2); };
  inline static void setSS()     { PORTB &= ~_BV(2); };
    2806:	2a 98       	cbi	0x05, 2	; 5
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2808:	20 ef       	ldi	r18, 0xF0	; 240
    280a:	2e bd       	out	0x2e, r18	; 46
  while (!(SPSR & _BV(SPIF)))
    280c:	0d b4       	in	r0, 0x2d	; 45
    280e:	07 fe       	sbrs	r0, 7
    2810:	fd cf       	rjmp	.-6      	; 0x280c <_ZN10W5100Class5writeEjh+0x6>
    ;
  return SPDR;
    2812:	2e b5       	in	r18, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2814:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    2816:	0d b4       	in	r0, 0x2d	; 45
    2818:	07 fe       	sbrs	r0, 7
    281a:	fd cf       	rjmp	.-6      	; 0x2816 <_ZN10W5100Class5writeEjh+0x10>
    ;
  return SPDR;
    281c:	9e b5       	in	r25, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    281e:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    2820:	0d b4       	in	r0, 0x2d	; 45
    2822:	07 fe       	sbrs	r0, 7
    2824:	fd cf       	rjmp	.-6      	; 0x2820 <_ZN10W5100Class5writeEjh+0x1a>
    ;
  return SPDR;
    2826:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2828:	6e bd       	out	0x2e, r22	; 46
  while (!(SPSR & _BV(SPIF)))
    282a:	0d b4       	in	r0, 0x2d	; 45
    282c:	07 fe       	sbrs	r0, 7
    282e:	fd cf       	rjmp	.-6      	; 0x282a <_ZN10W5100Class5writeEjh+0x24>
    ;
  return SPDR;
    2830:	8e b5       	in	r24, 0x2e	; 46
  inline static void resetSS()   { PORTB |=  _BV(2); };
    2832:	2a 9a       	sbi	0x05, 2	; 5
  SPI.transfer(_addr >> 8);
  SPI.transfer(_addr & 0xFF);
  SPI.transfer(_data);
  resetSS();
  return 1;
}
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	08 95       	ret

00002838 <_ZN10W5100Class4initEv>:

#define TXBUF_BASE 0x4000
#define RXBUF_BASE 0x6000

void W5100Class::init(void)
{
    2838:	cf 93       	push	r28
    283a:	df 93       	push	r29
    283c:	ec 01       	movw	r28, r24
  delay(300);
    283e:	6c e2       	ldi	r22, 0x2C	; 44
    2840:	71 e0       	ldi	r23, 0x01	; 1
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 ca 21 	call	0x4394	; 0x4394 <delay>

  SPI.begin();
    284a:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN8SPIClass5beginEv>
#elif defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB162__)
  inline static void initSS()    { DDRB  |=  _BV(0); };
  inline static void setSS()     { PORTB &= ~_BV(0); };
  inline static void resetSS()   { PORTB |=  _BV(0); }; 
#else
  inline static void initSS()    { DDRB  |=  _BV(2); };
    284e:	22 9a       	sbi	0x04, 2	; 4
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, _buff, size);            \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	60 e8       	ldi	r22, 0x80	; 128
    2856:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
  __GP_REGISTER8 (TMSR,   0x001B);    // Transmit memory size
    285a:	8b e1       	ldi	r24, 0x1B	; 27
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	65 e5       	ldi	r22, 0x55	; 85
    2860:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0017);    // Timeout address
  __GP_REGISTER8 (RCR,    0x0019);    // Retry count
  __GP_REGISTER8 (RMSR,   0x001A);    // Receive memory size
    2864:	8a e1       	ldi	r24, 0x1A	; 26
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	65 e5       	ldi	r22, 0x55	; 85
    286a:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e4       	ldi	r25, 0x40	; 64
    2872:	99 83       	std	Y+1, r25	; 0x01
    2874:	88 83       	st	Y, r24
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e6       	ldi	r25, 0x60	; 96
    287a:	99 87       	std	Y+9, r25	; 0x09
    287c:	88 87       	std	Y+8, r24	; 0x08
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	98 e4       	ldi	r25, 0x48	; 72
    2882:	9b 83       	std	Y+3, r25	; 0x03
    2884:	8a 83       	std	Y+2, r24	; 0x02
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	98 e6       	ldi	r25, 0x68	; 104
    288a:	9b 87       	std	Y+11, r25	; 0x0b
    288c:	8a 87       	std	Y+10, r24	; 0x0a
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e5       	ldi	r25, 0x50	; 80
    2892:	9d 83       	std	Y+5, r25	; 0x05
    2894:	8c 83       	std	Y+4, r24	; 0x04
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e7       	ldi	r25, 0x70	; 112
    289a:	9d 87       	std	Y+13, r25	; 0x0d
    289c:	8c 87       	std	Y+12, r24	; 0x0c
  writeMR(1<<RST);
  writeTMSR(0x55);
  writeRMSR(0x55);

  for (int i=0; i<MAX_SOCK_NUM; i++) {
    SBASE[i] = TXBUF_BASE + SSIZE * i;
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	98 e5       	ldi	r25, 0x58	; 88
    28a2:	9f 83       	std	Y+7, r25	; 0x07
    28a4:	8e 83       	std	Y+6, r24	; 0x06
    RBASE[i] = RXBUF_BASE + RSIZE * i;
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	98 e7       	ldi	r25, 0x78	; 120
    28aa:	9f 87       	std	Y+15, r25	; 0x0f
    28ac:	8e 87       	std	Y+14, r24	; 0x0e
  }
}
    28ae:	df 91       	pop	r29
    28b0:	cf 91       	pop	r28
    28b2:	08 95       	ret

000028b4 <_ZN10W5100Class5writeEjPKhj>:
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    28b4:	41 15       	cp	r20, r1
    28b6:	51 05       	cpc	r21, r1
    28b8:	09 f1       	breq	.+66     	; 0x28fc <_ZN10W5100Class5writeEjPKhj+0x48>
    28ba:	e6 2f       	mov	r30, r22
    28bc:	f7 2f       	mov	r31, r23
  SPI.transfer(_data);
  resetSS();
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
    28be:	9a 01       	movw	r18, r20
    28c0:	28 0f       	add	r18, r24
    28c2:	39 1f       	adc	r19, r25
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    28c4:	70 ef       	ldi	r23, 0xF0	; 240
  inline static void initSS()    { DDRB  |=  _BV(0); };
  inline static void setSS()     { PORTB &= ~_BV(0); };
  inline static void resetSS()   { PORTB |=  _BV(0); }; 
#else
  inline static void initSS()    { DDRB  |=  _BV(2); };
  inline static void setSS()     { PORTB &= ~_BV(2); };
    28c6:	2a 98       	cbi	0x05, 2	; 5
    28c8:	7e bd       	out	0x2e, r23	; 46
  while (!(SPSR & _BV(SPIF)))
    28ca:	0d b4       	in	r0, 0x2d	; 45
    28cc:	07 fe       	sbrs	r0, 7
    28ce:	fd cf       	rjmp	.-6      	; 0x28ca <_ZN10W5100Class5writeEjPKhj+0x16>
    ;
  return SPDR;
    28d0:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    28d2:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    28d4:	0d b4       	in	r0, 0x2d	; 45
    28d6:	07 fe       	sbrs	r0, 7
    28d8:	fd cf       	rjmp	.-6      	; 0x28d4 <_ZN10W5100Class5writeEjPKhj+0x20>
    ;
  return SPDR;
    28da:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    28dc:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    28de:	0d b4       	in	r0, 0x2d	; 45
    28e0:	07 fe       	sbrs	r0, 7
    28e2:	fd cf       	rjmp	.-6      	; 0x28de <_ZN10W5100Class5writeEjPKhj+0x2a>
    ;
  return SPDR;
    28e4:	6e b5       	in	r22, 0x2e	; 46
  {
    setSS();    
    SPI.transfer(0xF0);
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    _addr++;
    28e6:	01 96       	adiw	r24, 0x01	; 1
    SPI.transfer(_buf[i]);
    28e8:	61 91       	ld	r22, Z+
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    28ea:	6e bd       	out	0x2e, r22	; 46
  while (!(SPSR & _BV(SPIF)))
    28ec:	0d b4       	in	r0, 0x2d	; 45
    28ee:	07 fe       	sbrs	r0, 7
    28f0:	fd cf       	rjmp	.-6      	; 0x28ec <_ZN10W5100Class5writeEjPKhj+0x38>
    ;
  return SPDR;
    28f2:	6e b5       	in	r22, 0x2e	; 46
  inline static void resetSS()   { PORTB |=  _BV(2); };
    28f4:	2a 9a       	sbi	0x05, 2	; 5
  return 1;
}

uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    28f6:	82 17       	cp	r24, r18
    28f8:	93 07       	cpc	r25, r19
    28fa:	29 f7       	brne	.-54     	; 0x28c6 <_ZN10W5100Class5writeEjPKhj+0x12>
    _addr++;
    SPI.transfer(_buf[i]);
    resetSS();
  }
  return _len;
}
    28fc:	84 2f       	mov	r24, r20
    28fe:	95 2f       	mov	r25, r21
    2900:	08 95       	ret

00002902 <_ZN10W5100Class4readEj>:
  inline static void initSS()    { DDRB  |=  _BV(0); };
  inline static void setSS()     { PORTB &= ~_BV(0); };
  inline static void resetSS()   { PORTB |=  _BV(0); }; 
#else
  inline static void initSS()    { DDRB  |=  _BV(2); };
  inline static void setSS()     { PORTB &= ~_BV(2); };
    2902:	2a 98       	cbi	0x05, 2	; 5
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2904:	2f e0       	ldi	r18, 0x0F	; 15
    2906:	2e bd       	out	0x2e, r18	; 46
  while (!(SPSR & _BV(SPIF)))
    2908:	0d b4       	in	r0, 0x2d	; 45
    290a:	07 fe       	sbrs	r0, 7
    290c:	fd cf       	rjmp	.-6      	; 0x2908 <_ZN10W5100Class4readEj+0x6>
    ;
  return SPDR;
    290e:	2e b5       	in	r18, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2910:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    2912:	0d b4       	in	r0, 0x2d	; 45
    2914:	07 fe       	sbrs	r0, 7
    2916:	fd cf       	rjmp	.-6      	; 0x2912 <_ZN10W5100Class4readEj+0x10>
    ;
  return SPDR;
    2918:	9e b5       	in	r25, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    291a:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    291c:	0d b4       	in	r0, 0x2d	; 45
    291e:	07 fe       	sbrs	r0, 7
    2920:	fd cf       	rjmp	.-6      	; 0x291c <_ZN10W5100Class4readEj+0x1a>
    ;
  return SPDR;
    2922:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2924:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & _BV(SPIF)))
    2926:	0d b4       	in	r0, 0x2d	; 45
    2928:	07 fe       	sbrs	r0, 7
    292a:	fd cf       	rjmp	.-6      	; 0x2926 <_ZN10W5100Class4readEj+0x24>
    ;
  return SPDR;
    292c:	8e b5       	in	r24, 0x2e	; 46
  inline static void resetSS()   { PORTB |=  _BV(2); };
    292e:	2a 9a       	sbi	0x05, 2	; 5
  SPI.transfer(_addr >> 8);
  SPI.transfer(_addr & 0xFF);
  uint8_t _data = SPI.transfer(0);
  resetSS();
  return _data;
}
    2930:	08 95       	ret

00002932 <_ZN10W5100Class13getTXFreeSizeEh>:
    RBASE[i] = RXBUF_BASE + RSIZE * i;
  }
}

uint16_t W5100Class::getTXFreeSize(SOCKET s)
{
    2932:	8f 92       	push	r8
    2934:	9f 92       	push	r9
    2936:	af 92       	push	r10
    2938:	bf 92       	push	r11
    293a:	cf 92       	push	r12
    293c:	df 92       	push	r13
    293e:	ef 92       	push	r14
    2940:	ff 92       	push	r15
    2942:	0f 93       	push	r16
    2944:	1f 93       	push	r17
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    294a:	86 2f       	mov	r24, r22
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	04 96       	adiw	r24, 0x04	; 4
    2950:	98 2f       	mov	r25, r24
    2952:	88 27       	eor	r24, r24
    2954:	aa 24       	eor	r10, r10
    2956:	bb 24       	eor	r11, r11
    2958:	68 94       	set
    295a:	a5 f8       	bld	r10, 5
    295c:	a8 0e       	add	r10, r24
    295e:	b9 1e       	adc	r11, r25
    2960:	0f 2e       	mov	r0, r31
    2962:	f1 e2       	ldi	r31, 0x21	; 33
    2964:	cf 2e       	mov	r12, r31
    2966:	dd 24       	eor	r13, r13
    2968:	f0 2d       	mov	r31, r0
    296a:	c8 0e       	add	r12, r24
    296c:	d9 1e       	adc	r13, r25
  uint16_t val=0, val1=0;
    296e:	00 e0       	ldi	r16, 0x00	; 0
    2970:	10 e0       	ldi	r17, 0x00	; 0
    2972:	c5 01       	movw	r24, r10
    2974:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
    2978:	c8 2f       	mov	r28, r24
    297a:	c6 01       	movw	r24, r12
    297c:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	fc 2e       	mov	r15, r28
    2984:	ee 24       	eor	r14, r14
    2986:	ec 01       	movw	r28, r24
    2988:	ce 29       	or	r28, r14
    298a:	df 29       	or	r29, r15
  do {
    val1 = readSnTX_FSR(s);
    if (val1 != 0)
    298c:	20 97       	sbiw	r28, 0x00	; 0
    298e:	69 f0       	breq	.+26     	; 0x29aa <_ZN10W5100Class13getTXFreeSizeEh+0x78>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2990:	c5 01       	movw	r24, r10
    2992:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
    2996:	08 2f       	mov	r16, r24
    2998:	c6 01       	movw	r24, r12
    299a:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	90 2e       	mov	r9, r16
    29a2:	88 24       	eor	r8, r8
    29a4:	8c 01       	movw	r16, r24
    29a6:	08 29       	or	r16, r8
    29a8:	19 29       	or	r17, r9
}

uint16_t W5100Class::getTXFreeSize(SOCKET s)
{
  uint16_t val=0, val1=0;
  do {
    29aa:	0c 17       	cp	r16, r28
    29ac:	1d 07       	cpc	r17, r29
    29ae:	09 f7       	brne	.-62     	; 0x2972 <_ZN10W5100Class13getTXFreeSizeEh+0x40>
    if (val1 != 0)
      val = readSnTX_FSR(s);
  } 
  while (val != val1);
  return val;
}
    29b0:	80 2f       	mov	r24, r16
    29b2:	91 2f       	mov	r25, r17
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	ff 90       	pop	r15
    29be:	ef 90       	pop	r14
    29c0:	df 90       	pop	r13
    29c2:	cf 90       	pop	r12
    29c4:	bf 90       	pop	r11
    29c6:	af 90       	pop	r10
    29c8:	9f 90       	pop	r9
    29ca:	8f 90       	pop	r8
    29cc:	08 95       	ret

000029ce <_ZN10W5100Class17getRXReceivedSizeEh>:

uint16_t W5100Class::getRXReceivedSize(SOCKET s)
{
    29ce:	8f 92       	push	r8
    29d0:	9f 92       	push	r9
    29d2:	af 92       	push	r10
    29d4:	bf 92       	push	r11
    29d6:	cf 92       	push	r12
    29d8:	df 92       	push	r13
    29da:	ef 92       	push	r14
    29dc:	ff 92       	push	r15
    29de:	0f 93       	push	r16
    29e0:	1f 93       	push	r17
    29e2:	cf 93       	push	r28
    29e4:	df 93       	push	r29
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    29e6:	86 2f       	mov	r24, r22
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	04 96       	adiw	r24, 0x04	; 4
    29ec:	98 2f       	mov	r25, r24
    29ee:	88 27       	eor	r24, r24
    29f0:	0f 2e       	mov	r0, r31
    29f2:	f6 e2       	ldi	r31, 0x26	; 38
    29f4:	af 2e       	mov	r10, r31
    29f6:	bb 24       	eor	r11, r11
    29f8:	f0 2d       	mov	r31, r0
    29fa:	a8 0e       	add	r10, r24
    29fc:	b9 1e       	adc	r11, r25
    29fe:	0f 2e       	mov	r0, r31
    2a00:	f7 e2       	ldi	r31, 0x27	; 39
    2a02:	cf 2e       	mov	r12, r31
    2a04:	dd 24       	eor	r13, r13
    2a06:	f0 2d       	mov	r31, r0
    2a08:	c8 0e       	add	r12, r24
    2a0a:	d9 1e       	adc	r13, r25
  uint16_t val=0,val1=0;
    2a0c:	00 e0       	ldi	r16, 0x00	; 0
    2a0e:	10 e0       	ldi	r17, 0x00	; 0
    2a10:	c5 01       	movw	r24, r10
    2a12:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
    2a16:	c8 2f       	mov	r28, r24
    2a18:	c6 01       	movw	r24, r12
    2a1a:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	fc 2e       	mov	r15, r28
    2a22:	ee 24       	eor	r14, r14
    2a24:	ec 01       	movw	r28, r24
    2a26:	ce 29       	or	r28, r14
    2a28:	df 29       	or	r29, r15
  do {
    val1 = readSnRX_RSR(s);
    if (val1 != 0)
    2a2a:	20 97       	sbiw	r28, 0x00	; 0
    2a2c:	69 f0       	breq	.+26     	; 0x2a48 <_ZN10W5100Class17getRXReceivedSizeEh+0x7a>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2a2e:	c5 01       	movw	r24, r10
    2a30:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
    2a34:	08 2f       	mov	r16, r24
    2a36:	c6 01       	movw	r24, r12
    2a38:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	90 2e       	mov	r9, r16
    2a40:	88 24       	eor	r8, r8
    2a42:	8c 01       	movw	r16, r24
    2a44:	08 29       	or	r16, r8
    2a46:	19 29       	or	r17, r9
}

uint16_t W5100Class::getRXReceivedSize(SOCKET s)
{
  uint16_t val=0,val1=0;
  do {
    2a48:	0c 17       	cp	r16, r28
    2a4a:	1d 07       	cpc	r17, r29
    2a4c:	09 f7       	brne	.-62     	; 0x2a10 <_ZN10W5100Class17getRXReceivedSizeEh+0x42>
    if (val1 != 0)
      val = readSnRX_RSR(s);
  } 
  while (val != val1);
  return val;
}
    2a4e:	80 2f       	mov	r24, r16
    2a50:	91 2f       	mov	r25, r17
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	1f 91       	pop	r17
    2a58:	0f 91       	pop	r16
    2a5a:	ff 90       	pop	r15
    2a5c:	ef 90       	pop	r14
    2a5e:	df 90       	pop	r13
    2a60:	cf 90       	pop	r12
    2a62:	bf 90       	pop	r11
    2a64:	af 90       	pop	r10
    2a66:	9f 90       	pop	r9
    2a68:	8f 90       	pop	r8
    2a6a:	08 95       	ret

00002a6c <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>:
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
}

void W5100Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    2a6c:	2f 92       	push	r2
    2a6e:	3f 92       	push	r3
    2a70:	4f 92       	push	r4
    2a72:	5f 92       	push	r5
    2a74:	6f 92       	push	r6
    2a76:	7f 92       	push	r7
    2a78:	8f 92       	push	r8
    2a7a:	9f 92       	push	r9
    2a7c:	af 92       	push	r10
    2a7e:	bf 92       	push	r11
    2a80:	cf 92       	push	r12
    2a82:	df 92       	push	r13
    2a84:	ef 92       	push	r14
    2a86:	ff 92       	push	r15
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	2c 01       	movw	r4, r24
    2a92:	5a 01       	movw	r10, r20
    2a94:	19 01       	movw	r2, r18
    2a96:	78 01       	movw	r14, r16
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2a98:	c6 2e       	mov	r12, r22
    2a9a:	dd 24       	eor	r13, r13
    2a9c:	c6 01       	movw	r24, r12
    2a9e:	04 96       	adiw	r24, 0x04	; 4
    2aa0:	d8 2f       	mov	r29, r24
    2aa2:	cc 27       	eor	r28, r28
    2aa4:	0f 2e       	mov	r0, r31
    2aa6:	f4 e2       	ldi	r31, 0x24	; 36
    2aa8:	6f 2e       	mov	r6, r31
    2aaa:	77 24       	eor	r7, r7
    2aac:	f0 2d       	mov	r31, r0
    2aae:	6c 0e       	add	r6, r28
    2ab0:	7d 1e       	adc	r7, r29
    2ab2:	c3 01       	movw	r24, r6
    2ab4:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
    2ab8:	18 2f       	mov	r17, r24
    2aba:	0f 2e       	mov	r0, r31
    2abc:	f5 e2       	ldi	r31, 0x25	; 37
    2abe:	8f 2e       	mov	r8, r31
    2ac0:	99 24       	eor	r9, r9
    2ac2:	f0 2d       	mov	r31, r0
    2ac4:	8c 0e       	add	r8, r28
    2ac6:	9d 1e       	adc	r9, r29
    2ac8:	c4 01       	movw	r24, r8
    2aca:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
    2ace:	c8 2f       	mov	r28, r24
    2ad0:	d0 e0       	ldi	r29, 0x00	; 0
    2ad2:	91 2f       	mov	r25, r17
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	8c 2b       	or	r24, r28
    2ad8:	9d 2b       	or	r25, r29
  uint16_t ptr = readSnTX_WR(s);
  ptr += data_offset;
    2ada:	ec 01       	movw	r28, r24
    2adc:	ca 0d       	add	r28, r10
    2ade:	db 1d       	adc	r29, r11
  uint16_t offset = ptr & SMASK;
    2ae0:	ae 01       	movw	r20, r28
    2ae2:	57 70       	andi	r21, 0x07	; 7
  uint16_t dstAddr = offset + SBASE[s];
    2ae4:	c6 01       	movw	r24, r12
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	84 0d       	add	r24, r4
    2aec:	95 1d       	adc	r25, r5
    2aee:	fc 01       	movw	r30, r24
    2af0:	80 81       	ld	r24, Z
    2af2:	91 81       	ldd	r25, Z+1	; 0x01
    2af4:	9a 01       	movw	r18, r20
    2af6:	28 0f       	add	r18, r24
    2af8:	39 1f       	adc	r19, r25

  if (offset + len > SSIZE) 
    2afa:	ca 01       	movw	r24, r20
    2afc:	8e 0d       	add	r24, r14
    2afe:	9f 1d       	adc	r25, r15
    2b00:	f8 e0       	ldi	r31, 0x08	; 8
    2b02:	81 30       	cpi	r24, 0x01	; 1
    2b04:	9f 07       	cpc	r25, r31
    2b06:	d8 f0       	brcs	.+54     	; 0x2b3e <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0xd2>
  {
    // Wrap around circular buffer
    uint16_t size = SSIZE - offset;
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	98 e0       	ldi	r25, 0x08	; 8
    2b0c:	5c 01       	movw	r10, r24
    2b0e:	a4 1a       	sub	r10, r20
    2b10:	b5 0a       	sbc	r11, r21
    write(dstAddr, data, size);
    2b12:	c9 01       	movw	r24, r18
    2b14:	b1 01       	movw	r22, r2
    2b16:	a5 01       	movw	r20, r10
    2b18:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
    write(SBASE[s], data + size, len - size);
    2b1c:	c6 01       	movw	r24, r12
    2b1e:	88 0f       	add	r24, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	84 0d       	add	r24, r4
    2b24:	95 1d       	adc	r25, r5
    2b26:	b1 01       	movw	r22, r2
    2b28:	6a 0d       	add	r22, r10
    2b2a:	7b 1d       	adc	r23, r11
    2b2c:	a7 01       	movw	r20, r14
    2b2e:	4a 19       	sub	r20, r10
    2b30:	5b 09       	sbc	r21, r11
    2b32:	fc 01       	movw	r30, r24
    2b34:	80 81       	ld	r24, Z
    2b36:	91 81       	ldd	r25, Z+1	; 0x01
    2b38:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
    2b3c:	05 c0       	rjmp	.+10     	; 0x2b48 <_ZN10W5100Class27send_data_processing_offsetEhjPKhj+0xdc>
  } 
  else {
    write(dstAddr, data, len);
    2b3e:	c9 01       	movw	r24, r18
    2b40:	b1 01       	movw	r22, r2
    2b42:	a7 01       	movw	r20, r14
    2b44:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <_ZN10W5100Class5writeEjPKhj>
  }

  ptr += len;
    2b48:	ce 0d       	add	r28, r14
    2b4a:	df 1d       	adc	r29, r15
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2b4c:	c3 01       	movw	r24, r6
    2b4e:	6d 2f       	mov	r22, r29
    2b50:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    2b54:	c4 01       	movw	r24, r8
    2b56:	6c 2f       	mov	r22, r28
    2b58:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
  writeSnTX_WR(s, ptr);
}
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	1f 91       	pop	r17
    2b62:	0f 91       	pop	r16
    2b64:	ff 90       	pop	r15
    2b66:	ef 90       	pop	r14
    2b68:	df 90       	pop	r13
    2b6a:	cf 90       	pop	r12
    2b6c:	bf 90       	pop	r11
    2b6e:	af 90       	pop	r10
    2b70:	9f 90       	pop	r9
    2b72:	8f 90       	pop	r8
    2b74:	7f 90       	pop	r7
    2b76:	6f 90       	pop	r6
    2b78:	5f 90       	pop	r5
    2b7a:	4f 90       	pop	r4
    2b7c:	3f 90       	pop	r3
    2b7e:	2f 90       	pop	r2
    2b80:	08 95       	ret

00002b82 <_ZN10W5100Class20send_data_processingEhPKhj>:
  return val;
}


void W5100Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
    2b82:	0f 93       	push	r16
    2b84:	1f 93       	push	r17
    2b86:	fa 01       	movw	r30, r20
    2b88:	89 01       	movw	r16, r18
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	50 e0       	ldi	r21, 0x00	; 0
    2b8e:	9f 01       	movw	r18, r30
    2b90:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <_ZN10W5100Class27send_data_processing_offsetEhjPKhj>
}
    2b94:	1f 91       	pop	r17
    2b96:	0f 91       	pop	r16
    2b98:	08 95       	ret

00002b9a <_ZN10W5100Class4readEjPhj>:
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    2b9a:	41 15       	cp	r20, r1
    2b9c:	51 05       	cpc	r21, r1
    2b9e:	09 f1       	breq	.+66     	; 0x2be2 <_ZN10W5100Class4readEjPhj+0x48>
    2ba0:	e6 2f       	mov	r30, r22
    2ba2:	f7 2f       	mov	r31, r23
  uint8_t _data = SPI.transfer(0);
  resetSS();
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
    2ba4:	9a 01       	movw	r18, r20
    2ba6:	28 0f       	add	r18, r24
    2ba8:	39 1f       	adc	r19, r25
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2baa:	7f e0       	ldi	r23, 0x0F	; 15
  inline static void initSS()    { DDRB  |=  _BV(0); };
  inline static void setSS()     { PORTB &= ~_BV(0); };
  inline static void resetSS()   { PORTB |=  _BV(0); }; 
#else
  inline static void initSS()    { DDRB  |=  _BV(2); };
  inline static void setSS()     { PORTB &= ~_BV(2); };
    2bac:	2a 98       	cbi	0x05, 2	; 5
    2bae:	7e bd       	out	0x2e, r23	; 46
  while (!(SPSR & _BV(SPIF)))
    2bb0:	0d b4       	in	r0, 0x2d	; 45
    2bb2:	07 fe       	sbrs	r0, 7
    2bb4:	fd cf       	rjmp	.-6      	; 0x2bb0 <_ZN10W5100Class4readEjPhj+0x16>
    ;
  return SPDR;
    2bb6:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2bb8:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    2bba:	0d b4       	in	r0, 0x2d	; 45
    2bbc:	07 fe       	sbrs	r0, 7
    2bbe:	fd cf       	rjmp	.-6      	; 0x2bba <_ZN10W5100Class4readEjPhj+0x20>
    ;
  return SPDR;
    2bc0:	6e b5       	in	r22, 0x2e	; 46
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2bc2:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    2bc4:	0d b4       	in	r0, 0x2d	; 45
    2bc6:	07 fe       	sbrs	r0, 7
    2bc8:	fd cf       	rjmp	.-6      	; 0x2bc4 <_ZN10W5100Class4readEjPhj+0x2a>
    ;
  return SPDR;
    2bca:	6e b5       	in	r22, 0x2e	; 46
  {
    setSS();
    SPI.transfer(0x0F);
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    _addr++;
    2bcc:	01 96       	adiw	r24, 0x01	; 1
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    2bce:	1e bc       	out	0x2e, r1	; 46
  while (!(SPSR & _BV(SPIF)))
    2bd0:	0d b4       	in	r0, 0x2d	; 45
    2bd2:	07 fe       	sbrs	r0, 7
    2bd4:	fd cf       	rjmp	.-6      	; 0x2bd0 <_ZN10W5100Class4readEjPhj+0x36>
    ;
  return SPDR;
    2bd6:	6e b5       	in	r22, 0x2e	; 46
    _buf[i] = SPI.transfer(0);
    2bd8:	61 93       	st	Z+, r22
  inline static void resetSS()   { PORTB |=  _BV(2); };
    2bda:	2a 9a       	sbi	0x05, 2	; 5
  return _data;
}

uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)
{
  for (uint16_t i=0; i<_len; i++)
    2bdc:	82 17       	cp	r24, r18
    2bde:	93 07       	cpc	r25, r19
    2be0:	29 f7       	brne	.-54     	; 0x2bac <_ZN10W5100Class4readEjPhj+0x12>
    _addr++;
    _buf[i] = SPI.transfer(0);
    resetSS();
  }
  return _len;
}
    2be2:	84 2f       	mov	r24, r20
    2be4:	95 2f       	mov	r25, r21
    2be6:	08 95       	ret

00002be8 <_ZN10W5100Class9read_dataEhPVhS1_j>:
    writeSnRX_RD(s, ptr);
  }
}

void W5100Class::read_data(SOCKET s, volatile uint8_t *src, volatile uint8_t *dst, uint16_t len)
{
    2be8:	af 92       	push	r10
    2bea:	bf 92       	push	r11
    2bec:	cf 92       	push	r12
    2bee:	df 92       	push	r13
    2bf0:	ef 92       	push	r14
    2bf2:	ff 92       	push	r15
    2bf4:	0f 93       	push	r16
    2bf6:	1f 93       	push	r17
    2bf8:	cf 93       	push	r28
    2bfa:	df 93       	push	r29
    2bfc:	6c 01       	movw	r12, r24
    2bfe:	59 01       	movw	r10, r18
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  src_mask = (uint16_t)src & RMASK;
    2c00:	57 70       	andi	r21, 0x07	; 7
  src_ptr = RBASE[s] + src_mask;
    2c02:	c6 2f       	mov	r28, r22
    2c04:	d0 e0       	ldi	r29, 0x00	; 0
    2c06:	ce 01       	movw	r24, r28
    2c08:	04 96       	adiw	r24, 0x04	; 4
    2c0a:	88 0f       	add	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	8c 0d       	add	r24, r12
    2c10:	9d 1d       	adc	r25, r13
    2c12:	fc 01       	movw	r30, r24
    2c14:	80 81       	ld	r24, Z
    2c16:	91 81       	ldd	r25, Z+1	; 0x01
    2c18:	9a 01       	movw	r18, r20
    2c1a:	28 0f       	add	r18, r24
    2c1c:	39 1f       	adc	r19, r25

  if( (src_mask + len) > RSIZE ) 
    2c1e:	c8 01       	movw	r24, r16
    2c20:	84 0f       	add	r24, r20
    2c22:	95 1f       	adc	r25, r21
    2c24:	f8 e0       	ldi	r31, 0x08	; 8
    2c26:	81 30       	cpi	r24, 0x01	; 1
    2c28:	9f 07       	cpc	r25, r31
    2c2a:	e0 f0       	brcs	.+56     	; 0x2c64 <_ZN10W5100Class9read_dataEhPVhS1_j+0x7c>
  {
    size = RSIZE - src_mask;
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	98 e0       	ldi	r25, 0x08	; 8
    2c30:	7c 01       	movw	r14, r24
    2c32:	e4 1a       	sub	r14, r20
    2c34:	f5 0a       	sbc	r15, r21
    read(src_ptr, (uint8_t *)dst, size);
    2c36:	c9 01       	movw	r24, r18
    2c38:	b5 01       	movw	r22, r10
    2c3a:	a7 01       	movw	r20, r14
    2c3c:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZN10W5100Class4readEjPhj>
    dst += size;
    read(RBASE[s], (uint8_t *) dst, len - size);
    2c40:	ce 01       	movw	r24, r28
    2c42:	04 96       	adiw	r24, 0x04	; 4
    2c44:	88 0f       	add	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	8c 0d       	add	r24, r12
    2c4a:	9d 1d       	adc	r25, r13

  if( (src_mask + len) > RSIZE ) 
  {
    size = RSIZE - src_mask;
    read(src_ptr, (uint8_t *)dst, size);
    dst += size;
    2c4c:	b5 01       	movw	r22, r10
    2c4e:	6e 0d       	add	r22, r14
    2c50:	7f 1d       	adc	r23, r15
    read(RBASE[s], (uint8_t *) dst, len - size);
    2c52:	a8 01       	movw	r20, r16
    2c54:	4e 19       	sub	r20, r14
    2c56:	5f 09       	sbc	r21, r15
    2c58:	fc 01       	movw	r30, r24
    2c5a:	80 81       	ld	r24, Z
    2c5c:	91 81       	ldd	r25, Z+1	; 0x01
    2c5e:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZN10W5100Class4readEjPhj>
    2c62:	05 c0       	rjmp	.+10     	; 0x2c6e <_ZN10W5100Class9read_dataEhPVhS1_j+0x86>
  } 
  else
    read(src_ptr, (uint8_t *) dst, len);
    2c64:	c9 01       	movw	r24, r18
    2c66:	b5 01       	movw	r22, r10
    2c68:	a8 01       	movw	r20, r16
    2c6a:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZN10W5100Class4readEjPhj>
}
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	1f 91       	pop	r17
    2c74:	0f 91       	pop	r16
    2c76:	ff 90       	pop	r15
    2c78:	ef 90       	pop	r14
    2c7a:	df 90       	pop	r13
    2c7c:	cf 90       	pop	r12
    2c7e:	bf 90       	pop	r11
    2c80:	af 90       	pop	r10
    2c82:	08 95       	ret

00002c84 <_ZN10W5100Class20recv_data_processingEhPhjh>:
  writeSnTX_WR(s, ptr);
}


void W5100Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
{
    2c84:	4f 92       	push	r4
    2c86:	5f 92       	push	r5
    2c88:	6f 92       	push	r6
    2c8a:	7f 92       	push	r7
    2c8c:	8f 92       	push	r8
    2c8e:	9f 92       	push	r9
    2c90:	af 92       	push	r10
    2c92:	bf 92       	push	r11
    2c94:	cf 92       	push	r12
    2c96:	df 92       	push	r13
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	3c 01       	movw	r6, r24
    2ca4:	16 2f       	mov	r17, r22
    2ca6:	2a 01       	movw	r4, r20
    2ca8:	69 01       	movw	r12, r18
    2caa:	f0 2e       	mov	r15, r16
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2cac:	c6 2f       	mov	r28, r22
    2cae:	d0 e0       	ldi	r29, 0x00	; 0
    2cb0:	24 96       	adiw	r28, 0x04	; 4
    2cb2:	dc 2f       	mov	r29, r28
    2cb4:	cc 27       	eor	r28, r28
    2cb6:	0f 2e       	mov	r0, r31
    2cb8:	f8 e2       	ldi	r31, 0x28	; 40
    2cba:	8f 2e       	mov	r8, r31
    2cbc:	99 24       	eor	r9, r9
    2cbe:	f0 2d       	mov	r31, r0
    2cc0:	8c 0e       	add	r8, r28
    2cc2:	9d 1e       	adc	r9, r29
    2cc4:	c4 01       	movw	r24, r8
    2cc6:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
    2cca:	08 2f       	mov	r16, r24
    2ccc:	0f 2e       	mov	r0, r31
    2cce:	f9 e2       	ldi	r31, 0x29	; 41
    2cd0:	af 2e       	mov	r10, r31
    2cd2:	bb 24       	eor	r11, r11
    2cd4:	f0 2d       	mov	r31, r0
    2cd6:	ac 0e       	add	r10, r28
    2cd8:	bd 1e       	adc	r11, r29
    2cda:	c5 01       	movw	r24, r10
    2cdc:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	90 2f       	mov	r25, r16
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	e9 01       	movw	r28, r18
    2cea:	c8 2b       	or	r28, r24
    2cec:	d9 2b       	or	r29, r25
  uint16_t ptr;
  ptr = readSnRX_RD(s);
  read_data(s, (uint8_t *)ptr, data, len);
    2cee:	c3 01       	movw	r24, r6
    2cf0:	61 2f       	mov	r22, r17
    2cf2:	ae 01       	movw	r20, r28
    2cf4:	92 01       	movw	r18, r4
    2cf6:	86 01       	movw	r16, r12
    2cf8:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN10W5100Class9read_dataEhPVhS1_j>
  if (!peek)
    2cfc:	ff 20       	and	r15, r15
    2cfe:	51 f4       	brne	.+20     	; 0x2d14 <_ZN10W5100Class20recv_data_processingEhPhjh+0x90>
  {
    ptr += len;
    2d00:	cc 0d       	add	r28, r12
    2d02:	dd 1d       	adc	r29, r13
uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
}

uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
  return write(CH_BASE + _s * CH_SIZE + _addr, _data);
    2d04:	c4 01       	movw	r24, r8
    2d06:	6d 2f       	mov	r22, r29
    2d08:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    2d0c:	c5 01       	movw	r24, r10
    2d0e:	6c 2f       	mov	r22, r28
    2d10:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
    writeSnRX_RD(s, ptr);
  }
}
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	1f 91       	pop	r17
    2d1a:	0f 91       	pop	r16
    2d1c:	ff 90       	pop	r15
    2d1e:	df 90       	pop	r13
    2d20:	cf 90       	pop	r12
    2d22:	bf 90       	pop	r11
    2d24:	af 90       	pop	r10
    2d26:	9f 90       	pop	r9
    2d28:	8f 90       	pop	r8
    2d2a:	7f 90       	pop	r7
    2d2c:	6f 90       	pop	r6
    2d2e:	5f 90       	pop	r5
    2d30:	4f 90       	pop	r4
    2d32:	08 95       	ret

00002d34 <_ZN10W5100Class9execCmdSnEh7SockCMD>:
    resetSS();
  }
  return _len;
}

void W5100Class::execCmdSn(SOCKET s, SockCMD _cmd) {
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	d6 2f       	mov	r29, r22
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	c8 2f       	mov	r28, r24
    2d3e:	cf 5f       	subi	r28, 0xFF	; 255
    2d40:	db 4f       	sbci	r29, 0xFB	; 251
    2d42:	ce 01       	movw	r24, r28
    2d44:	64 2f       	mov	r22, r20
    2d46:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN10W5100Class5writeEjh>
};

extern W5100Class W5100;

uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {
  return read(CH_BASE + _s * CH_SIZE + _addr);
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN10W5100Class4readEj>
  // Send command to socket
  writeSnCR(s, _cmd);
  // Wait for command to complete
  while (readSnCR(s))
    2d50:	88 23       	and	r24, r24
    2d52:	d9 f7       	brne	.-10     	; 0x2d4a <_ZN10W5100Class9execCmdSnEh7SockCMD+0x16>
    ;
}
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	08 95       	ret

00002d5a <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	24 85       	ldd	r18, Z+12	; 0x0c
    2d5e:	35 85       	ldd	r19, Z+13	; 0x0d
    2d60:	f9 01       	movw	r30, r18
    2d62:	e0 5c       	subi	r30, 0xC0	; 192
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	80 81       	ld	r24, Z
    2d68:	91 81       	ldd	r25, Z+1	; 0x01
    2d6a:	2e 5b       	subi	r18, 0xBE	; 190
    2d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6e:	f9 01       	movw	r30, r18
    2d70:	20 81       	ld	r18, Z
    2d72:	31 81       	ldd	r19, Z+1	; 0x01
    2d74:	82 1b       	sub	r24, r18
    2d76:	93 0b       	sbc	r25, r19
    2d78:	8f 73       	andi	r24, 0x3F	; 63
    2d7a:	90 70       	andi	r25, 0x00	; 0
}
    2d7c:	08 95       	ret

00002d7e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    2d7e:	fc 01       	movw	r30, r24
    2d80:	84 85       	ldd	r24, Z+12	; 0x0c
    2d82:	95 85       	ldd	r25, Z+13	; 0x0d
    2d84:	fc 01       	movw	r30, r24
    2d86:	e0 5c       	subi	r30, 0xC0	; 192
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	20 81       	ld	r18, Z
    2d8c:	31 81       	ldd	r19, Z+1	; 0x01
    2d8e:	fc 01       	movw	r30, r24
    2d90:	ee 5b       	subi	r30, 0xBE	; 190
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	40 81       	ld	r20, Z
    2d96:	51 81       	ldd	r21, Z+1	; 0x01
    2d98:	24 17       	cp	r18, r20
    2d9a:	35 07       	cpc	r19, r21
    2d9c:	59 f0       	breq	.+22     	; 0x2db4 <_ZN14HardwareSerial4peekEv+0x36>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    2d9e:	fc 01       	movw	r30, r24
    2da0:	ee 5b       	subi	r30, 0xBE	; 190
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	20 81       	ld	r18, Z
    2da6:	31 81       	ldd	r19, Z+1	; 0x01
    2da8:	82 0f       	add	r24, r18
    2daa:	93 1f       	adc	r25, r19
    2dac:	fc 01       	movw	r30, r24
    2dae:	80 81       	ld	r24, Z
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    2db4:	8f ef       	ldi	r24, 0xFF	; 255
    2db6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    2db8:	08 95       	ret

00002dba <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    2dba:	dc 01       	movw	r26, r24
    2dbc:	1c 96       	adiw	r26, 0x0c	; 12
    2dbe:	8d 91       	ld	r24, X+
    2dc0:	9c 91       	ld	r25, X
    2dc2:	1d 97       	sbiw	r26, 0x0d	; 13
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	e0 5c       	subi	r30, 0xC0	; 192
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	20 81       	ld	r18, Z
    2dcc:	31 81       	ldd	r19, Z+1	; 0x01
    2dce:	fc 01       	movw	r30, r24
    2dd0:	ee 5b       	subi	r30, 0xBE	; 190
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	40 81       	ld	r20, Z
    2dd6:	51 81       	ldd	r21, Z+1	; 0x01
    2dd8:	24 17       	cp	r18, r20
    2dda:	35 07       	cpc	r19, r21
    2ddc:	99 f0       	breq	.+38     	; 0x2e04 <_ZN14HardwareSerial4readEv+0x4a>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    2dde:	fc 01       	movw	r30, r24
    2de0:	ee 5b       	subi	r30, 0xBE	; 190
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	20 81       	ld	r18, Z
    2de6:	31 81       	ldd	r19, Z+1	; 0x01
    2de8:	82 0f       	add	r24, r18
    2dea:	93 1f       	adc	r25, r19
    2dec:	dc 01       	movw	r26, r24
    2dee:	8c 91       	ld	r24, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    2df0:	20 81       	ld	r18, Z
    2df2:	31 81       	ldd	r19, Z+1	; 0x01
    2df4:	2f 5f       	subi	r18, 0xFF	; 255
    2df6:	3f 4f       	sbci	r19, 0xFF	; 255
    2df8:	2f 73       	andi	r18, 0x3F	; 63
    2dfa:	30 70       	andi	r19, 0x00	; 0
    2dfc:	31 83       	std	Z+1, r19	; 0x01
    2dfe:	20 83       	st	Z, r18
    return c;
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    2e04:	8f ef       	ldi	r24, 0xFF	; 255
    2e06:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    2e08:	08 95       	ret

00002e0a <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	1e 96       	adiw	r26, 0x0e	; 14
    2e0e:	ed 91       	ld	r30, X+
    2e10:	fc 91       	ld	r31, X
    2e12:	1f 97       	sbiw	r26, 0x0f	; 15
    2e14:	df 01       	movw	r26, r30
    2e16:	a0 5c       	subi	r26, 0xC0	; 192
    2e18:	bf 4f       	sbci	r27, 0xFF	; 255
    2e1a:	ee 5b       	subi	r30, 0xBE	; 190
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	2d 91       	ld	r18, X+
    2e20:	3c 91       	ld	r19, X
    2e22:	11 97       	sbiw	r26, 0x01	; 1
    2e24:	80 81       	ld	r24, Z
    2e26:	91 81       	ldd	r25, Z+1	; 0x01
    2e28:	28 17       	cp	r18, r24
    2e2a:	39 07       	cpc	r19, r25
    2e2c:	c1 f7       	brne	.-16     	; 0x2e1e <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    2e2e:	08 95       	ret

00002e30 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2e30:	1f 93       	push	r17
    2e32:	cf 93       	push	r28
    2e34:	df 93       	push	r29
    2e36:	ec 01       	movw	r28, r24
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    2e38:	ae 85       	ldd	r26, Y+14	; 0x0e
    2e3a:	bf 85       	ldd	r27, Y+15	; 0x0f
    2e3c:	fd 01       	movw	r30, r26
    2e3e:	e0 5c       	subi	r30, 0xC0	; 192
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	20 81       	ld	r18, Z
    2e44:	31 81       	ldd	r19, Z+1	; 0x01
    2e46:	2f 5f       	subi	r18, 0xFF	; 255
    2e48:	3f 4f       	sbci	r19, 0xFF	; 255
    2e4a:	2f 73       	andi	r18, 0x3F	; 63
    2e4c:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    2e4e:	12 2f       	mov	r17, r18
    2e50:	73 2f       	mov	r23, r19
    2e52:	fd 01       	movw	r30, r26
    2e54:	ee 5b       	subi	r30, 0xBE	; 190
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	41 2f       	mov	r20, r17
    2e5a:	57 2f       	mov	r21, r23
    2e5c:	80 81       	ld	r24, Z
    2e5e:	91 81       	ldd	r25, Z+1	; 0x01
    2e60:	28 17       	cp	r18, r24
    2e62:	39 07       	cpc	r19, r25
    2e64:	c9 f3       	breq	.-14     	; 0x2e58 <_ZN14HardwareSerial5writeEh+0x28>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    2e66:	fd 01       	movw	r30, r26
    2e68:	e0 5c       	subi	r30, 0xC0	; 192
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	80 81       	ld	r24, Z
    2e6e:	91 81       	ldd	r25, Z+1	; 0x01
    2e70:	a8 0f       	add	r26, r24
    2e72:	b9 1f       	adc	r27, r25
    2e74:	6c 93       	st	X, r22
  _tx_buffer->head = i;
    2e76:	ee 85       	ldd	r30, Y+14	; 0x0e
    2e78:	ff 85       	ldd	r31, Y+15	; 0x0f
    2e7a:	e0 5c       	subi	r30, 0xC0	; 192
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	51 83       	std	Z+1, r21	; 0x01
    2e80:	40 83       	st	Z, r20
	
  sbi(*_ucsrb, _udrie);
    2e82:	ee 89       	ldd	r30, Y+22	; 0x16
    2e84:	ff 89       	ldd	r31, Y+23	; 0x17
    2e86:	40 81       	ld	r20, Z
    2e88:	21 e0       	ldi	r18, 0x01	; 1
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	c9 01       	movw	r24, r18
    2e8e:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2e90:	02 c0       	rjmp	.+4      	; 0x2e96 <_ZN14HardwareSerial5writeEh+0x66>
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	0a 94       	dec	r0
    2e98:	e2 f7       	brpl	.-8      	; 0x2e92 <_ZN14HardwareSerial5writeEh+0x62>
    2e9a:	84 2b       	or	r24, r20
    2e9c:	80 83       	st	Z, r24
  
  return 1;
}
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	1f 91       	pop	r17
    2ea8:	08 95       	ret

00002eaa <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    2eaa:	08 95       	ret

00002eac <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    2eac:	1f 92       	push	r1
    2eae:	0f 92       	push	r0
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	0f 92       	push	r0
    2eb4:	11 24       	eor	r1, r1
    2eb6:	2f 93       	push	r18
    2eb8:	3f 93       	push	r19
    2eba:	4f 93       	push	r20
    2ebc:	8f 93       	push	r24
    2ebe:	9f 93       	push	r25
    2ec0:	ef 93       	push	r30
    2ec2:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    2ec4:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    2ec8:	80 91 2c 06 	lds	r24, 0x062C
    2ecc:	90 91 2d 06 	lds	r25, 0x062D
    2ed0:	01 96       	adiw	r24, 0x01	; 1
    2ed2:	8f 73       	andi	r24, 0x3F	; 63
    2ed4:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    2ed6:	20 91 2e 06 	lds	r18, 0x062E
    2eda:	30 91 2f 06 	lds	r19, 0x062F
    2ede:	82 17       	cp	r24, r18
    2ee0:	93 07       	cpc	r25, r19
    2ee2:	59 f0       	breq	.+22     	; 0x2efa <__vector_18+0x4e>
    buffer->buffer[buffer->head] = c;
    2ee4:	e0 91 2c 06 	lds	r30, 0x062C
    2ee8:	f0 91 2d 06 	lds	r31, 0x062D
    2eec:	e4 51       	subi	r30, 0x14	; 20
    2eee:	fa 4f       	sbci	r31, 0xFA	; 250
    2ef0:	40 83       	st	Z, r20
    buffer->head = i;
    2ef2:	90 93 2d 06 	sts	0x062D, r25
    2ef6:	80 93 2c 06 	sts	0x062C, r24
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    2efa:	ff 91       	pop	r31
    2efc:	ef 91       	pop	r30
    2efe:	9f 91       	pop	r25
    2f00:	8f 91       	pop	r24
    2f02:	4f 91       	pop	r20
    2f04:	3f 91       	pop	r19
    2f06:	2f 91       	pop	r18
    2f08:	0f 90       	pop	r0
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	0f 90       	pop	r0
    2f0e:	1f 90       	pop	r1
    2f10:	18 95       	reti

00002f12 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    2f12:	89 e8       	ldi	r24, 0x89	; 137
    2f14:	95 e0       	ldi	r25, 0x05	; 5
    2f16:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <_ZN14HardwareSerial9availableEv>
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	11 f0       	breq	.+4      	; 0x2f22 <_Z14serialEventRunv+0x10>
    2f1e:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <_Z11serialEventv>
    2f22:	08 95       	ret

00002f24 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    2f24:	1f 92       	push	r1
    2f26:	0f 92       	push	r0
    2f28:	0f b6       	in	r0, 0x3f	; 63
    2f2a:	0f 92       	push	r0
    2f2c:	11 24       	eor	r1, r1
    2f2e:	2f 93       	push	r18
    2f30:	3f 93       	push	r19
    2f32:	8f 93       	push	r24
    2f34:	9f 93       	push	r25
    2f36:	ef 93       	push	r30
    2f38:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    2f3a:	20 91 e8 05 	lds	r18, 0x05E8
    2f3e:	30 91 e9 05 	lds	r19, 0x05E9
    2f42:	80 91 ea 05 	lds	r24, 0x05EA
    2f46:	90 91 eb 05 	lds	r25, 0x05EB
    2f4a:	28 17       	cp	r18, r24
    2f4c:	39 07       	cpc	r19, r25
    2f4e:	31 f4       	brne	.+12     	; 0x2f5c <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    2f50:	e1 ec       	ldi	r30, 0xC1	; 193
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	8f 7d       	andi	r24, 0xDF	; 223
    2f58:	80 83       	st	Z, r24
    2f5a:	14 c0       	rjmp	.+40     	; 0x2f84 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    2f5c:	e0 91 ea 05 	lds	r30, 0x05EA
    2f60:	f0 91 eb 05 	lds	r31, 0x05EB
    2f64:	e8 55       	subi	r30, 0x58	; 88
    2f66:	fa 4f       	sbci	r31, 0xFA	; 250
    2f68:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    2f6a:	80 91 ea 05 	lds	r24, 0x05EA
    2f6e:	90 91 eb 05 	lds	r25, 0x05EB
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	8f 73       	andi	r24, 0x3F	; 63
    2f76:	90 70       	andi	r25, 0x00	; 0
    2f78:	90 93 eb 05 	sts	0x05EB, r25
    2f7c:	80 93 ea 05 	sts	0x05EA, r24
	
  #if defined(UDR0)
    UDR0 = c;
    2f80:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    2f84:	ff 91       	pop	r31
    2f86:	ef 91       	pop	r30
    2f88:	9f 91       	pop	r25
    2f8a:	8f 91       	pop	r24
    2f8c:	3f 91       	pop	r19
    2f8e:	2f 91       	pop	r18
    2f90:	0f 90       	pop	r0
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	0f 90       	pop	r0
    2f96:	1f 90       	pop	r1
    2f98:	18 95       	reti

00002f9a <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
    2f9a:	8f 92       	push	r8
    2f9c:	af 92       	push	r10
    2f9e:	bf 92       	push	r11
    2fa0:	cf 92       	push	r12
    2fa2:	df 92       	push	r13
    2fa4:	ef 92       	push	r14
    2fa6:	ff 92       	push	r15
    2fa8:	0f 93       	push	r16
    2faa:	1f 93       	push	r17
    2fac:	cf 93       	push	r28
    2fae:	df 93       	push	r29
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
    2fb4:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2fb6:	13 82       	std	Z+3, r1	; 0x03
    2fb8:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2fba:	88 ee       	ldi	r24, 0xE8	; 232
    2fbc:	93 e0       	ldi	r25, 0x03	; 3
    2fbe:	a0 e0       	ldi	r26, 0x00	; 0
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	84 83       	std	Z+4, r24	; 0x04
    2fc4:	95 83       	std	Z+5, r25	; 0x05
    2fc6:	a6 83       	std	Z+6, r26	; 0x06
    2fc8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2fca:	8b e2       	ldi	r24, 0x2B	; 43
    2fcc:	92 e0       	ldi	r25, 0x02	; 2
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    2fd2:	75 87       	std	Z+13, r23	; 0x0d
    2fd4:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
    2fd6:	57 87       	std	Z+15, r21	; 0x0f
    2fd8:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    2fda:	31 8b       	std	Z+17, r19	; 0x11
    2fdc:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    2fde:	13 8b       	std	Z+19, r17	; 0x13
    2fe0:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
    2fe2:	f5 8a       	std	Z+21, r15	; 0x15
    2fe4:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
    2fe6:	d7 8a       	std	Z+23, r13	; 0x17
    2fe8:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
    2fea:	b1 8e       	std	Z+25, r11	; 0x19
    2fec:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
    2fee:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
    2ff0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ff2:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    2ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff6:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    2ff8:	88 89       	ldd	r24, Y+16	; 0x10
    2ffa:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    2ffc:	89 89       	ldd	r24, Y+17	; 0x11
    2ffe:	86 8f       	std	Z+30, r24	; 0x1e
}
    3000:	df 91       	pop	r29
    3002:	cf 91       	pop	r28
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	bf 90       	pop	r11
    3012:	af 90       	pop	r10
    3014:	8f 90       	pop	r8
    3016:	08 95       	ret

00003018 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    3018:	2f 92       	push	r2
    301a:	3f 92       	push	r3
    301c:	4f 92       	push	r4
    301e:	5f 92       	push	r5
    3020:	6f 92       	push	r6
    3022:	7f 92       	push	r7
    3024:	8f 92       	push	r8
    3026:	9f 92       	push	r9
    3028:	af 92       	push	r10
    302a:	bf 92       	push	r11
    302c:	cf 92       	push	r12
    302e:	df 92       	push	r13
    3030:	ef 92       	push	r14
    3032:	ff 92       	push	r15
    3034:	0f 93       	push	r16
    3036:	1f 93       	push	r17
    3038:	cf 93       	push	r28
    303a:	df 93       	push	r29
    303c:	8c 01       	movw	r16, r24
    303e:	6a 01       	movw	r12, r20
    3040:	7b 01       	movw	r14, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    3042:	c1 e0       	ldi	r28, 0x01	; 1
    3044:	40 30       	cpi	r20, 0x00	; 0
    3046:	21 ee       	ldi	r18, 0xE1	; 225
    3048:	52 07       	cpc	r21, r18
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	62 07       	cpc	r22, r18
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	72 07       	cpc	r23, r18
    3052:	21 f4       	brne	.+8      	; 0x305c <_ZN14HardwareSerial5beginEm+0x44>
    3054:	c0 e0       	ldi	r28, 0x00	; 0
    3056:	02 c0       	rjmp	.+4      	; 0x305c <_ZN14HardwareSerial5beginEm+0x44>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    3058:	cd 2f       	mov	r28, r29
    305a:	18 c0       	rjmp	.+48     	; 0x308c <_ZN14HardwareSerial5beginEm+0x74>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    305c:	22 24       	eor	r2, r2
    305e:	33 24       	eor	r3, r3
    3060:	23 94       	inc	r2
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3062:	0f 2e       	mov	r0, r31
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	8f 2e       	mov	r8, r31
    3068:	f9 e0       	ldi	r31, 0x09	; 9
    306a:	9f 2e       	mov	r9, r31
    306c:	fd e3       	ldi	r31, 0x3D	; 61
    306e:	af 2e       	mov	r10, r31
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	bf 2e       	mov	r11, r31
    3074:	f0 2d       	mov	r31, r0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3076:	0f 2e       	mov	r0, r31
    3078:	f0 e8       	ldi	r31, 0x80	; 128
    307a:	4f 2e       	mov	r4, r31
    307c:	f4 e8       	ldi	r31, 0x84	; 132
    307e:	5f 2e       	mov	r5, r31
    3080:	fe e1       	ldi	r31, 0x1E	; 30
    3082:	6f 2e       	mov	r6, r31
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	7f 2e       	mov	r7, r31
    3088:	f0 2d       	mov	r31, r0
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    308a:	d0 e0       	ldi	r29, 0x00	; 0
  }
#endif

try_again:
  
  if (use_u2x) {
    308c:	cc 23       	and	r28, r28
    308e:	f1 f0       	breq	.+60     	; 0x30cc <_ZN14HardwareSerial5beginEm+0xb4>
    *_ucsra = 1 << _u2x;
    3090:	d8 01       	movw	r26, r16
    3092:	54 96       	adiw	r26, 0x14	; 20
    3094:	ed 91       	ld	r30, X+
    3096:	fc 91       	ld	r31, X
    3098:	55 97       	sbiw	r26, 0x15	; 21
    309a:	c1 01       	movw	r24, r2
    309c:	5e 96       	adiw	r26, 0x1e	; 30
    309e:	0c 90       	ld	r0, X
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <_ZN14HardwareSerial5beginEm+0x8e>
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	0a 94       	dec	r0
    30a8:	e2 f7       	brpl	.-8      	; 0x30a2 <_ZN14HardwareSerial5beginEm+0x8a>
    30aa:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    30ac:	c5 01       	movw	r24, r10
    30ae:	b4 01       	movw	r22, r8
    30b0:	a7 01       	movw	r20, r14
    30b2:	96 01       	movw	r18, r12
    30b4:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    30b8:	da 01       	movw	r26, r20
    30ba:	c9 01       	movw	r24, r18
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	a1 09       	sbc	r26, r1
    30c0:	b1 09       	sbc	r27, r1
    30c2:	b6 95       	lsr	r27
    30c4:	a7 95       	ror	r26
    30c6:	97 95       	ror	r25
    30c8:	87 95       	ror	r24
    30ca:	15 c0       	rjmp	.+42     	; 0x30f6 <_ZN14HardwareSerial5beginEm+0xde>
  } else {
    *_ucsra = 0;
    30cc:	d8 01       	movw	r26, r16
    30ce:	54 96       	adiw	r26, 0x14	; 20
    30d0:	ed 91       	ld	r30, X+
    30d2:	fc 91       	ld	r31, X
    30d4:	55 97       	sbiw	r26, 0x15	; 21
    30d6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    30d8:	c3 01       	movw	r24, r6
    30da:	b2 01       	movw	r22, r4
    30dc:	a7 01       	movw	r20, r14
    30de:	96 01       	movw	r18, r12
    30e0:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    30e4:	da 01       	movw	r26, r20
    30e6:	c9 01       	movw	r24, r18
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	a1 09       	sbc	r26, r1
    30ec:	b1 09       	sbc	r27, r1
    30ee:	b6 95       	lsr	r27
    30f0:	a7 95       	ror	r26
    30f2:	97 95       	ror	r25
    30f4:	87 95       	ror	r24
  }
  
  if ((baud_setting > 4095) && use_u2x)
    30f6:	b0 e1       	ldi	r27, 0x10	; 16
    30f8:	80 30       	cpi	r24, 0x00	; 0
    30fa:	9b 07       	cpc	r25, r27
    30fc:	18 f0       	brcs	.+6      	; 0x3104 <_ZN14HardwareSerial5beginEm+0xec>
    30fe:	cc 23       	and	r28, r28
    3100:	09 f0       	breq	.+2      	; 0x3104 <_ZN14HardwareSerial5beginEm+0xec>
    3102:	aa cf       	rjmp	.-172    	; 0x3058 <_ZN14HardwareSerial5beginEm+0x40>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3104:	d8 01       	movw	r26, r16
    3106:	50 96       	adiw	r26, 0x10	; 16
    3108:	ed 91       	ld	r30, X+
    310a:	fc 91       	ld	r31, X
    310c:	51 97       	sbiw	r26, 0x11	; 17
    310e:	90 83       	st	Z, r25
  *_ubrrl = baud_setting;
    3110:	52 96       	adiw	r26, 0x12	; 18
    3112:	ed 91       	ld	r30, X+
    3114:	fc 91       	ld	r31, X
    3116:	53 97       	sbiw	r26, 0x13	; 19
    3118:	80 83       	st	Z, r24

  sbi(*_ucsrb, _rxen);
    311a:	56 96       	adiw	r26, 0x16	; 22
    311c:	ed 91       	ld	r30, X+
    311e:	fc 91       	ld	r31, X
    3120:	57 97       	sbiw	r26, 0x17	; 23
    3122:	40 81       	ld	r20, Z
    3124:	21 e0       	ldi	r18, 0x01	; 1
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	c9 01       	movw	r24, r18
    312a:	5a 96       	adiw	r26, 0x1a	; 26
    312c:	0c 90       	ld	r0, X
    312e:	5a 97       	sbiw	r26, 0x1a	; 26
    3130:	02 c0       	rjmp	.+4      	; 0x3136 <_ZN14HardwareSerial5beginEm+0x11e>
    3132:	88 0f       	add	r24, r24
    3134:	99 1f       	adc	r25, r25
    3136:	0a 94       	dec	r0
    3138:	e2 f7       	brpl	.-8      	; 0x3132 <_ZN14HardwareSerial5beginEm+0x11a>
    313a:	84 2b       	or	r24, r20
    313c:	80 83       	st	Z, r24
  sbi(*_ucsrb, _txen);
    313e:	56 96       	adiw	r26, 0x16	; 22
    3140:	ed 91       	ld	r30, X+
    3142:	fc 91       	ld	r31, X
    3144:	57 97       	sbiw	r26, 0x17	; 23
    3146:	40 81       	ld	r20, Z
    3148:	c9 01       	movw	r24, r18
    314a:	5b 96       	adiw	r26, 0x1b	; 27
    314c:	0c 90       	ld	r0, X
    314e:	5b 97       	sbiw	r26, 0x1b	; 27
    3150:	02 c0       	rjmp	.+4      	; 0x3156 <_ZN14HardwareSerial5beginEm+0x13e>
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	0a 94       	dec	r0
    3158:	e2 f7       	brpl	.-8      	; 0x3152 <_ZN14HardwareSerial5beginEm+0x13a>
    315a:	84 2b       	or	r24, r20
    315c:	80 83       	st	Z, r24
  sbi(*_ucsrb, _rxcie);
    315e:	56 96       	adiw	r26, 0x16	; 22
    3160:	ed 91       	ld	r30, X+
    3162:	fc 91       	ld	r31, X
    3164:	57 97       	sbiw	r26, 0x17	; 23
    3166:	40 81       	ld	r20, Z
    3168:	c9 01       	movw	r24, r18
    316a:	5c 96       	adiw	r26, 0x1c	; 28
    316c:	0c 90       	ld	r0, X
    316e:	5c 97       	sbiw	r26, 0x1c	; 28
    3170:	02 c0       	rjmp	.+4      	; 0x3176 <_ZN14HardwareSerial5beginEm+0x15e>
    3172:	88 0f       	add	r24, r24
    3174:	99 1f       	adc	r25, r25
    3176:	0a 94       	dec	r0
    3178:	e2 f7       	brpl	.-8      	; 0x3172 <_ZN14HardwareSerial5beginEm+0x15a>
    317a:	84 2b       	or	r24, r20
    317c:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    317e:	56 96       	adiw	r26, 0x16	; 22
    3180:	ed 91       	ld	r30, X+
    3182:	fc 91       	ld	r31, X
    3184:	57 97       	sbiw	r26, 0x17	; 23
    3186:	80 81       	ld	r24, Z
    3188:	5d 96       	adiw	r26, 0x1d	; 29
    318a:	0c 90       	ld	r0, X
    318c:	5d 97       	sbiw	r26, 0x1d	; 29
    318e:	02 c0       	rjmp	.+4      	; 0x3194 <_ZN14HardwareSerial5beginEm+0x17c>
    3190:	22 0f       	add	r18, r18
    3192:	33 1f       	adc	r19, r19
    3194:	0a 94       	dec	r0
    3196:	e2 f7       	brpl	.-8      	; 0x3190 <_ZN14HardwareSerial5beginEm+0x178>
    3198:	20 95       	com	r18
    319a:	28 23       	and	r18, r24
    319c:	20 83       	st	Z, r18
}
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	1f 91       	pop	r17
    31a4:	0f 91       	pop	r16
    31a6:	ff 90       	pop	r15
    31a8:	ef 90       	pop	r14
    31aa:	df 90       	pop	r13
    31ac:	cf 90       	pop	r12
    31ae:	bf 90       	pop	r11
    31b0:	af 90       	pop	r10
    31b2:	9f 90       	pop	r9
    31b4:	8f 90       	pop	r8
    31b6:	7f 90       	pop	r7
    31b8:	6f 90       	pop	r6
    31ba:	5f 90       	pop	r5
    31bc:	4f 90       	pop	r4
    31be:	3f 90       	pop	r3
    31c0:	2f 90       	pop	r2
    31c2:	08 95       	ret

000031c4 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    31c4:	cf 93       	push	r28
    31c6:	df 93       	push	r29
    31c8:	ec 01       	movw	r28, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    31ca:	ee 85       	ldd	r30, Y+14	; 0x0e
    31cc:	ff 85       	ldd	r31, Y+15	; 0x0f
    31ce:	df 01       	movw	r26, r30
    31d0:	a0 5c       	subi	r26, 0xC0	; 192
    31d2:	bf 4f       	sbci	r27, 0xFF	; 255
    31d4:	ee 5b       	subi	r30, 0xBE	; 190
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	8d 91       	ld	r24, X+
    31da:	9c 91       	ld	r25, X
    31dc:	11 97       	sbiw	r26, 0x01	; 1
    31de:	20 81       	ld	r18, Z
    31e0:	31 81       	ldd	r19, Z+1	; 0x01
    31e2:	82 17       	cp	r24, r18
    31e4:	93 07       	cpc	r25, r19
    31e6:	c1 f7       	brne	.-16     	; 0x31d8 <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
    31e8:	ee 89       	ldd	r30, Y+22	; 0x16
    31ea:	ff 89       	ldd	r31, Y+23	; 0x17
    31ec:	40 81       	ld	r20, Z
    31ee:	21 e0       	ldi	r18, 0x01	; 1
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	c9 01       	movw	r24, r18
    31f4:	0a 8c       	ldd	r0, Y+26	; 0x1a
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <_ZN14HardwareSerial3endEv+0x38>
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	0a 94       	dec	r0
    31fe:	e2 f7       	brpl	.-8      	; 0x31f8 <_ZN14HardwareSerial3endEv+0x34>
    3200:	80 95       	com	r24
    3202:	84 23       	and	r24, r20
    3204:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
    3206:	ee 89       	ldd	r30, Y+22	; 0x16
    3208:	ff 89       	ldd	r31, Y+23	; 0x17
    320a:	40 81       	ld	r20, Z
    320c:	c9 01       	movw	r24, r18
    320e:	0b 8c       	ldd	r0, Y+27	; 0x1b
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <_ZN14HardwareSerial3endEv+0x52>
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	0a 94       	dec	r0
    3218:	e2 f7       	brpl	.-8      	; 0x3212 <_ZN14HardwareSerial3endEv+0x4e>
    321a:	80 95       	com	r24
    321c:	84 23       	and	r24, r20
    321e:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
    3220:	ee 89       	ldd	r30, Y+22	; 0x16
    3222:	ff 89       	ldd	r31, Y+23	; 0x17
    3224:	40 81       	ld	r20, Z
    3226:	c9 01       	movw	r24, r18
    3228:	0c 8c       	ldd	r0, Y+28	; 0x1c
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <_ZN14HardwareSerial3endEv+0x6c>
    322c:	88 0f       	add	r24, r24
    322e:	99 1f       	adc	r25, r25
    3230:	0a 94       	dec	r0
    3232:	e2 f7       	brpl	.-8      	; 0x322c <_ZN14HardwareSerial3endEv+0x68>
    3234:	80 95       	com	r24
    3236:	84 23       	and	r24, r20
    3238:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
    323a:	ee 89       	ldd	r30, Y+22	; 0x16
    323c:	ff 89       	ldd	r31, Y+23	; 0x17
    323e:	80 81       	ld	r24, Z
    3240:	0d 8c       	ldd	r0, Y+29	; 0x1d
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <_ZN14HardwareSerial3endEv+0x84>
    3244:	22 0f       	add	r18, r18
    3246:	33 1f       	adc	r19, r19
    3248:	0a 94       	dec	r0
    324a:	e2 f7       	brpl	.-8      	; 0x3244 <_ZN14HardwareSerial3endEv+0x80>
    324c:	20 95       	com	r18
    324e:	28 23       	and	r18, r24
    3250:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    3252:	8c 85       	ldd	r24, Y+12	; 0x0c
    3254:	9d 85       	ldd	r25, Y+13	; 0x0d
    3256:	fc 01       	movw	r30, r24
    3258:	ee 5b       	subi	r30, 0xBE	; 190
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	20 81       	ld	r18, Z
    325e:	31 81       	ldd	r19, Z+1	; 0x01
    3260:	80 5c       	subi	r24, 0xC0	; 192
    3262:	9f 4f       	sbci	r25, 0xFF	; 255
    3264:	fc 01       	movw	r30, r24
    3266:	31 83       	std	Z+1, r19	; 0x01
    3268:	20 83       	st	Z, r18
}
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	08 95       	ret

00003270 <_ZN14HardwareSerialcvbEv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	08 95       	ret

00003274 <_GLOBAL__sub_I_rx_buffer>:
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    3274:	8f 92       	push	r8
    3276:	af 92       	push	r10
    3278:	bf 92       	push	r11
    327a:	cf 92       	push	r12
    327c:	df 92       	push	r13
    327e:	ef 92       	push	r14
    3280:	ff 92       	push	r15
    3282:	0f 93       	push	r16
    3284:	1f 93       	push	r17
    3286:	00 d0       	rcall	.+0      	; 0x3288 <_GLOBAL__sub_I_rx_buffer+0x14>
    3288:	00 d0       	rcall	.+0      	; 0x328a <_GLOBAL__sub_I_rx_buffer+0x16>
    328a:	ed b7       	in	r30, 0x3d	; 61
    328c:	fe b7       	in	r31, 0x3e	; 62
    328e:	31 96       	adiw	r30, 0x01	; 1
    3290:	83 e0       	ldi	r24, 0x03	; 3
    3292:	ad b7       	in	r26, 0x3d	; 61
    3294:	be b7       	in	r27, 0x3e	; 62
    3296:	11 96       	adiw	r26, 0x01	; 1
    3298:	8c 93       	st	X, r24
    329a:	87 e0       	ldi	r24, 0x07	; 7
    329c:	81 83       	std	Z+1, r24	; 0x01
    329e:	85 e0       	ldi	r24, 0x05	; 5
    32a0:	82 83       	std	Z+2, r24	; 0x02
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	83 83       	std	Z+3, r24	; 0x03
    32a6:	89 e8       	ldi	r24, 0x89	; 137
    32a8:	95 e0       	ldi	r25, 0x05	; 5
    32aa:	6c ee       	ldi	r22, 0xEC	; 236
    32ac:	75 e0       	ldi	r23, 0x05	; 5
    32ae:	48 ea       	ldi	r20, 0xA8	; 168
    32b0:	55 e0       	ldi	r21, 0x05	; 5
    32b2:	25 ec       	ldi	r18, 0xC5	; 197
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	04 ec       	ldi	r16, 0xC4	; 196
    32b8:	10 e0       	ldi	r17, 0x00	; 0
    32ba:	0f 2e       	mov	r0, r31
    32bc:	f0 ec       	ldi	r31, 0xC0	; 192
    32be:	ef 2e       	mov	r14, r31
    32c0:	ff 24       	eor	r15, r15
    32c2:	f0 2d       	mov	r31, r0
    32c4:	0f 2e       	mov	r0, r31
    32c6:	f1 ec       	ldi	r31, 0xC1	; 193
    32c8:	cf 2e       	mov	r12, r31
    32ca:	dd 24       	eor	r13, r13
    32cc:	f0 2d       	mov	r31, r0
    32ce:	0f 2e       	mov	r0, r31
    32d0:	f6 ec       	ldi	r31, 0xC6	; 198
    32d2:	af 2e       	mov	r10, r31
    32d4:	bb 24       	eor	r11, r11
    32d6:	f0 2d       	mov	r31, r0
    32d8:	88 24       	eor	r8, r8
    32da:	68 94       	set
    32dc:	82 f8       	bld	r8, 2
    32de:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	1f 91       	pop	r17
    32ec:	0f 91       	pop	r16
    32ee:	ff 90       	pop	r15
    32f0:	ef 90       	pop	r14
    32f2:	df 90       	pop	r13
    32f4:	cf 90       	pop	r12
    32f6:	bf 90       	pop	r11
    32f8:	af 90       	pop	r10
    32fa:	8f 90       	pop	r8
    32fc:	08 95       	ret

000032fe <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    32fe:	8f 92       	push	r8
    3300:	9f 92       	push	r9
    3302:	af 92       	push	r10
    3304:	bf 92       	push	r11
    3306:	cf 92       	push	r12
    3308:	df 92       	push	r13
    330a:	ef 92       	push	r14
    330c:	ff 92       	push	r15
    330e:	0f 93       	push	r16
    3310:	1f 93       	push	r17
    3312:	cf 93       	push	r28
    3314:	df 93       	push	r29
    3316:	4c 01       	movw	r8, r24
    3318:	7b 01       	movw	r14, r22
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    331a:	aa 24       	eor	r10, r10
    331c:	bb 24       	eor	r11, r11
    331e:	68 94       	set
    3320:	a1 f8       	bld	r10, 1
    3322:	a8 0e       	add	r10, r24
    3324:	b9 1e       	adc	r11, r25
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    3326:	00 e0       	ldi	r16, 0x00	; 0
    3328:	10 e0       	ldi	r17, 0x00	; 0
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    332a:	cc 24       	eor	r12, r12
    332c:	dd 24       	eor	r13, r13
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    332e:	f5 01       	movw	r30, r10
    3330:	61 91       	ld	r22, Z+
    3332:	5f 01       	movw	r10, r30
    3334:	c7 01       	movw	r24, r14
    3336:	4a e0       	ldi	r20, 0x0A	; 10
    3338:	50 e0       	ldi	r21, 0x00	; 0
    333a:	0e 94 13 1c 	call	0x3826	; 0x3826 <_ZN5Print5printEhi>
    333e:	ec 01       	movw	r28, r24
        n += p.print('.');
    3340:	c7 01       	movw	r24, r14
    3342:	6e e2       	ldi	r22, 0x2E	; 46
    3344:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
    3348:	8c 0f       	add	r24, r28
    334a:	9d 1f       	adc	r25, r29
        n += p.print('.');
    334c:	c8 0e       	add	r12, r24
    334e:	d9 1e       	adc	r13, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    3350:	0f 5f       	subi	r16, 0xFF	; 255
    3352:	1f 4f       	sbci	r17, 0xFF	; 255
    3354:	03 30       	cpi	r16, 0x03	; 3
    3356:	11 05       	cpc	r17, r1
    3358:	51 f7       	brne	.-44     	; 0x332e <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    335a:	c7 01       	movw	r24, r14
    335c:	f4 01       	movw	r30, r8
    335e:	65 81       	ldd	r22, Z+5	; 0x05
    3360:	4a e0       	ldi	r20, 0x0A	; 10
    3362:	50 e0       	ldi	r21, 0x00	; 0
    3364:	0e 94 13 1c 	call	0x3826	; 0x3826 <_ZN5Print5printEhi>
    3368:	8c 0d       	add	r24, r12
    336a:	9d 1d       	adc	r25, r13
    return n;
}
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	1f 91       	pop	r17
    3372:	0f 91       	pop	r16
    3374:	ff 90       	pop	r15
    3376:	ef 90       	pop	r14
    3378:	df 90       	pop	r13
    337a:	cf 90       	pop	r12
    337c:	bf 90       	pop	r11
    337e:	af 90       	pop	r10
    3380:	9f 90       	pop	r9
    3382:	8f 90       	pop	r8
    3384:	08 95       	ret

00003386 <_ZN9IPAddressC1Ev>:

#include "Arduino.h"
#include "IPAddress.h"

IPAddress::IPAddress()
    3386:	fc 01       	movw	r30, r24
    3388:	8b e4       	ldi	r24, 0x4B	; 75
    338a:	92 e0       	ldi	r25, 0x02	; 2
    338c:	91 83       	std	Z+1, r25	; 0x01
    338e:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
    3390:	12 82       	std	Z+2, r1	; 0x02
    3392:	13 82       	std	Z+3, r1	; 0x03
    3394:	14 82       	std	Z+4, r1	; 0x04
    3396:	15 82       	std	Z+5, r1	; 0x05
}
    3398:	08 95       	ret

0000339a <_ZN9IPAddressC1Ehhhh>:

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    339a:	0f 93       	push	r16
    339c:	fc 01       	movw	r30, r24
    339e:	8b e4       	ldi	r24, 0x4B	; 75
    33a0:	92 e0       	ldi	r25, 0x02	; 2
    33a2:	91 83       	std	Z+1, r25	; 0x01
    33a4:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    33a6:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
    33a8:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
    33aa:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
    33ac:	05 83       	std	Z+5, r16	; 0x05
}
    33ae:	0f 91       	pop	r16
    33b0:	08 95       	ret

000033b2 <_ZN9IPAddressC1Em>:

IPAddress::IPAddress(uint32_t address)
    33b2:	fc 01       	movw	r30, r24
    33b4:	8b e4       	ldi	r24, 0x4B	; 75
    33b6:	92 e0       	ldi	r25, 0x02	; 2
    33b8:	91 83       	std	Z+1, r25	; 0x01
    33ba:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    33bc:	42 83       	std	Z+2, r20	; 0x02
    33be:	53 83       	std	Z+3, r21	; 0x03
    33c0:	64 83       	std	Z+4, r22	; 0x04
    33c2:	75 83       	std	Z+5, r23	; 0x05
}
    33c4:	08 95       	ret

000033c6 <_ZN9IPAddressC1EPKh>:

IPAddress::IPAddress(const uint8_t *address)
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	fc 01       	movw	r30, r24
    33cc:	8b e4       	ldi	r24, 0x4B	; 75
    33ce:	92 e0       	ldi	r25, 0x02	; 2
    33d0:	91 83       	std	Z+1, r25	; 0x01
    33d2:	80 83       	st	Z, r24
{
    memcpy(_address, address, sizeof(_address));
    33d4:	eb 01       	movw	r28, r22
    33d6:	88 81       	ld	r24, Y
    33d8:	99 81       	ldd	r25, Y+1	; 0x01
    33da:	aa 81       	ldd	r26, Y+2	; 0x02
    33dc:	bb 81       	ldd	r27, Y+3	; 0x03
    33de:	82 83       	std	Z+2, r24	; 0x02
    33e0:	93 83       	std	Z+3, r25	; 0x03
    33e2:	a4 83       	std	Z+4, r26	; 0x04
    33e4:	b5 83       	std	Z+5, r27	; 0x05
}
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	08 95       	ret

000033ec <_ZN9IPAddressaSEPKh>:

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address, address, sizeof(_address));
    33ec:	fb 01       	movw	r30, r22
    33ee:	40 81       	ld	r20, Z
    33f0:	51 81       	ldd	r21, Z+1	; 0x01
    33f2:	62 81       	ldd	r22, Z+2	; 0x02
    33f4:	73 81       	ldd	r23, Z+3	; 0x03
    33f6:	fc 01       	movw	r30, r24
    33f8:	42 83       	std	Z+2, r20	; 0x02
    33fa:	53 83       	std	Z+3, r21	; 0x03
    33fc:	64 83       	std	Z+4, r22	; 0x04
    33fe:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
    3400:	08 95       	ret

00003402 <_ZN9IPAddressaSEm>:

IPAddress& IPAddress::operator=(uint32_t address)
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
    3402:	fc 01       	movw	r30, r24
    3404:	42 83       	std	Z+2, r20	; 0x02
    3406:	53 83       	std	Z+3, r21	; 0x03
    3408:	64 83       	std	Z+4, r22	; 0x04
    340a:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
    340c:	08 95       	ret

0000340e <_ZN9IPAddresseqEPKh>:

bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
    340e:	9c 01       	movw	r18, r24
    3410:	2e 5f       	subi	r18, 0xFE	; 254
    3412:	3f 4f       	sbci	r19, 0xFF	; 255
    3414:	cb 01       	movw	r24, r22
    3416:	b9 01       	movw	r22, r18
    3418:	44 e0       	ldi	r20, 0x04	; 4
    341a:	50 e0       	ldi	r21, 0x00	; 0
    341c:	0e 94 8e 44 	call	0x891c	; 0x891c <memcmp>
    3420:	28 2f       	mov	r18, r24
    3422:	39 2f       	mov	r19, r25
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	21 15       	cp	r18, r1
    3428:	31 05       	cpc	r19, r1
    342a:	09 f0       	breq	.+2      	; 0x342e <_ZN9IPAddresseqEPKh+0x20>
    342c:	80 e0       	ldi	r24, 0x00	; 0
}
    342e:	08 95       	ret

00003430 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    3430:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    3432:	80 e3       	ldi	r24, 0x30	; 48
    3434:	96 e0       	ldi	r25, 0x06	; 6
    3436:	60 e0       	ldi	r22, 0x00	; 0
    3438:	40 e0       	ldi	r20, 0x00	; 0
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	00 e0       	ldi	r16, 0x00	; 0
    343e:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN9IPAddressC1Ehhhh>
    3442:	0f 91       	pop	r16
    3444:	08 95       	ret

00003446 <_Znwj>:
#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    3446:	0e 94 f7 41 	call	0x83ee	; 0x83ee <malloc>
}
    344a:	08 95       	ret

0000344c <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    344c:	0e 94 8d 42 	call	0x851a	; 0x851a <free>
} 
    3450:	08 95       	ret

00003452 <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    3452:	21 e0       	ldi	r18, 0x01	; 1
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	fc 01       	movw	r30, r24
    3458:	80 81       	ld	r24, Z
    345a:	88 23       	and	r24, r24
    345c:	11 f0       	breq	.+4      	; 0x3462 <__cxa_guard_acquire+0x10>
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	82 2f       	mov	r24, r18
    3464:	93 2f       	mov	r25, r19
    3466:	08 95       	ret

00003468 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    3468:	21 e0       	ldi	r18, 0x01	; 1
    346a:	fc 01       	movw	r30, r24
    346c:	20 83       	st	Z, r18
    346e:	08 95       	ret

00003470 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    3470:	08 95       	ret

00003472 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    3472:	08 95       	ret

00003474 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    3474:	cf 92       	push	r12
    3476:	df 92       	push	r13
    3478:	ef 92       	push	r14
    347a:	ff 92       	push	r15
    347c:	0f 93       	push	r16
    347e:	1f 93       	push	r17
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	6c 01       	movw	r12, r24
    3486:	7b 01       	movw	r14, r22
    3488:	ea 01       	movw	r28, r20
  size_t n = 0;
  while (size--) {
    348a:	20 97       	sbiw	r28, 0x00	; 0
    348c:	91 f0       	breq	.+36     	; 0x34b2 <_ZN5Print5writeEPKhj+0x3e>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    348e:	00 e0       	ldi	r16, 0x00	; 0
    3490:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    n += write(*buffer++);
    3492:	d7 01       	movw	r26, r14
    3494:	6d 91       	ld	r22, X+
    3496:	7d 01       	movw	r14, r26
    3498:	d6 01       	movw	r26, r12
    349a:	ed 91       	ld	r30, X+
    349c:	fc 91       	ld	r31, X
    349e:	01 90       	ld	r0, Z+
    34a0:	f0 81       	ld	r31, Z
    34a2:	e0 2d       	mov	r30, r0
    34a4:	c6 01       	movw	r24, r12
    34a6:	09 95       	icall
    34a8:	08 0f       	add	r16, r24
    34aa:	19 1f       	adc	r17, r25
    34ac:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    34ae:	89 f7       	brne	.-30     	; 0x3492 <_ZN5Print5writeEPKhj+0x1e>
    34b0:	02 c0       	rjmp	.+4      	; 0x34b6 <_ZN5Print5writeEPKhj+0x42>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    34b2:	00 e0       	ldi	r16, 0x00	; 0
    34b4:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    34b6:	80 2f       	mov	r24, r16
    34b8:	91 2f       	mov	r25, r17
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	1f 91       	pop	r17
    34c0:	0f 91       	pop	r16
    34c2:	ff 90       	pop	r15
    34c4:	ef 90       	pop	r14
    34c6:	df 90       	pop	r13
    34c8:	cf 90       	pop	r12
    34ca:	08 95       	ret

000034cc <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    34cc:	ef 92       	push	r14
    34ce:	ff 92       	push	r15
    34d0:	0f 93       	push	r16
    34d2:	1f 93       	push	r17
    34d4:	cf 93       	push	r28
    34d6:	df 93       	push	r29
    34d8:	7c 01       	movw	r14, r24
    34da:	eb 01       	movw	r28, r22
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    34dc:	fb 01       	movw	r30, r22
    34de:	64 91       	lpm	r22, Z
    if (c == 0) break;
    34e0:	66 23       	and	r22, r22
    34e2:	91 f0       	breq	.+36     	; 0x3508 <_ZN5Print5printEPK19__FlashStringHelper+0x3c>
size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    34e4:	21 96       	adiw	r28, 0x01	; 1
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
    34e6:	00 e0       	ldi	r16, 0x00	; 0
    34e8:	10 e0       	ldi	r17, 0x00	; 0
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
    34ea:	f7 01       	movw	r30, r14
    34ec:	a0 81       	ld	r26, Z
    34ee:	b1 81       	ldd	r27, Z+1	; 0x01
    34f0:	ed 91       	ld	r30, X+
    34f2:	fc 91       	ld	r31, X
    34f4:	c7 01       	movw	r24, r14
    34f6:	09 95       	icall
    34f8:	08 0f       	add	r16, r24
    34fa:	19 1f       	adc	r17, r25
size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    34fc:	fe 01       	movw	r30, r28
    34fe:	21 96       	adiw	r28, 0x01	; 1
    3500:	64 91       	lpm	r22, Z
    if (c == 0) break;
    3502:	66 23       	and	r22, r22
    3504:	91 f7       	brne	.-28     	; 0x34ea <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
    3506:	02 c0       	rjmp	.+4      	; 0x350c <_ZN5Print5printEPK19__FlashStringHelper+0x40>
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
  size_t n = 0;
    3508:	00 e0       	ldi	r16, 0x00	; 0
    350a:	10 e0       	ldi	r17, 0x00	; 0
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    350c:	80 2f       	mov	r24, r16
    350e:	91 2f       	mov	r25, r17
    3510:	df 91       	pop	r29
    3512:	cf 91       	pop	r28
    3514:	1f 91       	pop	r17
    3516:	0f 91       	pop	r16
    3518:	ff 90       	pop	r15
    351a:	ef 90       	pop	r14
    351c:	08 95       	ret

0000351e <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    351e:	af 92       	push	r10
    3520:	bf 92       	push	r11
    3522:	cf 92       	push	r12
    3524:	df 92       	push	r13
    3526:	ef 92       	push	r14
    3528:	ff 92       	push	r15
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	5c 01       	movw	r10, r24
    3534:	6b 01       	movw	r12, r22
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    3536:	db 01       	movw	r26, r22
    3538:	14 96       	adiw	r26, 0x04	; 4
    353a:	8d 91       	ld	r24, X+
    353c:	9c 91       	ld	r25, X
    353e:	15 97       	sbiw	r26, 0x05	; 5
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	e1 f0       	breq	.+56     	; 0x357c <_ZN5Print5printERK6String+0x5e>
    3544:	00 e0       	ldi	r16, 0x00	; 0
    3546:	10 e0       	ldi	r17, 0x00	; 0
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    3548:	ee 24       	eor	r14, r14
    354a:	ff 24       	eor	r15, r15
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    354c:	d5 01       	movw	r26, r10
    354e:	ed 91       	ld	r30, X+
    3550:	fc 91       	ld	r31, X
    3552:	c0 81       	ld	r28, Z
    3554:	d1 81       	ldd	r29, Z+1	; 0x01
    3556:	c6 01       	movw	r24, r12
    3558:	b8 01       	movw	r22, r16
    355a:	0e 94 43 29 	call	0x5286	; 0x5286 <_ZNK6StringixEj>
    355e:	68 2f       	mov	r22, r24
    3560:	c5 01       	movw	r24, r10
    3562:	fe 01       	movw	r30, r28
    3564:	09 95       	icall
    3566:	e8 0e       	add	r14, r24
    3568:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    356a:	0f 5f       	subi	r16, 0xFF	; 255
    356c:	1f 4f       	sbci	r17, 0xFF	; 255
    356e:	f6 01       	movw	r30, r12
    3570:	84 81       	ldd	r24, Z+4	; 0x04
    3572:	95 81       	ldd	r25, Z+5	; 0x05
    3574:	08 17       	cp	r16, r24
    3576:	19 07       	cpc	r17, r25
    3578:	48 f3       	brcs	.-46     	; 0x354c <_ZN5Print5printERK6String+0x2e>
    357a:	02 c0       	rjmp	.+4      	; 0x3580 <_ZN5Print5printERK6String+0x62>
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    357c:	ee 24       	eor	r14, r14
    357e:	ff 24       	eor	r15, r15
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
  }
  return n;
}
    3580:	8e 2d       	mov	r24, r14
    3582:	9f 2d       	mov	r25, r15
    3584:	df 91       	pop	r29
    3586:	cf 91       	pop	r28
    3588:	1f 91       	pop	r17
    358a:	0f 91       	pop	r16
    358c:	ff 90       	pop	r15
    358e:	ef 90       	pop	r14
    3590:	df 90       	pop	r13
    3592:	cf 90       	pop	r12
    3594:	bf 90       	pop	r11
    3596:	af 90       	pop	r10
    3598:	08 95       	ret

0000359a <_ZN5Print5printEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    359a:	e6 2f       	mov	r30, r22
    359c:	f7 2f       	mov	r31, r23
    359e:	df 01       	movw	r26, r30
    35a0:	0d 90       	ld	r0, X+
    35a2:	00 20       	and	r0, r0
    35a4:	e9 f7       	brne	.-6      	; 0x35a0 <_ZN5Print5printEPKc+0x6>
    35a6:	ad 01       	movw	r20, r26
    35a8:	41 50       	subi	r20, 0x01	; 1
    35aa:	50 40       	sbci	r21, 0x00	; 0
    35ac:	4e 1b       	sub	r20, r30
    35ae:	5f 0b       	sbc	r21, r31
    35b0:	dc 01       	movw	r26, r24
    35b2:	ed 91       	ld	r30, X+
    35b4:	fc 91       	ld	r31, X
    35b6:	02 80       	ldd	r0, Z+2	; 0x02
    35b8:	f3 81       	ldd	r31, Z+3	; 0x03
    35ba:	e0 2d       	mov	r30, r0
    35bc:	09 95       	icall

size_t Print::print(const char str[])
{
  return write(str);
}
    35be:	08 95       	ret

000035c0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    35c0:	dc 01       	movw	r26, r24
    35c2:	ed 91       	ld	r30, X+
    35c4:	fc 91       	ld	r31, X
    35c6:	01 90       	ld	r0, Z+
    35c8:	f0 81       	ld	r31, Z
    35ca:	e0 2d       	mov	r30, r0
    35cc:	09 95       	icall
}
    35ce:	08 95       	ret

000035d0 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    35d0:	9c 01       	movw	r18, r24
    35d2:	cb 01       	movw	r24, r22
  return x.printTo(*this);
    35d4:	db 01       	movw	r26, r22
    35d6:	ed 91       	ld	r30, X+
    35d8:	fc 91       	ld	r31, X
    35da:	01 90       	ld	r0, Z+
    35dc:	f0 81       	ld	r31, Z
    35de:	e0 2d       	mov	r30, r0
    35e0:	b9 01       	movw	r22, r18
    35e2:	09 95       	icall
}
    35e4:	08 95       	ret

000035e6 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    35e6:	0f 93       	push	r16
    35e8:	1f 93       	push	r17
    35ea:	cf 93       	push	r28
    35ec:	df 93       	push	r29
    35ee:	8c 01       	movw	r16, r24
  size_t n = print('\r');
    35f0:	6d e0       	ldi	r22, 0x0D	; 13
    35f2:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5printEc>
    35f6:	ec 01       	movw	r28, r24
  n += print('\n');
    35f8:	c8 01       	movw	r24, r16
    35fa:	6a e0       	ldi	r22, 0x0A	; 10
    35fc:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5printEc>
    3600:	8c 0f       	add	r24, r28
    3602:	9d 1f       	adc	r25, r29
  return n;
}
    3604:	df 91       	pop	r29
    3606:	cf 91       	pop	r28
    3608:	1f 91       	pop	r17
    360a:	0f 91       	pop	r16
    360c:	08 95       	ret

0000360e <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    360e:	0f 93       	push	r16
    3610:	1f 93       	push	r17
    3612:	cf 93       	push	r28
    3614:	df 93       	push	r29
    3616:	8c 01       	movw	r16, r24
  size_t n = print(ifsh);
    3618:	0e 94 66 1a 	call	0x34cc	; 0x34cc <_ZN5Print5printEPK19__FlashStringHelper>
    361c:	ec 01       	movw	r28, r24
  n += println();
    361e:	c8 01       	movw	r24, r16
    3620:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_ZN5Print7printlnEv>
    3624:	8c 0f       	add	r24, r28
    3626:	9d 1f       	adc	r25, r29
  return n;
}
    3628:	df 91       	pop	r29
    362a:	cf 91       	pop	r28
    362c:	1f 91       	pop	r17
    362e:	0f 91       	pop	r16
    3630:	08 95       	ret

00003632 <_ZN5Print7printlnERK6String>:
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    3632:	0f 93       	push	r16
    3634:	1f 93       	push	r17
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	8c 01       	movw	r16, r24
  size_t n = print(s);
    363c:	0e 94 8f 1a 	call	0x351e	; 0x351e <_ZN5Print5printERK6String>
    3640:	ec 01       	movw	r28, r24
  n += println();
    3642:	c8 01       	movw	r24, r16
    3644:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_ZN5Print7printlnEv>
    3648:	8c 0f       	add	r24, r28
    364a:	9d 1f       	adc	r25, r29
  return n;
}
    364c:	df 91       	pop	r29
    364e:	cf 91       	pop	r28
    3650:	1f 91       	pop	r17
    3652:	0f 91       	pop	r16
    3654:	08 95       	ret

00003656 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    3656:	0f 93       	push	r16
    3658:	1f 93       	push	r17
    365a:	cf 93       	push	r28
    365c:	df 93       	push	r29
    365e:	8c 01       	movw	r16, r24
  size_t n = print(c);
    3660:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
    3664:	ec 01       	movw	r28, r24
  n += println();
    3666:	c8 01       	movw	r24, r16
    3668:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_ZN5Print7printlnEv>
    366c:	8c 0f       	add	r24, r28
    366e:	9d 1f       	adc	r25, r29
  return n;
}
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	08 95       	ret

0000367a <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    367a:	0f 93       	push	r16
    367c:	1f 93       	push	r17
    367e:	cf 93       	push	r28
    3680:	df 93       	push	r29
    3682:	8c 01       	movw	r16, r24
  size_t n = print(c);
    3684:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5printEc>
    3688:	ec 01       	movw	r28, r24
  n += println();
    368a:	c8 01       	movw	r24, r16
    368c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_ZN5Print7printlnEv>
    3690:	8c 0f       	add	r24, r28
    3692:	9d 1f       	adc	r25, r29
  return n;
}
    3694:	df 91       	pop	r29
    3696:	cf 91       	pop	r28
    3698:	1f 91       	pop	r17
    369a:	0f 91       	pop	r16
    369c:	08 95       	ret

0000369e <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    369e:	0f 93       	push	r16
    36a0:	1f 93       	push	r17
    36a2:	cf 93       	push	r28
    36a4:	df 93       	push	r29
    36a6:	8c 01       	movw	r16, r24
  size_t n = print(x);
    36a8:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <_ZN5Print5printERK9Printable>
    36ac:	ec 01       	movw	r28, r24
  n += println();
    36ae:	c8 01       	movw	r24, r16
    36b0:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_ZN5Print7printlnEv>
    36b4:	8c 0f       	add	r24, r28
    36b6:	9d 1f       	adc	r25, r29
  return n;
}
    36b8:	df 91       	pop	r29
    36ba:	cf 91       	pop	r28
    36bc:	1f 91       	pop	r17
    36be:	0f 91       	pop	r16
    36c0:	08 95       	ret

000036c2 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    36c2:	4f 92       	push	r4
    36c4:	5f 92       	push	r5
    36c6:	6f 92       	push	r6
    36c8:	7f 92       	push	r7
    36ca:	8f 92       	push	r8
    36cc:	9f 92       	push	r9
    36ce:	af 92       	push	r10
    36d0:	bf 92       	push	r11
    36d2:	cf 92       	push	r12
    36d4:	df 92       	push	r13
    36d6:	ef 92       	push	r14
    36d8:	ff 92       	push	r15
    36da:	0f 93       	push	r16
    36dc:	1f 93       	push	r17
    36de:	cf 93       	push	r28
    36e0:	df 93       	push	r29
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	a1 97       	sbiw	r28, 0x21	; 33
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	cd bf       	out	0x3d, r28	; 61
    36f2:	4c 01       	movw	r8, r24
    36f4:	14 2f       	mov	r17, r20
    36f6:	35 2f       	mov	r19, r21
    36f8:	86 2f       	mov	r24, r22
    36fa:	97 2f       	mov	r25, r23
    36fc:	02 2f       	mov	r16, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    36fe:	19 a2       	lds	r17, 0x99

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3700:	22 30       	cpi	r18, 0x02	; 2
    3702:	08 f4       	brcc	.+2      	; 0x3706 <_ZN5Print11printNumberEmh+0x44>
    3704:	0a e0       	ldi	r16, 0x0A	; 10
    3706:	0f 2e       	mov	r0, r31
    3708:	f1 e2       	ldi	r31, 0x21	; 33
    370a:	af 2e       	mov	r10, r31
    370c:	bb 24       	eor	r11, r11
    370e:	f0 2d       	mov	r31, r0
    3710:	ac 0e       	add	r10, r28
    3712:	bd 1e       	adc	r11, r29

  do {
    unsigned long m = n;
    n /= base;
    3714:	40 2e       	mov	r4, r16
    3716:	55 24       	eor	r5, r5
    3718:	66 24       	eor	r6, r6
    371a:	77 24       	eor	r7, r7
    371c:	03 c0       	rjmp	.+6      	; 0x3724 <_ZN5Print11printNumberEmh+0x62>
    371e:	12 2f       	mov	r17, r18
    3720:	84 2f       	mov	r24, r20
    3722:	95 2f       	mov	r25, r21
    3724:	61 2f       	mov	r22, r17
    3726:	73 2f       	mov	r23, r19
    3728:	a3 01       	movw	r20, r6
    372a:	92 01       	movw	r18, r4
    372c:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    3730:	c2 2e       	mov	r12, r18
    3732:	d3 2e       	mov	r13, r19
    3734:	e4 2e       	mov	r14, r20
    3736:	f5 2e       	mov	r15, r21
    char c = m - base * n;
    3738:	02 9f       	mul	r16, r18
    373a:	80 2d       	mov	r24, r0
    373c:	11 24       	eor	r1, r1
    373e:	18 1b       	sub	r17, r24
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3740:	08 94       	sec
    3742:	a1 08       	sbc	r10, r1
    3744:	b1 08       	sbc	r11, r1
    3746:	1a 30       	cpi	r17, 0x0A	; 10
    3748:	10 f4       	brcc	.+4      	; 0x374e <_ZN5Print11printNumberEmh+0x8c>
    374a:	10 5d       	subi	r17, 0xD0	; 208
    374c:	01 c0       	rjmp	.+2      	; 0x3750 <_ZN5Print11printNumberEmh+0x8e>
    374e:	19 5c       	subi	r17, 0xC9	; 201
    3750:	d5 01       	movw	r26, r10
    3752:	1c 93       	st	X, r17
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    3754:	c1 14       	cp	r12, r1
    3756:	d1 04       	cpc	r13, r1
    3758:	e1 04       	cpc	r14, r1
    375a:	f1 04       	cpc	r15, r1
    375c:	01 f7       	brne	.-64     	; 0x371e <_ZN5Print11printNumberEmh+0x5c>
    375e:	ea 2d       	mov	r30, r10
    3760:	fb 2d       	mov	r31, r11
    3762:	df 01       	movw	r26, r30
    3764:	0d 90       	ld	r0, X+
    3766:	00 20       	and	r0, r0
    3768:	e9 f7       	brne	.-6      	; 0x3764 <_ZN5Print11printNumberEmh+0xa2>
    376a:	11 97       	sbiw	r26, 0x01	; 1
    376c:	ad 01       	movw	r20, r26
    376e:	4e 1b       	sub	r20, r30
    3770:	5f 0b       	sbc	r21, r31
    3772:	d4 01       	movw	r26, r8
    3774:	ed 91       	ld	r30, X+
    3776:	fc 91       	ld	r31, X
    3778:	02 80       	ldd	r0, Z+2	; 0x02
    377a:	f3 81       	ldd	r31, Z+3	; 0x03
    377c:	e0 2d       	mov	r30, r0
    377e:	c4 01       	movw	r24, r8
    3780:	b5 01       	movw	r22, r10
    3782:	09 95       	icall
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    3784:	a1 96       	adiw	r28, 0x21	; 33
    3786:	0f b6       	in	r0, 0x3f	; 63
    3788:	f8 94       	cli
    378a:	de bf       	out	0x3e, r29	; 62
    378c:	0f be       	out	0x3f, r0	; 63
    378e:	cd bf       	out	0x3d, r28	; 61
    3790:	df 91       	pop	r29
    3792:	cf 91       	pop	r28
    3794:	1f 91       	pop	r17
    3796:	0f 91       	pop	r16
    3798:	ff 90       	pop	r15
    379a:	ef 90       	pop	r14
    379c:	df 90       	pop	r13
    379e:	cf 90       	pop	r12
    37a0:	bf 90       	pop	r11
    37a2:	af 90       	pop	r10
    37a4:	9f 90       	pop	r9
    37a6:	8f 90       	pop	r8
    37a8:	7f 90       	pop	r7
    37aa:	6f 90       	pop	r6
    37ac:	5f 90       	pop	r5
    37ae:	4f 90       	pop	r4
    37b0:	08 95       	ret

000037b2 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    37b2:	21 15       	cp	r18, r1
    37b4:	31 05       	cpc	r19, r1
    37b6:	49 f4       	brne	.+18     	; 0x37ca <_ZN5Print5printEmi+0x18>
    37b8:	dc 01       	movw	r26, r24
    37ba:	ed 91       	ld	r30, X+
    37bc:	fc 91       	ld	r31, X
    37be:	01 90       	ld	r0, Z+
    37c0:	f0 81       	ld	r31, Z
    37c2:	e0 2d       	mov	r30, r0
    37c4:	64 2f       	mov	r22, r20
    37c6:	09 95       	icall
    37c8:	08 95       	ret
  else return printNumber(n, base);
    37ca:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <_ZN5Print11printNumberEmh>
}
    37ce:	08 95       	ret

000037d0 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    37d0:	0f 93       	push	r16
    37d2:	1f 93       	push	r17
    37d4:	cf 93       	push	r28
    37d6:	df 93       	push	r29
    37d8:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    37da:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <_ZN5Print5printEmi>
    37de:	ec 01       	movw	r28, r24
  n += println();
    37e0:	c8 01       	movw	r24, r16
    37e2:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_ZN5Print7printlnEv>
    37e6:	8c 0f       	add	r24, r28
    37e8:	9d 1f       	adc	r25, r29
  return n;
}
    37ea:	df 91       	pop	r29
    37ec:	cf 91       	pop	r28
    37ee:	1f 91       	pop	r17
    37f0:	0f 91       	pop	r16
    37f2:	08 95       	ret

000037f4 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    37f4:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    37f6:	ab 01       	movw	r20, r22
    37f8:	60 e0       	ldi	r22, 0x00	; 0
    37fa:	70 e0       	ldi	r23, 0x00	; 0
    37fc:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <_ZN5Print5printEmi>
}
    3800:	08 95       	ret

00003802 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    3802:	0f 93       	push	r16
    3804:	1f 93       	push	r17
    3806:	cf 93       	push	r28
    3808:	df 93       	push	r29
    380a:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    380c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <_ZN5Print5printEji>
    3810:	ec 01       	movw	r28, r24
  n += println();
    3812:	c8 01       	movw	r24, r16
    3814:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_ZN5Print7printlnEv>
    3818:	8c 0f       	add	r24, r28
    381a:	9d 1f       	adc	r25, r29
  return n;
}
    381c:	df 91       	pop	r29
    381e:	cf 91       	pop	r28
    3820:	1f 91       	pop	r17
    3822:	0f 91       	pop	r16
    3824:	08 95       	ret

00003826 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    3826:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    3828:	46 2f       	mov	r20, r22
    382a:	50 e0       	ldi	r21, 0x00	; 0
    382c:	60 e0       	ldi	r22, 0x00	; 0
    382e:	70 e0       	ldi	r23, 0x00	; 0
    3830:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <_ZN5Print5printEmi>
}
    3834:	08 95       	ret

00003836 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    3836:	0f 93       	push	r16
    3838:	1f 93       	push	r17
    383a:	cf 93       	push	r28
    383c:	df 93       	push	r29
    383e:	8c 01       	movw	r16, r24
  size_t n = print(b, base);
    3840:	0e 94 13 1c 	call	0x3826	; 0x3826 <_ZN5Print5printEhi>
    3844:	ec 01       	movw	r28, r24
  n += println();
    3846:	c8 01       	movw	r24, r16
    3848:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_ZN5Print7printlnEv>
    384c:	8c 0f       	add	r24, r28
    384e:	9d 1f       	adc	r25, r29
  return n;
}
    3850:	df 91       	pop	r29
    3852:	cf 91       	pop	r28
    3854:	1f 91       	pop	r17
    3856:	0f 91       	pop	r16
    3858:	08 95       	ret

0000385a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    385a:	cf 92       	push	r12
    385c:	df 92       	push	r13
    385e:	ef 92       	push	r14
    3860:	ff 92       	push	r15
    3862:	0f 93       	push	r16
    3864:	1f 93       	push	r17
    3866:	cf 93       	push	r28
    3868:	df 93       	push	r29
    386a:	ec 01       	movw	r28, r24
    386c:	6a 01       	movw	r12, r20
    386e:	7b 01       	movw	r14, r22
  if (base == 0) {
    3870:	21 15       	cp	r18, r1
    3872:	31 05       	cpc	r19, r1
    3874:	41 f4       	brne	.+16     	; 0x3886 <_ZN5Print5printEli+0x2c>
    return write(n);
    3876:	e8 81       	ld	r30, Y
    3878:	f9 81       	ldd	r31, Y+1	; 0x01
    387a:	01 90       	ld	r0, Z+
    387c:	f0 81       	ld	r31, Z
    387e:	e0 2d       	mov	r30, r0
    3880:	64 2f       	mov	r22, r20
    3882:	09 95       	icall
    3884:	1d c0       	rjmp	.+58     	; 0x38c0 <_ZN5Print5printEli+0x66>
  } else if (base == 10) {
    3886:	2a 30       	cpi	r18, 0x0A	; 10
    3888:	31 05       	cpc	r19, r1
    388a:	c1 f4       	brne	.+48     	; 0x38bc <_ZN5Print5printEli+0x62>
    if (n < 0) {
    388c:	77 23       	and	r23, r23
    388e:	94 f4       	brge	.+36     	; 0x38b4 <_ZN5Print5printEli+0x5a>
      int t = print('-');
    3890:	6d e2       	ldi	r22, 0x2D	; 45
    3892:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5printEc>
    3896:	8c 01       	movw	r16, r24
      n = -n;
    3898:	44 27       	eor	r20, r20
    389a:	55 27       	eor	r21, r21
    389c:	ba 01       	movw	r22, r20
    389e:	4c 19       	sub	r20, r12
    38a0:	5d 09       	sbc	r21, r13
    38a2:	6e 09       	sbc	r22, r14
    38a4:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    38a6:	ce 01       	movw	r24, r28
    38a8:	2a e0       	ldi	r18, 0x0A	; 10
    38aa:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <_ZN5Print11printNumberEmh>
    38ae:	80 0f       	add	r24, r16
    38b0:	91 1f       	adc	r25, r17
    38b2:	06 c0       	rjmp	.+12     	; 0x38c0 <_ZN5Print5printEli+0x66>
    }
    return printNumber(n, 10);
    38b4:	2a e0       	ldi	r18, 0x0A	; 10
    38b6:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <_ZN5Print11printNumberEmh>
    38ba:	02 c0       	rjmp	.+4      	; 0x38c0 <_ZN5Print5printEli+0x66>
  } else {
    return printNumber(n, base);
    38bc:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <_ZN5Print11printNumberEmh>
  }
}
    38c0:	df 91       	pop	r29
    38c2:	cf 91       	pop	r28
    38c4:	1f 91       	pop	r17
    38c6:	0f 91       	pop	r16
    38c8:	ff 90       	pop	r15
    38ca:	ef 90       	pop	r14
    38cc:	df 90       	pop	r13
    38ce:	cf 90       	pop	r12
    38d0:	08 95       	ret

000038d2 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    38d2:	0f 93       	push	r16
    38d4:	1f 93       	push	r17
    38d6:	cf 93       	push	r28
    38d8:	df 93       	push	r29
    38da:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    38dc:	0e 94 2d 1c 	call	0x385a	; 0x385a <_ZN5Print5printEli>
    38e0:	ec 01       	movw	r28, r24
  n += println();
    38e2:	c8 01       	movw	r24, r16
    38e4:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_ZN5Print7printlnEv>
    38e8:	8c 0f       	add	r24, r28
    38ea:	9d 1f       	adc	r25, r29
  return n;
}
    38ec:	df 91       	pop	r29
    38ee:	cf 91       	pop	r28
    38f0:	1f 91       	pop	r17
    38f2:	0f 91       	pop	r16
    38f4:	08 95       	ret

000038f6 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    38f6:	9a 01       	movw	r18, r20
  return print((long) n, base);
    38f8:	fb 01       	movw	r30, r22
    38fa:	af 01       	movw	r20, r30
    38fc:	66 27       	eor	r22, r22
    38fe:	57 fd       	sbrc	r21, 7
    3900:	60 95       	com	r22
    3902:	76 2f       	mov	r23, r22
    3904:	0e 94 2d 1c 	call	0x385a	; 0x385a <_ZN5Print5printEli>
}
    3908:	08 95       	ret

0000390a <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    390e:	cf 93       	push	r28
    3910:	df 93       	push	r29
    3912:	8c 01       	movw	r16, r24
  size_t n = print(num, base);
    3914:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_ZN5Print5printEii>
    3918:	ec 01       	movw	r28, r24
  n += println();
    391a:	c8 01       	movw	r24, r16
    391c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_ZN5Print7printlnEv>
    3920:	8c 0f       	add	r24, r28
    3922:	9d 1f       	adc	r25, r29
  return n;
}
    3924:	df 91       	pop	r29
    3926:	cf 91       	pop	r28
    3928:	1f 91       	pop	r17
    392a:	0f 91       	pop	r16
    392c:	08 95       	ret

0000392e <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    392e:	4f 92       	push	r4
    3930:	5f 92       	push	r5
    3932:	6f 92       	push	r6
    3934:	7f 92       	push	r7
    3936:	8f 92       	push	r8
    3938:	9f 92       	push	r9
    393a:	af 92       	push	r10
    393c:	bf 92       	push	r11
    393e:	df 92       	push	r13
    3940:	ef 92       	push	r14
    3942:	ff 92       	push	r15
    3944:	0f 93       	push	r16
    3946:	1f 93       	push	r17
    3948:	cf 93       	push	r28
    394a:	df 93       	push	r29
    394c:	3c 01       	movw	r6, r24
    394e:	4a 01       	movw	r8, r20
    3950:	5b 01       	movw	r10, r22
    3952:	e2 2e       	mov	r14, r18
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    3954:	cb 01       	movw	r24, r22
    3956:	ba 01       	movw	r22, r20
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	a9 01       	movw	r20, r18
    395e:	0e 94 a4 3f 	call	0x7f48	; 0x7f48 <__cmpsf2>
    3962:	88 23       	and	r24, r24
    3964:	54 f4       	brge	.+20     	; 0x397a <_ZN5Print10printFloatEdh+0x4c>
  {
     n += print('-');
    3966:	c3 01       	movw	r24, r6
    3968:	6d e2       	ldi	r22, 0x2D	; 45
    396a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <_ZN5Print5printEc>
    396e:	2c 01       	movw	r4, r24
     number = -number;
    3970:	b7 fa       	bst	r11, 7
    3972:	b0 94       	com	r11
    3974:	b7 f8       	bld	r11, 7
    3976:	b0 94       	com	r11
    3978:	02 c0       	rjmp	.+4      	; 0x397e <_ZN5Print10printFloatEdh+0x50>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    397a:	44 24       	eor	r4, r4
    397c:	55 24       	eor	r5, r5
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    397e:	ee 20       	and	r14, r14
    3980:	09 f4       	brne	.+2      	; 0x3984 <_ZN5Print10printFloatEdh+0x56>
    3982:	a3 c0       	rjmp	.+326    	; 0x3aca <_ZN5Print10printFloatEdh+0x19c>
    3984:	c0 e0       	ldi	r28, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3986:	50 e0       	ldi	r21, 0x00	; 0
    3988:	40 e0       	ldi	r20, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    398e:	85 2f       	mov	r24, r21
    3990:	94 2f       	mov	r25, r20
    3992:	a3 2f       	mov	r26, r19
    3994:	b2 2f       	mov	r27, r18
    3996:	bc 01       	movw	r22, r24
    3998:	cd 01       	movw	r24, r26
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	40 e2       	ldi	r20, 0x20	; 32
    39a0:	51 e4       	ldi	r21, 0x41	; 65
    39a2:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <__divsf3>
    39a6:	56 2f       	mov	r21, r22
    39a8:	47 2f       	mov	r20, r23
    39aa:	38 2f       	mov	r19, r24
    39ac:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    39ae:	cf 5f       	subi	r28, 0xFF	; 255
    39b0:	ce 15       	cp	r28, r14
    39b2:	69 f7       	brne	.-38     	; 0x398e <_ZN5Print10printFloatEdh+0x60>
    rounding /= 10.0;
  
  number += rounding;
    39b4:	c5 01       	movw	r24, r10
    39b6:	b4 01       	movw	r22, r8
    39b8:	e2 2f       	mov	r30, r18
    39ba:	05 2f       	mov	r16, r21
    39bc:	14 2f       	mov	r17, r20
    39be:	23 2f       	mov	r18, r19
    39c0:	3e 2f       	mov	r19, r30
    39c2:	a9 01       	movw	r20, r18
    39c4:	98 01       	movw	r18, r16
    39c6:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__addsf3>
    39ca:	16 2f       	mov	r17, r22
    39cc:	07 2f       	mov	r16, r23
    39ce:	f8 2e       	mov	r15, r24
    39d0:	d9 2e       	mov	r13, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    39d2:	86 2f       	mov	r24, r22
    39d4:	90 2f       	mov	r25, r16
    39d6:	af 2d       	mov	r26, r15
    39d8:	bd 2d       	mov	r27, r13
    39da:	bc 01       	movw	r22, r24
    39dc:	cd 01       	movw	r24, r26
    39de:	0e 94 15 40 	call	0x802a	; 0x802a <__fixunssfsi>
    39e2:	c6 2f       	mov	r28, r22
    39e4:	a7 2e       	mov	r10, r23
    39e6:	88 2e       	mov	r8, r24
    39e8:	d9 2f       	mov	r29, r25
  double remainder = number - (double)int_part;
    39ea:	0e 94 41 40 	call	0x8082	; 0x8082 <__floatunsisf>
    39ee:	9b 01       	movw	r18, r22
    39f0:	ac 01       	movw	r20, r24
    39f2:	81 2f       	mov	r24, r17
    39f4:	90 2f       	mov	r25, r16
    39f6:	af 2d       	mov	r26, r15
    39f8:	bd 2d       	mov	r27, r13
    39fa:	bc 01       	movw	r22, r24
    39fc:	cd 01       	movw	r24, r26
    39fe:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <__subsf3>
    3a02:	f6 2e       	mov	r15, r22
    3a04:	d7 2e       	mov	r13, r23
    3a06:	18 2f       	mov	r17, r24
    3a08:	09 2f       	mov	r16, r25
  n += print(int_part);
    3a0a:	c3 01       	movw	r24, r6
    3a0c:	4c 2f       	mov	r20, r28
    3a0e:	5a 2d       	mov	r21, r10
    3a10:	68 2d       	mov	r22, r8
    3a12:	7d 2f       	mov	r23, r29
    3a14:	2a e0       	ldi	r18, 0x0A	; 10
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <_ZN5Print5printEmi>
    3a1c:	ec 01       	movw	r28, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    3a1e:	c3 01       	movw	r24, r6
    3a20:	63 e5       	ldi	r22, 0x53	; 83
    3a22:	72 e0       	ldi	r23, 0x02	; 2
    3a24:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3a28:	c8 0f       	add	r28, r24
    3a2a:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    3a2c:	5e 01       	movw	r10, r28
    3a2e:	a4 0c       	add	r10, r4
    3a30:	b5 1c       	adc	r11, r5
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    3a32:	8f 2d       	mov	r24, r15
    3a34:	9d 2d       	mov	r25, r13
    3a36:	a1 2f       	mov	r26, r17
    3a38:	b0 2f       	mov	r27, r16
    3a3a:	bc 01       	movw	r22, r24
    3a3c:	cd 01       	movw	r24, r26
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	40 e2       	ldi	r20, 0x20	; 32
    3a44:	51 e4       	ldi	r21, 0x41	; 65
    3a46:	0e 94 23 41 	call	0x8246	; 0x8246 <__mulsf3>
    3a4a:	16 2f       	mov	r17, r22
    3a4c:	07 2f       	mov	r16, r23
    3a4e:	f8 2e       	mov	r15, r24
    3a50:	d9 2e       	mov	r13, r25
    int toPrint = int(remainder);
    3a52:	86 2f       	mov	r24, r22
    3a54:	90 2f       	mov	r25, r16
    3a56:	af 2d       	mov	r26, r15
    3a58:	bd 2d       	mov	r27, r13
    3a5a:	bc 01       	movw	r22, r24
    3a5c:	cd 01       	movw	r24, r26
    3a5e:	0e 94 10 40 	call	0x8020	; 0x8020 <__fixsfsi>
    3a62:	ab 01       	movw	r20, r22
    3a64:	bc 01       	movw	r22, r24
    3a66:	ea 01       	movw	r28, r20
    n += print(toPrint);
    3a68:	c3 01       	movw	r24, r6
    3a6a:	ba 01       	movw	r22, r20
    3a6c:	4a e0       	ldi	r20, 0x0A	; 10
    3a6e:	50 e0       	ldi	r21, 0x00	; 0
    3a70:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_ZN5Print5printEii>
    3a74:	a8 0e       	add	r10, r24
    3a76:	b9 1e       	adc	r11, r25
    remainder -= toPrint; 
    3a78:	be 01       	movw	r22, r28
    3a7a:	88 27       	eor	r24, r24
    3a7c:	77 fd       	sbrc	r23, 7
    3a7e:	80 95       	com	r24
    3a80:	98 2f       	mov	r25, r24
    3a82:	0e 94 43 40 	call	0x8086	; 0x8086 <__floatsisf>
    3a86:	9b 01       	movw	r18, r22
    3a88:	ac 01       	movw	r20, r24
    3a8a:	81 2f       	mov	r24, r17
    3a8c:	90 2f       	mov	r25, r16
    3a8e:	af 2d       	mov	r26, r15
    3a90:	bd 2d       	mov	r27, r13
    3a92:	bc 01       	movw	r22, r24
    3a94:	cd 01       	movw	r24, r26
    3a96:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <__subsf3>
    3a9a:	f6 2e       	mov	r15, r22
    3a9c:	d7 2e       	mov	r13, r23
    3a9e:	18 2f       	mov	r17, r24
    3aa0:	09 2f       	mov	r16, r25
    3aa2:	ea 94       	dec	r14
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3aa4:	31 f6       	brne	.-116    	; 0x3a32 <_ZN5Print10printFloatEdh+0x104>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3aa6:	8a 2d       	mov	r24, r10
    3aa8:	9b 2d       	mov	r25, r11
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	1f 91       	pop	r17
    3ab0:	0f 91       	pop	r16
    3ab2:	ff 90       	pop	r15
    3ab4:	ef 90       	pop	r14
    3ab6:	df 90       	pop	r13
    3ab8:	bf 90       	pop	r11
    3aba:	af 90       	pop	r10
    3abc:	9f 90       	pop	r9
    3abe:	8f 90       	pop	r8
    3ac0:	7f 90       	pop	r7
    3ac2:	6f 90       	pop	r6
    3ac4:	5f 90       	pop	r5
    3ac6:	4f 90       	pop	r4
    3ac8:	08 95       	ret
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
    3aca:	c5 01       	movw	r24, r10
    3acc:	b4 01       	movw	r22, r8
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	40 e0       	ldi	r20, 0x00	; 0
    3ad4:	5f e3       	ldi	r21, 0x3F	; 63
    3ad6:	0e 94 de 3e 	call	0x7dbc	; 0x7dbc <__addsf3>

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3ada:	0e 94 15 40 	call	0x802a	; 0x802a <__fixunssfsi>
    3ade:	ab 01       	movw	r20, r22
    3ae0:	bc 01       	movw	r22, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    3ae2:	c3 01       	movw	r24, r6
    3ae4:	2a e0       	ldi	r18, 0x0A	; 10
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <_ZN5Print5printEmi>
    3aec:	5c 01       	movw	r10, r24
    3aee:	a4 0c       	add	r10, r4
    3af0:	b5 1c       	adc	r11, r5
    3af2:	d9 cf       	rjmp	.-78     	; 0x3aa6 <_ZN5Print10printFloatEdh+0x178>

00003af4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3af4:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN5Print10printFloatEdh>
}
    3af8:	08 95       	ret

00003afa <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    3afa:	0f 93       	push	r16
    3afc:	1f 93       	push	r17
    3afe:	cf 93       	push	r28
    3b00:	df 93       	push	r29
    3b02:	8c 01       	movw	r16, r24
  size_t n = print(num, digits);
    3b04:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <_ZN5Print5printEdi>
    3b08:	ec 01       	movw	r28, r24
  n += println();
    3b0a:	c8 01       	movw	r24, r16
    3b0c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <_ZN5Print7printlnEv>
    3b10:	8c 0f       	add	r24, r28
    3b12:	9d 1f       	adc	r25, r29
  return n;
}
    3b14:	df 91       	pop	r29
    3b16:	cf 91       	pop	r28
    3b18:	1f 91       	pop	r17
    3b1a:	0f 91       	pop	r16
    3b1c:	08 95       	ret

00003b1e <_ZL13isTimerActive18timer16_Sequence_t>:

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
    3b1e:	28 2f       	mov	r18, r24
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	c9 01       	movw	r24, r18
    3b24:	88 0f       	add	r24, r24
    3b26:	99 1f       	adc	r25, r25
    3b28:	28 0f       	add	r18, r24
    3b2a:	39 1f       	adc	r19, r25
    3b2c:	c9 01       	movw	r24, r18
    3b2e:	88 0f       	add	r24, r24
    3b30:	99 1f       	adc	r25, r25
    3b32:	88 0f       	add	r24, r24
    3b34:	99 1f       	adc	r25, r25
    3b36:	bc 01       	movw	r22, r24
    3b38:	fc 01       	movw	r30, r24
    3b3a:	ee 0f       	add	r30, r30
    3b3c:	ff 1f       	adc	r31, r31
    3b3e:	8e 0f       	add	r24, r30
    3b40:	9f 1f       	adc	r25, r31
    3b42:	fc 01       	movw	r30, r24
    3b44:	e8 5c       	subi	r30, 0xC8	; 200
    3b46:	f9 4f       	sbci	r31, 0xF9	; 249
    3b48:	80 81       	ld	r24, Z
    3b4a:	86 fd       	sbrc	r24, 6
    3b4c:	18 c0       	rjmp	.+48     	; 0x3b7e <_ZL13isTimerActive18timer16_Sequence_t+0x60>
    3b4e:	40 e0       	ldi	r20, 0x00	; 0
    3b50:	50 e0       	ldi	r21, 0x00	; 0
    3b52:	ca 01       	movw	r24, r20
    3b54:	86 0f       	add	r24, r22
    3b56:	97 1f       	adc	r25, r23
    3b58:	01 96       	adiw	r24, 0x01	; 1
    3b5a:	9c 01       	movw	r18, r24
    3b5c:	22 0f       	add	r18, r18
    3b5e:	33 1f       	adc	r19, r19
    3b60:	82 0f       	add	r24, r18
    3b62:	93 1f       	adc	r25, r19
    3b64:	fc 01       	movw	r30, r24
    3b66:	e8 5c       	subi	r30, 0xC8	; 200
    3b68:	f9 4f       	sbci	r31, 0xF9	; 249
    3b6a:	80 81       	ld	r24, Z
    3b6c:	86 fd       	sbrc	r24, 6
    3b6e:	09 c0       	rjmp	.+18     	; 0x3b82 <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    3b70:	4f 5f       	subi	r20, 0xFF	; 255
    3b72:	5f 4f       	sbci	r21, 0xFF	; 255
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    3b74:	4b 30       	cpi	r20, 0x0B	; 11
    3b76:	51 05       	cpc	r21, r1
    3b78:	61 f7       	brne	.-40     	; 0x3b52 <_ZL13isTimerActive18timer16_Sequence_t+0x34>
    if(SERVO(timer,channel).Pin.isActive == true)
      return true;
  }
  return false;
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	08 95       	ret
static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
      return true;
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	08 95       	ret
    3b82:	81 e0       	ldi	r24, 0x01	; 1
  }
  return false;
}
    3b84:	08 95       	ret

00003b86 <__vector_11>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
{ 
    3b86:	1f 92       	push	r1
    3b88:	0f 92       	push	r0
    3b8a:	0f b6       	in	r0, 0x3f	; 63
    3b8c:	0f 92       	push	r0
    3b8e:	11 24       	eor	r1, r1
    3b90:	2f 93       	push	r18
    3b92:	3f 93       	push	r19
    3b94:	4f 93       	push	r20
    3b96:	5f 93       	push	r21
    3b98:	6f 93       	push	r22
    3b9a:	7f 93       	push	r23
    3b9c:	8f 93       	push	r24
    3b9e:	9f 93       	push	r25
    3ba0:	af 93       	push	r26
    3ba2:	bf 93       	push	r27
    3ba4:	ef 93       	push	r30
    3ba6:	ff 93       	push	r31

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    3ba8:	80 91 37 06 	lds	r24, 0x0637
    3bac:	88 23       	and	r24, r24
    3bae:	2c f4       	brge	.+10     	; 0x3bba <__vector_11+0x34>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
    3bb0:	10 92 85 00 	sts	0x0085, r1
    3bb4:	10 92 84 00 	sts	0x0084, r1
    3bb8:	2d c0       	rjmp	.+90     	; 0x3c14 <__vector_11+0x8e>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
    3bba:	20 91 37 06 	lds	r18, 0x0637
    3bbe:	33 27       	eor	r19, r19
    3bc0:	27 fd       	sbrc	r18, 7
    3bc2:	30 95       	com	r19
    3bc4:	80 91 36 06 	lds	r24, 0x0636
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	28 17       	cp	r18, r24
    3bcc:	39 07       	cpc	r19, r25
    3bce:	14 f5       	brge	.+68     	; 0x3c14 <__vector_11+0x8e>
    3bd0:	80 91 37 06 	lds	r24, 0x0637
    3bd4:	99 27       	eor	r25, r25
    3bd6:	87 fd       	sbrc	r24, 7
    3bd8:	90 95       	com	r25
    3bda:	fc 01       	movw	r30, r24
    3bdc:	ee 0f       	add	r30, r30
    3bde:	ff 1f       	adc	r31, r31
    3be0:	8e 0f       	add	r24, r30
    3be2:	9f 1f       	adc	r25, r31
    3be4:	fc 01       	movw	r30, r24
    3be6:	e8 5c       	subi	r30, 0xC8	; 200
    3be8:	f9 4f       	sbci	r31, 0xF9	; 249
    3bea:	80 81       	ld	r24, Z
    3bec:	86 ff       	sbrs	r24, 6
    3bee:	12 c0       	rjmp	.+36     	; 0x3c14 <__vector_11+0x8e>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
    3bf0:	80 91 37 06 	lds	r24, 0x0637
    3bf4:	99 27       	eor	r25, r25
    3bf6:	87 fd       	sbrc	r24, 7
    3bf8:	90 95       	com	r25
    3bfa:	fc 01       	movw	r30, r24
    3bfc:	ee 0f       	add	r30, r30
    3bfe:	ff 1f       	adc	r31, r31
    3c00:	8e 0f       	add	r24, r30
    3c02:	9f 1f       	adc	r25, r31
    3c04:	fc 01       	movw	r30, r24
    3c06:	e8 5c       	subi	r30, 0xC8	; 200
    3c08:	f9 4f       	sbci	r31, 0xF9	; 249
    3c0a:	80 81       	ld	r24, Z
    3c0c:	8f 73       	andi	r24, 0x3F	; 63
    3c0e:	60 e0       	ldi	r22, 0x00	; 0
    3c10:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
    3c14:	80 91 37 06 	lds	r24, 0x0637
    3c18:	8f 5f       	subi	r24, 0xFF	; 255
    3c1a:	80 93 37 06 	sts	0x0637, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    3c1e:	20 91 37 06 	lds	r18, 0x0637
    3c22:	33 27       	eor	r19, r19
    3c24:	27 fd       	sbrc	r18, 7
    3c26:	30 95       	com	r19
    3c28:	80 91 36 06 	lds	r24, 0x0636
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	28 17       	cp	r18, r24
    3c30:	39 07       	cpc	r19, r25
    3c32:	0c f0       	brlt	.+2      	; 0x3c36 <__vector_11+0xb0>
    3c34:	55 c0       	rjmp	.+170    	; 0x3ce0 <__vector_11+0x15a>
    3c36:	80 91 37 06 	lds	r24, 0x0637
    3c3a:	8c 30       	cpi	r24, 0x0C	; 12
    3c3c:	0c f0       	brlt	.+2      	; 0x3c40 <__vector_11+0xba>
    3c3e:	50 c0       	rjmp	.+160    	; 0x3ce0 <__vector_11+0x15a>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    3c40:	80 91 84 00 	lds	r24, 0x0084
    3c44:	90 91 85 00 	lds	r25, 0x0085
    3c48:	20 91 37 06 	lds	r18, 0x0637
    3c4c:	33 27       	eor	r19, r19
    3c4e:	27 fd       	sbrc	r18, 7
    3c50:	30 95       	com	r19
    3c52:	f9 01       	movw	r30, r18
    3c54:	ee 0f       	add	r30, r30
    3c56:	ff 1f       	adc	r31, r31
    3c58:	2e 0f       	add	r18, r30
    3c5a:	3f 1f       	adc	r19, r31
    3c5c:	f9 01       	movw	r30, r18
    3c5e:	e8 5c       	subi	r30, 0xC8	; 200
    3c60:	f9 4f       	sbci	r31, 0xF9	; 249
    3c62:	21 81       	ldd	r18, Z+1	; 0x01
    3c64:	32 81       	ldd	r19, Z+2	; 0x02
    3c66:	82 0f       	add	r24, r18
    3c68:	93 1f       	adc	r25, r19
    3c6a:	90 93 89 00 	sts	0x0089, r25
    3c6e:	80 93 88 00 	sts	0x0088, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
    3c72:	80 91 37 06 	lds	r24, 0x0637
    3c76:	99 27       	eor	r25, r25
    3c78:	87 fd       	sbrc	r24, 7
    3c7a:	90 95       	com	r25
    3c7c:	fc 01       	movw	r30, r24
    3c7e:	ee 0f       	add	r30, r30
    3c80:	ff 1f       	adc	r31, r31
    3c82:	8e 0f       	add	r24, r30
    3c84:	9f 1f       	adc	r25, r31
    3c86:	fc 01       	movw	r30, r24
    3c88:	e8 5c       	subi	r30, 0xC8	; 200
    3c8a:	f9 4f       	sbci	r31, 0xF9	; 249
    3c8c:	80 81       	ld	r24, Z
    3c8e:	86 ff       	sbrs	r24, 6
    3c90:	30 c0       	rjmp	.+96     	; 0x3cf2 <__vector_11+0x16c>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
    3c92:	80 91 37 06 	lds	r24, 0x0637
    3c96:	99 27       	eor	r25, r25
    3c98:	87 fd       	sbrc	r24, 7
    3c9a:	90 95       	com	r25
    3c9c:	fc 01       	movw	r30, r24
    3c9e:	ee 0f       	add	r30, r30
    3ca0:	ff 1f       	adc	r31, r31
    3ca2:	8e 0f       	add	r24, r30
    3ca4:	9f 1f       	adc	r25, r31
    3ca6:	fc 01       	movw	r30, r24
    3ca8:	e8 5c       	subi	r30, 0xC8	; 200
    3caa:	f9 4f       	sbci	r31, 0xF9	; 249
    3cac:	80 81       	ld	r24, Z
    3cae:	8f 73       	andi	r24, 0x3F	; 63
    3cb0:	61 e0       	ldi	r22, 0x01	; 1
    3cb2:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
    3cb6:	1d c0       	rjmp	.+58     	; 0x3cf2 <__vector_11+0x16c>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
    3cb8:	80 e4       	ldi	r24, 0x40	; 64
    3cba:	9c e9       	ldi	r25, 0x9C	; 156
    3cbc:	90 93 89 00 	sts	0x0089, r25
    3cc0:	80 93 88 00 	sts	0x0088, r24
    3cc4:	09 c0       	rjmp	.+18     	; 0x3cd8 <__vector_11+0x152>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    3cc6:	80 91 84 00 	lds	r24, 0x0084
    3cca:	90 91 85 00 	lds	r25, 0x0085
    3cce:	04 96       	adiw	r24, 0x04	; 4
    3cd0:	90 93 89 00 	sts	0x0089, r25
    3cd4:	80 93 88 00 	sts	0x0088, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
    3cd8:	8f ef       	ldi	r24, 0xFF	; 255
    3cda:	80 93 37 06 	sts	0x0637, r24
    3cde:	09 c0       	rjmp	.+18     	; 0x3cf2 <__vector_11+0x16c>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( (unsigned)*TCNTn <  (usToTicks(REFRESH_INTERVAL) + 4) )  // allow a few ticks to ensure the next OCR1A not missed
    3ce0:	80 91 84 00 	lds	r24, 0x0084
    3ce4:	90 91 85 00 	lds	r25, 0x0085
    3ce8:	2c e9       	ldi	r18, 0x9C	; 156
    3cea:	84 34       	cpi	r24, 0x44	; 68
    3cec:	92 07       	cpc	r25, r18
    3cee:	20 f3       	brcs	.-56     	; 0x3cb8 <__vector_11+0x132>
    3cf0:	ea cf       	rjmp	.-44     	; 0x3cc6 <__vector_11+0x140>
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
}
    3cf2:	ff 91       	pop	r31
    3cf4:	ef 91       	pop	r30
    3cf6:	bf 91       	pop	r27
    3cf8:	af 91       	pop	r26
    3cfa:	9f 91       	pop	r25
    3cfc:	8f 91       	pop	r24
    3cfe:	7f 91       	pop	r23
    3d00:	6f 91       	pop	r22
    3d02:	5f 91       	pop	r21
    3d04:	4f 91       	pop	r20
    3d06:	3f 91       	pop	r19
    3d08:	2f 91       	pop	r18
    3d0a:	0f 90       	pop	r0
    3d0c:	0f be       	out	0x3f, r0	; 63
    3d0e:	0f 90       	pop	r0
    3d10:	1f 90       	pop	r1
    3d12:	18 95       	reti

00003d14 <_ZN5ServoC1Ev>:
}


/****************** end of static functions ******************************/

Servo::Servo()
    3d14:	fc 01       	movw	r30, r24
{
  if( ServoCount < MAX_SERVOS) {
    3d16:	80 91 36 06 	lds	r24, 0x0636
    3d1a:	8c 30       	cpi	r24, 0x0C	; 12
    3d1c:	98 f4       	brcc	.+38     	; 0x3d44 <_ZN5ServoC1Ev+0x30>
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
    3d1e:	80 83       	st	Z, r24
    3d20:	8f 5f       	subi	r24, 0xFF	; 255
    3d22:	80 93 36 06 	sts	0x0636, r24
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
    3d26:	80 81       	ld	r24, Z
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	ee 0f       	add	r30, r30
    3d2e:	ff 1f       	adc	r31, r31
    3d30:	8e 0f       	add	r24, r30
    3d32:	9f 1f       	adc	r25, r31
    3d34:	fc 01       	movw	r30, r24
    3d36:	e8 5c       	subi	r30, 0xC8	; 200
    3d38:	f9 4f       	sbci	r31, 0xF9	; 249
    3d3a:	88 eb       	ldi	r24, 0xB8	; 184
    3d3c:	9b e0       	ldi	r25, 0x0B	; 11
    3d3e:	92 83       	std	Z+2, r25	; 0x02
    3d40:	81 83       	std	Z+1, r24	; 0x01
    3d42:	08 95       	ret
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
    3d44:	8f ef       	ldi	r24, 0xFF	; 255
    3d46:	80 83       	st	Z, r24
    3d48:	08 95       	ret

00003d4a <_ZN5Servo6attachEiii>:
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
{
    3d4a:	cf 92       	push	r12
    3d4c:	df 92       	push	r13
    3d4e:	ef 92       	push	r14
    3d50:	ff 92       	push	r15
    3d52:	0f 93       	push	r16
    3d54:	1f 93       	push	r17
    3d56:	cf 93       	push	r28
    3d58:	8c 01       	movw	r16, r24
    3d5a:	c6 2f       	mov	r28, r22
    3d5c:	7a 01       	movw	r14, r20
    3d5e:	69 01       	movw	r12, r18
  if(this->servoIndex < MAX_SERVOS ) {
    3d60:	fc 01       	movw	r30, r24
    3d62:	80 81       	ld	r24, Z
    3d64:	8c 30       	cpi	r24, 0x0C	; 12
    3d66:	08 f0       	brcs	.+2      	; 0x3d6a <_ZN5Servo6attachEiii+0x20>
    3d68:	54 c0       	rjmp	.+168    	; 0x3e12 <_ZN5Servo6attachEiii+0xc8>
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
    3d6a:	86 2f       	mov	r24, r22
    3d6c:	61 e0       	ldi	r22, 0x01	; 1
    3d6e:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <pinMode>
    servos[this->servoIndex].Pin.nbr = pin;  
    3d72:	f8 01       	movw	r30, r16
    3d74:	40 81       	ld	r20, Z
    3d76:	84 2f       	mov	r24, r20
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	9c 01       	movw	r18, r24
    3d7c:	22 0f       	add	r18, r18
    3d7e:	33 1f       	adc	r19, r19
    3d80:	82 0f       	add	r24, r18
    3d82:	93 1f       	adc	r25, r19
    3d84:	fc 01       	movw	r30, r24
    3d86:	e8 5c       	subi	r30, 0xC8	; 200
    3d88:	f9 4f       	sbci	r31, 0xF9	; 249
    3d8a:	cf 73       	andi	r28, 0x3F	; 63
    3d8c:	80 81       	ld	r24, Z
    3d8e:	80 7c       	andi	r24, 0xC0	; 192
    3d90:	c8 2b       	or	r28, r24
    3d92:	c0 83       	st	Z, r28
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128 
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS
    3d94:	80 e2       	ldi	r24, 0x20	; 32
    3d96:	92 e0       	ldi	r25, 0x02	; 2
    3d98:	8e 19       	sub	r24, r14
    3d9a:	9f 09       	sbc	r25, r15
    3d9c:	0a f4       	brpl	.+2      	; 0x3da0 <_ZN5Servo6attachEiii+0x56>
    3d9e:	03 96       	adiw	r24, 0x03	; 3
    3da0:	95 95       	asr	r25
    3da2:	87 95       	ror	r24
    3da4:	95 95       	asr	r25
    3da6:	87 95       	ror	r24
    3da8:	f8 01       	movw	r30, r16
    3daa:	81 83       	std	Z+1, r24	; 0x01
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
    3dac:	80 e6       	ldi	r24, 0x60	; 96
    3dae:	99 e0       	ldi	r25, 0x09	; 9
    3db0:	8c 19       	sub	r24, r12
    3db2:	9d 09       	sbc	r25, r13
    3db4:	0a f4       	brpl	.+2      	; 0x3db8 <_ZN5Servo6attachEiii+0x6e>
    3db6:	03 96       	adiw	r24, 0x03	; 3
    3db8:	95 95       	asr	r25
    3dba:	87 95       	ror	r24
    3dbc:	95 95       	asr	r25
    3dbe:	87 95       	ror	r24
    3dc0:	f8 01       	movw	r30, r16
    3dc2:	82 83       	std	Z+2, r24	; 0x02
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    3dc4:	84 2f       	mov	r24, r20
    3dc6:	6c e0       	ldi	r22, 0x0C	; 12
    3dc8:	0e 94 a8 41 	call	0x8350	; 0x8350 <__udivmodqi4>
    3dcc:	c8 2f       	mov	r28, r24
    if(isTimerActive(timer) == false)
    3dce:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <_ZL13isTimerActive18timer16_Sequence_t>
    3dd2:	88 23       	and	r24, r24
    3dd4:	89 f4       	brne	.+34     	; 0x3df8 <_ZN5Servo6attachEiii+0xae>


static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
    3dd6:	cc 23       	and	r28, r28
    3dd8:	79 f4       	brne	.+30     	; 0x3df8 <_ZN5Servo6attachEiii+0xae>
    TCCR1A = 0;             // normal counting mode 
    3dda:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = _BV(CS11);     // set prescaler of 8 
    3dde:	82 e0       	ldi	r24, 0x02	; 2
    3de0:	80 93 81 00 	sts	0x0081, r24
    TCNT1 = 0;              // clear the timer count 
    3de4:	10 92 85 00 	sts	0x0085, r1
    3de8:	10 92 84 00 	sts	0x0084, r1
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts; 
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt  
#else
    // here if not ATmega8 or ATmega128
    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts; 
    3dec:	b1 9a       	sbi	0x16, 1	; 22
    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt 
    3dee:	ef e6       	ldi	r30, 0x6F	; 111
    3df0:	f0 e0       	ldi	r31, 0x00	; 0
    3df2:	80 81       	ld	r24, Z
    3df4:	82 60       	ori	r24, 0x02	; 2
    3df6:	80 83       	st	Z, r24
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);    
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
    3df8:	f8 01       	movw	r30, r16
    3dfa:	80 81       	ld	r24, Z
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	fc 01       	movw	r30, r24
    3e00:	ee 0f       	add	r30, r30
    3e02:	ff 1f       	adc	r31, r31
    3e04:	e8 0f       	add	r30, r24
    3e06:	f9 1f       	adc	r31, r25
    3e08:	e8 5c       	subi	r30, 0xC8	; 200
    3e0a:	f9 4f       	sbci	r31, 0xF9	; 249
    3e0c:	80 81       	ld	r24, Z
    3e0e:	80 64       	ori	r24, 0x40	; 64
    3e10:	80 83       	st	Z, r24
  } 
  return this->servoIndex ;
}
    3e12:	f8 01       	movw	r30, r16
    3e14:	80 81       	ld	r24, Z
    3e16:	cf 91       	pop	r28
    3e18:	1f 91       	pop	r17
    3e1a:	0f 91       	pop	r16
    3e1c:	ff 90       	pop	r15
    3e1e:	ef 90       	pop	r14
    3e20:	df 90       	pop	r13
    3e22:	cf 90       	pop	r12
    3e24:	08 95       	ret

00003e26 <_ZN5Servo6attachEi>:
    this->servoIndex = INVALID_SERVO ;  // too many servos 
}

uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
    3e26:	40 e2       	ldi	r20, 0x20	; 32
    3e28:	52 e0       	ldi	r21, 0x02	; 2
    3e2a:	20 e6       	ldi	r18, 0x60	; 96
    3e2c:	39 e0       	ldi	r19, 0x09	; 9
    3e2e:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_ZN5Servo6attachEiii>
}
    3e32:	08 95       	ret

00003e34 <_ZN5Servo6detachEv>:
  return this->servoIndex ;
}

void Servo::detach()  
{
  servos[this->servoIndex].Pin.isActive = false;  
    3e34:	fc 01       	movw	r30, r24
    3e36:	80 81       	ld	r24, Z
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	fc 01       	movw	r30, r24
    3e3c:	ee 0f       	add	r30, r30
    3e3e:	ff 1f       	adc	r31, r31
    3e40:	e8 0f       	add	r30, r24
    3e42:	f9 1f       	adc	r31, r25
    3e44:	e8 5c       	subi	r30, 0xC8	; 200
    3e46:	f9 4f       	sbci	r31, 0xF9	; 249
    3e48:	80 81       	ld	r24, Z
    3e4a:	8f 7b       	andi	r24, 0xBF	; 191
    3e4c:	80 83       	st	Z, r24
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    3e4e:	08 95       	ret

00003e50 <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
    3e50:	cf 92       	push	r12
    3e52:	df 92       	push	r13
    3e54:	ef 92       	push	r14
    3e56:	ff 92       	push	r15
    3e58:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    3e5a:	40 81       	ld	r20, Z
  if( (channel >= 0) && (channel < MAX_SERVOS) )   // ensure channel is valid
    3e5c:	4c 30       	cpi	r20, 0x0C	; 12
    3e5e:	08 f0       	brcs	.+2      	; 0x3e62 <_ZN5Servo17writeMicrosecondsEi+0x12>
    3e60:	41 c0       	rjmp	.+130    	; 0x3ee4 <_ZN5Servo17writeMicrosecondsEi+0x94>
  {  
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    3e62:	81 81       	ldd	r24, Z+1	; 0x01
    3e64:	99 27       	eor	r25, r25
    3e66:	87 fd       	sbrc	r24, 7
    3e68:	90 95       	com	r25
    3e6a:	28 e8       	ldi	r18, 0x88	; 136
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	28 1b       	sub	r18, r24
    3e70:	39 0b       	sbc	r19, r25
    3e72:	22 0f       	add	r18, r18
    3e74:	33 1f       	adc	r19, r19
    3e76:	22 0f       	add	r18, r18
    3e78:	33 1f       	adc	r19, r19
    3e7a:	62 17       	cp	r22, r18
    3e7c:	73 07       	cpc	r23, r19
    3e7e:	84 f0       	brlt	.+32     	; 0x3ea0 <_ZN5Servo17writeMicrosecondsEi+0x50>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
    3e80:	82 81       	ldd	r24, Z+2	; 0x02
    3e82:	99 27       	eor	r25, r25
    3e84:	87 fd       	sbrc	r24, 7
    3e86:	90 95       	com	r25
    3e88:	28 e5       	ldi	r18, 0x58	; 88
    3e8a:	32 e0       	ldi	r19, 0x02	; 2
    3e8c:	28 1b       	sub	r18, r24
    3e8e:	39 0b       	sbc	r19, r25
    3e90:	22 0f       	add	r18, r18
    3e92:	33 1f       	adc	r19, r19
    3e94:	22 0f       	add	r18, r18
    3e96:	33 1f       	adc	r19, r19
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
  if( (channel >= 0) && (channel < MAX_SERVOS) )   // ensure channel is valid
  {  
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    3e98:	62 17       	cp	r22, r18
    3e9a:	73 07       	cpc	r23, r19
    3e9c:	0c f4       	brge	.+2      	; 0x3ea0 <_ZN5Servo17writeMicrosecondsEi+0x50>
    3e9e:	9b 01       	movw	r18, r22
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();   
    
  	value = value - TRIM_DURATION;
    3ea0:	22 50       	subi	r18, 0x02	; 2
    3ea2:	30 40       	sbci	r19, 0x00	; 0
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    3ea4:	69 01       	movw	r12, r18
    3ea6:	ee 24       	eor	r14, r14
    3ea8:	d7 fc       	sbrc	r13, 7
    3eaa:	e0 94       	com	r14
    3eac:	fe 2c       	mov	r15, r14
    3eae:	cc 0c       	add	r12, r12
    3eb0:	dd 1c       	adc	r13, r13
    3eb2:	ee 1c       	adc	r14, r14
    3eb4:	ff 1c       	adc	r15, r15
    3eb6:	8e ef       	ldi	r24, 0xFE	; 254
    3eb8:	9f ef       	ldi	r25, 0xFF	; 255
    3eba:	af ef       	ldi	r26, 0xFF	; 255
    3ebc:	bf e1       	ldi	r27, 0x1F	; 31
    3ebe:	c8 22       	and	r12, r24
    3ec0:	d9 22       	and	r13, r25
    3ec2:	ea 22       	and	r14, r26
    3ec4:	fb 22       	and	r15, r27

    uint8_t oldSREG = SREG;
    3ec6:	5f b7       	in	r21, 0x3f	; 63
    cli();
    3ec8:	f8 94       	cli
    servos[channel].ticks = value;  
    3eca:	84 2f       	mov	r24, r20
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	9c 01       	movw	r18, r24
    3ed0:	22 0f       	add	r18, r18
    3ed2:	33 1f       	adc	r19, r19
    3ed4:	82 0f       	add	r24, r18
    3ed6:	93 1f       	adc	r25, r19
    3ed8:	fc 01       	movw	r30, r24
    3eda:	e8 5c       	subi	r30, 0xC8	; 200
    3edc:	f9 4f       	sbci	r31, 0xF9	; 249
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();   
    
  	value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    3ede:	d2 82       	std	Z+2, r13	; 0x02
    3ee0:	c1 82       	std	Z+1, r12	; 0x01

    uint8_t oldSREG = SREG;
    cli();
    servos[channel].ticks = value;  
    SREG = oldSREG;   
    3ee2:	5f bf       	out	0x3f, r21	; 63
  } 
}
    3ee4:	ff 90       	pop	r15
    3ee6:	ef 90       	pop	r14
    3ee8:	df 90       	pop	r13
    3eea:	cf 90       	pop	r12
    3eec:	08 95       	ret

00003eee <_ZN5Servo5writeEi>:
    finISR(timer);
  }
}

void Servo::write(int value)
{  
    3eee:	af 92       	push	r10
    3ef0:	bf 92       	push	r11
    3ef2:	cf 92       	push	r12
    3ef4:	df 92       	push	r13
    3ef6:	ef 92       	push	r14
    3ef8:	ff 92       	push	r15
    3efa:	0f 93       	push	r16
    3efc:	1f 93       	push	r17
    3efe:	cf 93       	push	r28
    3f00:	df 93       	push	r29
    3f02:	ec 01       	movw	r28, r24
  if(value < MIN_PULSE_WIDTH)
    3f04:	82 e0       	ldi	r24, 0x02	; 2
    3f06:	60 32       	cpi	r22, 0x20	; 32
    3f08:	78 07       	cpc	r23, r24
    3f0a:	0c f0       	brlt	.+2      	; 0x3f0e <_ZN5Servo5writeEi+0x20>
    3f0c:	4f c0       	rjmp	.+158    	; 0x3fac <_ZN5Servo5writeEi+0xbe>
    3f0e:	77 23       	and	r23, r23
    3f10:	14 f4       	brge	.+4      	; 0x3f16 <_ZN5Servo5writeEi+0x28>
    3f12:	60 e0       	ldi	r22, 0x00	; 0
    3f14:	70 e0       	ldi	r23, 0x00	; 0
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
    3f16:	00 d0       	rcall	.+0      	; 0x3f18 <_ZN5Servo5writeEi+0x2a>
    3f18:	00 d0       	rcall	.+0      	; 0x3f1a <_ZN5Servo5writeEi+0x2c>
    3f1a:	ed b7       	in	r30, 0x3d	; 61
    3f1c:	fe b7       	in	r31, 0x3e	; 62
    3f1e:	31 96       	adiw	r30, 0x01	; 1
    3f20:	65 3b       	cpi	r22, 0xB5	; 181
    3f22:	71 05       	cpc	r23, r1
    3f24:	14 f0       	brlt	.+4      	; 0x3f2a <_ZN5Servo5writeEi+0x3c>
    3f26:	64 eb       	ldi	r22, 0xB4	; 180
    3f28:	70 e0       	ldi	r23, 0x00	; 0
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	ac 01       	movw	r20, r24
    3f2e:	66 27       	eor	r22, r22
    3f30:	57 fd       	sbrc	r21, 7
    3f32:	60 95       	com	r22
    3f34:	76 2f       	mov	r23, r22
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
    3f38:	99 27       	eor	r25, r25
    3f3a:	87 fd       	sbrc	r24, 7
    3f3c:	90 95       	com	r25
    3f3e:	28 e8       	ldi	r18, 0x88	; 136
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	28 1b       	sub	r18, r24
    3f44:	39 0b       	sbc	r19, r25
    3f46:	59 01       	movw	r10, r18
    3f48:	aa 0c       	add	r10, r10
    3f4a:	bb 1c       	adc	r11, r11
    3f4c:	aa 0c       	add	r10, r10
    3f4e:	bb 1c       	adc	r11, r11
    3f50:	cc 24       	eor	r12, r12
    3f52:	b7 fc       	sbrc	r11, 7
    3f54:	c0 94       	com	r12
    3f56:	dc 2c       	mov	r13, r12
    3f58:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5a:	99 27       	eor	r25, r25
    3f5c:	87 fd       	sbrc	r24, 7
    3f5e:	90 95       	com	r25
    3f60:	28 e5       	ldi	r18, 0x58	; 88
    3f62:	32 e0       	ldi	r19, 0x02	; 2
    3f64:	28 1b       	sub	r18, r24
    3f66:	39 0b       	sbc	r19, r25
    3f68:	c9 01       	movw	r24, r18
    3f6a:	88 0f       	add	r24, r24
    3f6c:	99 1f       	adc	r25, r25
    3f6e:	88 0f       	add	r24, r24
    3f70:	99 1f       	adc	r25, r25
    3f72:	aa 27       	eor	r26, r26
    3f74:	97 fd       	sbrc	r25, 7
    3f76:	a0 95       	com	r26
    3f78:	ba 2f       	mov	r27, r26
    3f7a:	80 83       	st	Z, r24
    3f7c:	91 83       	std	Z+1, r25	; 0x01
    3f7e:	a2 83       	std	Z+2, r26	; 0x02
    3f80:	b3 83       	std	Z+3, r27	; 0x03
    3f82:	cb 01       	movw	r24, r22
    3f84:	ba 01       	movw	r22, r20
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	a9 01       	movw	r20, r18
    3f8c:	0f 2e       	mov	r0, r31
    3f8e:	f4 eb       	ldi	r31, 0xB4	; 180
    3f90:	ef 2e       	mov	r14, r31
    3f92:	f0 e0       	ldi	r31, 0x00	; 0
    3f94:	ff 2e       	mov	r15, r31
    3f96:	f0 e0       	ldi	r31, 0x00	; 0
    3f98:	0f 2f       	mov	r16, r31
    3f9a:	f0 e0       	ldi	r31, 0x00	; 0
    3f9c:	1f 2f       	mov	r17, r31
    3f9e:	f0 2d       	mov	r31, r0
    3fa0:	0e 94 cd 23 	call	0x479a	; 0x479a <_Z3maplllll>
    3fa4:	0f 90       	pop	r0
    3fa6:	0f 90       	pop	r0
    3fa8:	0f 90       	pop	r0
    3faa:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
    3fac:	ce 01       	movw	r24, r28
    3fae:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <_ZN5Servo17writeMicrosecondsEi>
}
    3fb2:	df 91       	pop	r29
    3fb4:	cf 91       	pop	r28
    3fb6:	1f 91       	pop	r17
    3fb8:	0f 91       	pop	r16
    3fba:	ff 90       	pop	r15
    3fbc:	ef 90       	pop	r14
    3fbe:	df 90       	pop	r13
    3fc0:	cf 90       	pop	r12
    3fc2:	bf 90       	pop	r11
    3fc4:	af 90       	pop	r10
    3fc6:	08 95       	ret

00003fc8 <_ZN5Servo16readMicrosecondsEv>:
}

int Servo::readMicroseconds()
{
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
    3fc8:	fc 01       	movw	r30, r24
    3fca:	80 81       	ld	r24, Z
    3fcc:	8f 3f       	cpi	r24, 0xFF	; 255
    3fce:	c9 f0       	breq	.+50     	; 0x4002 <_ZN5Servo16readMicrosecondsEv+0x3a>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	fc 01       	movw	r30, r24
    3fd4:	ee 0f       	add	r30, r30
    3fd6:	ff 1f       	adc	r31, r31
    3fd8:	8e 0f       	add	r24, r30
    3fda:	9f 1f       	adc	r25, r31
    3fdc:	fc 01       	movw	r30, r24
    3fde:	e8 5c       	subi	r30, 0xC8	; 200
    3fe0:	f9 4f       	sbci	r31, 0xF9	; 249
    3fe2:	81 81       	ldd	r24, Z+1	; 0x01
    3fe4:	92 81       	ldd	r25, Z+2	; 0x02
    3fe6:	88 0f       	add	r24, r24
    3fe8:	99 1f       	adc	r25, r25
    3fea:	88 0f       	add	r24, r24
    3fec:	99 1f       	adc	r25, r25
    3fee:	88 0f       	add	r24, r24
    3ff0:	99 1f       	adc	r25, r25
    3ff2:	92 95       	swap	r25
    3ff4:	82 95       	swap	r24
    3ff6:	8f 70       	andi	r24, 0x0F	; 15
    3ff8:	89 27       	eor	r24, r25
    3ffa:	9f 70       	andi	r25, 0x0F	; 15
    3ffc:	89 27       	eor	r24, r25
    3ffe:	02 96       	adiw	r24, 0x02	; 2
    4000:	08 95       	ret
  else 
    pulsewidth  = 0;
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	90 e0       	ldi	r25, 0x00	; 0

  return pulsewidth;   
}
    4006:	08 95       	ret

00004008 <_ZN5Servo4readEv>:
    SREG = oldSREG;   
  } 
}

int Servo::read() // return the value as degrees
{
    4008:	8f 92       	push	r8
    400a:	9f 92       	push	r9
    400c:	af 92       	push	r10
    400e:	bf 92       	push	r11
    4010:	cf 92       	push	r12
    4012:	df 92       	push	r13
    4014:	ef 92       	push	r14
    4016:	ff 92       	push	r15
    4018:	0f 93       	push	r16
    401a:	1f 93       	push	r17
    401c:	cf 93       	push	r28
    401e:	df 93       	push	r29
    4020:	ec 01       	movw	r28, r24
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);     
    4022:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <_ZN5Servo16readMicrosecondsEv>
    4026:	00 d0       	rcall	.+0      	; 0x4028 <_ZN5Servo4readEv+0x20>
    4028:	00 d0       	rcall	.+0      	; 0x402a <_ZN5Servo4readEv+0x22>
    402a:	ac 01       	movw	r20, r24
    402c:	4f 5f       	subi	r20, 0xFF	; 255
    402e:	5f 4f       	sbci	r21, 0xFF	; 255
    4030:	66 27       	eor	r22, r22
    4032:	57 fd       	sbrc	r21, 7
    4034:	60 95       	com	r22
    4036:	76 2f       	mov	r23, r22
    4038:	89 81       	ldd	r24, Y+1	; 0x01
    403a:	99 27       	eor	r25, r25
    403c:	87 fd       	sbrc	r24, 7
    403e:	90 95       	com	r25
    4040:	0f 2e       	mov	r0, r31
    4042:	f8 e8       	ldi	r31, 0x88	; 136
    4044:	8f 2e       	mov	r8, r31
    4046:	99 24       	eor	r9, r9
    4048:	f0 2d       	mov	r31, r0
    404a:	88 1a       	sub	r8, r24
    404c:	99 0a       	sbc	r9, r25
    404e:	88 0c       	add	r8, r8
    4050:	99 1c       	adc	r9, r9
    4052:	88 0c       	add	r8, r8
    4054:	99 1c       	adc	r9, r9
    4056:	aa 24       	eor	r10, r10
    4058:	97 fc       	sbrc	r9, 7
    405a:	a0 94       	com	r10
    405c:	ba 2c       	mov	r11, r10
    405e:	8a 81       	ldd	r24, Y+2	; 0x02
    4060:	99 27       	eor	r25, r25
    4062:	87 fd       	sbrc	r24, 7
    4064:	90 95       	com	r25
    4066:	28 e5       	ldi	r18, 0x58	; 88
    4068:	32 e0       	ldi	r19, 0x02	; 2
    406a:	28 1b       	sub	r18, r24
    406c:	39 0b       	sbc	r19, r25
    406e:	79 01       	movw	r14, r18
    4070:	ee 0c       	add	r14, r14
    4072:	ff 1c       	adc	r15, r15
    4074:	ee 0c       	add	r14, r14
    4076:	ff 1c       	adc	r15, r15
    4078:	00 27       	eor	r16, r16
    407a:	f7 fc       	sbrc	r15, 7
    407c:	00 95       	com	r16
    407e:	10 2f       	mov	r17, r16
    4080:	84 eb       	ldi	r24, 0xB4	; 180
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	a0 e0       	ldi	r26, 0x00	; 0
    4086:	b0 e0       	ldi	r27, 0x00	; 0
    4088:	ed b7       	in	r30, 0x3d	; 61
    408a:	fe b7       	in	r31, 0x3e	; 62
    408c:	81 83       	std	Z+1, r24	; 0x01
    408e:	92 83       	std	Z+2, r25	; 0x02
    4090:	a3 83       	std	Z+3, r26	; 0x03
    4092:	b4 83       	std	Z+4, r27	; 0x04
    4094:	cb 01       	movw	r24, r22
    4096:	ba 01       	movw	r22, r20
    4098:	a5 01       	movw	r20, r10
    409a:	94 01       	movw	r18, r8
    409c:	aa 24       	eor	r10, r10
    409e:	bb 24       	eor	r11, r11
    40a0:	65 01       	movw	r12, r10
    40a2:	0e 94 cd 23 	call	0x479a	; 0x479a <_Z3maplllll>
    40a6:	0f 90       	pop	r0
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
}
    40ae:	86 2f       	mov	r24, r22
    40b0:	97 2f       	mov	r25, r23
    40b2:	df 91       	pop	r29
    40b4:	cf 91       	pop	r28
    40b6:	1f 91       	pop	r17
    40b8:	0f 91       	pop	r16
    40ba:	ff 90       	pop	r15
    40bc:	ef 90       	pop	r14
    40be:	df 90       	pop	r13
    40c0:	cf 90       	pop	r12
    40c2:	bf 90       	pop	r11
    40c4:	af 90       	pop	r10
    40c6:	9f 90       	pop	r9
    40c8:	8f 90       	pop	r8
    40ca:	08 95       	ret

000040cc <_ZN5Servo8attachedEv>:
  return pulsewidth;   
}

bool Servo::attached()
{
  return servos[this->servoIndex].Pin.isActive ;
    40cc:	fc 01       	movw	r30, r24
    40ce:	80 81       	ld	r24, Z
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	fc 01       	movw	r30, r24
    40d4:	ee 0f       	add	r30, r30
    40d6:	ff 1f       	adc	r31, r31
    40d8:	8e 0f       	add	r24, r30
    40da:	9f 1f       	adc	r25, r31
    40dc:	fc 01       	movw	r30, r24
    40de:	e8 5c       	subi	r30, 0xC8	; 200
    40e0:	f9 4f       	sbci	r31, 0xF9	; 249
    40e2:	90 81       	ld	r25, Z
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	96 ff       	sbrs	r25, 6
    40e8:	80 e0       	ldi	r24, 0x00	; 0
}
    40ea:	08 95       	ret

000040ec <_ZN8SPIClass5beginEv>:
  // MISO pin automatically overrides to INPUT.
  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).

  pinMode(SCK, OUTPUT);
    40ec:	8d e0       	ldi	r24, 0x0D	; 13
    40ee:	61 e0       	ldi	r22, 0x01	; 1
    40f0:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <pinMode>
  pinMode(MOSI, OUTPUT);
    40f4:	8b e0       	ldi	r24, 0x0B	; 11
    40f6:	61 e0       	ldi	r22, 0x01	; 1
    40f8:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <pinMode>
  pinMode(SS, OUTPUT);
    40fc:	8a e0       	ldi	r24, 0x0A	; 10
    40fe:	61 e0       	ldi	r22, 0x01	; 1
    4100:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <pinMode>
  
  digitalWrite(SCK, LOW);
    4104:	8d e0       	ldi	r24, 0x0D	; 13
    4106:	60 e0       	ldi	r22, 0x00	; 0
    4108:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
  digitalWrite(MOSI, LOW);
    410c:	8b e0       	ldi	r24, 0x0B	; 11
    410e:	60 e0       	ldi	r22, 0x00	; 0
    4110:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
  digitalWrite(SS, HIGH);
    4114:	8a e0       	ldi	r24, 0x0A	; 10
    4116:	61 e0       	ldi	r22, 0x01	; 1
    4118:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
    411c:	8c b5       	in	r24, 0x2c	; 44
    411e:	80 61       	ori	r24, 0x10	; 16
    4120:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
    4122:	8c b5       	in	r24, 0x2c	; 44
    4124:	80 64       	ori	r24, 0x40	; 64
    4126:	8c bd       	out	0x2c, r24	; 44
}
    4128:	08 95       	ret

0000412a <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  SPCR &= ~_BV(SPE);
    412a:	8c b5       	in	r24, 0x2c	; 44
    412c:	8f 7b       	andi	r24, 0xBF	; 191
    412e:	8c bd       	out	0x2c, r24	; 44
}
    4130:	08 95       	ret

00004132 <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    4132:	88 23       	and	r24, r24
    4134:	21 f4       	brne	.+8      	; 0x413e <_ZN8SPIClass11setBitOrderEh+0xc>
    SPCR |= _BV(DORD);
    4136:	8c b5       	in	r24, 0x2c	; 44
    4138:	80 62       	ori	r24, 0x20	; 32
    413a:	8c bd       	out	0x2c, r24	; 44
    413c:	08 95       	ret
  } else {
    SPCR &= ~(_BV(DORD));
    413e:	8c b5       	in	r24, 0x2c	; 44
    4140:	8f 7d       	andi	r24, 0xDF	; 223
    4142:	8c bd       	out	0x2c, r24	; 44
    4144:	08 95       	ret

00004146 <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    4146:	9c b5       	in	r25, 0x2c	; 44
    4148:	93 7f       	andi	r25, 0xF3	; 243
    414a:	89 2b       	or	r24, r25
    414c:	8c bd       	out	0x2c, r24	; 44
}
    414e:	08 95       	ret

00004150 <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    4150:	9c b5       	in	r25, 0x2c	; 44
    4152:	28 2f       	mov	r18, r24
    4154:	23 70       	andi	r18, 0x03	; 3
    4156:	9c 7f       	andi	r25, 0xFC	; 252
    4158:	92 2b       	or	r25, r18
    415a:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    415c:	2d b5       	in	r18, 0x2d	; 45
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	95 95       	asr	r25
    4162:	87 95       	ror	r24
    4164:	95 95       	asr	r25
    4166:	87 95       	ror	r24
    4168:	81 70       	andi	r24, 0x01	; 1
    416a:	92 2f       	mov	r25, r18
    416c:	9e 7f       	andi	r25, 0xFE	; 254
    416e:	89 2b       	or	r24, r25
    4170:	8d bd       	out	0x2d, r24	; 45
}
    4172:	08 95       	ret

00004174 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    4174:	82 30       	cpi	r24, 0x02	; 2
    4176:	e8 f4       	brcc	.+58     	; 0x41b2 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    4178:	e8 2f       	mov	r30, r24
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	ee 0f       	add	r30, r30
    417e:	ff 1f       	adc	r31, r31
    4180:	e3 5a       	subi	r30, 0xA3	; 163
    4182:	f9 4f       	sbci	r31, 0xF9	; 249
    4184:	71 83       	std	Z+1, r23	; 0x01
    4186:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    4188:	81 30       	cpi	r24, 0x01	; 1
    418a:	41 f0       	breq	.+16     	; 0x419c <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    418c:	80 91 69 00 	lds	r24, 0x0069
    4190:	8c 7f       	andi	r24, 0xFC	; 252
    4192:	84 2b       	or	r24, r20
    4194:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
    4198:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    419a:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    419c:	80 91 69 00 	lds	r24, 0x0069
    41a0:	44 0f       	add	r20, r20
    41a2:	55 1f       	adc	r21, r21
    41a4:	44 0f       	add	r20, r20
    41a6:	55 1f       	adc	r21, r21
    41a8:	83 7f       	andi	r24, 0xF3	; 243
    41aa:	84 2b       	or	r24, r20
    41ac:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
    41b0:	e9 9a       	sbi	0x1d, 1	; 29
    41b2:	08 95       	ret

000041b4 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    41b4:	82 30       	cpi	r24, 0x02	; 2
    41b6:	68 f4       	brcc	.+26     	; 0x41d2 <detachInterrupt+0x1e>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    41b8:	81 30       	cpi	r24, 0x01	; 1
    41ba:	11 f0       	breq	.+4      	; 0x41c0 <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    41bc:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    41be:	01 c0       	rjmp	.+2      	; 0x41c2 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    41c0:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    41c2:	e8 2f       	mov	r30, r24
    41c4:	f0 e0       	ldi	r31, 0x00	; 0
    41c6:	ee 0f       	add	r30, r30
    41c8:	ff 1f       	adc	r31, r31
    41ca:	e3 5a       	subi	r30, 0xA3	; 163
    41cc:	f9 4f       	sbci	r31, 0xF9	; 249
    41ce:	11 82       	std	Z+1, r1	; 0x01
    41d0:	10 82       	st	Z, r1
    41d2:	08 95       	ret

000041d4 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
    41d4:	1f 92       	push	r1
    41d6:	0f 92       	push	r0
    41d8:	0f b6       	in	r0, 0x3f	; 63
    41da:	0f 92       	push	r0
    41dc:	11 24       	eor	r1, r1
    41de:	2f 93       	push	r18
    41e0:	3f 93       	push	r19
    41e2:	4f 93       	push	r20
    41e4:	5f 93       	push	r21
    41e6:	6f 93       	push	r22
    41e8:	7f 93       	push	r23
    41ea:	8f 93       	push	r24
    41ec:	9f 93       	push	r25
    41ee:	af 93       	push	r26
    41f0:	bf 93       	push	r27
    41f2:	ef 93       	push	r30
    41f4:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    41f6:	80 91 5d 06 	lds	r24, 0x065D
    41fa:	90 91 5e 06 	lds	r25, 0x065E
    41fe:	00 97       	sbiw	r24, 0x00	; 0
    4200:	29 f0       	breq	.+10     	; 0x420c <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    4202:	e0 91 5d 06 	lds	r30, 0x065D
    4206:	f0 91 5e 06 	lds	r31, 0x065E
    420a:	09 95       	icall
}
    420c:	ff 91       	pop	r31
    420e:	ef 91       	pop	r30
    4210:	bf 91       	pop	r27
    4212:	af 91       	pop	r26
    4214:	9f 91       	pop	r25
    4216:	8f 91       	pop	r24
    4218:	7f 91       	pop	r23
    421a:	6f 91       	pop	r22
    421c:	5f 91       	pop	r21
    421e:	4f 91       	pop	r20
    4220:	3f 91       	pop	r19
    4222:	2f 91       	pop	r18
    4224:	0f 90       	pop	r0
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	0f 90       	pop	r0
    422a:	1f 90       	pop	r1
    422c:	18 95       	reti

0000422e <__vector_2>:

SIGNAL(INT1_vect) {
    422e:	1f 92       	push	r1
    4230:	0f 92       	push	r0
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	0f 92       	push	r0
    4236:	11 24       	eor	r1, r1
    4238:	2f 93       	push	r18
    423a:	3f 93       	push	r19
    423c:	4f 93       	push	r20
    423e:	5f 93       	push	r21
    4240:	6f 93       	push	r22
    4242:	7f 93       	push	r23
    4244:	8f 93       	push	r24
    4246:	9f 93       	push	r25
    4248:	af 93       	push	r26
    424a:	bf 93       	push	r27
    424c:	ef 93       	push	r30
    424e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    4250:	80 91 5f 06 	lds	r24, 0x065F
    4254:	90 91 60 06 	lds	r25, 0x0660
    4258:	00 97       	sbiw	r24, 0x00	; 0
    425a:	29 f0       	breq	.+10     	; 0x4266 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    425c:	e0 91 5f 06 	lds	r30, 0x065F
    4260:	f0 91 60 06 	lds	r31, 0x0660
    4264:	09 95       	icall
}
    4266:	ff 91       	pop	r31
    4268:	ef 91       	pop	r30
    426a:	bf 91       	pop	r27
    426c:	af 91       	pop	r26
    426e:	9f 91       	pop	r25
    4270:	8f 91       	pop	r24
    4272:	7f 91       	pop	r23
    4274:	6f 91       	pop	r22
    4276:	5f 91       	pop	r21
    4278:	4f 91       	pop	r20
    427a:	3f 91       	pop	r19
    427c:	2f 91       	pop	r18
    427e:	0f 90       	pop	r0
    4280:	0f be       	out	0x3f, r0	; 63
    4282:	0f 90       	pop	r0
    4284:	1f 90       	pop	r1
    4286:	18 95       	reti

00004288 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    4288:	1f 92       	push	r1
    428a:	0f 92       	push	r0
    428c:	0f b6       	in	r0, 0x3f	; 63
    428e:	0f 92       	push	r0
    4290:	11 24       	eor	r1, r1
    4292:	2f 93       	push	r18
    4294:	3f 93       	push	r19
    4296:	8f 93       	push	r24
    4298:	9f 93       	push	r25
    429a:	af 93       	push	r26
    429c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    429e:	80 91 61 06 	lds	r24, 0x0661
    42a2:	90 91 62 06 	lds	r25, 0x0662
    42a6:	a0 91 63 06 	lds	r26, 0x0663
    42aa:	b0 91 64 06 	lds	r27, 0x0664
	unsigned char f = timer0_fract;
    42ae:	30 91 69 06 	lds	r19, 0x0669

	m += MILLIS_INC;
	f += FRACT_INC;
    42b2:	23 2f       	mov	r18, r19
    42b4:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    42b6:	2d 37       	cpi	r18, 0x7D	; 125
    42b8:	20 f4       	brcc	.+8      	; 0x42c2 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    42ba:	01 96       	adiw	r24, 0x01	; 1
    42bc:	a1 1d       	adc	r26, r1
    42be:	b1 1d       	adc	r27, r1
    42c0:	05 c0       	rjmp	.+10     	; 0x42cc <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    42c2:	23 2f       	mov	r18, r19
    42c4:	2a 57       	subi	r18, 0x7A	; 122
		m += 1;
    42c6:	02 96       	adiw	r24, 0x02	; 2
    42c8:	a1 1d       	adc	r26, r1
    42ca:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    42cc:	20 93 69 06 	sts	0x0669, r18
	timer0_millis = m;
    42d0:	80 93 61 06 	sts	0x0661, r24
    42d4:	90 93 62 06 	sts	0x0662, r25
    42d8:	a0 93 63 06 	sts	0x0663, r26
    42dc:	b0 93 64 06 	sts	0x0664, r27
	timer0_overflow_count++;
    42e0:	80 91 65 06 	lds	r24, 0x0665
    42e4:	90 91 66 06 	lds	r25, 0x0666
    42e8:	a0 91 67 06 	lds	r26, 0x0667
    42ec:	b0 91 68 06 	lds	r27, 0x0668
    42f0:	01 96       	adiw	r24, 0x01	; 1
    42f2:	a1 1d       	adc	r26, r1
    42f4:	b1 1d       	adc	r27, r1
    42f6:	80 93 65 06 	sts	0x0665, r24
    42fa:	90 93 66 06 	sts	0x0666, r25
    42fe:	a0 93 67 06 	sts	0x0667, r26
    4302:	b0 93 68 06 	sts	0x0668, r27
}
    4306:	bf 91       	pop	r27
    4308:	af 91       	pop	r26
    430a:	9f 91       	pop	r25
    430c:	8f 91       	pop	r24
    430e:	3f 91       	pop	r19
    4310:	2f 91       	pop	r18
    4312:	0f 90       	pop	r0
    4314:	0f be       	out	0x3f, r0	; 63
    4316:	0f 90       	pop	r0
    4318:	1f 90       	pop	r1
    431a:	18 95       	reti

0000431c <millis>:

unsigned long millis()
{
    431c:	0f 93       	push	r16
    431e:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG;
    4320:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4322:	f8 94       	cli
	m = timer0_millis;
    4324:	00 91 61 06 	lds	r16, 0x0661
    4328:	10 91 62 06 	lds	r17, 0x0662
    432c:	20 91 63 06 	lds	r18, 0x0663
    4330:	30 91 64 06 	lds	r19, 0x0664
	SREG = oldSREG;
    4334:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    4336:	b8 01       	movw	r22, r16
    4338:	c9 01       	movw	r24, r18
    433a:	1f 91       	pop	r17
    433c:	0f 91       	pop	r16
    433e:	08 95       	ret

00004340 <micros>:

unsigned long micros() {
    4340:	0f 93       	push	r16
    4342:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4344:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    4346:	f8 94       	cli
	m = timer0_overflow_count;
    4348:	00 91 65 06 	lds	r16, 0x0665
    434c:	10 91 66 06 	lds	r17, 0x0666
    4350:	20 91 67 06 	lds	r18, 0x0667
    4354:	30 91 68 06 	lds	r19, 0x0668
#if defined(TCNT0)
	t = TCNT0;
    4358:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    435a:	a8 9b       	sbis	0x15, 0	; 21
    435c:	06 c0       	rjmp	.+12     	; 0x436a <micros+0x2a>
    435e:	8f 3f       	cpi	r24, 0xFF	; 255
    4360:	21 f0       	breq	.+8      	; 0x436a <micros+0x2a>
		m++;
    4362:	0f 5f       	subi	r16, 0xFF	; 255
    4364:	1f 4f       	sbci	r17, 0xFF	; 255
    4366:	2f 4f       	sbci	r18, 0xFF	; 255
    4368:	3f 4f       	sbci	r19, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    436a:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    436c:	32 2f       	mov	r19, r18
    436e:	21 2f       	mov	r18, r17
    4370:	10 2f       	mov	r17, r16
    4372:	00 27       	eor	r16, r16
    4374:	08 0f       	add	r16, r24
    4376:	11 1d       	adc	r17, r1
    4378:	21 1d       	adc	r18, r1
    437a:	31 1d       	adc	r19, r1
    437c:	42 e0       	ldi	r20, 0x02	; 2
    437e:	00 0f       	add	r16, r16
    4380:	11 1f       	adc	r17, r17
    4382:	22 1f       	adc	r18, r18
    4384:	33 1f       	adc	r19, r19
    4386:	4a 95       	dec	r20
    4388:	d1 f7       	brne	.-12     	; 0x437e <micros+0x3e>
}
    438a:	b8 01       	movw	r22, r16
    438c:	c9 01       	movw	r24, r18
    438e:	1f 91       	pop	r17
    4390:	0f 91       	pop	r16
    4392:	08 95       	ret

00004394 <delay>:

void delay(unsigned long ms)
{
    4394:	cf 92       	push	r12
    4396:	df 92       	push	r13
    4398:	ef 92       	push	r14
    439a:	ff 92       	push	r15
    439c:	cf 93       	push	r28
    439e:	df 93       	push	r29
    43a0:	6b 01       	movw	r12, r22
    43a2:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    43a4:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    43a8:	dc 01       	movw	r26, r24
    43aa:	cb 01       	movw	r24, r22
    43ac:	ec 01       	movw	r28, r24

	while (ms > 0) {
    43ae:	0f c0       	rjmp	.+30     	; 0x43ce <delay+0x3a>
		if (((uint16_t)micros() - start) >= 1000) {
    43b0:	0e 94 a0 21 	call	0x4340	; 0x4340 <micros>
    43b4:	6c 1b       	sub	r22, r28
    43b6:	7d 0b       	sbc	r23, r29
    43b8:	83 e0       	ldi	r24, 0x03	; 3
    43ba:	68 3e       	cpi	r22, 0xE8	; 232
    43bc:	78 07       	cpc	r23, r24
    43be:	38 f0       	brcs	.+14     	; 0x43ce <delay+0x3a>
			ms--;
    43c0:	08 94       	sec
    43c2:	c1 08       	sbc	r12, r1
    43c4:	d1 08       	sbc	r13, r1
    43c6:	e1 08       	sbc	r14, r1
    43c8:	f1 08       	sbc	r15, r1
			start += 1000;
    43ca:	c8 51       	subi	r28, 0x18	; 24
    43cc:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    43ce:	c1 14       	cp	r12, r1
    43d0:	d1 04       	cpc	r13, r1
    43d2:	e1 04       	cpc	r14, r1
    43d4:	f1 04       	cpc	r15, r1
    43d6:	61 f7       	brne	.-40     	; 0x43b0 <delay+0x1c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    43d8:	df 91       	pop	r29
    43da:	cf 91       	pop	r28
    43dc:	ff 90       	pop	r15
    43de:	ef 90       	pop	r14
    43e0:	df 90       	pop	r13
    43e2:	cf 90       	pop	r12
    43e4:	08 95       	ret

000043e6 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    43e6:	01 97       	sbiw	r24, 0x01	; 1
    43e8:	39 f0       	breq	.+14     	; 0x43f8 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    43ea:	88 0f       	add	r24, r24
    43ec:	99 1f       	adc	r25, r25
    43ee:	88 0f       	add	r24, r24
    43f0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    43f2:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    43f4:	01 97       	sbiw	r24, 0x01	; 1
    43f6:	f1 f7       	brne	.-4      	; 0x43f4 <delayMicroseconds+0xe>
    43f8:	08 95       	ret

000043fa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    43fa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    43fc:	84 b5       	in	r24, 0x24	; 36
    43fe:	82 60       	ori	r24, 0x02	; 2
    4400:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4402:	84 b5       	in	r24, 0x24	; 36
    4404:	81 60       	ori	r24, 0x01	; 1
    4406:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4408:	85 b5       	in	r24, 0x25	; 37
    440a:	82 60       	ori	r24, 0x02	; 2
    440c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    440e:	85 b5       	in	r24, 0x25	; 37
    4410:	81 60       	ori	r24, 0x01	; 1
    4412:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4414:	ee e6       	ldi	r30, 0x6E	; 110
    4416:	f0 e0       	ldi	r31, 0x00	; 0
    4418:	80 81       	ld	r24, Z
    441a:	81 60       	ori	r24, 0x01	; 1
    441c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    441e:	e1 e8       	ldi	r30, 0x81	; 129
    4420:	f0 e0       	ldi	r31, 0x00	; 0
    4422:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4424:	80 81       	ld	r24, Z
    4426:	82 60       	ori	r24, 0x02	; 2
    4428:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    442a:	80 81       	ld	r24, Z
    442c:	81 60       	ori	r24, 0x01	; 1
    442e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4430:	e0 e8       	ldi	r30, 0x80	; 128
    4432:	f0 e0       	ldi	r31, 0x00	; 0
    4434:	80 81       	ld	r24, Z
    4436:	81 60       	ori	r24, 0x01	; 1
    4438:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    443a:	e1 eb       	ldi	r30, 0xB1	; 177
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	80 81       	ld	r24, Z
    4440:	84 60       	ori	r24, 0x04	; 4
    4442:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4444:	e0 eb       	ldi	r30, 0xB0	; 176
    4446:	f0 e0       	ldi	r31, 0x00	; 0
    4448:	80 81       	ld	r24, Z
    444a:	81 60       	ori	r24, 0x01	; 1
    444c:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    444e:	ea e7       	ldi	r30, 0x7A	; 122
    4450:	f0 e0       	ldi	r31, 0x00	; 0
    4452:	80 81       	ld	r24, Z
    4454:	84 60       	ori	r24, 0x04	; 4
    4456:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    4458:	80 81       	ld	r24, Z
    445a:	82 60       	ori	r24, 0x02	; 2
    445c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    445e:	80 81       	ld	r24, Z
    4460:	81 60       	ori	r24, 0x01	; 1
    4462:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4464:	80 81       	ld	r24, Z
    4466:	80 68       	ori	r24, 0x80	; 128
    4468:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    446a:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    446e:	08 95       	ret

00004470 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    4470:	80 93 5d 02 	sts	0x025D, r24
}
    4474:	08 95       	ret

00004476 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    4476:	8e 30       	cpi	r24, 0x0E	; 14
    4478:	08 f0       	brcs	.+2      	; 0x447c <analogRead+0x6>
    447a:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    447c:	87 70       	andi	r24, 0x07	; 7
    447e:	90 91 5d 02 	lds	r25, 0x025D
    4482:	92 95       	swap	r25
    4484:	99 0f       	add	r25, r25
    4486:	99 0f       	add	r25, r25
    4488:	90 7c       	andi	r25, 0xC0	; 192
    448a:	98 2b       	or	r25, r24
    448c:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    4490:	80 91 7a 00 	lds	r24, 0x007A
    4494:	80 64       	ori	r24, 0x40	; 64
    4496:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    449a:	80 91 7a 00 	lds	r24, 0x007A
    449e:	86 fd       	sbrc	r24, 6
    44a0:	fc cf       	rjmp	.-8      	; 0x449a <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    44a2:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
    44a6:	90 91 79 00 	lds	r25, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    44aa:	39 2f       	mov	r19, r25
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	82 2b       	or	r24, r18
    44b2:	93 2b       	or	r25, r19
}
    44b4:	08 95       	ret

000044b6 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    44b6:	1f 93       	push	r17
    44b8:	cf 93       	push	r28
    44ba:	df 93       	push	r29
    44bc:	18 2f       	mov	r17, r24
    44be:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    44c0:	61 e0       	ldi	r22, 0x01	; 1
    44c2:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <pinMode>
	if (val == 0)
    44c6:	20 97       	sbiw	r28, 0x00	; 0
    44c8:	11 f4       	brne	.+4      	; 0x44ce <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    44ca:	81 2f       	mov	r24, r17
    44cc:	4c c0       	rjmp	.+152    	; 0x4566 <analogWrite+0xb0>
	}
	else if (val == 255)
    44ce:	cf 3f       	cpi	r28, 0xFF	; 255
    44d0:	d1 05       	cpc	r29, r1
    44d2:	11 f4       	brne	.+4      	; 0x44d8 <analogWrite+0x22>
	{
		digitalWrite(pin, HIGH);
    44d4:	81 2f       	mov	r24, r17
    44d6:	49 c0       	rjmp	.+146    	; 0x456a <analogWrite+0xb4>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    44d8:	e1 2f       	mov	r30, r17
    44da:	f0 e0       	ldi	r31, 0x00	; 0
    44dc:	eb 56       	subi	r30, 0x6B	; 107
    44de:	ff 4f       	sbci	r31, 0xFF	; 255
    44e0:	e4 91       	lpm	r30, Z
    44e2:	e3 30       	cpi	r30, 0x03	; 3
    44e4:	c1 f0       	breq	.+48     	; 0x4516 <analogWrite+0x60>
    44e6:	e4 30       	cpi	r30, 0x04	; 4
    44e8:	28 f4       	brcc	.+10     	; 0x44f4 <analogWrite+0x3e>
    44ea:	e1 30       	cpi	r30, 0x01	; 1
    44ec:	51 f0       	breq	.+20     	; 0x4502 <analogWrite+0x4c>
    44ee:	e2 30       	cpi	r30, 0x02	; 2
    44f0:	b1 f5       	brne	.+108    	; 0x455e <analogWrite+0xa8>
    44f2:	0c c0       	rjmp	.+24     	; 0x450c <analogWrite+0x56>
    44f4:	e6 30       	cpi	r30, 0x06	; 6
    44f6:	19 f1       	breq	.+70     	; 0x453e <analogWrite+0x88>
    44f8:	e7 30       	cpi	r30, 0x07	; 7
    44fa:	49 f1       	breq	.+82     	; 0x454e <analogWrite+0x98>
    44fc:	e4 30       	cpi	r30, 0x04	; 4
    44fe:	79 f5       	brne	.+94     	; 0x455e <analogWrite+0xa8>
    4500:	14 c0       	rjmp	.+40     	; 0x452a <analogWrite+0x74>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    4502:	84 b5       	in	r24, 0x24	; 36
    4504:	80 68       	ori	r24, 0x80	; 128
    4506:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    4508:	c7 bd       	out	0x27, r28	; 39
				break;
    450a:	32 c0       	rjmp	.+100    	; 0x4570 <analogWrite+0xba>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    450c:	84 b5       	in	r24, 0x24	; 36
    450e:	80 62       	ori	r24, 0x20	; 32
    4510:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    4512:	c8 bd       	out	0x28, r28	; 40
				break;
    4514:	2d c0       	rjmp	.+90     	; 0x4570 <analogWrite+0xba>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    4516:	80 91 80 00 	lds	r24, 0x0080
    451a:	80 68       	ori	r24, 0x80	; 128
    451c:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    4520:	d0 93 89 00 	sts	0x0089, r29
    4524:	c0 93 88 00 	sts	0x0088, r28
				break;
    4528:	23 c0       	rjmp	.+70     	; 0x4570 <analogWrite+0xba>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    452a:	80 91 80 00 	lds	r24, 0x0080
    452e:	80 62       	ori	r24, 0x20	; 32
    4530:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    4534:	d0 93 8b 00 	sts	0x008B, r29
    4538:	c0 93 8a 00 	sts	0x008A, r28
				break;
    453c:	19 c0       	rjmp	.+50     	; 0x4570 <analogWrite+0xba>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    453e:	80 91 b0 00 	lds	r24, 0x00B0
    4542:	80 68       	ori	r24, 0x80	; 128
    4544:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    4548:	c0 93 b3 00 	sts	0x00B3, r28
				break;
    454c:	11 c0       	rjmp	.+34     	; 0x4570 <analogWrite+0xba>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    454e:	80 91 b0 00 	lds	r24, 0x00B0
    4552:	80 62       	ori	r24, 0x20	; 32
    4554:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    4558:	c0 93 b4 00 	sts	0x00B4, r28
				break;
    455c:	09 c0       	rjmp	.+18     	; 0x4570 <analogWrite+0xba>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
					digitalWrite(pin, LOW);
    455e:	81 2f       	mov	r24, r17
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    4560:	c0 38       	cpi	r28, 0x80	; 128
    4562:	d1 05       	cpc	r29, r1
    4564:	14 f4       	brge	.+4      	; 0x456a <analogWrite+0xb4>
					digitalWrite(pin, LOW);
    4566:	60 e0       	ldi	r22, 0x00	; 0
    4568:	01 c0       	rjmp	.+2      	; 0x456c <analogWrite+0xb6>
				} else {
					digitalWrite(pin, HIGH);
    456a:	61 e0       	ldi	r22, 0x01	; 1
    456c:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
				}
		}
	}
}
    4570:	df 91       	pop	r29
    4572:	cf 91       	pop	r28
    4574:	1f 91       	pop	r17
    4576:	08 95       	ret

00004578 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4578:	83 30       	cpi	r24, 0x03	; 3
    457a:	71 f0       	breq	.+28     	; 0x4598 <turnOffPWM+0x20>
    457c:	84 30       	cpi	r24, 0x04	; 4
    457e:	28 f4       	brcc	.+10     	; 0x458a <turnOffPWM+0x12>
    4580:	81 30       	cpi	r24, 0x01	; 1
    4582:	a1 f0       	breq	.+40     	; 0x45ac <turnOffPWM+0x34>
    4584:	82 30       	cpi	r24, 0x02	; 2
    4586:	21 f5       	brne	.+72     	; 0x45d0 <turnOffPWM+0x58>
    4588:	14 c0       	rjmp	.+40     	; 0x45b2 <turnOffPWM+0x3a>
    458a:	86 30       	cpi	r24, 0x06	; 6
    458c:	b1 f0       	breq	.+44     	; 0x45ba <turnOffPWM+0x42>
    458e:	87 30       	cpi	r24, 0x07	; 7
    4590:	d1 f0       	breq	.+52     	; 0x45c6 <turnOffPWM+0x4e>
    4592:	84 30       	cpi	r24, 0x04	; 4
    4594:	e9 f4       	brne	.+58     	; 0x45d0 <turnOffPWM+0x58>
    4596:	04 c0       	rjmp	.+8      	; 0x45a0 <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4598:	80 91 80 00 	lds	r24, 0x0080
    459c:	8f 77       	andi	r24, 0x7F	; 127
    459e:	03 c0       	rjmp	.+6      	; 0x45a6 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    45a0:	80 91 80 00 	lds	r24, 0x0080
    45a4:	8f 7d       	andi	r24, 0xDF	; 223
    45a6:	80 93 80 00 	sts	0x0080, r24
    45aa:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    45ac:	84 b5       	in	r24, 0x24	; 36
    45ae:	8f 77       	andi	r24, 0x7F	; 127
    45b0:	02 c0       	rjmp	.+4      	; 0x45b6 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    45b2:	84 b5       	in	r24, 0x24	; 36
    45b4:	8f 7d       	andi	r24, 0xDF	; 223
    45b6:	84 bd       	out	0x24, r24	; 36
    45b8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    45ba:	80 91 b0 00 	lds	r24, 0x00B0
    45be:	8f 77       	andi	r24, 0x7F	; 127
    45c0:	80 93 b0 00 	sts	0x00B0, r24
    45c4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    45c6:	80 91 b0 00 	lds	r24, 0x00B0
    45ca:	8f 7d       	andi	r24, 0xDF	; 223
    45cc:	80 93 b0 00 	sts	0x00B0, r24
    45d0:	08 95       	ret

000045d2 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	fc 01       	movw	r30, r24
    45d6:	e7 55       	subi	r30, 0x57	; 87
    45d8:	ff 4f       	sbci	r31, 0xFF	; 255
    45da:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    45dc:	83 54       	subi	r24, 0x43	; 67
    45de:	9f 4f       	sbci	r25, 0xFF	; 255
    45e0:	fc 01       	movw	r30, r24
    45e2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    45e4:	88 23       	and	r24, r24
    45e6:	41 f1       	breq	.+80     	; 0x4638 <pinMode+0x66>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	88 0f       	add	r24, r24
    45ec:	99 1f       	adc	r25, r25
    45ee:	fc 01       	movw	r30, r24
    45f0:	eb 51       	subi	r30, 0x1B	; 27
    45f2:	ff 4f       	sbci	r31, 0xFF	; 255
    45f4:	45 91       	lpm	r20, Z+
    45f6:	54 91       	lpm	r21, Z
    45f8:	da 01       	movw	r26, r20
	out = portOutputRegister(port);
    45fa:	85 52       	subi	r24, 0x25	; 37
    45fc:	9f 4f       	sbci	r25, 0xFF	; 255
    45fe:	fc 01       	movw	r30, r24
    4600:	85 91       	lpm	r24, Z+
    4602:	94 91       	lpm	r25, Z
    4604:	fc 01       	movw	r30, r24

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    4606:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4608:	f8 94       	cli
		*reg &= ~bit;
    460a:	8c 91       	ld	r24, X

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
    460c:	66 23       	and	r22, r22
    460e:	31 f4       	brne	.+12     	; 0x461c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    4610:	20 95       	com	r18
    4612:	82 23       	and	r24, r18
    4614:	8c 93       	st	X, r24
		*out &= ~bit;
    4616:	80 81       	ld	r24, Z
    4618:	82 23       	and	r24, r18
    461a:	08 c0       	rjmp	.+16     	; 0x462c <pinMode+0x5a>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    461c:	62 30       	cpi	r22, 0x02	; 2
    461e:	49 f4       	brne	.+18     	; 0x4632 <pinMode+0x60>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    4620:	32 2f       	mov	r19, r18
    4622:	30 95       	com	r19
    4624:	83 23       	and	r24, r19
    4626:	8c 93       	st	X, r24
		*out |= bit;
    4628:	80 81       	ld	r24, Z
    462a:	82 2b       	or	r24, r18
    462c:	80 83       	st	Z, r24
		SREG = oldSREG;
    462e:	9f bf       	out	0x3f, r25	; 63
    4630:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
    4632:	82 2b       	or	r24, r18
    4634:	8c 93       	st	X, r24
		SREG = oldSREG;
    4636:	9f bf       	out	0x3f, r25	; 63
    4638:	08 95       	ret

0000463a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    463a:	0f 93       	push	r16
    463c:	1f 93       	push	r17
    463e:	cf 93       	push	r28
    4640:	df 93       	push	r29
    4642:	0f 92       	push	r0
    4644:	cd b7       	in	r28, 0x3d	; 61
    4646:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    4648:	28 2f       	mov	r18, r24
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	f9 01       	movw	r30, r18
    464e:	eb 56       	subi	r30, 0x6B	; 107
    4650:	ff 4f       	sbci	r31, 0xFF	; 255
    4652:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4654:	f9 01       	movw	r30, r18
    4656:	e7 55       	subi	r30, 0x57	; 87
    4658:	ff 4f       	sbci	r31, 0xFF	; 255
    465a:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    465c:	f9 01       	movw	r30, r18
    465e:	e3 54       	subi	r30, 0x43	; 67
    4660:	ff 4f       	sbci	r31, 0xFF	; 255
    4662:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4664:	00 23       	and	r16, r16
    4666:	d1 f0       	breq	.+52     	; 0x469c <digitalWrite+0x62>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4668:	88 23       	and	r24, r24
    466a:	21 f0       	breq	.+8      	; 0x4674 <digitalWrite+0x3a>
    466c:	69 83       	std	Y+1, r22	; 0x01
    466e:	0e 94 bc 22 	call	0x4578	; 0x4578 <turnOffPWM>
    4672:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    4674:	e0 2f       	mov	r30, r16
    4676:	f0 e0       	ldi	r31, 0x00	; 0
    4678:	ee 0f       	add	r30, r30
    467a:	ff 1f       	adc	r31, r31
    467c:	e5 52       	subi	r30, 0x25	; 37
    467e:	ff 4f       	sbci	r31, 0xFF	; 255
    4680:	85 91       	lpm	r24, Z+
    4682:	94 91       	lpm	r25, Z
    4684:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    4686:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4688:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    468a:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    468c:	66 23       	and	r22, r22
    468e:	19 f4       	brne	.+6      	; 0x4696 <digitalWrite+0x5c>
		*out &= ~bit;
    4690:	10 95       	com	r17
    4692:	81 23       	and	r24, r17
    4694:	01 c0       	rjmp	.+2      	; 0x4698 <digitalWrite+0x5e>
	} else {
		*out |= bit;
    4696:	81 2b       	or	r24, r17
    4698:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    469a:	9f bf       	out	0x3f, r25	; 63
}
    469c:	0f 90       	pop	r0
    469e:	df 91       	pop	r29
    46a0:	cf 91       	pop	r28
    46a2:	1f 91       	pop	r17
    46a4:	0f 91       	pop	r16
    46a6:	08 95       	ret

000046a8 <digitalRead>:

int digitalRead(uint8_t pin)
{
    46a8:	cf 93       	push	r28
    46aa:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    46ac:	28 2f       	mov	r18, r24
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	f9 01       	movw	r30, r18
    46b2:	eb 56       	subi	r30, 0x6B	; 107
    46b4:	ff 4f       	sbci	r31, 0xFF	; 255
    46b6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    46b8:	f9 01       	movw	r30, r18
    46ba:	e7 55       	subi	r30, 0x57	; 87
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	c4 91       	lpm	r28, Z
	uint8_t port = digitalPinToPort(pin);
    46c0:	f9 01       	movw	r30, r18
    46c2:	e3 54       	subi	r30, 0x43	; 67
    46c4:	ff 4f       	sbci	r31, 0xFF	; 255
    46c6:	d4 91       	lpm	r29, Z

	if (port == NOT_A_PIN) return LOW;
    46c8:	dd 23       	and	r29, r29
    46ca:	91 f0       	breq	.+36     	; 0x46f0 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    46cc:	88 23       	and	r24, r24
    46ce:	11 f0       	breq	.+4      	; 0x46d4 <digitalRead+0x2c>
    46d0:	0e 94 bc 22 	call	0x4578	; 0x4578 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    46d4:	ed 2f       	mov	r30, r29
    46d6:	f0 e0       	ldi	r31, 0x00	; 0
    46d8:	ee 0f       	add	r30, r30
    46da:	ff 1f       	adc	r31, r31
    46dc:	ef 52       	subi	r30, 0x2F	; 47
    46de:	ff 4f       	sbci	r31, 0xFF	; 255
    46e0:	85 91       	lpm	r24, Z+
    46e2:	94 91       	lpm	r25, Z
    46e4:	fc 01       	movw	r30, r24
    46e6:	20 81       	ld	r18, Z
    46e8:	2c 23       	and	r18, r28
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	11 f4       	brne	.+4      	; 0x46f4 <digitalRead+0x4c>
    46f0:	80 e0       	ldi	r24, 0x00	; 0
    46f2:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    46f4:	df 91       	pop	r29
    46f6:	cf 91       	pop	r28
    46f8:	08 95       	ret

000046fa <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    46fa:	00 97       	sbiw	r24, 0x00	; 0
    46fc:	29 f0       	breq	.+10     	; 0x4708 <_Z10randomSeedj+0xe>
    srandom(seed);
    46fe:	bc 01       	movw	r22, r24
    4700:	80 e0       	ldi	r24, 0x00	; 0
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	0e 94 79 43 	call	0x86f2	; 0x86f2 <srandom>
    4708:	08 95       	ret

0000470a <_Z6randoml>:
  }
}

long random(long howbig)
{
    470a:	cf 92       	push	r12
    470c:	df 92       	push	r13
    470e:	ef 92       	push	r14
    4710:	ff 92       	push	r15
    4712:	0f 93       	push	r16
    4714:	1f 93       	push	r17
    4716:	6b 01       	movw	r12, r22
    4718:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    471a:	61 15       	cp	r22, r1
    471c:	71 05       	cpc	r23, r1
    471e:	81 05       	cpc	r24, r1
    4720:	91 05       	cpc	r25, r1
    4722:	49 f0       	breq	.+18     	; 0x4736 <_Z6randoml+0x2c>
    return 0;
  }
  return random() % howbig;
    4724:	0e 94 74 43 	call	0x86e8	; 0x86e8 <random>
    4728:	a7 01       	movw	r20, r14
    472a:	96 01       	movw	r18, r12
    472c:	0e 94 d6 41 	call	0x83ac	; 0x83ac <__divmodsi4>
    4730:	8b 01       	movw	r16, r22
    4732:	9c 01       	movw	r18, r24
    4734:	03 c0       	rjmp	.+6      	; 0x473c <_Z6randoml+0x32>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    4736:	00 e0       	ldi	r16, 0x00	; 0
    4738:	10 e0       	ldi	r17, 0x00	; 0
    473a:	98 01       	movw	r18, r16
  }
  return random() % howbig;
}
    473c:	60 2f       	mov	r22, r16
    473e:	71 2f       	mov	r23, r17
    4740:	82 2f       	mov	r24, r18
    4742:	93 2f       	mov	r25, r19
    4744:	1f 91       	pop	r17
    4746:	0f 91       	pop	r16
    4748:	ff 90       	pop	r15
    474a:	ef 90       	pop	r14
    474c:	df 90       	pop	r13
    474e:	cf 90       	pop	r12
    4750:	08 95       	ret

00004752 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    4752:	cf 92       	push	r12
    4754:	df 92       	push	r13
    4756:	ef 92       	push	r14
    4758:	ff 92       	push	r15
    475a:	6b 01       	movw	r12, r22
    475c:	7c 01       	movw	r14, r24
    475e:	da 01       	movw	r26, r20
    4760:	c9 01       	movw	r24, r18
  if (howsmall >= howbig) {
    4762:	c2 16       	cp	r12, r18
    4764:	d3 06       	cpc	r13, r19
    4766:	e4 06       	cpc	r14, r20
    4768:	f5 06       	cpc	r15, r21
    476a:	74 f4       	brge	.+28     	; 0x4788 <_Z6randomll+0x36>
    return howsmall;
  }
  long diff = howbig - howsmall;
    476c:	8c 19       	sub	r24, r12
    476e:	9d 09       	sbc	r25, r13
    4770:	ae 09       	sbc	r26, r14
    4772:	bf 09       	sbc	r27, r15
  return random(diff) + howsmall;
    4774:	bc 01       	movw	r22, r24
    4776:	cd 01       	movw	r24, r26
    4778:	0e 94 85 23 	call	0x470a	; 0x470a <_Z6randoml>
    477c:	dc 01       	movw	r26, r24
    477e:	cb 01       	movw	r24, r22
    4780:	c8 0e       	add	r12, r24
    4782:	d9 1e       	adc	r13, r25
    4784:	ea 1e       	adc	r14, r26
    4786:	fb 1e       	adc	r15, r27
}
    4788:	6c 2d       	mov	r22, r12
    478a:	7d 2d       	mov	r23, r13
    478c:	8e 2d       	mov	r24, r14
    478e:	9f 2d       	mov	r25, r15
    4790:	ff 90       	pop	r15
    4792:	ef 90       	pop	r14
    4794:	df 90       	pop	r13
    4796:	cf 90       	pop	r12
    4798:	08 95       	ret

0000479a <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    479a:	4f 92       	push	r4
    479c:	5f 92       	push	r5
    479e:	6f 92       	push	r6
    47a0:	7f 92       	push	r7
    47a2:	af 92       	push	r10
    47a4:	bf 92       	push	r11
    47a6:	cf 92       	push	r12
    47a8:	df 92       	push	r13
    47aa:	ef 92       	push	r14
    47ac:	ff 92       	push	r15
    47ae:	0f 93       	push	r16
    47b0:	1f 93       	push	r17
    47b2:	cf 93       	push	r28
    47b4:	df 93       	push	r29
    47b6:	00 d0       	rcall	.+0      	; 0x47b8 <_Z3maplllll+0x1e>
    47b8:	00 d0       	rcall	.+0      	; 0x47ba <_Z3maplllll+0x20>
    47ba:	cd b7       	in	r28, 0x3d	; 61
    47bc:	de b7       	in	r29, 0x3e	; 62
    47be:	29 01       	movw	r4, r18
    47c0:	3a 01       	movw	r6, r20
    47c2:	e9 82       	std	Y+1, r14	; 0x01
    47c4:	fa 82       	std	Y+2, r15	; 0x02
    47c6:	0b 83       	std	Y+3, r16	; 0x03
    47c8:	1c 83       	std	Y+4, r17	; 0x04
    47ca:	76 01       	movw	r14, r12
    47cc:	65 01       	movw	r12, r10
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    47ce:	62 1b       	sub	r22, r18
    47d0:	73 0b       	sbc	r23, r19
    47d2:	84 0b       	sbc	r24, r20
    47d4:	95 0b       	sbc	r25, r21
    47d6:	2d 89       	ldd	r18, Y+21	; 0x15
    47d8:	3e 89       	ldd	r19, Y+22	; 0x16
    47da:	4f 89       	ldd	r20, Y+23	; 0x17
    47dc:	58 8d       	ldd	r21, Y+24	; 0x18
    47de:	2c 19       	sub	r18, r12
    47e0:	3d 09       	sbc	r19, r13
    47e2:	4e 09       	sbc	r20, r14
    47e4:	5f 09       	sbc	r21, r15
    47e6:	0e 94 89 41 	call	0x8312	; 0x8312 <__mulsi3>
    47ea:	29 81       	ldd	r18, Y+1	; 0x01
    47ec:	3a 81       	ldd	r19, Y+2	; 0x02
    47ee:	4b 81       	ldd	r20, Y+3	; 0x03
    47f0:	5c 81       	ldd	r21, Y+4	; 0x04
    47f2:	24 19       	sub	r18, r4
    47f4:	35 09       	sbc	r19, r5
    47f6:	46 09       	sbc	r20, r6
    47f8:	57 09       	sbc	r21, r7
    47fa:	0e 94 d6 41 	call	0x83ac	; 0x83ac <__divmodsi4>
    47fe:	c2 0e       	add	r12, r18
    4800:	d3 1e       	adc	r13, r19
    4802:	e4 1e       	adc	r14, r20
    4804:	f5 1e       	adc	r15, r21
}
    4806:	6c 2d       	mov	r22, r12
    4808:	7d 2d       	mov	r23, r13
    480a:	8e 2d       	mov	r24, r14
    480c:	9f 2d       	mov	r25, r15
    480e:	0f 90       	pop	r0
    4810:	0f 90       	pop	r0
    4812:	0f 90       	pop	r0
    4814:	0f 90       	pop	r0
    4816:	df 91       	pop	r29
    4818:	cf 91       	pop	r28
    481a:	1f 91       	pop	r17
    481c:	0f 91       	pop	r16
    481e:	ff 90       	pop	r15
    4820:	ef 90       	pop	r14
    4822:	df 90       	pop	r13
    4824:	cf 90       	pop	r12
    4826:	bf 90       	pop	r11
    4828:	af 90       	pop	r10
    482a:	7f 90       	pop	r7
    482c:	6f 90       	pop	r6
    482e:	5f 90       	pop	r5
    4830:	4f 90       	pop	r4
    4832:	08 95       	ret

00004834 <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
    4834:	08 95       	ret

00004836 <_Z8makeWordhh>:
    4836:	70 e0       	ldi	r23, 0x00	; 0
    4838:	38 2f       	mov	r19, r24
    483a:	20 e0       	ldi	r18, 0x00	; 0
    483c:	26 2b       	or	r18, r22
    483e:	37 2b       	or	r19, r23
    4840:	82 2f       	mov	r24, r18
    4842:	93 2f       	mov	r25, r19
    4844:	08 95       	ret

00004846 <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
    4846:	fc 01       	movw	r30, r24
    4848:	80 81       	ld	r24, Z
    484a:	91 81       	ldd	r25, Z+1	; 0x01
    484c:	0e 94 8d 42 	call	0x851a	; 0x851a <free>
}
    4850:	08 95       	ret

00004852 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
    4852:	cf 93       	push	r28
    4854:	df 93       	push	r29
    4856:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    4858:	88 81       	ld	r24, Y
    485a:	99 81       	ldd	r25, Y+1	; 0x01
    485c:	00 97       	sbiw	r24, 0x00	; 0
    485e:	11 f0       	breq	.+4      	; 0x4864 <_ZN6String10invalidateEv+0x12>
    4860:	0e 94 8d 42 	call	0x851a	; 0x851a <free>
	buffer = NULL;
    4864:	19 82       	std	Y+1, r1	; 0x01
    4866:	18 82       	st	Y, r1
	capacity = len = 0;
    4868:	1d 82       	std	Y+5, r1	; 0x05
    486a:	1c 82       	std	Y+4, r1	; 0x04
    486c:	1b 82       	std	Y+3, r1	; 0x03
    486e:	1a 82       	std	Y+2, r1	; 0x02
}
    4870:	df 91       	pop	r29
    4872:	cf 91       	pop	r28
    4874:	08 95       	ret

00004876 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    4876:	0f 93       	push	r16
    4878:	1f 93       	push	r17
    487a:	cf 93       	push	r28
    487c:	df 93       	push	r29
    487e:	ec 01       	movw	r28, r24
    4880:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    4882:	6f 5f       	subi	r22, 0xFF	; 255
    4884:	7f 4f       	sbci	r23, 0xFF	; 255
    4886:	88 81       	ld	r24, Y
    4888:	99 81       	ldd	r25, Y+1	; 0x01
    488a:	0e 94 84 43 	call	0x8708	; 0x8708 <realloc>
    488e:	28 2f       	mov	r18, r24
    4890:	39 2f       	mov	r19, r25
	if (newbuffer) {
    4892:	21 15       	cp	r18, r1
    4894:	31 05       	cpc	r19, r1
    4896:	31 f0       	breq	.+12     	; 0x48a4 <_ZN6String12changeBufferEj+0x2e>
		buffer = newbuffer;
    4898:	39 83       	std	Y+1, r19	; 0x01
    489a:	28 83       	st	Y, r18
		capacity = maxStrLen;
    489c:	1b 83       	std	Y+3, r17	; 0x03
    489e:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	01 c0       	rjmp	.+2      	; 0x48a6 <_ZN6String12changeBufferEj+0x30>
	}
	return 0;
    48a4:	80 e0       	ldi	r24, 0x00	; 0
}
    48a6:	df 91       	pop	r29
    48a8:	cf 91       	pop	r28
    48aa:	1f 91       	pop	r17
    48ac:	0f 91       	pop	r16
    48ae:	08 95       	ret

000048b0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    48b0:	cf 93       	push	r28
    48b2:	df 93       	push	r29
    48b4:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    48b6:	88 81       	ld	r24, Y
    48b8:	99 81       	ldd	r25, Y+1	; 0x01
    48ba:	00 97       	sbiw	r24, 0x00	; 0
    48bc:	29 f0       	breq	.+10     	; 0x48c8 <_ZN6String7reserveEj+0x18>
    48be:	8a 81       	ldd	r24, Y+2	; 0x02
    48c0:	9b 81       	ldd	r25, Y+3	; 0x03
    48c2:	86 17       	cp	r24, r22
    48c4:	97 07       	cpc	r25, r23
    48c6:	70 f4       	brcc	.+28     	; 0x48e4 <_ZN6String7reserveEj+0x34>
	if (changeBuffer(size)) {
    48c8:	ce 01       	movw	r24, r28
    48ca:	0e 94 3b 24 	call	0x4876	; 0x4876 <_ZN6String12changeBufferEj>
    48ce:	88 23       	and	r24, r24
    48d0:	59 f0       	breq	.+22     	; 0x48e8 <_ZN6String7reserveEj+0x38>
		if (len == 0) buffer[0] = 0;
    48d2:	8c 81       	ldd	r24, Y+4	; 0x04
    48d4:	9d 81       	ldd	r25, Y+5	; 0x05
    48d6:	00 97       	sbiw	r24, 0x00	; 0
    48d8:	49 f4       	brne	.+18     	; 0x48ec <_ZN6String7reserveEj+0x3c>
    48da:	e8 81       	ld	r30, Y
    48dc:	f9 81       	ldd	r31, Y+1	; 0x01
    48de:	10 82       	st	Z, r1
		return 1;
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	05 c0       	rjmp	.+10     	; 0x48ee <_ZN6String7reserveEj+0x3e>
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
    48e4:	81 e0       	ldi	r24, 0x01	; 1
    48e6:	03 c0       	rjmp	.+6      	; 0x48ee <_ZN6String7reserveEj+0x3e>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
	}
	return 0;
    48e8:	80 e0       	ldi	r24, 0x00	; 0
    48ea:	01 c0       	rjmp	.+2      	; 0x48ee <_ZN6String7reserveEj+0x3e>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    48ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    48ee:	df 91       	pop	r29
    48f0:	cf 91       	pop	r28
    48f2:	08 95       	ret

000048f4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    48f4:	ef 92       	push	r14
    48f6:	ff 92       	push	r15
    48f8:	0f 93       	push	r16
    48fa:	1f 93       	push	r17
    48fc:	cf 93       	push	r28
    48fe:	df 93       	push	r29
    4900:	ec 01       	movw	r28, r24
    4902:	7b 01       	movw	r14, r22
    4904:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    4906:	ba 01       	movw	r22, r20
    4908:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_ZN6String7reserveEj>
    490c:	88 23       	and	r24, r24
    490e:	21 f4       	brne	.+8      	; 0x4918 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    4910:	ce 01       	movw	r24, r28
    4912:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN6String10invalidateEv>
		return *this;
    4916:	07 c0       	rjmp	.+14     	; 0x4926 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    4918:	1d 83       	std	Y+5, r17	; 0x05
    491a:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    491c:	88 81       	ld	r24, Y
    491e:	99 81       	ldd	r25, Y+1	; 0x01
    4920:	b7 01       	movw	r22, r14
    4922:	0e 94 ca 44 	call	0x8994	; 0x8994 <strcpy>
	return *this;
}
    4926:	8c 2f       	mov	r24, r28
    4928:	9d 2f       	mov	r25, r29
    492a:	df 91       	pop	r29
    492c:	cf 91       	pop	r28
    492e:	1f 91       	pop	r17
    4930:	0f 91       	pop	r16
    4932:	ff 90       	pop	r15
    4934:	ef 90       	pop	r14
    4936:	08 95       	ret

00004938 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    4938:	cf 93       	push	r28
    493a:	df 93       	push	r29
    493c:	dc 01       	movw	r26, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    493e:	11 96       	adiw	r26, 0x01	; 1
    4940:	1c 92       	st	X, r1
    4942:	1e 92       	st	-X, r1
	capacity = 0;
    4944:	13 96       	adiw	r26, 0x03	; 3
    4946:	1c 92       	st	X, r1
    4948:	1e 92       	st	-X, r1
    494a:	12 97       	sbiw	r26, 0x02	; 2
	len = 0;
    494c:	15 96       	adiw	r26, 0x05	; 5
    494e:	1c 92       	st	X, r1
    4950:	1e 92       	st	-X, r1
    4952:	14 97       	sbiw	r26, 0x04	; 4
	flags = 0;
    4954:	16 96       	adiw	r26, 0x06	; 6
    4956:	1c 92       	st	X, r1
    4958:	16 97       	sbiw	r26, 0x06	; 6
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    495a:	61 15       	cp	r22, r1
    495c:	71 05       	cpc	r23, r1
    495e:	69 f0       	breq	.+26     	; 0x497a <_ZN6StringC1EPKc+0x42>
    4960:	e6 2f       	mov	r30, r22
    4962:	f7 2f       	mov	r31, r23
    4964:	ef 01       	movw	r28, r30
    4966:	09 90       	ld	r0, Y+
    4968:	00 20       	and	r0, r0
    496a:	e9 f7       	brne	.-6      	; 0x4966 <_ZN6StringC1EPKc+0x2e>
    496c:	ae 01       	movw	r20, r28
    496e:	41 50       	subi	r20, 0x01	; 1
    4970:	50 40       	sbci	r21, 0x00	; 0
    4972:	4e 1b       	sub	r20, r30
    4974:	5f 0b       	sbc	r21, r31
    4976:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN6String4copyEPKcj>
}
    497a:	df 91       	pop	r29
    497c:	cf 91       	pop	r28
    497e:	08 95       	ret

00004980 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    4980:	cf 93       	push	r28
    4982:	df 93       	push	r29
    4984:	ec 01       	movw	r28, r24
    4986:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    4988:	86 17       	cp	r24, r22
    498a:	97 07       	cpc	r25, r23
    498c:	69 f0       	breq	.+26     	; 0x49a8 <_ZN6StringaSERKS_+0x28>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    498e:	20 81       	ld	r18, Z
    4990:	31 81       	ldd	r19, Z+1	; 0x01
    4992:	21 15       	cp	r18, r1
    4994:	31 05       	cpc	r19, r1
    4996:	31 f0       	breq	.+12     	; 0x49a4 <_ZN6StringaSERKS_+0x24>
    4998:	44 81       	ldd	r20, Z+4	; 0x04
    499a:	55 81       	ldd	r21, Z+5	; 0x05
    499c:	b9 01       	movw	r22, r18
    499e:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN6String4copyEPKcj>
    49a2:	02 c0       	rjmp	.+4      	; 0x49a8 <_ZN6StringaSERKS_+0x28>
	else invalidate();
    49a4:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN6String10invalidateEv>
	
	return *this;
}
    49a8:	8c 2f       	mov	r24, r28
    49aa:	9d 2f       	mov	r25, r29
    49ac:	df 91       	pop	r29
    49ae:	cf 91       	pop	r28
    49b0:	08 95       	ret

000049b2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    49b2:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    49b4:	11 82       	std	Z+1, r1	; 0x01
    49b6:	10 82       	st	Z, r1
	capacity = 0;
    49b8:	13 82       	std	Z+3, r1	; 0x03
    49ba:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    49bc:	15 82       	std	Z+5, r1	; 0x05
    49be:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    49c0:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    49c2:	0e 94 c0 24 	call	0x4980	; 0x4980 <_ZN6StringaSERKS_>
}
    49c6:	08 95       	ret

000049c8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    49c8:	cf 93       	push	r28
    49ca:	df 93       	push	r29
    49cc:	c8 2f       	mov	r28, r24
    49ce:	d9 2f       	mov	r29, r25
	if (cstr) copy(cstr, strlen(cstr));
    49d0:	61 15       	cp	r22, r1
    49d2:	71 05       	cpc	r23, r1
    49d4:	71 f0       	breq	.+28     	; 0x49f2 <_ZN6StringaSEPKc+0x2a>
    49d6:	e6 2f       	mov	r30, r22
    49d8:	f7 2f       	mov	r31, r23
    49da:	df 01       	movw	r26, r30
    49dc:	0d 90       	ld	r0, X+
    49de:	00 20       	and	r0, r0
    49e0:	e9 f7       	brne	.-6      	; 0x49dc <_ZN6StringaSEPKc+0x14>
    49e2:	ad 01       	movw	r20, r26
    49e4:	41 50       	subi	r20, 0x01	; 1
    49e6:	50 40       	sbci	r21, 0x00	; 0
    49e8:	4e 1b       	sub	r20, r30
    49ea:	5f 0b       	sbc	r21, r31
    49ec:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN6String4copyEPKcj>
    49f0:	02 c0       	rjmp	.+4      	; 0x49f6 <_ZN6StringaSEPKc+0x2e>
	else invalidate();
    49f2:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN6String10invalidateEv>
	
	return *this;
}
    49f6:	8c 2f       	mov	r24, r28
    49f8:	9d 2f       	mov	r25, r29
    49fa:	df 91       	pop	r29
    49fc:	cf 91       	pop	r28
    49fe:	08 95       	ret

00004a00 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    4a00:	0f 93       	push	r16
    4a02:	1f 93       	push	r17
    4a04:	cf 93       	push	r28
    4a06:	df 93       	push	r29
    4a08:	cd b7       	in	r28, 0x3d	; 61
    4a0a:	de b7       	in	r29, 0x3e	; 62
    4a0c:	a1 97       	sbiw	r28, 0x21	; 33
    4a0e:	0f b6       	in	r0, 0x3f	; 63
    4a10:	f8 94       	cli
    4a12:	de bf       	out	0x3e, r29	; 62
    4a14:	0f be       	out	0x3f, r0	; 63
    4a16:	cd bf       	out	0x3d, r28	; 61
    4a18:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	11 82       	std	Z+1, r1	; 0x01
    4a1e:	10 82       	st	Z, r1
	capacity = 0;
    4a20:	13 82       	std	Z+3, r1	; 0x03
    4a22:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    4a24:	15 82       	std	Z+5, r1	; 0x05
    4a26:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    4a28:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    4a2a:	cb 01       	movw	r24, r22
    4a2c:	ba 01       	movw	r22, r20
    4a2e:	ae 01       	movw	r20, r28
    4a30:	4f 5f       	subi	r20, 0xFF	; 255
    4a32:	5f 4f       	sbci	r21, 0xFF	; 255
    4a34:	30 e0       	ldi	r19, 0x00	; 0
    4a36:	0e 94 7d 45 	call	0x8afa	; 0x8afa <ultoa>
	*this = buf;
    4a3a:	c8 01       	movw	r24, r16
    4a3c:	be 01       	movw	r22, r28
    4a3e:	6f 5f       	subi	r22, 0xFF	; 255
    4a40:	7f 4f       	sbci	r23, 0xFF	; 255
    4a42:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_ZN6StringaSEPKc>
}
    4a46:	a1 96       	adiw	r28, 0x21	; 33
    4a48:	0f b6       	in	r0, 0x3f	; 63
    4a4a:	f8 94       	cli
    4a4c:	de bf       	out	0x3e, r29	; 62
    4a4e:	0f be       	out	0x3f, r0	; 63
    4a50:	cd bf       	out	0x3d, r28	; 61
    4a52:	df 91       	pop	r29
    4a54:	cf 91       	pop	r28
    4a56:	1f 91       	pop	r17
    4a58:	0f 91       	pop	r16
    4a5a:	08 95       	ret

00004a5c <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    4a5c:	0f 93       	push	r16
    4a5e:	1f 93       	push	r17
    4a60:	cf 93       	push	r28
    4a62:	df 93       	push	r29
    4a64:	cd b7       	in	r28, 0x3d	; 61
    4a66:	de b7       	in	r29, 0x3e	; 62
    4a68:	a2 97       	sbiw	r28, 0x22	; 34
    4a6a:	0f b6       	in	r0, 0x3f	; 63
    4a6c:	f8 94       	cli
    4a6e:	de bf       	out	0x3e, r29	; 62
    4a70:	0f be       	out	0x3f, r0	; 63
    4a72:	cd bf       	out	0x3d, r28	; 61
    4a74:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4a76:	fc 01       	movw	r30, r24
    4a78:	11 82       	std	Z+1, r1	; 0x01
    4a7a:	10 82       	st	Z, r1
	capacity = 0;
    4a7c:	13 82       	std	Z+3, r1	; 0x03
    4a7e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    4a80:	15 82       	std	Z+5, r1	; 0x05
    4a82:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    4a84:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    4a86:	cb 01       	movw	r24, r22
    4a88:	ba 01       	movw	r22, r20
    4a8a:	ae 01       	movw	r20, r28
    4a8c:	4f 5f       	subi	r20, 0xFF	; 255
    4a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a90:	30 e0       	ldi	r19, 0x00	; 0
    4a92:	0e 94 34 45 	call	0x8a68	; 0x8a68 <ltoa>
	*this = buf;
    4a96:	c8 01       	movw	r24, r16
    4a98:	be 01       	movw	r22, r28
    4a9a:	6f 5f       	subi	r22, 0xFF	; 255
    4a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a9e:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_ZN6StringaSEPKc>
}
    4aa2:	a2 96       	adiw	r28, 0x22	; 34
    4aa4:	0f b6       	in	r0, 0x3f	; 63
    4aa6:	f8 94       	cli
    4aa8:	de bf       	out	0x3e, r29	; 62
    4aaa:	0f be       	out	0x3f, r0	; 63
    4aac:	cd bf       	out	0x3d, r28	; 61
    4aae:	df 91       	pop	r29
    4ab0:	cf 91       	pop	r28
    4ab2:	1f 91       	pop	r17
    4ab4:	0f 91       	pop	r16
    4ab6:	08 95       	ret

00004ab8 <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    4ab8:	0f 93       	push	r16
    4aba:	1f 93       	push	r17
    4abc:	cf 93       	push	r28
    4abe:	df 93       	push	r29
    4ac0:	cd b7       	in	r28, 0x3d	; 61
    4ac2:	de b7       	in	r29, 0x3e	; 62
    4ac4:	61 97       	sbiw	r28, 0x11	; 17
    4ac6:	0f b6       	in	r0, 0x3f	; 63
    4ac8:	f8 94       	cli
    4aca:	de bf       	out	0x3e, r29	; 62
    4acc:	0f be       	out	0x3f, r0	; 63
    4ace:	cd bf       	out	0x3d, r28	; 61
    4ad0:	8c 01       	movw	r16, r24
    4ad2:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4ad4:	f8 01       	movw	r30, r16
    4ad6:	11 82       	std	Z+1, r1	; 0x01
    4ad8:	10 82       	st	Z, r1
	capacity = 0;
    4ada:	13 82       	std	Z+3, r1	; 0x03
    4adc:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    4ade:	15 82       	std	Z+5, r1	; 0x05
    4ae0:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    4ae2:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    4ae4:	be 01       	movw	r22, r28
    4ae6:	6f 5f       	subi	r22, 0xFF	; 255
    4ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    4aea:	50 e0       	ldi	r21, 0x00	; 0
    4aec:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <utoa>
	*this = buf;
    4af0:	c8 01       	movw	r24, r16
    4af2:	be 01       	movw	r22, r28
    4af4:	6f 5f       	subi	r22, 0xFF	; 255
    4af6:	7f 4f       	sbci	r23, 0xFF	; 255
    4af8:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_ZN6StringaSEPKc>
}
    4afc:	61 96       	adiw	r28, 0x11	; 17
    4afe:	0f b6       	in	r0, 0x3f	; 63
    4b00:	f8 94       	cli
    4b02:	de bf       	out	0x3e, r29	; 62
    4b04:	0f be       	out	0x3f, r0	; 63
    4b06:	cd bf       	out	0x3d, r28	; 61
    4b08:	df 91       	pop	r29
    4b0a:	cf 91       	pop	r28
    4b0c:	1f 91       	pop	r17
    4b0e:	0f 91       	pop	r16
    4b10:	08 95       	ret

00004b12 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    4b12:	0f 93       	push	r16
    4b14:	1f 93       	push	r17
    4b16:	cf 93       	push	r28
    4b18:	df 93       	push	r29
    4b1a:	cd b7       	in	r28, 0x3d	; 61
    4b1c:	de b7       	in	r29, 0x3e	; 62
    4b1e:	62 97       	sbiw	r28, 0x12	; 18
    4b20:	0f b6       	in	r0, 0x3f	; 63
    4b22:	f8 94       	cli
    4b24:	de bf       	out	0x3e, r29	; 62
    4b26:	0f be       	out	0x3f, r0	; 63
    4b28:	cd bf       	out	0x3d, r28	; 61
    4b2a:	8c 01       	movw	r16, r24
    4b2c:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4b2e:	f8 01       	movw	r30, r16
    4b30:	11 82       	std	Z+1, r1	; 0x01
    4b32:	10 82       	st	Z, r1
	capacity = 0;
    4b34:	13 82       	std	Z+3, r1	; 0x03
    4b36:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    4b38:	15 82       	std	Z+5, r1	; 0x05
    4b3a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    4b3c:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    4b3e:	be 01       	movw	r22, r28
    4b40:	6f 5f       	subi	r22, 0xFF	; 255
    4b42:	7f 4f       	sbci	r23, 0xFF	; 255
    4b44:	50 e0       	ldi	r21, 0x00	; 0
    4b46:	0e 94 13 45 	call	0x8a26	; 0x8a26 <itoa>
	*this = buf;
    4b4a:	c8 01       	movw	r24, r16
    4b4c:	be 01       	movw	r22, r28
    4b4e:	6f 5f       	subi	r22, 0xFF	; 255
    4b50:	7f 4f       	sbci	r23, 0xFF	; 255
    4b52:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_ZN6StringaSEPKc>
}
    4b56:	62 96       	adiw	r28, 0x12	; 18
    4b58:	0f b6       	in	r0, 0x3f	; 63
    4b5a:	f8 94       	cli
    4b5c:	de bf       	out	0x3e, r29	; 62
    4b5e:	0f be       	out	0x3f, r0	; 63
    4b60:	cd bf       	out	0x3d, r28	; 61
    4b62:	df 91       	pop	r29
    4b64:	cf 91       	pop	r28
    4b66:	1f 91       	pop	r17
    4b68:	0f 91       	pop	r16
    4b6a:	08 95       	ret

00004b6c <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    4b6c:	0f 93       	push	r16
    4b6e:	1f 93       	push	r17
    4b70:	cf 93       	push	r28
    4b72:	df 93       	push	r29
    4b74:	cd b7       	in	r28, 0x3d	; 61
    4b76:	de b7       	in	r29, 0x3e	; 62
    4b78:	29 97       	sbiw	r28, 0x09	; 9
    4b7a:	0f b6       	in	r0, 0x3f	; 63
    4b7c:	f8 94       	cli
    4b7e:	de bf       	out	0x3e, r29	; 62
    4b80:	0f be       	out	0x3f, r0	; 63
    4b82:	cd bf       	out	0x3d, r28	; 61
    4b84:	8c 01       	movw	r16, r24
    4b86:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4b88:	f8 01       	movw	r30, r16
    4b8a:	11 82       	std	Z+1, r1	; 0x01
    4b8c:	10 82       	st	Z, r1
	capacity = 0;
    4b8e:	13 82       	std	Z+3, r1	; 0x03
    4b90:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    4b92:	15 82       	std	Z+5, r1	; 0x05
    4b94:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    4b96:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	be 01       	movw	r22, r28
    4b9c:	6f 5f       	subi	r22, 0xFF	; 255
    4b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4ba0:	50 e0       	ldi	r21, 0x00	; 0
    4ba2:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <utoa>
	*this = buf;
    4ba6:	c8 01       	movw	r24, r16
    4ba8:	be 01       	movw	r22, r28
    4baa:	6f 5f       	subi	r22, 0xFF	; 255
    4bac:	7f 4f       	sbci	r23, 0xFF	; 255
    4bae:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_ZN6StringaSEPKc>
}
    4bb2:	29 96       	adiw	r28, 0x09	; 9
    4bb4:	0f b6       	in	r0, 0x3f	; 63
    4bb6:	f8 94       	cli
    4bb8:	de bf       	out	0x3e, r29	; 62
    4bba:	0f be       	out	0x3f, r0	; 63
    4bbc:	cd bf       	out	0x3d, r28	; 61
    4bbe:	df 91       	pop	r29
    4bc0:	cf 91       	pop	r28
    4bc2:	1f 91       	pop	r17
    4bc4:	0f 91       	pop	r16
    4bc6:	08 95       	ret

00004bc8 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    4bc8:	cf 93       	push	r28
    4bca:	df 93       	push	r29
    4bcc:	00 d0       	rcall	.+0      	; 0x4bce <_ZN6StringC1Ec+0x6>
    4bce:	cd b7       	in	r28, 0x3d	; 61
    4bd0:	de b7       	in	r29, 0x3e	; 62
    4bd2:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    4bd4:	11 82       	std	Z+1, r1	; 0x01
    4bd6:	10 82       	st	Z, r1
	capacity = 0;
    4bd8:	13 82       	std	Z+3, r1	; 0x03
    4bda:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    4bdc:	15 82       	std	Z+5, r1	; 0x05
    4bde:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    4be0:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    4be2:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    4be4:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    4be6:	be 01       	movw	r22, r28
    4be8:	6f 5f       	subi	r22, 0xFF	; 255
    4bea:	7f 4f       	sbci	r23, 0xFF	; 255
    4bec:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_ZN6StringaSEPKc>
}
    4bf0:	0f 90       	pop	r0
    4bf2:	0f 90       	pop	r0
    4bf4:	df 91       	pop	r29
    4bf6:	cf 91       	pop	r28
    4bf8:	08 95       	ret

00004bfa <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    4bfa:	ef 92       	push	r14
    4bfc:	ff 92       	push	r15
    4bfe:	0f 93       	push	r16
    4c00:	1f 93       	push	r17
    4c02:	cf 93       	push	r28
    4c04:	df 93       	push	r29
    4c06:	8c 01       	movw	r16, r24
    4c08:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    4c0a:	fc 01       	movw	r30, r24
    4c0c:	c4 81       	ldd	r28, Z+4	; 0x04
    4c0e:	d5 81       	ldd	r29, Z+5	; 0x05
	if (!cstr) return 0;
    4c10:	61 15       	cp	r22, r1
    4c12:	71 05       	cpc	r23, r1
    4c14:	c9 f0       	breq	.+50     	; 0x4c48 <_ZN6String6concatEPKcj+0x4e>
	if (length == 0) return 1;
    4c16:	41 15       	cp	r20, r1
    4c18:	51 05       	cpc	r21, r1
    4c1a:	c1 f0       	breq	.+48     	; 0x4c4c <_ZN6String6concatEPKcj+0x52>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    4c1c:	c4 0f       	add	r28, r20
    4c1e:	d5 1f       	adc	r29, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    4c20:	be 01       	movw	r22, r28
    4c22:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_ZN6String7reserveEj>
    4c26:	88 23       	and	r24, r24
    4c28:	99 f0       	breq	.+38     	; 0x4c50 <_ZN6String6concatEPKcj+0x56>
	strcpy(buffer + len, cstr);
    4c2a:	f8 01       	movw	r30, r16
    4c2c:	80 81       	ld	r24, Z
    4c2e:	91 81       	ldd	r25, Z+1	; 0x01
    4c30:	24 81       	ldd	r18, Z+4	; 0x04
    4c32:	35 81       	ldd	r19, Z+5	; 0x05
    4c34:	82 0f       	add	r24, r18
    4c36:	93 1f       	adc	r25, r19
    4c38:	b7 01       	movw	r22, r14
    4c3a:	0e 94 ca 44 	call	0x8994	; 0x8994 <strcpy>
	len = newlen;
    4c3e:	f8 01       	movw	r30, r16
    4c40:	d5 83       	std	Z+5, r29	; 0x05
    4c42:	c4 83       	std	Z+4, r28	; 0x04
	return 1;
    4c44:	81 e0       	ldi	r24, 0x01	; 1
    4c46:	05 c0       	rjmp	.+10     	; 0x4c52 <_ZN6String6concatEPKcj+0x58>
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
    4c48:	80 e0       	ldi	r24, 0x00	; 0
    4c4a:	03 c0       	rjmp	.+6      	; 0x4c52 <_ZN6String6concatEPKcj+0x58>
	if (length == 0) return 1;
    4c4c:	81 e0       	ldi	r24, 0x01	; 1
    4c4e:	01 c0       	rjmp	.+2      	; 0x4c52 <_ZN6String6concatEPKcj+0x58>
	if (!reserve(newlen)) return 0;
    4c50:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    4c52:	df 91       	pop	r29
    4c54:	cf 91       	pop	r28
    4c56:	1f 91       	pop	r17
    4c58:	0f 91       	pop	r16
    4c5a:	ff 90       	pop	r15
    4c5c:	ef 90       	pop	r14
    4c5e:	08 95       	ret

00004c60 <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    4c60:	fb 01       	movw	r30, r22
	return concat(s.buffer, s.len);
    4c62:	20 81       	ld	r18, Z
    4c64:	31 81       	ldd	r19, Z+1	; 0x01
    4c66:	44 81       	ldd	r20, Z+4	; 0x04
    4c68:	55 81       	ldd	r21, Z+5	; 0x05
    4c6a:	b9 01       	movw	r22, r18
    4c6c:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <_ZN6String6concatEPKcj>
}
    4c70:	08 95       	ret

00004c72 <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    4c72:	61 15       	cp	r22, r1
    4c74:	71 05       	cpc	r23, r1
    4c76:	71 f0       	breq	.+28     	; 0x4c94 <_ZN6String6concatEPKc+0x22>
	return concat(cstr, strlen(cstr));
    4c78:	e6 2f       	mov	r30, r22
    4c7a:	f7 2f       	mov	r31, r23
    4c7c:	df 01       	movw	r26, r30
    4c7e:	0d 90       	ld	r0, X+
    4c80:	00 20       	and	r0, r0
    4c82:	e9 f7       	brne	.-6      	; 0x4c7e <_ZN6String6concatEPKc+0xc>
    4c84:	ad 01       	movw	r20, r26
    4c86:	41 50       	subi	r20, 0x01	; 1
    4c88:	50 40       	sbci	r21, 0x00	; 0
    4c8a:	4e 1b       	sub	r20, r30
    4c8c:	5f 0b       	sbc	r21, r31
    4c8e:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <_ZN6String6concatEPKcj>
    4c92:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    4c94:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
    4c96:	08 95       	ret

00004c98 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    4c98:	cf 93       	push	r28
    4c9a:	df 93       	push	r29
    4c9c:	00 d0       	rcall	.+0      	; 0x4c9e <_ZN6String6concatEc+0x6>
    4c9e:	cd b7       	in	r28, 0x3d	; 61
    4ca0:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    4ca2:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    4ca4:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    4ca6:	be 01       	movw	r22, r28
    4ca8:	6f 5f       	subi	r22, 0xFF	; 255
    4caa:	7f 4f       	sbci	r23, 0xFF	; 255
    4cac:	41 e0       	ldi	r20, 0x01	; 1
    4cae:	50 e0       	ldi	r21, 0x00	; 0
    4cb0:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <_ZN6String6concatEPKcj>
}
    4cb4:	0f 90       	pop	r0
    4cb6:	0f 90       	pop	r0
    4cb8:	df 91       	pop	r29
    4cba:	cf 91       	pop	r28
    4cbc:	08 95       	ret

00004cbe <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    4cbe:	ef 92       	push	r14
    4cc0:	ff 92       	push	r15
    4cc2:	0f 93       	push	r16
    4cc4:	1f 93       	push	r17
    4cc6:	cf 93       	push	r28
    4cc8:	df 93       	push	r29
    4cca:	00 d0       	rcall	.+0      	; 0x4ccc <_ZN6String6concatEh+0xe>
    4ccc:	00 d0       	rcall	.+0      	; 0x4cce <_ZN6String6concatEh+0x10>
    4cce:	cd b7       	in	r28, 0x3d	; 61
    4cd0:	de b7       	in	r29, 0x3e	; 62
    4cd2:	7c 01       	movw	r14, r24
    4cd4:	86 2f       	mov	r24, r22
	char buf[4];
	itoa(num, buf, 10);
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	8e 01       	movw	r16, r28
    4cda:	0f 5f       	subi	r16, 0xFF	; 255
    4cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    4cde:	b8 01       	movw	r22, r16
    4ce0:	4a e0       	ldi	r20, 0x0A	; 10
    4ce2:	50 e0       	ldi	r21, 0x00	; 0
    4ce4:	0e 94 13 45 	call	0x8a26	; 0x8a26 <itoa>
	return concat(buf, strlen(buf));
    4ce8:	f8 01       	movw	r30, r16
    4cea:	01 90       	ld	r0, Z+
    4cec:	00 20       	and	r0, r0
    4cee:	e9 f7       	brne	.-6      	; 0x4cea <_ZN6String6concatEh+0x2c>
    4cf0:	af 01       	movw	r20, r30
    4cf2:	41 50       	subi	r20, 0x01	; 1
    4cf4:	50 40       	sbci	r21, 0x00	; 0
    4cf6:	40 1b       	sub	r20, r16
    4cf8:	51 0b       	sbc	r21, r17
    4cfa:	c7 01       	movw	r24, r14
    4cfc:	b8 01       	movw	r22, r16
    4cfe:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <_ZN6String6concatEPKcj>
}
    4d02:	0f 90       	pop	r0
    4d04:	0f 90       	pop	r0
    4d06:	0f 90       	pop	r0
    4d08:	0f 90       	pop	r0
    4d0a:	df 91       	pop	r29
    4d0c:	cf 91       	pop	r28
    4d0e:	1f 91       	pop	r17
    4d10:	0f 91       	pop	r16
    4d12:	ff 90       	pop	r15
    4d14:	ef 90       	pop	r14
    4d16:	08 95       	ret

00004d18 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    4d18:	ef 92       	push	r14
    4d1a:	ff 92       	push	r15
    4d1c:	0f 93       	push	r16
    4d1e:	1f 93       	push	r17
    4d20:	cf 93       	push	r28
    4d22:	df 93       	push	r29
    4d24:	cd b7       	in	r28, 0x3d	; 61
    4d26:	de b7       	in	r29, 0x3e	; 62
    4d28:	27 97       	sbiw	r28, 0x07	; 7
    4d2a:	0f b6       	in	r0, 0x3f	; 63
    4d2c:	f8 94       	cli
    4d2e:	de bf       	out	0x3e, r29	; 62
    4d30:	0f be       	out	0x3f, r0	; 63
    4d32:	cd bf       	out	0x3d, r28	; 61
    4d34:	7c 01       	movw	r14, r24
    4d36:	cb 01       	movw	r24, r22
	char buf[7];
	itoa(num, buf, 10);
    4d38:	8e 01       	movw	r16, r28
    4d3a:	0f 5f       	subi	r16, 0xFF	; 255
    4d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d3e:	b8 01       	movw	r22, r16
    4d40:	4a e0       	ldi	r20, 0x0A	; 10
    4d42:	50 e0       	ldi	r21, 0x00	; 0
    4d44:	0e 94 13 45 	call	0x8a26	; 0x8a26 <itoa>
	return concat(buf, strlen(buf));
    4d48:	f8 01       	movw	r30, r16
    4d4a:	01 90       	ld	r0, Z+
    4d4c:	00 20       	and	r0, r0
    4d4e:	e9 f7       	brne	.-6      	; 0x4d4a <_ZN6String6concatEi+0x32>
    4d50:	af 01       	movw	r20, r30
    4d52:	41 50       	subi	r20, 0x01	; 1
    4d54:	50 40       	sbci	r21, 0x00	; 0
    4d56:	40 1b       	sub	r20, r16
    4d58:	51 0b       	sbc	r21, r17
    4d5a:	c7 01       	movw	r24, r14
    4d5c:	b8 01       	movw	r22, r16
    4d5e:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <_ZN6String6concatEPKcj>
}
    4d62:	27 96       	adiw	r28, 0x07	; 7
    4d64:	0f b6       	in	r0, 0x3f	; 63
    4d66:	f8 94       	cli
    4d68:	de bf       	out	0x3e, r29	; 62
    4d6a:	0f be       	out	0x3f, r0	; 63
    4d6c:	cd bf       	out	0x3d, r28	; 61
    4d6e:	df 91       	pop	r29
    4d70:	cf 91       	pop	r28
    4d72:	1f 91       	pop	r17
    4d74:	0f 91       	pop	r16
    4d76:	ff 90       	pop	r15
    4d78:	ef 90       	pop	r14
    4d7a:	08 95       	ret

00004d7c <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    4d7c:	ef 92       	push	r14
    4d7e:	ff 92       	push	r15
    4d80:	0f 93       	push	r16
    4d82:	1f 93       	push	r17
    4d84:	cf 93       	push	r28
    4d86:	df 93       	push	r29
    4d88:	00 d0       	rcall	.+0      	; 0x4d8a <_ZN6String6concatEj+0xe>
    4d8a:	00 d0       	rcall	.+0      	; 0x4d8c <_ZN6String6concatEj+0x10>
    4d8c:	00 d0       	rcall	.+0      	; 0x4d8e <_ZN6String6concatEj+0x12>
    4d8e:	cd b7       	in	r28, 0x3d	; 61
    4d90:	de b7       	in	r29, 0x3e	; 62
    4d92:	7c 01       	movw	r14, r24
    4d94:	cb 01       	movw	r24, r22
	char buf[6];
	utoa(num, buf, 10);
    4d96:	8e 01       	movw	r16, r28
    4d98:	0f 5f       	subi	r16, 0xFF	; 255
    4d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d9c:	b8 01       	movw	r22, r16
    4d9e:	4a e0       	ldi	r20, 0x0A	; 10
    4da0:	50 e0       	ldi	r21, 0x00	; 0
    4da2:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <utoa>
	return concat(buf, strlen(buf));
    4da6:	f8 01       	movw	r30, r16
    4da8:	01 90       	ld	r0, Z+
    4daa:	00 20       	and	r0, r0
    4dac:	e9 f7       	brne	.-6      	; 0x4da8 <_ZN6String6concatEj+0x2c>
    4dae:	af 01       	movw	r20, r30
    4db0:	41 50       	subi	r20, 0x01	; 1
    4db2:	50 40       	sbci	r21, 0x00	; 0
    4db4:	40 1b       	sub	r20, r16
    4db6:	51 0b       	sbc	r21, r17
    4db8:	c7 01       	movw	r24, r14
    4dba:	b8 01       	movw	r22, r16
    4dbc:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <_ZN6String6concatEPKcj>
}
    4dc0:	26 96       	adiw	r28, 0x06	; 6
    4dc2:	0f b6       	in	r0, 0x3f	; 63
    4dc4:	f8 94       	cli
    4dc6:	de bf       	out	0x3e, r29	; 62
    4dc8:	0f be       	out	0x3f, r0	; 63
    4dca:	cd bf       	out	0x3d, r28	; 61
    4dcc:	df 91       	pop	r29
    4dce:	cf 91       	pop	r28
    4dd0:	1f 91       	pop	r17
    4dd2:	0f 91       	pop	r16
    4dd4:	ff 90       	pop	r15
    4dd6:	ef 90       	pop	r14
    4dd8:	08 95       	ret

00004dda <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    4dda:	ef 92       	push	r14
    4ddc:	ff 92       	push	r15
    4dde:	0f 93       	push	r16
    4de0:	1f 93       	push	r17
    4de2:	cf 93       	push	r28
    4de4:	df 93       	push	r29
    4de6:	cd b7       	in	r28, 0x3d	; 61
    4de8:	de b7       	in	r29, 0x3e	; 62
    4dea:	2c 97       	sbiw	r28, 0x0c	; 12
    4dec:	0f b6       	in	r0, 0x3f	; 63
    4dee:	f8 94       	cli
    4df0:	de bf       	out	0x3e, r29	; 62
    4df2:	0f be       	out	0x3f, r0	; 63
    4df4:	cd bf       	out	0x3d, r28	; 61
    4df6:	7c 01       	movw	r14, r24
	char buf[12];
	ltoa(num, buf, 10);
    4df8:	cb 01       	movw	r24, r22
    4dfa:	ba 01       	movw	r22, r20
    4dfc:	8e 01       	movw	r16, r28
    4dfe:	0f 5f       	subi	r16, 0xFF	; 255
    4e00:	1f 4f       	sbci	r17, 0xFF	; 255
    4e02:	a8 01       	movw	r20, r16
    4e04:	2a e0       	ldi	r18, 0x0A	; 10
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	0e 94 34 45 	call	0x8a68	; 0x8a68 <ltoa>
	return concat(buf, strlen(buf));
    4e0c:	f8 01       	movw	r30, r16
    4e0e:	01 90       	ld	r0, Z+
    4e10:	00 20       	and	r0, r0
    4e12:	e9 f7       	brne	.-6      	; 0x4e0e <_ZN6String6concatEl+0x34>
    4e14:	af 01       	movw	r20, r30
    4e16:	41 50       	subi	r20, 0x01	; 1
    4e18:	50 40       	sbci	r21, 0x00	; 0
    4e1a:	40 1b       	sub	r20, r16
    4e1c:	51 0b       	sbc	r21, r17
    4e1e:	c7 01       	movw	r24, r14
    4e20:	b8 01       	movw	r22, r16
    4e22:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <_ZN6String6concatEPKcj>
}
    4e26:	2c 96       	adiw	r28, 0x0c	; 12
    4e28:	0f b6       	in	r0, 0x3f	; 63
    4e2a:	f8 94       	cli
    4e2c:	de bf       	out	0x3e, r29	; 62
    4e2e:	0f be       	out	0x3f, r0	; 63
    4e30:	cd bf       	out	0x3d, r28	; 61
    4e32:	df 91       	pop	r29
    4e34:	cf 91       	pop	r28
    4e36:	1f 91       	pop	r17
    4e38:	0f 91       	pop	r16
    4e3a:	ff 90       	pop	r15
    4e3c:	ef 90       	pop	r14
    4e3e:	08 95       	ret

00004e40 <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    4e40:	ef 92       	push	r14
    4e42:	ff 92       	push	r15
    4e44:	0f 93       	push	r16
    4e46:	1f 93       	push	r17
    4e48:	cf 93       	push	r28
    4e4a:	df 93       	push	r29
    4e4c:	cd b7       	in	r28, 0x3d	; 61
    4e4e:	de b7       	in	r29, 0x3e	; 62
    4e50:	2b 97       	sbiw	r28, 0x0b	; 11
    4e52:	0f b6       	in	r0, 0x3f	; 63
    4e54:	f8 94       	cli
    4e56:	de bf       	out	0x3e, r29	; 62
    4e58:	0f be       	out	0x3f, r0	; 63
    4e5a:	cd bf       	out	0x3d, r28	; 61
    4e5c:	7c 01       	movw	r14, r24
	char buf[11];
	ultoa(num, buf, 10);
    4e5e:	cb 01       	movw	r24, r22
    4e60:	ba 01       	movw	r22, r20
    4e62:	8e 01       	movw	r16, r28
    4e64:	0f 5f       	subi	r16, 0xFF	; 255
    4e66:	1f 4f       	sbci	r17, 0xFF	; 255
    4e68:	a8 01       	movw	r20, r16
    4e6a:	2a e0       	ldi	r18, 0x0A	; 10
    4e6c:	30 e0       	ldi	r19, 0x00	; 0
    4e6e:	0e 94 7d 45 	call	0x8afa	; 0x8afa <ultoa>
	return concat(buf, strlen(buf));
    4e72:	f8 01       	movw	r30, r16
    4e74:	01 90       	ld	r0, Z+
    4e76:	00 20       	and	r0, r0
    4e78:	e9 f7       	brne	.-6      	; 0x4e74 <_ZN6String6concatEm+0x34>
    4e7a:	af 01       	movw	r20, r30
    4e7c:	41 50       	subi	r20, 0x01	; 1
    4e7e:	50 40       	sbci	r21, 0x00	; 0
    4e80:	40 1b       	sub	r20, r16
    4e82:	51 0b       	sbc	r21, r17
    4e84:	c7 01       	movw	r24, r14
    4e86:	b8 01       	movw	r22, r16
    4e88:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <_ZN6String6concatEPKcj>
}
    4e8c:	2b 96       	adiw	r28, 0x0b	; 11
    4e8e:	0f b6       	in	r0, 0x3f	; 63
    4e90:	f8 94       	cli
    4e92:	de bf       	out	0x3e, r29	; 62
    4e94:	0f be       	out	0x3f, r0	; 63
    4e96:	cd bf       	out	0x3d, r28	; 61
    4e98:	df 91       	pop	r29
    4e9a:	cf 91       	pop	r28
    4e9c:	1f 91       	pop	r17
    4e9e:	0f 91       	pop	r16
    4ea0:	ff 90       	pop	r15
    4ea2:	ef 90       	pop	r14
    4ea4:	08 95       	ret

00004ea6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    4ea6:	cf 93       	push	r28
    4ea8:	df 93       	push	r29
    4eaa:	c8 2f       	mov	r28, r24
    4eac:	d9 2f       	mov	r29, r25
    4eae:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    4eb0:	20 81       	ld	r18, Z
    4eb2:	31 81       	ldd	r19, Z+1	; 0x01
    4eb4:	44 81       	ldd	r20, Z+4	; 0x04
    4eb6:	55 81       	ldd	r21, Z+5	; 0x05
    4eb8:	b9 01       	movw	r22, r18
    4eba:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <_ZN6String6concatEPKcj>
    4ebe:	88 23       	and	r24, r24
    4ec0:	21 f4       	brne	.+8      	; 0x4eca <_ZplRK15StringSumHelperRK6String+0x24>
    4ec2:	8c 2f       	mov	r24, r28
    4ec4:	9d 2f       	mov	r25, r29
    4ec6:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN6String10invalidateEv>
	return a;
}
    4eca:	8c 2f       	mov	r24, r28
    4ecc:	9d 2f       	mov	r25, r29
    4ece:	df 91       	pop	r29
    4ed0:	cf 91       	pop	r28
    4ed2:	08 95       	ret

00004ed4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    4ed4:	cf 93       	push	r28
    4ed6:	df 93       	push	r29
    4ed8:	c8 2f       	mov	r28, r24
    4eda:	d9 2f       	mov	r29, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    4edc:	61 15       	cp	r22, r1
    4ede:	71 05       	cpc	r23, r1
    4ee0:	79 f0       	breq	.+30     	; 0x4f00 <_ZplRK15StringSumHelperPKc+0x2c>
    4ee2:	e6 2f       	mov	r30, r22
    4ee4:	f7 2f       	mov	r31, r23
    4ee6:	df 01       	movw	r26, r30
    4ee8:	0d 90       	ld	r0, X+
    4eea:	00 20       	and	r0, r0
    4eec:	e9 f7       	brne	.-6      	; 0x4ee8 <_ZplRK15StringSumHelperPKc+0x14>
    4eee:	ad 01       	movw	r20, r26
    4ef0:	41 50       	subi	r20, 0x01	; 1
    4ef2:	50 40       	sbci	r21, 0x00	; 0
    4ef4:	4e 1b       	sub	r20, r30
    4ef6:	5f 0b       	sbc	r21, r31
    4ef8:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <_ZN6String6concatEPKcj>
    4efc:	88 23       	and	r24, r24
    4efe:	21 f4       	brne	.+8      	; 0x4f08 <_ZplRK15StringSumHelperPKc+0x34>
    4f00:	8c 2f       	mov	r24, r28
    4f02:	9d 2f       	mov	r25, r29
    4f04:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN6String10invalidateEv>
	return a;
}
    4f08:	8c 2f       	mov	r24, r28
    4f0a:	9d 2f       	mov	r25, r29
    4f0c:	df 91       	pop	r29
    4f0e:	cf 91       	pop	r28
    4f10:	08 95       	ret

00004f12 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    4f12:	cf 93       	push	r28
    4f14:	df 93       	push	r29
    4f16:	d8 2f       	mov	r29, r24
    4f18:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    4f1a:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <_ZN6String6concatEc>
    4f1e:	88 23       	and	r24, r24
    4f20:	21 f4       	brne	.+8      	; 0x4f2a <_ZplRK15StringSumHelperc+0x18>
    4f22:	8d 2f       	mov	r24, r29
    4f24:	9c 2f       	mov	r25, r28
    4f26:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN6String10invalidateEv>
	return a;
}
    4f2a:	8d 2f       	mov	r24, r29
    4f2c:	9c 2f       	mov	r25, r28
    4f2e:	df 91       	pop	r29
    4f30:	cf 91       	pop	r28
    4f32:	08 95       	ret

00004f34 <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    4f34:	cf 93       	push	r28
    4f36:	df 93       	push	r29
    4f38:	d8 2f       	mov	r29, r24
    4f3a:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    4f3c:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <_ZN6String6concatEh>
    4f40:	88 23       	and	r24, r24
    4f42:	21 f4       	brne	.+8      	; 0x4f4c <_ZplRK15StringSumHelperh+0x18>
    4f44:	8d 2f       	mov	r24, r29
    4f46:	9c 2f       	mov	r25, r28
    4f48:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN6String10invalidateEv>
	return a;
}
    4f4c:	8d 2f       	mov	r24, r29
    4f4e:	9c 2f       	mov	r25, r28
    4f50:	df 91       	pop	r29
    4f52:	cf 91       	pop	r28
    4f54:	08 95       	ret

00004f56 <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    4f56:	cf 93       	push	r28
    4f58:	df 93       	push	r29
    4f5a:	d8 2f       	mov	r29, r24
    4f5c:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    4f5e:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <_ZN6String6concatEi>
    4f62:	88 23       	and	r24, r24
    4f64:	21 f4       	brne	.+8      	; 0x4f6e <_ZplRK15StringSumHelperi+0x18>
    4f66:	8d 2f       	mov	r24, r29
    4f68:	9c 2f       	mov	r25, r28
    4f6a:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN6String10invalidateEv>
	return a;
}
    4f6e:	8d 2f       	mov	r24, r29
    4f70:	9c 2f       	mov	r25, r28
    4f72:	df 91       	pop	r29
    4f74:	cf 91       	pop	r28
    4f76:	08 95       	ret

00004f78 <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    4f78:	cf 93       	push	r28
    4f7a:	df 93       	push	r29
    4f7c:	d8 2f       	mov	r29, r24
    4f7e:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    4f80:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <_ZN6String6concatEj>
    4f84:	88 23       	and	r24, r24
    4f86:	21 f4       	brne	.+8      	; 0x4f90 <_ZplRK15StringSumHelperj+0x18>
    4f88:	8d 2f       	mov	r24, r29
    4f8a:	9c 2f       	mov	r25, r28
    4f8c:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN6String10invalidateEv>
	return a;
}
    4f90:	8d 2f       	mov	r24, r29
    4f92:	9c 2f       	mov	r25, r28
    4f94:	df 91       	pop	r29
    4f96:	cf 91       	pop	r28
    4f98:	08 95       	ret

00004f9a <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    4f9a:	cf 93       	push	r28
    4f9c:	df 93       	push	r29
    4f9e:	d8 2f       	mov	r29, r24
    4fa0:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    4fa2:	0e 94 ed 26 	call	0x4dda	; 0x4dda <_ZN6String6concatEl>
    4fa6:	88 23       	and	r24, r24
    4fa8:	21 f4       	brne	.+8      	; 0x4fb2 <_ZplRK15StringSumHelperl+0x18>
    4faa:	8d 2f       	mov	r24, r29
    4fac:	9c 2f       	mov	r25, r28
    4fae:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN6String10invalidateEv>
	return a;
}
    4fb2:	8d 2f       	mov	r24, r29
    4fb4:	9c 2f       	mov	r25, r28
    4fb6:	df 91       	pop	r29
    4fb8:	cf 91       	pop	r28
    4fba:	08 95       	ret

00004fbc <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    4fbc:	cf 93       	push	r28
    4fbe:	df 93       	push	r29
    4fc0:	d8 2f       	mov	r29, r24
    4fc2:	c9 2f       	mov	r28, r25
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    4fc4:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN6String6concatEm>
    4fc8:	88 23       	and	r24, r24
    4fca:	21 f4       	brne	.+8      	; 0x4fd4 <_ZplRK15StringSumHelperm+0x18>
    4fcc:	8d 2f       	mov	r24, r29
    4fce:	9c 2f       	mov	r25, r28
    4fd0:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN6String10invalidateEv>
	return a;
}
    4fd4:	8d 2f       	mov	r24, r29
    4fd6:	9c 2f       	mov	r25, r28
    4fd8:	df 91       	pop	r29
    4fda:	cf 91       	pop	r28
    4fdc:	08 95       	ret

00004fde <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    4fde:	dc 01       	movw	r26, r24
    4fe0:	fb 01       	movw	r30, r22
	if (!buffer || !s.buffer) {
    4fe2:	8d 91       	ld	r24, X+
    4fe4:	9c 91       	ld	r25, X
    4fe6:	11 97       	sbiw	r26, 0x01	; 1
    4fe8:	00 97       	sbiw	r24, 0x00	; 0
    4fea:	31 f0       	breq	.+12     	; 0x4ff8 <_ZNK6String9compareToERKS_+0x1a>
    4fec:	60 81       	ld	r22, Z
    4fee:	71 81       	ldd	r23, Z+1	; 0x01
    4ff0:	61 15       	cp	r22, r1
    4ff2:	71 05       	cpc	r23, r1
    4ff4:	d1 f4       	brne	.+52     	; 0x502a <_ZNK6String9compareToERKS_+0x4c>
    4ff6:	0e c0       	rjmp	.+28     	; 0x5014 <_ZNK6String9compareToERKS_+0x36>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    4ff8:	a0 81       	ld	r26, Z
    4ffa:	b1 81       	ldd	r27, Z+1	; 0x01
    4ffc:	10 97       	sbiw	r26, 0x00	; 0
    4ffe:	d1 f0       	breq	.+52     	; 0x5034 <_ZNK6String9compareToERKS_+0x56>
    5000:	84 81       	ldd	r24, Z+4	; 0x04
    5002:	95 81       	ldd	r25, Z+5	; 0x05
    5004:	00 97       	sbiw	r24, 0x00	; 0
    5006:	c9 f0       	breq	.+50     	; 0x503a <_ZNK6String9compareToERKS_+0x5c>
    5008:	2c 91       	ld	r18, X
    500a:	30 e0       	ldi	r19, 0x00	; 0
    500c:	30 95       	com	r19
    500e:	21 95       	neg	r18
    5010:	3f 4f       	sbci	r19, 0xFF	; 255
    5012:	18 c0       	rjmp	.+48     	; 0x5044 <_ZNK6String9compareToERKS_+0x66>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    5014:	14 96       	adiw	r26, 0x04	; 4
    5016:	2d 91       	ld	r18, X+
    5018:	3c 91       	ld	r19, X
    501a:	15 97       	sbiw	r26, 0x05	; 5
    501c:	21 15       	cp	r18, r1
    501e:	31 05       	cpc	r19, r1
    5020:	79 f0       	breq	.+30     	; 0x5040 <_ZNK6String9compareToERKS_+0x62>
    5022:	fc 01       	movw	r30, r24
    5024:	20 81       	ld	r18, Z
    5026:	30 e0       	ldi	r19, 0x00	; 0
    5028:	0d c0       	rjmp	.+26     	; 0x5044 <_ZNK6String9compareToERKS_+0x66>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    502a:	0e 94 c1 44 	call	0x8982	; 0x8982 <strcmp>
    502e:	28 2f       	mov	r18, r24
    5030:	39 2f       	mov	r19, r25
    5032:	08 c0       	rjmp	.+16     	; 0x5044 <_ZNK6String9compareToERKS_+0x66>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    5034:	20 e0       	ldi	r18, 0x00	; 0
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	05 c0       	rjmp	.+10     	; 0x5044 <_ZNK6String9compareToERKS_+0x66>
    503a:	20 e0       	ldi	r18, 0x00	; 0
    503c:	30 e0       	ldi	r19, 0x00	; 0
    503e:	02 c0       	rjmp	.+4      	; 0x5044 <_ZNK6String9compareToERKS_+0x66>
    5040:	20 e0       	ldi	r18, 0x00	; 0
    5042:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    5044:	82 2f       	mov	r24, r18
    5046:	93 2f       	mov	r25, r19
    5048:	08 95       	ret

0000504a <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    504a:	fc 01       	movw	r30, r24
    504c:	24 81       	ldd	r18, Z+4	; 0x04
    504e:	35 81       	ldd	r19, Z+5	; 0x05
    5050:	fb 01       	movw	r30, r22
    5052:	44 81       	ldd	r20, Z+4	; 0x04
    5054:	55 81       	ldd	r21, Z+5	; 0x05
    5056:	24 17       	cp	r18, r20
    5058:	35 07       	cpc	r19, r21
    505a:	39 f4       	brne	.+14     	; 0x506a <_ZNK6String6equalsERKS_+0x20>
    505c:	0e 94 ef 27 	call	0x4fde	; 0x4fde <_ZNK6String9compareToERKS_>
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    5060:	21 e0       	ldi	r18, 0x01	; 1
    5062:	00 97       	sbiw	r24, 0x00	; 0
    5064:	19 f0       	breq	.+6      	; 0x506c <_ZNK6String6equalsERKS_+0x22>
    5066:	20 e0       	ldi	r18, 0x00	; 0
    5068:	01 c0       	rjmp	.+2      	; 0x506c <_ZNK6String6equalsERKS_+0x22>
{
	return (len == s2.len && compareTo(s2) == 0);
    506a:	20 e0       	ldi	r18, 0x00	; 0
}
    506c:	82 2f       	mov	r24, r18
    506e:	08 95       	ret

00005070 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    5070:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    5072:	84 81       	ldd	r24, Z+4	; 0x04
    5074:	95 81       	ldd	r25, Z+5	; 0x05
    5076:	00 97       	sbiw	r24, 0x00	; 0
    5078:	61 f4       	brne	.+24     	; 0x5092 <_ZNK6String6equalsEPKc+0x22>
    507a:	61 15       	cp	r22, r1
    507c:	71 05       	cpc	r23, r1
    507e:	39 f0       	breq	.+14     	; 0x508e <_ZNK6String6equalsEPKc+0x1e>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    5080:	81 e0       	ldi	r24, 0x01	; 1
    5082:	fb 01       	movw	r30, r22
    5084:	90 81       	ld	r25, Z
    5086:	99 23       	and	r25, r25
    5088:	d9 f0       	breq	.+54     	; 0x50c0 <_ZNK6String6equalsEPKc+0x50>
    508a:	80 e0       	ldi	r24, 0x00	; 0
    508c:	08 95       	ret
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    508e:	81 e0       	ldi	r24, 0x01	; 1
    5090:	08 95       	ret
	if (cstr == NULL) return buffer[0] == 0;
    5092:	61 15       	cp	r22, r1
    5094:	71 05       	cpc	r23, r1
    5096:	49 f4       	brne	.+18     	; 0x50aa <_ZNK6String6equalsEPKc+0x3a>
    5098:	01 90       	ld	r0, Z+
    509a:	f0 81       	ld	r31, Z
    509c:	e0 2d       	mov	r30, r0
    509e:	81 e0       	ldi	r24, 0x01	; 1
    50a0:	90 81       	ld	r25, Z
    50a2:	99 23       	and	r25, r25
    50a4:	69 f0       	breq	.+26     	; 0x50c0 <_ZNK6String6equalsEPKc+0x50>
    50a6:	80 e0       	ldi	r24, 0x00	; 0
    50a8:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    50aa:	80 81       	ld	r24, Z
    50ac:	91 81       	ldd	r25, Z+1	; 0x01
    50ae:	0e 94 c1 44 	call	0x8982	; 0x8982 <strcmp>
    50b2:	28 2f       	mov	r18, r24
    50b4:	39 2f       	mov	r19, r25
    50b6:	81 e0       	ldi	r24, 0x01	; 1
    50b8:	21 15       	cp	r18, r1
    50ba:	31 05       	cpc	r19, r1
    50bc:	09 f0       	breq	.+2      	; 0x50c0 <_ZNK6String6equalsEPKc+0x50>
    50be:	80 e0       	ldi	r24, 0x00	; 0
}
    50c0:	08 95       	ret

000050c2 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    50c2:	0e 94 ef 27 	call	0x4fde	; 0x4fde <_ZNK6String9compareToERKS_>
}
    50c6:	89 2f       	mov	r24, r25
    50c8:	88 1f       	adc	r24, r24
    50ca:	88 27       	eor	r24, r24
    50cc:	88 1f       	adc	r24, r24
    50ce:	08 95       	ret

000050d0 <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    50d0:	0e 94 ef 27 	call	0x4fde	; 0x4fde <_ZNK6String9compareToERKS_>
    50d4:	21 e0       	ldi	r18, 0x01	; 1
    50d6:	18 16       	cp	r1, r24
    50d8:	19 06       	cpc	r1, r25
    50da:	0c f0       	brlt	.+2      	; 0x50de <_ZNK6StringgtERKS_+0xe>
    50dc:	20 e0       	ldi	r18, 0x00	; 0
}
    50de:	82 2f       	mov	r24, r18
    50e0:	08 95       	ret

000050e2 <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    50e2:	0e 94 ef 27 	call	0x4fde	; 0x4fde <_ZNK6String9compareToERKS_>
    50e6:	21 e0       	ldi	r18, 0x01	; 1
    50e8:	18 16       	cp	r1, r24
    50ea:	19 06       	cpc	r1, r25
    50ec:	0c f4       	brge	.+2      	; 0x50f0 <_ZNK6StringleERKS_+0xe>
    50ee:	20 e0       	ldi	r18, 0x00	; 0
}
    50f0:	82 2f       	mov	r24, r18
    50f2:	08 95       	ret

000050f4 <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    50f4:	0e 94 ef 27 	call	0x4fde	; 0x4fde <_ZNK6String9compareToERKS_>
    50f8:	89 2f       	mov	r24, r25
    50fa:	80 95       	com	r24
}
    50fc:	88 1f       	adc	r24, r24
    50fe:	88 27       	eor	r24, r24
    5100:	88 1f       	adc	r24, r24
    5102:	08 95       	ret

00005104 <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    5104:	ef 92       	push	r14
    5106:	ff 92       	push	r15
    5108:	0f 93       	push	r16
    510a:	1f 93       	push	r17
    510c:	cf 93       	push	r28
    510e:	df 93       	push	r29
    5110:	dc 01       	movw	r26, r24
    5112:	fb 01       	movw	r30, r22
	if (this == &s2) return 1;
    5114:	86 17       	cp	r24, r22
    5116:	97 07       	cpc	r25, r23
    5118:	29 f1       	breq	.+74     	; 0x5164 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	if (len != s2.len) return 0;
    511a:	14 96       	adiw	r26, 0x04	; 4
    511c:	8d 91       	ld	r24, X+
    511e:	9c 91       	ld	r25, X
    5120:	15 97       	sbiw	r26, 0x05	; 5
    5122:	24 81       	ldd	r18, Z+4	; 0x04
    5124:	35 81       	ldd	r19, Z+5	; 0x05
    5126:	82 17       	cp	r24, r18
    5128:	93 07       	cpc	r25, r19
    512a:	f1 f4       	brne	.+60     	; 0x5168 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len == 0) return 1;
    512c:	00 97       	sbiw	r24, 0x00	; 0
    512e:	f1 f0       	breq	.+60     	; 0x516c <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
    5130:	e0 80       	ld	r14, Z
    5132:	f1 80       	ldd	r15, Z+1	; 0x01
    5134:	0d 91       	ld	r16, X+
    5136:	1c 91       	ld	r17, X
    5138:	11 97       	sbiw	r26, 0x01	; 1
	while (*p1) {
    513a:	0d c0       	rjmp	.+26     	; 0x5156 <_ZNK6String16equalsIgnoreCaseERKS_+0x52>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	0e 94 7e 44 	call	0x88fc	; 0x88fc <tolower>
    5142:	ec 01       	movw	r28, r24
    5144:	f7 01       	movw	r30, r14
    5146:	81 91       	ld	r24, Z+
    5148:	7f 01       	movw	r14, r30
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	0e 94 7e 44 	call	0x88fc	; 0x88fc <tolower>
    5150:	c8 17       	cp	r28, r24
    5152:	d9 07       	cpc	r29, r25
    5154:	69 f4       	brne	.+26     	; 0x5170 <_ZNK6String16equalsIgnoreCaseERKS_+0x6c>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    5156:	f8 01       	movw	r30, r16
    5158:	81 91       	ld	r24, Z+
    515a:	8f 01       	movw	r16, r30
    515c:	88 23       	and	r24, r24
    515e:	71 f7       	brne	.-36     	; 0x513c <_ZNK6String16equalsIgnoreCaseERKS_+0x38>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
    5160:	81 e0       	ldi	r24, 0x01	; 1
    5162:	07 c0       	rjmp	.+14     	; 0x5172 <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
    5164:	81 e0       	ldi	r24, 0x01	; 1
    5166:	05 c0       	rjmp	.+10     	; 0x5172 <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	if (len != s2.len) return 0;
    5168:	80 e0       	ldi	r24, 0x00	; 0
    516a:	03 c0       	rjmp	.+6      	; 0x5172 <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	if (len == 0) return 1;
    516c:	81 e0       	ldi	r24, 0x01	; 1
    516e:	01 c0       	rjmp	.+2      	; 0x5172 <_ZNK6String16equalsIgnoreCaseERKS_+0x6e>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    5170:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return 1;
}
    5172:	df 91       	pop	r29
    5174:	cf 91       	pop	r28
    5176:	1f 91       	pop	r17
    5178:	0f 91       	pop	r16
    517a:	ff 90       	pop	r15
    517c:	ef 90       	pop	r14
    517e:	08 95       	ret

00005180 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    5180:	fc 01       	movw	r30, r24
    5182:	db 01       	movw	r26, r22
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    5184:	14 96       	adiw	r26, 0x04	; 4
    5186:	2d 91       	ld	r18, X+
    5188:	3c 91       	ld	r19, X
    518a:	15 97       	sbiw	r26, 0x05	; 5
    518c:	84 81       	ldd	r24, Z+4	; 0x04
    518e:	95 81       	ldd	r25, Z+5	; 0x05
    5190:	82 1b       	sub	r24, r18
    5192:	93 0b       	sbc	r25, r19
    5194:	84 17       	cp	r24, r20
    5196:	95 07       	cpc	r25, r21
    5198:	b8 f0       	brcs	.+46     	; 0x51c8 <_ZNK6String10startsWithERKS_j+0x48>
    519a:	80 81       	ld	r24, Z
    519c:	91 81       	ldd	r25, Z+1	; 0x01
    519e:	00 97       	sbiw	r24, 0x00	; 0
    51a0:	a9 f0       	breq	.+42     	; 0x51cc <_ZNK6String10startsWithERKS_j+0x4c>
    51a2:	6d 91       	ld	r22, X+
    51a4:	7c 91       	ld	r23, X
    51a6:	11 97       	sbiw	r26, 0x01	; 1
    51a8:	61 15       	cp	r22, r1
    51aa:	71 05       	cpc	r23, r1
    51ac:	89 f0       	breq	.+34     	; 0x51d0 <_ZNK6String10startsWithERKS_j+0x50>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    51ae:	84 0f       	add	r24, r20
    51b0:	95 1f       	adc	r25, r21
    51b2:	a9 01       	movw	r20, r18
    51b4:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <strncmp>
    51b8:	28 2f       	mov	r18, r24
    51ba:	39 2f       	mov	r19, r25
    51bc:	81 e0       	ldi	r24, 0x01	; 1
    51be:	21 15       	cp	r18, r1
    51c0:	31 05       	cpc	r19, r1
    51c2:	39 f0       	breq	.+14     	; 0x51d2 <_ZNK6String10startsWithERKS_j+0x52>
    51c4:	80 e0       	ldi	r24, 0x00	; 0
    51c6:	08 95       	ret
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    51c8:	80 e0       	ldi	r24, 0x00	; 0
    51ca:	08 95       	ret
    51cc:	80 e0       	ldi	r24, 0x00	; 0
    51ce:	08 95       	ret
    51d0:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    51d2:	08 95       	ret

000051d4 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    51d4:	fc 01       	movw	r30, r24
    51d6:	24 81       	ldd	r18, Z+4	; 0x04
    51d8:	35 81       	ldd	r19, Z+5	; 0x05
    51da:	fb 01       	movw	r30, r22
    51dc:	44 81       	ldd	r20, Z+4	; 0x04
    51de:	55 81       	ldd	r21, Z+5	; 0x05
    51e0:	24 17       	cp	r18, r20
    51e2:	35 07       	cpc	r19, r21
    51e4:	28 f0       	brcs	.+10     	; 0x51f0 <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    51e6:	40 e0       	ldi	r20, 0x00	; 0
    51e8:	50 e0       	ldi	r21, 0x00	; 0
    51ea:	0e 94 c0 28 	call	0x5180	; 0x5180 <_ZNK6String10startsWithERKS_j>
    51ee:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    51f0:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    51f2:	08 95       	ret

000051f4 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    51f4:	fc 01       	movw	r30, r24
    51f6:	db 01       	movw	r26, r22
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    51f8:	84 81       	ldd	r24, Z+4	; 0x04
    51fa:	95 81       	ldd	r25, Z+5	; 0x05
    51fc:	14 96       	adiw	r26, 0x04	; 4
    51fe:	2d 91       	ld	r18, X+
    5200:	3c 91       	ld	r19, X
    5202:	15 97       	sbiw	r26, 0x05	; 5
    5204:	82 17       	cp	r24, r18
    5206:	93 07       	cpc	r25, r19
    5208:	c8 f0       	brcs	.+50     	; 0x523c <_ZNK6String8endsWithERKS_+0x48>
    520a:	40 81       	ld	r20, Z
    520c:	51 81       	ldd	r21, Z+1	; 0x01
    520e:	41 15       	cp	r20, r1
    5210:	51 05       	cpc	r21, r1
    5212:	b1 f0       	breq	.+44     	; 0x5240 <_ZNK6String8endsWithERKS_+0x4c>
    5214:	6d 91       	ld	r22, X+
    5216:	7c 91       	ld	r23, X
    5218:	11 97       	sbiw	r26, 0x01	; 1
    521a:	61 15       	cp	r22, r1
    521c:	71 05       	cpc	r23, r1
    521e:	91 f0       	breq	.+36     	; 0x5244 <_ZNK6String8endsWithERKS_+0x50>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    5220:	82 1b       	sub	r24, r18
    5222:	93 0b       	sbc	r25, r19
    5224:	84 0f       	add	r24, r20
    5226:	95 1f       	adc	r25, r21
    5228:	0e 94 c1 44 	call	0x8982	; 0x8982 <strcmp>
    522c:	28 2f       	mov	r18, r24
    522e:	39 2f       	mov	r19, r25
    5230:	81 e0       	ldi	r24, 0x01	; 1
    5232:	21 15       	cp	r18, r1
    5234:	31 05       	cpc	r19, r1
    5236:	39 f0       	breq	.+14     	; 0x5246 <_ZNK6String8endsWithERKS_+0x52>
    5238:	80 e0       	ldi	r24, 0x00	; 0
    523a:	08 95       	ret
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    523c:	80 e0       	ldi	r24, 0x00	; 0
    523e:	08 95       	ret
    5240:	80 e0       	ldi	r24, 0x00	; 0
    5242:	08 95       	ret
    5244:	80 e0       	ldi	r24, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    5246:	08 95       	ret

00005248 <_ZN6String9setCharAtEjc>:
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
    5248:	fc 01       	movw	r30, r24
	if (loc < len) buffer[loc] = c;
    524a:	84 81       	ldd	r24, Z+4	; 0x04
    524c:	95 81       	ldd	r25, Z+5	; 0x05
    524e:	68 17       	cp	r22, r24
    5250:	79 07       	cpc	r23, r25
    5252:	30 f4       	brcc	.+12     	; 0x5260 <_ZN6String9setCharAtEjc+0x18>
    5254:	80 81       	ld	r24, Z
    5256:	91 81       	ldd	r25, Z+1	; 0x01
    5258:	68 0f       	add	r22, r24
    525a:	79 1f       	adc	r23, r25
    525c:	fb 01       	movw	r30, r22
    525e:	40 83       	st	Z, r20
    5260:	08 95       	ret

00005262 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    5262:	fc 01       	movw	r30, r24
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    5264:	84 81       	ldd	r24, Z+4	; 0x04
    5266:	95 81       	ldd	r25, Z+5	; 0x05
    5268:	68 17       	cp	r22, r24
    526a:	79 07       	cpc	r23, r25
    526c:	20 f4       	brcc	.+8      	; 0x5276 <_ZN6StringixEj+0x14>
    526e:	80 81       	ld	r24, Z
    5270:	91 81       	ldd	r25, Z+1	; 0x01
    5272:	00 97       	sbiw	r24, 0x00	; 0
    5274:	29 f4       	brne	.+10     	; 0x5280 <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    5276:	10 92 6a 06 	sts	0x066A, r1
		return dummy_writable_char;
    527a:	8a e6       	ldi	r24, 0x6A	; 106
    527c:	96 e0       	ldi	r25, 0x06	; 6
    527e:	08 95       	ret
	}
	return buffer[index];
    5280:	86 0f       	add	r24, r22
    5282:	97 1f       	adc	r25, r23
}
    5284:	08 95       	ret

00005286 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    5286:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    5288:	84 81       	ldd	r24, Z+4	; 0x04
    528a:	95 81       	ldd	r25, Z+5	; 0x05
    528c:	68 17       	cp	r22, r24
    528e:	79 07       	cpc	r23, r25
    5290:	48 f4       	brcc	.+18     	; 0x52a4 <_ZNK6StringixEj+0x1e>
    5292:	80 81       	ld	r24, Z
    5294:	91 81       	ldd	r25, Z+1	; 0x01
    5296:	00 97       	sbiw	r24, 0x00	; 0
    5298:	39 f0       	breq	.+14     	; 0x52a8 <_ZNK6StringixEj+0x22>
	return buffer[index];
    529a:	68 0f       	add	r22, r24
    529c:	79 1f       	adc	r23, r25
    529e:	fb 01       	movw	r30, r22
    52a0:	80 81       	ld	r24, Z
    52a2:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    52a4:	80 e0       	ldi	r24, 0x00	; 0
    52a6:	08 95       	ret
    52a8:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    52aa:	08 95       	ret

000052ac <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    52ac:	0e 94 43 29 	call	0x5286	; 0x5286 <_ZNK6StringixEj>
}
    52b0:	08 95       	ret

000052b2 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    52b2:	0f 93       	push	r16
    52b4:	1f 93       	push	r17
    52b6:	cf 93       	push	r28
    52b8:	df 93       	push	r29
    52ba:	fc 01       	movw	r30, r24
    52bc:	eb 01       	movw	r28, r22
	if (!bufsize || !buf) return;
    52be:	41 15       	cp	r20, r1
    52c0:	51 05       	cpc	r21, r1
    52c2:	e9 f0       	breq	.+58     	; 0x52fe <_ZNK6String8getBytesEPhjj+0x4c>
    52c4:	20 97       	sbiw	r28, 0x00	; 0
    52c6:	d9 f0       	breq	.+54     	; 0x52fe <_ZNK6String8getBytesEPhjj+0x4c>
	if (index >= len) {
    52c8:	84 81       	ldd	r24, Z+4	; 0x04
    52ca:	95 81       	ldd	r25, Z+5	; 0x05
    52cc:	28 17       	cp	r18, r24
    52ce:	39 07       	cpc	r19, r25
    52d0:	10 f0       	brcs	.+4      	; 0x52d6 <_ZNK6String8getBytesEPhjj+0x24>
		buf[0] = 0;
    52d2:	18 82       	st	Y, r1
		return;
    52d4:	14 c0       	rjmp	.+40     	; 0x52fe <_ZNK6String8getBytesEPhjj+0x4c>
	}
	unsigned int n = bufsize - 1;
    52d6:	41 50       	subi	r20, 0x01	; 1
    52d8:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    52da:	8c 01       	movw	r16, r24
    52dc:	02 1b       	sub	r16, r18
    52de:	13 0b       	sbc	r17, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    52e0:	40 17       	cp	r20, r16
    52e2:	51 07       	cpc	r21, r17
    52e4:	08 f4       	brcc	.+2      	; 0x52e8 <_ZNK6String8getBytesEPhjj+0x36>
    52e6:	8a 01       	movw	r16, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    52e8:	60 81       	ld	r22, Z
    52ea:	71 81       	ldd	r23, Z+1	; 0x01
    52ec:	62 0f       	add	r22, r18
    52ee:	73 1f       	adc	r23, r19
    52f0:	ce 01       	movw	r24, r28
    52f2:	a8 01       	movw	r20, r16
    52f4:	0e 94 df 44 	call	0x89be	; 0x89be <strncpy>
	buf[n] = 0;
    52f8:	c0 0f       	add	r28, r16
    52fa:	d1 1f       	adc	r29, r17
    52fc:	18 82       	st	Y, r1
}
    52fe:	df 91       	pop	r29
    5300:	cf 91       	pop	r28
    5302:	1f 91       	pop	r17
    5304:	0f 91       	pop	r16
    5306:	08 95       	ret

00005308 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    5308:	cf 93       	push	r28
    530a:	df 93       	push	r29
    530c:	fc 01       	movw	r30, r24
	if (fromIndex >= len) return -1;
    530e:	84 81       	ldd	r24, Z+4	; 0x04
    5310:	95 81       	ldd	r25, Z+5	; 0x05
    5312:	48 17       	cp	r20, r24
    5314:	59 07       	cpc	r21, r25
    5316:	68 f4       	brcc	.+26     	; 0x5332 <_ZNK6String7indexOfEcj+0x2a>
	const char* temp = strchr(buffer + fromIndex, ch);
    5318:	c0 81       	ld	r28, Z
    531a:	d1 81       	ldd	r29, Z+1	; 0x01
    531c:	ce 01       	movw	r24, r28
    531e:	84 0f       	add	r24, r20
    5320:	95 1f       	adc	r25, r21
    5322:	70 e0       	ldi	r23, 0x00	; 0
    5324:	0e 94 b6 44 	call	0x896c	; 0x896c <strchr>
	if (temp == NULL) return -1;
    5328:	00 97       	sbiw	r24, 0x00	; 0
    532a:	31 f0       	breq	.+12     	; 0x5338 <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
    532c:	8c 1b       	sub	r24, r28
    532e:	9d 0b       	sbc	r25, r29
    5330:	05 c0       	rjmp	.+10     	; 0x533c <_ZNK6String7indexOfEcj+0x34>
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
    5332:	8f ef       	ldi	r24, 0xFF	; 255
    5334:	9f ef       	ldi	r25, 0xFF	; 255
    5336:	02 c0       	rjmp	.+4      	; 0x533c <_ZNK6String7indexOfEcj+0x34>
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
    5338:	8f ef       	ldi	r24, 0xFF	; 255
    533a:	9f ef       	ldi	r25, 0xFF	; 255
	return temp - buffer;
}
    533c:	df 91       	pop	r29
    533e:	cf 91       	pop	r28
    5340:	08 95       	ret

00005342 <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    5342:	40 e0       	ldi	r20, 0x00	; 0
    5344:	50 e0       	ldi	r21, 0x00	; 0
    5346:	0e 94 84 29 	call	0x5308	; 0x5308 <_ZNK6String7indexOfEcj>
}
    534a:	08 95       	ret

0000534c <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    534c:	cf 93       	push	r28
    534e:	df 93       	push	r29
    5350:	fc 01       	movw	r30, r24
	if (fromIndex >= len) return -1;
    5352:	84 81       	ldd	r24, Z+4	; 0x04
    5354:	95 81       	ldd	r25, Z+5	; 0x05
    5356:	48 17       	cp	r20, r24
    5358:	59 07       	cpc	r21, r25
    535a:	78 f4       	brcc	.+30     	; 0x537a <_ZNK6String7indexOfERKS_j+0x2e>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    535c:	c0 81       	ld	r28, Z
    535e:	d1 81       	ldd	r29, Z+1	; 0x01
    5360:	fb 01       	movw	r30, r22
    5362:	60 81       	ld	r22, Z
    5364:	71 81       	ldd	r23, Z+1	; 0x01
    5366:	ce 01       	movw	r24, r28
    5368:	84 0f       	add	r24, r20
    536a:	95 1f       	adc	r25, r21
    536c:	0e 94 f9 44 	call	0x89f2	; 0x89f2 <strstr>
	if (found == NULL) return -1;
    5370:	00 97       	sbiw	r24, 0x00	; 0
    5372:	31 f0       	breq	.+12     	; 0x5380 <_ZNK6String7indexOfERKS_j+0x34>
	return found - buffer;
    5374:	8c 1b       	sub	r24, r28
    5376:	9d 0b       	sbc	r25, r29
    5378:	05 c0       	rjmp	.+10     	; 0x5384 <_ZNK6String7indexOfERKS_j+0x38>
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    537a:	8f ef       	ldi	r24, 0xFF	; 255
    537c:	9f ef       	ldi	r25, 0xFF	; 255
    537e:	02 c0       	rjmp	.+4      	; 0x5384 <_ZNK6String7indexOfERKS_j+0x38>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    5380:	8f ef       	ldi	r24, 0xFF	; 255
    5382:	9f ef       	ldi	r25, 0xFF	; 255
	return found - buffer;
}
    5384:	df 91       	pop	r29
    5386:	cf 91       	pop	r28
    5388:	08 95       	ret

0000538a <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    538a:	40 e0       	ldi	r20, 0x00	; 0
    538c:	50 e0       	ldi	r21, 0x00	; 0
    538e:	0e 94 a6 29 	call	0x534c	; 0x534c <_ZNK6String7indexOfERKS_j>
}
    5392:	08 95       	ret

00005394 <_ZNK6String11lastIndexOfEcj>:
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    5394:	df 92       	push	r13
    5396:	ef 92       	push	r14
    5398:	ff 92       	push	r15
    539a:	0f 93       	push	r16
    539c:	1f 93       	push	r17
    539e:	cf 93       	push	r28
    53a0:	df 93       	push	r29
    53a2:	8c 01       	movw	r16, r24
	if (fromIndex >= len) return -1;
    53a4:	dc 01       	movw	r26, r24
    53a6:	14 96       	adiw	r26, 0x04	; 4
    53a8:	8d 91       	ld	r24, X+
    53aa:	9c 91       	ld	r25, X
    53ac:	15 97       	sbiw	r26, 0x05	; 5
    53ae:	48 17       	cp	r20, r24
    53b0:	59 07       	cpc	r21, r25
    53b2:	e0 f4       	brcc	.+56     	; 0x53ec <_ZNK6String11lastIndexOfEcj+0x58>
	char tempchar = buffer[fromIndex + 1];
    53b4:	7a 01       	movw	r14, r20
    53b6:	08 94       	sec
    53b8:	e1 1c       	adc	r14, r1
    53ba:	f1 1c       	adc	r15, r1
    53bc:	ed 91       	ld	r30, X+
    53be:	fc 91       	ld	r31, X
    53c0:	11 97       	sbiw	r26, 0x01	; 1
    53c2:	ee 0d       	add	r30, r14
    53c4:	ff 1d       	adc	r31, r15
    53c6:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    53c8:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    53ca:	cd 91       	ld	r28, X+
    53cc:	dc 91       	ld	r29, X
    53ce:	ce 01       	movw	r24, r28
    53d0:	70 e0       	ldi	r23, 0x00	; 0
    53d2:	0e 94 ee 44 	call	0x89dc	; 0x89dc <strrchr>
	buffer[fromIndex + 1] = tempchar;
    53d6:	ce 0d       	add	r28, r14
    53d8:	df 1d       	adc	r29, r15
    53da:	d8 82       	st	Y, r13
	if (temp == NULL) return -1;
    53dc:	00 97       	sbiw	r24, 0x00	; 0
    53de:	49 f0       	breq	.+18     	; 0x53f2 <_ZNK6String11lastIndexOfEcj+0x5e>
	return temp - buffer;
    53e0:	f8 01       	movw	r30, r16
    53e2:	20 81       	ld	r18, Z
    53e4:	31 81       	ldd	r19, Z+1	; 0x01
    53e6:	82 1b       	sub	r24, r18
    53e8:	93 0b       	sbc	r25, r19
    53ea:	05 c0       	rjmp	.+10     	; 0x53f6 <_ZNK6String11lastIndexOfEcj+0x62>
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    53ec:	8f ef       	ldi	r24, 0xFF	; 255
    53ee:	9f ef       	ldi	r25, 0xFF	; 255
    53f0:	02 c0       	rjmp	.+4      	; 0x53f6 <_ZNK6String11lastIndexOfEcj+0x62>
	char tempchar = buffer[fromIndex + 1];
	buffer[fromIndex + 1] = '\0';
	char* temp = strrchr( buffer, ch );
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
    53f2:	8f ef       	ldi	r24, 0xFF	; 255
    53f4:	9f ef       	ldi	r25, 0xFF	; 255
	return temp - buffer;
}
    53f6:	df 91       	pop	r29
    53f8:	cf 91       	pop	r28
    53fa:	1f 91       	pop	r17
    53fc:	0f 91       	pop	r16
    53fe:	ff 90       	pop	r15
    5400:	ef 90       	pop	r14
    5402:	df 90       	pop	r13
    5404:	08 95       	ret

00005406 <_ZNK6String11lastIndexOfEc>:
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    5406:	fc 01       	movw	r30, r24
    5408:	44 81       	ldd	r20, Z+4	; 0x04
    540a:	55 81       	ldd	r21, Z+5	; 0x05
    540c:	41 50       	subi	r20, 0x01	; 1
    540e:	50 40       	sbci	r21, 0x00	; 0
    5410:	0e 94 ca 29 	call	0x5394	; 0x5394 <_ZNK6String11lastIndexOfEcj>
}
    5414:	08 95       	ret

00005416 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    5416:	af 92       	push	r10
    5418:	bf 92       	push	r11
    541a:	cf 92       	push	r12
    541c:	df 92       	push	r13
    541e:	ef 92       	push	r14
    5420:	ff 92       	push	r15
    5422:	0f 93       	push	r16
    5424:	1f 93       	push	r17
    5426:	cf 93       	push	r28
    5428:	df 93       	push	r29
    542a:	fc 01       	movw	r30, r24
    542c:	6b 01       	movw	r12, r22
    542e:	7a 01       	movw	r14, r20
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    5430:	db 01       	movw	r26, r22
    5432:	14 96       	adiw	r26, 0x04	; 4
    5434:	2d 91       	ld	r18, X+
    5436:	3c 91       	ld	r19, X
    5438:	15 97       	sbiw	r26, 0x05	; 5
    543a:	21 15       	cp	r18, r1
    543c:	31 05       	cpc	r19, r1
    543e:	71 f1       	breq	.+92     	; 0x549c <_ZNK6String11lastIndexOfERKS_j+0x86>
    5440:	84 81       	ldd	r24, Z+4	; 0x04
    5442:	95 81       	ldd	r25, Z+5	; 0x05
    5444:	00 97       	sbiw	r24, 0x00	; 0
    5446:	71 f1       	breq	.+92     	; 0x54a4 <_ZNK6String11lastIndexOfERKS_j+0x8e>
    5448:	82 17       	cp	r24, r18
    544a:	93 07       	cpc	r25, r19
    544c:	78 f1       	brcs	.+94     	; 0x54ac <_ZNK6String11lastIndexOfERKS_j+0x96>
	if (fromIndex >= len) fromIndex = len - 1;
    544e:	48 17       	cp	r20, r24
    5450:	59 07       	cpc	r21, r25
    5452:	20 f0       	brcs	.+8      	; 0x545c <_ZNK6String11lastIndexOfERKS_j+0x46>
    5454:	7c 01       	movw	r14, r24
    5456:	08 94       	sec
    5458:	e1 08       	sbc	r14, r1
    545a:	f1 08       	sbc	r15, r1
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    545c:	c0 81       	ld	r28, Z
    545e:	d1 81       	ldd	r29, Z+1	; 0x01
    5460:	8e 01       	movw	r16, r28
    5462:	0e 0d       	add	r16, r14
    5464:	1f 1d       	adc	r17, r15
    5466:	0c 17       	cp	r16, r28
    5468:	1d 07       	cpc	r17, r29
    546a:	20 f1       	brcs	.+72     	; 0x54b4 <_ZNK6String11lastIndexOfERKS_j+0x9e>
    546c:	ce 01       	movw	r24, r28

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    546e:	aa 24       	eor	r10, r10
    5470:	aa 94       	dec	r10
    5472:	ba 2c       	mov	r11, r10
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
		p = strstr(p, s2.buffer);
    5474:	f6 01       	movw	r30, r12
    5476:	60 81       	ld	r22, Z
    5478:	71 81       	ldd	r23, Z+1	; 0x01
    547a:	0e 94 f9 44 	call	0x89f2	; 0x89f2 <strstr>
    547e:	9c 01       	movw	r18, r24
		if (!p) break;
    5480:	00 97       	sbiw	r24, 0x00	; 0
    5482:	d9 f0       	breq	.+54     	; 0x54ba <_ZNK6String11lastIndexOfERKS_j+0xa4>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    5484:	8c 1b       	sub	r24, r28
    5486:	9d 0b       	sbc	r25, r29
    5488:	e8 16       	cp	r14, r24
    548a:	f9 06       	cpc	r15, r25
    548c:	08 f0       	brcs	.+2      	; 0x5490 <_ZNK6String11lastIndexOfERKS_j+0x7a>
    548e:	5c 01       	movw	r10, r24
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    5490:	c9 01       	movw	r24, r18
    5492:	01 96       	adiw	r24, 0x01	; 1
    5494:	08 17       	cp	r16, r24
    5496:	19 07       	cpc	r17, r25
    5498:	68 f7       	brcc	.-38     	; 0x5474 <_ZNK6String11lastIndexOfERKS_j+0x5e>
    549a:	0f c0       	rjmp	.+30     	; 0x54ba <_ZNK6String11lastIndexOfERKS_j+0xa4>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    549c:	aa 24       	eor	r10, r10
    549e:	aa 94       	dec	r10
    54a0:	ba 2c       	mov	r11, r10
    54a2:	0b c0       	rjmp	.+22     	; 0x54ba <_ZNK6String11lastIndexOfERKS_j+0xa4>
    54a4:	aa 24       	eor	r10, r10
    54a6:	aa 94       	dec	r10
    54a8:	ba 2c       	mov	r11, r10
    54aa:	07 c0       	rjmp	.+14     	; 0x54ba <_ZNK6String11lastIndexOfERKS_j+0xa4>
    54ac:	aa 24       	eor	r10, r10
    54ae:	aa 94       	dec	r10
    54b0:	ba 2c       	mov	r11, r10
    54b2:	03 c0       	rjmp	.+6      	; 0x54ba <_ZNK6String11lastIndexOfERKS_j+0xa4>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    54b4:	aa 24       	eor	r10, r10
    54b6:	aa 94       	dec	r10
    54b8:	ba 2c       	mov	r11, r10
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    54ba:	8a 2d       	mov	r24, r10
    54bc:	9b 2d       	mov	r25, r11
    54be:	df 91       	pop	r29
    54c0:	cf 91       	pop	r28
    54c2:	1f 91       	pop	r17
    54c4:	0f 91       	pop	r16
    54c6:	ff 90       	pop	r15
    54c8:	ef 90       	pop	r14
    54ca:	df 90       	pop	r13
    54cc:	cf 90       	pop	r12
    54ce:	bf 90       	pop	r11
    54d0:	af 90       	pop	r10
    54d2:	08 95       	ret

000054d4 <_ZNK6String11lastIndexOfERKS_>:
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
    54d4:	fc 01       	movw	r30, r24
	return lastIndexOf(s2, len - s2.len);
    54d6:	44 81       	ldd	r20, Z+4	; 0x04
    54d8:	55 81       	ldd	r21, Z+5	; 0x05
    54da:	db 01       	movw	r26, r22
    54dc:	14 96       	adiw	r26, 0x04	; 4
    54de:	8d 91       	ld	r24, X+
    54e0:	9c 91       	ld	r25, X
    54e2:	15 97       	sbiw	r26, 0x05	; 5
    54e4:	48 1b       	sub	r20, r24
    54e6:	59 0b       	sbc	r21, r25
    54e8:	cf 01       	movw	r24, r30
    54ea:	0e 94 0b 2a 	call	0x5416	; 0x5416 <_ZNK6String11lastIndexOfERKS_j>
}
    54ee:	08 95       	ret

000054f0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    54f0:	bf 92       	push	r11
    54f2:	cf 92       	push	r12
    54f4:	df 92       	push	r13
    54f6:	ef 92       	push	r14
    54f8:	ff 92       	push	r15
    54fa:	0f 93       	push	r16
    54fc:	1f 93       	push	r17
    54fe:	cf 93       	push	r28
    5500:	df 93       	push	r29
    5502:	7c 01       	movw	r14, r24
    5504:	6b 01       	movw	r12, r22
    5506:	8a 01       	movw	r16, r20
    5508:	e9 01       	movw	r28, r18
	if (left > right) {
    550a:	24 17       	cp	r18, r20
    550c:	35 07       	cpc	r19, r21
    550e:	20 f4       	brcc	.+8      	; 0x5518 <_ZNK6String9substringEjj+0x28>
    5510:	81 2f       	mov	r24, r17
		unsigned int temp = right;
		right = left;
		left = temp;
    5512:	89 01       	movw	r16, r18

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
		unsigned int temp = right;
		right = left;
    5514:	c4 2f       	mov	r28, r20
    5516:	d8 2f       	mov	r29, r24
		left = temp;
	}
	String out;
    5518:	c7 01       	movw	r24, r14
    551a:	6e e5       	ldi	r22, 0x5E	; 94
    551c:	72 e0       	ldi	r23, 0x02	; 2
    551e:	0e 94 9c 24 	call	0x4938	; 0x4938 <_ZN6StringC1EPKc>
	if (left > len) return out;
    5522:	d6 01       	movw	r26, r12
    5524:	14 96       	adiw	r26, 0x04	; 4
    5526:	8d 91       	ld	r24, X+
    5528:	9c 91       	ld	r25, X
    552a:	15 97       	sbiw	r26, 0x05	; 5
    552c:	80 17       	cp	r24, r16
    552e:	91 07       	cpc	r25, r17
    5530:	c8 f0       	brcs	.+50     	; 0x5564 <_ZNK6String9substringEjj+0x74>
    5532:	8c 17       	cp	r24, r28
    5534:	9d 07       	cpc	r25, r29
    5536:	08 f4       	brcc	.+2      	; 0x553a <_ZNK6String9substringEjj+0x4a>
    5538:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    553a:	d6 01       	movw	r26, r12
    553c:	ed 91       	ld	r30, X+
    553e:	fc 91       	ld	r31, X
    5540:	11 97       	sbiw	r26, 0x01	; 1
    5542:	ec 0f       	add	r30, r28
    5544:	fd 1f       	adc	r31, r29
    5546:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    5548:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    554a:	6d 91       	ld	r22, X+
    554c:	7c 91       	ld	r23, X
    554e:	60 0f       	add	r22, r16
    5550:	71 1f       	adc	r23, r17
    5552:	c7 01       	movw	r24, r14
    5554:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    5558:	f6 01       	movw	r30, r12
    555a:	80 81       	ld	r24, Z
    555c:	91 81       	ldd	r25, Z+1	; 0x01
    555e:	c8 0f       	add	r28, r24
    5560:	d9 1f       	adc	r29, r25
    5562:	b8 82       	st	Y, r11
	return out;
}
    5564:	c7 01       	movw	r24, r14
    5566:	df 91       	pop	r29
    5568:	cf 91       	pop	r28
    556a:	1f 91       	pop	r17
    556c:	0f 91       	pop	r16
    556e:	ff 90       	pop	r15
    5570:	ef 90       	pop	r14
    5572:	df 90       	pop	r13
    5574:	cf 90       	pop	r12
    5576:	bf 90       	pop	r11
    5578:	08 95       	ret

0000557a <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    557a:	cf 93       	push	r28
    557c:	df 93       	push	r29
    557e:	ec 01       	movw	r28, r24
	return substring(left, len);
    5580:	fb 01       	movw	r30, r22
    5582:	24 81       	ldd	r18, Z+4	; 0x04
    5584:	35 81       	ldd	r19, Z+5	; 0x05
    5586:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <_ZNK6String9substringEjj>
}
    558a:	ce 01       	movw	r24, r28
    558c:	df 91       	pop	r29
    558e:	cf 91       	pop	r28
    5590:	08 95       	ret

00005592 <_ZN6String7replaceEcc>:
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    5592:	dc 01       	movw	r26, r24
    5594:	ed 91       	ld	r30, X+
    5596:	fc 91       	ld	r31, X
    5598:	11 97       	sbiw	r26, 0x01	; 1
    559a:	30 97       	sbiw	r30, 0x00	; 0
    559c:	61 f0       	breq	.+24     	; 0x55b6 <_ZN6String7replaceEcc+0x24>
	for (char *p = buffer; *p; p++) {
    559e:	80 81       	ld	r24, Z
    55a0:	88 23       	and	r24, r24
    55a2:	49 f0       	breq	.+18     	; 0x55b6 <_ZN6String7replaceEcc+0x24>

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
    55a4:	31 96       	adiw	r30, 0x01	; 1
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    55a6:	86 17       	cp	r24, r22
    55a8:	19 f4       	brne	.+6      	; 0x55b0 <_ZN6String7replaceEcc+0x1e>

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
    55aa:	df 01       	movw	r26, r30
    55ac:	11 97       	sbiw	r26, 0x01	; 1
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    55ae:	4c 93       	st	X, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    55b0:	81 91       	ld	r24, Z+
    55b2:	88 23       	and	r24, r24
    55b4:	c1 f7       	brne	.-16     	; 0x55a6 <_ZN6String7replaceEcc+0x14>
    55b6:	08 95       	ret

000055b8 <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    55b8:	4f 92       	push	r4
    55ba:	5f 92       	push	r5
    55bc:	6f 92       	push	r6
    55be:	7f 92       	push	r7
    55c0:	8f 92       	push	r8
    55c2:	9f 92       	push	r9
    55c4:	af 92       	push	r10
    55c6:	bf 92       	push	r11
    55c8:	cf 92       	push	r12
    55ca:	df 92       	push	r13
    55cc:	ef 92       	push	r14
    55ce:	ff 92       	push	r15
    55d0:	0f 93       	push	r16
    55d2:	1f 93       	push	r17
    55d4:	cf 93       	push	r28
    55d6:	df 93       	push	r29
    55d8:	3c 01       	movw	r6, r24
    55da:	4b 01       	movw	r8, r22
    55dc:	7a 01       	movw	r14, r20
	if (len == 0 || find.len == 0) return;
    55de:	fc 01       	movw	r30, r24
    55e0:	a4 80       	ldd	r10, Z+4	; 0x04
    55e2:	b5 80       	ldd	r11, Z+5	; 0x05
    55e4:	a1 14       	cp	r10, r1
    55e6:	b1 04       	cpc	r11, r1
    55e8:	09 f4       	brne	.+2      	; 0x55ec <_ZN6String7replaceERKS_S1_+0x34>
    55ea:	ca c0       	rjmp	.+404    	; 0x5780 <_ZN6String7replaceERKS_S1_+0x1c8>
    55ec:	fb 01       	movw	r30, r22
    55ee:	c4 80       	ldd	r12, Z+4	; 0x04
    55f0:	d5 80       	ldd	r13, Z+5	; 0x05
    55f2:	c1 14       	cp	r12, r1
    55f4:	d1 04       	cpc	r13, r1
    55f6:	09 f4       	brne	.+2      	; 0x55fa <_ZN6String7replaceERKS_S1_+0x42>
    55f8:	c3 c0       	rjmp	.+390    	; 0x5780 <_ZN6String7replaceERKS_S1_+0x1c8>
	int diff = replace.len - find.len;
    55fa:	fa 01       	movw	r30, r20
    55fc:	84 81       	ldd	r24, Z+4	; 0x04
    55fe:	95 81       	ldd	r25, Z+5	; 0x05
    5600:	2c 01       	movw	r4, r24
    5602:	4c 18       	sub	r4, r12
    5604:	5d 08       	sbc	r5, r13
    5606:	c2 01       	movw	r24, r4
	char *readFrom = buffer;
    5608:	f3 01       	movw	r30, r6
    560a:	00 81       	ld	r16, Z
    560c:	11 81       	ldd	r17, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    560e:	41 14       	cp	r4, r1
    5610:	51 04       	cpc	r5, r1
    5612:	79 f0       	breq	.+30     	; 0x5632 <_ZN6String7replaceERKS_S1_+0x7a>
    5614:	18 c0       	rjmp	.+48     	; 0x5646 <_ZN6String7replaceERKS_S1_+0x8e>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    5616:	f7 01       	movw	r30, r14
    5618:	60 81       	ld	r22, Z
    561a:	71 81       	ldd	r23, Z+1	; 0x01
    561c:	44 81       	ldd	r20, Z+4	; 0x04
    561e:	55 81       	ldd	r21, Z+5	; 0x05
    5620:	8c 2f       	mov	r24, r28
    5622:	9d 2f       	mov	r25, r29
    5624:	0e 94 9b 44 	call	0x8936	; 0x8936 <memcpy>
			readFrom = foundAt + replace.len;
    5628:	f7 01       	movw	r30, r14
    562a:	04 81       	ldd	r16, Z+4	; 0x04
    562c:	15 81       	ldd	r17, Z+5	; 0x05
    562e:	0c 0f       	add	r16, r28
    5630:	1d 1f       	adc	r17, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    5632:	f4 01       	movw	r30, r8
    5634:	60 81       	ld	r22, Z
    5636:	71 81       	ldd	r23, Z+1	; 0x01
    5638:	c8 01       	movw	r24, r16
    563a:	0e 94 f9 44 	call	0x89f2	; 0x89f2 <strstr>
    563e:	ec 01       	movw	r28, r24
    5640:	00 97       	sbiw	r24, 0x00	; 0
    5642:	49 f7       	brne	.-46     	; 0x5616 <_ZN6String7replaceERKS_S1_+0x5e>
    5644:	9d c0       	rjmp	.+314    	; 0x5780 <_ZN6String7replaceERKS_S1_+0x1c8>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    5646:	99 23       	and	r25, r25
    5648:	64 f1       	brlt	.+88     	; 0x56a2 <_ZN6String7replaceERKS_S1_+0xea>
    564a:	e5 01       	movw	r28, r10
    564c:	3e c0       	rjmp	.+124    	; 0x56ca <_ZN6String7replaceERKS_S1_+0x112>
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    564e:	e6 01       	movw	r28, r12
    5650:	c0 1b       	sub	r28, r16
    5652:	d1 0b       	sbc	r29, r17
			memcpy(writeTo, readFrom, n);
    5654:	8a 2d       	mov	r24, r10
    5656:	9b 2d       	mov	r25, r11
    5658:	60 2f       	mov	r22, r16
    565a:	71 2f       	mov	r23, r17
    565c:	4c 2f       	mov	r20, r28
    565e:	5d 2f       	mov	r21, r29
    5660:	0e 94 9b 44 	call	0x8936	; 0x8936 <memcpy>
			writeTo += n;
    5664:	ca 0d       	add	r28, r10
    5666:	db 1d       	adc	r29, r11
			memcpy(writeTo, replace.buffer, replace.len);
    5668:	f7 01       	movw	r30, r14
    566a:	60 81       	ld	r22, Z
    566c:	71 81       	ldd	r23, Z+1	; 0x01
    566e:	44 81       	ldd	r20, Z+4	; 0x04
    5670:	55 81       	ldd	r21, Z+5	; 0x05
    5672:	8c 2f       	mov	r24, r28
    5674:	9d 2f       	mov	r25, r29
    5676:	0e 94 9b 44 	call	0x8936	; 0x8936 <memcpy>
			writeTo += replace.len;
    567a:	f7 01       	movw	r30, r14
    567c:	84 81       	ldd	r24, Z+4	; 0x04
    567e:	95 81       	ldd	r25, Z+5	; 0x05
    5680:	5e 01       	movw	r10, r28
    5682:	a8 0e       	add	r10, r24
    5684:	b9 1e       	adc	r11, r25
			readFrom = foundAt + find.len;
    5686:	f4 01       	movw	r30, r8
    5688:	84 81       	ldd	r24, Z+4	; 0x04
    568a:	95 81       	ldd	r25, Z+5	; 0x05
    568c:	86 01       	movw	r16, r12
    568e:	08 0f       	add	r16, r24
    5690:	19 1f       	adc	r17, r25
			len += diff;
    5692:	f3 01       	movw	r30, r6
    5694:	84 81       	ldd	r24, Z+4	; 0x04
    5696:	95 81       	ldd	r25, Z+5	; 0x05
    5698:	84 0d       	add	r24, r4
    569a:	95 1d       	adc	r25, r5
    569c:	95 83       	std	Z+5, r25	; 0x05
    569e:	84 83       	std	Z+4, r24	; 0x04
    56a0:	01 c0       	rjmp	.+2      	; 0x56a4 <_ZN6String7replaceERKS_S1_+0xec>
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    56a2:	58 01       	movw	r10, r16
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    56a4:	f4 01       	movw	r30, r8
    56a6:	60 81       	ld	r22, Z
    56a8:	71 81       	ldd	r23, Z+1	; 0x01
    56aa:	c8 01       	movw	r24, r16
    56ac:	0e 94 f9 44 	call	0x89f2	; 0x89f2 <strstr>
    56b0:	6c 01       	movw	r12, r24
    56b2:	00 97       	sbiw	r24, 0x00	; 0
    56b4:	61 f6       	brne	.-104    	; 0x564e <_ZN6String7replaceERKS_S1_+0x96>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    56b6:	c5 01       	movw	r24, r10
    56b8:	b8 01       	movw	r22, r16
    56ba:	0e 94 ca 44 	call	0x8994	; 0x8994 <strcpy>
    56be:	60 c0       	rjmp	.+192    	; 0x5780 <_ZN6String7replaceERKS_S1_+0x1c8>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    56c0:	8c 01       	movw	r16, r24
    56c2:	0c 0d       	add	r16, r12
    56c4:	1d 1d       	adc	r17, r13
			size += diff;
    56c6:	c4 0d       	add	r28, r4
    56c8:	d5 1d       	adc	r29, r5
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    56ca:	f4 01       	movw	r30, r8
    56cc:	60 81       	ld	r22, Z
    56ce:	71 81       	ldd	r23, Z+1	; 0x01
    56d0:	c8 01       	movw	r24, r16
    56d2:	0e 94 f9 44 	call	0x89f2	; 0x89f2 <strstr>
    56d6:	00 97       	sbiw	r24, 0x00	; 0
    56d8:	99 f7       	brne	.-26     	; 0x56c0 <_ZN6String7replaceERKS_S1_+0x108>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    56da:	ca 15       	cp	r28, r10
    56dc:	db 05       	cpc	r29, r11
    56de:	09 f4       	brne	.+2      	; 0x56e2 <_ZN6String7replaceERKS_S1_+0x12a>
    56e0:	4f c0       	rjmp	.+158    	; 0x5780 <_ZN6String7replaceERKS_S1_+0x1c8>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    56e2:	f3 01       	movw	r30, r6
    56e4:	82 81       	ldd	r24, Z+2	; 0x02
    56e6:	93 81       	ldd	r25, Z+3	; 0x03
    56e8:	8c 17       	cp	r24, r28
    56ea:	9d 07       	cpc	r25, r29
    56ec:	08 f0       	brcs	.+2      	; 0x56f0 <_ZN6String7replaceERKS_S1_+0x138>
    56ee:	42 c0       	rjmp	.+132    	; 0x5774 <_ZN6String7replaceERKS_S1_+0x1bc>
    56f0:	c3 01       	movw	r24, r6
    56f2:	be 01       	movw	r22, r28
    56f4:	0e 94 3b 24 	call	0x4876	; 0x4876 <_ZN6String12changeBufferEj>
    56f8:	88 23       	and	r24, r24
    56fa:	09 f4       	brne	.+2      	; 0x56fe <_ZN6String7replaceERKS_S1_+0x146>
    56fc:	41 c0       	rjmp	.+130    	; 0x5780 <_ZN6String7replaceERKS_S1_+0x1c8>
    56fe:	3a c0       	rjmp	.+116    	; 0x5774 <_ZN6String7replaceERKS_S1_+0x1bc>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    5700:	55 23       	and	r21, r21
    5702:	f4 f1       	brlt	.+124    	; 0x5780 <_ZN6String7replaceERKS_S1_+0x1c8>
    5704:	c3 01       	movw	r24, r6
    5706:	b4 01       	movw	r22, r8
    5708:	0e 94 0b 2a 	call	0x5416	; 0x5416 <_ZNK6String11lastIndexOfERKS_j>
    570c:	ec 01       	movw	r28, r24
    570e:	99 23       	and	r25, r25
    5710:	bc f1       	brlt	.+110    	; 0x5780 <_ZN6String7replaceERKS_S1_+0x1c8>
			readFrom = buffer + index + find.len;
    5712:	f3 01       	movw	r30, r6
    5714:	60 81       	ld	r22, Z
    5716:	71 81       	ldd	r23, Z+1	; 0x01
    5718:	f4 01       	movw	r30, r8
    571a:	84 81       	ldd	r24, Z+4	; 0x04
    571c:	95 81       	ldd	r25, Z+5	; 0x05
    571e:	8c 0f       	add	r24, r28
    5720:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    5722:	68 0f       	add	r22, r24
    5724:	79 1f       	adc	r23, r25
    5726:	f3 01       	movw	r30, r6
    5728:	44 81       	ldd	r20, Z+4	; 0x04
    572a:	55 81       	ldd	r21, Z+5	; 0x05
    572c:	48 1b       	sub	r20, r24
    572e:	59 0b       	sbc	r21, r25
    5730:	cb 01       	movw	r24, r22
    5732:	84 0d       	add	r24, r4
    5734:	95 1d       	adc	r25, r5
    5736:	0e 94 a4 44 	call	0x8948	; 0x8948 <memmove>
			len += diff;
    573a:	f3 01       	movw	r30, r6
    573c:	84 81       	ldd	r24, Z+4	; 0x04
    573e:	95 81       	ldd	r25, Z+5	; 0x05
    5740:	84 0d       	add	r24, r4
    5742:	95 1d       	adc	r25, r5
    5744:	95 83       	std	Z+5, r25	; 0x05
    5746:	84 83       	std	Z+4, r24	; 0x04
			buffer[len] = 0;
    5748:	20 81       	ld	r18, Z
    574a:	31 81       	ldd	r19, Z+1	; 0x01
    574c:	82 0f       	add	r24, r18
    574e:	93 1f       	adc	r25, r19
    5750:	fc 01       	movw	r30, r24
    5752:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    5754:	f3 01       	movw	r30, r6
    5756:	80 81       	ld	r24, Z
    5758:	91 81       	ldd	r25, Z+1	; 0x01
    575a:	8c 0f       	add	r24, r28
    575c:	9d 1f       	adc	r25, r29
    575e:	f7 01       	movw	r30, r14
    5760:	60 81       	ld	r22, Z
    5762:	71 81       	ldd	r23, Z+1	; 0x01
    5764:	44 81       	ldd	r20, Z+4	; 0x04
    5766:	55 81       	ldd	r21, Z+5	; 0x05
    5768:	0e 94 9b 44 	call	0x8936	; 0x8936 <memcpy>
			index--;
    576c:	ae 01       	movw	r20, r28
    576e:	41 50       	subi	r20, 0x01	; 1
    5770:	50 40       	sbci	r21, 0x00	; 0
    5772:	c6 cf       	rjmp	.-116    	; 0x5700 <_ZN6String7replaceERKS_S1_+0x148>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    5774:	f3 01       	movw	r30, r6
    5776:	44 81       	ldd	r20, Z+4	; 0x04
    5778:	55 81       	ldd	r21, Z+5	; 0x05
    577a:	41 50       	subi	r20, 0x01	; 1
    577c:	50 40       	sbci	r21, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    577e:	c0 cf       	rjmp	.-128    	; 0x5700 <_ZN6String7replaceERKS_S1_+0x148>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    5780:	df 91       	pop	r29
    5782:	cf 91       	pop	r28
    5784:	1f 91       	pop	r17
    5786:	0f 91       	pop	r16
    5788:	ff 90       	pop	r15
    578a:	ef 90       	pop	r14
    578c:	df 90       	pop	r13
    578e:	cf 90       	pop	r12
    5790:	bf 90       	pop	r11
    5792:	af 90       	pop	r10
    5794:	9f 90       	pop	r9
    5796:	8f 90       	pop	r8
    5798:	7f 90       	pop	r7
    579a:	6f 90       	pop	r6
    579c:	5f 90       	pop	r5
    579e:	4f 90       	pop	r4
    57a0:	08 95       	ret

000057a2 <_ZN6String11toLowerCaseEv>:

void String::toLowerCase(void)
{
    57a2:	0f 93       	push	r16
    57a4:	1f 93       	push	r17
    57a6:	cf 93       	push	r28
    57a8:	df 93       	push	r29
	if (!buffer) return;
    57aa:	fc 01       	movw	r30, r24
    57ac:	c0 81       	ld	r28, Z
    57ae:	d1 81       	ldd	r29, Z+1	; 0x01
    57b0:	20 97       	sbiw	r28, 0x00	; 0
    57b2:	79 f0       	breq	.+30     	; 0x57d2 <_ZN6String11toLowerCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
    57b4:	88 81       	ld	r24, Y
    57b6:	88 23       	and	r24, r24
    57b8:	61 f0       	breq	.+24     	; 0x57d2 <_ZN6String11toLowerCaseEv+0x30>
			index--;
		}
	}
}

void String::toLowerCase(void)
    57ba:	8e 01       	movw	r16, r28
    57bc:	0f 5f       	subi	r16, 0xFF	; 255
    57be:	1f 4f       	sbci	r17, 0xFF	; 255
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	0e 94 7e 44 	call	0x88fc	; 0x88fc <tolower>
    57c6:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    57c8:	f8 01       	movw	r30, r16
    57ca:	81 91       	ld	r24, Z+
    57cc:	8f 01       	movw	r16, r30
    57ce:	88 23       	and	r24, r24
    57d0:	b9 f7       	brne	.-18     	; 0x57c0 <_ZN6String11toLowerCaseEv+0x1e>
		*p = tolower(*p);
	}
}
    57d2:	df 91       	pop	r29
    57d4:	cf 91       	pop	r28
    57d6:	1f 91       	pop	r17
    57d8:	0f 91       	pop	r16
    57da:	08 95       	ret

000057dc <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    57dc:	0f 93       	push	r16
    57de:	1f 93       	push	r17
    57e0:	cf 93       	push	r28
    57e2:	df 93       	push	r29
	if (!buffer) return;
    57e4:	fc 01       	movw	r30, r24
    57e6:	c0 81       	ld	r28, Z
    57e8:	d1 81       	ldd	r29, Z+1	; 0x01
    57ea:	20 97       	sbiw	r28, 0x00	; 0
    57ec:	79 f0       	breq	.+30     	; 0x580c <_ZN6String11toUpperCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
    57ee:	88 81       	ld	r24, Y
    57f0:	88 23       	and	r24, r24
    57f2:	61 f0       	breq	.+24     	; 0x580c <_ZN6String11toUpperCaseEv+0x30>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    57f4:	8e 01       	movw	r16, r28
    57f6:	0f 5f       	subi	r16, 0xFF	; 255
    57f8:	1f 4f       	sbci	r17, 0xFF	; 255
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	0e 94 86 44 	call	0x890c	; 0x890c <toupper>
    5800:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    5802:	f8 01       	movw	r30, r16
    5804:	81 91       	ld	r24, Z+
    5806:	8f 01       	movw	r16, r30
    5808:	88 23       	and	r24, r24
    580a:	b9 f7       	brne	.-18     	; 0x57fa <_ZN6String11toUpperCaseEv+0x1e>
		*p = toupper(*p);
	}
}
    580c:	df 91       	pop	r29
    580e:	cf 91       	pop	r28
    5810:	1f 91       	pop	r17
    5812:	0f 91       	pop	r16
    5814:	08 95       	ret

00005816 <_ZN6String4trimEv>:

void String::trim(void)
{
    5816:	af 92       	push	r10
    5818:	bf 92       	push	r11
    581a:	cf 92       	push	r12
    581c:	df 92       	push	r13
    581e:	ef 92       	push	r14
    5820:	ff 92       	push	r15
    5822:	0f 93       	push	r16
    5824:	1f 93       	push	r17
    5826:	cf 93       	push	r28
    5828:	df 93       	push	r29
    582a:	7c 01       	movw	r14, r24
	if (!buffer || len == 0) return;
    582c:	dc 01       	movw	r26, r24
    582e:	cd 90       	ld	r12, X+
    5830:	dc 90       	ld	r13, X
    5832:	11 97       	sbiw	r26, 0x01	; 1
    5834:	c1 14       	cp	r12, r1
    5836:	d1 04       	cpc	r13, r1
    5838:	f1 f1       	breq	.+124    	; 0x58b6 <_ZN6String4trimEv+0xa0>
    583a:	14 96       	adiw	r26, 0x04	; 4
    583c:	ad 90       	ld	r10, X+
    583e:	bc 90       	ld	r11, X
    5840:	15 97       	sbiw	r26, 0x05	; 5
    5842:	a1 14       	cp	r10, r1
    5844:	b1 04       	cpc	r11, r1
    5846:	b9 f1       	breq	.+110    	; 0x58b6 <_ZN6String4trimEv+0xa0>
    5848:	e6 01       	movw	r28, r12
    584a:	8e 01       	movw	r16, r28
    584c:	21 96       	adiw	r28, 0x01	; 1
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    584e:	f8 01       	movw	r30, r16
    5850:	80 81       	ld	r24, Z
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	0e 94 76 44 	call	0x88ec	; 0x88ec <isspace>
    5858:	00 97       	sbiw	r24, 0x00	; 0
    585a:	b9 f7       	brne	.-18     	; 0x584a <_ZN6String4trimEv+0x34>
	char *end = buffer + len - 1;
    585c:	e5 01       	movw	r28, r10
    585e:	21 97       	sbiw	r28, 0x01	; 1
    5860:	cc 0d       	add	r28, r12
    5862:	dd 1d       	adc	r29, r13
	while (isspace(*end) && end >= begin) end--;
    5864:	88 81       	ld	r24, Y
    5866:	90 e0       	ldi	r25, 0x00	; 0
    5868:	0e 94 76 44 	call	0x88ec	; 0x88ec <isspace>
    586c:	00 97       	sbiw	r24, 0x00	; 0
    586e:	c9 f0       	breq	.+50     	; 0x58a2 <_ZN6String4trimEv+0x8c>
    5870:	c0 17       	cp	r28, r16
    5872:	d1 07       	cpc	r29, r17
    5874:	b0 f0       	brcs	.+44     	; 0x58a2 <_ZN6String4trimEv+0x8c>
    5876:	21 97       	sbiw	r28, 0x01	; 1
    5878:	f5 cf       	rjmp	.-22     	; 0x5864 <_ZN6String4trimEv+0x4e>
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
    587a:	8c 2d       	mov	r24, r12
    587c:	9d 2d       	mov	r25, r13
    587e:	60 2f       	mov	r22, r16
    5880:	71 2f       	mov	r23, r17
    5882:	4c 2f       	mov	r20, r28
    5884:	5d 2f       	mov	r21, r29
    5886:	0e 94 9b 44 	call	0x8936	; 0x8936 <memcpy>
	buffer[len] = 0;
    588a:	d7 01       	movw	r26, r14
    588c:	ed 91       	ld	r30, X+
    588e:	fc 91       	ld	r31, X
    5890:	11 97       	sbiw	r26, 0x01	; 1
    5892:	14 96       	adiw	r26, 0x04	; 4
    5894:	8d 91       	ld	r24, X+
    5896:	9c 91       	ld	r25, X
    5898:	15 97       	sbiw	r26, 0x05	; 5
    589a:	e8 0f       	add	r30, r24
    589c:	f9 1f       	adc	r31, r25
    589e:	10 82       	st	Z, r1
    58a0:	0a c0       	rjmp	.+20     	; 0x58b6 <_ZN6String4trimEv+0xa0>
	if (!buffer || len == 0) return;
	char *begin = buffer;
	while (isspace(*begin)) begin++;
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
    58a2:	21 96       	adiw	r28, 0x01	; 1
    58a4:	c0 1b       	sub	r28, r16
    58a6:	d1 0b       	sbc	r29, r17
    58a8:	f7 01       	movw	r30, r14
    58aa:	d5 83       	std	Z+5, r29	; 0x05
    58ac:	c4 83       	std	Z+4, r28	; 0x04
	if (begin > buffer) memcpy(buffer, begin, len);
    58ae:	c0 16       	cp	r12, r16
    58b0:	d1 06       	cpc	r13, r17
    58b2:	58 f7       	brcc	.-42     	; 0x588a <_ZN6String4trimEv+0x74>
    58b4:	e2 cf       	rjmp	.-60     	; 0x587a <_ZN6String4trimEv+0x64>
	buffer[len] = 0;
}
    58b6:	df 91       	pop	r29
    58b8:	cf 91       	pop	r28
    58ba:	1f 91       	pop	r17
    58bc:	0f 91       	pop	r16
    58be:	ff 90       	pop	r15
    58c0:	ef 90       	pop	r14
    58c2:	df 90       	pop	r13
    58c4:	cf 90       	pop	r12
    58c6:	bf 90       	pop	r11
    58c8:	af 90       	pop	r10
    58ca:	08 95       	ret

000058cc <_ZNK6String5toIntEv>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
    58cc:	0f 93       	push	r16
    58ce:	1f 93       	push	r17
	if (buffer) return atol(buffer);
    58d0:	fc 01       	movw	r30, r24
    58d2:	80 81       	ld	r24, Z
    58d4:	91 81       	ldd	r25, Z+1	; 0x01
    58d6:	00 97       	sbiw	r24, 0x00	; 0
    58d8:	29 f0       	breq	.+10     	; 0x58e4 <_ZNK6String5toIntEv+0x18>
    58da:	0e 94 4f 44 	call	0x889e	; 0x889e <atol>
    58de:	8b 01       	movw	r16, r22
    58e0:	9c 01       	movw	r18, r24
    58e2:	03 c0       	rjmp	.+6      	; 0x58ea <_ZNK6String5toIntEv+0x1e>
	return 0;
    58e4:	00 e0       	ldi	r16, 0x00	; 0
    58e6:	10 e0       	ldi	r17, 0x00	; 0
    58e8:	98 01       	movw	r18, r16
}
    58ea:	60 2f       	mov	r22, r16
    58ec:	71 2f       	mov	r23, r17
    58ee:	82 2f       	mov	r24, r18
    58f0:	93 2f       	mov	r25, r19
    58f2:	1f 91       	pop	r17
    58f4:	0f 91       	pop	r16
    58f6:	08 95       	ret

000058f8 <_ZN9DhcpClass16reset_DHCP_leaseEv>:
    return request_DHCP_lease();
}

void DhcpClass::reset_DHCP_lease(){
    // zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
    memset(_dhcpLocalIp, 0, 20);
    58f8:	0e 96       	adiw	r24, 0x0e	; 14
    58fa:	e8 2f       	mov	r30, r24
    58fc:	f9 2f       	mov	r31, r25
    58fe:	84 e1       	ldi	r24, 0x14	; 20
    5900:	df 01       	movw	r26, r30
    5902:	1d 92       	st	X+, r1
    5904:	8a 95       	dec	r24
    5906:	e9 f7       	brne	.-6      	; 0x5902 <_ZN9DhcpClass16reset_DHCP_leaseEv+0xa>
}
    5908:	08 95       	ret

0000590a <_ZN9DhcpClass12presend_DHCPEv>:
    return result;
}

void DhcpClass::presend_DHCP()
{
}
    590a:	08 95       	ret

0000590c <_ZN9DhcpClass17parseDHCPResponseEmRm>:

    _dhcpUdpSocket.endPacket();
}

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
    590c:	2f 92       	push	r2
    590e:	3f 92       	push	r3
    5910:	4f 92       	push	r4
    5912:	5f 92       	push	r5
    5914:	6f 92       	push	r6
    5916:	7f 92       	push	r7
    5918:	8f 92       	push	r8
    591a:	9f 92       	push	r9
    591c:	af 92       	push	r10
    591e:	bf 92       	push	r11
    5920:	cf 92       	push	r12
    5922:	df 92       	push	r13
    5924:	ef 92       	push	r14
    5926:	ff 92       	push	r15
    5928:	0f 93       	push	r16
    592a:	1f 93       	push	r17
    592c:	cf 93       	push	r28
    592e:	df 93       	push	r29
    5930:	cd b7       	in	r28, 0x3d	; 61
    5932:	de b7       	in	r29, 0x3e	; 62
    5934:	e4 97       	sbiw	r28, 0x34	; 52
    5936:	0f b6       	in	r0, 0x3f	; 63
    5938:	f8 94       	cli
    593a:	de bf       	out	0x3e, r29	; 62
    593c:	0f be       	out	0x3f, r0	; 63
    593e:	cd bf       	out	0x3d, r28	; 61
    5940:	2c 01       	movw	r4, r24
    5942:	6a 01       	movw	r12, r20
    5944:	7b 01       	movw	r14, r22
    5946:	19 01       	movw	r2, r18
    uint8_t type = 0;
    uint8_t opt_len = 0;
     
    unsigned long startTime = millis();
    5948:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    594c:	4b 01       	movw	r8, r22
    594e:	5c 01       	movw	r10, r24

    while(_dhcpUdpSocket.parsePacket() <= 0)
    5950:	82 01       	movw	r16, r4
    5952:	09 5b       	subi	r16, 0xB9	; 185
    5954:	1f 4f       	sbci	r17, 0xFF	; 255
    5956:	14 c0       	rjmp	.+40     	; 0x5980 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x74>
    {
        if((millis() - startTime) > responseTimeout)
    5958:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    595c:	dc 01       	movw	r26, r24
    595e:	cb 01       	movw	r24, r22
    5960:	88 19       	sub	r24, r8
    5962:	99 09       	sbc	r25, r9
    5964:	aa 09       	sbc	r26, r10
    5966:	bb 09       	sbc	r27, r11
    5968:	c8 16       	cp	r12, r24
    596a:	d9 06       	cpc	r13, r25
    596c:	ea 06       	cpc	r14, r26
    596e:	fb 06       	cpc	r15, r27
    5970:	08 f4       	brcc	.+2      	; 0x5974 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x68>
    5972:	40 c2       	rjmp	.+1152   	; 0x5df4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4e8>
        {
            return 255;
        }
        delay(50);
    5974:	62 e3       	ldi	r22, 0x32	; 50
    5976:	70 e0       	ldi	r23, 0x00	; 0
    5978:	80 e0       	ldi	r24, 0x00	; 0
    597a:	90 e0       	ldi	r25, 0x00	; 0
    597c:	0e 94 ca 21 	call	0x4394	; 0x4394 <delay>
    uint8_t type = 0;
    uint8_t opt_len = 0;
     
    unsigned long startTime = millis();

    while(_dhcpUdpSocket.parsePacket() <= 0)
    5980:	70 2e       	mov	r7, r16
    5982:	61 2e       	mov	r6, r17
    5984:	c8 01       	movw	r24, r16
    5986:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_ZN11EthernetUDP11parsePacketEv>
    598a:	18 16       	cp	r1, r24
    598c:	19 06       	cpc	r1, r25
    598e:	24 f7       	brge	.-56     	; 0x5958 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c>
        }
        delay(50);
    }
    // start reading in the packet
    RIP_MSG_FIXED fixedMsg;
    _dhcpUdpSocket.read((uint8_t*)&fixedMsg, sizeof(RIP_MSG_FIXED));
    5990:	80 2f       	mov	r24, r16
    5992:	91 2f       	mov	r25, r17
    5994:	be 01       	movw	r22, r28
    5996:	69 5f       	subi	r22, 0xF9	; 249
    5998:	7f 4f       	sbci	r23, 0xFF	; 255
    599a:	42 e2       	ldi	r20, 0x22	; 34
    599c:	50 e0       	ldi	r21, 0x00	; 0
    599e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
  
    if(fixedMsg.op == DHCP_BOOTREPLY && _dhcpUdpSocket.remotePort() == DHCP_SERVER_PORT)
    59a2:	8f 81       	ldd	r24, Y+7	; 0x07
    59a4:	82 30       	cpi	r24, 0x02	; 2
    59a6:	09 f0       	breq	.+2      	; 0x59aa <_ZN9DhcpClass17parseDHCPResponseEmRm+0x9e>
    59a8:	1d c2       	rjmp	.+1082   	; 0x5de4 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4d8>
    59aa:	f2 01       	movw	r30, r4
    59ac:	e9 5b       	subi	r30, 0xB9	; 185
    59ae:	ff 4f       	sbci	r31, 0xFF	; 255
    59b0:	85 89       	ldd	r24, Z+21	; 0x15
    59b2:	96 89       	ldd	r25, Z+22	; 0x16
    59b4:	83 34       	cpi	r24, 0x43	; 67
    59b6:	91 05       	cpc	r25, r1
    59b8:	09 f0       	breq	.+2      	; 0x59bc <_ZN9DhcpClass17parseDHCPResponseEmRm+0xb0>
    59ba:	16 c2       	rjmp	.+1068   	; 0x5de8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4dc>
    {
        transactionId = ntohl(fixedMsg.xid);
    59bc:	0b 85       	ldd	r16, Y+11	; 0x0b
    59be:	1c 85       	ldd	r17, Y+12	; 0x0c
    59c0:	2d 85       	ldd	r18, Y+13	; 0x0d
    59c2:	3e 85       	ldd	r19, Y+14	; 0x0e
    59c4:	43 2f       	mov	r20, r19
    59c6:	55 27       	eor	r21, r21
    59c8:	66 27       	eor	r22, r22
    59ca:	77 27       	eor	r23, r23
    59cc:	b0 2f       	mov	r27, r16
    59ce:	aa 27       	eor	r26, r26
    59d0:	99 27       	eor	r25, r25
    59d2:	88 27       	eor	r24, r24
    59d4:	48 2b       	or	r20, r24
    59d6:	59 2b       	or	r21, r25
    59d8:	6a 2b       	or	r22, r26
    59da:	7b 2b       	or	r23, r27
    59dc:	b2 2f       	mov	r27, r18
    59de:	a1 2f       	mov	r26, r17
    59e0:	90 2f       	mov	r25, r16
    59e2:	88 27       	eor	r24, r24
    59e4:	80 70       	andi	r24, 0x00	; 0
    59e6:	90 70       	andi	r25, 0x00	; 0
    59e8:	b0 70       	andi	r27, 0x00	; 0
    59ea:	48 2b       	or	r20, r24
    59ec:	59 2b       	or	r21, r25
    59ee:	6a 2b       	or	r22, r26
    59f0:	7b 2b       	or	r23, r27
    59f2:	bb 27       	eor	r27, r27
    59f4:	a3 2f       	mov	r26, r19
    59f6:	92 2f       	mov	r25, r18
    59f8:	81 2f       	mov	r24, r17
    59fa:	80 70       	andi	r24, 0x00	; 0
    59fc:	a0 70       	andi	r26, 0x00	; 0
    59fe:	b0 70       	andi	r27, 0x00	; 0
    5a00:	6a 01       	movw	r12, r20
    5a02:	7b 01       	movw	r14, r22
    5a04:	c8 2a       	or	r12, r24
    5a06:	d9 2a       	or	r13, r25
    5a08:	ea 2a       	or	r14, r26
    5a0a:	fb 2a       	or	r15, r27
    5a0c:	f1 01       	movw	r30, r2
    5a0e:	c0 82       	st	Z, r12
    5a10:	d1 82       	std	Z+1, r13	; 0x01
    5a12:	e2 82       	std	Z+2, r14	; 0x02
    5a14:	f3 82       	std	Z+3, r15	; 0x03
        if(memcmp(fixedMsg.chaddr, _dhcpMacAddr, 6) != 0 || (transactionId < _dhcpInitialTransactionId) || (transactionId > _dhcpTransactionId))
    5a16:	b2 01       	movw	r22, r4
    5a18:	68 5f       	subi	r22, 0xF8	; 248
    5a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a1c:	ce 01       	movw	r24, r28
    5a1e:	83 96       	adiw	r24, 0x23	; 35
    5a20:	46 e0       	ldi	r20, 0x06	; 6
    5a22:	50 e0       	ldi	r21, 0x00	; 0
    5a24:	0e 94 8e 44 	call	0x891c	; 0x891c <memcmp>
    5a28:	28 2f       	mov	r18, r24
    5a2a:	39 2f       	mov	r19, r25
    5a2c:	21 15       	cp	r18, r1
    5a2e:	31 05       	cpc	r19, r1
    5a30:	99 f4       	brne	.+38     	; 0x5a58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x14c>
    5a32:	f2 01       	movw	r30, r4
    5a34:	80 81       	ld	r24, Z
    5a36:	91 81       	ldd	r25, Z+1	; 0x01
    5a38:	a2 81       	ldd	r26, Z+2	; 0x02
    5a3a:	b3 81       	ldd	r27, Z+3	; 0x03
    5a3c:	c8 16       	cp	r12, r24
    5a3e:	d9 06       	cpc	r13, r25
    5a40:	ea 06       	cpc	r14, r26
    5a42:	fb 06       	cpc	r15, r27
    5a44:	48 f0       	brcs	.+18     	; 0x5a58 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x14c>
    5a46:	84 81       	ldd	r24, Z+4	; 0x04
    5a48:	95 81       	ldd	r25, Z+5	; 0x05
    5a4a:	a6 81       	ldd	r26, Z+6	; 0x06
    5a4c:	b7 81       	ldd	r27, Z+7	; 0x07
    5a4e:	8c 15       	cp	r24, r12
    5a50:	9d 05       	cpc	r25, r13
    5a52:	ae 05       	cpc	r26, r14
    5a54:	bf 05       	cpc	r27, r15
    5a56:	30 f4       	brcc	.+12     	; 0x5a64 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x158>
        {
            // Need to read the rest of the packet here regardless
            _dhcpUdpSocket.flush();
    5a58:	87 2d       	mov	r24, r7
    5a5a:	96 2d       	mov	r25, r6
    5a5c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN11EthernetUDP5flushEv>
            return 0;
    5a60:	88 24       	eor	r8, r8
    5a62:	ca c1       	rjmp	.+916    	; 0x5df8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ec>
        }

        memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);
    5a64:	8f 89       	ldd	r24, Y+23	; 0x17
    5a66:	98 8d       	ldd	r25, Y+24	; 0x18
    5a68:	a9 8d       	ldd	r26, Y+25	; 0x19
    5a6a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5a6c:	f2 01       	movw	r30, r4
    5a6e:	86 87       	std	Z+14, r24	; 0x0e
    5a70:	97 87       	std	Z+15, r25	; 0x0f
    5a72:	a0 8b       	std	Z+16, r26	; 0x10
    5a74:	b1 8b       	std	Z+17, r27	; 0x11
    5a76:	0e ec       	ldi	r16, 0xCE	; 206
    5a78:	10 e0       	ldi	r17, 0x00	; 0
        // Skip to the option part
        // Doing this a byte at a time so we don't have to put a big buffer
        // on the stack (as we don't have lots of memory lying around)
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
        {
            _dhcpUdpSocket.read(); // we don't care about the returned byte
    5a7a:	87 2d       	mov	r24, r7
    5a7c:	96 2d       	mov	r25, r6
    5a7e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
    5a82:	01 50       	subi	r16, 0x01	; 1
    5a84:	10 40       	sbci	r17, 0x00	; 0
        memcpy(_dhcpLocalIp, fixedMsg.yiaddr, 4);

        // Skip to the option part
        // Doing this a byte at a time so we don't have to put a big buffer
        // on the stack (as we don't have lots of memory lying around)
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
    5a86:	c9 f7       	brne	.-14     	; 0x5a7a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x16e>
    5a88:	88 24       	eor	r8, r8
                    _dhcpT2 = ntohl(_dhcpT2);
                    break;

                case dhcpIPaddrLeaseTime :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
    5a8a:	0f 2e       	mov	r0, r31
    5a8c:	f2 e2       	ldi	r31, 0x22	; 34
    5a8e:	ef 2e       	mov	r14, r31
    5a90:	ff 24       	eor	r15, r15
    5a92:	f0 2d       	mov	r31, r0
    5a94:	e4 0c       	add	r14, r4
    5a96:	f5 1c       	adc	r15, r5
                    }
                    break;

                case dhcpT1value : 
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
    5a98:	0f 2e       	mov	r0, r31
    5a9a:	f6 e2       	ldi	r31, 0x26	; 38
    5a9c:	af 2e       	mov	r10, r31
    5a9e:	bb 24       	eor	r11, r11
    5aa0:	f0 2d       	mov	r31, r0
    5aa2:	a4 0c       	add	r10, r4
    5aa4:	b5 1c       	adc	r11, r5
                    _dhcpT1 = ntohl(_dhcpT1);
                    break;

                case dhcpT2value : 
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
    5aa6:	c2 01       	movw	r24, r4
    5aa8:	8a 96       	adiw	r24, 0x2a	; 42
    5aaa:	9a a7       	lds	r25, 0x7a
    5aac:	89 a7       	lds	r24, 0x79
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
                    {
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
    5aae:	f2 01       	movw	r30, r4
    5ab0:	7a 96       	adiw	r30, 0x1a	; 26
    5ab2:	fa ab       	sts	0x5a, r31
    5ab4:	e9 ab       	sts	0x59, r30

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    5ab6:	c2 01       	movw	r24, r4
    5ab8:	88 5a       	subi	r24, 0xA8	; 168
    5aba:	9f 4f       	sbci	r25, 0xFF	; 255
    5abc:	9c ab       	sts	0x5c, r25
    5abe:	8b ab       	sts	0x5b, r24
                    type = _dhcpUdpSocket.read();
                    break;
                
                case subnetMask :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpSubnetMask, 4);
    5ac0:	f2 01       	movw	r30, r4
    5ac2:	72 96       	adiw	r30, 0x12	; 18
    5ac4:	fc a7       	lds	r31, 0x7c
    5ac6:	eb a7       	lds	r30, 0x7b
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
    5ac8:	c2 01       	movw	r24, r4
    5aca:	46 96       	adiw	r24, 0x16	; 22
    5acc:	9e a7       	lds	r25, 0x7e
    5ace:	8d a7       	lds	r24, 0x7d
                    for (int i = 0; i < opt_len-4; i++)
    5ad0:	22 24       	eor	r2, r2
    5ad2:	33 24       	eor	r3, r3
                    }
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
    5ad4:	f2 01       	movw	r30, r4
    5ad6:	7e 96       	adiw	r30, 0x1e	; 30
    5ad8:	f8 ab       	sts	0x58, r31
    5ada:	ef a7       	lds	r30, 0x7f
    5adc:	67 01       	movw	r12, r14
    5ade:	79 c1       	rjmp	.+754    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
            _dhcpUdpSocket.read(); // we don't care about the returned byte
        }

        while (_dhcpUdpSocket.available() > 0) 
        {
            switch (_dhcpUdpSocket.read()) 
    5ae0:	87 2d       	mov	r24, r7
    5ae2:	96 2d       	mov	r25, r6
    5ae4:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
    5ae8:	83 33       	cpi	r24, 0x33	; 51
    5aea:	91 05       	cpc	r25, r1
    5aec:	09 f4       	brne	.+2      	; 0x5af0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1e4>
    5aee:	29 c1       	rjmp	.+594    	; 0x5d42 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x436>
    5af0:	84 33       	cpi	r24, 0x34	; 52
    5af2:	91 05       	cpc	r25, r1
    5af4:	94 f4       	brge	.+36     	; 0x5b1a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x20e>
    5af6:	81 30       	cpi	r24, 0x01	; 1
    5af8:	91 05       	cpc	r25, r1
    5afa:	89 f1       	breq	.+98     	; 0x5b5e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x252>
    5afc:	82 30       	cpi	r24, 0x02	; 2
    5afe:	91 05       	cpc	r25, r1
    5b00:	24 f4       	brge	.+8      	; 0x5b0a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1fe>
    5b02:	00 97       	sbiw	r24, 0x00	; 0
    5b04:	09 f4       	brne	.+2      	; 0x5b08 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1fc>
    5b06:	65 c1       	rjmp	.+714    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
    5b08:	57 c1       	rjmp	.+686    	; 0x5db8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    5b0a:	83 30       	cpi	r24, 0x03	; 3
    5b0c:	91 05       	cpc	r25, r1
    5b0e:	a1 f1       	breq	.+104    	; 0x5b78 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x26c>
    5b10:	86 30       	cpi	r24, 0x06	; 6
    5b12:	91 05       	cpc	r25, r1
    5b14:	09 f0       	breq	.+2      	; 0x5b18 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x20c>
    5b16:	50 c1       	rjmp	.+672    	; 0x5db8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    5b18:	4f c0       	rjmp	.+158    	; 0x5bb8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2ac>
    5b1a:	8a 33       	cpi	r24, 0x3A	; 58
    5b1c:	91 05       	cpc	r25, r1
    5b1e:	09 f4       	brne	.+2      	; 0x5b22 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x216>
    5b20:	a1 c0       	rjmp	.+322    	; 0x5c64 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x358>
    5b22:	8b 33       	cpi	r24, 0x3B	; 59
    5b24:	91 05       	cpc	r25, r1
    5b26:	44 f4       	brge	.+16     	; 0x5b38 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x22c>
    5b28:	85 33       	cpi	r24, 0x35	; 53
    5b2a:	91 05       	cpc	r25, r1
    5b2c:	71 f0       	breq	.+28     	; 0x5b4a <_ZN9DhcpClass17parseDHCPResponseEmRm+0x23e>
    5b2e:	86 33       	cpi	r24, 0x36	; 54
    5b30:	91 05       	cpc	r25, r1
    5b32:	09 f0       	breq	.+2      	; 0x5b36 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x22a>
    5b34:	41 c1       	rjmp	.+642    	; 0x5db8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    5b36:	60 c0       	rjmp	.+192    	; 0x5bf8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2ec>
    5b38:	8b 33       	cpi	r24, 0x3B	; 59
    5b3a:	91 05       	cpc	r25, r1
    5b3c:	09 f4       	brne	.+2      	; 0x5b40 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x234>
    5b3e:	c9 c0       	rjmp	.+402    	; 0x5cd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x3c6>
    5b40:	8f 3f       	cpi	r24, 0xFF	; 255
    5b42:	91 05       	cpc	r25, r1
    5b44:	09 f0       	breq	.+2      	; 0x5b48 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x23c>
    5b46:	38 c1       	rjmp	.+624    	; 0x5db8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ac>
    5b48:	44 c1       	rjmp	.+648    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                    
                case padOption :
                    break;
                
                case dhcpMessageType :
                    opt_len = _dhcpUdpSocket.read();
    5b4a:	87 2d       	mov	r24, r7
    5b4c:	96 2d       	mov	r25, r6
    5b4e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
                    type = _dhcpUdpSocket.read();
    5b52:	87 2d       	mov	r24, r7
    5b54:	96 2d       	mov	r25, r6
    5b56:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
    5b5a:	88 2e       	mov	r8, r24
                    break;
    5b5c:	3a c1       	rjmp	.+628    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                
                case subnetMask :
                    opt_len = _dhcpUdpSocket.read();
    5b5e:	87 2d       	mov	r24, r7
    5b60:	96 2d       	mov	r25, r6
    5b62:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read(_dhcpSubnetMask, 4);
    5b66:	87 2d       	mov	r24, r7
    5b68:	96 2d       	mov	r25, r6
    5b6a:	6b a5       	lds	r22, 0x6b
    5b6c:	7c a5       	lds	r23, 0x6c
    5b6e:	44 e0       	ldi	r20, 0x04	; 4
    5b70:	50 e0       	ldi	r21, 0x00	; 0
    5b72:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
                    break;
    5b76:	2d c1       	rjmp	.+602    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
    5b78:	87 2d       	mov	r24, r7
    5b7a:	96 2d       	mov	r25, r6
    5b7c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
    5b80:	08 2f       	mov	r16, r24
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
    5b82:	87 2d       	mov	r24, r7
    5b84:	96 2d       	mov	r25, r6
    5b86:	6d a5       	lds	r22, 0x6d
    5b88:	7e a5       	lds	r23, 0x6e
    5b8a:	44 e0       	ldi	r20, 0x04	; 4
    5b8c:	50 e0       	ldi	r21, 0x00	; 0
    5b8e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
                    for (int i = 0; i < opt_len-4; i++)
    5b92:	10 e0       	ldi	r17, 0x00	; 0
    5b94:	04 50       	subi	r16, 0x04	; 4
    5b96:	10 40       	sbci	r17, 0x00	; 0
    5b98:	10 16       	cp	r1, r16
    5b9a:	11 06       	cpc	r1, r17
    5b9c:	0c f0       	brlt	.+2      	; 0x5ba0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x294>
    5b9e:	19 c1       	rjmp	.+562    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
    5ba0:	71 01       	movw	r14, r2
                    {
                        _dhcpUdpSocket.read();
    5ba2:	87 2d       	mov	r24, r7
    5ba4:	96 2d       	mov	r25, r6
    5ba6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
                    break;
                
                case routersOnSubnet :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpGatewayIp, 4);
                    for (int i = 0; i < opt_len-4; i++)
    5baa:	08 94       	sec
    5bac:	e1 1c       	adc	r14, r1
    5bae:	f1 1c       	adc	r15, r1
    5bb0:	e0 16       	cp	r14, r16
    5bb2:	f1 06       	cpc	r15, r17
    5bb4:	b4 f3       	brlt	.-20     	; 0x5ba2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x296>
    5bb6:	0d c1       	rjmp	.+538    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        _dhcpUdpSocket.read();
                    }
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
    5bb8:	87 2d       	mov	r24, r7
    5bba:	96 2d       	mov	r25, r6
    5bbc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
    5bc0:	08 2f       	mov	r16, r24
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
    5bc2:	87 2d       	mov	r24, r7
    5bc4:	96 2d       	mov	r25, r6
    5bc6:	6f a5       	lds	r22, 0x6f
    5bc8:	78 a9       	sts	0x48, r23
    5bca:	44 e0       	ldi	r20, 0x04	; 4
    5bcc:	50 e0       	ldi	r21, 0x00	; 0
    5bce:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
                    for (int i = 0; i < opt_len-4; i++)
    5bd2:	10 e0       	ldi	r17, 0x00	; 0
    5bd4:	04 50       	subi	r16, 0x04	; 4
    5bd6:	10 40       	sbci	r17, 0x00	; 0
    5bd8:	10 16       	cp	r1, r16
    5bda:	11 06       	cpc	r1, r17
    5bdc:	0c f0       	brlt	.+2      	; 0x5be0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2d4>
    5bde:	f9 c0       	rjmp	.+498    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
    5be0:	71 01       	movw	r14, r2
                    {
                        _dhcpUdpSocket.read();
    5be2:	87 2d       	mov	r24, r7
    5be4:	96 2d       	mov	r25, r6
    5be6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
                    break;
                
                case dns :
                    opt_len = _dhcpUdpSocket.read();
                    _dhcpUdpSocket.read(_dhcpDnsServerIp, 4);
                    for (int i = 0; i < opt_len-4; i++)
    5bea:	08 94       	sec
    5bec:	e1 1c       	adc	r14, r1
    5bee:	f1 1c       	adc	r15, r1
    5bf0:	e0 16       	cp	r14, r16
    5bf2:	f1 06       	cpc	r15, r17
    5bf4:	b4 f3       	brlt	.-20     	; 0x5be2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x2d6>
    5bf6:	ed c0       	rjmp	.+474    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        _dhcpUdpSocket.read();
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
    5bf8:	87 2d       	mov	r24, r7
    5bfa:	96 2d       	mov	r25, r6
    5bfc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
    5c00:	18 2f       	mov	r17, r24
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
    5c02:	f2 01       	movw	r30, r4
    5c04:	82 8d       	ldd	r24, Z+26	; 0x1a
    5c06:	93 8d       	ldd	r25, Z+27	; 0x1b
    5c08:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5c0a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    5c0c:	00 97       	sbiw	r24, 0x00	; 0
    5c0e:	a1 05       	cpc	r26, r1
    5c10:	b1 05       	cpc	r27, r1
    5c12:	a9 f0       	breq	.+42     	; 0x5c3e <_ZN9DhcpClass17parseDHCPResponseEmRm+0x332>
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
    5c14:	ce 01       	movw	r24, r28
    5c16:	01 96       	adiw	r24, 0x01	; 1
    5c18:	69 a9       	sts	0x49, r22
    5c1a:	7a a9       	sts	0x4a, r23
    5c1c:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <_ZN9IPAddressC1EPKh>
                    }
                    break;
                
                case dhcpServerIdentifier :
                    opt_len = _dhcpUdpSocket.read();
                    if( *((uint32_t*)_dhcpDhcpServerIp) == 0 || 
    5c20:	8b 81       	ldd	r24, Y+3	; 0x03
    5c22:	9c 81       	ldd	r25, Y+4	; 0x04
    5c24:	ad 81       	ldd	r26, Y+5	; 0x05
    5c26:	be 81       	ldd	r27, Y+6	; 0x06
    5c28:	eb a9       	sts	0x4b, r30
    5c2a:	fc a9       	sts	0x4c, r31
    5c2c:	40 81       	ld	r20, Z
    5c2e:	51 81       	ldd	r21, Z+1	; 0x01
    5c30:	62 81       	ldd	r22, Z+2	; 0x02
    5c32:	73 81       	ldd	r23, Z+3	; 0x03
    5c34:	84 17       	cp	r24, r20
    5c36:	95 07       	cpc	r25, r21
    5c38:	a6 07       	cpc	r26, r22
    5c3a:	b7 07       	cpc	r27, r23
    5c3c:	49 f4       	brne	.+18     	; 0x5c50 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x344>
                        IPAddress(_dhcpDhcpServerIp) == _dhcpUdpSocket.remoteIP() )
                    {
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
    5c3e:	87 2d       	mov	r24, r7
    5c40:	96 2d       	mov	r25, r6
    5c42:	69 a9       	sts	0x49, r22
    5c44:	7a a9       	sts	0x4a, r23
    5c46:	44 e0       	ldi	r20, 0x04	; 4
    5c48:	50 e0       	ldi	r21, 0x00	; 0
    5c4a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
    5c4e:	c1 c0       	rjmp	.+386    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                    }
                    else
                    {
                        // Skip over the rest of this option
                        while (opt_len--)
    5c50:	11 23       	and	r17, r17
    5c52:	09 f4       	brne	.+2      	; 0x5c56 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x34a>
    5c54:	be c0       	rjmp	.+380    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        {
                            _dhcpUdpSocket.read();
    5c56:	87 2d       	mov	r24, r7
    5c58:	96 2d       	mov	r25, r6
    5c5a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
    5c5e:	11 50       	subi	r17, 0x01	; 1
                        _dhcpUdpSocket.read(_dhcpDhcpServerIp, sizeof(_dhcpDhcpServerIp));
                    }
                    else
                    {
                        // Skip over the rest of this option
                        while (opt_len--)
    5c60:	d1 f7       	brne	.-12     	; 0x5c56 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x34a>
    5c62:	b7 c0       	rjmp	.+366    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                        }
                    }
                    break;

                case dhcpT1value : 
                    opt_len = _dhcpUdpSocket.read();
    5c64:	87 2d       	mov	r24, r7
    5c66:	96 2d       	mov	r25, r6
    5c68:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT1, sizeof(_dhcpT1));
    5c6c:	87 2d       	mov	r24, r7
    5c6e:	96 2d       	mov	r25, r6
    5c70:	b5 01       	movw	r22, r10
    5c72:	44 e0       	ldi	r20, 0x04	; 4
    5c74:	50 e0       	ldi	r21, 0x00	; 0
    5c76:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
                    _dhcpT1 = ntohl(_dhcpT1);
    5c7a:	f2 01       	movw	r30, r4
    5c7c:	06 a1       	lds	r16, 0x46
    5c7e:	17 a1       	lds	r17, 0x47
    5c80:	20 a5       	lds	r18, 0x60
    5c82:	31 a5       	lds	r19, 0x61
    5c84:	83 2f       	mov	r24, r19
    5c86:	99 27       	eor	r25, r25
    5c88:	aa 27       	eor	r26, r26
    5c8a:	bb 27       	eor	r27, r27
    5c8c:	70 2f       	mov	r23, r16
    5c8e:	66 27       	eor	r22, r22
    5c90:	55 27       	eor	r21, r21
    5c92:	44 27       	eor	r20, r20
    5c94:	48 2b       	or	r20, r24
    5c96:	59 2b       	or	r21, r25
    5c98:	6a 2b       	or	r22, r26
    5c9a:	7b 2b       	or	r23, r27
    5c9c:	b2 2f       	mov	r27, r18
    5c9e:	a1 2f       	mov	r26, r17
    5ca0:	90 2f       	mov	r25, r16
    5ca2:	88 27       	eor	r24, r24
    5ca4:	80 70       	andi	r24, 0x00	; 0
    5ca6:	90 70       	andi	r25, 0x00	; 0
    5ca8:	b0 70       	andi	r27, 0x00	; 0
    5caa:	48 2b       	or	r20, r24
    5cac:	59 2b       	or	r21, r25
    5cae:	6a 2b       	or	r22, r26
    5cb0:	7b 2b       	or	r23, r27
    5cb2:	bb 27       	eor	r27, r27
    5cb4:	a3 2f       	mov	r26, r19
    5cb6:	92 2f       	mov	r25, r18
    5cb8:	81 2f       	mov	r24, r17
    5cba:	80 70       	andi	r24, 0x00	; 0
    5cbc:	a0 70       	andi	r26, 0x00	; 0
    5cbe:	b0 70       	andi	r27, 0x00	; 0
    5cc0:	84 2b       	or	r24, r20
    5cc2:	95 2b       	or	r25, r21
    5cc4:	a6 2b       	or	r26, r22
    5cc6:	b7 2b       	or	r27, r23
    5cc8:	86 a3       	lds	r24, 0x56
    5cca:	97 a3       	lds	r25, 0x57
    5ccc:	a0 a7       	lds	r26, 0x70
    5cce:	b1 a7       	lds	r27, 0x71
                    break;
    5cd0:	80 c0       	rjmp	.+256    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>

                case dhcpT2value : 
                    opt_len = _dhcpUdpSocket.read();
    5cd2:	87 2d       	mov	r24, r7
    5cd4:	96 2d       	mov	r25, r6
    5cd6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpT2, sizeof(_dhcpT2));
    5cda:	87 2d       	mov	r24, r7
    5cdc:	96 2d       	mov	r25, r6
    5cde:	69 a5       	lds	r22, 0x69
    5ce0:	7a a5       	lds	r23, 0x6a
    5ce2:	44 e0       	ldi	r20, 0x04	; 4
    5ce4:	50 e0       	ldi	r21, 0x00	; 0
    5ce6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
                    _dhcpT2 = ntohl(_dhcpT2);
    5cea:	f2 01       	movw	r30, r4
    5cec:	02 a5       	lds	r16, 0x62
    5cee:	13 a5       	lds	r17, 0x63
    5cf0:	24 a5       	lds	r18, 0x64
    5cf2:	35 a5       	lds	r19, 0x65
    5cf4:	83 2f       	mov	r24, r19
    5cf6:	99 27       	eor	r25, r25
    5cf8:	aa 27       	eor	r26, r26
    5cfa:	bb 27       	eor	r27, r27
    5cfc:	70 2f       	mov	r23, r16
    5cfe:	66 27       	eor	r22, r22
    5d00:	55 27       	eor	r21, r21
    5d02:	44 27       	eor	r20, r20
    5d04:	48 2b       	or	r20, r24
    5d06:	59 2b       	or	r21, r25
    5d08:	6a 2b       	or	r22, r26
    5d0a:	7b 2b       	or	r23, r27
    5d0c:	b2 2f       	mov	r27, r18
    5d0e:	a1 2f       	mov	r26, r17
    5d10:	90 2f       	mov	r25, r16
    5d12:	88 27       	eor	r24, r24
    5d14:	80 70       	andi	r24, 0x00	; 0
    5d16:	90 70       	andi	r25, 0x00	; 0
    5d18:	b0 70       	andi	r27, 0x00	; 0
    5d1a:	48 2b       	or	r20, r24
    5d1c:	59 2b       	or	r21, r25
    5d1e:	6a 2b       	or	r22, r26
    5d20:	7b 2b       	or	r23, r27
    5d22:	bb 27       	eor	r27, r27
    5d24:	a3 2f       	mov	r26, r19
    5d26:	92 2f       	mov	r25, r18
    5d28:	81 2f       	mov	r24, r17
    5d2a:	80 70       	andi	r24, 0x00	; 0
    5d2c:	a0 70       	andi	r26, 0x00	; 0
    5d2e:	b0 70       	andi	r27, 0x00	; 0
    5d30:	84 2b       	or	r24, r20
    5d32:	95 2b       	or	r25, r21
    5d34:	a6 2b       	or	r26, r22
    5d36:	b7 2b       	or	r27, r23
    5d38:	82 a7       	lds	r24, 0x72
    5d3a:	93 a7       	lds	r25, 0x73
    5d3c:	a4 a7       	lds	r26, 0x74
    5d3e:	b5 a7       	lds	r27, 0x75
                    break;
    5d40:	48 c0       	rjmp	.+144    	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>

                case dhcpIPaddrLeaseTime :
                    opt_len = _dhcpUdpSocket.read();
    5d42:	87 2d       	mov	r24, r7
    5d44:	96 2d       	mov	r25, r6
    5d46:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
                    _dhcpUdpSocket.read((uint8_t*)&_dhcpLeaseTime, sizeof(_dhcpLeaseTime));
    5d4a:	87 2d       	mov	r24, r7
    5d4c:	96 2d       	mov	r25, r6
    5d4e:	b6 01       	movw	r22, r12
    5d50:	44 e0       	ldi	r20, 0x04	; 4
    5d52:	50 e0       	ldi	r21, 0x00	; 0
    5d54:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
                    _dhcpLeaseTime = ntohl(_dhcpLeaseTime);
    5d58:	f2 01       	movw	r30, r4
    5d5a:	02 a1       	lds	r16, 0x42
    5d5c:	13 a1       	lds	r17, 0x43
    5d5e:	24 a1       	lds	r18, 0x44
    5d60:	35 a1       	lds	r19, 0x45
    5d62:	83 2f       	mov	r24, r19
    5d64:	99 27       	eor	r25, r25
    5d66:	aa 27       	eor	r26, r26
    5d68:	bb 27       	eor	r27, r27
    5d6a:	70 2f       	mov	r23, r16
    5d6c:	66 27       	eor	r22, r22
    5d6e:	55 27       	eor	r21, r21
    5d70:	44 27       	eor	r20, r20
    5d72:	48 2b       	or	r20, r24
    5d74:	59 2b       	or	r21, r25
    5d76:	6a 2b       	or	r22, r26
    5d78:	7b 2b       	or	r23, r27
    5d7a:	b2 2f       	mov	r27, r18
    5d7c:	a1 2f       	mov	r26, r17
    5d7e:	90 2f       	mov	r25, r16
    5d80:	88 27       	eor	r24, r24
    5d82:	80 70       	andi	r24, 0x00	; 0
    5d84:	90 70       	andi	r25, 0x00	; 0
    5d86:	b0 70       	andi	r27, 0x00	; 0
    5d88:	48 2b       	or	r20, r24
    5d8a:	59 2b       	or	r21, r25
    5d8c:	6a 2b       	or	r22, r26
    5d8e:	7b 2b       	or	r23, r27
    5d90:	bb 27       	eor	r27, r27
    5d92:	a3 2f       	mov	r26, r19
    5d94:	92 2f       	mov	r25, r18
    5d96:	81 2f       	mov	r24, r17
    5d98:	80 70       	andi	r24, 0x00	; 0
    5d9a:	a0 70       	andi	r26, 0x00	; 0
    5d9c:	b0 70       	andi	r27, 0x00	; 0
    5d9e:	84 2b       	or	r24, r20
    5da0:	95 2b       	or	r25, r21
    5da2:	a6 2b       	or	r26, r22
    5da4:	b7 2b       	or	r27, r23
    5da6:	82 a3       	lds	r24, 0x52
    5da8:	93 a3       	lds	r25, 0x53
    5daa:	a4 a3       	lds	r26, 0x54
    5dac:	b5 a3       	lds	r27, 0x55
                    _renewInSec = _dhcpLeaseTime;
    5dae:	86 a7       	lds	r24, 0x76
    5db0:	97 a7       	lds	r25, 0x77
    5db2:	a0 ab       	sts	0x50, r26
    5db4:	b1 ab       	sts	0x51, r27
                    break;
    5db6:	0d c0       	rjmp	.+26     	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>

                default :
                    opt_len = _dhcpUdpSocket.read();
    5db8:	87 2d       	mov	r24, r7
    5dba:	96 2d       	mov	r25, r6
    5dbc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
    5dc0:	18 2f       	mov	r17, r24
                    // Skip over the rest of this option
                    while (opt_len--)
    5dc2:	88 23       	and	r24, r24
    5dc4:	31 f0       	breq	.+12     	; 0x5dd2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4c6>
                    {
                        _dhcpUdpSocket.read();
    5dc6:	87 2d       	mov	r24, r7
    5dc8:	96 2d       	mov	r25, r6
    5dca:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
    5dce:	11 50       	subi	r17, 0x01	; 1
                    break;

                default :
                    opt_len = _dhcpUdpSocket.read();
                    // Skip over the rest of this option
                    while (opt_len--)
    5dd0:	d1 f7       	brne	.-12     	; 0x5dc6 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ba>
        for (int i =0; i < (240 - (int)sizeof(RIP_MSG_FIXED)); i++)
        {
            _dhcpUdpSocket.read(); // we don't care about the returned byte
        }

        while (_dhcpUdpSocket.available() > 0) 
    5dd2:	87 2d       	mov	r24, r7
    5dd4:	96 2d       	mov	r25, r6
    5dd6:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN11EthernetUDP9availableEv>
    5dda:	18 16       	cp	r1, r24
    5ddc:	19 06       	cpc	r1, r25
    5dde:	0c f4       	brge	.+2      	; 0x5de2 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4d6>
    5de0:	7f ce       	rjmp	.-770    	; 0x5ae0 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x1d4>
    5de2:	03 c0       	rjmp	.+6      	; 0x5dea <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4de>
    _dhcpUdpSocket.endPacket();
}

uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)
{
    uint8_t type = 0;
    5de4:	88 24       	eor	r8, r8
    5de6:	01 c0       	rjmp	.+2      	; 0x5dea <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4de>
    5de8:	88 24       	eor	r8, r8
            }
        }
    }

    // Need to skip to end of the packet regardless here
    _dhcpUdpSocket.flush();
    5dea:	87 2d       	mov	r24, r7
    5dec:	96 2d       	mov	r25, r6
    5dee:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN11EthernetUDP5flushEv>

    return type;
    5df2:	02 c0       	rjmp	.+4      	; 0x5df8 <_ZN9DhcpClass17parseDHCPResponseEmRm+0x4ec>

    while(_dhcpUdpSocket.parsePacket() <= 0)
    {
        if((millis() - startTime) > responseTimeout)
        {
            return 255;
    5df4:	88 24       	eor	r8, r8
    5df6:	8a 94       	dec	r8

    // Need to skip to end of the packet regardless here
    _dhcpUdpSocket.flush();

    return type;
}
    5df8:	88 2d       	mov	r24, r8
    5dfa:	e4 96       	adiw	r28, 0x34	; 52
    5dfc:	0f b6       	in	r0, 0x3f	; 63
    5dfe:	f8 94       	cli
    5e00:	de bf       	out	0x3e, r29	; 62
    5e02:	0f be       	out	0x3f, r0	; 63
    5e04:	cd bf       	out	0x3d, r28	; 61
    5e06:	df 91       	pop	r29
    5e08:	cf 91       	pop	r28
    5e0a:	1f 91       	pop	r17
    5e0c:	0f 91       	pop	r16
    5e0e:	ff 90       	pop	r15
    5e10:	ef 90       	pop	r14
    5e12:	df 90       	pop	r13
    5e14:	cf 90       	pop	r12
    5e16:	bf 90       	pop	r11
    5e18:	af 90       	pop	r10
    5e1a:	9f 90       	pop	r9
    5e1c:	8f 90       	pop	r8
    5e1e:	7f 90       	pop	r7
    5e20:	6f 90       	pop	r6
    5e22:	5f 90       	pop	r5
    5e24:	4f 90       	pop	r4
    5e26:	3f 90       	pop	r3
    5e28:	2f 90       	pop	r2
    5e2a:	08 95       	ret

00005e2c <_ZN9DhcpClass10getLocalIpEv>:
    _lastCheck = now;
    return rc;
}

IPAddress DhcpClass::getLocalIp()
{
    5e2c:	cf 93       	push	r28
    5e2e:	df 93       	push	r29
    5e30:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpLocalIp);
    5e32:	62 5f       	subi	r22, 0xF2	; 242
    5e34:	7f 4f       	sbci	r23, 0xFF	; 255
    5e36:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <_ZN9IPAddressC1EPKh>
}
    5e3a:	ce 01       	movw	r24, r28
    5e3c:	df 91       	pop	r29
    5e3e:	cf 91       	pop	r28
    5e40:	08 95       	ret

00005e42 <_ZN9DhcpClass13getSubnetMaskEv>:

IPAddress DhcpClass::getSubnetMask()
{
    5e42:	cf 93       	push	r28
    5e44:	df 93       	push	r29
    5e46:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpSubnetMask);
    5e48:	6e 5e       	subi	r22, 0xEE	; 238
    5e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    5e4c:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <_ZN9IPAddressC1EPKh>
}
    5e50:	ce 01       	movw	r24, r28
    5e52:	df 91       	pop	r29
    5e54:	cf 91       	pop	r28
    5e56:	08 95       	ret

00005e58 <_ZN9DhcpClass12getGatewayIpEv>:

IPAddress DhcpClass::getGatewayIp()
{
    5e58:	cf 93       	push	r28
    5e5a:	df 93       	push	r29
    5e5c:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpGatewayIp);
    5e5e:	6a 5e       	subi	r22, 0xEA	; 234
    5e60:	7f 4f       	sbci	r23, 0xFF	; 255
    5e62:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <_ZN9IPAddressC1EPKh>
}
    5e66:	ce 01       	movw	r24, r28
    5e68:	df 91       	pop	r29
    5e6a:	cf 91       	pop	r28
    5e6c:	08 95       	ret

00005e6e <_ZN9DhcpClass15getDhcpServerIpEv>:

IPAddress DhcpClass::getDhcpServerIp()
{
    5e6e:	cf 93       	push	r28
    5e70:	df 93       	push	r29
    5e72:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpDhcpServerIp);
    5e74:	66 5e       	subi	r22, 0xE6	; 230
    5e76:	7f 4f       	sbci	r23, 0xFF	; 255
    5e78:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <_ZN9IPAddressC1EPKh>
}
    5e7c:	ce 01       	movw	r24, r28
    5e7e:	df 91       	pop	r29
    5e80:	cf 91       	pop	r28
    5e82:	08 95       	ret

00005e84 <_ZN9DhcpClass14getDnsServerIpEv>:

IPAddress DhcpClass::getDnsServerIp()
{
    5e84:	cf 93       	push	r28
    5e86:	df 93       	push	r29
    5e88:	ec 01       	movw	r28, r24
    return IPAddress(_dhcpDnsServerIp);
    5e8a:	62 5e       	subi	r22, 0xE2	; 226
    5e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e8e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <_ZN9IPAddressC1EPKh>
}
    5e92:	ce 01       	movw	r24, r28
    5e94:	df 91       	pop	r29
    5e96:	cf 91       	pop	r28
    5e98:	08 95       	ret

00005e9a <_ZN9DhcpClass9printByteEPch>:

void DhcpClass::printByte(char * buf, uint8_t n ) {
  char *str = &buf[1];
  buf[0]='0';
    5e9a:	80 e3       	ldi	r24, 0x30	; 48
    5e9c:	fb 01       	movw	r30, r22
    5e9e:	80 83       	st	Z, r24
IPAddress DhcpClass::getDnsServerIp()
{
    return IPAddress(_dhcpDnsServerIp);
}

void DhcpClass::printByte(char * buf, uint8_t n ) {
    5ea0:	32 96       	adiw	r30, 0x02	; 2
    5ea2:	01 c0       	rjmp	.+2      	; 0x5ea6 <_ZN9DhcpClass9printByteEPch+0xc>
  char *str = &buf[1];
  buf[0]='0';
  do {
    unsigned long m = n;
    n /= 16;
    5ea4:	48 2f       	mov	r20, r24
    char c = m - 16 * n;
    5ea6:	84 2f       	mov	r24, r20
    5ea8:	82 95       	swap	r24
    5eaa:	8f 70       	andi	r24, 0x0F	; 15
    5eac:	4f 70       	andi	r20, 0x0F	; 15
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
    5eae:	4a 30       	cpi	r20, 0x0A	; 10
    5eb0:	10 f4       	brcc	.+4      	; 0x5eb6 <_ZN9DhcpClass9printByteEPch+0x1c>
    5eb2:	40 5d       	subi	r20, 0xD0	; 208
    5eb4:	01 c0       	rjmp	.+2      	; 0x5eb8 <_ZN9DhcpClass9printByteEPch+0x1e>
    5eb6:	49 5c       	subi	r20, 0xC9	; 201
    5eb8:	42 93       	st	-Z, r20
}

void DhcpClass::printByte(char * buf, uint8_t n ) {
  char *str = &buf[1];
  buf[0]='0';
  do {
    5eba:	88 23       	and	r24, r24
    5ebc:	99 f7       	brne	.-26     	; 0x5ea4 <_ZN9DhcpClass9printByteEPch+0xa>
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    5ebe:	08 95       	ret

00005ec0 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>:
void DhcpClass::presend_DHCP()
{
}

void DhcpClass::send_DHCP_MESSAGE(uint8_t messageType, uint16_t secondsElapsed)
{
    5ec0:	9f 92       	push	r9
    5ec2:	af 92       	push	r10
    5ec4:	bf 92       	push	r11
    5ec6:	cf 92       	push	r12
    5ec8:	df 92       	push	r13
    5eca:	ef 92       	push	r14
    5ecc:	ff 92       	push	r15
    5ece:	0f 93       	push	r16
    5ed0:	1f 93       	push	r17
    5ed2:	cf 93       	push	r28
    5ed4:	df 93       	push	r29
    5ed6:	cd b7       	in	r28, 0x3d	; 61
    5ed8:	de b7       	in	r29, 0x3e	; 62
    5eda:	ac 97       	sbiw	r28, 0x2c	; 44
    5edc:	0f b6       	in	r0, 0x3f	; 63
    5ede:	f8 94       	cli
    5ee0:	de bf       	out	0x3e, r29	; 62
    5ee2:	0f be       	out	0x3f, r0	; 63
    5ee4:	cd bf       	out	0x3d, r28	; 61
    5ee6:	5c 01       	movw	r10, r24
    5ee8:	96 2e       	mov	r9, r22
    5eea:	d4 2e       	mov	r13, r20
    5eec:	c5 2e       	mov	r12, r21
    uint8_t buffer[32];
    memset(buffer, 0, 32);
    5eee:	80 e2       	ldi	r24, 0x20	; 32
    5ef0:	fe 01       	movw	r30, r28
    5ef2:	3d 96       	adiw	r30, 0x0d	; 13
    5ef4:	df 01       	movw	r26, r30
    5ef6:	1d 92       	st	X+, r1
    5ef8:	8a 95       	dec	r24
    5efa:	e9 f7       	brne	.-6      	; 0x5ef6 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x36>
    IPAddress dest_addr( 255, 255, 255, 255 ); // Broadcast address
    5efc:	ce 01       	movw	r24, r28
    5efe:	07 96       	adiw	r24, 0x07	; 7
    5f00:	6f ef       	ldi	r22, 0xFF	; 255
    5f02:	4f ef       	ldi	r20, 0xFF	; 255
    5f04:	2f ef       	ldi	r18, 0xFF	; 255
    5f06:	0f ef       	ldi	r16, 0xFF	; 255
    5f08:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN9IPAddressC1Ehhhh>

    if (-1 == _dhcpUdpSocket.beginPacket(dest_addr, DHCP_SERVER_PORT))
    5f0c:	0f 2e       	mov	r0, r31
    5f0e:	f7 e4       	ldi	r31, 0x47	; 71
    5f10:	ef 2e       	mov	r14, r31
    5f12:	ff 24       	eor	r15, r15
    5f14:	f0 2d       	mov	r31, r0
    5f16:	ea 0c       	add	r14, r10
    5f18:	fb 1c       	adc	r15, r11
    5f1a:	8b e4       	ldi	r24, 0x4B	; 75
    5f1c:	92 e0       	ldi	r25, 0x02	; 2
    5f1e:	9a 83       	std	Y+2, r25	; 0x02
    5f20:	89 83       	std	Y+1, r24	; 0x01
    5f22:	89 85       	ldd	r24, Y+9	; 0x09
    5f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f26:	ab 85       	ldd	r26, Y+11	; 0x0b
    5f28:	bc 85       	ldd	r27, Y+12	; 0x0c
    5f2a:	8b 83       	std	Y+3, r24	; 0x03
    5f2c:	9c 83       	std	Y+4, r25	; 0x04
    5f2e:	ad 83       	std	Y+5, r26	; 0x05
    5f30:	be 83       	std	Y+6, r27	; 0x06
    5f32:	c7 01       	movw	r24, r14
    5f34:	be 01       	movw	r22, r28
    5f36:	6f 5f       	subi	r22, 0xFF	; 255
    5f38:	7f 4f       	sbci	r23, 0xFF	; 255
    5f3a:	43 e4       	ldi	r20, 0x43	; 67
    5f3c:	50 e0       	ldi	r21, 0x00	; 0
    5f3e:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_ZN11EthernetUDP11beginPacketE9IPAddressj>
    5f42:	bf ef       	ldi	r27, 0xFF	; 255
    5f44:	8f 3f       	cpi	r24, 0xFF	; 255
    5f46:	9b 07       	cpc	r25, r27
    5f48:	09 f4       	brne	.+2      	; 0x5f4c <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x8c>
    5f4a:	f3 c0       	rjmp	.+486    	; 0x6132 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x272>
    {
        // FIXME Need to return errors
        return;
    }

    buffer[0] = DHCP_BOOTREQUEST;   // op
    5f4c:	81 e0       	ldi	r24, 0x01	; 1
    5f4e:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = DHCP_HTYPE10MB;     // htype
    5f50:	8e 87       	std	Y+14, r24	; 0x0e
    buffer[2] = DHCP_HLENETHERNET;  // hlen
    5f52:	86 e0       	ldi	r24, 0x06	; 6
    5f54:	8f 87       	std	Y+15, r24	; 0x0f
    buffer[3] = DHCP_HOPS;          // hops
    5f56:	18 8a       	std	Y+16, r1	; 0x10

    // xid
    unsigned long xid = htonl(_dhcpTransactionId);
    5f58:	f5 01       	movw	r30, r10
    5f5a:	04 81       	ldd	r16, Z+4	; 0x04
    5f5c:	15 81       	ldd	r17, Z+5	; 0x05
    5f5e:	26 81       	ldd	r18, Z+6	; 0x06
    5f60:	37 81       	ldd	r19, Z+7	; 0x07
    5f62:	43 2f       	mov	r20, r19
    5f64:	55 27       	eor	r21, r21
    5f66:	66 27       	eor	r22, r22
    5f68:	77 27       	eor	r23, r23
    5f6a:	b0 2f       	mov	r27, r16
    5f6c:	aa 27       	eor	r26, r26
    5f6e:	99 27       	eor	r25, r25
    5f70:	88 27       	eor	r24, r24
    5f72:	48 2b       	or	r20, r24
    5f74:	59 2b       	or	r21, r25
    5f76:	6a 2b       	or	r22, r26
    5f78:	7b 2b       	or	r23, r27
    5f7a:	b2 2f       	mov	r27, r18
    5f7c:	a1 2f       	mov	r26, r17
    5f7e:	90 2f       	mov	r25, r16
    5f80:	88 27       	eor	r24, r24
    5f82:	80 70       	andi	r24, 0x00	; 0
    5f84:	90 70       	andi	r25, 0x00	; 0
    5f86:	b0 70       	andi	r27, 0x00	; 0
    5f88:	84 2b       	or	r24, r20
    5f8a:	95 2b       	or	r25, r21
    5f8c:	a6 2b       	or	r26, r22
    5f8e:	b7 2b       	or	r27, r23
    5f90:	01 2f       	mov	r16, r17
    5f92:	12 2f       	mov	r17, r18
    5f94:	23 2f       	mov	r18, r19
    5f96:	33 27       	eor	r19, r19
    5f98:	00 70       	andi	r16, 0x00	; 0
    5f9a:	20 70       	andi	r18, 0x00	; 0
    5f9c:	30 70       	andi	r19, 0x00	; 0
    5f9e:	80 2b       	or	r24, r16
    5fa0:	91 2b       	or	r25, r17
    5fa2:	a2 2b       	or	r26, r18
    5fa4:	b3 2b       	or	r27, r19
    memcpy(buffer + 4, &(xid), 4);
    5fa6:	89 8b       	std	Y+17, r24	; 0x11
    5fa8:	9a 8b       	std	Y+18, r25	; 0x12
    5faa:	ab 8b       	std	Y+19, r26	; 0x13
    5fac:	bc 8b       	std	Y+20, r27	; 0x14

    // 8, 9 - seconds elapsed
    buffer[8] = ((secondsElapsed & 0xff00) >> 8);
    5fae:	cd 8a       	std	Y+21, r12	; 0x15
    buffer[9] = (secondsElapsed & 0x00ff);
    5fb0:	de 8a       	std	Y+22, r13	; 0x16

    // flags
    unsigned short flags = htons(DHCP_FLAGSBROADCAST);
    memcpy(buffer + 10, &(flags), 2);
    5fb2:	80 e8       	ldi	r24, 0x80	; 128
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	98 8f       	std	Y+24, r25	; 0x18
    5fb8:	8f 8b       	std	Y+23, r24	; 0x17
    // yiaddr: already zeroed
    // siaddr: already zeroed
    // giaddr: already zeroed

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 28);
    5fba:	8e 01       	movw	r16, r28
    5fbc:	03 5f       	subi	r16, 0xF3	; 243
    5fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    5fc0:	c7 01       	movw	r24, r14
    5fc2:	b8 01       	movw	r22, r16
    5fc4:	4c e1       	ldi	r20, 0x1C	; 28
    5fc6:	50 e0       	ldi	r21, 0x00	; 0
    5fc8:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>

    memset(buffer, 0, 32); // clear local buffer
    5fcc:	80 e2       	ldi	r24, 0x20	; 32
    5fce:	d8 01       	movw	r26, r16
    5fd0:	1d 92       	st	X+, r1
    5fd2:	8a 95       	dec	r24
    5fd4:	e9 f7       	brne	.-6      	; 0x5fd0 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x110>

    memcpy(buffer, _dhcpMacAddr, 6); // chaddr
    5fd6:	cc 24       	eor	r12, r12
    5fd8:	dd 24       	eor	r13, r13
    5fda:	68 94       	set
    5fdc:	c3 f8       	bld	r12, 3
    5fde:	ca 0c       	add	r12, r10
    5fe0:	db 1c       	adc	r13, r11
    5fe2:	f8 01       	movw	r30, r16
    5fe4:	d6 01       	movw	r26, r12
    5fe6:	86 e0       	ldi	r24, 0x06	; 6
    5fe8:	0d 90       	ld	r0, X+
    5fea:	01 92       	st	Z+, r0
    5fec:	81 50       	subi	r24, 0x01	; 1
    5fee:	e1 f7       	brne	.-8      	; 0x5fe8 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x128>

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 16);
    5ff0:	8e 01       	movw	r16, r28
    5ff2:	03 5f       	subi	r16, 0xF3	; 243
    5ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ff6:	c7 01       	movw	r24, r14
    5ff8:	b8 01       	movw	r22, r16
    5ffa:	40 e1       	ldi	r20, 0x10	; 16
    5ffc:	50 e0       	ldi	r21, 0x00	; 0
    5ffe:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>

    memset(buffer, 0, 32); // clear local buffer
    6002:	80 e2       	ldi	r24, 0x20	; 32
    6004:	f8 01       	movw	r30, r16
    6006:	11 92       	st	Z+, r1
    6008:	8a 95       	dec	r24
    600a:	e9 f7       	brne	.-6      	; 0x6006 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x146>
    600c:	06 e0       	ldi	r16, 0x06	; 6
    600e:	10 e0       	ldi	r17, 0x00	; 0

    // leave zeroed out for sname && file
    // put in W5100 transmit buffer x 6 (192 bytes)
  
    for(int i = 0; i < 6; i++) {
        _dhcpUdpSocket.write(buffer, 32);
    6010:	c7 01       	movw	r24, r14
    6012:	be 01       	movw	r22, r28
    6014:	63 5f       	subi	r22, 0xF3	; 243
    6016:	7f 4f       	sbci	r23, 0xFF	; 255
    6018:	40 e2       	ldi	r20, 0x20	; 32
    601a:	50 e0       	ldi	r21, 0x00	; 0
    601c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>
    6020:	01 50       	subi	r16, 0x01	; 1
    6022:	10 40       	sbci	r17, 0x00	; 0
    memset(buffer, 0, 32); // clear local buffer

    // leave zeroed out for sname && file
    // put in W5100 transmit buffer x 6 (192 bytes)
  
    for(int i = 0; i < 6; i++) {
    6024:	a9 f7       	brne	.-22     	; 0x6010 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x150>
        _dhcpUdpSocket.write(buffer, 32);
    }
  
    // OPT - Magic Cookie
    buffer[0] = (uint8_t)((MAGIC_COOKIE >> 24)& 0xFF);
    6026:	83 e6       	ldi	r24, 0x63	; 99
    6028:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = (uint8_t)((MAGIC_COOKIE >> 16)& 0xFF);
    602a:	92 e8       	ldi	r25, 0x82	; 130
    602c:	9e 87       	std	Y+14, r25	; 0x0e
    buffer[2] = (uint8_t)((MAGIC_COOKIE >> 8)& 0xFF);
    602e:	93 e5       	ldi	r25, 0x53	; 83
    6030:	9f 87       	std	Y+15, r25	; 0x0f
    buffer[3] = (uint8_t)(MAGIC_COOKIE& 0xFF);
    6032:	88 8b       	std	Y+16, r24	; 0x10

    // OPT - message type
    buffer[4] = dhcpMessageType;
    6034:	85 e3       	ldi	r24, 0x35	; 53
    6036:	89 8b       	std	Y+17, r24	; 0x11
    buffer[5] = 0x01;
    6038:	81 e0       	ldi	r24, 0x01	; 1
    603a:	8a 8b       	std	Y+18, r24	; 0x12
    buffer[6] = messageType; //DHCP_REQUEST;
    603c:	9b 8a       	std	Y+19, r9	; 0x13

    // OPT - client identifier
    buffer[7] = dhcpClientIdentifier;
    603e:	9d e3       	ldi	r25, 0x3D	; 61
    6040:	9c 8b       	std	Y+20, r25	; 0x14
    buffer[8] = 0x07;
    6042:	97 e0       	ldi	r25, 0x07	; 7
    6044:	9d 8b       	std	Y+21, r25	; 0x15
    buffer[9] = 0x01;
    6046:	8e 8b       	std	Y+22, r24	; 0x16
    memcpy(buffer + 10, _dhcpMacAddr, 6);
    6048:	fe 01       	movw	r30, r28
    604a:	77 96       	adiw	r30, 0x17	; 23
    604c:	d6 01       	movw	r26, r12
    604e:	86 e0       	ldi	r24, 0x06	; 6
    6050:	0d 90       	ld	r0, X+
    6052:	01 92       	st	Z+, r0
    6054:	81 50       	subi	r24, 0x01	; 1
    6056:	e1 f7       	brne	.-8      	; 0x6050 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x190>

    // OPT - host name
    buffer[16] = hostName;
    6058:	8c e0       	ldi	r24, 0x0C	; 12
    605a:	8d 8f       	std	Y+29, r24	; 0x1d
    buffer[17] = strlen(HOST_NAME) + 6; // length of hostname + last 3 bytes of mac address
    605c:	8e 8f       	std	Y+30, r24	; 0x1e
    strcpy((char*)&(buffer[18]), HOST_NAME);
    605e:	fe 01       	movw	r30, r28
    6060:	7f 96       	adiw	r30, 0x1f	; 31
    6062:	af e5       	ldi	r26, 0x5F	; 95
    6064:	b2 e0       	ldi	r27, 0x02	; 2
    6066:	87 e0       	ldi	r24, 0x07	; 7
    6068:	0d 90       	ld	r0, X+
    606a:	01 92       	st	Z+, r0
    606c:	81 50       	subi	r24, 0x01	; 1
    606e:	e1 f7       	brne	.-8      	; 0x6068 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x1a8>

    printByte((char*)&(buffer[24]), _dhcpMacAddr[3]);
    6070:	c5 01       	movw	r24, r10
    6072:	be 01       	movw	r22, r28
    6074:	6b 5d       	subi	r22, 0xDB	; 219
    6076:	7f 4f       	sbci	r23, 0xFF	; 255
    6078:	d5 01       	movw	r26, r10
    607a:	1b 96       	adiw	r26, 0x0b	; 11
    607c:	4c 91       	ld	r20, X
    607e:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN9DhcpClass9printByteEPch>
    printByte((char*)&(buffer[26]), _dhcpMacAddr[4]);
    6082:	c5 01       	movw	r24, r10
    6084:	be 01       	movw	r22, r28
    6086:	69 5d       	subi	r22, 0xD9	; 217
    6088:	7f 4f       	sbci	r23, 0xFF	; 255
    608a:	f5 01       	movw	r30, r10
    608c:	44 85       	ldd	r20, Z+12	; 0x0c
    608e:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN9DhcpClass9printByteEPch>
    printByte((char*)&(buffer[28]), _dhcpMacAddr[5]);
    6092:	c5 01       	movw	r24, r10
    6094:	be 01       	movw	r22, r28
    6096:	67 5d       	subi	r22, 0xD7	; 215
    6098:	7f 4f       	sbci	r23, 0xFF	; 255
    609a:	d5 01       	movw	r26, r10
    609c:	1d 96       	adiw	r26, 0x0d	; 13
    609e:	4c 91       	ld	r20, X
    60a0:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <_ZN9DhcpClass9printByteEPch>

    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 30);
    60a4:	c7 01       	movw	r24, r14
    60a6:	be 01       	movw	r22, r28
    60a8:	63 5f       	subi	r22, 0xF3	; 243
    60aa:	7f 4f       	sbci	r23, 0xFF	; 255
    60ac:	4e e1       	ldi	r20, 0x1E	; 30
    60ae:	50 e0       	ldi	r21, 0x00	; 0
    60b0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>

    if(messageType == DHCP_REQUEST)
    60b4:	b3 e0       	ldi	r27, 0x03	; 3
    60b6:	9b 16       	cp	r9, r27
    60b8:	01 f5       	brne	.+64     	; 0x60fa <_ZN9DhcpClass17send_DHCP_MESSAGEEhj+0x23a>
    {
        buffer[0] = dhcpRequestedIPaddr;
    60ba:	82 e3       	ldi	r24, 0x32	; 50
    60bc:	8d 87       	std	Y+13, r24	; 0x0d
        buffer[1] = 0x04;
    60be:	84 e0       	ldi	r24, 0x04	; 4
    60c0:	8e 87       	std	Y+14, r24	; 0x0e
        buffer[2] = _dhcpLocalIp[0];
    60c2:	f5 01       	movw	r30, r10
    60c4:	96 85       	ldd	r25, Z+14	; 0x0e
    60c6:	9f 87       	std	Y+15, r25	; 0x0f
        buffer[3] = _dhcpLocalIp[1];
    60c8:	97 85       	ldd	r25, Z+15	; 0x0f
    60ca:	98 8b       	std	Y+16, r25	; 0x10
        buffer[4] = _dhcpLocalIp[2];
    60cc:	90 89       	ldd	r25, Z+16	; 0x10
    60ce:	99 8b       	std	Y+17, r25	; 0x11
        buffer[5] = _dhcpLocalIp[3];
    60d0:	91 89       	ldd	r25, Z+17	; 0x11
    60d2:	9a 8b       	std	Y+18, r25	; 0x12

        buffer[6] = dhcpServerIdentifier;
    60d4:	96 e3       	ldi	r25, 0x36	; 54
    60d6:	9b 8b       	std	Y+19, r25	; 0x13
        buffer[7] = 0x04;
    60d8:	8c 8b       	std	Y+20, r24	; 0x14
        buffer[8] = _dhcpDhcpServerIp[0];
    60da:	82 8d       	ldd	r24, Z+26	; 0x1a
    60dc:	8d 8b       	std	Y+21, r24	; 0x15
        buffer[9] = _dhcpDhcpServerIp[1];
    60de:	83 8d       	ldd	r24, Z+27	; 0x1b
    60e0:	8e 8b       	std	Y+22, r24	; 0x16
        buffer[10] = _dhcpDhcpServerIp[2];
    60e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    60e4:	8f 8b       	std	Y+23, r24	; 0x17
        buffer[11] = _dhcpDhcpServerIp[3];
    60e6:	85 8d       	ldd	r24, Z+29	; 0x1d
    60e8:	88 8f       	std	Y+24, r24	; 0x18

        //put data in W5100 transmit buffer
        _dhcpUdpSocket.write(buffer, 12);
    60ea:	c7 01       	movw	r24, r14
    60ec:	be 01       	movw	r22, r28
    60ee:	63 5f       	subi	r22, 0xF3	; 243
    60f0:	7f 4f       	sbci	r23, 0xFF	; 255
    60f2:	4c e0       	ldi	r20, 0x0C	; 12
    60f4:	50 e0       	ldi	r21, 0x00	; 0
    60f6:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>
    }
    
    buffer[0] = dhcpParamRequest;
    60fa:	87 e3       	ldi	r24, 0x37	; 55
    60fc:	8d 87       	std	Y+13, r24	; 0x0d
    buffer[1] = 0x06;
    60fe:	86 e0       	ldi	r24, 0x06	; 6
    6100:	8e 87       	std	Y+14, r24	; 0x0e
    buffer[2] = subnetMask;
    6102:	91 e0       	ldi	r25, 0x01	; 1
    6104:	9f 87       	std	Y+15, r25	; 0x0f
    buffer[3] = routersOnSubnet;
    6106:	93 e0       	ldi	r25, 0x03	; 3
    6108:	98 8b       	std	Y+16, r25	; 0x10
    buffer[4] = dns;
    610a:	89 8b       	std	Y+17, r24	; 0x11
    buffer[5] = domainName;
    610c:	8f e0       	ldi	r24, 0x0F	; 15
    610e:	8a 8b       	std	Y+18, r24	; 0x12
    buffer[6] = dhcpT1value;
    6110:	8a e3       	ldi	r24, 0x3A	; 58
    6112:	8b 8b       	std	Y+19, r24	; 0x13
    buffer[7] = dhcpT2value;
    6114:	8b e3       	ldi	r24, 0x3B	; 59
    6116:	8c 8b       	std	Y+20, r24	; 0x14
    buffer[8] = endOption;
    6118:	8f ef       	ldi	r24, 0xFF	; 255
    611a:	8d 8b       	std	Y+21, r24	; 0x15
    
    //put data in W5100 transmit buffer
    _dhcpUdpSocket.write(buffer, 9);
    611c:	c7 01       	movw	r24, r14
    611e:	be 01       	movw	r22, r28
    6120:	63 5f       	subi	r22, 0xF3	; 243
    6122:	7f 4f       	sbci	r23, 0xFF	; 255
    6124:	49 e0       	ldi	r20, 0x09	; 9
    6126:	50 e0       	ldi	r21, 0x00	; 0
    6128:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>

    _dhcpUdpSocket.endPacket();
    612c:	c7 01       	movw	r24, r14
    612e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN11EthernetUDP9endPacketEv>
}
    6132:	ac 96       	adiw	r28, 0x2c	; 44
    6134:	0f b6       	in	r0, 0x3f	; 63
    6136:	f8 94       	cli
    6138:	de bf       	out	0x3e, r29	; 62
    613a:	0f be       	out	0x3f, r0	; 63
    613c:	cd bf       	out	0x3d, r28	; 61
    613e:	df 91       	pop	r29
    6140:	cf 91       	pop	r28
    6142:	1f 91       	pop	r17
    6144:	0f 91       	pop	r16
    6146:	ff 90       	pop	r15
    6148:	ef 90       	pop	r14
    614a:	df 90       	pop	r13
    614c:	cf 90       	pop	r12
    614e:	bf 90       	pop	r11
    6150:	af 90       	pop	r10
    6152:	9f 90       	pop	r9
    6154:	08 95       	ret

00006156 <_ZN9DhcpClass18request_DHCP_leaseEv>:
    // zero out _dhcpSubnetMask, _dhcpGatewayIp, _dhcpLocalIp, _dhcpDhcpServerIp, _dhcpDnsServerIp
    memset(_dhcpLocalIp, 0, 20);
}

//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease(){
    6156:	2f 92       	push	r2
    6158:	3f 92       	push	r3
    615a:	4f 92       	push	r4
    615c:	5f 92       	push	r5
    615e:	6f 92       	push	r6
    6160:	7f 92       	push	r7
    6162:	8f 92       	push	r8
    6164:	9f 92       	push	r9
    6166:	af 92       	push	r10
    6168:	bf 92       	push	r11
    616a:	cf 92       	push	r12
    616c:	df 92       	push	r13
    616e:	ef 92       	push	r14
    6170:	ff 92       	push	r15
    6172:	0f 93       	push	r16
    6174:	1f 93       	push	r17
    6176:	cf 93       	push	r28
    6178:	df 93       	push	r29
    617a:	cd b7       	in	r28, 0x3d	; 61
    617c:	de b7       	in	r29, 0x3e	; 62
    617e:	2a 97       	sbiw	r28, 0x0a	; 10
    6180:	0f b6       	in	r0, 0x3f	; 63
    6182:	f8 94       	cli
    6184:	de bf       	out	0x3e, r29	; 62
    6186:	0f be       	out	0x3f, r0	; 63
    6188:	cd bf       	out	0x3d, r28	; 61
    618a:	8c 01       	movw	r16, r24
    uint8_t messageType = 0;
  
    
  
    // Pick an initial transaction ID
    _dhcpTransactionId = random(1UL, 2000UL);
    618c:	61 e0       	ldi	r22, 0x01	; 1
    618e:	70 e0       	ldi	r23, 0x00	; 0
    6190:	80 e0       	ldi	r24, 0x00	; 0
    6192:	90 e0       	ldi	r25, 0x00	; 0
    6194:	20 ed       	ldi	r18, 0xD0	; 208
    6196:	37 e0       	ldi	r19, 0x07	; 7
    6198:	40 e0       	ldi	r20, 0x00	; 0
    619a:	50 e0       	ldi	r21, 0x00	; 0
    619c:	0e 94 a9 23 	call	0x4752	; 0x4752 <_Z6randomll>
    61a0:	d8 01       	movw	r26, r16
    61a2:	14 96       	adiw	r26, 0x04	; 4
    61a4:	6c 93       	st	X, r22
    61a6:	14 97       	sbiw	r26, 0x04	; 4
    61a8:	15 96       	adiw	r26, 0x05	; 5
    61aa:	7c 93       	st	X, r23
    61ac:	15 97       	sbiw	r26, 0x05	; 5
    61ae:	16 96       	adiw	r26, 0x06	; 6
    61b0:	8c 93       	st	X, r24
    61b2:	16 97       	sbiw	r26, 0x06	; 6
    61b4:	17 96       	adiw	r26, 0x07	; 7
    61b6:	9c 93       	st	X, r25
    61b8:	17 97       	sbiw	r26, 0x07	; 7
    _dhcpInitialTransactionId = _dhcpTransactionId;
    61ba:	6c 93       	st	X, r22
    61bc:	11 96       	adiw	r26, 0x01	; 1
    61be:	7c 93       	st	X, r23
    61c0:	11 97       	sbiw	r26, 0x01	; 1
    61c2:	12 96       	adiw	r26, 0x02	; 2
    61c4:	8c 93       	st	X, r24
    61c6:	12 97       	sbiw	r26, 0x02	; 2
    61c8:	13 96       	adiw	r26, 0x03	; 3
    61ca:	9c 93       	st	X, r25

    if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0)
    61cc:	f8 01       	movw	r30, r16
    61ce:	e9 5b       	subi	r30, 0xB9	; 185
    61d0:	ff 4f       	sbci	r31, 0xFF	; 255
    61d2:	f8 87       	std	Y+8, r31	; 0x08
    61d4:	ef 83       	std	Y+7, r30	; 0x07
    61d6:	cf 01       	movw	r24, r30
    61d8:	64 e4       	ldi	r22, 0x44	; 68
    61da:	70 e0       	ldi	r23, 0x00	; 0
    61dc:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_ZN11EthernetUDP5beginEj>
    61e0:	88 23       	and	r24, r24
    61e2:	09 f4       	brne	.+2      	; 0x61e6 <_ZN9DhcpClass18request_DHCP_leaseEv+0x90>
    61e4:	41 c1       	rjmp	.+642    	; 0x6468 <_ZN9DhcpClass18request_DHCP_leaseEv+0x312>
    
    presend_DHCP();
    
    int result = 0;
    
    unsigned long startTime = millis();
    61e6:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    61ea:	4b 01       	movw	r8, r22
    61ec:	5c 01       	movw	r10, r24
      return 0;
    }
    
    presend_DHCP();
    
    int result = 0;
    61ee:	cc 24       	eor	r12, r12
    61f0:	dd 24       	eor	r13, r13
}

//return:0 on error, 1 if request is sent and response is received
int DhcpClass::request_DHCP_lease(){
    
    uint8_t messageType = 0;
    61f2:	ff 24       	eor	r15, r15
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    61f4:	0f 2e       	mov	r0, r31
    61f6:	f6 e4       	ldi	r31, 0x46	; 70
    61f8:	6f 2e       	mov	r6, r31
    61fa:	77 24       	eor	r7, r7
    61fc:	f0 2d       	mov	r31, r0
    61fe:	60 0e       	add	r6, r16
    6200:	71 1e       	adc	r7, r17
                _dhcp_state = STATE_DHCP_START;
        }
        
        if(messageType == 255)
        {
            messageType = 0;
    6202:	ee 24       	eor	r14, r14
            }
        }
        else if(_dhcp_state == STATE_DHCP_REQUEST)
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    6204:	c8 01       	movw	r24, r16
    6206:	ce 96       	adiw	r24, 0x3e	; 62
    6208:	9a 87       	std	Y+10, r25	; 0x0a
    620a:	89 87       	std	Y+9, r24	; 0x09
            if(messageType == DHCP_OFFER)
            {
                // We'll use the transaction ID that the offer came with,
                // rather than the one we were up to
                _dhcpTransactionId = respId;
                send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime) / 1000));
    620c:	0f 2e       	mov	r0, r31
    620e:	f8 ee       	ldi	r31, 0xE8	; 232
    6210:	2f 2e       	mov	r2, r31
    6212:	f3 e0       	ldi	r31, 0x03	; 3
    6214:	3f 2e       	mov	r3, r31
    6216:	f0 e0       	ldi	r31, 0x00	; 0
    6218:	4f 2e       	mov	r4, r31
    621a:	f0 e0       	ldi	r31, 0x00	; 0
    621c:	5f 2e       	mov	r5, r31
    621e:	f0 2d       	mov	r31, r0
    6220:	7e 82       	std	Y+6, r7	; 0x06
    6222:	6d 82       	std	Y+5, r6	; 0x05
    6224:	38 01       	movw	r6, r16
    6226:	0f 2d       	mov	r16, r15
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    6228:	08 c1       	rjmp	.+528    	; 0x643a <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e4>
    {
        if(_dhcp_state == STATE_DHCP_START)
    622a:	88 23       	and	r24, r24
    622c:	21 f5       	brne	.+72     	; 0x6276 <_ZN9DhcpClass18request_DHCP_leaseEv+0x120>
        {
            _dhcpTransactionId++;
    622e:	f3 01       	movw	r30, r6
    6230:	84 81       	ldd	r24, Z+4	; 0x04
    6232:	95 81       	ldd	r25, Z+5	; 0x05
    6234:	a6 81       	ldd	r26, Z+6	; 0x06
    6236:	b7 81       	ldd	r27, Z+7	; 0x07
    6238:	01 96       	adiw	r24, 0x01	; 1
    623a:	a1 1d       	adc	r26, r1
    623c:	b1 1d       	adc	r27, r1
    623e:	84 83       	std	Z+4, r24	; 0x04
    6240:	95 83       	std	Z+5, r25	; 0x05
    6242:	a6 83       	std	Z+6, r26	; 0x06
    6244:	b7 83       	std	Z+7, r27	; 0x07
            
            send_DHCP_MESSAGE(DHCP_DISCOVER, ((millis() - startTime) / 1000));
    6246:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    624a:	dc 01       	movw	r26, r24
    624c:	cb 01       	movw	r24, r22
    624e:	88 19       	sub	r24, r8
    6250:	99 09       	sbc	r25, r9
    6252:	aa 09       	sbc	r26, r10
    6254:	bb 09       	sbc	r27, r11
    6256:	bc 01       	movw	r22, r24
    6258:	cd 01       	movw	r24, r26
    625a:	a2 01       	movw	r20, r4
    625c:	91 01       	movw	r18, r2
    625e:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    6262:	c3 01       	movw	r24, r6
    6264:	61 e0       	ldi	r22, 0x01	; 1
    6266:	a9 01       	movw	r20, r18
    6268:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
            _dhcp_state = STATE_DHCP_DISCOVER;
    626c:	81 e0       	ldi	r24, 0x01	; 1
    626e:	ad 81       	ldd	r26, Y+5	; 0x05
    6270:	be 81       	ldd	r27, Y+6	; 0x06
    6272:	8c 93       	st	X, r24
    6274:	c6 c0       	rjmp	.+396    	; 0x6402 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
        }
        else if(_dhcp_state == STATE_DHCP_REREQUEST){
    6276:	84 30       	cpi	r24, 0x04	; 4
    6278:	21 f5       	brne	.+72     	; 0x62c2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x16c>
            _dhcpTransactionId++;
    627a:	f3 01       	movw	r30, r6
    627c:	84 81       	ldd	r24, Z+4	; 0x04
    627e:	95 81       	ldd	r25, Z+5	; 0x05
    6280:	a6 81       	ldd	r26, Z+6	; 0x06
    6282:	b7 81       	ldd	r27, Z+7	; 0x07
    6284:	01 96       	adiw	r24, 0x01	; 1
    6286:	a1 1d       	adc	r26, r1
    6288:	b1 1d       	adc	r27, r1
    628a:	84 83       	std	Z+4, r24	; 0x04
    628c:	95 83       	std	Z+5, r25	; 0x05
    628e:	a6 83       	std	Z+6, r26	; 0x06
    6290:	b7 83       	std	Z+7, r27	; 0x07
            send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime)/1000));
    6292:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    6296:	dc 01       	movw	r26, r24
    6298:	cb 01       	movw	r24, r22
    629a:	88 19       	sub	r24, r8
    629c:	99 09       	sbc	r25, r9
    629e:	aa 09       	sbc	r26, r10
    62a0:	bb 09       	sbc	r27, r11
    62a2:	bc 01       	movw	r22, r24
    62a4:	cd 01       	movw	r24, r26
    62a6:	a2 01       	movw	r20, r4
    62a8:	91 01       	movw	r18, r2
    62aa:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    62ae:	c3 01       	movw	r24, r6
    62b0:	63 e0       	ldi	r22, 0x03	; 3
    62b2:	a9 01       	movw	r20, r18
    62b4:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
            _dhcp_state = STATE_DHCP_REQUEST;
    62b8:	e2 e0       	ldi	r30, 0x02	; 2
    62ba:	ad 81       	ldd	r26, Y+5	; 0x05
    62bc:	be 81       	ldd	r27, Y+6	; 0x06
    62be:	ec 93       	st	X, r30
    62c0:	a0 c0       	rjmp	.+320    	; 0x6402 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
        }
        else if(_dhcp_state == STATE_DHCP_DISCOVER)
    62c2:	81 30       	cpi	r24, 0x01	; 1
    62c4:	89 f5       	brne	.+98     	; 0x6328 <_ZN9DhcpClass18request_DHCP_leaseEv+0x1d2>
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    62c6:	a9 85       	ldd	r26, Y+9	; 0x09
    62c8:	ba 85       	ldd	r27, Y+10	; 0x0a
    62ca:	4d 91       	ld	r20, X+
    62cc:	5d 91       	ld	r21, X+
    62ce:	6d 91       	ld	r22, X+
    62d0:	7c 91       	ld	r23, X
    62d2:	c3 01       	movw	r24, r6
    62d4:	9e 01       	movw	r18, r28
    62d6:	2f 5f       	subi	r18, 0xFF	; 255
    62d8:	3f 4f       	sbci	r19, 0xFF	; 255
    62da:	0e 94 86 2c 	call	0x590c	; 0x590c <_ZN9DhcpClass17parseDHCPResponseEmRm>
    62de:	08 2f       	mov	r16, r24
            if(messageType == DHCP_OFFER)
    62e0:	82 30       	cpi	r24, 0x02	; 2
    62e2:	09 f0       	breq	.+2      	; 0x62e6 <_ZN9DhcpClass18request_DHCP_leaseEv+0x190>
    62e4:	8e c0       	rjmp	.+284    	; 0x6402 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
            {
                // We'll use the transaction ID that the offer came with,
                // rather than the one we were up to
                _dhcpTransactionId = respId;
    62e6:	89 81       	ldd	r24, Y+1	; 0x01
    62e8:	9a 81       	ldd	r25, Y+2	; 0x02
    62ea:	ab 81       	ldd	r26, Y+3	; 0x03
    62ec:	bc 81       	ldd	r27, Y+4	; 0x04
    62ee:	f3 01       	movw	r30, r6
    62f0:	84 83       	std	Z+4, r24	; 0x04
    62f2:	95 83       	std	Z+5, r25	; 0x05
    62f4:	a6 83       	std	Z+6, r26	; 0x06
    62f6:	b7 83       	std	Z+7, r27	; 0x07
                send_DHCP_MESSAGE(DHCP_REQUEST, ((millis() - startTime) / 1000));
    62f8:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    62fc:	dc 01       	movw	r26, r24
    62fe:	cb 01       	movw	r24, r22
    6300:	88 19       	sub	r24, r8
    6302:	99 09       	sbc	r25, r9
    6304:	aa 09       	sbc	r26, r10
    6306:	bb 09       	sbc	r27, r11
    6308:	bc 01       	movw	r22, r24
    630a:	cd 01       	movw	r24, r26
    630c:	a2 01       	movw	r20, r4
    630e:	91 01       	movw	r18, r2
    6310:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    6314:	c3 01       	movw	r24, r6
    6316:	63 e0       	ldi	r22, 0x03	; 3
    6318:	a9 01       	movw	r20, r18
    631a:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <_ZN9DhcpClass17send_DHCP_MESSAGEEhj>
                _dhcp_state = STATE_DHCP_REQUEST;
    631e:	e2 e0       	ldi	r30, 0x02	; 2
    6320:	ad 81       	ldd	r26, Y+5	; 0x05
    6322:	be 81       	ldd	r27, Y+6	; 0x06
    6324:	ec 93       	st	X, r30
    6326:	73 c0       	rjmp	.+230    	; 0x640e <_ZN9DhcpClass18request_DHCP_leaseEv+0x2b8>
            }
        }
        else if(_dhcp_state == STATE_DHCP_REQUEST)
    6328:	82 30       	cpi	r24, 0x02	; 2
    632a:	09 f0       	breq	.+2      	; 0x632e <_ZN9DhcpClass18request_DHCP_leaseEv+0x1d8>
    632c:	6a c0       	rjmp	.+212    	; 0x6402 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
        {
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
    632e:	a9 85       	ldd	r26, Y+9	; 0x09
    6330:	ba 85       	ldd	r27, Y+10	; 0x0a
    6332:	4d 91       	ld	r20, X+
    6334:	5d 91       	ld	r21, X+
    6336:	6d 91       	ld	r22, X+
    6338:	7c 91       	ld	r23, X
    633a:	c3 01       	movw	r24, r6
    633c:	9e 01       	movw	r18, r28
    633e:	2f 5f       	subi	r18, 0xFF	; 255
    6340:	3f 4f       	sbci	r19, 0xFF	; 255
    6342:	0e 94 86 2c 	call	0x590c	; 0x590c <_ZN9DhcpClass17parseDHCPResponseEmRm>
    6346:	08 2f       	mov	r16, r24
            if(messageType == DHCP_ACK)
    6348:	85 30       	cpi	r24, 0x05	; 5
    634a:	09 f0       	breq	.+2      	; 0x634e <_ZN9DhcpClass18request_DHCP_leaseEv+0x1f8>
    634c:	54 c0       	rjmp	.+168    	; 0x63f6 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2a0>
            {
                _dhcp_state = STATE_DHCP_LEASED;
    634e:	83 e0       	ldi	r24, 0x03	; 3
    6350:	ed 81       	ldd	r30, Y+5	; 0x05
    6352:	fe 81       	ldd	r31, Y+6	; 0x06
    6354:	80 83       	st	Z, r24
                result = 1;
                //use default lease time if we didn't get it
                if(_dhcpLeaseTime == 0){
    6356:	f3 01       	movw	r30, r6
    6358:	82 a1       	lds	r24, 0x42
    635a:	93 a1       	lds	r25, 0x43
    635c:	a4 a1       	lds	r26, 0x44
    635e:	b5 a1       	lds	r27, 0x45
    6360:	00 97       	sbiw	r24, 0x00	; 0
    6362:	a1 05       	cpc	r26, r1
    6364:	b1 05       	cpc	r27, r1
    6366:	41 f4       	brne	.+16     	; 0x6378 <_ZN9DhcpClass18request_DHCP_leaseEv+0x222>
                    _dhcpLeaseTime = DEFAULT_LEASE;
    6368:	84 e8       	ldi	r24, 0x84	; 132
    636a:	93 e0       	ldi	r25, 0x03	; 3
    636c:	a0 e0       	ldi	r26, 0x00	; 0
    636e:	b0 e0       	ldi	r27, 0x00	; 0
    6370:	82 a3       	lds	r24, 0x52
    6372:	93 a3       	lds	r25, 0x53
    6374:	a4 a3       	lds	r26, 0x54
    6376:	b5 a3       	lds	r27, 0x55
                }
                //calculate T1 & T2 if we didn't get it
                if(_dhcpT1 == 0){
    6378:	f3 01       	movw	r30, r6
    637a:	86 a1       	lds	r24, 0x46
    637c:	97 a1       	lds	r25, 0x47
    637e:	a0 a5       	lds	r26, 0x60
    6380:	b1 a5       	lds	r27, 0x61
    6382:	00 97       	sbiw	r24, 0x00	; 0
    6384:	a1 05       	cpc	r26, r1
    6386:	b1 05       	cpc	r27, r1
    6388:	61 f4       	brne	.+24     	; 0x63a2 <_ZN9DhcpClass18request_DHCP_leaseEv+0x24c>
                    //T1 should be 50% of _dhcpLeaseTime
                    _dhcpT1 = _dhcpLeaseTime >> 1;
    638a:	82 a1       	lds	r24, 0x42
    638c:	93 a1       	lds	r25, 0x43
    638e:	a4 a1       	lds	r26, 0x44
    6390:	b5 a1       	lds	r27, 0x45
    6392:	b6 95       	lsr	r27
    6394:	a7 95       	ror	r26
    6396:	97 95       	ror	r25
    6398:	87 95       	ror	r24
    639a:	86 a3       	lds	r24, 0x56
    639c:	97 a3       	lds	r25, 0x57
    639e:	a0 a7       	lds	r26, 0x70
    63a0:	b1 a7       	lds	r27, 0x71
                }
                if(_dhcpT2 == 0){
    63a2:	f3 01       	movw	r30, r6
    63a4:	82 a5       	lds	r24, 0x62
    63a6:	93 a5       	lds	r25, 0x63
    63a8:	a4 a5       	lds	r26, 0x64
    63aa:	b5 a5       	lds	r27, 0x65
    63ac:	00 97       	sbiw	r24, 0x00	; 0
    63ae:	a1 05       	cpc	r26, r1
    63b0:	b1 05       	cpc	r27, r1
    63b2:	61 f4       	brne	.+24     	; 0x63cc <_ZN9DhcpClass18request_DHCP_leaseEv+0x276>
                    //T2 should be 87.5% (7/8ths) of _dhcpLeaseTime
                    _dhcpT2 = _dhcpT1 << 1;
    63b4:	86 a1       	lds	r24, 0x46
    63b6:	97 a1       	lds	r25, 0x47
    63b8:	a0 a5       	lds	r26, 0x60
    63ba:	b1 a5       	lds	r27, 0x61
    63bc:	88 0f       	add	r24, r24
    63be:	99 1f       	adc	r25, r25
    63c0:	aa 1f       	adc	r26, r26
    63c2:	bb 1f       	adc	r27, r27
    63c4:	82 a7       	lds	r24, 0x72
    63c6:	93 a7       	lds	r25, 0x73
    63c8:	a4 a7       	lds	r26, 0x74
    63ca:	b5 a7       	lds	r27, 0x75
                }
                _renewInSec = _dhcpT1;
    63cc:	f3 01       	movw	r30, r6
    63ce:	86 a1       	lds	r24, 0x46
    63d0:	97 a1       	lds	r25, 0x47
    63d2:	a0 a5       	lds	r26, 0x60
    63d4:	b1 a5       	lds	r27, 0x61
    63d6:	86 a7       	lds	r24, 0x76
    63d8:	97 a7       	lds	r25, 0x77
    63da:	a0 ab       	sts	0x50, r26
    63dc:	b1 ab       	sts	0x51, r27
                _rebindInSec = _dhcpT2;
    63de:	82 a5       	lds	r24, 0x62
    63e0:	93 a5       	lds	r25, 0x63
    63e2:	a4 a5       	lds	r26, 0x64
    63e4:	b5 a5       	lds	r27, 0x65
    63e6:	82 ab       	sts	0x52, r24
    63e8:	93 ab       	sts	0x53, r25
    63ea:	a4 ab       	sts	0x54, r26
    63ec:	b5 ab       	sts	0x55, r27
            uint32_t respId;
            messageType = parseDHCPResponse(_responseTimeout, respId);
            if(messageType == DHCP_ACK)
            {
                _dhcp_state = STATE_DHCP_LEASED;
                result = 1;
    63ee:	cc 24       	eor	r12, r12
    63f0:	dd 24       	eor	r13, r13
    63f2:	c3 94       	inc	r12
    63f4:	06 c0       	rjmp	.+12     	; 0x6402 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
                    _dhcpT2 = _dhcpT1 << 1;
                }
                _renewInSec = _dhcpT1;
                _rebindInSec = _dhcpT2;
            }
            else if(messageType == DHCP_NAK)
    63f6:	86 30       	cpi	r24, 0x06	; 6
    63f8:	21 f4       	brne	.+8      	; 0x6402 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2ac>
                _dhcp_state = STATE_DHCP_START;
    63fa:	ad 81       	ldd	r26, Y+5	; 0x05
    63fc:	be 81       	ldd	r27, Y+6	; 0x06
    63fe:	1c 92       	st	X, r1
    6400:	06 c0       	rjmp	.+12     	; 0x640e <_ZN9DhcpClass18request_DHCP_leaseEv+0x2b8>
        }
        
        if(messageType == 255)
    6402:	0f 3f       	cpi	r16, 0xFF	; 255
    6404:	21 f4       	brne	.+8      	; 0x640e <_ZN9DhcpClass18request_DHCP_leaseEv+0x2b8>
        {
            messageType = 0;
            _dhcp_state = STATE_DHCP_START;
    6406:	ed 81       	ldd	r30, Y+5	; 0x05
    6408:	fe 81       	ldd	r31, Y+6	; 0x06
    640a:	10 82       	st	Z, r1
                _dhcp_state = STATE_DHCP_START;
        }
        
        if(messageType == 255)
        {
            messageType = 0;
    640c:	0e 2d       	mov	r16, r14
            _dhcp_state = STATE_DHCP_START;
        }
        
        if(result != 1 && ((millis() - startTime) > _timeout))
    640e:	f1 e0       	ldi	r31, 0x01	; 1
    6410:	cf 16       	cp	r12, r31
    6412:	d1 04       	cpc	r13, r1
    6414:	91 f0       	breq	.+36     	; 0x643a <_ZN9DhcpClass18request_DHCP_leaseEv+0x2e4>
    6416:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    641a:	dc 01       	movw	r26, r24
    641c:	cb 01       	movw	r24, r22
    641e:	88 19       	sub	r24, r8
    6420:	99 09       	sbc	r25, r9
    6422:	aa 09       	sbc	r26, r10
    6424:	bb 09       	sbc	r27, r11
    6426:	f3 01       	movw	r30, r6
    6428:	42 ad       	sts	0x62, r20
    642a:	53 ad       	sts	0x63, r21
    642c:	64 ad       	sts	0x64, r22
    642e:	75 ad       	sts	0x65, r23
    6430:	48 17       	cp	r20, r24
    6432:	59 07       	cpc	r21, r25
    6434:	6a 07       	cpc	r22, r26
    6436:	7b 07       	cpc	r23, r27
    6438:	30 f0       	brcs	.+12     	; 0x6446 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2f0>
    
    int result = 0;
    
    unsigned long startTime = millis();
    
    while(_dhcp_state != STATE_DHCP_LEASED)
    643a:	ad 81       	ldd	r26, Y+5	; 0x05
    643c:	be 81       	ldd	r27, Y+6	; 0x06
    643e:	8c 91       	ld	r24, X
    6440:	83 30       	cpi	r24, 0x03	; 3
    6442:	09 f0       	breq	.+2      	; 0x6446 <_ZN9DhcpClass18request_DHCP_leaseEv+0x2f0>
    6444:	f2 ce       	rjmp	.-540    	; 0x622a <_ZN9DhcpClass18request_DHCP_leaseEv+0xd4>
        if(result != 1 && ((millis() - startTime) > _timeout))
            break;
    }
    
    // We're done with the socket now
    _dhcpUdpSocket.stop();
    6446:	8f 81       	ldd	r24, Y+7	; 0x07
    6448:	98 85       	ldd	r25, Y+8	; 0x08
    644a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN11EthernetUDP4stopEv>
    _dhcpTransactionId++;
    644e:	f3 01       	movw	r30, r6
    6450:	84 81       	ldd	r24, Z+4	; 0x04
    6452:	95 81       	ldd	r25, Z+5	; 0x05
    6454:	a6 81       	ldd	r26, Z+6	; 0x06
    6456:	b7 81       	ldd	r27, Z+7	; 0x07
    6458:	01 96       	adiw	r24, 0x01	; 1
    645a:	a1 1d       	adc	r26, r1
    645c:	b1 1d       	adc	r27, r1
    645e:	84 83       	std	Z+4, r24	; 0x04
    6460:	95 83       	std	Z+5, r25	; 0x05
    6462:	a6 83       	std	Z+6, r26	; 0x06
    6464:	b7 83       	std	Z+7, r27	; 0x07

    return result;
    6466:	02 c0       	rjmp	.+4      	; 0x646c <_ZN9DhcpClass18request_DHCP_leaseEv+0x316>
    _dhcpInitialTransactionId = _dhcpTransactionId;

    if (_dhcpUdpSocket.begin(DHCP_CLIENT_PORT) == 0)
    {
      // Couldn't get a socket
      return 0;
    6468:	cc 24       	eor	r12, r12
    646a:	dd 24       	eor	r13, r13
    // We're done with the socket now
    _dhcpUdpSocket.stop();
    _dhcpTransactionId++;

    return result;
}
    646c:	8c 2d       	mov	r24, r12
    646e:	9d 2d       	mov	r25, r13
    6470:	2a 96       	adiw	r28, 0x0a	; 10
    6472:	0f b6       	in	r0, 0x3f	; 63
    6474:	f8 94       	cli
    6476:	de bf       	out	0x3e, r29	; 62
    6478:	0f be       	out	0x3f, r0	; 63
    647a:	cd bf       	out	0x3d, r28	; 61
    647c:	df 91       	pop	r29
    647e:	cf 91       	pop	r28
    6480:	1f 91       	pop	r17
    6482:	0f 91       	pop	r16
    6484:	ff 90       	pop	r15
    6486:	ef 90       	pop	r14
    6488:	df 90       	pop	r13
    648a:	cf 90       	pop	r12
    648c:	bf 90       	pop	r11
    648e:	af 90       	pop	r10
    6490:	9f 90       	pop	r9
    6492:	8f 90       	pop	r8
    6494:	7f 90       	pop	r7
    6496:	6f 90       	pop	r6
    6498:	5f 90       	pop	r5
    649a:	4f 90       	pop	r4
    649c:	3f 90       	pop	r3
    649e:	2f 90       	pop	r2
    64a0:	08 95       	ret

000064a2 <_ZN9DhcpClass10checkLeaseEv>:
    1/DHCP_CHECK_RENEW_FAIL: renew failed
    2/DHCP_CHECK_RENEW_OK: renew success
    3/DHCP_CHECK_REBIND_FAIL: rebind fail
    4/DHCP_CHECK_REBIND_OK: rebind success
*/
int DhcpClass::checkLease(){
    64a2:	6f 92       	push	r6
    64a4:	7f 92       	push	r7
    64a6:	8f 92       	push	r8
    64a8:	9f 92       	push	r9
    64aa:	af 92       	push	r10
    64ac:	bf 92       	push	r11
    64ae:	cf 92       	push	r12
    64b0:	df 92       	push	r13
    64b2:	ef 92       	push	r14
    64b4:	ff 92       	push	r15
    64b6:	0f 93       	push	r16
    64b8:	1f 93       	push	r17
    64ba:	cf 93       	push	r28
    64bc:	df 93       	push	r29
    64be:	ec 01       	movw	r28, r24
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    64c0:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    signed long snow = (long)now;
    64c4:	c6 2e       	mov	r12, r22
    64c6:	d7 2e       	mov	r13, r23
    64c8:	e8 2e       	mov	r14, r24
    64ca:	f9 2e       	mov	r15, r25
    int rc=DHCP_CHECK_NONE;
    if (_lastCheck != 0){
    64cc:	8e a9       	sts	0x4e, r24
    64ce:	9f a9       	sts	0x4f, r25
    64d0:	a8 ad       	sts	0x68, r26
    64d2:	b9 ad       	sts	0x69, r27
    64d4:	00 97       	sbiw	r24, 0x00	; 0
    64d6:	a1 05       	cpc	r26, r1
    64d8:	b1 05       	cpc	r27, r1
    64da:	09 f4       	brne	.+2      	; 0x64de <_ZN9DhcpClass10checkLeaseEv+0x3c>
    64dc:	a2 c0       	rjmp	.+324    	; 0x6622 <_ZN9DhcpClass10checkLeaseEv+0x180>
        signed long factor;
        //calc how many ms past the timeout we are
        factor = snow - (long)_secTimeout;
    64de:	fe 01       	movw	r30, r28
    64e0:	ee 5b       	subi	r30, 0xBE	; 190
    64e2:	ff 4f       	sbci	r31, 0xFF	; 255
    64e4:	80 81       	ld	r24, Z
    64e6:	91 81       	ldd	r25, Z+1	; 0x01
    64e8:	a2 81       	ldd	r26, Z+2	; 0x02
    64ea:	b3 81       	ldd	r27, Z+3	; 0x03
    64ec:	a7 01       	movw	r20, r14
    64ee:	96 01       	movw	r18, r12
    64f0:	28 1b       	sub	r18, r24
    64f2:	39 0b       	sbc	r19, r25
    64f4:	4a 0b       	sbc	r20, r26
    64f6:	5b 0b       	sbc	r21, r27
    64f8:	ca 01       	movw	r24, r20
    64fa:	b9 01       	movw	r22, r18
        //if on or passed the timeout, reduce the counters
        if ( factor >= 0 ){
    64fc:	0a f4       	brpl	.+2      	; 0x6500 <_ZN9DhcpClass10checkLeaseEv+0x5e>
    64fe:	5a c0       	rjmp	.+180    	; 0x65b4 <_ZN9DhcpClass10checkLeaseEv+0x112>
            //next timeout should be now plus 1000 ms minus parts of second in factor
            _secTimeout = snow + 1000 - factor % 1000;
    6500:	3f 01       	movw	r6, r30
    6502:	0f 2e       	mov	r0, r31
    6504:	f8 ee       	ldi	r31, 0xE8	; 232
    6506:	8f 2e       	mov	r8, r31
    6508:	f3 e0       	ldi	r31, 0x03	; 3
    650a:	9f 2e       	mov	r9, r31
    650c:	f0 e0       	ldi	r31, 0x00	; 0
    650e:	af 2e       	mov	r10, r31
    6510:	f0 e0       	ldi	r31, 0x00	; 0
    6512:	bf 2e       	mov	r11, r31
    6514:	f0 2d       	mov	r31, r0
    6516:	8c 0c       	add	r8, r12
    6518:	9d 1c       	adc	r9, r13
    651a:	ae 1c       	adc	r10, r14
    651c:	bf 1c       	adc	r11, r15
    651e:	28 ee       	ldi	r18, 0xE8	; 232
    6520:	33 e0       	ldi	r19, 0x03	; 3
    6522:	40 e0       	ldi	r20, 0x00	; 0
    6524:	50 e0       	ldi	r21, 0x00	; 0
    6526:	0e 94 d6 41 	call	0x83ac	; 0x83ac <__divmodsi4>
    652a:	89 01       	movw	r16, r18
    652c:	9a 01       	movw	r18, r20
    652e:	dc 01       	movw	r26, r24
    6530:	cb 01       	movw	r24, r22
    6532:	b5 01       	movw	r22, r10
    6534:	a4 01       	movw	r20, r8
    6536:	48 1b       	sub	r20, r24
    6538:	59 0b       	sbc	r21, r25
    653a:	6a 0b       	sbc	r22, r26
    653c:	7b 0b       	sbc	r23, r27
    653e:	f3 01       	movw	r30, r6
    6540:	40 83       	st	Z, r20
    6542:	51 83       	std	Z+1, r21	; 0x01
    6544:	62 83       	std	Z+2, r22	; 0x02
    6546:	73 83       	std	Z+3, r23	; 0x03
            //how many seconds late are we, minimum 1
            factor = factor / 1000 +1;
    6548:	0f 5f       	subi	r16, 0xFF	; 255
    654a:	1f 4f       	sbci	r17, 0xFF	; 255
    654c:	2f 4f       	sbci	r18, 0xFF	; 255
    654e:	3f 4f       	sbci	r19, 0xFF	; 255
            
            //reduce the counters by that mouch
            //if we can assume that the cycle time (factor) is fairly constant
            //and if the remainder is less than cycle time * 2 
            //do it early instead of late
            if(_renewInSec < factor*2 )
    6550:	4e a5       	lds	r20, 0x6e
    6552:	5f a5       	lds	r21, 0x6f
    6554:	68 a9       	sts	0x48, r22
    6556:	79 a9       	sts	0x49, r23
    6558:	d9 01       	movw	r26, r18
    655a:	c8 01       	movw	r24, r16
    655c:	88 0f       	add	r24, r24
    655e:	99 1f       	adc	r25, r25
    6560:	aa 1f       	adc	r26, r26
    6562:	bb 1f       	adc	r27, r27
    6564:	48 17       	cp	r20, r24
    6566:	59 07       	cpc	r21, r25
    6568:	6a 07       	cpc	r22, r26
    656a:	7b 07       	cpc	r23, r27
    656c:	2c f4       	brge	.+10     	; 0x6578 <_ZN9DhcpClass10checkLeaseEv+0xd6>
                _renewInSec = 0;
    656e:	1e a6       	lds	r17, 0xbe
    6570:	1f a6       	lds	r17, 0xbf
    6572:	18 aa       	sts	0x98, r17
    6574:	19 aa       	sts	0x99, r17
    6576:	08 c0       	rjmp	.+16     	; 0x6588 <_ZN9DhcpClass10checkLeaseEv+0xe6>
            else
                _renewInSec -= factor;
    6578:	40 1b       	sub	r20, r16
    657a:	51 0b       	sbc	r21, r17
    657c:	62 0b       	sbc	r22, r18
    657e:	73 0b       	sbc	r23, r19
    6580:	4e a7       	lds	r20, 0x7e
    6582:	5f a7       	lds	r21, 0x7f
    6584:	68 ab       	sts	0x58, r22
    6586:	79 ab       	sts	0x59, r23
            
            if(_rebindInSec < factor*2 )
    6588:	4a a9       	sts	0x4a, r20
    658a:	5b a9       	sts	0x4b, r21
    658c:	6c a9       	sts	0x4c, r22
    658e:	7d a9       	sts	0x4d, r23
    6590:	48 17       	cp	r20, r24
    6592:	59 07       	cpc	r21, r25
    6594:	6a 07       	cpc	r22, r26
    6596:	7b 07       	cpc	r23, r27
    6598:	2c f4       	brge	.+10     	; 0x65a4 <_ZN9DhcpClass10checkLeaseEv+0x102>
                _rebindInSec = 0;
    659a:	1a aa       	sts	0x9a, r17
    659c:	1b aa       	sts	0x9b, r17
    659e:	1c aa       	sts	0x9c, r17
    65a0:	1d aa       	sts	0x9d, r17
    65a2:	08 c0       	rjmp	.+16     	; 0x65b4 <_ZN9DhcpClass10checkLeaseEv+0x112>
            else
                _rebindInSec -= factor;
    65a4:	40 1b       	sub	r20, r16
    65a6:	51 0b       	sbc	r21, r17
    65a8:	62 0b       	sbc	r22, r18
    65aa:	73 0b       	sbc	r23, r19
    65ac:	4a ab       	sts	0x5a, r20
    65ae:	5b ab       	sts	0x5b, r21
    65b0:	6c ab       	sts	0x5c, r22
    65b2:	7d ab       	sts	0x5d, r23
        }

        //if we have a lease but should renew, do it
        if (_dhcp_state == STATE_DHCP_LEASED && _renewInSec <=0){
    65b4:	fe 01       	movw	r30, r28
    65b6:	ea 5b       	subi	r30, 0xBA	; 186
    65b8:	ff 4f       	sbci	r31, 0xFF	; 255
    65ba:	20 81       	ld	r18, Z
    65bc:	23 30       	cpi	r18, 0x03	; 3
    65be:	a9 f4       	brne	.+42     	; 0x65ea <_ZN9DhcpClass10checkLeaseEv+0x148>
    65c0:	8e a5       	lds	r24, 0x6e
    65c2:	9f a5       	lds	r25, 0x6f
    65c4:	a8 a9       	sts	0x48, r26
    65c6:	b9 a9       	sts	0x49, r27
    65c8:	18 16       	cp	r1, r24
    65ca:	19 06       	cpc	r1, r25
    65cc:	1a 06       	cpc	r1, r26
    65ce:	1b 06       	cpc	r1, r27
    65d0:	8c f0       	brlt	.+34     	; 0x65f4 <_ZN9DhcpClass10checkLeaseEv+0x152>
            _dhcp_state = STATE_DHCP_REREQUEST;
    65d2:	8f 01       	movw	r16, r30
    65d4:	84 e0       	ldi	r24, 0x04	; 4
    65d6:	80 83       	st	Z, r24
            rc = 1 + request_DHCP_lease();
    65d8:	ce 01       	movw	r24, r28
    65da:	0e 94 ab 30 	call	0x6156	; 0x6156 <_ZN9DhcpClass18request_DHCP_leaseEv>
    65de:	01 96       	adiw	r24, 0x01	; 1
        }

        //if we have a lease or is renewing but should bind, do it
        if( (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START) && _rebindInSec <=0){
    65e0:	f8 01       	movw	r30, r16
    65e2:	20 81       	ld	r18, Z
    65e4:	23 30       	cpi	r18, 0x03	; 3
    65e6:	41 f0       	breq	.+16     	; 0x65f8 <_ZN9DhcpClass10checkLeaseEv+0x156>
    65e8:	02 c0       	rjmp	.+4      	; 0x65ee <_ZN9DhcpClass10checkLeaseEv+0x14c>
*/
int DhcpClass::checkLease(){
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    signed long snow = (long)now;
    int rc=DHCP_CHECK_NONE;
    65ea:	80 e0       	ldi	r24, 0x00	; 0
    65ec:	90 e0       	ldi	r25, 0x00	; 0
            _dhcp_state = STATE_DHCP_REREQUEST;
            rc = 1 + request_DHCP_lease();
        }

        //if we have a lease or is renewing but should bind, do it
        if( (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START) && _rebindInSec <=0){
    65ee:	22 23       	and	r18, r18
    65f0:	19 f0       	breq	.+6      	; 0x65f8 <_ZN9DhcpClass10checkLeaseEv+0x156>
    65f2:	26 c0       	rjmp	.+76     	; 0x6640 <_ZN9DhcpClass10checkLeaseEv+0x19e>
*/
int DhcpClass::checkLease(){
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    signed long snow = (long)now;
    int rc=DHCP_CHECK_NONE;
    65f4:	80 e0       	ldi	r24, 0x00	; 0
    65f6:	90 e0       	ldi	r25, 0x00	; 0
            _dhcp_state = STATE_DHCP_REREQUEST;
            rc = 1 + request_DHCP_lease();
        }

        //if we have a lease or is renewing but should bind, do it
        if( (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START) && _rebindInSec <=0){
    65f8:	4a a9       	sts	0x4a, r20
    65fa:	5b a9       	sts	0x4b, r21
    65fc:	6c a9       	sts	0x4c, r22
    65fe:	7d a9       	sts	0x4d, r23
    6600:	14 16       	cp	r1, r20
    6602:	15 06       	cpc	r1, r21
    6604:	16 06       	cpc	r1, r22
    6606:	17 06       	cpc	r1, r23
    6608:	dc f0       	brlt	.+54     	; 0x6640 <_ZN9DhcpClass10checkLeaseEv+0x19e>
            //this should basically restart completely
            _dhcp_state = STATE_DHCP_START;
    660a:	fe 01       	movw	r30, r28
    660c:	ea 5b       	subi	r30, 0xBA	; 186
    660e:	ff 4f       	sbci	r31, 0xFF	; 255
    6610:	10 82       	st	Z, r1
            reset_DHCP_lease();
    6612:	ce 01       	movw	r24, r28
    6614:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <_ZN9DhcpClass16reset_DHCP_leaseEv>
            rc = 3 + request_DHCP_lease();
    6618:	ce 01       	movw	r24, r28
    661a:	0e 94 ab 30 	call	0x6156	; 0x6156 <_ZN9DhcpClass18request_DHCP_leaseEv>
    661e:	03 96       	adiw	r24, 0x03	; 3
    6620:	0f c0       	rjmp	.+30     	; 0x6640 <_ZN9DhcpClass10checkLeaseEv+0x19e>
        }
    }
    else{
        _secTimeout = snow + 1000;
    6622:	fe 01       	movw	r30, r28
    6624:	ee 5b       	subi	r30, 0xBE	; 190
    6626:	ff 4f       	sbci	r31, 0xFF	; 255
    6628:	d7 01       	movw	r26, r14
    662a:	c6 01       	movw	r24, r12
    662c:	88 51       	subi	r24, 0x18	; 24
    662e:	9c 4f       	sbci	r25, 0xFC	; 252
    6630:	af 4f       	sbci	r26, 0xFF	; 255
    6632:	bf 4f       	sbci	r27, 0xFF	; 255
    6634:	80 83       	st	Z, r24
    6636:	91 83       	std	Z+1, r25	; 0x01
    6638:	a2 83       	std	Z+2, r26	; 0x02
    663a:	b3 83       	std	Z+3, r27	; 0x03
*/
int DhcpClass::checkLease(){
    //this uses a signed / unsigned trick to deal with millis overflow
    unsigned long now = millis();
    signed long snow = (long)now;
    int rc=DHCP_CHECK_NONE;
    663c:	80 e0       	ldi	r24, 0x00	; 0
    663e:	90 e0       	ldi	r25, 0x00	; 0
    }
    else{
        _secTimeout = snow + 1000;
    }

    _lastCheck = now;
    6640:	ce aa       	sts	0x9e, r28
    6642:	df aa       	sts	0x9f, r29
    6644:	e8 ae       	sts	0xb8, r30
    6646:	f9 ae       	sts	0xb9, r31
    return rc;
}
    6648:	df 91       	pop	r29
    664a:	cf 91       	pop	r28
    664c:	1f 91       	pop	r17
    664e:	0f 91       	pop	r16
    6650:	ff 90       	pop	r15
    6652:	ef 90       	pop	r14
    6654:	df 90       	pop	r13
    6656:	cf 90       	pop	r12
    6658:	bf 90       	pop	r11
    665a:	af 90       	pop	r10
    665c:	9f 90       	pop	r9
    665e:	8f 90       	pop	r8
    6660:	7f 90       	pop	r7
    6662:	6f 90       	pop	r6
    6664:	08 95       	ret

00006666 <_ZN9DhcpClass13beginWithDHCPEPhmm>:
#include "Dhcp.h"
#include "..\Arduino.h"
#include "util.h"

int DhcpClass::beginWithDHCP(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)
{
    6666:	af 92       	push	r10
    6668:	bf 92       	push	r11
    666a:	cf 92       	push	r12
    666c:	df 92       	push	r13
    666e:	ef 92       	push	r14
    6670:	ff 92       	push	r15
    6672:	0f 93       	push	r16
    6674:	1f 93       	push	r17
    6676:	cf 93       	push	r28
    6678:	df 93       	push	r29
    667a:	6c 01       	movw	r12, r24
    667c:	b6 2e       	mov	r11, r22
    667e:	a7 2e       	mov	r10, r23
    6680:	da 01       	movw	r26, r20
    6682:	c9 01       	movw	r24, r18
    _dhcpLeaseTime=0;
    6684:	f6 01       	movw	r30, r12
    6686:	12 a2       	lds	r17, 0x92
    6688:	13 a2       	lds	r17, 0x93
    668a:	14 a2       	lds	r17, 0x94
    668c:	15 a2       	lds	r17, 0x95
    _dhcpT1=0;
    668e:	16 a2       	lds	r17, 0x96
    6690:	17 a2       	lds	r17, 0x97
    6692:	10 a6       	lds	r17, 0xb0
    6694:	11 a6       	lds	r17, 0xb1
    _dhcpT2=0;
    6696:	12 a6       	lds	r17, 0xb2
    6698:	13 a6       	lds	r17, 0xb3
    669a:	14 a6       	lds	r17, 0xb4
    669c:	15 a6       	lds	r17, 0xb5
    _lastCheck=0;
    669e:	16 aa       	sts	0x96, r17
    66a0:	17 aa       	sts	0x97, r17
    66a2:	10 ae       	sts	0xb0, r17
    66a4:	11 ae       	sts	0xb1, r17
    _timeout = timeout;
    66a6:	82 af       	sts	0x72, r24
    66a8:	93 af       	sts	0x73, r25
    66aa:	a4 af       	sts	0x74, r26
    66ac:	b5 af       	sts	0x75, r27
    _responseTimeout = responseTimeout;
    66ae:	fe 96       	adiw	r30, 0x3e	; 62
    66b0:	e0 82       	st	Z, r14
    66b2:	f1 82       	std	Z+1, r15	; 0x01
    66b4:	02 83       	std	Z+2, r16	; 0x02
    66b6:	13 83       	std	Z+3, r17	; 0x03

    // zero out _dhcpMacAddr
    memset(_dhcpMacAddr, 0, 6); 
    66b8:	e6 01       	movw	r28, r12
    66ba:	28 96       	adiw	r28, 0x08	; 8
    66bc:	86 e0       	ldi	r24, 0x06	; 6
    66be:	fe 01       	movw	r30, r28
    66c0:	11 92       	st	Z+, r1
    66c2:	8a 95       	dec	r24
    66c4:	e9 f7       	brne	.-6      	; 0x66c0 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x5a>
    reset_DHCP_lease();
    66c6:	c6 01       	movw	r24, r12
    66c8:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <_ZN9DhcpClass16reset_DHCP_leaseEv>

    memcpy((void*)_dhcpMacAddr, (void*)mac, 6);
    66cc:	eb 2d       	mov	r30, r11
    66ce:	fa 2d       	mov	r31, r10
    66d0:	86 e0       	ldi	r24, 0x06	; 6
    66d2:	01 90       	ld	r0, Z+
    66d4:	09 92       	st	Y+, r0
    66d6:	81 50       	subi	r24, 0x01	; 1
    66d8:	e1 f7       	brne	.-8      	; 0x66d2 <_ZN9DhcpClass13beginWithDHCPEPhmm+0x6c>
    _dhcp_state = STATE_DHCP_START;
    66da:	f6 01       	movw	r30, r12
    66dc:	ea 5b       	subi	r30, 0xBA	; 186
    66de:	ff 4f       	sbci	r31, 0xFF	; 255
    66e0:	10 82       	st	Z, r1
    return request_DHCP_lease();
    66e2:	c6 01       	movw	r24, r12
    66e4:	0e 94 ab 30 	call	0x6156	; 0x6156 <_ZN9DhcpClass18request_DHCP_leaseEv>
}
    66e8:	df 91       	pop	r29
    66ea:	cf 91       	pop	r28
    66ec:	1f 91       	pop	r17
    66ee:	0f 91       	pop	r16
    66f0:	ff 90       	pop	r15
    66f2:	ef 90       	pop	r14
    66f4:	df 90       	pop	r13
    66f6:	cf 90       	pop	r12
    66f8:	bf 90       	pop	r11
    66fa:	af 90       	pop	r10
    66fc:	08 95       	ret

000066fe <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
    66fe:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    6700:	8b e6       	ldi	r24, 0x6B	; 107
    6702:	96 e0       	ldi	r25, 0x06	; 6
    6704:	60 e0       	ldi	r22, 0x00	; 0
    6706:	40 e0       	ldi	r20, 0x00	; 0
    6708:	20 e0       	ldi	r18, 0x00	; 0
    670a:	00 e0       	ldi	r16, 0x00	; 0
    670c:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN9IPAddressC1Ehhhh>
    6710:	0f 91       	pop	r16
    6712:	08 95       	ret

00006714 <_ZN9DNSClient5beginERK9IPAddress>:
#define INVALID_SERVER   -2
#define TRUNCATED        -3
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    6714:	cf 93       	push	r28
    6716:	df 93       	push	r29
    6718:	fc 01       	movw	r30, r24

#include "Printable.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    671a:	eb 01       	movw	r28, r22
    671c:	8a 81       	ldd	r24, Y+2	; 0x02
    671e:	9b 81       	ldd	r25, Y+3	; 0x03
    6720:	ac 81       	ldd	r26, Y+4	; 0x04
    6722:	bd 81       	ldd	r27, Y+5	; 0x05
    6724:	82 83       	std	Z+2, r24	; 0x02
    6726:	93 83       	std	Z+3, r25	; 0x03
    6728:	a4 83       	std	Z+4, r26	; 0x04
    672a:	b5 83       	std	Z+5, r27	; 0x05
    iDNSServer = aDNSServer;
    iRequestId = 0;
    672c:	17 82       	std	Z+7, r1	; 0x07
    672e:	16 82       	std	Z+6, r1	; 0x06
}
    6730:	df 91       	pop	r29
    6732:	cf 91       	pop	r28
    6734:	08 95       	ret

00006736 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>:


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    6736:	0f 93       	push	r16
    6738:	1f 93       	push	r17
    673a:	cf 93       	push	r28
    673c:	df 93       	push	r29
    673e:	db 01       	movw	r26, r22
    6740:	ea 01       	movw	r28, r20
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    6742:	8c 91       	ld	r24, X
    6744:	88 23       	and	r24, r24
    6746:	29 f0       	breq	.+10     	; 0x6752 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x1c>
    iDNSServer = aDNSServer;
    iRequestId = 0;
}


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
    6748:	fb 01       	movw	r30, r22
    674a:	31 96       	adiw	r30, 0x01	; 1
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    674c:	81 91       	ld	r24, Z+
    674e:	88 23       	and	r24, r24
    6750:	e9 f7       	brne	.-6      	; 0x674c <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x16>
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
                    segment++;
                    segmentValue = 0;
    6752:	80 e0       	ldi	r24, 0x00	; 0
    6754:	90 e0       	ldi	r25, 0x00	; 0
    6756:	40 e0       	ldi	r20, 0x00	; 0
    6758:	50 e0       	ldi	r21, 0x00	; 0
    675a:	00 e0       	ldi	r16, 0x00	; 0
    675c:	10 e0       	ldi	r17, 0x00	; 0
    675e:	1c c0       	rjmp	.+56     	; 0x6798 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
        while (*p && (segment < 4))
        {
            if (*p == '.')
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    6760:	8f 3f       	cpi	r24, 0xFF	; 255
    6762:	91 05       	cpc	r25, r1
    6764:	09 f0       	breq	.+2      	; 0x6768 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x32>
    6766:	54 f5       	brge	.+84     	; 0x67bc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x86>
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    6768:	fe 01       	movw	r30, r28
    676a:	e4 0f       	add	r30, r20
    676c:	f5 1f       	adc	r31, r21
    676e:	82 83       	std	Z+2, r24	; 0x02
                    segment++;
    6770:	4f 5f       	subi	r20, 0xFF	; 255
    6772:	5f 4f       	sbci	r21, 0xFF	; 255
                    segmentValue = 0;
    6774:	c8 01       	movw	r24, r16
    6776:	10 c0       	rjmp	.+32     	; 0x6798 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x62>
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    6778:	9c 01       	movw	r18, r24
    677a:	22 0f       	add	r18, r18
    677c:	33 1f       	adc	r19, r19
    677e:	88 0f       	add	r24, r24
    6780:	99 1f       	adc	r25, r25
    6782:	88 0f       	add	r24, r24
    6784:	99 1f       	adc	r25, r25
    6786:	88 0f       	add	r24, r24
    6788:	99 1f       	adc	r25, r25
    678a:	28 0f       	add	r18, r24
    678c:	39 1f       	adc	r19, r25
    678e:	86 2f       	mov	r24, r22
    6790:	90 e0       	ldi	r25, 0x00	; 0
    6792:	c0 97       	sbiw	r24, 0x30	; 48
    6794:	82 0f       	add	r24, r18
    6796:	93 1f       	adc	r25, r19
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    6798:	6d 91       	ld	r22, X+
    679a:	66 23       	and	r22, r22
    679c:	e1 f0       	breq	.+56     	; 0x67d6 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa0>
    679e:	44 30       	cpi	r20, 0x04	; 4
    67a0:	51 05       	cpc	r21, r1
    67a2:	cc f4       	brge	.+50     	; 0x67d6 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0xa0>
        {
            if (*p == '.')
    67a4:	6e 32       	cpi	r22, 0x2E	; 46
    67a6:	41 f7       	brne	.-48     	; 0x6778 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x42>
    67a8:	db cf       	rjmp	.-74     	; 0x6760 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x2a>
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    67aa:	44 30       	cpi	r20, 0x04	; 4
    67ac:	51 05       	cpc	r21, r1
    67ae:	4c f4       	brge	.+18     	; 0x67c2 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x8c>
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    67b0:	c4 0f       	add	r28, r20
    67b2:	d5 1f       	adc	r29, r21
    67b4:	8a 83       	std	Y+2, r24	; 0x02
            return 1;
    67b6:	81 e0       	ldi	r24, 0x01	; 1
    67b8:	90 e0       	ldi	r25, 0x00	; 0
    67ba:	08 c0       	rjmp	.+16     	; 0x67cc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x96>
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
                {
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
    67bc:	80 e0       	ldi	r24, 0x00	; 0
    67be:	90 e0       	ldi	r25, 0x00	; 0
    67c0:	05 c0       	rjmp	.+10     	; 0x67cc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x96>
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
    67c2:	80 e0       	ldi	r24, 0x00	; 0
    67c4:	90 e0       	ldi	r25, 0x00	; 0
    67c6:	02 c0       	rjmp	.+4      	; 0x67cc <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x96>
    67c8:	80 e0       	ldi	r24, 0x00	; 0
    67ca:	90 e0       	ldi	r25, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    67cc:	df 91       	pop	r29
    67ce:	cf 91       	pop	r28
    67d0:	1f 91       	pop	r17
    67d2:	0f 91       	pop	r16
    67d4:	08 95       	ret
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    67d6:	8f 3f       	cpi	r24, 0xFF	; 255
    67d8:	91 05       	cpc	r25, r1
    67da:	39 f3       	breq	.-50     	; 0x67aa <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x74>
    67dc:	34 f3       	brlt	.-52     	; 0x67aa <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x74>
    67de:	f4 cf       	rjmp	.-24     	; 0x67c8 <_ZN9DNSClient9inet_atonEPKcR9IPAddress+0x92>

000067e0 <_ZN9DNSClient12BuildRequestEPKc>:

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
    67e0:	af 92       	push	r10
    67e2:	bf 92       	push	r11
    67e4:	cf 92       	push	r12
    67e6:	df 92       	push	r13
    67e8:	ef 92       	push	r14
    67ea:	ff 92       	push	r15
    67ec:	0f 93       	push	r16
    67ee:	1f 93       	push	r17
    67f0:	cf 93       	push	r28
    67f2:	df 93       	push	r29
    67f4:	00 d0       	rcall	.+0      	; 0x67f6 <_ZN9DNSClient12BuildRequestEPKc+0x16>
    67f6:	0f 92       	push	r0
    67f8:	cd b7       	in	r28, 0x3d	; 61
    67fa:	de b7       	in	r29, 0x3e	; 62
    67fc:	8c 01       	movw	r16, r24
    67fe:	7b 01       	movw	r14, r22
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    6800:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    6804:	dc 01       	movw	r26, r24
    6806:	cb 01       	movw	r24, r22
    6808:	f8 01       	movw	r30, r16
    680a:	97 83       	std	Z+7, r25	; 0x07
    680c:	86 83       	std	Z+6, r24	; 0x06
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    680e:	aa 24       	eor	r10, r10
    6810:	bb 24       	eor	r11, r11
    6812:	68 94       	set
    6814:	a3 f8       	bld	r10, 3
    6816:	a0 0e       	add	r10, r16
    6818:	b1 1e       	adc	r11, r17
    681a:	b8 01       	movw	r22, r16
    681c:	6a 5f       	subi	r22, 0xFA	; 250
    681e:	7f 4f       	sbci	r23, 0xFF	; 255
    6820:	c5 01       	movw	r24, r10
    6822:	42 e0       	ldi	r20, 0x02	; 2
    6824:	50 e0       	ldi	r21, 0x00	; 0
    6826:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    682a:	81 e0       	ldi	r24, 0x01	; 1
    682c:	90 e0       	ldi	r25, 0x00	; 0
    682e:	9b 83       	std	Y+3, r25	; 0x03
    6830:	8a 83       	std	Y+2, r24	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6832:	c5 01       	movw	r24, r10
    6834:	be 01       	movw	r22, r28
    6836:	6e 5f       	subi	r22, 0xFE	; 254
    6838:	7f 4f       	sbci	r23, 0xFF	; 255
    683a:	42 e0       	ldi	r20, 0x02	; 2
    683c:	50 e0       	ldi	r21, 0x00	; 0
    683e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(1);  // One question record
    6842:	80 e0       	ldi	r24, 0x00	; 0
    6844:	91 e0       	ldi	r25, 0x01	; 1
    6846:	9b 83       	std	Y+3, r25	; 0x03
    6848:	8a 83       	std	Y+2, r24	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    684a:	c5 01       	movw	r24, r10
    684c:	be 01       	movw	r22, r28
    684e:	6e 5f       	subi	r22, 0xFE	; 254
    6850:	7f 4f       	sbci	r23, 0xFF	; 255
    6852:	42 e0       	ldi	r20, 0x02	; 2
    6854:	50 e0       	ldi	r21, 0x00	; 0
    6856:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = 0;  // Zero answer records
    685a:	1b 82       	std	Y+3, r1	; 0x03
    685c:	1a 82       	std	Y+2, r1	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    685e:	c5 01       	movw	r24, r10
    6860:	be 01       	movw	r22, r28
    6862:	6e 5f       	subi	r22, 0xFE	; 254
    6864:	7f 4f       	sbci	r23, 0xFF	; 255
    6866:	42 e0       	ldi	r20, 0x02	; 2
    6868:	50 e0       	ldi	r21, 0x00	; 0
    686a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    686e:	c5 01       	movw	r24, r10
    6870:	be 01       	movw	r22, r28
    6872:	6e 5f       	subi	r22, 0xFE	; 254
    6874:	7f 4f       	sbci	r23, 0xFF	; 255
    6876:	42 e0       	ldi	r20, 0x02	; 2
    6878:	50 e0       	ldi	r21, 0x00	; 0
    687a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    687e:	c5 01       	movw	r24, r10
    6880:	be 01       	movw	r22, r28
    6882:	6e 5f       	subi	r22, 0xFE	; 254
    6884:	7f 4f       	sbci	r23, 0xFF	; 255
    6886:	42 e0       	ldi	r20, 0x02	; 2
    6888:	50 e0       	ldi	r21, 0x00	; 0
    688a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    688e:	f7 01       	movw	r30, r14
    6890:	80 81       	ld	r24, Z
    6892:	88 23       	and	r24, r24
    6894:	11 f5       	brne	.+68     	; 0x68da <_ZN9DNSClient12BuildRequestEPKc+0xfa>
    6896:	27 c0       	rjmp	.+78     	; 0x68e6 <_ZN9DNSClient12BuildRequestEPKc+0x106>
    6898:	7f 01       	movw	r14, r30
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    689a:	81 91       	ld	r24, Z+
    689c:	88 23       	and	r24, r24
    689e:	09 f4       	brne	.+2      	; 0x68a2 <_ZN9DNSClient12BuildRequestEPKc+0xc2>
    68a0:	51 c0       	rjmp	.+162    	; 0x6944 <_ZN9DNSClient12BuildRequestEPKc+0x164>
    68a2:	8e 32       	cpi	r24, 0x2E	; 46
    68a4:	c9 f7       	brne	.-14     	; 0x6898 <_ZN9DNSClient12BuildRequestEPKc+0xb8>
    68a6:	4e c0       	rjmp	.+156    	; 0x6944 <_ZN9DNSClient12BuildRequestEPKc+0x164>
        }

        if (end-start > 0)
        {
            // Write out the size of this section
            len = end-start;
    68a8:	09 83       	std	Y+1, r16	; 0x01
            iUdp.write(&len, sizeof(len));
    68aa:	c5 01       	movw	r24, r10
    68ac:	be 01       	movw	r22, r28
    68ae:	6f 5f       	subi	r22, 0xFF	; 255
    68b0:	7f 4f       	sbci	r23, 0xFF	; 255
    68b2:	41 e0       	ldi	r20, 0x01	; 1
    68b4:	50 e0       	ldi	r21, 0x00	; 0
    68b6:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    68ba:	c5 01       	movw	r24, r10
    68bc:	b6 01       	movw	r22, r12
    68be:	a8 01       	movw	r20, r16
    68c0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    68c4:	f7 01       	movw	r30, r14
    68c6:	80 81       	ld	r24, Z
    68c8:	88 23       	and	r24, r24
    68ca:	69 f0       	breq	.+26     	; 0x68e6 <_ZN9DNSClient12BuildRequestEPKc+0x106>
            len = end-start;
            iUdp.write(&len, sizeof(len));
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
        }
        start = end+1;
    68cc:	67 01       	movw	r12, r14
    68ce:	08 94       	sec
    68d0:	c1 1c       	adc	r12, r1
    68d2:	d1 1c       	adc	r13, r1
    68d4:	9c 2d       	mov	r25, r12
    68d6:	8d 2d       	mov	r24, r13
    68d8:	03 c0       	rjmp	.+6      	; 0x68e0 <_ZN9DNSClient12BuildRequestEPKc+0x100>
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    68da:	67 01       	movw	r12, r14
    68dc:	9e 2d       	mov	r25, r14
    68de:	8f 2d       	mov	r24, r15
            len = end-start;
            iUdp.write(&len, sizeof(len));
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
        }
        start = end+1;
    68e0:	e9 2f       	mov	r30, r25
    68e2:	f8 2f       	mov	r31, r24
    68e4:	d9 cf       	rjmp	.-78     	; 0x6898 <_ZN9DNSClient12BuildRequestEPKc+0xb8>
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    68e6:	19 82       	std	Y+1, r1	; 0x01
    iUdp.write(&len, sizeof(len));
    68e8:	c5 01       	movw	r24, r10
    68ea:	be 01       	movw	r22, r28
    68ec:	6f 5f       	subi	r22, 0xFF	; 255
    68ee:	7f 4f       	sbci	r23, 0xFF	; 255
    68f0:	41 e0       	ldi	r20, 0x01	; 1
    68f2:	50 e0       	ldi	r21, 0x00	; 0
    68f4:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    68f8:	00 e0       	ldi	r16, 0x00	; 0
    68fa:	11 e0       	ldi	r17, 0x01	; 1
    68fc:	1b 83       	std	Y+3, r17	; 0x03
    68fe:	0a 83       	std	Y+2, r16	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6900:	c5 01       	movw	r24, r10
    6902:	be 01       	movw	r22, r28
    6904:	6e 5f       	subi	r22, 0xFE	; 254
    6906:	7f 4f       	sbci	r23, 0xFF	; 255
    6908:	42 e0       	ldi	r20, 0x02	; 2
    690a:	50 e0       	ldi	r21, 0x00	; 0
    690c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    6910:	1b 83       	std	Y+3, r17	; 0x03
    6912:	0a 83       	std	Y+2, r16	; 0x02
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6914:	c5 01       	movw	r24, r10
    6916:	be 01       	movw	r22, r28
    6918:	6e 5f       	subi	r22, 0xFE	; 254
    691a:	7f 4f       	sbci	r23, 0xFF	; 255
    691c:	42 e0       	ldi	r20, 0x02	; 2
    691e:	50 e0       	ldi	r21, 0x00	; 0
    6920:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN11EthernetUDP5writeEPKhj>
    // Success!  Everything buffered okay
    return 1;
}
    6924:	81 e0       	ldi	r24, 0x01	; 1
    6926:	90 e0       	ldi	r25, 0x00	; 0
    6928:	0f 90       	pop	r0
    692a:	0f 90       	pop	r0
    692c:	0f 90       	pop	r0
    692e:	df 91       	pop	r29
    6930:	cf 91       	pop	r28
    6932:	1f 91       	pop	r17
    6934:	0f 91       	pop	r16
    6936:	ff 90       	pop	r15
    6938:	ef 90       	pop	r14
    693a:	df 90       	pop	r13
    693c:	cf 90       	pop	r12
    693e:	bf 90       	pop	r11
    6940:	af 90       	pop	r10
    6942:	08 95       	ret
        while (*end && (*end != '.') )
        {
            end++;
        }

        if (end-start > 0)
    6944:	87 01       	movw	r16, r14
    6946:	0c 19       	sub	r16, r12
    6948:	1d 09       	sbc	r17, r13
    694a:	10 16       	cp	r1, r16
    694c:	11 06       	cpc	r1, r17
    694e:	0c f4       	brge	.+2      	; 0x6952 <_ZN9DNSClient12BuildRequestEPKc+0x172>
    6950:	ab cf       	rjmp	.-170    	; 0x68a8 <_ZN9DNSClient12BuildRequestEPKc+0xc8>
    6952:	b8 cf       	rjmp	.-144    	; 0x68c4 <_ZN9DNSClient12BuildRequestEPKc+0xe4>

00006954 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>:
    return 1;
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    6954:	2f 92       	push	r2
    6956:	3f 92       	push	r3
    6958:	4f 92       	push	r4
    695a:	5f 92       	push	r5
    695c:	6f 92       	push	r6
    695e:	7f 92       	push	r7
    6960:	8f 92       	push	r8
    6962:	9f 92       	push	r9
    6964:	af 92       	push	r10
    6966:	bf 92       	push	r11
    6968:	cf 92       	push	r12
    696a:	df 92       	push	r13
    696c:	ef 92       	push	r14
    696e:	ff 92       	push	r15
    6970:	0f 93       	push	r16
    6972:	1f 93       	push	r17
    6974:	cf 93       	push	r28
    6976:	df 93       	push	r29
    6978:	cd b7       	in	r28, 0x3d	; 61
    697a:	de b7       	in	r29, 0x3e	; 62
    697c:	63 97       	sbiw	r28, 0x13	; 19
    697e:	0f b6       	in	r0, 0x3f	; 63
    6980:	f8 94       	cli
    6982:	de bf       	out	0x3e, r29	; 62
    6984:	0f be       	out	0x3f, r0	; 63
    6986:	cd bf       	out	0x3d, r28	; 61
    6988:	6c 01       	movw	r12, r24
    698a:	8b 01       	movw	r16, r22
    698c:	1a 01       	movw	r2, r20
    uint32_t startTime = millis();
    698e:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    6992:	2b 01       	movw	r4, r22
    6994:	3c 01       	movw	r6, r24

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    6996:	ee 24       	eor	r14, r14
    6998:	ff 24       	eor	r15, r15
    699a:	68 94       	set
    699c:	e3 f8       	bld	r14, 3
    699e:	ec 0c       	add	r14, r12
    69a0:	fd 1c       	adc	r15, r13
    {
        if((millis() - startTime) > aTimeout)
    69a2:	48 01       	movw	r8, r16
    69a4:	aa 24       	eor	r10, r10
    69a6:	bb 24       	eor	r11, r11
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    69a8:	14 c0       	rjmp	.+40     	; 0x69d2 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x7e>
    {
        if((millis() - startTime) > aTimeout)
    69aa:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    69ae:	dc 01       	movw	r26, r24
    69b0:	cb 01       	movw	r24, r22
    69b2:	84 19       	sub	r24, r4
    69b4:	95 09       	sbc	r25, r5
    69b6:	a6 09       	sbc	r26, r6
    69b8:	b7 09       	sbc	r27, r7
    69ba:	88 16       	cp	r8, r24
    69bc:	99 06       	cpc	r9, r25
    69be:	aa 06       	cpc	r10, r26
    69c0:	bb 06       	cpc	r11, r27
    69c2:	08 f4       	brcc	.+2      	; 0x69c6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x72>
    69c4:	3b c1       	rjmp	.+630    	; 0x6c3c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2e8>
            return TIMED_OUT;
        delay(50);
    69c6:	62 e3       	ldi	r22, 0x32	; 50
    69c8:	70 e0       	ldi	r23, 0x00	; 0
    69ca:	80 e0       	ldi	r24, 0x00	; 0
    69cc:	90 e0       	ldi	r25, 0x00	; 0
    69ce:	0e 94 ca 21 	call	0x4394	; 0x4394 <delay>
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    69d2:	0e 2d       	mov	r16, r14
    69d4:	1f 2d       	mov	r17, r15
    69d6:	c7 01       	movw	r24, r14
    69d8:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_ZN11EthernetUDP11parsePacketEv>
    69dc:	18 16       	cp	r1, r24
    69de:	19 06       	cpc	r1, r25
    69e0:	24 f7       	brge	.-56     	; 0x69aa <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x56>

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    69e2:	f6 01       	movw	r30, r12
    69e4:	42 81       	ldd	r20, Z+2	; 0x02
    69e6:	53 81       	ldd	r21, Z+3	; 0x03
    69e8:	64 81       	ldd	r22, Z+4	; 0x04
    69ea:	75 81       	ldd	r23, Z+5	; 0x05
    69ec:	81 8d       	ldd	r24, Z+25	; 0x19
    69ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    69f0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    69f2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    69f4:	48 17       	cp	r20, r24
    69f6:	59 07       	cpc	r21, r25
    69f8:	6a 07       	cpc	r22, r26
    69fa:	7b 07       	cpc	r23, r27
    69fc:	09 f0       	breq	.+2      	; 0x6a00 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xac>
    69fe:	21 c1       	rjmp	.+578    	; 0x6c42 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ee>
    6a00:	85 8d       	ldd	r24, Z+29	; 0x1d
    6a02:	96 8d       	ldd	r25, Z+30	; 0x1e
    6a04:	85 33       	cpi	r24, 0x35	; 53
    6a06:	91 05       	cpc	r25, r1
    6a08:	09 f0       	breq	.+2      	; 0x6a0c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xb8>
    6a0a:	1e c1       	rjmp	.+572    	; 0x6c48 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2f4>
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    6a0c:	8e 2d       	mov	r24, r14
    6a0e:	9f 2d       	mov	r25, r15
    6a10:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN11EthernetUDP9availableEv>
    6a14:	8c 30       	cpi	r24, 0x0C	; 12
    6a16:	91 05       	cpc	r25, r1
    6a18:	0c f4       	brge	.+2      	; 0x6a1c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xc8>
    6a1a:	19 c1       	rjmp	.+562    	; 0x6c4e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fa>
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    6a1c:	8e 2d       	mov	r24, r14
    6a1e:	9f 2d       	mov	r25, r15
    6a20:	be 01       	movw	r22, r28
    6a22:	68 5f       	subi	r22, 0xF8	; 248
    6a24:	7f 4f       	sbci	r23, 0xFF	; 255
    6a26:	4c e0       	ldi	r20, 0x0C	; 12
    6a28:	50 e0       	ldi	r21, 0x00	; 0
    6a2a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    6a2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a30:	9b 85       	ldd	r25, Y+11	; 0x0b
    6a32:	58 2f       	mov	r21, r24
    6a34:	49 2f       	mov	r20, r25
    6a36:	5f 83       	std	Y+7, r21	; 0x07
    6a38:	4e 83       	std	Y+6, r20	; 0x06
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    6a3a:	f6 01       	movw	r30, r12
    6a3c:	26 81       	ldd	r18, Z+6	; 0x06
    6a3e:	37 81       	ldd	r19, Z+7	; 0x07
    6a40:	88 85       	ldd	r24, Y+8	; 0x08
    6a42:	99 85       	ldd	r25, Y+9	; 0x09
    6a44:	28 17       	cp	r18, r24
    6a46:	39 07       	cpc	r19, r25
    6a48:	11 f4       	brne	.+4      	; 0x6a4e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0xfa>
    6a4a:	55 23       	and	r21, r21
    6a4c:	3c f0       	brlt	.+14     	; 0x6a5c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x108>
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    6a4e:	80 2f       	mov	r24, r16
    6a50:	91 2f       	mov	r25, r17
    6a52:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN11EthernetUDP5flushEv>
        return INVALID_RESPONSE;
    6a56:	8c ef       	ldi	r24, 0xFC	; 252
    6a58:	9f ef       	ldi	r25, 0xFF	; 255
    6a5a:	fb c0       	rjmp	.+502    	; 0x6c52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    // Success!  Everything buffered okay
    return 1;
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
    6a5c:	4f 70       	andi	r20, 0x0F	; 15
    6a5e:	52 70       	andi	r21, 0x02	; 2
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    6a60:	41 15       	cp	r20, r1
    6a62:	51 05       	cpc	r21, r1
    6a64:	39 f0       	breq	.+14     	; 0x6a74 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x120>
    {
        // Mark the entire packet as read
        iUdp.flush();
    6a66:	8e 2d       	mov	r24, r14
    6a68:	9f 2d       	mov	r25, r15
    6a6a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN11EthernetUDP5flushEv>
        return -5; //INVALID_RESPONSE;
    6a6e:	8b ef       	ldi	r24, 0xFB	; 251
    6a70:	9f ef       	ldi	r25, 0xFF	; 255
    6a72:	ef c0       	rjmp	.+478    	; 0x6c52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    6a74:	8e 84       	ldd	r8, Y+14	; 0x0e
    6a76:	9f 84       	ldd	r9, Y+15	; 0x0f
    6a78:	98 24       	eor	r9, r8
    6a7a:	89 24       	eor	r8, r9
    6a7c:	98 24       	eor	r9, r8
    if (answerCount == 0 )
    6a7e:	81 14       	cp	r8, r1
    6a80:	91 04       	cpc	r9, r1
    6a82:	59 f0       	breq	.+22     	; 0x6a9a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x146>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    6a84:	8c 85       	ldd	r24, Y+12	; 0x0c
    6a86:	9d 85       	ldd	r25, Y+13	; 0x0d
    6a88:	00 97       	sbiw	r24, 0x00	; 0
    6a8a:	71 f4       	brne	.+28     	; 0x6aa8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x154>
    6a8c:	cc 24       	eor	r12, r12
    6a8e:	dd 24       	eor	r13, r13

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    6a90:	44 24       	eor	r4, r4
    6a92:	55 24       	eor	r5, r5
    6a94:	68 94       	set
    6a96:	42 f8       	bld	r4, 2
    6a98:	3e c0       	rjmp	.+124    	; 0x6b16 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c2>
    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    {
        // Mark the entire packet as read
        iUdp.flush();
    6a9a:	8e 2d       	mov	r24, r14
    6a9c:	9f 2d       	mov	r25, r15
    6a9e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN11EthernetUDP5flushEv>
        return -6; //INVALID_RESPONSE;
    6aa2:	8a ef       	ldi	r24, 0xFA	; 250
    6aa4:	9f ef       	ldi	r25, 0xFF	; 255
    6aa6:	d5 c0       	rjmp	.+426    	; 0x6c52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    6aa8:	cc 24       	eor	r12, r12
    6aaa:	dd 24       	eor	r13, r13
    6aac:	44 24       	eor	r4, r4
    6aae:	55 24       	eor	r5, r5
    6ab0:	68 94       	set
    6ab2:	42 f8       	bld	r4, 2
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    6ab4:	80 2f       	mov	r24, r16
    6ab6:	91 2f       	mov	r25, r17
    6ab8:	be 01       	movw	r22, r28
    6aba:	6f 5f       	subi	r22, 0xFF	; 255
    6abc:	7f 4f       	sbci	r23, 0xFF	; 255
    6abe:	41 e0       	ldi	r20, 0x01	; 1
    6ac0:	50 e0       	ldi	r21, 0x00	; 0
    6ac2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
            if (len > 0)
    6ac6:	89 81       	ldd	r24, Y+1	; 0x01
    6ac8:	88 23       	and	r24, r24
    6aca:	71 f0       	breq	.+28     	; 0x6ae8 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x194>
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    6acc:	81 50       	subi	r24, 0x01	; 1
    6ace:	89 83       	std	Y+1, r24	; 0x01
                {
                    iUdp.read(); // we don't care about the returned byte
    6ad0:	80 2f       	mov	r24, r16
    6ad2:	91 2f       	mov	r25, r17
    6ad4:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    6ad8:	89 81       	ldd	r24, Y+1	; 0x01
    6ada:	98 2f       	mov	r25, r24
    6adc:	91 50       	subi	r25, 0x01	; 1
    6ade:	99 83       	std	Y+1, r25	; 0x01
    6ae0:	88 23       	and	r24, r24
    6ae2:	b1 f7       	brne	.-20     	; 0x6ad0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x17c>
    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    {
        // Skip over the name
        uint8_t len;
        do
    6ae4:	99 23       	and	r25, r25
    6ae6:	31 f7       	brne	.-52     	; 0x6ab4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x160>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    6ae8:	72 01       	movw	r14, r4
        } while (len != 0);

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    6aea:	80 2f       	mov	r24, r16
    6aec:	91 2f       	mov	r25, r17
    6aee:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
    6af2:	08 94       	sec
    6af4:	e1 08       	sbc	r14, r1
    6af6:	f1 08       	sbc	r15, r1
                }
            }
        } while (len != 0);

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
    6af8:	e1 14       	cp	r14, r1
    6afa:	f1 04       	cpc	r15, r1
    6afc:	b1 f7       	brne	.-20     	; 0x6aea <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x196>
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    6afe:	08 94       	sec
    6b00:	c1 1c       	adc	r12, r1
    6b02:	d1 1c       	adc	r13, r1
    6b04:	8c 85       	ldd	r24, Y+12	; 0x0c
    6b06:	9d 85       	ldd	r25, Y+13	; 0x0d
    6b08:	98 27       	eor	r25, r24
    6b0a:	89 27       	eor	r24, r25
    6b0c:	98 27       	eor	r25, r24
    6b0e:	c8 16       	cp	r12, r24
    6b10:	d9 06       	cpc	r13, r25
    6b12:	80 f2       	brcs	.-96     	; 0x6ab4 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x160>
    6b14:	bb cf       	rjmp	.-138    	; 0x6a8c <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x138>
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    6b16:	80 2f       	mov	r24, r16
    6b18:	91 2f       	mov	r25, r17
    6b1a:	be 01       	movw	r22, r28
    6b1c:	6f 5f       	subi	r22, 0xFF	; 255
    6b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    6b20:	41 e0       	ldi	r20, 0x01	; 1
    6b22:	50 e0       	ldi	r21, 0x00	; 0
    6b24:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    6b28:	89 81       	ldd	r24, Y+1	; 0x01
    6b2a:	98 2f       	mov	r25, r24
    6b2c:	90 7c       	andi	r25, 0xC0	; 192
    6b2e:	79 f4       	brne	.+30     	; 0x6b4e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1fa>
            {
                // It's just a normal label
                if (len > 0)
    6b30:	88 23       	and	r24, r24
    6b32:	a9 f0       	breq	.+42     	; 0x6b5e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x20a>
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    6b34:	81 50       	subi	r24, 0x01	; 1
    6b36:	89 83       	std	Y+1, r24	; 0x01
                    {
                        iUdp.read(); // we don't care about the returned byte
    6b38:	80 2f       	mov	r24, r16
    6b3a:	91 2f       	mov	r25, r17
    6b3c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    6b40:	89 81       	ldd	r24, Y+1	; 0x01
    6b42:	98 2f       	mov	r25, r24
    6b44:	91 50       	subi	r25, 0x01	; 1
    6b46:	99 83       	std	Y+1, r25	; 0x01
    6b48:	88 23       	and	r24, r24
    6b4a:	b1 f7       	brne	.-20     	; 0x6b38 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1e4>
    6b4c:	06 c0       	rjmp	.+12     	; 0x6b5a <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x206>
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    6b4e:	80 2f       	mov	r24, r16
    6b50:	91 2f       	mov	r25, r17
    6b52:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
                // And set len so that we drop out of the name loop
                len = 0;
    6b56:	19 82       	std	Y+1, r1	; 0x01
    6b58:	02 c0       	rjmp	.+4      	; 0x6b5e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x20a>

    for (uint16_t i =0; i < answerCount; i++)
    {
        // Skip the name
        uint8_t len;
        do
    6b5a:	99 23       	and	r25, r25
    6b5c:	e1 f6       	brne	.-72     	; 0x6b16 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c2>
        } while (len != 0);

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    6b5e:	80 2f       	mov	r24, r16
    6b60:	91 2f       	mov	r25, r17
    6b62:	be 01       	movw	r22, r28
    6b64:	6c 5f       	subi	r22, 0xFC	; 252
    6b66:	7f 4f       	sbci	r23, 0xFF	; 255
    6b68:	42 e0       	ldi	r20, 0x02	; 2
    6b6a:	50 e0       	ldi	r21, 0x00	; 0
    6b6c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    6b70:	80 2f       	mov	r24, r16
    6b72:	91 2f       	mov	r25, r17
    6b74:	be 01       	movw	r22, r28
    6b76:	6e 5f       	subi	r22, 0xFE	; 254
    6b78:	7f 4f       	sbci	r23, 0xFF	; 255
    6b7a:	42 e0       	ldi	r20, 0x02	; 2
    6b7c:	50 e0       	ldi	r21, 0x00	; 0
    6b7e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
    6b82:	72 01       	movw	r14, r4

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    6b84:	80 2f       	mov	r24, r16
    6b86:	91 2f       	mov	r25, r17
    6b88:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
    6b8c:	08 94       	sec
    6b8e:	e1 08       	sbc	r14, r1
    6b90:	f1 08       	sbc	r15, r1
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
    6b92:	e1 14       	cp	r14, r1
    6b94:	f1 04       	cpc	r15, r1
    6b96:	b1 f7       	brne	.-20     	; 0x6b84 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x230>
            iUdp.read(); // we don't care about the returned byte
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    6b98:	80 2f       	mov	r24, r16
    6b9a:	91 2f       	mov	r25, r17
    6b9c:	be 01       	movw	r22, r28
    6b9e:	6a 5f       	subi	r22, 0xFA	; 250
    6ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ba2:	42 e0       	ldi	r20, 0x02	; 2
    6ba4:	50 e0       	ldi	r21, 0x00	; 0
    6ba6:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    6baa:	8c 81       	ldd	r24, Y+4	; 0x04
    6bac:	9d 81       	ldd	r25, Y+5	; 0x05
    6bae:	f1 e0       	ldi	r31, 0x01	; 1
    6bb0:	80 30       	cpi	r24, 0x00	; 0
    6bb2:	9f 07       	cpc	r25, r31
    6bb4:	29 f0       	breq	.+10     	; 0x6bc0 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x26c>
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    6bb6:	8e 81       	ldd	r24, Y+6	; 0x06
    6bb8:	9f 81       	ldd	r25, Y+7	; 0x07
    6bba:	00 97       	sbiw	r24, 0x00	; 0
    6bbc:	01 f5       	brne	.+64     	; 0x6bfe <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2aa>
    6bbe:	30 c0       	rjmp	.+96     	; 0x6c20 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2cc>

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    6bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    6bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    6bc4:	21 e0       	ldi	r18, 0x01	; 1
    6bc6:	80 30       	cpi	r24, 0x00	; 0
    6bc8:	92 07       	cpc	r25, r18
    6bca:	a9 f7       	brne	.-22     	; 0x6bb6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x262>
        {
            if (htons(header_flags) != 4)
    6bcc:	8e 81       	ldd	r24, Y+6	; 0x06
    6bce:	9f 81       	ldd	r25, Y+7	; 0x07
    6bd0:	e4 e0       	ldi	r30, 0x04	; 4
    6bd2:	80 30       	cpi	r24, 0x00	; 0
    6bd4:	9e 07       	cpc	r25, r30
    6bd6:	39 f0       	breq	.+14     	; 0x6be6 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x292>
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    6bd8:	80 2f       	mov	r24, r16
    6bda:	91 2f       	mov	r25, r17
    6bdc:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN11EthernetUDP5flushEv>
                return -9;//INVALID_RESPONSE;
    6be0:	87 ef       	ldi	r24, 0xF7	; 247
    6be2:	9f ef       	ldi	r25, 0xFF	; 255
    6be4:	36 c0       	rjmp	.+108    	; 0x6c52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
            }
            iUdp.read(aAddress.raw_address(), 4);
    6be6:	b1 01       	movw	r22, r2
    6be8:	6e 5f       	subi	r22, 0xFE	; 254
    6bea:	7f 4f       	sbci	r23, 0xFF	; 255
    6bec:	80 2f       	mov	r24, r16
    6bee:	91 2f       	mov	r25, r17
    6bf0:	44 e0       	ldi	r20, 0x04	; 4
    6bf2:	50 e0       	ldi	r21, 0x00	; 0
    6bf4:	0e 94 56 0e 	call	0x1cac	; 0x1cac <_ZN11EthernetUDP4readEPhj>
            return SUCCESS;
    6bf8:	81 e0       	ldi	r24, 0x01	; 1
    6bfa:	90 e0       	ldi	r25, 0x00	; 0
    6bfc:	2a c0       	rjmp	.+84     	; 0x6c52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    6bfe:	ee 24       	eor	r14, r14
    6c00:	ff 24       	eor	r15, r15
            {
                iUdp.read(); // we don't care about the returned byte
    6c02:	80 2f       	mov	r24, r16
    6c04:	91 2f       	mov	r25, r17
    6c06:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN11EthernetUDP4readEv>
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    6c0a:	08 94       	sec
    6c0c:	e1 1c       	adc	r14, r1
    6c0e:	f1 1c       	adc	r15, r1
    6c10:	8e 81       	ldd	r24, Y+6	; 0x06
    6c12:	9f 81       	ldd	r25, Y+7	; 0x07
    6c14:	98 27       	eor	r25, r24
    6c16:	89 27       	eor	r24, r25
    6c18:	98 27       	eor	r25, r24
    6c1a:	e8 16       	cp	r14, r24
    6c1c:	f9 06       	cpc	r15, r25
    6c1e:	88 f3       	brcs	.-30     	; 0x6c02 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2ae>
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    6c20:	08 94       	sec
    6c22:	c1 1c       	adc	r12, r1
    6c24:	d1 1c       	adc	r13, r1
    6c26:	c8 14       	cp	r12, r8
    6c28:	d9 04       	cpc	r13, r9
    6c2a:	09 f0       	breq	.+2      	; 0x6c2e <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2da>
    6c2c:	74 cf       	rjmp	.-280    	; 0x6b16 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x1c2>
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    6c2e:	80 2f       	mov	r24, r16
    6c30:	91 2f       	mov	r25, r17
    6c32:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN11EthernetUDP5flushEv>

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    6c36:	86 ef       	ldi	r24, 0xF6	; 246
    6c38:	9f ef       	ldi	r25, 0xFF	; 255
    6c3a:	0b c0       	rjmp	.+22     	; 0x6c52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    6c3c:	8f ef       	ldi	r24, 0xFF	; 255
    6c3e:	9f ef       	ldi	r25, 0xFF	; 255
    6c40:	08 c0       	rjmp	.+16     	; 0x6c52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    6c42:	8e ef       	ldi	r24, 0xFE	; 254
    6c44:	9f ef       	ldi	r25, 0xFF	; 255
    6c46:	05 c0       	rjmp	.+10     	; 0x6c52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    6c48:	8e ef       	ldi	r24, 0xFE	; 254
    6c4a:	9f ef       	ldi	r25, 0xFF	; 255
    6c4c:	02 c0       	rjmp	.+4      	; 0x6c52 <_ZN9DNSClient15ProcessResponseEjR9IPAddress+0x2fe>
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    6c4e:	8d ef       	ldi	r24, 0xFD	; 253
    6c50:	9f ef       	ldi	r25, 0xFF	; 255
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    6c52:	63 96       	adiw	r28, 0x13	; 19
    6c54:	0f b6       	in	r0, 0x3f	; 63
    6c56:	f8 94       	cli
    6c58:	de bf       	out	0x3e, r29	; 62
    6c5a:	0f be       	out	0x3f, r0	; 63
    6c5c:	cd bf       	out	0x3d, r28	; 61
    6c5e:	df 91       	pop	r29
    6c60:	cf 91       	pop	r28
    6c62:	1f 91       	pop	r17
    6c64:	0f 91       	pop	r16
    6c66:	ff 90       	pop	r15
    6c68:	ef 90       	pop	r14
    6c6a:	df 90       	pop	r13
    6c6c:	cf 90       	pop	r12
    6c6e:	bf 90       	pop	r11
    6c70:	af 90       	pop	r10
    6c72:	9f 90       	pop	r9
    6c74:	8f 90       	pop	r8
    6c76:	7f 90       	pop	r7
    6c78:	6f 90       	pop	r6
    6c7a:	5f 90       	pop	r5
    6c7c:	4f 90       	pop	r4
    6c7e:	3f 90       	pop	r3
    6c80:	2f 90       	pop	r2
    6c82:	08 95       	ret

00006c84 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress>:
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    6c84:	8f 92       	push	r8
    6c86:	9f 92       	push	r9
    6c88:	af 92       	push	r10
    6c8a:	bf 92       	push	r11
    6c8c:	cf 92       	push	r12
    6c8e:	df 92       	push	r13
    6c90:	ef 92       	push	r14
    6c92:	ff 92       	push	r15
    6c94:	0f 93       	push	r16
    6c96:	1f 93       	push	r17
    6c98:	cf 93       	push	r28
    6c9a:	df 93       	push	r29
    6c9c:	00 d0       	rcall	.+0      	; 0x6c9e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1a>
    6c9e:	00 d0       	rcall	.+0      	; 0x6ca0 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1c>
    6ca0:	00 d0       	rcall	.+0      	; 0x6ca2 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x1e>
    6ca2:	cd b7       	in	r28, 0x3d	; 61
    6ca4:	de b7       	in	r29, 0x3e	; 62
    6ca6:	7c 01       	movw	r14, r24
    6ca8:	6b 01       	movw	r12, r22
    6caa:	5a 01       	movw	r10, r20
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    6cac:	0e 94 9b 33 	call	0x6736	; 0x6736 <_ZN9DNSClient9inet_atonEPKcR9IPAddress>
    6cb0:	00 97       	sbiw	r24, 0x00	; 0
    6cb2:	09 f0       	breq	.+2      	; 0x6cb6 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x32>
    6cb4:	69 c0       	rjmp	.+210    	; 0x6d88 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x104>
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    6cb6:	f7 01       	movw	r30, r14
    6cb8:	82 81       	ldd	r24, Z+2	; 0x02
    6cba:	93 81       	ldd	r25, Z+3	; 0x03
    6cbc:	a4 81       	ldd	r26, Z+4	; 0x04
    6cbe:	b5 81       	ldd	r27, Z+5	; 0x05
    6cc0:	40 91 73 06 	lds	r20, 0x0673
    6cc4:	50 91 74 06 	lds	r21, 0x0674
    6cc8:	60 91 75 06 	lds	r22, 0x0675
    6ccc:	70 91 76 06 	lds	r23, 0x0676
    6cd0:	84 17       	cp	r24, r20
    6cd2:	95 07       	cpc	r25, r21
    6cd4:	a6 07       	cpc	r26, r22
    6cd6:	b7 07       	cpc	r27, r23
    6cd8:	09 f4       	brne	.+2      	; 0x6cdc <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x58>
    6cda:	59 c0       	rjmp	.+178    	; 0x6d8e <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x10a>
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    6cdc:	88 24       	eor	r8, r8
    6cde:	99 24       	eor	r9, r9
    6ce0:	68 94       	set
    6ce2:	83 f8       	bld	r8, 3
    6ce4:	8e 0c       	add	r8, r14
    6ce6:	9f 1c       	adc	r9, r15
    6ce8:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    6cec:	6f 70       	andi	r22, 0x0F	; 15
    6cee:	70 70       	andi	r23, 0x00	; 0
    6cf0:	60 50       	subi	r22, 0x00	; 0
    6cf2:	7c 4f       	sbci	r23, 0xFC	; 252
    6cf4:	c4 01       	movw	r24, r8
    6cf6:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_ZN11EthernetUDP5beginEj>
    6cfa:	81 30       	cpi	r24, 0x01	; 1
    6cfc:	09 f0       	breq	.+2      	; 0x6d00 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x7c>
    6cfe:	4a c0       	rjmp	.+148    	; 0x6d94 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x110>
    6d00:	8b e4       	ldi	r24, 0x4B	; 75
    6d02:	92 e0       	ldi	r25, 0x02	; 2
    6d04:	9a 83       	std	Y+2, r25	; 0x02
    6d06:	89 83       	std	Y+1, r24	; 0x01
    6d08:	f7 01       	movw	r30, r14
    6d0a:	82 81       	ldd	r24, Z+2	; 0x02
    6d0c:	93 81       	ldd	r25, Z+3	; 0x03
    6d0e:	a4 81       	ldd	r26, Z+4	; 0x04
    6d10:	b5 81       	ldd	r27, Z+5	; 0x05
    6d12:	8b 83       	std	Y+3, r24	; 0x03
    6d14:	9c 83       	std	Y+4, r25	; 0x04
    6d16:	ad 83       	std	Y+5, r26	; 0x05
    6d18:	be 83       	std	Y+6, r27	; 0x06
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    6d1a:	c4 01       	movw	r24, r8
    6d1c:	be 01       	movw	r22, r28
    6d1e:	6f 5f       	subi	r22, 0xFF	; 255
    6d20:	7f 4f       	sbci	r23, 0xFF	; 255
    6d22:	45 e3       	ldi	r20, 0x35	; 53
    6d24:	50 e0       	ldi	r21, 0x00	; 0
    6d26:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_ZN11EthernetUDP11beginPacketE9IPAddressj>
    6d2a:	8c 01       	movw	r16, r24
            if (ret != 0)
    6d2c:	00 97       	sbiw	r24, 0x00	; 0
    6d2e:	41 f1       	breq	.+80     	; 0x6d80 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfc>
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
    6d30:	c7 01       	movw	r24, r14
    6d32:	b6 01       	movw	r22, r12
    6d34:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <_ZN9DNSClient12BuildRequestEPKc>
    6d38:	08 2f       	mov	r16, r24
    6d3a:	19 2f       	mov	r17, r25
                if (ret != 0)
    6d3c:	01 15       	cp	r16, r1
    6d3e:	11 05       	cpc	r17, r1
    6d40:	f9 f0       	breq	.+62     	; 0x6d80 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfc>
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    6d42:	c4 01       	movw	r24, r8
    6d44:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN11EthernetUDP9endPacketEv>
    6d48:	8c 01       	movw	r16, r24
                    if (ret != 0)
    6d4a:	00 97       	sbiw	r24, 0x00	; 0
    6d4c:	31 f4       	brne	.+12     	; 0x6d5a <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xd6>
    6d4e:	18 c0       	rjmp	.+48     	; 0x6d80 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfc>
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    6d50:	ff ef       	ldi	r31, 0xFF	; 255
    6d52:	0f 3f       	cpi	r16, 0xFF	; 255
    6d54:	1f 07       	cpc	r17, r31
    6d56:	a1 f4       	brne	.+40     	; 0x6d80 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xfc>
    6d58:	05 c0       	rjmp	.+10     	; 0x6d64 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xe0>
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
                    if (ret != 0)
    6d5a:	0f 2e       	mov	r0, r31
    6d5c:	f3 e0       	ldi	r31, 0x03	; 3
    6d5e:	cf 2e       	mov	r12, r31
    6d60:	dd 24       	eor	r13, r13
    6d62:	f0 2d       	mov	r31, r0
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
                        {
                            ret = ProcessResponse(5000, aResult);
    6d64:	c7 01       	movw	r24, r14
    6d66:	68 e8       	ldi	r22, 0x88	; 136
    6d68:	73 e1       	ldi	r23, 0x13	; 19
    6d6a:	a5 01       	movw	r20, r10
    6d6c:	0e 94 aa 34 	call	0x6954	; 0x6954 <_ZN9DNSClient15ProcessResponseEjR9IPAddress>
    6d70:	08 2f       	mov	r16, r24
    6d72:	19 2f       	mov	r17, r25
    6d74:	08 94       	sec
    6d76:	c1 08       	sbc	r12, r1
    6d78:	d1 08       	sbc	r13, r1
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    6d7a:	c1 14       	cp	r12, r1
    6d7c:	d1 04       	cpc	r13, r1
    6d7e:	41 f7       	brne	.-48     	; 0x6d50 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0xcc>
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    6d80:	c4 01       	movw	r24, r8
    6d82:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN11EthernetUDP4stopEv>
    6d86:	08 c0       	rjmp	.+16     	; 0x6d98 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x114>

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    6d88:	01 e0       	ldi	r16, 0x01	; 1
    6d8a:	10 e0       	ldi	r17, 0x00	; 0
    6d8c:	05 c0       	rjmp	.+10     	; 0x6d98 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x114>
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    6d8e:	0e ef       	ldi	r16, 0xFE	; 254
    6d90:	1f ef       	ldi	r17, 0xFF	; 255
    6d92:	02 c0       	rjmp	.+4      	; 0x6d98 <_ZN9DNSClient13getHostByNameEPKcR9IPAddress+0x114>
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    6d94:	00 e0       	ldi	r16, 0x00	; 0
    6d96:	10 e0       	ldi	r17, 0x00	; 0
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    6d98:	80 2f       	mov	r24, r16
    6d9a:	91 2f       	mov	r25, r17
    6d9c:	26 96       	adiw	r28, 0x06	; 6
    6d9e:	0f b6       	in	r0, 0x3f	; 63
    6da0:	f8 94       	cli
    6da2:	de bf       	out	0x3e, r29	; 62
    6da4:	0f be       	out	0x3f, r0	; 63
    6da6:	cd bf       	out	0x3d, r28	; 61
    6da8:	df 91       	pop	r29
    6daa:	cf 91       	pop	r28
    6dac:	1f 91       	pop	r17
    6dae:	0f 91       	pop	r16
    6db0:	ff 90       	pop	r15
    6db2:	ef 90       	pop	r14
    6db4:	df 90       	pop	r13
    6db6:	cf 90       	pop	r12
    6db8:	bf 90       	pop	r11
    6dba:	af 90       	pop	r10
    6dbc:	9f 90       	pop	r9
    6dbe:	8f 90       	pop	r8
    6dc0:	08 95       	ret

00006dc2 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
    6dc2:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    6dc4:	81 e7       	ldi	r24, 0x71	; 113
    6dc6:	96 e0       	ldi	r25, 0x06	; 6
    6dc8:	60 e0       	ldi	r22, 0x00	; 0
    6dca:	40 e0       	ldi	r20, 0x00	; 0
    6dcc:	20 e0       	ldi	r18, 0x00	; 0
    6dce:	00 e0       	ldi	r16, 0x00	; 0
    6dd0:	0e 94 cd 19 	call	0x339a	; 0x339a <_ZN9IPAddressC1Ehhhh>
    6dd4:	0f 91       	pop	r16
    6dd6:	08 95       	ret

00006dd8 <_ZN10RobotModel4initEv>:
RobotModel::RobotModel() {
	// TODO Auto-generated constructor stub
	init();
}
void RobotModel::init(){
	_sectionCount = 0;
    6dd8:	fc 01       	movw	r30, r24
    6dda:	13 8a       	std	Z+19, r1	; 0x13
    6ddc:	12 8a       	std	Z+18, r1	; 0x12
}
    6dde:	08 95       	ret

00006de0 <_ZN10RobotModelC1Ev>:
#include "..\Utils\ByteReader.h"
#include "..\Utils\ByteWriter.h"

RobotModel::RobotModel() {
	// TODO Auto-generated constructor stub
	init();
    6de0:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <_ZN10RobotModel4initEv>
}
    6de4:	08 95       	ret

00006de6 <_ZN10RobotModel6updateEPhjj>:
void RobotModel::init(){
	_sectionCount = 0;
}

void RobotModel::update(unsigned char data[], unsigned int offset, unsigned int length){
    6de6:	2f 92       	push	r2
    6de8:	3f 92       	push	r3
    6dea:	4f 92       	push	r4
    6dec:	5f 92       	push	r5
    6dee:	6f 92       	push	r6
    6df0:	7f 92       	push	r7
    6df2:	8f 92       	push	r8
    6df4:	9f 92       	push	r9
    6df6:	af 92       	push	r10
    6df8:	bf 92       	push	r11
    6dfa:	cf 92       	push	r12
    6dfc:	df 92       	push	r13
    6dfe:	ef 92       	push	r14
    6e00:	ff 92       	push	r15
    6e02:	0f 93       	push	r16
    6e04:	1f 93       	push	r17
    6e06:	cf 93       	push	r28
    6e08:	df 93       	push	r29
    6e0a:	00 d0       	rcall	.+0      	; 0x6e0c <_ZN10RobotModel6updateEPhjj+0x26>
    6e0c:	00 d0       	rcall	.+0      	; 0x6e0e <_ZN10RobotModel6updateEPhjj+0x28>
    6e0e:	0f 92       	push	r0
    6e10:	cd b7       	in	r28, 0x3d	; 61
    6e12:	de b7       	in	r29, 0x3e	; 62
    6e14:	4c 01       	movw	r8, r24
    6e16:	3b 01       	movw	r6, r22
	if (data[offset++] == PACKET_VERSION){
    6e18:	84 2f       	mov	r24, r20
    6e1a:	95 2f       	mov	r25, r21
    6e1c:	fb 01       	movw	r30, r22
    6e1e:	e8 0f       	add	r30, r24
    6e20:	f9 1f       	adc	r31, r25
    6e22:	20 81       	ld	r18, Z
    6e24:	01 96       	adiw	r24, 0x01	; 1
    6e26:	9a 83       	std	Y+2, r25	; 0x02
    6e28:	89 83       	std	Y+1, r24	; 0x01
    6e2a:	24 30       	cpi	r18, 0x04	; 4
    6e2c:	09 f0       	breq	.+2      	; 0x6e30 <_ZN10RobotModel6updateEPhjj+0x4a>
    6e2e:	87 c0       	rjmp	.+270    	; 0x6f3e <_ZN10RobotModel6updateEPhjj+0x158>
		packetIndex = readUInt16(data, &offset);
    6e30:	cb 01       	movw	r24, r22
    6e32:	be 01       	movw	r22, r28
    6e34:	6f 5f       	subi	r22, 0xFF	; 255
    6e36:	7f 4f       	sbci	r23, 0xFF	; 255
    6e38:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_Z10readUInt16PhPj>
    6e3c:	d4 01       	movw	r26, r8
    6e3e:	51 96       	adiw	r26, 0x11	; 17
    6e40:	9c 93       	st	X, r25
    6e42:	8e 93       	st	-X, r24
    6e44:	50 97       	sbiw	r26, 0x10	; 16
		uint8_t packetType = data[offset++];
    6e46:	29 81       	ldd	r18, Y+1	; 0x01
    6e48:	3a 81       	ldd	r19, Y+2	; 0x02
    6e4a:	f3 01       	movw	r30, r6
    6e4c:	e2 0f       	add	r30, r18
    6e4e:	f3 1f       	adc	r31, r19
    6e50:	40 81       	ld	r20, Z
		
		offset+=2; //Ignore the content length.
    6e52:	c9 01       	movw	r24, r18
    6e54:	03 96       	adiw	r24, 0x03	; 3
		if (packetType == 2) {
    6e56:	42 30       	cpi	r20, 0x02	; 2
    6e58:	09 f0       	breq	.+2      	; 0x6e5c <_ZN10RobotModel6updateEPhjj+0x76>
    6e5a:	71 c0       	rjmp	.+226    	; 0x6f3e <_ZN10RobotModel6updateEPhjj+0x158>
			uint8_t sectionCount = data[offset++];
    6e5c:	86 0d       	add	r24, r6
    6e5e:	97 1d       	adc	r25, r7
    6e60:	fc 01       	movw	r30, r24
    6e62:	80 81       	ld	r24, Z
    6e64:	2c 5f       	subi	r18, 0xFC	; 252
    6e66:	3f 4f       	sbci	r19, 0xFF	; 255
    6e68:	3a 83       	std	Y+2, r19	; 0x02
    6e6a:	29 83       	std	Y+1, r18	; 0x01
			
			for (int i = 0; i < sectionCount; i++){
    6e6c:	28 2f       	mov	r18, r24
    6e6e:	30 e0       	ldi	r19, 0x00	; 0
    6e70:	3c 83       	std	Y+4, r19	; 0x04
    6e72:	2b 83       	std	Y+3, r18	; 0x03
    6e74:	12 16       	cp	r1, r18
    6e76:	13 06       	cpc	r1, r19
    6e78:	0c f0       	brlt	.+2      	; 0x6e7c <_ZN10RobotModel6updateEPhjj+0x96>
    6e7a:	61 c0       	rjmp	.+194    	; 0x6f3e <_ZN10RobotModel6updateEPhjj+0x158>
    6e7c:	44 24       	eor	r4, r4
    6e7e:	55 24       	eor	r5, r5
				unsigned char sectionId = data[offset++];
				
				unsigned short length = readUInt16(data, &offset);
				for (int iSection = 0; iSection < _sectionCount; iSection++){
    6e80:	a8 2c       	mov	r10, r8
    6e82:	9d 82       	std	Y+5, r9	; 0x05
		offset+=2; //Ignore the content length.
		if (packetType == 2) {
			uint8_t sectionCount = data[offset++];
			
			for (int i = 0; i < sectionCount; i++){
				unsigned char sectionId = data[offset++];
    6e84:	89 81       	ldd	r24, Y+1	; 0x01
    6e86:	9a 81       	ldd	r25, Y+2	; 0x02
    6e88:	f3 01       	movw	r30, r6
    6e8a:	e8 0f       	add	r30, r24
    6e8c:	f9 1f       	adc	r31, r25
    6e8e:	b0 80       	ld	r11, Z
    6e90:	01 96       	adiw	r24, 0x01	; 1
    6e92:	9a 83       	std	Y+2, r25	; 0x02
    6e94:	89 83       	std	Y+1, r24	; 0x01
				
				unsigned short length = readUInt16(data, &offset);
    6e96:	c3 01       	movw	r24, r6
    6e98:	be 01       	movw	r22, r28
    6e9a:	6f 5f       	subi	r22, 0xFF	; 255
    6e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    6e9e:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <_Z10readUInt16PhPj>
    6ea2:	1c 01       	movw	r2, r24
				for (int iSection = 0; iSection < _sectionCount; iSection++){
    6ea4:	d4 01       	movw	r26, r8
    6ea6:	52 96       	adiw	r26, 0x12	; 18
    6ea8:	8d 91       	ld	r24, X+
    6eaa:	9c 91       	ld	r25, X
    6eac:	53 97       	sbiw	r26, 0x13	; 19
    6eae:	18 16       	cp	r1, r24
    6eb0:	19 06       	cpc	r1, r25
    6eb2:	b4 f5       	brge	.+108    	; 0x6f20 <_ZN10RobotModel6updateEPhjj+0x13a>
    6eb4:	0a 2d       	mov	r16, r10
    6eb6:	1d 81       	ldd	r17, Y+5	; 0x05
    6eb8:	ee 24       	eor	r14, r14
    6eba:	ff 24       	eor	r15, r15
}
void RobotModel::init(){
	_sectionCount = 0;
}

void RobotModel::update(unsigned char data[], unsigned int offset, unsigned int length){
    6ebc:	68 01       	movw	r12, r16
			for (int i = 0; i < sectionCount; i++){
				unsigned char sectionId = data[offset++];
				
				unsigned short length = readUInt16(data, &offset);
				for (int iSection = 0; iSection < _sectionCount; iSection++){
					if (sections[iSection]->sectionId == sectionId){
    6ebe:	d8 01       	movw	r26, r16
    6ec0:	ed 91       	ld	r30, X+
    6ec2:	fc 91       	ld	r31, X
    6ec4:	11 97       	sbiw	r26, 0x01	; 1
    6ec6:	82 81       	ldd	r24, Z+2	; 0x02
    6ec8:	8b 15       	cp	r24, r11
    6eca:	f9 f4       	brne	.+62     	; 0x6f0a <_ZN10RobotModel6updateEPhjj+0x124>
						if (!sections[iSection]->isActive){
    6ecc:	83 81       	ldd	r24, Z+3	; 0x03
    6ece:	88 23       	and	r24, r24
    6ed0:	79 f4       	brne	.+30     	; 0x6ef0 <_ZN10RobotModel6updateEPhjj+0x10a>
							sections[iSection]->isActive = true;
    6ed2:	b1 e0       	ldi	r27, 0x01	; 1
    6ed4:	b3 83       	std	Z+3, r27	; 0x03
							Serial.print("Activated section:");
    6ed6:	89 e8       	ldi	r24, 0x89	; 137
    6ed8:	95 e0       	ldi	r25, 0x05	; 5
    6eda:	66 e6       	ldi	r22, 0x66	; 102
    6edc:	72 e0       	ldi	r23, 0x02	; 2
    6ede:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
							Serial.println(sectionId);
    6ee2:	89 e8       	ldi	r24, 0x89	; 137
    6ee4:	95 e0       	ldi	r25, 0x05	; 5
    6ee6:	6b 2d       	mov	r22, r11
    6ee8:	4a e0       	ldi	r20, 0x0A	; 10
    6eea:	50 e0       	ldi	r21, 0x00	; 0
    6eec:	0e 94 1b 1c 	call	0x3836	; 0x3836 <_ZN5Print7printlnEhi>
						}						
						sections[iSection]->update(data, offset);
    6ef0:	f6 01       	movw	r30, r12
    6ef2:	80 81       	ld	r24, Z
    6ef4:	91 81       	ldd	r25, Z+1	; 0x01
    6ef6:	dc 01       	movw	r26, r24
    6ef8:	ed 91       	ld	r30, X+
    6efa:	fc 91       	ld	r31, X
    6efc:	49 81       	ldd	r20, Y+1	; 0x01
    6efe:	5a 81       	ldd	r21, Y+2	; 0x02
    6f00:	01 90       	ld	r0, Z+
    6f02:	f0 81       	ld	r31, Z
    6f04:	e0 2d       	mov	r30, r0
    6f06:	b3 01       	movw	r22, r6
    6f08:	09 95       	icall
			
			for (int i = 0; i < sectionCount; i++){
				unsigned char sectionId = data[offset++];
				
				unsigned short length = readUInt16(data, &offset);
				for (int iSection = 0; iSection < _sectionCount; iSection++){
    6f0a:	08 94       	sec
    6f0c:	e1 1c       	adc	r14, r1
    6f0e:	f1 1c       	adc	r15, r1
    6f10:	0e 5f       	subi	r16, 0xFE	; 254
    6f12:	1f 4f       	sbci	r17, 0xFF	; 255
    6f14:	f4 01       	movw	r30, r8
    6f16:	82 89       	ldd	r24, Z+18	; 0x12
    6f18:	93 89       	ldd	r25, Z+19	; 0x13
    6f1a:	e8 16       	cp	r14, r24
    6f1c:	f9 06       	cpc	r15, r25
    6f1e:	74 f2       	brlt	.-100    	; 0x6ebc <_ZN10RobotModel6updateEPhjj+0xd6>
							Serial.println(sectionId);
						}						
						sections[iSection]->update(data, offset);
					}
				}
				offset += length;
    6f20:	89 81       	ldd	r24, Y+1	; 0x01
    6f22:	9a 81       	ldd	r25, Y+2	; 0x02
    6f24:	82 0d       	add	r24, r2
    6f26:	93 1d       	adc	r25, r3
    6f28:	9a 83       	std	Y+2, r25	; 0x02
    6f2a:	89 83       	std	Y+1, r24	; 0x01
		
		offset+=2; //Ignore the content length.
		if (packetType == 2) {
			uint8_t sectionCount = data[offset++];
			
			for (int i = 0; i < sectionCount; i++){
    6f2c:	08 94       	sec
    6f2e:	41 1c       	adc	r4, r1
    6f30:	51 1c       	adc	r5, r1
    6f32:	2b 81       	ldd	r18, Y+3	; 0x03
    6f34:	3c 81       	ldd	r19, Y+4	; 0x04
    6f36:	42 16       	cp	r4, r18
    6f38:	53 06       	cpc	r5, r19
    6f3a:	0c f4       	brge	.+2      	; 0x6f3e <_ZN10RobotModel6updateEPhjj+0x158>
    6f3c:	a3 cf       	rjmp	.-186    	; 0x6e84 <_ZN10RobotModel6updateEPhjj+0x9e>
		}
	}
	else{
		//TODO:Invalid packet version. DTC.
	}
}
    6f3e:	0f 90       	pop	r0
    6f40:	0f 90       	pop	r0
    6f42:	0f 90       	pop	r0
    6f44:	0f 90       	pop	r0
    6f46:	0f 90       	pop	r0
    6f48:	df 91       	pop	r29
    6f4a:	cf 91       	pop	r28
    6f4c:	1f 91       	pop	r17
    6f4e:	0f 91       	pop	r16
    6f50:	ff 90       	pop	r15
    6f52:	ef 90       	pop	r14
    6f54:	df 90       	pop	r13
    6f56:	cf 90       	pop	r12
    6f58:	bf 90       	pop	r11
    6f5a:	af 90       	pop	r10
    6f5c:	9f 90       	pop	r9
    6f5e:	8f 90       	pop	r8
    6f60:	7f 90       	pop	r7
    6f62:	6f 90       	pop	r6
    6f64:	5f 90       	pop	r5
    6f66:	4f 90       	pop	r4
    6f68:	3f 90       	pop	r3
    6f6a:	2f 90       	pop	r2
    6f6c:	08 95       	ret

00006f6e <_ZN10RobotModel9getStatusEPhPj>:
void RobotModel::getStatus(unsigned char data[], unsigned int *offset){
    6f6e:	4f 92       	push	r4
    6f70:	5f 92       	push	r5
    6f72:	6f 92       	push	r6
    6f74:	7f 92       	push	r7
    6f76:	8f 92       	push	r8
    6f78:	9f 92       	push	r9
    6f7a:	af 92       	push	r10
    6f7c:	bf 92       	push	r11
    6f7e:	cf 92       	push	r12
    6f80:	df 92       	push	r13
    6f82:	ef 92       	push	r14
    6f84:	ff 92       	push	r15
    6f86:	0f 93       	push	r16
    6f88:	1f 93       	push	r17
    6f8a:	cf 93       	push	r28
    6f8c:	df 93       	push	r29
    6f8e:	3c 01       	movw	r6, r24
    6f90:	4b 01       	movw	r8, r22
    6f92:	5a 01       	movw	r10, r20
	data[(*offset)++] = PACKET_VERSION;
    6f94:	da 01       	movw	r26, r20
    6f96:	4d 91       	ld	r20, X+
    6f98:	5c 91       	ld	r21, X
    6f9a:	11 97       	sbiw	r26, 0x01	; 1
    6f9c:	fb 01       	movw	r30, r22
    6f9e:	e4 0f       	add	r30, r20
    6fa0:	f5 1f       	adc	r31, r21
    6fa2:	84 e0       	ldi	r24, 0x04	; 4
    6fa4:	80 83       	st	Z, r24
    6fa6:	4f 5f       	subi	r20, 0xFF	; 255
    6fa8:	5f 4f       	sbci	r21, 0xFF	; 255
    6faa:	4d 93       	st	X+, r20
    6fac:	5c 93       	st	X, r21
	writeUInt16(data, packetIndex, (*offset)); (*offset) += 2;
    6fae:	f3 01       	movw	r30, r6
    6fb0:	60 89       	ldd	r22, Z+16	; 0x10
    6fb2:	71 89       	ldd	r23, Z+17	; 0x11
    6fb4:	c4 01       	movw	r24, r8
    6fb6:	0e 94 2d 3e 	call	0x7c5a	; 0x7c5a <_Z11writeUInt16Phtj>
    6fba:	d5 01       	movw	r26, r10
    6fbc:	2d 91       	ld	r18, X+
    6fbe:	3c 91       	ld	r19, X
    6fc0:	11 97       	sbiw	r26, 0x01	; 1
	data[(*offset)++] = 3; //Set as status packet
    6fc2:	f4 01       	movw	r30, r8
    6fc4:	e2 0f       	add	r30, r18
    6fc6:	f3 1f       	adc	r31, r19
    6fc8:	83 e0       	ldi	r24, 0x03	; 3
    6fca:	82 83       	std	Z+2, r24	; 0x02
    6fcc:	0f 2e       	mov	r0, r31
    6fce:	f3 e0       	ldi	r31, 0x03	; 3
    6fd0:	4f 2e       	mov	r4, r31
    6fd2:	55 24       	eor	r5, r5
    6fd4:	f0 2d       	mov	r31, r0
    6fd6:	42 0e       	add	r4, r18
    6fd8:	53 1e       	adc	r5, r19
	unsigned int contentLengthOffset = *offset;
	(*offset) += 2;
    6fda:	c9 01       	movw	r24, r18
    6fdc:	05 96       	adiw	r24, 0x05	; 5
    6fde:	8d 93       	st	X+, r24
    6fe0:	9c 93       	st	X, r25
	data[(*offset)++] = _sectionCount;
    6fe2:	88 0d       	add	r24, r8
    6fe4:	99 1d       	adc	r25, r9
    6fe6:	f3 01       	movw	r30, r6
    6fe8:	42 89       	ldd	r20, Z+18	; 0x12
    6fea:	dc 01       	movw	r26, r24
    6fec:	4c 93       	st	X, r20
    6fee:	c9 01       	movw	r24, r18
    6ff0:	06 96       	adiw	r24, 0x06	; 6
    6ff2:	f5 01       	movw	r30, r10
    6ff4:	91 83       	std	Z+1, r25	; 0x01
    6ff6:	80 83       	st	Z, r24
	
	for (int i = 0; i < _sectionCount; i++){
    6ff8:	d3 01       	movw	r26, r6
    6ffa:	52 96       	adiw	r26, 0x12	; 18
    6ffc:	8d 91       	ld	r24, X+
    6ffe:	9c 91       	ld	r25, X
    7000:	53 97       	sbiw	r26, 0x13	; 19
    7002:	18 16       	cp	r1, r24
    7004:	19 06       	cpc	r1, r25
    7006:	e4 f5       	brge	.+120    	; 0x7080 <_ZN10RobotModel9getStatusEPhPj+0x112>
    7008:	83 01       	movw	r16, r6
    700a:	ee 24       	eor	r14, r14
    700c:	ff 24       	eor	r15, r15
		unsigned short sectionHeaderOffset = *offset;
    700e:	f5 01       	movw	r30, r10
    7010:	80 81       	ld	r24, Z
    7012:	91 81       	ldd	r25, Z+1	; 0x01
		data[(*offset)++] = sections[i]->sectionId;
    7014:	d8 01       	movw	r26, r16
    7016:	ed 91       	ld	r30, X+
    7018:	fc 91       	ld	r31, X
    701a:	22 81       	ldd	r18, Z+2	; 0x02
    701c:	f4 01       	movw	r30, r8
    701e:	e8 0f       	add	r30, r24
    7020:	f9 1f       	adc	r31, r25
    7022:	20 83       	st	Z, r18
    7024:	6c 01       	movw	r12, r24
    7026:	08 94       	sec
    7028:	c1 1c       	adc	r12, r1
    702a:	d1 1c       	adc	r13, r1
		(*offset) += 2;
    702c:	ec 01       	movw	r28, r24
    702e:	23 96       	adiw	r28, 0x03	; 3
    7030:	f5 01       	movw	r30, r10
    7032:	d1 83       	std	Z+1, r29	; 0x01
    7034:	c0 83       	st	Z, r28
		unsigned short contentStartOffset = *offset;

		if (sections[i]->isActive){
    7036:	f8 01       	movw	r30, r16
    7038:	a1 91       	ld	r26, Z+
    703a:	b1 91       	ld	r27, Z+
    703c:	8f 01       	movw	r16, r30
    703e:	13 96       	adiw	r26, 0x03	; 3
    7040:	8c 91       	ld	r24, X
    7042:	13 97       	sbiw	r26, 0x03	; 3
    7044:	88 23       	and	r24, r24
    7046:	51 f0       	breq	.+20     	; 0x705c <_ZN10RobotModel9getStatusEPhPj+0xee>
			sections[i]->getStatus(data, offset);
    7048:	ed 91       	ld	r30, X+
    704a:	fc 91       	ld	r31, X
    704c:	11 97       	sbiw	r26, 0x01	; 1
    704e:	02 80       	ldd	r0, Z+2	; 0x02
    7050:	f3 81       	ldd	r31, Z+3	; 0x03
    7052:	e0 2d       	mov	r30, r0
    7054:	cd 01       	movw	r24, r26
    7056:	b4 01       	movw	r22, r8
    7058:	a5 01       	movw	r20, r10
    705a:	09 95       	icall
		}		
		//Write length to header
		unsigned short length = (*offset) - contentStartOffset;
    705c:	d5 01       	movw	r26, r10
    705e:	6d 91       	ld	r22, X+
    7060:	7c 91       	ld	r23, X
    7062:	6c 1b       	sub	r22, r28
    7064:	7d 0b       	sbc	r23, r29
		writeUInt16(data, length, sectionHeaderOffset + 1);
    7066:	c4 01       	movw	r24, r8
    7068:	a6 01       	movw	r20, r12
    706a:	0e 94 2d 3e 	call	0x7c5a	; 0x7c5a <_Z11writeUInt16Phtj>
	data[(*offset)++] = 3; //Set as status packet
	unsigned int contentLengthOffset = *offset;
	(*offset) += 2;
	data[(*offset)++] = _sectionCount;
	
	for (int i = 0; i < _sectionCount; i++){
    706e:	08 94       	sec
    7070:	e1 1c       	adc	r14, r1
    7072:	f1 1c       	adc	r15, r1
    7074:	f3 01       	movw	r30, r6
    7076:	82 89       	ldd	r24, Z+18	; 0x12
    7078:	93 89       	ldd	r25, Z+19	; 0x13
    707a:	e8 16       	cp	r14, r24
    707c:	f9 06       	cpc	r15, r25
    707e:	3c f2       	brlt	.-114    	; 0x700e <_ZN10RobotModel9getStatusEPhPj+0xa0>
		}		
		//Write length to header
		unsigned short length = (*offset) - contentStartOffset;
		writeUInt16(data, length, sectionHeaderOffset + 1);
	}
	writeUInt16(data, (*offset) - contentLengthOffset, contentLengthOffset);
    7080:	d5 01       	movw	r26, r10
    7082:	6d 91       	ld	r22, X+
    7084:	7c 91       	ld	r23, X
    7086:	64 19       	sub	r22, r4
    7088:	75 09       	sbc	r23, r5
    708a:	c4 01       	movw	r24, r8
    708c:	a2 01       	movw	r20, r4
    708e:	0e 94 2d 3e 	call	0x7c5a	; 0x7c5a <_Z11writeUInt16Phtj>
}
    7092:	df 91       	pop	r29
    7094:	cf 91       	pop	r28
    7096:	1f 91       	pop	r17
    7098:	0f 91       	pop	r16
    709a:	ff 90       	pop	r15
    709c:	ef 90       	pop	r14
    709e:	df 90       	pop	r13
    70a0:	cf 90       	pop	r12
    70a2:	bf 90       	pop	r11
    70a4:	af 90       	pop	r10
    70a6:	9f 90       	pop	r9
    70a8:	8f 90       	pop	r8
    70aa:	7f 90       	pop	r7
    70ac:	6f 90       	pop	r6
    70ae:	5f 90       	pop	r5
    70b0:	4f 90       	pop	r4
    70b2:	08 95       	ret

000070b4 <_ZN10RobotModel4loopEb>:

void RobotModel::loop(bool safteyTripped){
    70b4:	df 92       	push	r13
    70b6:	ef 92       	push	r14
    70b8:	ff 92       	push	r15
    70ba:	0f 93       	push	r16
    70bc:	1f 93       	push	r17
    70be:	cf 93       	push	r28
    70c0:	df 93       	push	r29
    70c2:	7c 01       	movw	r14, r24
    70c4:	d6 2e       	mov	r13, r22
	for (int i = 0; i < _sectionCount; i++){
    70c6:	fc 01       	movw	r30, r24
    70c8:	82 89       	ldd	r24, Z+18	; 0x12
    70ca:	93 89       	ldd	r25, Z+19	; 0x13
    70cc:	18 16       	cp	r1, r24
    70ce:	19 06       	cpc	r1, r25
    70d0:	e4 f4       	brge	.+56     	; 0x710a <_ZN10RobotModel4loopEb+0x56>
    70d2:	87 01       	movw	r16, r14
    70d4:	c0 e0       	ldi	r28, 0x00	; 0
    70d6:	d0 e0       	ldi	r29, 0x00	; 0
		if (sections[i]->isActive)
    70d8:	f8 01       	movw	r30, r16
    70da:	a1 91       	ld	r26, Z+
    70dc:	b1 91       	ld	r27, Z+
    70de:	8f 01       	movw	r16, r30
    70e0:	13 96       	adiw	r26, 0x03	; 3
    70e2:	8c 91       	ld	r24, X
    70e4:	13 97       	sbiw	r26, 0x03	; 3
    70e6:	88 23       	and	r24, r24
    70e8:	49 f0       	breq	.+18     	; 0x70fc <_ZN10RobotModel4loopEb+0x48>
		sections[i]->loop(safteyTripped);
    70ea:	ed 91       	ld	r30, X+
    70ec:	fc 91       	ld	r31, X
    70ee:	11 97       	sbiw	r26, 0x01	; 1
    70f0:	04 80       	ldd	r0, Z+4	; 0x04
    70f2:	f5 81       	ldd	r31, Z+5	; 0x05
    70f4:	e0 2d       	mov	r30, r0
    70f6:	cd 01       	movw	r24, r26
    70f8:	6d 2d       	mov	r22, r13
    70fa:	09 95       	icall
	}
	writeUInt16(data, (*offset) - contentLengthOffset, contentLengthOffset);
}

void RobotModel::loop(bool safteyTripped){
	for (int i = 0; i < _sectionCount; i++){
    70fc:	21 96       	adiw	r28, 0x01	; 1
    70fe:	f7 01       	movw	r30, r14
    7100:	82 89       	ldd	r24, Z+18	; 0x12
    7102:	93 89       	ldd	r25, Z+19	; 0x13
    7104:	c8 17       	cp	r28, r24
    7106:	d9 07       	cpc	r29, r25
    7108:	3c f3       	brlt	.-50     	; 0x70d8 <_ZN10RobotModel4loopEb+0x24>
		if (sections[i]->isActive)
		sections[i]->loop(safteyTripped);
	}
}
    710a:	df 91       	pop	r29
    710c:	cf 91       	pop	r28
    710e:	1f 91       	pop	r17
    7110:	0f 91       	pop	r16
    7112:	ff 90       	pop	r15
    7114:	ef 90       	pop	r14
    7116:	df 90       	pop	r13
    7118:	08 95       	ret

0000711a <_ZN10RobotModel10addSectionEP17RobotModelSection>:

bool RobotModel::addSection(RobotModelSection *section){
    711a:	ef 92       	push	r14
    711c:	ff 92       	push	r15
    711e:	0f 93       	push	r16
    7120:	1f 93       	push	r17
    7122:	cf 93       	push	r28
    7124:	df 93       	push	r29
    7126:	8c 01       	movw	r16, r24
    7128:	7b 01       	movw	r14, r22
	if (_sectionCount < MAX_MODEL_SECTIONS){
    712a:	fc 01       	movw	r30, r24
    712c:	82 89       	ldd	r24, Z+18	; 0x12
    712e:	93 89       	ldd	r25, Z+19	; 0x13
    7130:	88 30       	cpi	r24, 0x08	; 8
    7132:	91 05       	cpc	r25, r1
    7134:	e4 f4       	brge	.+56     	; 0x716e <_ZN10RobotModel10addSectionEP17RobotModelSection+0x54>
		sections[_sectionCount++] = section;
    7136:	fc 01       	movw	r30, r24
    7138:	ee 0f       	add	r30, r30
    713a:	ff 1f       	adc	r31, r31
    713c:	e0 0f       	add	r30, r16
    713e:	f1 1f       	adc	r31, r17
    7140:	71 83       	std	Z+1, r23	; 0x01
    7142:	60 83       	st	Z, r22
    7144:	01 96       	adiw	r24, 0x01	; 1
    7146:	f8 01       	movw	r30, r16
    7148:	93 8b       	std	Z+19, r25	; 0x13
    714a:	82 8b       	std	Z+18, r24	; 0x12
		Serial.print("Added section:");
    714c:	c9 e8       	ldi	r28, 0x89	; 137
    714e:	d5 e0       	ldi	r29, 0x05	; 5
    7150:	ce 01       	movw	r24, r28
    7152:	69 e7       	ldi	r22, 0x79	; 121
    7154:	72 e0       	ldi	r23, 0x02	; 2
    7156:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
		Serial.println((int)(section->sectionId));
    715a:	f7 01       	movw	r30, r14
    715c:	62 81       	ldd	r22, Z+2	; 0x02
    715e:	ce 01       	movw	r24, r28
    7160:	70 e0       	ldi	r23, 0x00	; 0
    7162:	4a e0       	ldi	r20, 0x0A	; 10
    7164:	50 e0       	ldi	r21, 0x00	; 0
    7166:	0e 94 85 1c 	call	0x390a	; 0x390a <_ZN5Print7printlnEii>
		return true;
    716a:	81 e0       	ldi	r24, 0x01	; 1
    716c:	10 c0       	rjmp	.+32     	; 0x718e <_ZN10RobotModel10addSectionEP17RobotModelSection+0x74>
	}
	else
	{
		Serial.print("Too many sections:");
    716e:	c9 e8       	ldi	r28, 0x89	; 137
    7170:	d5 e0       	ldi	r29, 0x05	; 5
    7172:	ce 01       	movw	r24, r28
    7174:	68 e8       	ldi	r22, 0x88	; 136
    7176:	72 e0       	ldi	r23, 0x02	; 2
    7178:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN5Print5printEPKc>
		Serial.print(_sectionCount);
    717c:	f8 01       	movw	r30, r16
    717e:	62 89       	ldd	r22, Z+18	; 0x12
    7180:	73 89       	ldd	r23, Z+19	; 0x13
    7182:	ce 01       	movw	r24, r28
    7184:	4a e0       	ldi	r20, 0x0A	; 10
    7186:	50 e0       	ldi	r21, 0x00	; 0
    7188:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <_ZN5Print5printEii>
		return false;
    718c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    718e:	df 91       	pop	r29
    7190:	cf 91       	pop	r28
    7192:	1f 91       	pop	r17
    7194:	0f 91       	pop	r16
    7196:	ff 90       	pop	r15
    7198:	ef 90       	pop	r14
    719a:	08 95       	ret

0000719c <_ZN17RobotModelSection6updateEPhj>:
	isActive = false;
}

void RobotModelSection::update(unsigned char data[], unsigned int offset){

}
    719c:	08 95       	ret

0000719e <_ZN17RobotModelSection9getStatusEPhPj>:
void RobotModelSection::getStatus(unsigned char data[], unsigned int *offset){

}
    719e:	08 95       	ret

000071a0 <_ZN17RobotModelSection4loopEb>:

void RobotModelSection::loop(bool safteyTripped){
    71a0:	1f 93       	push	r17
    71a2:	cf 93       	push	r28
    71a4:	df 93       	push	r29
    71a6:	ec 01       	movw	r28, r24
    71a8:	16 2f       	mov	r17, r22
	if (safteyTripped && !lastIsSafteyTripped)
    71aa:	66 23       	and	r22, r22
    71ac:	59 f0       	breq	.+22     	; 0x71c4 <_ZN17RobotModelSection4loopEb+0x24>
    71ae:	8d 81       	ldd	r24, Y+5	; 0x05
    71b0:	88 23       	and	r24, r24
    71b2:	59 f4       	brne	.+22     	; 0x71ca <_ZN17RobotModelSection4loopEb+0x2a>
		disableOutputs();
    71b4:	e8 81       	ld	r30, Y
    71b6:	f9 81       	ldd	r31, Y+1	; 0x01
    71b8:	06 80       	ldd	r0, Z+6	; 0x06
    71ba:	f7 81       	ldd	r31, Z+7	; 0x07
    71bc:	e0 2d       	mov	r30, r0
    71be:	ce 01       	movw	r24, r28
    71c0:	09 95       	icall
    71c2:	0d c0       	rjmp	.+26     	; 0x71de <_ZN17RobotModelSection4loopEb+0x3e>
	else if ((!safteyTripped && lastIsSafteyTripped) || isFirstLoop){
    71c4:	8d 81       	ldd	r24, Y+5	; 0x05
    71c6:	88 23       	and	r24, r24
    71c8:	19 f4       	brne	.+6      	; 0x71d0 <_ZN17RobotModelSection4loopEb+0x30>
    71ca:	8c 81       	ldd	r24, Y+4	; 0x04
    71cc:	88 23       	and	r24, r24
    71ce:	39 f0       	breq	.+14     	; 0x71de <_ZN17RobotModelSection4loopEb+0x3e>
		enableOutputs();
    71d0:	e8 81       	ld	r30, Y
    71d2:	f9 81       	ldd	r31, Y+1	; 0x01
    71d4:	00 84       	ldd	r0, Z+8	; 0x08
    71d6:	f1 85       	ldd	r31, Z+9	; 0x09
    71d8:	e0 2d       	mov	r30, r0
    71da:	ce 01       	movw	r24, r28
    71dc:	09 95       	icall
	}
	lastIsSafteyTripped = safteyTripped;
    71de:	1d 83       	std	Y+5, r17	; 0x05
	isFirstLoop = false;
    71e0:	1c 82       	std	Y+4, r1	; 0x04
}
    71e2:	df 91       	pop	r29
    71e4:	cf 91       	pop	r28
    71e6:	1f 91       	pop	r17
    71e8:	08 95       	ret

000071ea <_ZN17RobotModelSection14disableOutputsEv>:
void RobotModelSection::disableOutputs(){}
    71ea:	08 95       	ret

000071ec <_ZN17RobotModelSection13enableOutputsEv>:
void RobotModelSection::enableOutputs(){}
    71ec:	08 95       	ret

000071ee <_ZN17RobotModelSection4initEv>:

RobotModelSection::RobotModelSection() {
	init();
}

void RobotModelSection::init(){
    71ee:	fc 01       	movw	r30, r24
	lastIsSafteyTripped = false;
    71f0:	15 82       	std	Z+5, r1	; 0x05
	isFirstLoop = true;
    71f2:	81 e0       	ldi	r24, 0x01	; 1
    71f4:	84 83       	std	Z+4, r24	; 0x04
	isActive = false;
    71f6:	13 82       	std	Z+3, r1	; 0x03
}
    71f8:	08 95       	ret

000071fa <_ZN17RobotModelSectionC1Ev>:
 *      Author: EHaskins
 */

#include "RobotModelSection.h"

RobotModelSection::RobotModelSection() {
    71fa:	2f e9       	ldi	r18, 0x9F	; 159
    71fc:	32 e0       	ldi	r19, 0x02	; 2
    71fe:	fc 01       	movw	r30, r24
    7200:	31 83       	std	Z+1, r19	; 0x01
    7202:	20 83       	st	Z, r18
	init();
    7204:	0e 94 f7 38 	call	0x71ee	; 0x71ee <_ZN17RobotModelSection4initEv>
}
    7208:	08 95       	ret

0000720a <_ZN15RslModelSection6updateEPhj>:
	state = 0;
	isActive = true;
	pinMode(pin, OUTPUT);
}
void RslModelSection::update(unsigned char data[], unsigned int offset){
	state = data[offset++];
    720a:	64 0f       	add	r22, r20
    720c:	75 1f       	adc	r23, r21
    720e:	fb 01       	movw	r30, r22
    7210:	20 81       	ld	r18, Z
    7212:	fc 01       	movw	r30, r24
    7214:	20 87       	std	Z+8, r18	; 0x08
}
    7216:	08 95       	ret

00007218 <_ZN15RslModelSection9getStatusEPhPj>:
void RslModelSection::getStatus(unsigned char data[], unsigned int *offset){
	//RSL has no status
}
    7218:	08 95       	ret

0000721a <_ZN15RslModelSectionC1Ev>:
 *      Author: EHaskins
 */

#include "RslModelSection.h"

RslModelSection::RslModelSection() {
    721a:	cf 93       	push	r28
    721c:	df 93       	push	r29
    721e:	ec 01       	movw	r28, r24
    7220:	0e 94 fd 38 	call	0x71fa	; 0x71fa <_ZN17RobotModelSectionC1Ev>
    7224:	8d ea       	ldi	r24, 0xAD	; 173
    7226:	92 e0       	ldi	r25, 0x02	; 2
    7228:	99 83       	std	Y+1, r25	; 0x01
    722a:	88 83       	st	Y, r24
	sectionId = 0;
    722c:	1a 82       	std	Y+2, r1	; 0x02
	pin = 13;
    722e:	8d e0       	ldi	r24, 0x0D	; 13
    7230:	90 e0       	ldi	r25, 0x00	; 0
    7232:	9f 83       	std	Y+7, r25	; 0x07
    7234:	8e 83       	std	Y+6, r24	; 0x06
	state = 0;
    7236:	18 86       	std	Y+8, r1	; 0x08
	isActive = true;
    7238:	81 e0       	ldi	r24, 0x01	; 1
    723a:	8b 83       	std	Y+3, r24	; 0x03
	pinMode(pin, OUTPUT);
    723c:	8d e0       	ldi	r24, 0x0D	; 13
    723e:	61 e0       	ldi	r22, 0x01	; 1
    7240:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <pinMode>
}
    7244:	df 91       	pop	r29
    7246:	cf 91       	pop	r28
    7248:	08 95       	ret

0000724a <_ZN15RslModelSection12driveNoStateEv>:
}

void RslModelSection::driveEStopped(){
	driveDisabled();
}
void RslModelSection::driveNoState(){
    724a:	cf 93       	push	r28
    724c:	df 93       	push	r29
    724e:	ec 01       	movw	r28, r24
	if (millis() % 400 < 100)
    7250:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    7254:	20 e9       	ldi	r18, 0x90	; 144
    7256:	31 e0       	ldi	r19, 0x01	; 1
    7258:	40 e0       	ldi	r20, 0x00	; 0
    725a:	50 e0       	ldi	r21, 0x00	; 0
    725c:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    7260:	dc 01       	movw	r26, r24
    7262:	cb 01       	movw	r24, r22
    7264:	84 36       	cpi	r24, 0x64	; 100
    7266:	91 05       	cpc	r25, r1
    7268:	a1 05       	cpc	r26, r1
    726a:	b1 05       	cpc	r27, r1
    726c:	28 f4       	brcc	.+10     	; 0x7278 <_ZN15RslModelSection12driveNoStateEv+0x2e>
		digitalWrite(pin, HIGH);
    726e:	8e 81       	ldd	r24, Y+6	; 0x06
    7270:	61 e0       	ldi	r22, 0x01	; 1
    7272:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
    7276:	04 c0       	rjmp	.+8      	; 0x7280 <_ZN15RslModelSection12driveNoStateEv+0x36>
	else
		digitalWrite(pin, LOW);
    7278:	8e 81       	ldd	r24, Y+6	; 0x06
    727a:	60 e0       	ldi	r22, 0x00	; 0
    727c:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
}
    7280:	df 91       	pop	r29
    7282:	cf 91       	pop	r28
    7284:	08 95       	ret

00007286 <_ZN15RslModelSection17driveNoBeagleCommEv>:

void RslModelSection::driveNoBeagleComm(){
    7286:	cf 93       	push	r28
    7288:	df 93       	push	r29
    728a:	ec 01       	movw	r28, r24
	if (millis() % 200 < 100)
    728c:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    7290:	28 ec       	ldi	r18, 0xC8	; 200
    7292:	30 e0       	ldi	r19, 0x00	; 0
    7294:	40 e0       	ldi	r20, 0x00	; 0
    7296:	50 e0       	ldi	r21, 0x00	; 0
    7298:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    729c:	dc 01       	movw	r26, r24
    729e:	cb 01       	movw	r24, r22
    72a0:	84 36       	cpi	r24, 0x64	; 100
    72a2:	91 05       	cpc	r25, r1
    72a4:	a1 05       	cpc	r26, r1
    72a6:	b1 05       	cpc	r27, r1
    72a8:	28 f4       	brcc	.+10     	; 0x72b4 <_ZN15RslModelSection17driveNoBeagleCommEv+0x2e>
		digitalWrite(pin, HIGH);
    72aa:	8e 81       	ldd	r24, Y+6	; 0x06
    72ac:	61 e0       	ldi	r22, 0x01	; 1
    72ae:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
    72b2:	04 c0       	rjmp	.+8      	; 0x72bc <_ZN15RslModelSection17driveNoBeagleCommEv+0x36>
	else
		digitalWrite(pin, LOW);
    72b4:	8e 81       	ldd	r24, Y+6	; 0x06
    72b6:	60 e0       	ldi	r22, 0x00	; 0
    72b8:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
}
    72bc:	df 91       	pop	r29
    72be:	cf 91       	pop	r28
    72c0:	08 95       	ret

000072c2 <_ZN15RslModelSection14driveNoFrcCommEv>:
void RslModelSection::driveNoFrcComm(){
    72c2:	cf 93       	push	r28
    72c4:	df 93       	push	r29
    72c6:	ec 01       	movw	r28, r24
	if (millis() % 900 < 100)
    72c8:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    72cc:	24 e8       	ldi	r18, 0x84	; 132
    72ce:	33 e0       	ldi	r19, 0x03	; 3
    72d0:	40 e0       	ldi	r20, 0x00	; 0
    72d2:	50 e0       	ldi	r21, 0x00	; 0
    72d4:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    72d8:	dc 01       	movw	r26, r24
    72da:	cb 01       	movw	r24, r22
    72dc:	84 36       	cpi	r24, 0x64	; 100
    72de:	91 05       	cpc	r25, r1
    72e0:	a1 05       	cpc	r26, r1
    72e2:	b1 05       	cpc	r27, r1
    72e4:	28 f4       	brcc	.+10     	; 0x72f0 <_ZN15RslModelSection14driveNoFrcCommEv+0x2e>
		digitalWrite(pin, HIGH);
    72e6:	8e 81       	ldd	r24, Y+6	; 0x06
    72e8:	61 e0       	ldi	r22, 0x01	; 1
    72ea:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
    72ee:	04 c0       	rjmp	.+8      	; 0x72f8 <_ZN15RslModelSection14driveNoFrcCommEv+0x36>
	else
		digitalWrite(pin, LOW);
    72f0:	8e 81       	ldd	r24, Y+6	; 0x06
    72f2:	60 e0       	ldi	r22, 0x00	; 0
    72f4:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
}
    72f8:	df 91       	pop	r29
    72fa:	cf 91       	pop	r28
    72fc:	08 95       	ret

000072fe <_ZN15RslModelSection12driveEnabledEv>:
void RslModelSection::driveEnabled(){
    72fe:	cf 93       	push	r28
    7300:	df 93       	push	r29
    7302:	ec 01       	movw	r28, r24
	unsigned long m = millis();
    7304:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
	if (m % 1200 < 50)
    7308:	20 eb       	ldi	r18, 0xB0	; 176
    730a:	34 e0       	ldi	r19, 0x04	; 4
    730c:	40 e0       	ldi	r20, 0x00	; 0
    730e:	50 e0       	ldi	r21, 0x00	; 0
    7310:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    7314:	dc 01       	movw	r26, r24
    7316:	cb 01       	movw	r24, r22
    7318:	82 33       	cpi	r24, 0x32	; 50
    731a:	91 05       	cpc	r25, r1
    731c:	a1 05       	cpc	r26, r1
    731e:	b1 05       	cpc	r27, r1
    7320:	28 f4       	brcc	.+10     	; 0x732c <_ZN15RslModelSection12driveEnabledEv+0x2e>
		digitalWrite(pin, LOW);
    7322:	8e 81       	ldd	r24, Y+6	; 0x06
    7324:	60 e0       	ldi	r22, 0x00	; 0
    7326:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
    732a:	18 c0       	rjmp	.+48     	; 0x735c <_ZN15RslModelSection12driveEnabledEv+0x5e>
	else if (m % 1200 < 150)
    732c:	86 39       	cpi	r24, 0x96	; 150
    732e:	91 05       	cpc	r25, r1
    7330:	a1 05       	cpc	r26, r1
    7332:	b1 05       	cpc	r27, r1
    7334:	28 f4       	brcc	.+10     	; 0x7340 <_ZN15RslModelSection12driveEnabledEv+0x42>
		digitalWrite(pin, HIGH);
    7336:	8e 81       	ldd	r24, Y+6	; 0x06
    7338:	61 e0       	ldi	r22, 0x01	; 1
    733a:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
    733e:	0e c0       	rjmp	.+28     	; 0x735c <_ZN15RslModelSection12driveEnabledEv+0x5e>
	else if (m % 1200 < 200)
    7340:	88 3c       	cpi	r24, 0xC8	; 200
    7342:	91 05       	cpc	r25, r1
    7344:	a1 05       	cpc	r26, r1
    7346:	b1 05       	cpc	r27, r1
    7348:	28 f4       	brcc	.+10     	; 0x7354 <_ZN15RslModelSection12driveEnabledEv+0x56>
		digitalWrite(pin, LOW);
    734a:	8e 81       	ldd	r24, Y+6	; 0x06
    734c:	60 e0       	ldi	r22, 0x00	; 0
    734e:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
    7352:	04 c0       	rjmp	.+8      	; 0x735c <_ZN15RslModelSection12driveEnabledEv+0x5e>
	else
		digitalWrite(pin, HIGH);
    7354:	8e 81       	ldd	r24, Y+6	; 0x06
    7356:	61 e0       	ldi	r22, 0x01	; 1
    7358:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>

}
    735c:	df 91       	pop	r29
    735e:	cf 91       	pop	r28
    7360:	08 95       	ret

00007362 <_ZN15RslModelSection13driveDisabledEv>:
void RslModelSection::driveDisabled(){
    7362:	cf 93       	push	r28
    7364:	df 93       	push	r29
    7366:	ec 01       	movw	r28, r24
	if (millis() % 2000 < 1000)
    7368:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
    736c:	20 ed       	ldi	r18, 0xD0	; 208
    736e:	37 e0       	ldi	r19, 0x07	; 7
    7370:	40 e0       	ldi	r20, 0x00	; 0
    7372:	50 e0       	ldi	r21, 0x00	; 0
    7374:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    7378:	dc 01       	movw	r26, r24
    737a:	cb 01       	movw	r24, r22
    737c:	88 3e       	cpi	r24, 0xE8	; 232
    737e:	23 e0       	ldi	r18, 0x03	; 3
    7380:	92 07       	cpc	r25, r18
    7382:	20 e0       	ldi	r18, 0x00	; 0
    7384:	a2 07       	cpc	r26, r18
    7386:	20 e0       	ldi	r18, 0x00	; 0
    7388:	b2 07       	cpc	r27, r18
    738a:	28 f4       	brcc	.+10     	; 0x7396 <_ZN15RslModelSection13driveDisabledEv+0x34>
		digitalWrite(pin, HIGH);
    738c:	8e 81       	ldd	r24, Y+6	; 0x06
    738e:	61 e0       	ldi	r22, 0x01	; 1
    7390:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
    7394:	04 c0       	rjmp	.+8      	; 0x739e <_ZN15RslModelSection13driveDisabledEv+0x3c>
	else
		digitalWrite(pin, LOW);
    7396:	8e 81       	ldd	r24, Y+6	; 0x06
    7398:	60 e0       	ldi	r22, 0x00	; 0
    739a:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
}
    739e:	df 91       	pop	r29
    73a0:	cf 91       	pop	r28
    73a2:	08 95       	ret

000073a4 <_ZN15RslModelSection13driveEStoppedEv>:
		}
	}
}

void RslModelSection::driveEStopped(){
	driveDisabled();
    73a4:	0e 94 b1 39 	call	0x7362	; 0x7362 <_ZN15RslModelSection13driveDisabledEv>
}
    73a8:	08 95       	ret

000073aa <_ZN15RslModelSection15driveAutonomousEv>:
	if (millis() % 2000 < 1000)
		digitalWrite(pin, HIGH);
	else
		digitalWrite(pin, LOW);
}
void RslModelSection::driveAutonomous(){
    73aa:	cf 93       	push	r28
    73ac:	df 93       	push	r29
    73ae:	ec 01       	movw	r28, r24
	unsigned long m = millis();
    73b0:	0e 94 8e 21 	call	0x431c	; 0x431c <millis>
	if (m % 1200 < 50)
    73b4:	20 eb       	ldi	r18, 0xB0	; 176
    73b6:	34 e0       	ldi	r19, 0x04	; 4
    73b8:	40 e0       	ldi	r20, 0x00	; 0
    73ba:	50 e0       	ldi	r21, 0x00	; 0
    73bc:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    73c0:	dc 01       	movw	r26, r24
    73c2:	cb 01       	movw	r24, r22
    73c4:	82 33       	cpi	r24, 0x32	; 50
    73c6:	91 05       	cpc	r25, r1
    73c8:	a1 05       	cpc	r26, r1
    73ca:	b1 05       	cpc	r27, r1
    73cc:	28 f4       	brcc	.+10     	; 0x73d8 <_ZN15RslModelSection15driveAutonomousEv+0x2e>
		digitalWrite(pin, LOW);
    73ce:	8e 81       	ldd	r24, Y+6	; 0x06
    73d0:	60 e0       	ldi	r22, 0x00	; 0
    73d2:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
    73d6:	32 c0       	rjmp	.+100    	; 0x743c <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 150)
    73d8:	86 39       	cpi	r24, 0x96	; 150
    73da:	91 05       	cpc	r25, r1
    73dc:	a1 05       	cpc	r26, r1
    73de:	b1 05       	cpc	r27, r1
    73e0:	28 f4       	brcc	.+10     	; 0x73ec <_ZN15RslModelSection15driveAutonomousEv+0x42>
		digitalWrite(pin, HIGH);
    73e2:	8e 81       	ldd	r24, Y+6	; 0x06
    73e4:	61 e0       	ldi	r22, 0x01	; 1
    73e6:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
    73ea:	28 c0       	rjmp	.+80     	; 0x743c <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 250)
    73ec:	8a 3f       	cpi	r24, 0xFA	; 250
    73ee:	91 05       	cpc	r25, r1
    73f0:	a1 05       	cpc	r26, r1
    73f2:	b1 05       	cpc	r27, r1
    73f4:	28 f4       	brcc	.+10     	; 0x7400 <_ZN15RslModelSection15driveAutonomousEv+0x56>
		digitalWrite(pin, LOW);
    73f6:	8e 81       	ldd	r24, Y+6	; 0x06
    73f8:	60 e0       	ldi	r22, 0x00	; 0
    73fa:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
    73fe:	1e c0       	rjmp	.+60     	; 0x743c <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 350)
    7400:	8e 35       	cpi	r24, 0x5E	; 94
    7402:	21 e0       	ldi	r18, 0x01	; 1
    7404:	92 07       	cpc	r25, r18
    7406:	20 e0       	ldi	r18, 0x00	; 0
    7408:	a2 07       	cpc	r26, r18
    740a:	20 e0       	ldi	r18, 0x00	; 0
    740c:	b2 07       	cpc	r27, r18
    740e:	28 f4       	brcc	.+10     	; 0x741a <_ZN15RslModelSection15driveAutonomousEv+0x70>
		digitalWrite(pin, HIGH);
    7410:	8e 81       	ldd	r24, Y+6	; 0x06
    7412:	61 e0       	ldi	r22, 0x01	; 1
    7414:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
    7418:	11 c0       	rjmp	.+34     	; 0x743c <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else if (m % 1200 < 400)
    741a:	80 39       	cpi	r24, 0x90	; 144
    741c:	21 e0       	ldi	r18, 0x01	; 1
    741e:	92 07       	cpc	r25, r18
    7420:	20 e0       	ldi	r18, 0x00	; 0
    7422:	a2 07       	cpc	r26, r18
    7424:	20 e0       	ldi	r18, 0x00	; 0
    7426:	b2 07       	cpc	r27, r18
    7428:	28 f4       	brcc	.+10     	; 0x7434 <_ZN15RslModelSection15driveAutonomousEv+0x8a>
		digitalWrite(pin, LOW);
    742a:	8e 81       	ldd	r24, Y+6	; 0x06
    742c:	60 e0       	ldi	r22, 0x00	; 0
    742e:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
    7432:	04 c0       	rjmp	.+8      	; 0x743c <_ZN15RslModelSection15driveAutonomousEv+0x92>
	else
		digitalWrite(pin, HIGH);
    7434:	8e 81       	ldd	r24, Y+6	; 0x06
    7436:	61 e0       	ldi	r22, 0x01	; 1
    7438:	0e 94 1d 23 	call	0x463a	; 0x463a <digitalWrite>
}
    743c:	df 91       	pop	r29
    743e:	cf 91       	pop	r28
    7440:	08 95       	ret

00007442 <_ZN15RslModelSection10driveLightEb>:
}
void RslModelSection::loop(bool safteyTripped){
	RobotModelSection::loop(safteyTripped);
	driveLight(safteyTripped);
}
void RslModelSection::driveLight(bool safteyTripped){
    7442:	cf 93       	push	r28
    7444:	df 93       	push	r29
    7446:	ec 01       	movw	r28, r24
	if (safteyTripped){
    7448:	66 23       	and	r22, r22
    744a:	29 f0       	breq	.+10     	; 0x7456 <_ZN15RslModelSection10driveLightEb+0x14>
		driveNoBeagleComm();
    744c:	0e 94 43 39 	call	0x7286	; 0x7286 <_ZN15RslModelSection17driveNoBeagleCommEv>
		state = 255;
    7450:	8f ef       	ldi	r24, 0xFF	; 255
    7452:	88 87       	std	Y+8, r24	; 0x08
    7454:	27 c0       	rjmp	.+78     	; 0x74a4 <_ZN15RslModelSection10driveLightEb+0x62>
	}
	else{
		switch (state){
    7456:	88 85       	ldd	r24, Y+8	; 0x08
    7458:	82 30       	cpi	r24, 0x02	; 2
    745a:	c9 f0       	breq	.+50     	; 0x748e <_ZN15RslModelSection10driveLightEb+0x4c>
    745c:	83 30       	cpi	r24, 0x03	; 3
    745e:	28 f4       	brcc	.+10     	; 0x746a <_ZN15RslModelSection10driveLightEb+0x28>
    7460:	88 23       	and	r24, r24
    7462:	69 f0       	breq	.+26     	; 0x747e <_ZN15RslModelSection10driveLightEb+0x3c>
    7464:	81 30       	cpi	r24, 0x01	; 1
    7466:	f1 f4       	brne	.+60     	; 0x74a4 <_ZN15RslModelSection10driveLightEb+0x62>
    7468:	0e c0       	rjmp	.+28     	; 0x7486 <_ZN15RslModelSection10driveLightEb+0x44>
    746a:	84 30       	cpi	r24, 0x04	; 4
    746c:	c1 f0       	breq	.+48     	; 0x749e <_ZN15RslModelSection10driveLightEb+0x5c>
    746e:	84 30       	cpi	r24, 0x04	; 4
    7470:	90 f0       	brcs	.+36     	; 0x7496 <_ZN15RslModelSection10driveLightEb+0x54>
    7472:	8f 3f       	cpi	r24, 0xFF	; 255
    7474:	b9 f4       	brne	.+46     	; 0x74a4 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_NOSTATE:
			driveNoState();
    7476:	ce 01       	movw	r24, r28
    7478:	0e 94 25 39 	call	0x724a	; 0x724a <_ZN15RslModelSection12driveNoStateEv>
			break;
    747c:	13 c0       	rjmp	.+38     	; 0x74a4 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_NOFRCCOMM:
			driveNoFrcComm();
    747e:	ce 01       	movw	r24, r28
    7480:	0e 94 61 39 	call	0x72c2	; 0x72c2 <_ZN15RslModelSection14driveNoFrcCommEv>
			break;
    7484:	0f c0       	rjmp	.+30     	; 0x74a4 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_ENABLED:
			driveEnabled();
    7486:	ce 01       	movw	r24, r28
    7488:	0e 94 7f 39 	call	0x72fe	; 0x72fe <_ZN15RslModelSection12driveEnabledEv>
			break;
    748c:	0b c0       	rjmp	.+22     	; 0x74a4 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_DISABLED:
			driveDisabled();
    748e:	ce 01       	movw	r24, r28
    7490:	0e 94 b1 39 	call	0x7362	; 0x7362 <_ZN15RslModelSection13driveDisabledEv>
			break;
    7494:	07 c0       	rjmp	.+14     	; 0x74a4 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_AUTONOMOUS:
			driveAutonomous();
    7496:	ce 01       	movw	r24, r28
    7498:	0e 94 d5 39 	call	0x73aa	; 0x73aa <_ZN15RslModelSection15driveAutonomousEv>
			break;
    749c:	03 c0       	rjmp	.+6      	; 0x74a4 <_ZN15RslModelSection10driveLightEb+0x62>
		case RSL_ESTOPPED:
			driveEStopped();
    749e:	ce 01       	movw	r24, r28
    74a0:	0e 94 d2 39 	call	0x73a4	; 0x73a4 <_ZN15RslModelSection13driveEStoppedEv>
			break;
		}
	}
}
    74a4:	df 91       	pop	r29
    74a6:	cf 91       	pop	r28
    74a8:	08 95       	ret

000074aa <_ZN15RslModelSection4loopEb>:
	state = data[offset++];
}
void RslModelSection::getStatus(unsigned char data[], unsigned int *offset){
	//RSL has no status
}
void RslModelSection::loop(bool safteyTripped){
    74aa:	1f 93       	push	r17
    74ac:	cf 93       	push	r28
    74ae:	df 93       	push	r29
    74b0:	ec 01       	movw	r28, r24
    74b2:	16 2f       	mov	r17, r22
	RobotModelSection::loop(safteyTripped);
    74b4:	0e 94 d0 38 	call	0x71a0	; 0x71a0 <_ZN17RobotModelSection4loopEb>
	driveLight(safteyTripped);
    74b8:	ce 01       	movw	r24, r28
    74ba:	61 2f       	mov	r22, r17
    74bc:	0e 94 21 3a 	call	0x7442	; 0x7442 <_ZN15RslModelSection10driveLightEb>
}
    74c0:	df 91       	pop	r29
    74c2:	cf 91       	pop	r28
    74c4:	1f 91       	pop	r17
    74c6:	08 95       	ret

000074c8 <_Z9readUInt8PhPj>:
	}
	Serial.print("ReadBytes: Offset:");
	Serial.println(*offset);
}*/

unsigned char readUInt8(unsigned char data[], unsigned int *offset){
    74c8:	fb 01       	movw	r30, r22
	unsigned char out = data[*offset];
    74ca:	20 81       	ld	r18, Z
    74cc:	31 81       	ldd	r19, Z+1	; 0x01
    74ce:	dc 01       	movw	r26, r24
    74d0:	a2 0f       	add	r26, r18
    74d2:	b3 1f       	adc	r27, r19
    74d4:	8c 91       	ld	r24, X
	*offset += 1;
    74d6:	2f 5f       	subi	r18, 0xFF	; 255
    74d8:	3f 4f       	sbci	r19, 0xFF	; 255
    74da:	31 83       	std	Z+1, r19	; 0x01
    74dc:	20 83       	st	Z, r18
	return out;
}
    74de:	08 95       	ret

000074e0 <_Z10readUInt16PhPj>:
unsigned short readUInt16(unsigned char data[], unsigned int *offset){
    74e0:	db 01       	movw	r26, r22
	unsigned short out = (data[*offset + 1] << 8) + (data[*offset]);
    74e2:	2d 91       	ld	r18, X+
    74e4:	3c 91       	ld	r19, X
    74e6:	11 97       	sbiw	r26, 0x01	; 1
    74e8:	fc 01       	movw	r30, r24
    74ea:	e2 0f       	add	r30, r18
    74ec:	f3 1f       	adc	r31, r19
    74ee:	91 81       	ldd	r25, Z+1	; 0x01
    74f0:	80 e0       	ldi	r24, 0x00	; 0
    74f2:	40 81       	ld	r20, Z
    74f4:	84 0f       	add	r24, r20
    74f6:	91 1d       	adc	r25, r1
	/*unsigned char byteCount = 2;
	for (int i = 0; i < byteCount; i++){
		out += data[*offset + byteCount - i] << (8 * i);
	}*/
	*offset += 2;
    74f8:	2e 5f       	subi	r18, 0xFE	; 254
    74fa:	3f 4f       	sbci	r19, 0xFF	; 255
    74fc:	11 96       	adiw	r26, 0x01	; 1
    74fe:	3c 93       	st	X, r19
    7500:	2e 93       	st	-X, r18
	return out;
}
    7502:	08 95       	ret

00007504 <_Z10readUInt32PhPj>:
unsigned long readUInt32(unsigned char data[], unsigned int *offset){
    7504:	0f 93       	push	r16
    7506:	1f 93       	push	r17
    7508:	cf 93       	push	r28
    750a:	df 93       	push	r29
    750c:	eb 01       	movw	r28, r22
	unsigned long out =
	((unsigned long)data[*offset + 3] << 24) +
    750e:	48 81       	ld	r20, Y
    7510:	59 81       	ldd	r21, Y+1	; 0x01
    7512:	fc 01       	movw	r30, r24
    7514:	e4 0f       	add	r30, r20
    7516:	f5 1f       	adc	r31, r21
	((unsigned long)data[*offset + 2] << 16) +
	((unsigned long)data[*offset + 1] << 8) +
	((unsigned long)data[*offset]);
    7518:	83 81       	ldd	r24, Z+3	; 0x03
    751a:	90 e0       	ldi	r25, 0x00	; 0
    751c:	a0 e0       	ldi	r26, 0x00	; 0
    751e:	b0 e0       	ldi	r27, 0x00	; 0
    7520:	b8 2f       	mov	r27, r24
    7522:	aa 27       	eor	r26, r26
    7524:	99 27       	eor	r25, r25
    7526:	88 27       	eor	r24, r24
    7528:	02 81       	ldd	r16, Z+2	; 0x02
    752a:	10 e0       	ldi	r17, 0x00	; 0
    752c:	20 e0       	ldi	r18, 0x00	; 0
    752e:	30 e0       	ldi	r19, 0x00	; 0
    7530:	98 01       	movw	r18, r16
    7532:	11 27       	eor	r17, r17
    7534:	00 27       	eor	r16, r16
    7536:	08 0f       	add	r16, r24
    7538:	19 1f       	adc	r17, r25
    753a:	2a 1f       	adc	r18, r26
    753c:	3b 1f       	adc	r19, r27
    753e:	80 81       	ld	r24, Z
    7540:	08 0f       	add	r16, r24
    7542:	11 1d       	adc	r17, r1
    7544:	21 1d       	adc	r18, r1
    7546:	31 1d       	adc	r19, r1
    7548:	81 81       	ldd	r24, Z+1	; 0x01
    754a:	90 e0       	ldi	r25, 0x00	; 0
    754c:	a0 e0       	ldi	r26, 0x00	; 0
    754e:	b0 e0       	ldi	r27, 0x00	; 0
    7550:	ba 2f       	mov	r27, r26
    7552:	a9 2f       	mov	r26, r25
    7554:	98 2f       	mov	r25, r24
    7556:	88 27       	eor	r24, r24
    7558:	08 0f       	add	r16, r24
    755a:	19 1f       	adc	r17, r25
    755c:	2a 1f       	adc	r18, r26
    755e:	3b 1f       	adc	r19, r27
	/*unsigned char byteCount = 2;
	for (int i = 0; i < byteCount; i++){
		out += data[*offset + byteCount - i] << (8 * i);
	}*/
	*offset += 4;
    7560:	4c 5f       	subi	r20, 0xFC	; 252
    7562:	5f 4f       	sbci	r21, 0xFF	; 255
    7564:	59 83       	std	Y+1, r21	; 0x01
    7566:	48 83       	st	Y, r20
	return out;
}
    7568:	60 2f       	mov	r22, r16
    756a:	71 2f       	mov	r23, r17
    756c:	82 2f       	mov	r24, r18
    756e:	93 2f       	mov	r25, r19
    7570:	df 91       	pop	r29
    7572:	cf 91       	pop	r28
    7574:	1f 91       	pop	r17
    7576:	0f 91       	pop	r16
    7578:	08 95       	ret

0000757a <_Z10readUInt64PhPj>:
unsigned long long readUInt64(unsigned char data[], unsigned int *offset){
    757a:	2f 92       	push	r2
    757c:	3f 92       	push	r3
    757e:	4f 92       	push	r4
    7580:	5f 92       	push	r5
    7582:	6f 92       	push	r6
    7584:	7f 92       	push	r7
    7586:	8f 92       	push	r8
    7588:	9f 92       	push	r9
    758a:	af 92       	push	r10
    758c:	bf 92       	push	r11
    758e:	cf 92       	push	r12
    7590:	df 92       	push	r13
    7592:	ef 92       	push	r14
    7594:	ff 92       	push	r15
    7596:	0f 93       	push	r16
    7598:	1f 93       	push	r17
    759a:	cf 93       	push	r28
    759c:	df 93       	push	r29
    759e:	cd b7       	in	r28, 0x3d	; 61
    75a0:	de b7       	in	r29, 0x3e	; 62
    75a2:	2b 97       	sbiw	r28, 0x0b	; 11
    75a4:	0f b6       	in	r0, 0x3f	; 63
    75a6:	f8 94       	cli
    75a8:	de bf       	out	0x3e, r29	; 62
    75aa:	0f be       	out	0x3f, r0	; 63
    75ac:	cd bf       	out	0x3d, r28	; 61
    75ae:	9d 83       	std	Y+5, r25	; 0x05
    75b0:	8c 83       	std	Y+4, r24	; 0x04
    75b2:	79 87       	std	Y+9, r23	; 0x09
    75b4:	68 87       	std	Y+8, r22	; 0x08
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
    75b6:	db 01       	movw	r26, r22
    75b8:	0d 90       	ld	r0, X+
    75ba:	bc 91       	ld	r27, X
    75bc:	a0 2d       	mov	r26, r0
    75be:	bb 83       	std	Y+3, r27	; 0x03
    75c0:	aa 83       	std	Y+2, r26	; 0x02
    75c2:	6c 01       	movw	r12, r24
    75c4:	ca 0e       	add	r12, r26
    75c6:	db 1e       	adc	r13, r27
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    75c8:	f6 01       	movw	r30, r12
    75ca:	27 81       	ldd	r18, Z+7	; 0x07
    75cc:	30 e0       	ldi	r19, 0x00	; 0
    75ce:	40 e0       	ldi	r20, 0x00	; 0
    75d0:	50 e0       	ldi	r21, 0x00	; 0
    75d2:	60 e0       	ldi	r22, 0x00	; 0
    75d4:	70 e0       	ldi	r23, 0x00	; 0
    75d6:	80 e0       	ldi	r24, 0x00	; 0
    75d8:	90 e0       	ldi	r25, 0x00	; 0
    75da:	08 e3       	ldi	r16, 0x38	; 56
    75dc:	0e 94 63 3e 	call	0x7cc6	; 0x7cc6 <__ashldi3>
    75e0:	f2 2e       	mov	r15, r18
    75e2:	13 2f       	mov	r17, r19
    75e4:	e4 2e       	mov	r14, r20
    75e6:	b5 2e       	mov	r11, r21
    75e8:	a6 2e       	mov	r10, r22
    75ea:	97 2e       	mov	r9, r23
    75ec:	88 2e       	mov	r8, r24
    75ee:	69 2e       	mov	r6, r25
    75f0:	d6 01       	movw	r26, r12
    75f2:	16 96       	adiw	r26, 0x06	; 6
    75f4:	2c 91       	ld	r18, X
    75f6:	30 e0       	ldi	r19, 0x00	; 0
    75f8:	40 e0       	ldi	r20, 0x00	; 0
    75fa:	50 e0       	ldi	r21, 0x00	; 0
    75fc:	60 e0       	ldi	r22, 0x00	; 0
    75fe:	70 e0       	ldi	r23, 0x00	; 0
    7600:	80 e0       	ldi	r24, 0x00	; 0
    7602:	90 e0       	ldi	r25, 0x00	; 0
    7604:	00 e3       	ldi	r16, 0x30	; 48
    7606:	0e 94 63 3e 	call	0x7cc6	; 0x7cc6 <__ashldi3>
    760a:	2f 0d       	add	r18, r15
    760c:	e1 e0       	ldi	r30, 0x01	; 1
    760e:	2f 15       	cp	r18, r15
    7610:	08 f0       	brcs	.+2      	; 0x7614 <_Z10readUInt64PhPj+0x9a>
    7612:	e0 e0       	ldi	r30, 0x00	; 0
    7614:	31 0f       	add	r19, r17
    7616:	f1 e0       	ldi	r31, 0x01	; 1
    7618:	31 17       	cp	r19, r17
    761a:	08 f0       	brcs	.+2      	; 0x761e <_Z10readUInt64PhPj+0xa4>
    761c:	f0 e0       	ldi	r31, 0x00	; 0
    761e:	3e 2e       	mov	r3, r30
    7620:	33 0e       	add	r3, r19
    7622:	e1 e0       	ldi	r30, 0x01	; 1
    7624:	33 16       	cp	r3, r19
    7626:	08 f0       	brcs	.+2      	; 0x762a <_Z10readUInt64PhPj+0xb0>
    7628:	e0 e0       	ldi	r30, 0x00	; 0
    762a:	fe 2b       	or	r31, r30
    762c:	33 2d       	mov	r19, r3
    762e:	4e 0d       	add	r20, r14
    7630:	e1 e0       	ldi	r30, 0x01	; 1
    7632:	4e 15       	cp	r20, r14
    7634:	08 f0       	brcs	.+2      	; 0x7638 <_Z10readUInt64PhPj+0xbe>
    7636:	e0 e0       	ldi	r30, 0x00	; 0
    7638:	2f 2e       	mov	r2, r31
    763a:	24 0e       	add	r2, r20
    763c:	f1 e0       	ldi	r31, 0x01	; 1
    763e:	24 16       	cp	r2, r20
    7640:	08 f0       	brcs	.+2      	; 0x7644 <_Z10readUInt64PhPj+0xca>
    7642:	f0 e0       	ldi	r31, 0x00	; 0
    7644:	ef 2b       	or	r30, r31
    7646:	42 2d       	mov	r20, r2
    7648:	5b 0d       	add	r21, r11
    764a:	f1 e0       	ldi	r31, 0x01	; 1
    764c:	5b 15       	cp	r21, r11
    764e:	08 f0       	brcs	.+2      	; 0x7652 <_Z10readUInt64PhPj+0xd8>
    7650:	f0 e0       	ldi	r31, 0x00	; 0
    7652:	fe 2e       	mov	r15, r30
    7654:	f5 0e       	add	r15, r21
    7656:	e1 e0       	ldi	r30, 0x01	; 1
    7658:	f5 16       	cp	r15, r21
    765a:	08 f0       	brcs	.+2      	; 0x765e <_Z10readUInt64PhPj+0xe4>
    765c:	e0 e0       	ldi	r30, 0x00	; 0
    765e:	fe 2b       	or	r31, r30
    7660:	5f 2d       	mov	r21, r15
    7662:	6a 0d       	add	r22, r10
    7664:	e1 e0       	ldi	r30, 0x01	; 1
    7666:	6a 15       	cp	r22, r10
    7668:	08 f0       	brcs	.+2      	; 0x766c <_Z10readUInt64PhPj+0xf2>
    766a:	e0 e0       	ldi	r30, 0x00	; 0
    766c:	ef 2e       	mov	r14, r31
    766e:	e6 0e       	add	r14, r22
    7670:	f1 e0       	ldi	r31, 0x01	; 1
    7672:	e6 16       	cp	r14, r22
    7674:	08 f0       	brcs	.+2      	; 0x7678 <_Z10readUInt64PhPj+0xfe>
    7676:	f0 e0       	ldi	r31, 0x00	; 0
    7678:	ef 2b       	or	r30, r31
    767a:	6e 2d       	mov	r22, r14
    767c:	79 0d       	add	r23, r9
    767e:	f1 e0       	ldi	r31, 0x01	; 1
    7680:	79 15       	cp	r23, r9
    7682:	08 f0       	brcs	.+2      	; 0x7686 <_Z10readUInt64PhPj+0x10c>
    7684:	f0 e0       	ldi	r31, 0x00	; 0
    7686:	de 2e       	mov	r13, r30
    7688:	d7 0e       	add	r13, r23
    768a:	e1 e0       	ldi	r30, 0x01	; 1
    768c:	d7 16       	cp	r13, r23
    768e:	08 f0       	brcs	.+2      	; 0x7692 <_Z10readUInt64PhPj+0x118>
    7690:	e0 e0       	ldi	r30, 0x00	; 0
    7692:	fe 2b       	or	r31, r30
    7694:	7d 2d       	mov	r23, r13
    7696:	88 0d       	add	r24, r8
    7698:	e1 e0       	ldi	r30, 0x01	; 1
    769a:	88 15       	cp	r24, r8
    769c:	08 f0       	brcs	.+2      	; 0x76a0 <_Z10readUInt64PhPj+0x126>
    769e:	e0 e0       	ldi	r30, 0x00	; 0
    76a0:	cf 2e       	mov	r12, r31
    76a2:	c8 0e       	add	r12, r24
    76a4:	f1 e0       	ldi	r31, 0x01	; 1
    76a6:	c8 16       	cp	r12, r24
    76a8:	08 f0       	brcs	.+2      	; 0x76ac <_Z10readUInt64PhPj+0x132>
    76aa:	f0 e0       	ldi	r31, 0x00	; 0
    76ac:	ef 2b       	or	r30, r31
    76ae:	8c 2d       	mov	r24, r12
    76b0:	96 0d       	add	r25, r6
    76b2:	9e 0f       	add	r25, r30
    76b4:	ec 81       	ldd	r30, Y+4	; 0x04
    76b6:	fd 81       	ldd	r31, Y+5	; 0x05
    76b8:	aa 81       	ldd	r26, Y+2	; 0x02
    76ba:	bb 81       	ldd	r27, Y+3	; 0x03
    76bc:	ea 0f       	add	r30, r26
    76be:	fb 1f       	adc	r31, r27
    76c0:	70 80       	ld	r7, Z
    76c2:	72 0e       	add	r7, r18
    76c4:	f1 e0       	ldi	r31, 0x01	; 1
    76c6:	72 16       	cp	r7, r18
    76c8:	08 f0       	brcs	.+2      	; 0x76cc <_Z10readUInt64PhPj+0x152>
    76ca:	f0 e0       	ldi	r31, 0x00	; 0
    76cc:	e1 e0       	ldi	r30, 0x01	; 1
    76ce:	33 16       	cp	r3, r19
    76d0:	08 f0       	brcs	.+2      	; 0x76d4 <_Z10readUInt64PhPj+0x15a>
    76d2:	e0 e0       	ldi	r30, 0x00	; 0
    76d4:	bf 2e       	mov	r11, r31
    76d6:	b3 0c       	add	r11, r3
    76d8:	21 e0       	ldi	r18, 0x01	; 1
    76da:	b3 14       	cp	r11, r3
    76dc:	08 f0       	brcs	.+2      	; 0x76e0 <_Z10readUInt64PhPj+0x166>
    76de:	20 e0       	ldi	r18, 0x00	; 0
    76e0:	e2 2b       	or	r30, r18
    76e2:	3b 2c       	mov	r3, r11
    76e4:	21 e0       	ldi	r18, 0x01	; 1
    76e6:	24 16       	cp	r2, r20
    76e8:	08 f0       	brcs	.+2      	; 0x76ec <_Z10readUInt64PhPj+0x172>
    76ea:	20 e0       	ldi	r18, 0x00	; 0
    76ec:	ae 2e       	mov	r10, r30
    76ee:	a2 0c       	add	r10, r2
    76f0:	31 e0       	ldi	r19, 0x01	; 1
    76f2:	a2 14       	cp	r10, r2
    76f4:	08 f0       	brcs	.+2      	; 0x76f8 <_Z10readUInt64PhPj+0x17e>
    76f6:	30 e0       	ldi	r19, 0x00	; 0
    76f8:	23 2b       	or	r18, r19
    76fa:	2a 2c       	mov	r2, r10
    76fc:	31 e0       	ldi	r19, 0x01	; 1
    76fe:	f5 16       	cp	r15, r21
    7700:	08 f0       	brcs	.+2      	; 0x7704 <_Z10readUInt64PhPj+0x18a>
    7702:	30 e0       	ldi	r19, 0x00	; 0
    7704:	92 2e       	mov	r9, r18
    7706:	9f 0c       	add	r9, r15
    7708:	21 e0       	ldi	r18, 0x01	; 1
    770a:	9f 14       	cp	r9, r15
    770c:	08 f0       	brcs	.+2      	; 0x7710 <_Z10readUInt64PhPj+0x196>
    770e:	20 e0       	ldi	r18, 0x00	; 0
    7710:	32 2b       	or	r19, r18
    7712:	f9 2c       	mov	r15, r9
    7714:	21 e0       	ldi	r18, 0x01	; 1
    7716:	e6 16       	cp	r14, r22
    7718:	08 f0       	brcs	.+2      	; 0x771c <_Z10readUInt64PhPj+0x1a2>
    771a:	20 e0       	ldi	r18, 0x00	; 0
    771c:	83 2e       	mov	r8, r19
    771e:	8e 0c       	add	r8, r14
    7720:	31 e0       	ldi	r19, 0x01	; 1
    7722:	8e 14       	cp	r8, r14
    7724:	08 f0       	brcs	.+2      	; 0x7728 <_Z10readUInt64PhPj+0x1ae>
    7726:	30 e0       	ldi	r19, 0x00	; 0
    7728:	23 2b       	or	r18, r19
    772a:	e8 2c       	mov	r14, r8
    772c:	31 e0       	ldi	r19, 0x01	; 1
    772e:	d7 16       	cp	r13, r23
    7730:	08 f0       	brcs	.+2      	; 0x7734 <_Z10readUInt64PhPj+0x1ba>
    7732:	30 e0       	ldi	r19, 0x00	; 0
    7734:	52 2e       	mov	r5, r18
    7736:	5d 0c       	add	r5, r13
    7738:	21 e0       	ldi	r18, 0x01	; 1
    773a:	5d 14       	cp	r5, r13
    773c:	08 f0       	brcs	.+2      	; 0x7740 <_Z10readUInt64PhPj+0x1c6>
    773e:	20 e0       	ldi	r18, 0x00	; 0
    7740:	32 2b       	or	r19, r18
    7742:	d5 2c       	mov	r13, r5
    7744:	21 e0       	ldi	r18, 0x01	; 1
    7746:	c8 16       	cp	r12, r24
    7748:	08 f0       	brcs	.+2      	; 0x774c <_Z10readUInt64PhPj+0x1d2>
    774a:	20 e0       	ldi	r18, 0x00	; 0
    774c:	43 2e       	mov	r4, r19
    774e:	4c 0c       	add	r4, r12
    7750:	81 e0       	ldi	r24, 0x01	; 1
    7752:	4c 14       	cp	r4, r12
    7754:	08 f0       	brcs	.+2      	; 0x7758 <_Z10readUInt64PhPj+0x1de>
    7756:	80 e0       	ldi	r24, 0x00	; 0
    7758:	28 2b       	or	r18, r24
    775a:	c4 2c       	mov	r12, r4
    775c:	62 2e       	mov	r6, r18
    775e:	69 0e       	add	r6, r25
}
unsigned long long readUInt64(unsigned char data[], unsigned int *offset){
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
    7760:	ec 81       	ldd	r30, Y+4	; 0x04
    7762:	fd 81       	ldd	r31, Y+5	; 0x05
    7764:	2a 81       	ldd	r18, Y+2	; 0x02
    7766:	3b 81       	ldd	r19, Y+3	; 0x03
    7768:	e2 0f       	add	r30, r18
    776a:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    776c:	25 81       	ldd	r18, Z+5	; 0x05
    776e:	30 e0       	ldi	r19, 0x00	; 0
    7770:	40 e0       	ldi	r20, 0x00	; 0
    7772:	50 e0       	ldi	r21, 0x00	; 0
    7774:	60 e0       	ldi	r22, 0x00	; 0
    7776:	70 e0       	ldi	r23, 0x00	; 0
    7778:	80 e0       	ldi	r24, 0x00	; 0
    777a:	90 e0       	ldi	r25, 0x00	; 0
    777c:	08 e2       	ldi	r16, 0x28	; 40
    777e:	0e 94 63 3e 	call	0x7cc6	; 0x7cc6 <__ashldi3>
    7782:	27 0d       	add	r18, r7
    7784:	2e 83       	std	Y+6, r18	; 0x06
    7786:	11 e0       	ldi	r17, 0x01	; 1
    7788:	27 15       	cp	r18, r7
    778a:	08 f0       	brcs	.+2      	; 0x778e <_Z10readUInt64PhPj+0x214>
    778c:	10 e0       	ldi	r17, 0x00	; 0
    778e:	b3 0e       	add	r11, r19
    7790:	21 e0       	ldi	r18, 0x01	; 1
    7792:	b3 14       	cp	r11, r3
    7794:	08 f0       	brcs	.+2      	; 0x7798 <_Z10readUInt64PhPj+0x21e>
    7796:	20 e0       	ldi	r18, 0x00	; 0
    7798:	1b 0d       	add	r17, r11
    779a:	31 e0       	ldi	r19, 0x01	; 1
    779c:	1b 15       	cp	r17, r11
    779e:	08 f0       	brcs	.+2      	; 0x77a2 <_Z10readUInt64PhPj+0x228>
    77a0:	30 e0       	ldi	r19, 0x00	; 0
    77a2:	23 2b       	or	r18, r19
    77a4:	b1 2e       	mov	r11, r17
    77a6:	a4 0e       	add	r10, r20
    77a8:	31 e0       	ldi	r19, 0x01	; 1
    77aa:	a2 14       	cp	r10, r2
    77ac:	08 f0       	brcs	.+2      	; 0x77b0 <_Z10readUInt64PhPj+0x236>
    77ae:	30 e0       	ldi	r19, 0x00	; 0
    77b0:	2a 0d       	add	r18, r10
    77b2:	29 83       	std	Y+1, r18	; 0x01
    77b4:	21 e0       	ldi	r18, 0x01	; 1
    77b6:	49 81       	ldd	r20, Y+1	; 0x01
    77b8:	4a 15       	cp	r20, r10
    77ba:	08 f0       	brcs	.+2      	; 0x77be <_Z10readUInt64PhPj+0x244>
    77bc:	20 e0       	ldi	r18, 0x00	; 0
    77be:	32 2b       	or	r19, r18
    77c0:	a9 80       	ldd	r10, Y+1	; 0x01
    77c2:	95 0e       	add	r9, r21
    77c4:	21 e0       	ldi	r18, 0x01	; 1
    77c6:	9f 14       	cp	r9, r15
    77c8:	08 f0       	brcs	.+2      	; 0x77cc <_Z10readUInt64PhPj+0x252>
    77ca:	20 e0       	ldi	r18, 0x00	; 0
    77cc:	23 2e       	mov	r2, r19
    77ce:	29 0c       	add	r2, r9
    77d0:	31 e0       	ldi	r19, 0x01	; 1
    77d2:	29 14       	cp	r2, r9
    77d4:	08 f0       	brcs	.+2      	; 0x77d8 <_Z10readUInt64PhPj+0x25e>
    77d6:	30 e0       	ldi	r19, 0x00	; 0
    77d8:	23 2b       	or	r18, r19
    77da:	92 2c       	mov	r9, r2
    77dc:	86 0e       	add	r8, r22
    77de:	31 e0       	ldi	r19, 0x01	; 1
    77e0:	8e 14       	cp	r8, r14
    77e2:	08 f0       	brcs	.+2      	; 0x77e6 <_Z10readUInt64PhPj+0x26c>
    77e4:	30 e0       	ldi	r19, 0x00	; 0
    77e6:	32 2e       	mov	r3, r18
    77e8:	38 0c       	add	r3, r8
    77ea:	21 e0       	ldi	r18, 0x01	; 1
    77ec:	38 14       	cp	r3, r8
    77ee:	08 f0       	brcs	.+2      	; 0x77f2 <_Z10readUInt64PhPj+0x278>
    77f0:	20 e0       	ldi	r18, 0x00	; 0
    77f2:	32 2b       	or	r19, r18
    77f4:	83 2c       	mov	r8, r3
    77f6:	57 0e       	add	r5, r23
    77f8:	5a 86       	std	Y+10, r5	; 0x0a
    77fa:	21 e0       	ldi	r18, 0x01	; 1
    77fc:	5d 14       	cp	r5, r13
    77fe:	08 f0       	brcs	.+2      	; 0x7802 <_Z10readUInt64PhPj+0x288>
    7800:	20 e0       	ldi	r18, 0x00	; 0
    7802:	7a 84       	ldd	r7, Y+10	; 0x0a
    7804:	73 0e       	add	r7, r19
    7806:	31 e0       	ldi	r19, 0x01	; 1
    7808:	aa 85       	ldd	r26, Y+10	; 0x0a
    780a:	7a 16       	cp	r7, r26
    780c:	08 f0       	brcs	.+2      	; 0x7810 <_Z10readUInt64PhPj+0x296>
    780e:	30 e0       	ldi	r19, 0x00	; 0
    7810:	23 2b       	or	r18, r19
    7812:	7a 86       	std	Y+10, r7	; 0x0a
    7814:	48 0e       	add	r4, r24
    7816:	4b 86       	std	Y+11, r4	; 0x0b
    7818:	81 e0       	ldi	r24, 0x01	; 1
    781a:	4c 14       	cp	r4, r12
    781c:	08 f0       	brcs	.+2      	; 0x7820 <_Z10readUInt64PhPj+0x2a6>
    781e:	80 e0       	ldi	r24, 0x00	; 0
    7820:	cb 84       	ldd	r12, Y+11	; 0x0b
    7822:	c2 0e       	add	r12, r18
    7824:	21 e0       	ldi	r18, 0x01	; 1
    7826:	bb 85       	ldd	r27, Y+11	; 0x0b
    7828:	cb 16       	cp	r12, r27
    782a:	08 f0       	brcs	.+2      	; 0x782e <_Z10readUInt64PhPj+0x2b4>
    782c:	20 e0       	ldi	r18, 0x00	; 0
    782e:	82 2b       	or	r24, r18
    7830:	cb 86       	std	Y+11, r12	; 0x0b
    7832:	69 0e       	add	r6, r25
    7834:	68 0e       	add	r6, r24
unsigned long long readUInt64(unsigned char data[], unsigned int *offset){
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
    7836:	ec 81       	ldd	r30, Y+4	; 0x04
    7838:	fd 81       	ldd	r31, Y+5	; 0x05
    783a:	2a 81       	ldd	r18, Y+2	; 0x02
    783c:	3b 81       	ldd	r19, Y+3	; 0x03
    783e:	e2 0f       	add	r30, r18
    7840:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    7842:	24 81       	ldd	r18, Z+4	; 0x04
    7844:	30 e0       	ldi	r19, 0x00	; 0
    7846:	40 e0       	ldi	r20, 0x00	; 0
    7848:	50 e0       	ldi	r21, 0x00	; 0
    784a:	60 e0       	ldi	r22, 0x00	; 0
    784c:	70 e0       	ldi	r23, 0x00	; 0
    784e:	80 e0       	ldi	r24, 0x00	; 0
    7850:	90 e0       	ldi	r25, 0x00	; 0
    7852:	00 e2       	ldi	r16, 0x20	; 32
    7854:	0e 94 63 3e 	call	0x7cc6	; 0x7cc6 <__ashldi3>
    7858:	ae 81       	ldd	r26, Y+6	; 0x06
    785a:	a2 0f       	add	r26, r18
    785c:	af 83       	std	Y+7, r26	; 0x07
    785e:	21 e0       	ldi	r18, 0x01	; 1
    7860:	be 81       	ldd	r27, Y+6	; 0x06
    7862:	ab 17       	cp	r26, r27
    7864:	08 f0       	brcs	.+2      	; 0x7868 <_Z10readUInt64PhPj+0x2ee>
    7866:	20 e0       	ldi	r18, 0x00	; 0
    7868:	13 0f       	add	r17, r19
    786a:	31 e0       	ldi	r19, 0x01	; 1
    786c:	1b 15       	cp	r17, r11
    786e:	08 f0       	brcs	.+2      	; 0x7872 <_Z10readUInt64PhPj+0x2f8>
    7870:	30 e0       	ldi	r19, 0x00	; 0
    7872:	e2 2e       	mov	r14, r18
    7874:	e1 0e       	add	r14, r17
    7876:	21 e0       	ldi	r18, 0x01	; 1
    7878:	e1 16       	cp	r14, r17
    787a:	08 f0       	brcs	.+2      	; 0x787e <_Z10readUInt64PhPj+0x304>
    787c:	20 e0       	ldi	r18, 0x00	; 0
    787e:	32 2b       	or	r19, r18
    7880:	1e 2d       	mov	r17, r14
    7882:	f9 80       	ldd	r15, Y+1	; 0x01
    7884:	f4 0e       	add	r15, r20
    7886:	21 e0       	ldi	r18, 0x01	; 1
    7888:	fa 14       	cp	r15, r10
    788a:	08 f0       	brcs	.+2      	; 0x788e <_Z10readUInt64PhPj+0x314>
    788c:	20 e0       	ldi	r18, 0x00	; 0
    788e:	3f 0d       	add	r19, r15
    7890:	39 83       	std	Y+1, r19	; 0x01
    7892:	31 e0       	ldi	r19, 0x01	; 1
    7894:	e9 81       	ldd	r30, Y+1	; 0x01
    7896:	ef 15       	cp	r30, r15
    7898:	08 f0       	brcs	.+2      	; 0x789c <_Z10readUInt64PhPj+0x322>
    789a:	30 e0       	ldi	r19, 0x00	; 0
    789c:	23 2b       	or	r18, r19
    789e:	f9 80       	ldd	r15, Y+1	; 0x01
    78a0:	d2 2c       	mov	r13, r2
    78a2:	d5 0e       	add	r13, r21
    78a4:	31 e0       	ldi	r19, 0x01	; 1
    78a6:	d9 14       	cp	r13, r9
    78a8:	08 f0       	brcs	.+2      	; 0x78ac <_Z10readUInt64PhPj+0x332>
    78aa:	30 e0       	ldi	r19, 0x00	; 0
    78ac:	42 2e       	mov	r4, r18
    78ae:	4d 0c       	add	r4, r13
    78b0:	21 e0       	ldi	r18, 0x01	; 1
    78b2:	4d 14       	cp	r4, r13
    78b4:	08 f0       	brcs	.+2      	; 0x78b8 <_Z10readUInt64PhPj+0x33e>
    78b6:	20 e0       	ldi	r18, 0x00	; 0
    78b8:	32 2b       	or	r19, r18
    78ba:	d4 2c       	mov	r13, r4
    78bc:	b3 2c       	mov	r11, r3
    78be:	b6 0e       	add	r11, r22
    78c0:	21 e0       	ldi	r18, 0x01	; 1
    78c2:	b8 14       	cp	r11, r8
    78c4:	08 f0       	brcs	.+2      	; 0x78c8 <_Z10readUInt64PhPj+0x34e>
    78c6:	20 e0       	ldi	r18, 0x00	; 0
    78c8:	53 2e       	mov	r5, r19
    78ca:	5b 0c       	add	r5, r11
    78cc:	31 e0       	ldi	r19, 0x01	; 1
    78ce:	5b 14       	cp	r5, r11
    78d0:	08 f0       	brcs	.+2      	; 0x78d4 <_Z10readUInt64PhPj+0x35a>
    78d2:	30 e0       	ldi	r19, 0x00	; 0
    78d4:	23 2b       	or	r18, r19
    78d6:	b5 2c       	mov	r11, r5
    78d8:	97 2c       	mov	r9, r7
    78da:	97 0e       	add	r9, r23
    78dc:	31 e0       	ldi	r19, 0x01	; 1
    78de:	fa 85       	ldd	r31, Y+10	; 0x0a
    78e0:	9f 16       	cp	r9, r31
    78e2:	08 f0       	brcs	.+2      	; 0x78e6 <_Z10readUInt64PhPj+0x36c>
    78e4:	30 e0       	ldi	r19, 0x00	; 0
    78e6:	72 2e       	mov	r7, r18
    78e8:	79 0c       	add	r7, r9
    78ea:	21 e0       	ldi	r18, 0x01	; 1
    78ec:	79 14       	cp	r7, r9
    78ee:	08 f0       	brcs	.+2      	; 0x78f2 <_Z10readUInt64PhPj+0x378>
    78f0:	20 e0       	ldi	r18, 0x00	; 0
    78f2:	32 2b       	or	r19, r18
    78f4:	97 2c       	mov	r9, r7
    78f6:	ac 2c       	mov	r10, r12
    78f8:	a8 0e       	add	r10, r24
    78fa:	81 e0       	ldi	r24, 0x01	; 1
    78fc:	2b 85       	ldd	r18, Y+11	; 0x0b
    78fe:	a2 16       	cp	r10, r18
    7900:	08 f0       	brcs	.+2      	; 0x7904 <_Z10readUInt64PhPj+0x38a>
    7902:	80 e0       	ldi	r24, 0x00	; 0
    7904:	83 2e       	mov	r8, r19
    7906:	8a 0c       	add	r8, r10
    7908:	21 e0       	ldi	r18, 0x01	; 1
    790a:	8a 14       	cp	r8, r10
    790c:	08 f0       	brcs	.+2      	; 0x7910 <_Z10readUInt64PhPj+0x396>
    790e:	20 e0       	ldi	r18, 0x00	; 0
    7910:	82 2b       	or	r24, r18
    7912:	a8 2c       	mov	r10, r8
    7914:	69 0e       	add	r6, r25
    7916:	68 0e       	add	r6, r24
	unsigned long long out =
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
    7918:	ec 81       	ldd	r30, Y+4	; 0x04
    791a:	fd 81       	ldd	r31, Y+5	; 0x05
    791c:	8a 81       	ldd	r24, Y+2	; 0x02
    791e:	9b 81       	ldd	r25, Y+3	; 0x03
    7920:	e8 0f       	add	r30, r24
    7922:	f9 1f       	adc	r31, r25
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    7924:	23 81       	ldd	r18, Z+3	; 0x03
    7926:	30 e0       	ldi	r19, 0x00	; 0
    7928:	40 e0       	ldi	r20, 0x00	; 0
    792a:	50 e0       	ldi	r21, 0x00	; 0
    792c:	60 e0       	ldi	r22, 0x00	; 0
    792e:	70 e0       	ldi	r23, 0x00	; 0
    7930:	80 e0       	ldi	r24, 0x00	; 0
    7932:	90 e0       	ldi	r25, 0x00	; 0
    7934:	08 e1       	ldi	r16, 0x18	; 24
    7936:	0e 94 63 3e 	call	0x7cc6	; 0x7cc6 <__ashldi3>
    793a:	2f 80       	ldd	r2, Y+7	; 0x07
    793c:	22 0e       	add	r2, r18
    793e:	21 e0       	ldi	r18, 0x01	; 1
    7940:	af 81       	ldd	r26, Y+7	; 0x07
    7942:	2a 16       	cp	r2, r26
    7944:	08 f0       	brcs	.+2      	; 0x7948 <_Z10readUInt64PhPj+0x3ce>
    7946:	20 e0       	ldi	r18, 0x00	; 0
    7948:	e3 0e       	add	r14, r19
    794a:	31 e0       	ldi	r19, 0x01	; 1
    794c:	e1 16       	cp	r14, r17
    794e:	08 f0       	brcs	.+2      	; 0x7952 <_Z10readUInt64PhPj+0x3d8>
    7950:	30 e0       	ldi	r19, 0x00	; 0
    7952:	32 2e       	mov	r3, r18
    7954:	3e 0c       	add	r3, r14
    7956:	21 e0       	ldi	r18, 0x01	; 1
    7958:	3e 14       	cp	r3, r14
    795a:	08 f0       	brcs	.+2      	; 0x795e <_Z10readUInt64PhPj+0x3e4>
    795c:	20 e0       	ldi	r18, 0x00	; 0
    795e:	32 2b       	or	r19, r18
    7960:	e3 2c       	mov	r14, r3
    7962:	b9 81       	ldd	r27, Y+1	; 0x01
    7964:	b4 0f       	add	r27, r20
    7966:	be 83       	std	Y+6, r27	; 0x06
    7968:	21 e0       	ldi	r18, 0x01	; 1
    796a:	bf 15       	cp	r27, r15
    796c:	08 f0       	brcs	.+2      	; 0x7970 <_Z10readUInt64PhPj+0x3f6>
    796e:	20 e0       	ldi	r18, 0x00	; 0
    7970:	ce 80       	ldd	r12, Y+6	; 0x06
    7972:	c3 0e       	add	r12, r19
    7974:	31 e0       	ldi	r19, 0x01	; 1
    7976:	ee 81       	ldd	r30, Y+6	; 0x06
    7978:	ce 16       	cp	r12, r30
    797a:	08 f0       	brcs	.+2      	; 0x797e <_Z10readUInt64PhPj+0x404>
    797c:	30 e0       	ldi	r19, 0x00	; 0
    797e:	23 2b       	or	r18, r19
    7980:	ce 82       	std	Y+6, r12	; 0x06
    7982:	45 0e       	add	r4, r21
    7984:	4f 82       	std	Y+7, r4	; 0x07
    7986:	31 e0       	ldi	r19, 0x01	; 1
    7988:	4d 14       	cp	r4, r13
    798a:	08 f0       	brcs	.+2      	; 0x798e <_Z10readUInt64PhPj+0x414>
    798c:	30 e0       	ldi	r19, 0x00	; 0
    798e:	4f 80       	ldd	r4, Y+7	; 0x07
    7990:	42 0e       	add	r4, r18
    7992:	21 e0       	ldi	r18, 0x01	; 1
    7994:	ff 81       	ldd	r31, Y+7	; 0x07
    7996:	4f 16       	cp	r4, r31
    7998:	08 f0       	brcs	.+2      	; 0x799c <_Z10readUInt64PhPj+0x422>
    799a:	20 e0       	ldi	r18, 0x00	; 0
    799c:	32 2b       	or	r19, r18
    799e:	4f 82       	std	Y+7, r4	; 0x07
    79a0:	f5 2c       	mov	r15, r5
    79a2:	f6 0e       	add	r15, r22
    79a4:	21 e0       	ldi	r18, 0x01	; 1
    79a6:	fb 14       	cp	r15, r11
    79a8:	08 f0       	brcs	.+2      	; 0x79ac <_Z10readUInt64PhPj+0x432>
    79aa:	20 e0       	ldi	r18, 0x00	; 0
    79ac:	53 2e       	mov	r5, r19
    79ae:	5f 0c       	add	r5, r15
    79b0:	31 e0       	ldi	r19, 0x01	; 1
    79b2:	5f 14       	cp	r5, r15
    79b4:	08 f0       	brcs	.+2      	; 0x79b8 <_Z10readUInt64PhPj+0x43e>
    79b6:	30 e0       	ldi	r19, 0x00	; 0
    79b8:	23 2b       	or	r18, r19
    79ba:	f5 2c       	mov	r15, r5
    79bc:	d7 2c       	mov	r13, r7
    79be:	d7 0e       	add	r13, r23
    79c0:	11 e0       	ldi	r17, 0x01	; 1
    79c2:	d9 14       	cp	r13, r9
    79c4:	08 f0       	brcs	.+2      	; 0x79c8 <_Z10readUInt64PhPj+0x44e>
    79c6:	10 e0       	ldi	r17, 0x00	; 0
    79c8:	72 2e       	mov	r7, r18
    79ca:	7d 0c       	add	r7, r13
    79cc:	21 e0       	ldi	r18, 0x01	; 1
    79ce:	7d 14       	cp	r7, r13
    79d0:	08 f0       	brcs	.+2      	; 0x79d4 <_Z10readUInt64PhPj+0x45a>
    79d2:	20 e0       	ldi	r18, 0x00	; 0
    79d4:	12 2b       	or	r17, r18
    79d6:	d7 2c       	mov	r13, r7
    79d8:	98 2c       	mov	r9, r8
    79da:	98 0e       	add	r9, r24
    79dc:	81 e0       	ldi	r24, 0x01	; 1
    79de:	9a 14       	cp	r9, r10
    79e0:	08 f0       	brcs	.+2      	; 0x79e4 <_Z10readUInt64PhPj+0x46a>
    79e2:	80 e0       	ldi	r24, 0x00	; 0
    79e4:	19 0d       	add	r17, r9
    79e6:	21 e0       	ldi	r18, 0x01	; 1
    79e8:	19 15       	cp	r17, r9
    79ea:	08 f0       	brcs	.+2      	; 0x79ee <_Z10readUInt64PhPj+0x474>
    79ec:	20 e0       	ldi	r18, 0x00	; 0
    79ee:	82 2b       	or	r24, r18
    79f0:	91 2e       	mov	r9, r17
    79f2:	69 0e       	add	r6, r25
    79f4:	68 0e       	add	r6, r24
	((unsigned long long)data[*offset + 7] << 56) +
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
    79f6:	ec 81       	ldd	r30, Y+4	; 0x04
    79f8:	fd 81       	ldd	r31, Y+5	; 0x05
    79fa:	2a 81       	ldd	r18, Y+2	; 0x02
    79fc:	3b 81       	ldd	r19, Y+3	; 0x03
    79fe:	e2 0f       	add	r30, r18
    7a00:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 1] << 8) +
	((unsigned long long)data[*offset + 0]);
    7a02:	22 81       	ldd	r18, Z+2	; 0x02
    7a04:	30 e0       	ldi	r19, 0x00	; 0
    7a06:	40 e0       	ldi	r20, 0x00	; 0
    7a08:	50 e0       	ldi	r21, 0x00	; 0
    7a0a:	60 e0       	ldi	r22, 0x00	; 0
    7a0c:	70 e0       	ldi	r23, 0x00	; 0
    7a0e:	80 e0       	ldi	r24, 0x00	; 0
    7a10:	90 e0       	ldi	r25, 0x00	; 0
    7a12:	00 e1       	ldi	r16, 0x10	; 16
    7a14:	0e 94 63 3e 	call	0x7cc6	; 0x7cc6 <__ashldi3>
    7a18:	22 0d       	add	r18, r2
    7a1a:	29 83       	std	Y+1, r18	; 0x01
    7a1c:	21 e0       	ldi	r18, 0x01	; 1
    7a1e:	a9 81       	ldd	r26, Y+1	; 0x01
    7a20:	a2 15       	cp	r26, r2
    7a22:	08 f0       	brcs	.+2      	; 0x7a26 <_Z10readUInt64PhPj+0x4ac>
    7a24:	20 e0       	ldi	r18, 0x00	; 0
    7a26:	b3 2c       	mov	r11, r3
    7a28:	b3 0e       	add	r11, r19
    7a2a:	31 e0       	ldi	r19, 0x01	; 1
    7a2c:	be 14       	cp	r11, r14
    7a2e:	08 f0       	brcs	.+2      	; 0x7a32 <_Z10readUInt64PhPj+0x4b8>
    7a30:	30 e0       	ldi	r19, 0x00	; 0
    7a32:	22 2e       	mov	r2, r18
    7a34:	2b 0c       	add	r2, r11
    7a36:	21 e0       	ldi	r18, 0x01	; 1
    7a38:	2b 14       	cp	r2, r11
    7a3a:	08 f0       	brcs	.+2      	; 0x7a3e <_Z10readUInt64PhPj+0x4c4>
    7a3c:	20 e0       	ldi	r18, 0x00	; 0
    7a3e:	32 2b       	or	r19, r18
    7a40:	b2 2c       	mov	r11, r2
    7a42:	c4 0e       	add	r12, r20
    7a44:	21 e0       	ldi	r18, 0x01	; 1
    7a46:	be 81       	ldd	r27, Y+6	; 0x06
    7a48:	cb 16       	cp	r12, r27
    7a4a:	08 f0       	brcs	.+2      	; 0x7a4e <_Z10readUInt64PhPj+0x4d4>
    7a4c:	20 e0       	ldi	r18, 0x00	; 0
    7a4e:	33 2e       	mov	r3, r19
    7a50:	3c 0c       	add	r3, r12
    7a52:	31 e0       	ldi	r19, 0x01	; 1
    7a54:	3c 14       	cp	r3, r12
    7a56:	08 f0       	brcs	.+2      	; 0x7a5a <_Z10readUInt64PhPj+0x4e0>
    7a58:	30 e0       	ldi	r19, 0x00	; 0
    7a5a:	23 2b       	or	r18, r19
    7a5c:	c3 2c       	mov	r12, r3
    7a5e:	e4 2c       	mov	r14, r4
    7a60:	e5 0e       	add	r14, r21
    7a62:	31 e0       	ldi	r19, 0x01	; 1
    7a64:	ef 81       	ldd	r30, Y+7	; 0x07
    7a66:	ee 16       	cp	r14, r30
    7a68:	08 f0       	brcs	.+2      	; 0x7a6c <_Z10readUInt64PhPj+0x4f2>
    7a6a:	30 e0       	ldi	r19, 0x00	; 0
    7a6c:	42 2e       	mov	r4, r18
    7a6e:	4e 0c       	add	r4, r14
    7a70:	21 e0       	ldi	r18, 0x01	; 1
    7a72:	4e 14       	cp	r4, r14
    7a74:	08 f0       	brcs	.+2      	; 0x7a78 <_Z10readUInt64PhPj+0x4fe>
    7a76:	20 e0       	ldi	r18, 0x00	; 0
    7a78:	32 2b       	or	r19, r18
    7a7a:	e4 2c       	mov	r14, r4
    7a7c:	56 0e       	add	r5, r22
    7a7e:	21 e0       	ldi	r18, 0x01	; 1
    7a80:	5f 14       	cp	r5, r15
    7a82:	08 f0       	brcs	.+2      	; 0x7a86 <_Z10readUInt64PhPj+0x50c>
    7a84:	20 e0       	ldi	r18, 0x00	; 0
    7a86:	83 2e       	mov	r8, r19
    7a88:	85 0c       	add	r8, r5
    7a8a:	31 e0       	ldi	r19, 0x01	; 1
    7a8c:	85 14       	cp	r8, r5
    7a8e:	08 f0       	brcs	.+2      	; 0x7a92 <_Z10readUInt64PhPj+0x518>
    7a90:	30 e0       	ldi	r19, 0x00	; 0
    7a92:	23 2b       	or	r18, r19
    7a94:	58 2c       	mov	r5, r8
    7a96:	77 0e       	add	r7, r23
    7a98:	31 e0       	ldi	r19, 0x01	; 1
    7a9a:	7d 14       	cp	r7, r13
    7a9c:	08 f0       	brcs	.+2      	; 0x7aa0 <_Z10readUInt64PhPj+0x526>
    7a9e:	30 e0       	ldi	r19, 0x00	; 0
    7aa0:	a2 2e       	mov	r10, r18
    7aa2:	a7 0c       	add	r10, r7
    7aa4:	21 e0       	ldi	r18, 0x01	; 1
    7aa6:	a7 14       	cp	r10, r7
    7aa8:	08 f0       	brcs	.+2      	; 0x7aac <_Z10readUInt64PhPj+0x532>
    7aaa:	20 e0       	ldi	r18, 0x00	; 0
    7aac:	32 2b       	or	r19, r18
    7aae:	7a 2c       	mov	r7, r10
    7ab0:	18 0f       	add	r17, r24
    7ab2:	81 e0       	ldi	r24, 0x01	; 1
    7ab4:	19 15       	cp	r17, r9
    7ab6:	08 f0       	brcs	.+2      	; 0x7aba <_Z10readUInt64PhPj+0x540>
    7ab8:	80 e0       	ldi	r24, 0x00	; 0
    7aba:	f3 2e       	mov	r15, r19
    7abc:	f1 0e       	add	r15, r17
    7abe:	21 e0       	ldi	r18, 0x01	; 1
    7ac0:	f1 16       	cp	r15, r17
    7ac2:	08 f0       	brcs	.+2      	; 0x7ac6 <_Z10readUInt64PhPj+0x54c>
    7ac4:	20 e0       	ldi	r18, 0x00	; 0
    7ac6:	82 2b       	or	r24, r18
    7ac8:	1f 2d       	mov	r17, r15
    7aca:	d6 2c       	mov	r13, r6
    7acc:	d9 0e       	add	r13, r25
    7ace:	d8 0e       	add	r13, r24
	((unsigned long long)data[*offset + 6] << 48) +
	((unsigned long long)data[*offset + 5] << 40) +
	((unsigned long long)data[*offset + 4] << 32) +
	((unsigned long long)data[*offset + 3] << 24) +
	((unsigned long long)data[*offset + 2] << 16) +
	((unsigned long long)data[*offset + 1] << 8) +
    7ad0:	ec 81       	ldd	r30, Y+4	; 0x04
    7ad2:	fd 81       	ldd	r31, Y+5	; 0x05
    7ad4:	2a 81       	ldd	r18, Y+2	; 0x02
    7ad6:	3b 81       	ldd	r19, Y+3	; 0x03
    7ad8:	e2 0f       	add	r30, r18
    7ada:	f3 1f       	adc	r31, r19
	((unsigned long long)data[*offset + 0]);
    7adc:	21 81       	ldd	r18, Z+1	; 0x01
    7ade:	30 e0       	ldi	r19, 0x00	; 0
    7ae0:	40 e0       	ldi	r20, 0x00	; 0
    7ae2:	50 e0       	ldi	r21, 0x00	; 0
    7ae4:	60 e0       	ldi	r22, 0x00	; 0
    7ae6:	70 e0       	ldi	r23, 0x00	; 0
    7ae8:	80 e0       	ldi	r24, 0x00	; 0
    7aea:	90 e0       	ldi	r25, 0x00	; 0
    7aec:	08 e0       	ldi	r16, 0x08	; 8
    7aee:	0e 94 63 3e 	call	0x7cc6	; 0x7cc6 <__ashldi3>
    7af2:	a9 81       	ldd	r26, Y+1	; 0x01
    7af4:	2a 0f       	add	r18, r26
    7af6:	f1 e0       	ldi	r31, 0x01	; 1
    7af8:	2a 17       	cp	r18, r26
    7afa:	08 f0       	brcs	.+2      	; 0x7afe <_Z10readUInt64PhPj+0x584>
    7afc:	f0 e0       	ldi	r31, 0x00	; 0
    7afe:	23 0e       	add	r2, r19
    7b00:	e1 e0       	ldi	r30, 0x01	; 1
    7b02:	2b 14       	cp	r2, r11
    7b04:	08 f0       	brcs	.+2      	; 0x7b08 <_Z10readUInt64PhPj+0x58e>
    7b06:	e0 e0       	ldi	r30, 0x00	; 0
    7b08:	3f 2f       	mov	r19, r31
    7b0a:	32 0d       	add	r19, r2
    7b0c:	f1 e0       	ldi	r31, 0x01	; 1
    7b0e:	32 15       	cp	r19, r2
    7b10:	08 f0       	brcs	.+2      	; 0x7b14 <_Z10readUInt64PhPj+0x59a>
    7b12:	f0 e0       	ldi	r31, 0x00	; 0
    7b14:	ef 2b       	or	r30, r31
    7b16:	34 0e       	add	r3, r20
    7b18:	f1 e0       	ldi	r31, 0x01	; 1
    7b1a:	3c 14       	cp	r3, r12
    7b1c:	08 f0       	brcs	.+2      	; 0x7b20 <_Z10readUInt64PhPj+0x5a6>
    7b1e:	f0 e0       	ldi	r31, 0x00	; 0
    7b20:	4e 2f       	mov	r20, r30
    7b22:	43 0d       	add	r20, r3
    7b24:	e1 e0       	ldi	r30, 0x01	; 1
    7b26:	43 15       	cp	r20, r3
    7b28:	08 f0       	brcs	.+2      	; 0x7b2c <_Z10readUInt64PhPj+0x5b2>
    7b2a:	e0 e0       	ldi	r30, 0x00	; 0
    7b2c:	fe 2b       	or	r31, r30
    7b2e:	45 0e       	add	r4, r21
    7b30:	e1 e0       	ldi	r30, 0x01	; 1
    7b32:	4e 14       	cp	r4, r14
    7b34:	08 f0       	brcs	.+2      	; 0x7b38 <_Z10readUInt64PhPj+0x5be>
    7b36:	e0 e0       	ldi	r30, 0x00	; 0
    7b38:	5f 2f       	mov	r21, r31
    7b3a:	54 0d       	add	r21, r4
    7b3c:	f1 e0       	ldi	r31, 0x01	; 1
    7b3e:	54 15       	cp	r21, r4
    7b40:	08 f0       	brcs	.+2      	; 0x7b44 <_Z10readUInt64PhPj+0x5ca>
    7b42:	f0 e0       	ldi	r31, 0x00	; 0
    7b44:	ef 2b       	or	r30, r31
    7b46:	86 0e       	add	r8, r22
    7b48:	f1 e0       	ldi	r31, 0x01	; 1
    7b4a:	85 14       	cp	r8, r5
    7b4c:	08 f0       	brcs	.+2      	; 0x7b50 <_Z10readUInt64PhPj+0x5d6>
    7b4e:	f0 e0       	ldi	r31, 0x00	; 0
    7b50:	6e 2f       	mov	r22, r30
    7b52:	68 0d       	add	r22, r8
    7b54:	e1 e0       	ldi	r30, 0x01	; 1
    7b56:	68 15       	cp	r22, r8
    7b58:	08 f0       	brcs	.+2      	; 0x7b5c <_Z10readUInt64PhPj+0x5e2>
    7b5a:	e0 e0       	ldi	r30, 0x00	; 0
    7b5c:	fe 2b       	or	r31, r30
    7b5e:	a7 0e       	add	r10, r23
    7b60:	e1 e0       	ldi	r30, 0x01	; 1
    7b62:	a7 14       	cp	r10, r7
    7b64:	08 f0       	brcs	.+2      	; 0x7b68 <_Z10readUInt64PhPj+0x5ee>
    7b66:	e0 e0       	ldi	r30, 0x00	; 0
    7b68:	7f 2f       	mov	r23, r31
    7b6a:	7a 0d       	add	r23, r10
    7b6c:	f1 e0       	ldi	r31, 0x01	; 1
    7b6e:	7a 15       	cp	r23, r10
    7b70:	08 f0       	brcs	.+2      	; 0x7b74 <_Z10readUInt64PhPj+0x5fa>
    7b72:	f0 e0       	ldi	r31, 0x00	; 0
    7b74:	ef 2b       	or	r30, r31
    7b76:	f8 0e       	add	r15, r24
    7b78:	a1 e0       	ldi	r26, 0x01	; 1
    7b7a:	f1 16       	cp	r15, r17
    7b7c:	08 f0       	brcs	.+2      	; 0x7b80 <_Z10readUInt64PhPj+0x606>
    7b7e:	a0 e0       	ldi	r26, 0x00	; 0
    7b80:	8e 2f       	mov	r24, r30
    7b82:	8f 0d       	add	r24, r15
    7b84:	e1 e0       	ldi	r30, 0x01	; 1
    7b86:	8f 15       	cp	r24, r15
    7b88:	08 f0       	brcs	.+2      	; 0x7b8c <_Z10readUInt64PhPj+0x612>
    7b8a:	e0 e0       	ldi	r30, 0x00	; 0
    7b8c:	ae 2b       	or	r26, r30
    7b8e:	9d 0d       	add	r25, r13
	/*unsigned char byteCount = 2;
	for (int i = 0; i < byteCount; i++){
		out += data[*offset + byteCount - i] << (8 * i);
	}*/
	*offset += 8;
    7b90:	0a 81       	ldd	r16, Y+2	; 0x02
    7b92:	1b 81       	ldd	r17, Y+3	; 0x03
    7b94:	08 5f       	subi	r16, 0xF8	; 248
    7b96:	1f 4f       	sbci	r17, 0xFF	; 255
    7b98:	e8 85       	ldd	r30, Y+8	; 0x08
    7b9a:	f9 85       	ldd	r31, Y+9	; 0x09
    7b9c:	11 83       	std	Z+1, r17	; 0x01
    7b9e:	00 83       	st	Z, r16
	return out;
}
    7ba0:	9a 0f       	add	r25, r26
    7ba2:	2b 96       	adiw	r28, 0x0b	; 11
    7ba4:	0f b6       	in	r0, 0x3f	; 63
    7ba6:	f8 94       	cli
    7ba8:	de bf       	out	0x3e, r29	; 62
    7baa:	0f be       	out	0x3f, r0	; 63
    7bac:	cd bf       	out	0x3d, r28	; 61
    7bae:	df 91       	pop	r29
    7bb0:	cf 91       	pop	r28
    7bb2:	1f 91       	pop	r17
    7bb4:	0f 91       	pop	r16
    7bb6:	ff 90       	pop	r15
    7bb8:	ef 90       	pop	r14
    7bba:	df 90       	pop	r13
    7bbc:	cf 90       	pop	r12
    7bbe:	bf 90       	pop	r11
    7bc0:	af 90       	pop	r10
    7bc2:	9f 90       	pop	r9
    7bc4:	8f 90       	pop	r8
    7bc6:	7f 90       	pop	r7
    7bc8:	6f 90       	pop	r6
    7bca:	5f 90       	pop	r5
    7bcc:	4f 90       	pop	r4
    7bce:	3f 90       	pop	r3
    7bd0:	2f 90       	pop	r2
    7bd2:	08 95       	ret

00007bd4 <_Z9readBytesPhS_iPj>:
void readBytes(unsigned char data[], unsigned char out[], int count, unsigned int *offset){
    7bd4:	0f 93       	push	r16
    7bd6:	1f 93       	push	r17
    7bd8:	cf 93       	push	r28
    7bda:	df 93       	push	r29
    7bdc:	8c 01       	movw	r16, r24
    7bde:	e9 01       	movw	r28, r18
	for (int i = 0; i < count; i++){
    7be0:	14 16       	cp	r1, r20
    7be2:	15 06       	cpc	r1, r21
    7be4:	94 f4       	brge	.+36     	; 0x7c0a <_Z9readBytesPhS_iPj+0x36>
    7be6:	a6 2f       	mov	r26, r22
    7be8:	b7 2f       	mov	r27, r23
    7bea:	20 e0       	ldi	r18, 0x00	; 0
    7bec:	30 e0       	ldi	r19, 0x00	; 0
		out[i] = data[i + *offset];
    7bee:	f8 01       	movw	r30, r16
    7bf0:	e2 0f       	add	r30, r18
    7bf2:	f3 1f       	adc	r31, r19
    7bf4:	88 81       	ld	r24, Y
    7bf6:	99 81       	ldd	r25, Y+1	; 0x01
    7bf8:	e8 0f       	add	r30, r24
    7bfa:	f9 1f       	adc	r31, r25
    7bfc:	80 81       	ld	r24, Z
    7bfe:	8d 93       	st	X+, r24
	}*/
	*offset += 8;
	return out;
}
void readBytes(unsigned char data[], unsigned char out[], int count, unsigned int *offset){
	for (int i = 0; i < count; i++){
    7c00:	2f 5f       	subi	r18, 0xFF	; 255
    7c02:	3f 4f       	sbci	r19, 0xFF	; 255
    7c04:	24 17       	cp	r18, r20
    7c06:	35 07       	cpc	r19, r21
    7c08:	91 f7       	brne	.-28     	; 0x7bee <_Z9readBytesPhS_iPj+0x1a>
		out[i] = data[i + *offset];
	}
	*offset += count;
    7c0a:	88 81       	ld	r24, Y
    7c0c:	99 81       	ldd	r25, Y+1	; 0x01
    7c0e:	48 0f       	add	r20, r24
    7c10:	59 1f       	adc	r21, r25
    7c12:	59 83       	std	Y+1, r21	; 0x01
    7c14:	48 83       	st	Y, r20
}
    7c16:	df 91       	pop	r29
    7c18:	cf 91       	pop	r28
    7c1a:	1f 91       	pop	r17
    7c1c:	0f 91       	pop	r16
    7c1e:	08 95       	ret

00007c20 <_Z9readFloatPhPj>:

float readFloat(unsigned char data[], unsigned int* offset){
    7c20:	fb 01       	movw	r30, r22
	byte *bytes = &data[*offset];
    7c22:	20 81       	ld	r18, Z
    7c24:	31 81       	ldd	r19, Z+1	; 0x01
	float* val = reinterpret_cast<float*>(bytes);
	*offset += 4;
    7c26:	a9 01       	movw	r20, r18
    7c28:	4c 5f       	subi	r20, 0xFC	; 252
    7c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    7c2c:	51 83       	std	Z+1, r21	; 0x01
    7c2e:	40 83       	st	Z, r20
	return *val;
    7c30:	fc 01       	movw	r30, r24
    7c32:	e2 0f       	add	r30, r18
    7c34:	f3 1f       	adc	r31, r19
    7c36:	50 81       	ld	r21, Z
    7c38:	41 81       	ldd	r20, Z+1	; 0x01
    7c3a:	32 81       	ldd	r19, Z+2	; 0x02
    7c3c:	23 81       	ldd	r18, Z+3	; 0x03
    7c3e:	85 2f       	mov	r24, r21
    7c40:	94 2f       	mov	r25, r20
    7c42:	a3 2f       	mov	r26, r19
    7c44:	b2 2f       	mov	r27, r18
    7c46:	bc 01       	movw	r22, r24
    7c48:	cd 01       	movw	r24, r26
    7c4a:	08 95       	ret

00007c4c <_Z9writeBytePhhi>:
 *      Author: EHaskins
 */

#include "ByteWriter.h"
int writeByte(unsigned char data[], unsigned char val, int offset){
	data[offset] = val;
    7c4c:	fc 01       	movw	r30, r24
    7c4e:	e4 0f       	add	r30, r20
    7c50:	f5 1f       	adc	r31, r21
    7c52:	60 83       	st	Z, r22
	return offset + 1;
    7c54:	ca 01       	movw	r24, r20
    7c56:	01 96       	adiw	r24, 0x01	; 1
}
    7c58:	08 95       	ret

00007c5a <_Z11writeUInt16Phtj>:
int writeUInt16(unsigned char data[], unsigned short val, unsigned int offset){

	data[offset + 1] = (unsigned char)(val >> 8);
    7c5a:	fc 01       	movw	r30, r24
    7c5c:	e4 0f       	add	r30, r20
    7c5e:	f5 1f       	adc	r31, r21
    7c60:	71 83       	std	Z+1, r23	; 0x01
	data[offset + 0] = (unsigned char)val;
    7c62:	60 83       	st	Z, r22
	return offset + 2;
    7c64:	ca 01       	movw	r24, r20
    7c66:	02 96       	adiw	r24, 0x02	; 2
}
    7c68:	08 95       	ret

00007c6a <_Z11writeUInt32Phmj>:
int writeUInt32(unsigned char data[], unsigned long val, unsigned int offset){
	data[offset + 3] = (unsigned char)(val >> 24);
    7c6a:	fc 01       	movw	r30, r24
    7c6c:	e2 0f       	add	r30, r18
    7c6e:	f3 1f       	adc	r31, r19
    7c70:	73 83       	std	Z+3, r23	; 0x03
	data[offset + 2] = (unsigned char)(val >> 16);
    7c72:	62 83       	std	Z+2, r22	; 0x02
	data[offset + 1] = (unsigned char)(val >> 8);
    7c74:	51 83       	std	Z+1, r21	; 0x01
	data[offset + 0] = (unsigned char)val;
    7c76:	40 83       	st	Z, r20
	return offset + 4;
    7c78:	c9 01       	movw	r24, r18
    7c7a:	04 96       	adiw	r24, 0x04	; 4
}
    7c7c:	08 95       	ret

00007c7e <_Z17writeUInt32ForCrcPhmj>:

int writeUInt32ForCrc(unsigned char data[], unsigned long val, unsigned int offset){
	data[offset + 3] = (unsigned char)(val >> 24);
    7c7e:	fc 01       	movw	r30, r24
    7c80:	e2 0f       	add	r30, r18
    7c82:	f3 1f       	adc	r31, r19
    7c84:	73 83       	std	Z+3, r23	; 0x03
	data[offset + 2] = (unsigned char)(val >> 16);
    7c86:	62 83       	std	Z+2, r22	; 0x02
	data[offset + 1] = (unsigned char)(val >> 8);
    7c88:	51 83       	std	Z+1, r21	; 0x01
	data[offset] = (unsigned char)val;
    7c8a:	40 83       	st	Z, r20
	return offset + 4;
    7c8c:	c9 01       	movw	r24, r18
    7c8e:	04 96       	adiw	r24, 0x04	; 4
}
    7c90:	08 95       	ret

00007c92 <_Z10writeBytesPhjS_ij>:

int writeBytes(unsigned char data[], unsigned int dataOffset, unsigned char val[], int count, unsigned int valOffset){
    7c92:	0f 93       	push	r16
    7c94:	1f 93       	push	r17
	for (int i = 0; i < count; i++){
    7c96:	12 16       	cp	r1, r18
    7c98:	13 06       	cpc	r1, r19
    7c9a:	74 f4       	brge	.+28     	; 0x7cb8 <_Z10writeBytesPhjS_ij+0x26>
	data[offset + 1] = (unsigned char)(val >> 8);
	data[offset] = (unsigned char)val;
	return offset + 4;
}

int writeBytes(unsigned char data[], unsigned int dataOffset, unsigned char val[], int count, unsigned int valOffset){
    7c9c:	da 01       	movw	r26, r20
    7c9e:	a0 0f       	add	r26, r16
    7ca0:	b1 1f       	adc	r27, r17
    7ca2:	fc 01       	movw	r30, r24
    7ca4:	e6 0f       	add	r30, r22
    7ca6:	f7 1f       	adc	r31, r23
	for (int i = 0; i < count; i++){
    7ca8:	80 e0       	ldi	r24, 0x00	; 0
    7caa:	90 e0       	ldi	r25, 0x00	; 0
		data[i + dataOffset] = val[i + valOffset];
    7cac:	4d 91       	ld	r20, X+
    7cae:	41 93       	st	Z+, r20
	data[offset] = (unsigned char)val;
	return offset + 4;
}

int writeBytes(unsigned char data[], unsigned int dataOffset, unsigned char val[], int count, unsigned int valOffset){
	for (int i = 0; i < count; i++){
    7cb0:	01 96       	adiw	r24, 0x01	; 1
    7cb2:	82 17       	cp	r24, r18
    7cb4:	93 07       	cpc	r25, r19
    7cb6:	d1 f7       	brne	.-12     	; 0x7cac <_Z10writeBytesPhjS_ij+0x1a>
		data[i + dataOffset] = val[i + valOffset];
	}
	return dataOffset + count;
    7cb8:	26 0f       	add	r18, r22
    7cba:	37 1f       	adc	r19, r23
}
    7cbc:	82 2f       	mov	r24, r18
    7cbe:	93 2f       	mov	r25, r19
    7cc0:	1f 91       	pop	r17
    7cc2:	0f 91       	pop	r16
    7cc4:	08 95       	ret

00007cc6 <__ashldi3>:
    7cc6:	cf 92       	push	r12
    7cc8:	df 92       	push	r13
    7cca:	ef 92       	push	r14
    7ccc:	ff 92       	push	r15
    7cce:	0f 93       	push	r16
    7cd0:	cf 93       	push	r28
    7cd2:	df 93       	push	r29
    7cd4:	cd b7       	in	r28, 0x3d	; 61
    7cd6:	de b7       	in	r29, 0x3e	; 62
    7cd8:	60 97       	sbiw	r28, 0x10	; 16
    7cda:	0f b6       	in	r0, 0x3f	; 63
    7cdc:	f8 94       	cli
    7cde:	de bf       	out	0x3e, r29	; 62
    7ce0:	0f be       	out	0x3f, r0	; 63
    7ce2:	cd bf       	out	0x3d, r28	; 61
    7ce4:	00 23       	and	r16, r16
    7ce6:	09 f4       	brne	.+2      	; 0x7cea <__ashldi3+0x24>
    7ce8:	5a c0       	rjmp	.+180    	; 0x7d9e <__ashldi3+0xd8>
    7cea:	29 87       	std	Y+9, r18	; 0x09
    7cec:	3a 87       	std	Y+10, r19	; 0x0a
    7cee:	4b 87       	std	Y+11, r20	; 0x0b
    7cf0:	5c 87       	std	Y+12, r21	; 0x0c
    7cf2:	6d 87       	std	Y+13, r22	; 0x0d
    7cf4:	7e 87       	std	Y+14, r23	; 0x0e
    7cf6:	8f 87       	std	Y+15, r24	; 0x0f
    7cf8:	98 8b       	std	Y+16, r25	; 0x10
    7cfa:	80 e2       	ldi	r24, 0x20	; 32
    7cfc:	80 1b       	sub	r24, r16
    7cfe:	49 85       	ldd	r20, Y+9	; 0x09
    7d00:	5a 85       	ldd	r21, Y+10	; 0x0a
    7d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    7d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    7d06:	18 16       	cp	r1, r24
    7d08:	b4 f0       	brlt	.+44     	; 0x7d36 <__ashldi3+0x70>
    7d0a:	19 82       	std	Y+1, r1	; 0x01
    7d0c:	1a 82       	std	Y+2, r1	; 0x02
    7d0e:	1b 82       	std	Y+3, r1	; 0x03
    7d10:	1c 82       	std	Y+4, r1	; 0x04
    7d12:	99 27       	eor	r25, r25
    7d14:	87 fd       	sbrc	r24, 7
    7d16:	90 95       	com	r25
    7d18:	90 95       	com	r25
    7d1a:	81 95       	neg	r24
    7d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    7d1e:	04 c0       	rjmp	.+8      	; 0x7d28 <__ashldi3+0x62>
    7d20:	44 0f       	add	r20, r20
    7d22:	55 1f       	adc	r21, r21
    7d24:	66 1f       	adc	r22, r22
    7d26:	77 1f       	adc	r23, r23
    7d28:	8a 95       	dec	r24
    7d2a:	d2 f7       	brpl	.-12     	; 0x7d20 <__ashldi3+0x5a>
    7d2c:	4d 83       	std	Y+5, r20	; 0x05
    7d2e:	5e 83       	std	Y+6, r21	; 0x06
    7d30:	6f 83       	std	Y+7, r22	; 0x07
    7d32:	78 87       	std	Y+8, r23	; 0x08
    7d34:	2c c0       	rjmp	.+88     	; 0x7d8e <__ashldi3+0xc8>
    7d36:	6a 01       	movw	r12, r20
    7d38:	7b 01       	movw	r14, r22
    7d3a:	00 2e       	mov	r0, r16
    7d3c:	04 c0       	rjmp	.+8      	; 0x7d46 <__ashldi3+0x80>
    7d3e:	cc 0c       	add	r12, r12
    7d40:	dd 1c       	adc	r13, r13
    7d42:	ee 1c       	adc	r14, r14
    7d44:	ff 1c       	adc	r15, r15
    7d46:	0a 94       	dec	r0
    7d48:	d2 f7       	brpl	.-12     	; 0x7d3e <__ashldi3+0x78>
    7d4a:	c9 82       	std	Y+1, r12	; 0x01
    7d4c:	da 82       	std	Y+2, r13	; 0x02
    7d4e:	eb 82       	std	Y+3, r14	; 0x03
    7d50:	fc 82       	std	Y+4, r15	; 0x04
    7d52:	6a 01       	movw	r12, r20
    7d54:	7b 01       	movw	r14, r22
    7d56:	04 c0       	rjmp	.+8      	; 0x7d60 <__ashldi3+0x9a>
    7d58:	f6 94       	lsr	r15
    7d5a:	e7 94       	ror	r14
    7d5c:	d7 94       	ror	r13
    7d5e:	c7 94       	ror	r12
    7d60:	8a 95       	dec	r24
    7d62:	d2 f7       	brpl	.-12     	; 0x7d58 <__ashldi3+0x92>
    7d64:	d7 01       	movw	r26, r14
    7d66:	c6 01       	movw	r24, r12
    7d68:	4d 85       	ldd	r20, Y+13	; 0x0d
    7d6a:	5e 85       	ldd	r21, Y+14	; 0x0e
    7d6c:	6f 85       	ldd	r22, Y+15	; 0x0f
    7d6e:	78 89       	ldd	r23, Y+16	; 0x10
    7d70:	04 c0       	rjmp	.+8      	; 0x7d7a <__ashldi3+0xb4>
    7d72:	44 0f       	add	r20, r20
    7d74:	55 1f       	adc	r21, r21
    7d76:	66 1f       	adc	r22, r22
    7d78:	77 1f       	adc	r23, r23
    7d7a:	0a 95       	dec	r16
    7d7c:	d2 f7       	brpl	.-12     	; 0x7d72 <__ashldi3+0xac>
    7d7e:	84 2b       	or	r24, r20
    7d80:	95 2b       	or	r25, r21
    7d82:	a6 2b       	or	r26, r22
    7d84:	b7 2b       	or	r27, r23
    7d86:	8d 83       	std	Y+5, r24	; 0x05
    7d88:	9e 83       	std	Y+6, r25	; 0x06
    7d8a:	af 83       	std	Y+7, r26	; 0x07
    7d8c:	b8 87       	std	Y+8, r27	; 0x08
    7d8e:	29 81       	ldd	r18, Y+1	; 0x01
    7d90:	3a 81       	ldd	r19, Y+2	; 0x02
    7d92:	4b 81       	ldd	r20, Y+3	; 0x03
    7d94:	5c 81       	ldd	r21, Y+4	; 0x04
    7d96:	6d 81       	ldd	r22, Y+5	; 0x05
    7d98:	7e 81       	ldd	r23, Y+6	; 0x06
    7d9a:	8f 81       	ldd	r24, Y+7	; 0x07
    7d9c:	98 85       	ldd	r25, Y+8	; 0x08
    7d9e:	60 96       	adiw	r28, 0x10	; 16
    7da0:	0f b6       	in	r0, 0x3f	; 63
    7da2:	f8 94       	cli
    7da4:	de bf       	out	0x3e, r29	; 62
    7da6:	0f be       	out	0x3f, r0	; 63
    7da8:	cd bf       	out	0x3d, r28	; 61
    7daa:	df 91       	pop	r29
    7dac:	cf 91       	pop	r28
    7dae:	0f 91       	pop	r16
    7db0:	ff 90       	pop	r15
    7db2:	ef 90       	pop	r14
    7db4:	df 90       	pop	r13
    7db6:	cf 90       	pop	r12
    7db8:	08 95       	ret

00007dba <__subsf3>:
    7dba:	50 58       	subi	r21, 0x80	; 128

00007dbc <__addsf3>:
    7dbc:	bb 27       	eor	r27, r27
    7dbe:	aa 27       	eor	r26, r26
    7dc0:	0e d0       	rcall	.+28     	; 0x7dde <__addsf3x>
    7dc2:	fc c1       	rjmp	.+1016   	; 0x81bc <__fp_round>
    7dc4:	ed d1       	rcall	.+986    	; 0x81a0 <__fp_pscA>
    7dc6:	30 f0       	brcs	.+12     	; 0x7dd4 <__addsf3+0x18>
    7dc8:	f2 d1       	rcall	.+996    	; 0x81ae <__fp_pscB>
    7dca:	20 f0       	brcs	.+8      	; 0x7dd4 <__addsf3+0x18>
    7dcc:	31 f4       	brne	.+12     	; 0x7dda <__addsf3+0x1e>
    7dce:	9f 3f       	cpi	r25, 0xFF	; 255
    7dd0:	11 f4       	brne	.+4      	; 0x7dd6 <__addsf3+0x1a>
    7dd2:	1e f4       	brtc	.+6      	; 0x7dda <__addsf3+0x1e>
    7dd4:	bd c1       	rjmp	.+890    	; 0x8150 <__fp_nan>
    7dd6:	0e f4       	brtc	.+2      	; 0x7dda <__addsf3+0x1e>
    7dd8:	e0 95       	com	r30
    7dda:	e7 fb       	bst	r30, 7
    7ddc:	b3 c1       	rjmp	.+870    	; 0x8144 <__fp_inf>

00007dde <__addsf3x>:
    7dde:	e9 2f       	mov	r30, r25
    7de0:	fe d1       	rcall	.+1020   	; 0x81de <__fp_split3>
    7de2:	80 f3       	brcs	.-32     	; 0x7dc4 <__addsf3+0x8>
    7de4:	ba 17       	cp	r27, r26
    7de6:	62 07       	cpc	r22, r18
    7de8:	73 07       	cpc	r23, r19
    7dea:	84 07       	cpc	r24, r20
    7dec:	95 07       	cpc	r25, r21
    7dee:	18 f0       	brcs	.+6      	; 0x7df6 <__addsf3x+0x18>
    7df0:	71 f4       	brne	.+28     	; 0x7e0e <__addsf3x+0x30>
    7df2:	9e f5       	brtc	.+102    	; 0x7e5a <__addsf3x+0x7c>
    7df4:	16 c2       	rjmp	.+1068   	; 0x8222 <__fp_zero>
    7df6:	0e f4       	brtc	.+2      	; 0x7dfa <__addsf3x+0x1c>
    7df8:	e0 95       	com	r30
    7dfa:	0b 2e       	mov	r0, r27
    7dfc:	ba 2f       	mov	r27, r26
    7dfe:	a0 2d       	mov	r26, r0
    7e00:	0b 01       	movw	r0, r22
    7e02:	b9 01       	movw	r22, r18
    7e04:	90 01       	movw	r18, r0
    7e06:	0c 01       	movw	r0, r24
    7e08:	ca 01       	movw	r24, r20
    7e0a:	a0 01       	movw	r20, r0
    7e0c:	11 24       	eor	r1, r1
    7e0e:	ff 27       	eor	r31, r31
    7e10:	59 1b       	sub	r21, r25
    7e12:	99 f0       	breq	.+38     	; 0x7e3a <__addsf3x+0x5c>
    7e14:	59 3f       	cpi	r21, 0xF9	; 249
    7e16:	50 f4       	brcc	.+20     	; 0x7e2c <__addsf3x+0x4e>
    7e18:	50 3e       	cpi	r21, 0xE0	; 224
    7e1a:	68 f1       	brcs	.+90     	; 0x7e76 <__addsf3x+0x98>
    7e1c:	1a 16       	cp	r1, r26
    7e1e:	f0 40       	sbci	r31, 0x00	; 0
    7e20:	a2 2f       	mov	r26, r18
    7e22:	23 2f       	mov	r18, r19
    7e24:	34 2f       	mov	r19, r20
    7e26:	44 27       	eor	r20, r20
    7e28:	58 5f       	subi	r21, 0xF8	; 248
    7e2a:	f3 cf       	rjmp	.-26     	; 0x7e12 <__addsf3x+0x34>
    7e2c:	46 95       	lsr	r20
    7e2e:	37 95       	ror	r19
    7e30:	27 95       	ror	r18
    7e32:	a7 95       	ror	r26
    7e34:	f0 40       	sbci	r31, 0x00	; 0
    7e36:	53 95       	inc	r21
    7e38:	c9 f7       	brne	.-14     	; 0x7e2c <__addsf3x+0x4e>
    7e3a:	7e f4       	brtc	.+30     	; 0x7e5a <__addsf3x+0x7c>
    7e3c:	1f 16       	cp	r1, r31
    7e3e:	ba 0b       	sbc	r27, r26
    7e40:	62 0b       	sbc	r22, r18
    7e42:	73 0b       	sbc	r23, r19
    7e44:	84 0b       	sbc	r24, r20
    7e46:	ba f0       	brmi	.+46     	; 0x7e76 <__addsf3x+0x98>
    7e48:	91 50       	subi	r25, 0x01	; 1
    7e4a:	a1 f0       	breq	.+40     	; 0x7e74 <__addsf3x+0x96>
    7e4c:	ff 0f       	add	r31, r31
    7e4e:	bb 1f       	adc	r27, r27
    7e50:	66 1f       	adc	r22, r22
    7e52:	77 1f       	adc	r23, r23
    7e54:	88 1f       	adc	r24, r24
    7e56:	c2 f7       	brpl	.-16     	; 0x7e48 <__addsf3x+0x6a>
    7e58:	0e c0       	rjmp	.+28     	; 0x7e76 <__addsf3x+0x98>
    7e5a:	ba 0f       	add	r27, r26
    7e5c:	62 1f       	adc	r22, r18
    7e5e:	73 1f       	adc	r23, r19
    7e60:	84 1f       	adc	r24, r20
    7e62:	48 f4       	brcc	.+18     	; 0x7e76 <__addsf3x+0x98>
    7e64:	87 95       	ror	r24
    7e66:	77 95       	ror	r23
    7e68:	67 95       	ror	r22
    7e6a:	b7 95       	ror	r27
    7e6c:	f7 95       	ror	r31
    7e6e:	9e 3f       	cpi	r25, 0xFE	; 254
    7e70:	08 f0       	brcs	.+2      	; 0x7e74 <__addsf3x+0x96>
    7e72:	b3 cf       	rjmp	.-154    	; 0x7dda <__addsf3+0x1e>
    7e74:	93 95       	inc	r25
    7e76:	88 0f       	add	r24, r24
    7e78:	08 f0       	brcs	.+2      	; 0x7e7c <__addsf3x+0x9e>
    7e7a:	99 27       	eor	r25, r25
    7e7c:	ee 0f       	add	r30, r30
    7e7e:	97 95       	ror	r25
    7e80:	87 95       	ror	r24
    7e82:	08 95       	ret
    7e84:	8d d1       	rcall	.+794    	; 0x81a0 <__fp_pscA>
    7e86:	58 f0       	brcs	.+22     	; 0x7e9e <__addsf3x+0xc0>
    7e88:	80 e8       	ldi	r24, 0x80	; 128
    7e8a:	91 e0       	ldi	r25, 0x01	; 1
    7e8c:	09 f4       	brne	.+2      	; 0x7e90 <__addsf3x+0xb2>
    7e8e:	9e ef       	ldi	r25, 0xFE	; 254
    7e90:	8e d1       	rcall	.+796    	; 0x81ae <__fp_pscB>
    7e92:	28 f0       	brcs	.+10     	; 0x7e9e <__addsf3x+0xc0>
    7e94:	40 e8       	ldi	r20, 0x80	; 128
    7e96:	51 e0       	ldi	r21, 0x01	; 1
    7e98:	59 f4       	brne	.+22     	; 0x7eb0 <atan2+0xe>
    7e9a:	5e ef       	ldi	r21, 0xFE	; 254
    7e9c:	09 c0       	rjmp	.+18     	; 0x7eb0 <atan2+0xe>
    7e9e:	58 c1       	rjmp	.+688    	; 0x8150 <__fp_nan>
    7ea0:	c0 c1       	rjmp	.+896    	; 0x8222 <__fp_zero>

00007ea2 <atan2>:
    7ea2:	e9 2f       	mov	r30, r25
    7ea4:	e0 78       	andi	r30, 0x80	; 128
    7ea6:	9b d1       	rcall	.+822    	; 0x81de <__fp_split3>
    7ea8:	68 f3       	brcs	.-38     	; 0x7e84 <__addsf3x+0xa6>
    7eaa:	09 2e       	mov	r0, r25
    7eac:	05 2a       	or	r0, r21
    7eae:	c1 f3       	breq	.-16     	; 0x7ea0 <__addsf3x+0xc2>
    7eb0:	26 17       	cp	r18, r22
    7eb2:	37 07       	cpc	r19, r23
    7eb4:	48 07       	cpc	r20, r24
    7eb6:	59 07       	cpc	r21, r25
    7eb8:	38 f0       	brcs	.+14     	; 0x7ec8 <atan2+0x26>
    7eba:	0e 2e       	mov	r0, r30
    7ebc:	07 f8       	bld	r0, 7
    7ebe:	e0 25       	eor	r30, r0
    7ec0:	69 f0       	breq	.+26     	; 0x7edc <atan2+0x3a>
    7ec2:	e0 25       	eor	r30, r0
    7ec4:	e0 64       	ori	r30, 0x40	; 64
    7ec6:	0a c0       	rjmp	.+20     	; 0x7edc <atan2+0x3a>
    7ec8:	ef 63       	ori	r30, 0x3F	; 63
    7eca:	07 f8       	bld	r0, 7
    7ecc:	00 94       	com	r0
    7ece:	07 fa       	bst	r0, 7
    7ed0:	db 01       	movw	r26, r22
    7ed2:	b9 01       	movw	r22, r18
    7ed4:	9d 01       	movw	r18, r26
    7ed6:	dc 01       	movw	r26, r24
    7ed8:	ca 01       	movw	r24, r20
    7eda:	ad 01       	movw	r20, r26
    7edc:	ef 93       	push	r30
    7ede:	47 d0       	rcall	.+142    	; 0x7f6e <__divsf3_pse>
    7ee0:	6d d1       	rcall	.+730    	; 0x81bc <__fp_round>
    7ee2:	0a d0       	rcall	.+20     	; 0x7ef8 <atan>
    7ee4:	5f 91       	pop	r21
    7ee6:	55 23       	and	r21, r21
    7ee8:	31 f0       	breq	.+12     	; 0x7ef6 <atan2+0x54>
    7eea:	2b ed       	ldi	r18, 0xDB	; 219
    7eec:	3f e0       	ldi	r19, 0x0F	; 15
    7eee:	49 e4       	ldi	r20, 0x49	; 73
    7ef0:	50 fd       	sbrc	r21, 0
    7ef2:	49 ec       	ldi	r20, 0xC9	; 201
    7ef4:	63 cf       	rjmp	.-314    	; 0x7dbc <__addsf3>
    7ef6:	08 95       	ret

00007ef8 <atan>:
    7ef8:	df 93       	push	r29
    7efa:	dd 27       	eor	r29, r29
    7efc:	b9 2f       	mov	r27, r25
    7efe:	bf 77       	andi	r27, 0x7F	; 127
    7f00:	40 e8       	ldi	r20, 0x80	; 128
    7f02:	5f e3       	ldi	r21, 0x3F	; 63
    7f04:	16 16       	cp	r1, r22
    7f06:	17 06       	cpc	r1, r23
    7f08:	48 07       	cpc	r20, r24
    7f0a:	5b 07       	cpc	r21, r27
    7f0c:	10 f4       	brcc	.+4      	; 0x7f12 <atan+0x1a>
    7f0e:	d9 2f       	mov	r29, r25
    7f10:	93 d1       	rcall	.+806    	; 0x8238 <inverse>
    7f12:	9f 93       	push	r25
    7f14:	8f 93       	push	r24
    7f16:	7f 93       	push	r23
    7f18:	6f 93       	push	r22
    7f1a:	f8 d1       	rcall	.+1008   	; 0x830c <square>
    7f1c:	e8 e6       	ldi	r30, 0x68	; 104
    7f1e:	f0 e0       	ldi	r31, 0x00	; 0
    7f20:	1a d1       	rcall	.+564    	; 0x8156 <__fp_powser>
    7f22:	4c d1       	rcall	.+664    	; 0x81bc <__fp_round>
    7f24:	2f 91       	pop	r18
    7f26:	3f 91       	pop	r19
    7f28:	4f 91       	pop	r20
    7f2a:	5f 91       	pop	r21
    7f2c:	98 d1       	rcall	.+816    	; 0x825e <__mulsf3x>
    7f2e:	dd 23       	and	r29, r29
    7f30:	49 f0       	breq	.+18     	; 0x7f44 <atan+0x4c>
    7f32:	90 58       	subi	r25, 0x80	; 128
    7f34:	a2 ea       	ldi	r26, 0xA2	; 162
    7f36:	2a ed       	ldi	r18, 0xDA	; 218
    7f38:	3f e0       	ldi	r19, 0x0F	; 15
    7f3a:	49 ec       	ldi	r20, 0xC9	; 201
    7f3c:	5f e3       	ldi	r21, 0x3F	; 63
    7f3e:	d0 78       	andi	r29, 0x80	; 128
    7f40:	5d 27       	eor	r21, r29
    7f42:	4d df       	rcall	.-358    	; 0x7dde <__addsf3x>
    7f44:	df 91       	pop	r29
    7f46:	3a c1       	rjmp	.+628    	; 0x81bc <__fp_round>

00007f48 <__cmpsf2>:
    7f48:	d9 d0       	rcall	.+434    	; 0x80fc <__fp_cmp>
    7f4a:	08 f4       	brcc	.+2      	; 0x7f4e <__cmpsf2+0x6>
    7f4c:	81 e0       	ldi	r24, 0x01	; 1
    7f4e:	08 95       	ret

00007f50 <__divsf3>:
    7f50:	0c d0       	rcall	.+24     	; 0x7f6a <__divsf3x>
    7f52:	34 c1       	rjmp	.+616    	; 0x81bc <__fp_round>
    7f54:	2c d1       	rcall	.+600    	; 0x81ae <__fp_pscB>
    7f56:	40 f0       	brcs	.+16     	; 0x7f68 <__divsf3+0x18>
    7f58:	23 d1       	rcall	.+582    	; 0x81a0 <__fp_pscA>
    7f5a:	30 f0       	brcs	.+12     	; 0x7f68 <__divsf3+0x18>
    7f5c:	21 f4       	brne	.+8      	; 0x7f66 <__divsf3+0x16>
    7f5e:	5f 3f       	cpi	r21, 0xFF	; 255
    7f60:	19 f0       	breq	.+6      	; 0x7f68 <__divsf3+0x18>
    7f62:	f0 c0       	rjmp	.+480    	; 0x8144 <__fp_inf>
    7f64:	51 11       	cpse	r21, r1
    7f66:	5e c1       	rjmp	.+700    	; 0x8224 <__fp_szero>
    7f68:	f3 c0       	rjmp	.+486    	; 0x8150 <__fp_nan>

00007f6a <__divsf3x>:
    7f6a:	39 d1       	rcall	.+626    	; 0x81de <__fp_split3>
    7f6c:	98 f3       	brcs	.-26     	; 0x7f54 <__divsf3+0x4>

00007f6e <__divsf3_pse>:
    7f6e:	99 23       	and	r25, r25
    7f70:	c9 f3       	breq	.-14     	; 0x7f64 <__divsf3+0x14>
    7f72:	55 23       	and	r21, r21
    7f74:	b1 f3       	breq	.-20     	; 0x7f62 <__divsf3+0x12>
    7f76:	95 1b       	sub	r25, r21
    7f78:	55 0b       	sbc	r21, r21
    7f7a:	bb 27       	eor	r27, r27
    7f7c:	aa 27       	eor	r26, r26
    7f7e:	62 17       	cp	r22, r18
    7f80:	73 07       	cpc	r23, r19
    7f82:	84 07       	cpc	r24, r20
    7f84:	38 f0       	brcs	.+14     	; 0x7f94 <__divsf3_pse+0x26>
    7f86:	9f 5f       	subi	r25, 0xFF	; 255
    7f88:	5f 4f       	sbci	r21, 0xFF	; 255
    7f8a:	22 0f       	add	r18, r18
    7f8c:	33 1f       	adc	r19, r19
    7f8e:	44 1f       	adc	r20, r20
    7f90:	aa 1f       	adc	r26, r26
    7f92:	a9 f3       	breq	.-22     	; 0x7f7e <__divsf3_pse+0x10>
    7f94:	33 d0       	rcall	.+102    	; 0x7ffc <__divsf3_pse+0x8e>
    7f96:	0e 2e       	mov	r0, r30
    7f98:	3a f0       	brmi	.+14     	; 0x7fa8 <__divsf3_pse+0x3a>
    7f9a:	e0 e8       	ldi	r30, 0x80	; 128
    7f9c:	30 d0       	rcall	.+96     	; 0x7ffe <__divsf3_pse+0x90>
    7f9e:	91 50       	subi	r25, 0x01	; 1
    7fa0:	50 40       	sbci	r21, 0x00	; 0
    7fa2:	e6 95       	lsr	r30
    7fa4:	00 1c       	adc	r0, r0
    7fa6:	ca f7       	brpl	.-14     	; 0x7f9a <__divsf3_pse+0x2c>
    7fa8:	29 d0       	rcall	.+82     	; 0x7ffc <__divsf3_pse+0x8e>
    7faa:	fe 2f       	mov	r31, r30
    7fac:	27 d0       	rcall	.+78     	; 0x7ffc <__divsf3_pse+0x8e>
    7fae:	66 0f       	add	r22, r22
    7fb0:	77 1f       	adc	r23, r23
    7fb2:	88 1f       	adc	r24, r24
    7fb4:	bb 1f       	adc	r27, r27
    7fb6:	26 17       	cp	r18, r22
    7fb8:	37 07       	cpc	r19, r23
    7fba:	48 07       	cpc	r20, r24
    7fbc:	ab 07       	cpc	r26, r27
    7fbe:	b0 e8       	ldi	r27, 0x80	; 128
    7fc0:	09 f0       	breq	.+2      	; 0x7fc4 <__divsf3_pse+0x56>
    7fc2:	bb 0b       	sbc	r27, r27
    7fc4:	80 2d       	mov	r24, r0
    7fc6:	bf 01       	movw	r22, r30
    7fc8:	ff 27       	eor	r31, r31
    7fca:	93 58       	subi	r25, 0x83	; 131
    7fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    7fce:	2a f0       	brmi	.+10     	; 0x7fda <__divsf3_pse+0x6c>
    7fd0:	9e 3f       	cpi	r25, 0xFE	; 254
    7fd2:	51 05       	cpc	r21, r1
    7fd4:	68 f0       	brcs	.+26     	; 0x7ff0 <__divsf3_pse+0x82>
    7fd6:	b6 c0       	rjmp	.+364    	; 0x8144 <__fp_inf>
    7fd8:	25 c1       	rjmp	.+586    	; 0x8224 <__fp_szero>
    7fda:	5f 3f       	cpi	r21, 0xFF	; 255
    7fdc:	ec f3       	brlt	.-6      	; 0x7fd8 <__divsf3_pse+0x6a>
    7fde:	98 3e       	cpi	r25, 0xE8	; 232
    7fe0:	dc f3       	brlt	.-10     	; 0x7fd8 <__divsf3_pse+0x6a>
    7fe2:	86 95       	lsr	r24
    7fe4:	77 95       	ror	r23
    7fe6:	67 95       	ror	r22
    7fe8:	b7 95       	ror	r27
    7fea:	f7 95       	ror	r31
    7fec:	9f 5f       	subi	r25, 0xFF	; 255
    7fee:	c9 f7       	brne	.-14     	; 0x7fe2 <__divsf3_pse+0x74>
    7ff0:	88 0f       	add	r24, r24
    7ff2:	91 1d       	adc	r25, r1
    7ff4:	96 95       	lsr	r25
    7ff6:	87 95       	ror	r24
    7ff8:	97 f9       	bld	r25, 7
    7ffa:	08 95       	ret
    7ffc:	e1 e0       	ldi	r30, 0x01	; 1
    7ffe:	66 0f       	add	r22, r22
    8000:	77 1f       	adc	r23, r23
    8002:	88 1f       	adc	r24, r24
    8004:	bb 1f       	adc	r27, r27
    8006:	62 17       	cp	r22, r18
    8008:	73 07       	cpc	r23, r19
    800a:	84 07       	cpc	r24, r20
    800c:	ba 07       	cpc	r27, r26
    800e:	20 f0       	brcs	.+8      	; 0x8018 <__divsf3_pse+0xaa>
    8010:	62 1b       	sub	r22, r18
    8012:	73 0b       	sbc	r23, r19
    8014:	84 0b       	sbc	r24, r20
    8016:	ba 0b       	sbc	r27, r26
    8018:	ee 1f       	adc	r30, r30
    801a:	88 f7       	brcc	.-30     	; 0x7ffe <__divsf3_pse+0x90>
    801c:	e0 95       	com	r30
    801e:	08 95       	ret

00008020 <__fixsfsi>:
    8020:	04 d0       	rcall	.+8      	; 0x802a <__fixunssfsi>
    8022:	68 94       	set
    8024:	b1 11       	cpse	r27, r1
    8026:	fe c0       	rjmp	.+508    	; 0x8224 <__fp_szero>
    8028:	08 95       	ret

0000802a <__fixunssfsi>:
    802a:	e1 d0       	rcall	.+450    	; 0x81ee <__fp_splitA>
    802c:	88 f0       	brcs	.+34     	; 0x8050 <__fixunssfsi+0x26>
    802e:	9f 57       	subi	r25, 0x7F	; 127
    8030:	90 f0       	brcs	.+36     	; 0x8056 <__fixunssfsi+0x2c>
    8032:	b9 2f       	mov	r27, r25
    8034:	99 27       	eor	r25, r25
    8036:	b7 51       	subi	r27, 0x17	; 23
    8038:	a0 f0       	brcs	.+40     	; 0x8062 <__fixunssfsi+0x38>
    803a:	d1 f0       	breq	.+52     	; 0x8070 <__fixunssfsi+0x46>
    803c:	66 0f       	add	r22, r22
    803e:	77 1f       	adc	r23, r23
    8040:	88 1f       	adc	r24, r24
    8042:	99 1f       	adc	r25, r25
    8044:	1a f0       	brmi	.+6      	; 0x804c <__fixunssfsi+0x22>
    8046:	ba 95       	dec	r27
    8048:	c9 f7       	brne	.-14     	; 0x803c <__fixunssfsi+0x12>
    804a:	12 c0       	rjmp	.+36     	; 0x8070 <__fixunssfsi+0x46>
    804c:	b1 30       	cpi	r27, 0x01	; 1
    804e:	81 f0       	breq	.+32     	; 0x8070 <__fixunssfsi+0x46>
    8050:	e8 d0       	rcall	.+464    	; 0x8222 <__fp_zero>
    8052:	b1 e0       	ldi	r27, 0x01	; 1
    8054:	08 95       	ret
    8056:	e5 c0       	rjmp	.+458    	; 0x8222 <__fp_zero>
    8058:	67 2f       	mov	r22, r23
    805a:	78 2f       	mov	r23, r24
    805c:	88 27       	eor	r24, r24
    805e:	b8 5f       	subi	r27, 0xF8	; 248
    8060:	39 f0       	breq	.+14     	; 0x8070 <__fixunssfsi+0x46>
    8062:	b9 3f       	cpi	r27, 0xF9	; 249
    8064:	cc f3       	brlt	.-14     	; 0x8058 <__fixunssfsi+0x2e>
    8066:	86 95       	lsr	r24
    8068:	77 95       	ror	r23
    806a:	67 95       	ror	r22
    806c:	b3 95       	inc	r27
    806e:	d9 f7       	brne	.-10     	; 0x8066 <__fixunssfsi+0x3c>
    8070:	3e f4       	brtc	.+14     	; 0x8080 <__fixunssfsi+0x56>
    8072:	90 95       	com	r25
    8074:	80 95       	com	r24
    8076:	70 95       	com	r23
    8078:	61 95       	neg	r22
    807a:	7f 4f       	sbci	r23, 0xFF	; 255
    807c:	8f 4f       	sbci	r24, 0xFF	; 255
    807e:	9f 4f       	sbci	r25, 0xFF	; 255
    8080:	08 95       	ret

00008082 <__floatunsisf>:
    8082:	e8 94       	clt
    8084:	09 c0       	rjmp	.+18     	; 0x8098 <__floatsisf+0x12>

00008086 <__floatsisf>:
    8086:	97 fb       	bst	r25, 7
    8088:	3e f4       	brtc	.+14     	; 0x8098 <__floatsisf+0x12>
    808a:	90 95       	com	r25
    808c:	80 95       	com	r24
    808e:	70 95       	com	r23
    8090:	61 95       	neg	r22
    8092:	7f 4f       	sbci	r23, 0xFF	; 255
    8094:	8f 4f       	sbci	r24, 0xFF	; 255
    8096:	9f 4f       	sbci	r25, 0xFF	; 255
    8098:	99 23       	and	r25, r25
    809a:	a9 f0       	breq	.+42     	; 0x80c6 <__floatsisf+0x40>
    809c:	f9 2f       	mov	r31, r25
    809e:	96 e9       	ldi	r25, 0x96	; 150
    80a0:	bb 27       	eor	r27, r27
    80a2:	93 95       	inc	r25
    80a4:	f6 95       	lsr	r31
    80a6:	87 95       	ror	r24
    80a8:	77 95       	ror	r23
    80aa:	67 95       	ror	r22
    80ac:	b7 95       	ror	r27
    80ae:	f1 11       	cpse	r31, r1
    80b0:	f8 cf       	rjmp	.-16     	; 0x80a2 <__floatsisf+0x1c>
    80b2:	fa f4       	brpl	.+62     	; 0x80f2 <__floatsisf+0x6c>
    80b4:	bb 0f       	add	r27, r27
    80b6:	11 f4       	brne	.+4      	; 0x80bc <__floatsisf+0x36>
    80b8:	60 ff       	sbrs	r22, 0
    80ba:	1b c0       	rjmp	.+54     	; 0x80f2 <__floatsisf+0x6c>
    80bc:	6f 5f       	subi	r22, 0xFF	; 255
    80be:	7f 4f       	sbci	r23, 0xFF	; 255
    80c0:	8f 4f       	sbci	r24, 0xFF	; 255
    80c2:	9f 4f       	sbci	r25, 0xFF	; 255
    80c4:	16 c0       	rjmp	.+44     	; 0x80f2 <__floatsisf+0x6c>
    80c6:	88 23       	and	r24, r24
    80c8:	11 f0       	breq	.+4      	; 0x80ce <__floatsisf+0x48>
    80ca:	96 e9       	ldi	r25, 0x96	; 150
    80cc:	11 c0       	rjmp	.+34     	; 0x80f0 <__floatsisf+0x6a>
    80ce:	77 23       	and	r23, r23
    80d0:	21 f0       	breq	.+8      	; 0x80da <__floatsisf+0x54>
    80d2:	9e e8       	ldi	r25, 0x8E	; 142
    80d4:	87 2f       	mov	r24, r23
    80d6:	76 2f       	mov	r23, r22
    80d8:	05 c0       	rjmp	.+10     	; 0x80e4 <__floatsisf+0x5e>
    80da:	66 23       	and	r22, r22
    80dc:	71 f0       	breq	.+28     	; 0x80fa <__floatsisf+0x74>
    80de:	96 e8       	ldi	r25, 0x86	; 134
    80e0:	86 2f       	mov	r24, r22
    80e2:	70 e0       	ldi	r23, 0x00	; 0
    80e4:	60 e0       	ldi	r22, 0x00	; 0
    80e6:	2a f0       	brmi	.+10     	; 0x80f2 <__floatsisf+0x6c>
    80e8:	9a 95       	dec	r25
    80ea:	66 0f       	add	r22, r22
    80ec:	77 1f       	adc	r23, r23
    80ee:	88 1f       	adc	r24, r24
    80f0:	da f7       	brpl	.-10     	; 0x80e8 <__floatsisf+0x62>
    80f2:	88 0f       	add	r24, r24
    80f4:	96 95       	lsr	r25
    80f6:	87 95       	ror	r24
    80f8:	97 f9       	bld	r25, 7
    80fa:	08 95       	ret

000080fc <__fp_cmp>:
    80fc:	99 0f       	add	r25, r25
    80fe:	00 08       	sbc	r0, r0
    8100:	55 0f       	add	r21, r21
    8102:	aa 0b       	sbc	r26, r26
    8104:	e0 e8       	ldi	r30, 0x80	; 128
    8106:	fe ef       	ldi	r31, 0xFE	; 254
    8108:	16 16       	cp	r1, r22
    810a:	17 06       	cpc	r1, r23
    810c:	e8 07       	cpc	r30, r24
    810e:	f9 07       	cpc	r31, r25
    8110:	c0 f0       	brcs	.+48     	; 0x8142 <__fp_cmp+0x46>
    8112:	12 16       	cp	r1, r18
    8114:	13 06       	cpc	r1, r19
    8116:	e4 07       	cpc	r30, r20
    8118:	f5 07       	cpc	r31, r21
    811a:	98 f0       	brcs	.+38     	; 0x8142 <__fp_cmp+0x46>
    811c:	62 1b       	sub	r22, r18
    811e:	73 0b       	sbc	r23, r19
    8120:	84 0b       	sbc	r24, r20
    8122:	95 0b       	sbc	r25, r21
    8124:	39 f4       	brne	.+14     	; 0x8134 <__fp_cmp+0x38>
    8126:	0a 26       	eor	r0, r26
    8128:	61 f0       	breq	.+24     	; 0x8142 <__fp_cmp+0x46>
    812a:	23 2b       	or	r18, r19
    812c:	24 2b       	or	r18, r20
    812e:	25 2b       	or	r18, r21
    8130:	21 f4       	brne	.+8      	; 0x813a <__fp_cmp+0x3e>
    8132:	08 95       	ret
    8134:	0a 26       	eor	r0, r26
    8136:	09 f4       	brne	.+2      	; 0x813a <__fp_cmp+0x3e>
    8138:	a1 40       	sbci	r26, 0x01	; 1
    813a:	a6 95       	lsr	r26
    813c:	8f ef       	ldi	r24, 0xFF	; 255
    813e:	81 1d       	adc	r24, r1
    8140:	81 1d       	adc	r24, r1
    8142:	08 95       	ret

00008144 <__fp_inf>:
    8144:	97 f9       	bld	r25, 7
    8146:	9f 67       	ori	r25, 0x7F	; 127
    8148:	80 e8       	ldi	r24, 0x80	; 128
    814a:	70 e0       	ldi	r23, 0x00	; 0
    814c:	60 e0       	ldi	r22, 0x00	; 0
    814e:	08 95       	ret

00008150 <__fp_nan>:
    8150:	9f ef       	ldi	r25, 0xFF	; 255
    8152:	80 ec       	ldi	r24, 0xC0	; 192
    8154:	08 95       	ret

00008156 <__fp_powser>:
    8156:	df 93       	push	r29
    8158:	cf 93       	push	r28
    815a:	1f 93       	push	r17
    815c:	0f 93       	push	r16
    815e:	ff 92       	push	r15
    8160:	ef 92       	push	r14
    8162:	df 92       	push	r13
    8164:	7b 01       	movw	r14, r22
    8166:	8c 01       	movw	r16, r24
    8168:	68 94       	set
    816a:	05 c0       	rjmp	.+10     	; 0x8176 <__fp_powser+0x20>
    816c:	da 2e       	mov	r13, r26
    816e:	ef 01       	movw	r28, r30
    8170:	76 d0       	rcall	.+236    	; 0x825e <__mulsf3x>
    8172:	fe 01       	movw	r30, r28
    8174:	e8 94       	clt
    8176:	a5 91       	lpm	r26, Z+
    8178:	25 91       	lpm	r18, Z+
    817a:	35 91       	lpm	r19, Z+
    817c:	45 91       	lpm	r20, Z+
    817e:	55 91       	lpm	r21, Z+
    8180:	ae f3       	brts	.-22     	; 0x816c <__fp_powser+0x16>
    8182:	ef 01       	movw	r28, r30
    8184:	2c de       	rcall	.-936    	; 0x7dde <__addsf3x>
    8186:	fe 01       	movw	r30, r28
    8188:	97 01       	movw	r18, r14
    818a:	a8 01       	movw	r20, r16
    818c:	da 94       	dec	r13
    818e:	79 f7       	brne	.-34     	; 0x816e <__fp_powser+0x18>
    8190:	df 90       	pop	r13
    8192:	ef 90       	pop	r14
    8194:	ff 90       	pop	r15
    8196:	0f 91       	pop	r16
    8198:	1f 91       	pop	r17
    819a:	cf 91       	pop	r28
    819c:	df 91       	pop	r29
    819e:	08 95       	ret

000081a0 <__fp_pscA>:
    81a0:	00 24       	eor	r0, r0
    81a2:	0a 94       	dec	r0
    81a4:	16 16       	cp	r1, r22
    81a6:	17 06       	cpc	r1, r23
    81a8:	18 06       	cpc	r1, r24
    81aa:	09 06       	cpc	r0, r25
    81ac:	08 95       	ret

000081ae <__fp_pscB>:
    81ae:	00 24       	eor	r0, r0
    81b0:	0a 94       	dec	r0
    81b2:	12 16       	cp	r1, r18
    81b4:	13 06       	cpc	r1, r19
    81b6:	14 06       	cpc	r1, r20
    81b8:	05 06       	cpc	r0, r21
    81ba:	08 95       	ret

000081bc <__fp_round>:
    81bc:	09 2e       	mov	r0, r25
    81be:	03 94       	inc	r0
    81c0:	00 0c       	add	r0, r0
    81c2:	11 f4       	brne	.+4      	; 0x81c8 <__fp_round+0xc>
    81c4:	88 23       	and	r24, r24
    81c6:	52 f0       	brmi	.+20     	; 0x81dc <__fp_round+0x20>
    81c8:	bb 0f       	add	r27, r27
    81ca:	40 f4       	brcc	.+16     	; 0x81dc <__fp_round+0x20>
    81cc:	bf 2b       	or	r27, r31
    81ce:	11 f4       	brne	.+4      	; 0x81d4 <__fp_round+0x18>
    81d0:	60 ff       	sbrs	r22, 0
    81d2:	04 c0       	rjmp	.+8      	; 0x81dc <__fp_round+0x20>
    81d4:	6f 5f       	subi	r22, 0xFF	; 255
    81d6:	7f 4f       	sbci	r23, 0xFF	; 255
    81d8:	8f 4f       	sbci	r24, 0xFF	; 255
    81da:	9f 4f       	sbci	r25, 0xFF	; 255
    81dc:	08 95       	ret

000081de <__fp_split3>:
    81de:	57 fd       	sbrc	r21, 7
    81e0:	90 58       	subi	r25, 0x80	; 128
    81e2:	44 0f       	add	r20, r20
    81e4:	55 1f       	adc	r21, r21
    81e6:	59 f0       	breq	.+22     	; 0x81fe <__fp_splitA+0x10>
    81e8:	5f 3f       	cpi	r21, 0xFF	; 255
    81ea:	71 f0       	breq	.+28     	; 0x8208 <__fp_splitA+0x1a>
    81ec:	47 95       	ror	r20

000081ee <__fp_splitA>:
    81ee:	88 0f       	add	r24, r24
    81f0:	97 fb       	bst	r25, 7
    81f2:	99 1f       	adc	r25, r25
    81f4:	61 f0       	breq	.+24     	; 0x820e <__fp_splitA+0x20>
    81f6:	9f 3f       	cpi	r25, 0xFF	; 255
    81f8:	79 f0       	breq	.+30     	; 0x8218 <__fp_splitA+0x2a>
    81fa:	87 95       	ror	r24
    81fc:	08 95       	ret
    81fe:	12 16       	cp	r1, r18
    8200:	13 06       	cpc	r1, r19
    8202:	14 06       	cpc	r1, r20
    8204:	55 1f       	adc	r21, r21
    8206:	f2 cf       	rjmp	.-28     	; 0x81ec <__fp_split3+0xe>
    8208:	46 95       	lsr	r20
    820a:	f1 df       	rcall	.-30     	; 0x81ee <__fp_splitA>
    820c:	08 c0       	rjmp	.+16     	; 0x821e <__fp_splitA+0x30>
    820e:	16 16       	cp	r1, r22
    8210:	17 06       	cpc	r1, r23
    8212:	18 06       	cpc	r1, r24
    8214:	99 1f       	adc	r25, r25
    8216:	f1 cf       	rjmp	.-30     	; 0x81fa <__fp_splitA+0xc>
    8218:	86 95       	lsr	r24
    821a:	71 05       	cpc	r23, r1
    821c:	61 05       	cpc	r22, r1
    821e:	08 94       	sec
    8220:	08 95       	ret

00008222 <__fp_zero>:
    8222:	e8 94       	clt

00008224 <__fp_szero>:
    8224:	bb 27       	eor	r27, r27
    8226:	66 27       	eor	r22, r22
    8228:	77 27       	eor	r23, r23
    822a:	cb 01       	movw	r24, r22
    822c:	97 f9       	bld	r25, 7
    822e:	08 95       	ret

00008230 <__gesf2>:
    8230:	65 df       	rcall	.-310    	; 0x80fc <__fp_cmp>
    8232:	08 f4       	brcc	.+2      	; 0x8236 <__gesf2+0x6>
    8234:	8f ef       	ldi	r24, 0xFF	; 255
    8236:	08 95       	ret

00008238 <inverse>:
    8238:	9b 01       	movw	r18, r22
    823a:	ac 01       	movw	r20, r24
    823c:	60 e0       	ldi	r22, 0x00	; 0
    823e:	70 e0       	ldi	r23, 0x00	; 0
    8240:	80 e8       	ldi	r24, 0x80	; 128
    8242:	9f e3       	ldi	r25, 0x3F	; 63
    8244:	85 ce       	rjmp	.-758    	; 0x7f50 <__divsf3>

00008246 <__mulsf3>:
    8246:	0b d0       	rcall	.+22     	; 0x825e <__mulsf3x>
    8248:	b9 cf       	rjmp	.-142    	; 0x81bc <__fp_round>
    824a:	aa df       	rcall	.-172    	; 0x81a0 <__fp_pscA>
    824c:	28 f0       	brcs	.+10     	; 0x8258 <__mulsf3+0x12>
    824e:	af df       	rcall	.-162    	; 0x81ae <__fp_pscB>
    8250:	18 f0       	brcs	.+6      	; 0x8258 <__mulsf3+0x12>
    8252:	95 23       	and	r25, r21
    8254:	09 f0       	breq	.+2      	; 0x8258 <__mulsf3+0x12>
    8256:	76 cf       	rjmp	.-276    	; 0x8144 <__fp_inf>
    8258:	7b cf       	rjmp	.-266    	; 0x8150 <__fp_nan>
    825a:	11 24       	eor	r1, r1
    825c:	e3 cf       	rjmp	.-58     	; 0x8224 <__fp_szero>

0000825e <__mulsf3x>:
    825e:	bf df       	rcall	.-130    	; 0x81de <__fp_split3>
    8260:	a0 f3       	brcs	.-24     	; 0x824a <__mulsf3+0x4>

00008262 <__mulsf3_pse>:
    8262:	95 9f       	mul	r25, r21
    8264:	d1 f3       	breq	.-12     	; 0x825a <__mulsf3+0x14>
    8266:	95 0f       	add	r25, r21
    8268:	50 e0       	ldi	r21, 0x00	; 0
    826a:	55 1f       	adc	r21, r21
    826c:	62 9f       	mul	r22, r18
    826e:	f0 01       	movw	r30, r0
    8270:	72 9f       	mul	r23, r18
    8272:	bb 27       	eor	r27, r27
    8274:	f0 0d       	add	r31, r0
    8276:	b1 1d       	adc	r27, r1
    8278:	63 9f       	mul	r22, r19
    827a:	aa 27       	eor	r26, r26
    827c:	f0 0d       	add	r31, r0
    827e:	b1 1d       	adc	r27, r1
    8280:	aa 1f       	adc	r26, r26
    8282:	64 9f       	mul	r22, r20
    8284:	66 27       	eor	r22, r22
    8286:	b0 0d       	add	r27, r0
    8288:	a1 1d       	adc	r26, r1
    828a:	66 1f       	adc	r22, r22
    828c:	82 9f       	mul	r24, r18
    828e:	22 27       	eor	r18, r18
    8290:	b0 0d       	add	r27, r0
    8292:	a1 1d       	adc	r26, r1
    8294:	62 1f       	adc	r22, r18
    8296:	73 9f       	mul	r23, r19
    8298:	b0 0d       	add	r27, r0
    829a:	a1 1d       	adc	r26, r1
    829c:	62 1f       	adc	r22, r18
    829e:	83 9f       	mul	r24, r19
    82a0:	a0 0d       	add	r26, r0
    82a2:	61 1d       	adc	r22, r1
    82a4:	22 1f       	adc	r18, r18
    82a6:	74 9f       	mul	r23, r20
    82a8:	33 27       	eor	r19, r19
    82aa:	a0 0d       	add	r26, r0
    82ac:	61 1d       	adc	r22, r1
    82ae:	23 1f       	adc	r18, r19
    82b0:	84 9f       	mul	r24, r20
    82b2:	60 0d       	add	r22, r0
    82b4:	21 1d       	adc	r18, r1
    82b6:	82 2f       	mov	r24, r18
    82b8:	76 2f       	mov	r23, r22
    82ba:	6a 2f       	mov	r22, r26
    82bc:	11 24       	eor	r1, r1
    82be:	9f 57       	subi	r25, 0x7F	; 127
    82c0:	50 40       	sbci	r21, 0x00	; 0
    82c2:	8a f0       	brmi	.+34     	; 0x82e6 <__mulsf3_pse+0x84>
    82c4:	e1 f0       	breq	.+56     	; 0x82fe <__mulsf3_pse+0x9c>
    82c6:	88 23       	and	r24, r24
    82c8:	4a f0       	brmi	.+18     	; 0x82dc <__mulsf3_pse+0x7a>
    82ca:	ee 0f       	add	r30, r30
    82cc:	ff 1f       	adc	r31, r31
    82ce:	bb 1f       	adc	r27, r27
    82d0:	66 1f       	adc	r22, r22
    82d2:	77 1f       	adc	r23, r23
    82d4:	88 1f       	adc	r24, r24
    82d6:	91 50       	subi	r25, 0x01	; 1
    82d8:	50 40       	sbci	r21, 0x00	; 0
    82da:	a9 f7       	brne	.-22     	; 0x82c6 <__mulsf3_pse+0x64>
    82dc:	9e 3f       	cpi	r25, 0xFE	; 254
    82de:	51 05       	cpc	r21, r1
    82e0:	70 f0       	brcs	.+28     	; 0x82fe <__mulsf3_pse+0x9c>
    82e2:	30 cf       	rjmp	.-416    	; 0x8144 <__fp_inf>
    82e4:	9f cf       	rjmp	.-194    	; 0x8224 <__fp_szero>
    82e6:	5f 3f       	cpi	r21, 0xFF	; 255
    82e8:	ec f3       	brlt	.-6      	; 0x82e4 <__mulsf3_pse+0x82>
    82ea:	98 3e       	cpi	r25, 0xE8	; 232
    82ec:	dc f3       	brlt	.-10     	; 0x82e4 <__mulsf3_pse+0x82>
    82ee:	86 95       	lsr	r24
    82f0:	77 95       	ror	r23
    82f2:	67 95       	ror	r22
    82f4:	b7 95       	ror	r27
    82f6:	f7 95       	ror	r31
    82f8:	e7 95       	ror	r30
    82fa:	9f 5f       	subi	r25, 0xFF	; 255
    82fc:	c1 f7       	brne	.-16     	; 0x82ee <__mulsf3_pse+0x8c>
    82fe:	fe 2b       	or	r31, r30
    8300:	88 0f       	add	r24, r24
    8302:	91 1d       	adc	r25, r1
    8304:	96 95       	lsr	r25
    8306:	87 95       	ror	r24
    8308:	97 f9       	bld	r25, 7
    830a:	08 95       	ret

0000830c <square>:
    830c:	9b 01       	movw	r18, r22
    830e:	ac 01       	movw	r20, r24
    8310:	9a cf       	rjmp	.-204    	; 0x8246 <__mulsf3>

00008312 <__mulsi3>:
    8312:	62 9f       	mul	r22, r18
    8314:	d0 01       	movw	r26, r0
    8316:	73 9f       	mul	r23, r19
    8318:	f0 01       	movw	r30, r0
    831a:	82 9f       	mul	r24, r18
    831c:	e0 0d       	add	r30, r0
    831e:	f1 1d       	adc	r31, r1
    8320:	64 9f       	mul	r22, r20
    8322:	e0 0d       	add	r30, r0
    8324:	f1 1d       	adc	r31, r1
    8326:	92 9f       	mul	r25, r18
    8328:	f0 0d       	add	r31, r0
    832a:	83 9f       	mul	r24, r19
    832c:	f0 0d       	add	r31, r0
    832e:	74 9f       	mul	r23, r20
    8330:	f0 0d       	add	r31, r0
    8332:	65 9f       	mul	r22, r21
    8334:	f0 0d       	add	r31, r0
    8336:	99 27       	eor	r25, r25
    8338:	72 9f       	mul	r23, r18
    833a:	b0 0d       	add	r27, r0
    833c:	e1 1d       	adc	r30, r1
    833e:	f9 1f       	adc	r31, r25
    8340:	63 9f       	mul	r22, r19
    8342:	b0 0d       	add	r27, r0
    8344:	e1 1d       	adc	r30, r1
    8346:	f9 1f       	adc	r31, r25
    8348:	bd 01       	movw	r22, r26
    834a:	cf 01       	movw	r24, r30
    834c:	11 24       	eor	r1, r1
    834e:	08 95       	ret

00008350 <__udivmodqi4>:
    8350:	99 1b       	sub	r25, r25
    8352:	79 e0       	ldi	r23, 0x09	; 9
    8354:	04 c0       	rjmp	.+8      	; 0x835e <__udivmodqi4_ep>

00008356 <__udivmodqi4_loop>:
    8356:	99 1f       	adc	r25, r25
    8358:	96 17       	cp	r25, r22
    835a:	08 f0       	brcs	.+2      	; 0x835e <__udivmodqi4_ep>
    835c:	96 1b       	sub	r25, r22

0000835e <__udivmodqi4_ep>:
    835e:	88 1f       	adc	r24, r24
    8360:	7a 95       	dec	r23
    8362:	c9 f7       	brne	.-14     	; 0x8356 <__udivmodqi4_loop>
    8364:	80 95       	com	r24
    8366:	08 95       	ret

00008368 <__udivmodsi4>:
    8368:	a1 e2       	ldi	r26, 0x21	; 33
    836a:	1a 2e       	mov	r1, r26
    836c:	aa 1b       	sub	r26, r26
    836e:	bb 1b       	sub	r27, r27
    8370:	fd 01       	movw	r30, r26
    8372:	0d c0       	rjmp	.+26     	; 0x838e <__udivmodsi4_ep>

00008374 <__udivmodsi4_loop>:
    8374:	aa 1f       	adc	r26, r26
    8376:	bb 1f       	adc	r27, r27
    8378:	ee 1f       	adc	r30, r30
    837a:	ff 1f       	adc	r31, r31
    837c:	a2 17       	cp	r26, r18
    837e:	b3 07       	cpc	r27, r19
    8380:	e4 07       	cpc	r30, r20
    8382:	f5 07       	cpc	r31, r21
    8384:	20 f0       	brcs	.+8      	; 0x838e <__udivmodsi4_ep>
    8386:	a2 1b       	sub	r26, r18
    8388:	b3 0b       	sbc	r27, r19
    838a:	e4 0b       	sbc	r30, r20
    838c:	f5 0b       	sbc	r31, r21

0000838e <__udivmodsi4_ep>:
    838e:	66 1f       	adc	r22, r22
    8390:	77 1f       	adc	r23, r23
    8392:	88 1f       	adc	r24, r24
    8394:	99 1f       	adc	r25, r25
    8396:	1a 94       	dec	r1
    8398:	69 f7       	brne	.-38     	; 0x8374 <__udivmodsi4_loop>
    839a:	60 95       	com	r22
    839c:	70 95       	com	r23
    839e:	80 95       	com	r24
    83a0:	90 95       	com	r25
    83a2:	9b 01       	movw	r18, r22
    83a4:	ac 01       	movw	r20, r24
    83a6:	bd 01       	movw	r22, r26
    83a8:	cf 01       	movw	r24, r30
    83aa:	08 95       	ret

000083ac <__divmodsi4>:
    83ac:	97 fb       	bst	r25, 7
    83ae:	09 2e       	mov	r0, r25
    83b0:	05 26       	eor	r0, r21
    83b2:	0e d0       	rcall	.+28     	; 0x83d0 <__divmodsi4_neg1>
    83b4:	57 fd       	sbrc	r21, 7
    83b6:	04 d0       	rcall	.+8      	; 0x83c0 <__divmodsi4_neg2>
    83b8:	d7 df       	rcall	.-82     	; 0x8368 <__udivmodsi4>
    83ba:	0a d0       	rcall	.+20     	; 0x83d0 <__divmodsi4_neg1>
    83bc:	00 1c       	adc	r0, r0
    83be:	38 f4       	brcc	.+14     	; 0x83ce <__divmodsi4_exit>

000083c0 <__divmodsi4_neg2>:
    83c0:	50 95       	com	r21
    83c2:	40 95       	com	r20
    83c4:	30 95       	com	r19
    83c6:	21 95       	neg	r18
    83c8:	3f 4f       	sbci	r19, 0xFF	; 255
    83ca:	4f 4f       	sbci	r20, 0xFF	; 255
    83cc:	5f 4f       	sbci	r21, 0xFF	; 255

000083ce <__divmodsi4_exit>:
    83ce:	08 95       	ret

000083d0 <__divmodsi4_neg1>:
    83d0:	f6 f7       	brtc	.-4      	; 0x83ce <__divmodsi4_exit>
    83d2:	90 95       	com	r25
    83d4:	80 95       	com	r24
    83d6:	70 95       	com	r23
    83d8:	61 95       	neg	r22
    83da:	7f 4f       	sbci	r23, 0xFF	; 255
    83dc:	8f 4f       	sbci	r24, 0xFF	; 255
    83de:	9f 4f       	sbci	r25, 0xFF	; 255
    83e0:	08 95       	ret

000083e2 <__tablejump2__>:
    83e2:	ee 0f       	add	r30, r30
    83e4:	ff 1f       	adc	r31, r31

000083e6 <__tablejump__>:
    83e6:	05 90       	lpm	r0, Z+
    83e8:	f4 91       	lpm	r31, Z
    83ea:	e0 2d       	mov	r30, r0
    83ec:	09 94       	ijmp

000083ee <malloc>:
    83ee:	cf 93       	push	r28
    83f0:	df 93       	push	r29
    83f2:	ac 01       	movw	r20, r24
    83f4:	82 30       	cpi	r24, 0x02	; 2
    83f6:	91 05       	cpc	r25, r1
    83f8:	10 f4       	brcc	.+4      	; 0x83fe <malloc+0x10>
    83fa:	42 e0       	ldi	r20, 0x02	; 2
    83fc:	50 e0       	ldi	r21, 0x00	; 0
    83fe:	e0 91 79 06 	lds	r30, 0x0679
    8402:	f0 91 7a 06 	lds	r31, 0x067A
    8406:	20 e0       	ldi	r18, 0x00	; 0
    8408:	30 e0       	ldi	r19, 0x00	; 0
    840a:	a0 e0       	ldi	r26, 0x00	; 0
    840c:	b0 e0       	ldi	r27, 0x00	; 0
    840e:	24 c0       	rjmp	.+72     	; 0x8458 <malloc+0x6a>
    8410:	80 81       	ld	r24, Z
    8412:	91 81       	ldd	r25, Z+1	; 0x01
    8414:	84 17       	cp	r24, r20
    8416:	95 07       	cpc	r25, r21
    8418:	d0 f0       	brcs	.+52     	; 0x844e <malloc+0x60>
    841a:	84 17       	cp	r24, r20
    841c:	95 07       	cpc	r25, r21
    841e:	71 f4       	brne	.+28     	; 0x843c <malloc+0x4e>
    8420:	82 81       	ldd	r24, Z+2	; 0x02
    8422:	93 81       	ldd	r25, Z+3	; 0x03
    8424:	10 97       	sbiw	r26, 0x00	; 0
    8426:	29 f0       	breq	.+10     	; 0x8432 <malloc+0x44>
    8428:	13 96       	adiw	r26, 0x03	; 3
    842a:	9c 93       	st	X, r25
    842c:	8e 93       	st	-X, r24
    842e:	12 97       	sbiw	r26, 0x02	; 2
    8430:	2c c0       	rjmp	.+88     	; 0x848a <malloc+0x9c>
    8432:	90 93 7a 06 	sts	0x067A, r25
    8436:	80 93 79 06 	sts	0x0679, r24
    843a:	27 c0       	rjmp	.+78     	; 0x848a <malloc+0x9c>
    843c:	21 15       	cp	r18, r1
    843e:	31 05       	cpc	r19, r1
    8440:	19 f0       	breq	.+6      	; 0x8448 <malloc+0x5a>
    8442:	82 17       	cp	r24, r18
    8444:	93 07       	cpc	r25, r19
    8446:	18 f4       	brcc	.+6      	; 0x844e <malloc+0x60>
    8448:	9c 01       	movw	r18, r24
    844a:	bd 01       	movw	r22, r26
    844c:	ef 01       	movw	r28, r30
    844e:	92 81       	ldd	r25, Z+2	; 0x02
    8450:	83 81       	ldd	r24, Z+3	; 0x03
    8452:	df 01       	movw	r26, r30
    8454:	e9 2f       	mov	r30, r25
    8456:	f8 2f       	mov	r31, r24
    8458:	30 97       	sbiw	r30, 0x00	; 0
    845a:	d1 f6       	brne	.-76     	; 0x8410 <malloc+0x22>
    845c:	21 15       	cp	r18, r1
    845e:	31 05       	cpc	r19, r1
    8460:	f9 f0       	breq	.+62     	; 0x84a0 <malloc+0xb2>
    8462:	c9 01       	movw	r24, r18
    8464:	84 1b       	sub	r24, r20
    8466:	95 0b       	sbc	r25, r21
    8468:	84 30       	cpi	r24, 0x04	; 4
    846a:	91 05       	cpc	r25, r1
    846c:	80 f4       	brcc	.+32     	; 0x848e <malloc+0xa0>
    846e:	8a 81       	ldd	r24, Y+2	; 0x02
    8470:	9b 81       	ldd	r25, Y+3	; 0x03
    8472:	61 15       	cp	r22, r1
    8474:	71 05       	cpc	r23, r1
    8476:	21 f0       	breq	.+8      	; 0x8480 <malloc+0x92>
    8478:	fb 01       	movw	r30, r22
    847a:	93 83       	std	Z+3, r25	; 0x03
    847c:	82 83       	std	Z+2, r24	; 0x02
    847e:	04 c0       	rjmp	.+8      	; 0x8488 <malloc+0x9a>
    8480:	90 93 7a 06 	sts	0x067A, r25
    8484:	80 93 79 06 	sts	0x0679, r24
    8488:	fe 01       	movw	r30, r28
    848a:	32 96       	adiw	r30, 0x02	; 2
    848c:	42 c0       	rjmp	.+132    	; 0x8512 <malloc+0x124>
    848e:	fe 01       	movw	r30, r28
    8490:	e8 0f       	add	r30, r24
    8492:	f9 1f       	adc	r31, r25
    8494:	41 93       	st	Z+, r20
    8496:	51 93       	st	Z+, r21
    8498:	02 97       	sbiw	r24, 0x02	; 2
    849a:	99 83       	std	Y+1, r25	; 0x01
    849c:	88 83       	st	Y, r24
    849e:	39 c0       	rjmp	.+114    	; 0x8512 <malloc+0x124>
    84a0:	80 91 77 06 	lds	r24, 0x0677
    84a4:	90 91 78 06 	lds	r25, 0x0678
    84a8:	00 97       	sbiw	r24, 0x00	; 0
    84aa:	41 f4       	brne	.+16     	; 0x84bc <malloc+0xce>
    84ac:	80 91 b9 02 	lds	r24, 0x02B9
    84b0:	90 91 ba 02 	lds	r25, 0x02BA
    84b4:	90 93 78 06 	sts	0x0678, r25
    84b8:	80 93 77 06 	sts	0x0677, r24
    84bc:	20 91 b7 02 	lds	r18, 0x02B7
    84c0:	30 91 b8 02 	lds	r19, 0x02B8
    84c4:	21 15       	cp	r18, r1
    84c6:	31 05       	cpc	r19, r1
    84c8:	41 f4       	brne	.+16     	; 0x84da <malloc+0xec>
    84ca:	2d b7       	in	r18, 0x3d	; 61
    84cc:	3e b7       	in	r19, 0x3e	; 62
    84ce:	80 91 bb 02 	lds	r24, 0x02BB
    84d2:	90 91 bc 02 	lds	r25, 0x02BC
    84d6:	28 1b       	sub	r18, r24
    84d8:	39 0b       	sbc	r19, r25
    84da:	e0 91 77 06 	lds	r30, 0x0677
    84de:	f0 91 78 06 	lds	r31, 0x0678
    84e2:	e2 17       	cp	r30, r18
    84e4:	f3 07       	cpc	r31, r19
    84e6:	98 f4       	brcc	.+38     	; 0x850e <malloc+0x120>
    84e8:	2e 1b       	sub	r18, r30
    84ea:	3f 0b       	sbc	r19, r31
    84ec:	24 17       	cp	r18, r20
    84ee:	35 07       	cpc	r19, r21
    84f0:	70 f0       	brcs	.+28     	; 0x850e <malloc+0x120>
    84f2:	ca 01       	movw	r24, r20
    84f4:	02 96       	adiw	r24, 0x02	; 2
    84f6:	28 17       	cp	r18, r24
    84f8:	39 07       	cpc	r19, r25
    84fa:	48 f0       	brcs	.+18     	; 0x850e <malloc+0x120>
    84fc:	8e 0f       	add	r24, r30
    84fe:	9f 1f       	adc	r25, r31
    8500:	90 93 78 06 	sts	0x0678, r25
    8504:	80 93 77 06 	sts	0x0677, r24
    8508:	41 93       	st	Z+, r20
    850a:	51 93       	st	Z+, r21
    850c:	02 c0       	rjmp	.+4      	; 0x8512 <malloc+0x124>
    850e:	e0 e0       	ldi	r30, 0x00	; 0
    8510:	f0 e0       	ldi	r31, 0x00	; 0
    8512:	cf 01       	movw	r24, r30
    8514:	df 91       	pop	r29
    8516:	cf 91       	pop	r28
    8518:	08 95       	ret

0000851a <free>:
    851a:	0f 93       	push	r16
    851c:	1f 93       	push	r17
    851e:	cf 93       	push	r28
    8520:	df 93       	push	r29
    8522:	9c 01       	movw	r18, r24
    8524:	00 97       	sbiw	r24, 0x00	; 0
    8526:	09 f4       	brne	.+2      	; 0x852a <free+0x10>
    8528:	8c c0       	rjmp	.+280    	; 0x8642 <free+0x128>
    852a:	dc 01       	movw	r26, r24
    852c:	12 97       	sbiw	r26, 0x02	; 2
    852e:	13 96       	adiw	r26, 0x03	; 3
    8530:	1c 92       	st	X, r1
    8532:	1e 92       	st	-X, r1
    8534:	12 97       	sbiw	r26, 0x02	; 2
    8536:	60 91 79 06 	lds	r22, 0x0679
    853a:	70 91 7a 06 	lds	r23, 0x067A
    853e:	61 15       	cp	r22, r1
    8540:	71 05       	cpc	r23, r1
    8542:	89 f4       	brne	.+34     	; 0x8566 <free+0x4c>
    8544:	8d 91       	ld	r24, X+
    8546:	9c 91       	ld	r25, X
    8548:	11 97       	sbiw	r26, 0x01	; 1
    854a:	82 0f       	add	r24, r18
    854c:	93 1f       	adc	r25, r19
    854e:	20 91 77 06 	lds	r18, 0x0677
    8552:	30 91 78 06 	lds	r19, 0x0678
    8556:	28 17       	cp	r18, r24
    8558:	39 07       	cpc	r19, r25
    855a:	69 f5       	brne	.+90     	; 0x85b6 <free+0x9c>
    855c:	b0 93 78 06 	sts	0x0678, r27
    8560:	a0 93 77 06 	sts	0x0677, r26
    8564:	6e c0       	rjmp	.+220    	; 0x8642 <free+0x128>
    8566:	fb 01       	movw	r30, r22
    8568:	40 e0       	ldi	r20, 0x00	; 0
    856a:	50 e0       	ldi	r21, 0x00	; 0
    856c:	01 c0       	rjmp	.+2      	; 0x8570 <free+0x56>
    856e:	fc 01       	movw	r30, r24
    8570:	ea 17       	cp	r30, r26
    8572:	fb 07       	cpc	r31, r27
    8574:	30 f4       	brcc	.+12     	; 0x8582 <free+0x68>
    8576:	82 81       	ldd	r24, Z+2	; 0x02
    8578:	93 81       	ldd	r25, Z+3	; 0x03
    857a:	af 01       	movw	r20, r30
    857c:	00 97       	sbiw	r24, 0x00	; 0
    857e:	b9 f7       	brne	.-18     	; 0x856e <free+0x54>
    8580:	1f c0       	rjmp	.+62     	; 0x85c0 <free+0xa6>
    8582:	e9 01       	movw	r28, r18
    8584:	22 97       	sbiw	r28, 0x02	; 2
    8586:	fb 83       	std	Y+3, r31	; 0x03
    8588:	ea 83       	std	Y+2, r30	; 0x02
    858a:	08 81       	ld	r16, Y
    858c:	19 81       	ldd	r17, Y+1	; 0x01
    858e:	c9 01       	movw	r24, r18
    8590:	80 0f       	add	r24, r16
    8592:	91 1f       	adc	r25, r17
    8594:	8e 17       	cp	r24, r30
    8596:	9f 07       	cpc	r25, r31
    8598:	59 f4       	brne	.+22     	; 0x85b0 <free+0x96>
    859a:	80 81       	ld	r24, Z
    859c:	91 81       	ldd	r25, Z+1	; 0x01
    859e:	80 0f       	add	r24, r16
    85a0:	91 1f       	adc	r25, r17
    85a2:	02 96       	adiw	r24, 0x02	; 2
    85a4:	99 83       	std	Y+1, r25	; 0x01
    85a6:	88 83       	st	Y, r24
    85a8:	82 81       	ldd	r24, Z+2	; 0x02
    85aa:	93 81       	ldd	r25, Z+3	; 0x03
    85ac:	9b 83       	std	Y+3, r25	; 0x03
    85ae:	8a 83       	std	Y+2, r24	; 0x02
    85b0:	41 15       	cp	r20, r1
    85b2:	51 05       	cpc	r21, r1
    85b4:	29 f4       	brne	.+10     	; 0x85c0 <free+0xa6>
    85b6:	b0 93 7a 06 	sts	0x067A, r27
    85ba:	a0 93 79 06 	sts	0x0679, r26
    85be:	41 c0       	rjmp	.+130    	; 0x8642 <free+0x128>
    85c0:	fa 01       	movw	r30, r20
    85c2:	b3 83       	std	Z+3, r27	; 0x03
    85c4:	a2 83       	std	Z+2, r26	; 0x02
    85c6:	c1 91       	ld	r28, Z+
    85c8:	d1 91       	ld	r29, Z+
    85ca:	ec 0f       	add	r30, r28
    85cc:	fd 1f       	adc	r31, r29
    85ce:	ae 17       	cp	r26, r30
    85d0:	bf 07       	cpc	r27, r31
    85d2:	81 f4       	brne	.+32     	; 0x85f4 <free+0xda>
    85d4:	f9 01       	movw	r30, r18
    85d6:	92 91       	ld	r25, -Z
    85d8:	82 91       	ld	r24, -Z
    85da:	8c 0f       	add	r24, r28
    85dc:	9d 1f       	adc	r25, r29
    85de:	02 96       	adiw	r24, 0x02	; 2
    85e0:	da 01       	movw	r26, r20
    85e2:	11 96       	adiw	r26, 0x01	; 1
    85e4:	9c 93       	st	X, r25
    85e6:	8e 93       	st	-X, r24
    85e8:	82 81       	ldd	r24, Z+2	; 0x02
    85ea:	93 81       	ldd	r25, Z+3	; 0x03
    85ec:	13 96       	adiw	r26, 0x03	; 3
    85ee:	9c 93       	st	X, r25
    85f0:	8e 93       	st	-X, r24
    85f2:	12 97       	sbiw	r26, 0x02	; 2
    85f4:	e0 e0       	ldi	r30, 0x00	; 0
    85f6:	f0 e0       	ldi	r31, 0x00	; 0
    85f8:	02 c0       	rjmp	.+4      	; 0x85fe <free+0xe4>
    85fa:	fb 01       	movw	r30, r22
    85fc:	bc 01       	movw	r22, r24
    85fe:	db 01       	movw	r26, r22
    8600:	12 96       	adiw	r26, 0x02	; 2
    8602:	8d 91       	ld	r24, X+
    8604:	9c 91       	ld	r25, X
    8606:	13 97       	sbiw	r26, 0x03	; 3
    8608:	00 97       	sbiw	r24, 0x00	; 0
    860a:	b9 f7       	brne	.-18     	; 0x85fa <free+0xe0>
    860c:	cb 01       	movw	r24, r22
    860e:	02 96       	adiw	r24, 0x02	; 2
    8610:	2d 91       	ld	r18, X+
    8612:	3c 91       	ld	r19, X
    8614:	11 97       	sbiw	r26, 0x01	; 1
    8616:	82 0f       	add	r24, r18
    8618:	93 1f       	adc	r25, r19
    861a:	20 91 77 06 	lds	r18, 0x0677
    861e:	30 91 78 06 	lds	r19, 0x0678
    8622:	28 17       	cp	r18, r24
    8624:	39 07       	cpc	r19, r25
    8626:	69 f4       	brne	.+26     	; 0x8642 <free+0x128>
    8628:	30 97       	sbiw	r30, 0x00	; 0
    862a:	29 f4       	brne	.+10     	; 0x8636 <free+0x11c>
    862c:	10 92 7a 06 	sts	0x067A, r1
    8630:	10 92 79 06 	sts	0x0679, r1
    8634:	02 c0       	rjmp	.+4      	; 0x863a <free+0x120>
    8636:	13 82       	std	Z+3, r1	; 0x03
    8638:	12 82       	std	Z+2, r1	; 0x02
    863a:	70 93 78 06 	sts	0x0678, r23
    863e:	60 93 77 06 	sts	0x0677, r22
    8642:	df 91       	pop	r29
    8644:	cf 91       	pop	r28
    8646:	1f 91       	pop	r17
    8648:	0f 91       	pop	r16
    864a:	08 95       	ret

0000864c <do_random>:
    864c:	a0 e0       	ldi	r26, 0x00	; 0
    864e:	b0 e0       	ldi	r27, 0x00	; 0
    8650:	ec e2       	ldi	r30, 0x2C	; 44
    8652:	f3 e4       	ldi	r31, 0x43	; 67
    8654:	0c 94 e5 45 	jmp	0x8bca	; 0x8bca <__prologue_saves__+0xc>
    8658:	ec 01       	movw	r28, r24
    865a:	88 81       	ld	r24, Y
    865c:	99 81       	ldd	r25, Y+1	; 0x01
    865e:	aa 81       	ldd	r26, Y+2	; 0x02
    8660:	bb 81       	ldd	r27, Y+3	; 0x03
    8662:	00 97       	sbiw	r24, 0x00	; 0
    8664:	a1 05       	cpc	r26, r1
    8666:	b1 05       	cpc	r27, r1
    8668:	21 f4       	brne	.+8      	; 0x8672 <do_random+0x26>
    866a:	84 e2       	ldi	r24, 0x24	; 36
    866c:	99 ed       	ldi	r25, 0xD9	; 217
    866e:	ab e5       	ldi	r26, 0x5B	; 91
    8670:	b7 e0       	ldi	r27, 0x07	; 7
    8672:	bc 01       	movw	r22, r24
    8674:	cd 01       	movw	r24, r26
    8676:	2d e1       	ldi	r18, 0x1D	; 29
    8678:	33 ef       	ldi	r19, 0xF3	; 243
    867a:	41 e0       	ldi	r20, 0x01	; 1
    867c:	50 e0       	ldi	r21, 0x00	; 0
    867e:	0e 94 d6 41 	call	0x83ac	; 0x83ac <__divmodsi4>
    8682:	49 01       	movw	r8, r18
    8684:	5a 01       	movw	r10, r20
    8686:	27 ea       	ldi	r18, 0xA7	; 167
    8688:	31 e4       	ldi	r19, 0x41	; 65
    868a:	40 e0       	ldi	r20, 0x00	; 0
    868c:	50 e0       	ldi	r21, 0x00	; 0
    868e:	0e 94 89 41 	call	0x8312	; 0x8312 <__mulsi3>
    8692:	6b 01       	movw	r12, r22
    8694:	7c 01       	movw	r14, r24
    8696:	c5 01       	movw	r24, r10
    8698:	b4 01       	movw	r22, r8
    869a:	2c ee       	ldi	r18, 0xEC	; 236
    869c:	34 ef       	ldi	r19, 0xF4	; 244
    869e:	4f ef       	ldi	r20, 0xFF	; 255
    86a0:	5f ef       	ldi	r21, 0xFF	; 255
    86a2:	0e 94 89 41 	call	0x8312	; 0x8312 <__mulsi3>
    86a6:	dc 01       	movw	r26, r24
    86a8:	cb 01       	movw	r24, r22
    86aa:	c8 0e       	add	r12, r24
    86ac:	d9 1e       	adc	r13, r25
    86ae:	ea 1e       	adc	r14, r26
    86b0:	fb 1e       	adc	r15, r27
    86b2:	f7 fe       	sbrs	r15, 7
    86b4:	08 c0       	rjmp	.+16     	; 0x86c6 <do_random+0x7a>
    86b6:	8f ef       	ldi	r24, 0xFF	; 255
    86b8:	9f ef       	ldi	r25, 0xFF	; 255
    86ba:	af ef       	ldi	r26, 0xFF	; 255
    86bc:	bf e7       	ldi	r27, 0x7F	; 127
    86be:	c8 0e       	add	r12, r24
    86c0:	d9 1e       	adc	r13, r25
    86c2:	ea 1e       	adc	r14, r26
    86c4:	fb 1e       	adc	r15, r27
    86c6:	c8 82       	st	Y, r12
    86c8:	d9 82       	std	Y+1, r13	; 0x01
    86ca:	ea 82       	std	Y+2, r14	; 0x02
    86cc:	fb 82       	std	Y+3, r15	; 0x03
    86ce:	97 01       	movw	r18, r14
    86d0:	86 01       	movw	r16, r12
    86d2:	3f 77       	andi	r19, 0x7F	; 127
    86d4:	b8 01       	movw	r22, r16
    86d6:	c9 01       	movw	r24, r18
    86d8:	cd b7       	in	r28, 0x3d	; 61
    86da:	de b7       	in	r29, 0x3e	; 62
    86dc:	ec e0       	ldi	r30, 0x0C	; 12
    86de:	0c 94 01 46 	jmp	0x8c02	; 0x8c02 <__epilogue_restores__+0xc>

000086e2 <random_r>:
    86e2:	0e 94 26 43 	call	0x864c	; 0x864c <do_random>
    86e6:	08 95       	ret

000086e8 <random>:
    86e8:	8d eb       	ldi	r24, 0xBD	; 189
    86ea:	92 e0       	ldi	r25, 0x02	; 2
    86ec:	0e 94 26 43 	call	0x864c	; 0x864c <do_random>
    86f0:	08 95       	ret

000086f2 <srandom>:
    86f2:	dc 01       	movw	r26, r24
    86f4:	cb 01       	movw	r24, r22
    86f6:	80 93 bd 02 	sts	0x02BD, r24
    86fa:	90 93 be 02 	sts	0x02BE, r25
    86fe:	a0 93 bf 02 	sts	0x02BF, r26
    8702:	b0 93 c0 02 	sts	0x02C0, r27
    8706:	08 95       	ret

00008708 <realloc>:
    8708:	a2 e0       	ldi	r26, 0x02	; 2
    870a:	b0 e0       	ldi	r27, 0x00	; 0
    870c:	ea e8       	ldi	r30, 0x8A	; 138
    870e:	f3 e4       	ldi	r31, 0x43	; 67
    8710:	0c 94 e5 45 	jmp	0x8bca	; 0x8bca <__prologue_saves__+0xc>
    8714:	8c 01       	movw	r16, r24
    8716:	00 97       	sbiw	r24, 0x00	; 0
    8718:	29 f4       	brne	.+10     	; 0x8724 <realloc+0x1c>
    871a:	cb 01       	movw	r24, r22
    871c:	0e 94 f7 41 	call	0x83ee	; 0x83ee <malloc>
    8720:	8c 01       	movw	r16, r24
    8722:	b8 c0       	rjmp	.+368    	; 0x8894 <realloc+0x18c>
    8724:	dc 01       	movw	r26, r24
    8726:	a6 0f       	add	r26, r22
    8728:	b7 1f       	adc	r27, r23
    872a:	fc 01       	movw	r30, r24
    872c:	32 97       	sbiw	r30, 0x02	; 2
    872e:	ae 17       	cp	r26, r30
    8730:	bf 07       	cpc	r27, r31
    8732:	08 f4       	brcc	.+2      	; 0x8736 <realloc+0x2e>
    8734:	ad c0       	rjmp	.+346    	; 0x8890 <realloc+0x188>
    8736:	20 81       	ld	r18, Z
    8738:	31 81       	ldd	r19, Z+1	; 0x01
    873a:	26 17       	cp	r18, r22
    873c:	37 07       	cpc	r19, r23
    873e:	b0 f0       	brcs	.+44     	; 0x876c <realloc+0x64>
    8740:	25 30       	cpi	r18, 0x05	; 5
    8742:	31 05       	cpc	r19, r1
    8744:	08 f4       	brcc	.+2      	; 0x8748 <realloc+0x40>
    8746:	a6 c0       	rjmp	.+332    	; 0x8894 <realloc+0x18c>
    8748:	c9 01       	movw	r24, r18
    874a:	04 97       	sbiw	r24, 0x04	; 4
    874c:	86 17       	cp	r24, r22
    874e:	97 07       	cpc	r25, r23
    8750:	08 f4       	brcc	.+2      	; 0x8754 <realloc+0x4c>
    8752:	a0 c0       	rjmp	.+320    	; 0x8894 <realloc+0x18c>
    8754:	22 50       	subi	r18, 0x02	; 2
    8756:	30 40       	sbci	r19, 0x00	; 0
    8758:	26 1b       	sub	r18, r22
    875a:	37 0b       	sbc	r19, r23
    875c:	2d 93       	st	X+, r18
    875e:	3d 93       	st	X+, r19
    8760:	cd 01       	movw	r24, r26
    8762:	71 83       	std	Z+1, r23	; 0x01
    8764:	60 83       	st	Z, r22
    8766:	0e 94 8d 42 	call	0x851a	; 0x851a <free>
    876a:	94 c0       	rjmp	.+296    	; 0x8894 <realloc+0x18c>
    876c:	6b 01       	movw	r12, r22
    876e:	c2 1a       	sub	r12, r18
    8770:	d3 0a       	sbc	r13, r19
    8772:	5c 01       	movw	r10, r24
    8774:	a2 0e       	add	r10, r18
    8776:	b3 1e       	adc	r11, r19
    8778:	e0 91 79 06 	lds	r30, 0x0679
    877c:	f0 91 7a 06 	lds	r31, 0x067A
    8780:	40 e0       	ldi	r20, 0x00	; 0
    8782:	50 e0       	ldi	r21, 0x00	; 0
    8784:	88 24       	eor	r8, r8
    8786:	99 24       	eor	r9, r9
    8788:	49 c0       	rjmp	.+146    	; 0x881c <realloc+0x114>
    878a:	ea 15       	cp	r30, r10
    878c:	fb 05       	cpc	r31, r11
    878e:	e1 f5       	brne	.+120    	; 0x8808 <realloc+0x100>
    8790:	e0 80       	ld	r14, Z
    8792:	f1 80       	ldd	r15, Z+1	; 0x01
    8794:	c7 01       	movw	r24, r14
    8796:	02 96       	adiw	r24, 0x02	; 2
    8798:	8c 15       	cp	r24, r12
    879a:	9d 05       	cpc	r25, r13
    879c:	a8 f1       	brcs	.+106    	; 0x8808 <realloc+0x100>
    879e:	a7 01       	movw	r20, r14
    87a0:	4c 19       	sub	r20, r12
    87a2:	5d 09       	sbc	r21, r13
    87a4:	ca 01       	movw	r24, r20
    87a6:	02 96       	adiw	r24, 0x02	; 2
    87a8:	0f 2e       	mov	r0, r31
    87aa:	fe ef       	ldi	r31, 0xFE	; 254
    87ac:	cf 2e       	mov	r12, r31
    87ae:	ff ef       	ldi	r31, 0xFF	; 255
    87b0:	df 2e       	mov	r13, r31
    87b2:	f0 2d       	mov	r31, r0
    87b4:	c0 0e       	add	r12, r16
    87b6:	d1 1e       	adc	r13, r17
    87b8:	85 30       	cpi	r24, 0x05	; 5
    87ba:	91 05       	cpc	r25, r1
    87bc:	78 f0       	brcs	.+30     	; 0x87dc <realloc+0xd4>
    87be:	82 81       	ldd	r24, Z+2	; 0x02
    87c0:	93 81       	ldd	r25, Z+3	; 0x03
    87c2:	13 96       	adiw	r26, 0x03	; 3
    87c4:	9c 93       	st	X, r25
    87c6:	8e 93       	st	-X, r24
    87c8:	12 97       	sbiw	r26, 0x02	; 2
    87ca:	11 96       	adiw	r26, 0x01	; 1
    87cc:	5c 93       	st	X, r21
    87ce:	4e 93       	st	-X, r20
    87d0:	f6 01       	movw	r30, r12
    87d2:	71 83       	std	Z+1, r23	; 0x01
    87d4:	60 83       	st	Z, r22
    87d6:	9a 2f       	mov	r25, r26
    87d8:	8b 2f       	mov	r24, r27
    87da:	0a c0       	rjmp	.+20     	; 0x87f0 <realloc+0xe8>
    87dc:	c9 01       	movw	r24, r18
    87de:	02 96       	adiw	r24, 0x02	; 2
    87e0:	8e 0d       	add	r24, r14
    87e2:	9f 1d       	adc	r25, r15
    87e4:	d6 01       	movw	r26, r12
    87e6:	11 96       	adiw	r26, 0x01	; 1
    87e8:	9c 93       	st	X, r25
    87ea:	8e 93       	st	-X, r24
    87ec:	92 81       	ldd	r25, Z+2	; 0x02
    87ee:	83 81       	ldd	r24, Z+3	; 0x03
    87f0:	81 14       	cp	r8, r1
    87f2:	91 04       	cpc	r9, r1
    87f4:	21 f0       	breq	.+8      	; 0x87fe <realloc+0xf6>
    87f6:	f4 01       	movw	r30, r8
    87f8:	92 83       	std	Z+2, r25	; 0x02
    87fa:	83 83       	std	Z+3, r24	; 0x03
    87fc:	4b c0       	rjmp	.+150    	; 0x8894 <realloc+0x18c>
    87fe:	90 93 79 06 	sts	0x0679, r25
    8802:	80 93 7a 06 	sts	0x067A, r24
    8806:	46 c0       	rjmp	.+140    	; 0x8894 <realloc+0x18c>
    8808:	80 81       	ld	r24, Z
    880a:	91 81       	ldd	r25, Z+1	; 0x01
    880c:	48 17       	cp	r20, r24
    880e:	59 07       	cpc	r21, r25
    8810:	08 f4       	brcc	.+2      	; 0x8814 <realloc+0x10c>
    8812:	ac 01       	movw	r20, r24
    8814:	82 81       	ldd	r24, Z+2	; 0x02
    8816:	93 81       	ldd	r25, Z+3	; 0x03
    8818:	4f 01       	movw	r8, r30
    881a:	fc 01       	movw	r30, r24
    881c:	30 97       	sbiw	r30, 0x00	; 0
    881e:	09 f0       	breq	.+2      	; 0x8822 <realloc+0x11a>
    8820:	b4 cf       	rjmp	.-152    	; 0x878a <realloc+0x82>
    8822:	80 91 77 06 	lds	r24, 0x0677
    8826:	90 91 78 06 	lds	r25, 0x0678
    882a:	8a 15       	cp	r24, r10
    882c:	9b 05       	cpc	r25, r11
    882e:	e9 f4       	brne	.+58     	; 0x886a <realloc+0x162>
    8830:	46 17       	cp	r20, r22
    8832:	57 07       	cpc	r21, r23
    8834:	d0 f4       	brcc	.+52     	; 0x886a <realloc+0x162>
    8836:	80 91 b7 02 	lds	r24, 0x02B7
    883a:	90 91 b8 02 	lds	r25, 0x02B8
    883e:	00 97       	sbiw	r24, 0x00	; 0
    8840:	41 f4       	brne	.+16     	; 0x8852 <realloc+0x14a>
    8842:	8d b7       	in	r24, 0x3d	; 61
    8844:	9e b7       	in	r25, 0x3e	; 62
    8846:	20 91 bb 02 	lds	r18, 0x02BB
    884a:	30 91 bc 02 	lds	r19, 0x02BC
    884e:	82 1b       	sub	r24, r18
    8850:	93 0b       	sbc	r25, r19
    8852:	a8 17       	cp	r26, r24
    8854:	b9 07       	cpc	r27, r25
    8856:	e0 f4       	brcc	.+56     	; 0x8890 <realloc+0x188>
    8858:	b0 93 78 06 	sts	0x0678, r27
    885c:	a0 93 77 06 	sts	0x0677, r26
    8860:	f8 01       	movw	r30, r16
    8862:	32 97       	sbiw	r30, 0x02	; 2
    8864:	71 83       	std	Z+1, r23	; 0x01
    8866:	60 83       	st	Z, r22
    8868:	15 c0       	rjmp	.+42     	; 0x8894 <realloc+0x18c>
    886a:	cb 01       	movw	r24, r22
    886c:	29 83       	std	Y+1, r18	; 0x01
    886e:	3a 83       	std	Y+2, r19	; 0x02
    8870:	0e 94 f7 41 	call	0x83ee	; 0x83ee <malloc>
    8874:	7c 01       	movw	r14, r24
    8876:	29 81       	ldd	r18, Y+1	; 0x01
    8878:	3a 81       	ldd	r19, Y+2	; 0x02
    887a:	00 97       	sbiw	r24, 0x00	; 0
    887c:	49 f0       	breq	.+18     	; 0x8890 <realloc+0x188>
    887e:	b8 01       	movw	r22, r16
    8880:	a9 01       	movw	r20, r18
    8882:	0e 94 9b 44 	call	0x8936	; 0x8936 <memcpy>
    8886:	c8 01       	movw	r24, r16
    8888:	0e 94 8d 42 	call	0x851a	; 0x851a <free>
    888c:	87 01       	movw	r16, r14
    888e:	02 c0       	rjmp	.+4      	; 0x8894 <realloc+0x18c>
    8890:	00 e0       	ldi	r16, 0x00	; 0
    8892:	10 e0       	ldi	r17, 0x00	; 0
    8894:	c8 01       	movw	r24, r16
    8896:	22 96       	adiw	r28, 0x02	; 2
    8898:	ec e0       	ldi	r30, 0x0C	; 12
    889a:	0c 94 01 46 	jmp	0x8c02	; 0x8c02 <__epilogue_restores__+0xc>

0000889e <atol>:
    889e:	1f 93       	push	r17
    88a0:	fc 01       	movw	r30, r24
    88a2:	99 27       	eor	r25, r25
    88a4:	88 27       	eor	r24, r24
    88a6:	bc 01       	movw	r22, r24
    88a8:	e8 94       	clt
    88aa:	11 91       	ld	r17, Z+
    88ac:	10 32       	cpi	r17, 0x20	; 32
    88ae:	e9 f3       	breq	.-6      	; 0x88aa <atol+0xc>
    88b0:	19 30       	cpi	r17, 0x09	; 9
    88b2:	10 f0       	brcs	.+4      	; 0x88b8 <atol+0x1a>
    88b4:	1e 30       	cpi	r17, 0x0E	; 14
    88b6:	c8 f3       	brcs	.-14     	; 0x88aa <atol+0xc>
    88b8:	1b 32       	cpi	r17, 0x2B	; 43
    88ba:	51 f0       	breq	.+20     	; 0x88d0 <atol+0x32>
    88bc:	1d 32       	cpi	r17, 0x2D	; 45
    88be:	49 f4       	brne	.+18     	; 0x88d2 <atol+0x34>
    88c0:	68 94       	set
    88c2:	06 c0       	rjmp	.+12     	; 0x88d0 <atol+0x32>
    88c4:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <__mulsi_const_10>
    88c8:	61 0f       	add	r22, r17
    88ca:	71 1d       	adc	r23, r1
    88cc:	81 1d       	adc	r24, r1
    88ce:	91 1d       	adc	r25, r1
    88d0:	11 91       	ld	r17, Z+
    88d2:	10 53       	subi	r17, 0x30	; 48
    88d4:	1a 30       	cpi	r17, 0x0A	; 10
    88d6:	b0 f3       	brcs	.-20     	; 0x88c4 <atol+0x26>
    88d8:	3e f4       	brtc	.+14     	; 0x88e8 <atol+0x4a>
    88da:	90 95       	com	r25
    88dc:	80 95       	com	r24
    88de:	70 95       	com	r23
    88e0:	61 95       	neg	r22
    88e2:	7f 4f       	sbci	r23, 0xFF	; 255
    88e4:	8f 4f       	sbci	r24, 0xFF	; 255
    88e6:	9f 4f       	sbci	r25, 0xFF	; 255
    88e8:	1f 91       	pop	r17
    88ea:	08 95       	ret

000088ec <isspace>:
    88ec:	91 11       	cpse	r25, r1
    88ee:	40 c1       	rjmp	.+640    	; 0x8b70 <__ctype_isfalse>
    88f0:	80 32       	cpi	r24, 0x20	; 32
    88f2:	19 f0       	breq	.+6      	; 0x88fa <isspace+0xe>
    88f4:	89 50       	subi	r24, 0x09	; 9
    88f6:	85 50       	subi	r24, 0x05	; 5
    88f8:	d0 f7       	brcc	.-12     	; 0x88ee <isspace+0x2>
    88fa:	08 95       	ret

000088fc <tolower>:
    88fc:	91 11       	cpse	r25, r1
    88fe:	08 95       	ret
    8900:	81 54       	subi	r24, 0x41	; 65
    8902:	8a 51       	subi	r24, 0x1A	; 26
    8904:	08 f4       	brcc	.+2      	; 0x8908 <tolower+0xc>
    8906:	80 5e       	subi	r24, 0xE0	; 224
    8908:	85 5a       	subi	r24, 0xA5	; 165
    890a:	08 95       	ret

0000890c <toupper>:
    890c:	91 11       	cpse	r25, r1
    890e:	08 95       	ret
    8910:	81 56       	subi	r24, 0x61	; 97
    8912:	8a 51       	subi	r24, 0x1A	; 26
    8914:	08 f4       	brcc	.+2      	; 0x8918 <toupper+0xc>
    8916:	80 52       	subi	r24, 0x20	; 32
    8918:	85 58       	subi	r24, 0x85	; 133
    891a:	08 95       	ret

0000891c <memcmp>:
    891c:	fb 01       	movw	r30, r22
    891e:	dc 01       	movw	r26, r24
    8920:	04 c0       	rjmp	.+8      	; 0x892a <memcmp+0xe>
    8922:	8d 91       	ld	r24, X+
    8924:	01 90       	ld	r0, Z+
    8926:	80 19       	sub	r24, r0
    8928:	21 f4       	brne	.+8      	; 0x8932 <memcmp+0x16>
    892a:	41 50       	subi	r20, 0x01	; 1
    892c:	50 40       	sbci	r21, 0x00	; 0
    892e:	c8 f7       	brcc	.-14     	; 0x8922 <memcmp+0x6>
    8930:	88 1b       	sub	r24, r24
    8932:	99 0b       	sbc	r25, r25
    8934:	08 95       	ret

00008936 <memcpy>:
    8936:	fb 01       	movw	r30, r22
    8938:	dc 01       	movw	r26, r24
    893a:	02 c0       	rjmp	.+4      	; 0x8940 <memcpy+0xa>
    893c:	01 90       	ld	r0, Z+
    893e:	0d 92       	st	X+, r0
    8940:	41 50       	subi	r20, 0x01	; 1
    8942:	50 40       	sbci	r21, 0x00	; 0
    8944:	d8 f7       	brcc	.-10     	; 0x893c <memcpy+0x6>
    8946:	08 95       	ret

00008948 <memmove>:
    8948:	68 17       	cp	r22, r24
    894a:	79 07       	cpc	r23, r25
    894c:	68 f4       	brcc	.+26     	; 0x8968 <memmove+0x20>
    894e:	fb 01       	movw	r30, r22
    8950:	dc 01       	movw	r26, r24
    8952:	e4 0f       	add	r30, r20
    8954:	f5 1f       	adc	r31, r21
    8956:	a4 0f       	add	r26, r20
    8958:	b5 1f       	adc	r27, r21
    895a:	02 c0       	rjmp	.+4      	; 0x8960 <memmove+0x18>
    895c:	02 90       	ld	r0, -Z
    895e:	0e 92       	st	-X, r0
    8960:	41 50       	subi	r20, 0x01	; 1
    8962:	50 40       	sbci	r21, 0x00	; 0
    8964:	d8 f7       	brcc	.-10     	; 0x895c <memmove+0x14>
    8966:	08 95       	ret
    8968:	0c 94 9b 44 	jmp	0x8936	; 0x8936 <memcpy>

0000896c <strchr>:
    896c:	fc 01       	movw	r30, r24
    896e:	81 91       	ld	r24, Z+
    8970:	86 17       	cp	r24, r22
    8972:	21 f0       	breq	.+8      	; 0x897c <strchr+0x10>
    8974:	88 23       	and	r24, r24
    8976:	d9 f7       	brne	.-10     	; 0x896e <strchr+0x2>
    8978:	99 27       	eor	r25, r25
    897a:	08 95       	ret
    897c:	31 97       	sbiw	r30, 0x01	; 1
    897e:	cf 01       	movw	r24, r30
    8980:	08 95       	ret

00008982 <strcmp>:
    8982:	fb 01       	movw	r30, r22
    8984:	dc 01       	movw	r26, r24
    8986:	8d 91       	ld	r24, X+
    8988:	01 90       	ld	r0, Z+
    898a:	80 19       	sub	r24, r0
    898c:	01 10       	cpse	r0, r1
    898e:	d9 f3       	breq	.-10     	; 0x8986 <strcmp+0x4>
    8990:	99 0b       	sbc	r25, r25
    8992:	08 95       	ret

00008994 <strcpy>:
    8994:	fb 01       	movw	r30, r22
    8996:	dc 01       	movw	r26, r24
    8998:	01 90       	ld	r0, Z+
    899a:	0d 92       	st	X+, r0
    899c:	00 20       	and	r0, r0
    899e:	e1 f7       	brne	.-8      	; 0x8998 <strcpy+0x4>
    89a0:	08 95       	ret

000089a2 <strncmp>:
    89a2:	fb 01       	movw	r30, r22
    89a4:	dc 01       	movw	r26, r24
    89a6:	41 50       	subi	r20, 0x01	; 1
    89a8:	50 40       	sbci	r21, 0x00	; 0
    89aa:	30 f0       	brcs	.+12     	; 0x89b8 <strncmp+0x16>
    89ac:	8d 91       	ld	r24, X+
    89ae:	01 90       	ld	r0, Z+
    89b0:	80 19       	sub	r24, r0
    89b2:	19 f4       	brne	.+6      	; 0x89ba <strncmp+0x18>
    89b4:	00 20       	and	r0, r0
    89b6:	b9 f7       	brne	.-18     	; 0x89a6 <strncmp+0x4>
    89b8:	88 1b       	sub	r24, r24
    89ba:	99 0b       	sbc	r25, r25
    89bc:	08 95       	ret

000089be <strncpy>:
    89be:	fb 01       	movw	r30, r22
    89c0:	dc 01       	movw	r26, r24
    89c2:	41 50       	subi	r20, 0x01	; 1
    89c4:	50 40       	sbci	r21, 0x00	; 0
    89c6:	48 f0       	brcs	.+18     	; 0x89da <strncpy+0x1c>
    89c8:	01 90       	ld	r0, Z+
    89ca:	0d 92       	st	X+, r0
    89cc:	00 20       	and	r0, r0
    89ce:	c9 f7       	brne	.-14     	; 0x89c2 <strncpy+0x4>
    89d0:	01 c0       	rjmp	.+2      	; 0x89d4 <strncpy+0x16>
    89d2:	1d 92       	st	X+, r1
    89d4:	41 50       	subi	r20, 0x01	; 1
    89d6:	50 40       	sbci	r21, 0x00	; 0
    89d8:	e0 f7       	brcc	.-8      	; 0x89d2 <strncpy+0x14>
    89da:	08 95       	ret

000089dc <strrchr>:
    89dc:	fc 01       	movw	r30, r24
    89de:	81 e0       	ldi	r24, 0x01	; 1
    89e0:	90 e0       	ldi	r25, 0x00	; 0
    89e2:	01 90       	ld	r0, Z+
    89e4:	06 16       	cp	r0, r22
    89e6:	09 f4       	brne	.+2      	; 0x89ea <strrchr+0xe>
    89e8:	cf 01       	movw	r24, r30
    89ea:	00 20       	and	r0, r0
    89ec:	d1 f7       	brne	.-12     	; 0x89e2 <strrchr+0x6>
    89ee:	01 97       	sbiw	r24, 0x01	; 1
    89f0:	08 95       	ret

000089f2 <strstr>:
    89f2:	fb 01       	movw	r30, r22
    89f4:	51 91       	ld	r21, Z+
    89f6:	55 23       	and	r21, r21
    89f8:	a9 f0       	breq	.+42     	; 0x8a24 <strstr+0x32>
    89fa:	bf 01       	movw	r22, r30
    89fc:	dc 01       	movw	r26, r24
    89fe:	4d 91       	ld	r20, X+
    8a00:	45 17       	cp	r20, r21
    8a02:	41 11       	cpse	r20, r1
    8a04:	e1 f7       	brne	.-8      	; 0x89fe <strstr+0xc>
    8a06:	59 f4       	brne	.+22     	; 0x8a1e <strstr+0x2c>
    8a08:	cd 01       	movw	r24, r26
    8a0a:	01 90       	ld	r0, Z+
    8a0c:	00 20       	and	r0, r0
    8a0e:	49 f0       	breq	.+18     	; 0x8a22 <strstr+0x30>
    8a10:	4d 91       	ld	r20, X+
    8a12:	40 15       	cp	r20, r0
    8a14:	41 11       	cpse	r20, r1
    8a16:	c9 f3       	breq	.-14     	; 0x8a0a <strstr+0x18>
    8a18:	fb 01       	movw	r30, r22
    8a1a:	41 11       	cpse	r20, r1
    8a1c:	ef cf       	rjmp	.-34     	; 0x89fc <strstr+0xa>
    8a1e:	81 e0       	ldi	r24, 0x01	; 1
    8a20:	90 e0       	ldi	r25, 0x00	; 0
    8a22:	01 97       	sbiw	r24, 0x01	; 1
    8a24:	08 95       	ret

00008a26 <itoa>:
    8a26:	fb 01       	movw	r30, r22
    8a28:	9f 01       	movw	r18, r30
    8a2a:	e8 94       	clt
    8a2c:	42 30       	cpi	r20, 0x02	; 2
    8a2e:	c4 f0       	brlt	.+48     	; 0x8a60 <itoa+0x3a>
    8a30:	45 32       	cpi	r20, 0x25	; 37
    8a32:	b4 f4       	brge	.+44     	; 0x8a60 <itoa+0x3a>
    8a34:	4a 30       	cpi	r20, 0x0A	; 10
    8a36:	29 f4       	brne	.+10     	; 0x8a42 <itoa+0x1c>
    8a38:	97 fb       	bst	r25, 7
    8a3a:	1e f4       	brtc	.+6      	; 0x8a42 <itoa+0x1c>
    8a3c:	90 95       	com	r25
    8a3e:	81 95       	neg	r24
    8a40:	9f 4f       	sbci	r25, 0xFF	; 255
    8a42:	64 2f       	mov	r22, r20
    8a44:	77 27       	eor	r23, r23
    8a46:	0e 94 cb 45 	call	0x8b96	; 0x8b96 <__udivmodhi4>
    8a4a:	80 5d       	subi	r24, 0xD0	; 208
    8a4c:	8a 33       	cpi	r24, 0x3A	; 58
    8a4e:	0c f0       	brlt	.+2      	; 0x8a52 <itoa+0x2c>
    8a50:	89 5d       	subi	r24, 0xD9	; 217
    8a52:	81 93       	st	Z+, r24
    8a54:	cb 01       	movw	r24, r22
    8a56:	00 97       	sbiw	r24, 0x00	; 0
    8a58:	a1 f7       	brne	.-24     	; 0x8a42 <itoa+0x1c>
    8a5a:	16 f4       	brtc	.+4      	; 0x8a60 <itoa+0x3a>
    8a5c:	5d e2       	ldi	r21, 0x2D	; 45
    8a5e:	51 93       	st	Z+, r21
    8a60:	10 82       	st	Z, r1
    8a62:	c9 01       	movw	r24, r18
    8a64:	0c 94 bb 45 	jmp	0x8b76	; 0x8b76 <strrev>

00008a68 <ltoa>:
    8a68:	fa 01       	movw	r30, r20
    8a6a:	cf 93       	push	r28
    8a6c:	ff 93       	push	r31
    8a6e:	ef 93       	push	r30
    8a70:	22 30       	cpi	r18, 0x02	; 2
    8a72:	44 f1       	brlt	.+80     	; 0x8ac4 <ltoa+0x5c>
    8a74:	25 32       	cpi	r18, 0x25	; 37
    8a76:	34 f5       	brge	.+76     	; 0x8ac4 <ltoa+0x5c>
    8a78:	c2 2f       	mov	r28, r18
    8a7a:	e8 94       	clt
    8a7c:	ca 30       	cpi	r28, 0x0A	; 10
    8a7e:	49 f4       	brne	.+18     	; 0x8a92 <ltoa+0x2a>
    8a80:	97 fb       	bst	r25, 7
    8a82:	3e f4       	brtc	.+14     	; 0x8a92 <ltoa+0x2a>
    8a84:	90 95       	com	r25
    8a86:	80 95       	com	r24
    8a88:	70 95       	com	r23
    8a8a:	61 95       	neg	r22
    8a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    8a8e:	8f 4f       	sbci	r24, 0xFF	; 255
    8a90:	9f 4f       	sbci	r25, 0xFF	; 255
    8a92:	2c 2f       	mov	r18, r28
    8a94:	33 27       	eor	r19, r19
    8a96:	44 27       	eor	r20, r20
    8a98:	55 27       	eor	r21, r21
    8a9a:	ff 93       	push	r31
    8a9c:	ef 93       	push	r30
    8a9e:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    8aa2:	ef 91       	pop	r30
    8aa4:	ff 91       	pop	r31
    8aa6:	60 5d       	subi	r22, 0xD0	; 208
    8aa8:	6a 33       	cpi	r22, 0x3A	; 58
    8aaa:	0c f0       	brlt	.+2      	; 0x8aae <ltoa+0x46>
    8aac:	69 5d       	subi	r22, 0xD9	; 217
    8aae:	61 93       	st	Z+, r22
    8ab0:	b9 01       	movw	r22, r18
    8ab2:	ca 01       	movw	r24, r20
    8ab4:	60 50       	subi	r22, 0x00	; 0
    8ab6:	70 40       	sbci	r23, 0x00	; 0
    8ab8:	80 40       	sbci	r24, 0x00	; 0
    8aba:	90 40       	sbci	r25, 0x00	; 0
    8abc:	51 f7       	brne	.-44     	; 0x8a92 <ltoa+0x2a>
    8abe:	16 f4       	brtc	.+4      	; 0x8ac4 <ltoa+0x5c>
    8ac0:	cd e2       	ldi	r28, 0x2D	; 45
    8ac2:	c1 93       	st	Z+, r28
    8ac4:	10 82       	st	Z, r1
    8ac6:	8f 91       	pop	r24
    8ac8:	9f 91       	pop	r25
    8aca:	cf 91       	pop	r28
    8acc:	0c 94 bb 45 	jmp	0x8b76	; 0x8b76 <strrev>

00008ad0 <__mulsi_const_10>:
    8ad0:	59 2f       	mov	r21, r25
    8ad2:	48 2f       	mov	r20, r24
    8ad4:	37 2f       	mov	r19, r23
    8ad6:	26 2f       	mov	r18, r22
    8ad8:	66 0f       	add	r22, r22
    8ada:	77 1f       	adc	r23, r23
    8adc:	88 1f       	adc	r24, r24
    8ade:	99 1f       	adc	r25, r25
    8ae0:	66 0f       	add	r22, r22
    8ae2:	77 1f       	adc	r23, r23
    8ae4:	88 1f       	adc	r24, r24
    8ae6:	99 1f       	adc	r25, r25
    8ae8:	62 0f       	add	r22, r18
    8aea:	73 1f       	adc	r23, r19
    8aec:	84 1f       	adc	r24, r20
    8aee:	95 1f       	adc	r25, r21
    8af0:	66 0f       	add	r22, r22
    8af2:	77 1f       	adc	r23, r23
    8af4:	88 1f       	adc	r24, r24
    8af6:	99 1f       	adc	r25, r25
    8af8:	08 95       	ret

00008afa <ultoa>:
    8afa:	fa 01       	movw	r30, r20
    8afc:	cf 93       	push	r28
    8afe:	ff 93       	push	r31
    8b00:	ef 93       	push	r30
    8b02:	22 30       	cpi	r18, 0x02	; 2
    8b04:	cc f0       	brlt	.+50     	; 0x8b38 <ultoa+0x3e>
    8b06:	25 32       	cpi	r18, 0x25	; 37
    8b08:	bc f4       	brge	.+46     	; 0x8b38 <ultoa+0x3e>
    8b0a:	c2 2f       	mov	r28, r18
    8b0c:	2c 2f       	mov	r18, r28
    8b0e:	33 27       	eor	r19, r19
    8b10:	44 27       	eor	r20, r20
    8b12:	55 27       	eor	r21, r21
    8b14:	ff 93       	push	r31
    8b16:	ef 93       	push	r30
    8b18:	0e 94 b4 41 	call	0x8368	; 0x8368 <__udivmodsi4>
    8b1c:	ef 91       	pop	r30
    8b1e:	ff 91       	pop	r31
    8b20:	60 5d       	subi	r22, 0xD0	; 208
    8b22:	6a 33       	cpi	r22, 0x3A	; 58
    8b24:	0c f0       	brlt	.+2      	; 0x8b28 <ultoa+0x2e>
    8b26:	69 5d       	subi	r22, 0xD9	; 217
    8b28:	61 93       	st	Z+, r22
    8b2a:	b9 01       	movw	r22, r18
    8b2c:	ca 01       	movw	r24, r20
    8b2e:	60 50       	subi	r22, 0x00	; 0
    8b30:	70 40       	sbci	r23, 0x00	; 0
    8b32:	80 40       	sbci	r24, 0x00	; 0
    8b34:	90 40       	sbci	r25, 0x00	; 0
    8b36:	51 f7       	brne	.-44     	; 0x8b0c <ultoa+0x12>
    8b38:	10 82       	st	Z, r1
    8b3a:	8f 91       	pop	r24
    8b3c:	9f 91       	pop	r25
    8b3e:	cf 91       	pop	r28
    8b40:	0c 94 bb 45 	jmp	0x8b76	; 0x8b76 <strrev>

00008b44 <utoa>:
    8b44:	fb 01       	movw	r30, r22
    8b46:	9f 01       	movw	r18, r30
    8b48:	42 30       	cpi	r20, 0x02	; 2
    8b4a:	74 f0       	brlt	.+28     	; 0x8b68 <utoa+0x24>
    8b4c:	45 32       	cpi	r20, 0x25	; 37
    8b4e:	64 f4       	brge	.+24     	; 0x8b68 <utoa+0x24>
    8b50:	64 2f       	mov	r22, r20
    8b52:	77 27       	eor	r23, r23
    8b54:	0e 94 cb 45 	call	0x8b96	; 0x8b96 <__udivmodhi4>
    8b58:	80 5d       	subi	r24, 0xD0	; 208
    8b5a:	8a 33       	cpi	r24, 0x3A	; 58
    8b5c:	0c f0       	brlt	.+2      	; 0x8b60 <utoa+0x1c>
    8b5e:	89 5d       	subi	r24, 0xD9	; 217
    8b60:	81 93       	st	Z+, r24
    8b62:	cb 01       	movw	r24, r22
    8b64:	00 97       	sbiw	r24, 0x00	; 0
    8b66:	a1 f7       	brne	.-24     	; 0x8b50 <utoa+0xc>
    8b68:	10 82       	st	Z, r1
    8b6a:	c9 01       	movw	r24, r18
    8b6c:	0c 94 bb 45 	jmp	0x8b76	; 0x8b76 <strrev>

00008b70 <__ctype_isfalse>:
    8b70:	99 27       	eor	r25, r25
    8b72:	88 27       	eor	r24, r24

00008b74 <__ctype_istrue>:
    8b74:	08 95       	ret

00008b76 <strrev>:
    8b76:	dc 01       	movw	r26, r24
    8b78:	fc 01       	movw	r30, r24
    8b7a:	67 2f       	mov	r22, r23
    8b7c:	71 91       	ld	r23, Z+
    8b7e:	77 23       	and	r23, r23
    8b80:	e1 f7       	brne	.-8      	; 0x8b7a <strrev+0x4>
    8b82:	32 97       	sbiw	r30, 0x02	; 2
    8b84:	04 c0       	rjmp	.+8      	; 0x8b8e <strrev+0x18>
    8b86:	7c 91       	ld	r23, X
    8b88:	6d 93       	st	X+, r22
    8b8a:	70 83       	st	Z, r23
    8b8c:	62 91       	ld	r22, -Z
    8b8e:	ae 17       	cp	r26, r30
    8b90:	bf 07       	cpc	r27, r31
    8b92:	c8 f3       	brcs	.-14     	; 0x8b86 <strrev+0x10>
    8b94:	08 95       	ret

00008b96 <__udivmodhi4>:
    8b96:	aa 1b       	sub	r26, r26
    8b98:	bb 1b       	sub	r27, r27
    8b9a:	51 e1       	ldi	r21, 0x11	; 17
    8b9c:	07 c0       	rjmp	.+14     	; 0x8bac <__udivmodhi4_ep>

00008b9e <__udivmodhi4_loop>:
    8b9e:	aa 1f       	adc	r26, r26
    8ba0:	bb 1f       	adc	r27, r27
    8ba2:	a6 17       	cp	r26, r22
    8ba4:	b7 07       	cpc	r27, r23
    8ba6:	10 f0       	brcs	.+4      	; 0x8bac <__udivmodhi4_ep>
    8ba8:	a6 1b       	sub	r26, r22
    8baa:	b7 0b       	sbc	r27, r23

00008bac <__udivmodhi4_ep>:
    8bac:	88 1f       	adc	r24, r24
    8bae:	99 1f       	adc	r25, r25
    8bb0:	5a 95       	dec	r21
    8bb2:	a9 f7       	brne	.-22     	; 0x8b9e <__udivmodhi4_loop>
    8bb4:	80 95       	com	r24
    8bb6:	90 95       	com	r25
    8bb8:	bc 01       	movw	r22, r24
    8bba:	cd 01       	movw	r24, r26
    8bbc:	08 95       	ret

00008bbe <__prologue_saves__>:
    8bbe:	2f 92       	push	r2
    8bc0:	3f 92       	push	r3
    8bc2:	4f 92       	push	r4
    8bc4:	5f 92       	push	r5
    8bc6:	6f 92       	push	r6
    8bc8:	7f 92       	push	r7
    8bca:	8f 92       	push	r8
    8bcc:	9f 92       	push	r9
    8bce:	af 92       	push	r10
    8bd0:	bf 92       	push	r11
    8bd2:	cf 92       	push	r12
    8bd4:	df 92       	push	r13
    8bd6:	ef 92       	push	r14
    8bd8:	ff 92       	push	r15
    8bda:	0f 93       	push	r16
    8bdc:	1f 93       	push	r17
    8bde:	cf 93       	push	r28
    8be0:	df 93       	push	r29
    8be2:	cd b7       	in	r28, 0x3d	; 61
    8be4:	de b7       	in	r29, 0x3e	; 62
    8be6:	ca 1b       	sub	r28, r26
    8be8:	db 0b       	sbc	r29, r27
    8bea:	0f b6       	in	r0, 0x3f	; 63
    8bec:	f8 94       	cli
    8bee:	de bf       	out	0x3e, r29	; 62
    8bf0:	0f be       	out	0x3f, r0	; 63
    8bf2:	cd bf       	out	0x3d, r28	; 61
    8bf4:	09 94       	ijmp

00008bf6 <__epilogue_restores__>:
    8bf6:	2a 88       	ldd	r2, Y+18	; 0x12
    8bf8:	39 88       	ldd	r3, Y+17	; 0x11
    8bfa:	48 88       	ldd	r4, Y+16	; 0x10
    8bfc:	5f 84       	ldd	r5, Y+15	; 0x0f
    8bfe:	6e 84       	ldd	r6, Y+14	; 0x0e
    8c00:	7d 84       	ldd	r7, Y+13	; 0x0d
    8c02:	8c 84       	ldd	r8, Y+12	; 0x0c
    8c04:	9b 84       	ldd	r9, Y+11	; 0x0b
    8c06:	aa 84       	ldd	r10, Y+10	; 0x0a
    8c08:	b9 84       	ldd	r11, Y+9	; 0x09
    8c0a:	c8 84       	ldd	r12, Y+8	; 0x08
    8c0c:	df 80       	ldd	r13, Y+7	; 0x07
    8c0e:	ee 80       	ldd	r14, Y+6	; 0x06
    8c10:	fd 80       	ldd	r15, Y+5	; 0x05
    8c12:	0c 81       	ldd	r16, Y+4	; 0x04
    8c14:	1b 81       	ldd	r17, Y+3	; 0x03
    8c16:	aa 81       	ldd	r26, Y+2	; 0x02
    8c18:	b9 81       	ldd	r27, Y+1	; 0x01
    8c1a:	ce 0f       	add	r28, r30
    8c1c:	d1 1d       	adc	r29, r1
    8c1e:	0f b6       	in	r0, 0x3f	; 63
    8c20:	f8 94       	cli
    8c22:	de bf       	out	0x3e, r29	; 62
    8c24:	0f be       	out	0x3f, r0	; 63
    8c26:	cd bf       	out	0x3d, r28	; 61
    8c28:	ed 01       	movw	r28, r26
    8c2a:	08 95       	ret

00008c2c <_exit>:
    8c2c:	f8 94       	cli

00008c2e <__stop_program>:
    8c2e:	ff cf       	rjmp	.-2      	; 0x8c2e <__stop_program>
